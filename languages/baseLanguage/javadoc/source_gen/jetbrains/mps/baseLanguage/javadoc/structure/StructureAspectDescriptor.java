package jetbrains.mps.baseLanguage.javadoc.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.AuthorBlockDocTag", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.CodeInlineDocTag", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.CodeSnippet", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.CommentLine", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.DeprecatedBlockDocTag", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.DocMethodParameterReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.DocTypeParameterReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.HTMLElement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.InheritDocInlineDocTag", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.InlineTagCommentLinePart", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.LinkInlineDocTag", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.ParameterBlockDocTag", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.ReturnBlockDocTag", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.SeeBlockDocTag", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.SinceBlockDocTag", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.StaticFieldDocReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.ThrowsBlockDocTag", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.ValueInlineDocTag", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.javadoc.structure.VersionBlockDocTag", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.AuthorBlockDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").properties("text").create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").children(new String[]{"body", "author", "since", "version", "deprecated", "see"}, new boolean[]{true, true, true, true, false, true}).abstract_().create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("param").abstract_().create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference").references("declaration").abstract_().create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment").children(new String[]{"param"}, new boolean[]{true}).create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocReference").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference").references("classifier").create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.CodeInlineDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag").children(new String[]{"line"}, new boolean[]{true}).alias("code", "code piece").create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.CodeSnippet").super_("jetbrains.mps.baseLanguage.javadoc.structure.CommentLine").parents("jetbrains.mps.baseLanguage.javadoc.structure.CommentLine").children(new String[]{"statement"}, new boolean[]{true}).create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.CommentLine").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"part"}, new boolean[]{true}).create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 13:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.DeprecatedBlockDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").children(new String[]{"text"}, new boolean[]{false}).create();
        break;
      case 14:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.DocMethodParameterReference").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference").references("parameterDeclaration").create();
        break;
      case 15:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.DocTypeParameterReference").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference").references("typeVariableDeclaration").create();
        break;
      case 16:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment").create();
        break;
      case 17:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocReference").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference").references("fieldDeclaration").create();
        break;
      case 18:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.HTMLElement").super_("jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart").parents("jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart").properties("name").children(new String[]{"line"}, new boolean[]{true}).create();
        break;
      case 19:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.InheritDocInlineDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag").alias("inheritDoc", "inherit doc from parent").create();
        break;
      case 20:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.InlineTagCommentLinePart").super_("jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart").parents("jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart").children(new String[]{"tag"}, new boolean[]{false}).create();
        break;
      case 21:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.LinkInlineDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag").children(new String[]{"line", "reference"}, new boolean[]{true, false}).alias("link", "link to type or member").create();
        break;
      case 22:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment").children(new String[]{"param", "throwsTag", "return"}, new boolean[]{true, true, false}).create();
        break;
      case 23:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.MethodDocReference").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference").references("methodDeclaration").create();
        break;
      case 24:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.ParameterBlockDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").properties("text").children(new String[]{"parameter"}, new boolean[]{false}).create();
        break;
      case 25:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.ReturnBlockDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").properties("text").create();
        break;
      case 26:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.SeeBlockDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").properties("text").children(new String[]{"reference"}, new boolean[]{false}).create();
        break;
      case 27:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.SinceBlockDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").properties("text").create();
        break;
      case 28:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.StaticFieldDocReference").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference").references("staticFieldDeclaration").create();
        break;
      case 29:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart").super_("jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart").parents("jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart").properties("text").create();
        break;
      case 30:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.ThrowsBlockDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").properties("text").children(new String[]{"exceptionType"}, new boolean[]{false}).create();
        break;
      case 31:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.ValueInlineDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag").children(new String[]{"variableReference"}, new boolean[]{false}).alias("value", "constant value").create();
        break;
      case 32:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.javadoc.structure.VersionBlockDocTag").super_("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").parents("jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag").properties("text").create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.baseLanguage.javadoc.structure.AuthorBlockDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment", "jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference", "jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference", "jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference", "jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment", "jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocReference", "jetbrains.mps.baseLanguage.javadoc.structure.CodeInlineDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.CodeSnippet", "jetbrains.mps.baseLanguage.javadoc.structure.CommentLine", "jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart", "jetbrains.mps.baseLanguage.javadoc.structure.DeprecatedBlockDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.DocMethodParameterReference", "jetbrains.mps.baseLanguage.javadoc.structure.DocTypeParameterReference", "jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment", "jetbrains.mps.baseLanguage.javadoc.structure.FieldDocReference", "jetbrains.mps.baseLanguage.javadoc.structure.HTMLElement", "jetbrains.mps.baseLanguage.javadoc.structure.InheritDocInlineDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.InlineTagCommentLinePart", "jetbrains.mps.baseLanguage.javadoc.structure.LinkInlineDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment", "jetbrains.mps.baseLanguage.javadoc.structure.MethodDocReference", "jetbrains.mps.baseLanguage.javadoc.structure.ParameterBlockDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.ReturnBlockDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.SeeBlockDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.SinceBlockDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.StaticFieldDocReference", "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart", "jetbrains.mps.baseLanguage.javadoc.structure.ThrowsBlockDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.ValueInlineDocTag", "jetbrains.mps.baseLanguage.javadoc.structure.VersionBlockDocTag"};
}
