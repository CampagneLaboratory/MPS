package jetbrains.mps.closures.test.helper;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest4;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.generator.template.TemplateQueryContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.helper.ClosureLiteralTarget;
import jetbrains.mps.baseLanguage.closures.behavior.FunctionType_Behavior;
import jetbrains.mps.baseLanguage.closures.helper.Values;
import junit.framework.Assert;
import jetbrains.mps.lang.pattern.util.MatchingUtil;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;

@MPSLaunch
public class ClosureLiteraltargetFunType_Test extends BaseTransformationTest4 {
  @Test
  public void test_throwsOrder() throws Throwable {
    this.initTest("${mps_home}/languages/baseLanguage/closures/solutions/closures.test/closures.test.mpr", "r:1ec34e97-b5da-4226-87b0-e15ce1eda255(jetbrains.mps.closures.test.helper)");
    this.runTest("jetbrains.mps.closures.test.helper.ClosureLiteraltargetFunType_Test$TestBody", "test_throwsOrder", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_throwsOrder() throws Exception {
      this.addNodeById("6374750171056867594");
      this.addNodeById("6374750171056867606");
      TemplateQueryContext genContext = this.getContext();
      SNode literal = SNodeOperations.cast(this.getNodeById("6374750171056867612"), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral");
      SNode funtype = SNodeOperations.cast(this.getNodeById("6374750171056867639"), "jetbrains.mps.baseLanguage.closures.structure.FunctionType");
      new ClosureLiteralTarget(genContext).setTarget(literal, FunctionType_Behavior.call_getDeclarationRuntimeType_1230319610063(funtype));
      this.assertLiteralTarget(genContext, literal, _quotation_createNode_as9vne_c0a4a0());
    }

    public TemplateQueryContext getContext() {
      return (TemplateQueryContext) new MockTemplateQueryContext();
    }

    public void assertLiteralTarget(TemplateQueryContext gencontext, SNode literal, SNode expected) {
      SNode target = (SNode) Values.LITERAL_TARGET.get(gencontext, literal);
      System.out.println("*** target: " + target + " but expected " + expected);
      Assert.assertTrue(MatchingUtil.matchNodes(expected, target));
    }

    private static SNode _quotation_createNode_as9vne_c0a4a0() {
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
      quotedNode_1.setReference("classifier", jetbrains.mps.smodel.SReference.create("classifier", quotedNode_1, SModelReference.fromString("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.baseLanguage.closures.runtime(MPS.Core/jetbrains.mps.baseLanguage.closures.runtime@java_stub)"), SNodeId.fromString("~_FunctionTypes$_void_P0_E2")));
      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
      quotedNode_2.setReference("classifier", jetbrains.mps.smodel.SReference.create("classifier", quotedNode_2, SModelReference.fromString("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), SNodeId.fromString("~InterruptedException")));
      quotedNode_1.addChild("parameter", quotedNode_2);
      quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
      quotedNode_3.setReference("classifier", jetbrains.mps.smodel.SReference.create("classifier", quotedNode_3, SModelReference.fromString("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), SNodeId.fromString("~IllegalAccessException")));
      quotedNode_1.addChild("parameter", quotedNode_3);
      return quotedNode_1;
    }
  }
}
