package jetbrains.mps.closures.test.helper;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest4;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.baseLanguage.closures.helper.Adaptation;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.helper.Values;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

@MPSLaunch
public class Adaptation_Test extends BaseTransformationTest4 {
  @Test
  public void test_baz() throws Throwable {
    this.initTest("${mps_home}/languages/baseLanguage/closures/solutions/closures.test/closures.test.mpr", "r:1ec34e97-b5da-4226-87b0-e15ce1eda255(jetbrains.mps.closures.test.helper)");
    this.runTest("jetbrains.mps.closures.test.helper.Adaptation_Test$TestBody", "test_baz", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_baz() throws Exception {
      this.addNodeById("7178287329507546170");
      this.addNodeById("7178287329507546163");
      MockTemplateQueryContext genContext = new MockTemplateQueryContext();
      Adaptation adaptation = new Adaptation(genContext);
      SNode literal = SNodeOperations.cast(this.getNodeById("7178287329507546187"), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral");
      adaptation.setTarget(literal, new Adaptation_Test.TestBody.QuotationClass_aguh3z_a1a0f0a0().createNode(SNodeOperations.cast(this.getNodeById("7178287329507546171"), "jetbrains.mps.baseLanguage.structure.Interface")));
      Object target = Values.LITERAL_TARGET.get(genContext, literal);
      System.out.println("*** target: " + target);
      System.out.println("*** sessionObjects: " + genContext.sessionObjects);
    }

    public static class QuotationClass_aguh3z_a1a0f0a0 {
      public QuotationClass_aguh3z_a1a0f0a0() {
      }

      public SNode createNode(Object parameter_3) {
        SNode result = null;
        Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
        SNode quotedNode_1 = null;
        {
          quotedNode_1 = (SNode) parameter_3;
          SNode quotedNode1_2;
          if (_parameterValues_129834374.contains(quotedNode_1)) {
            quotedNode1_2 = HUtil.copyIfNecessary(quotedNode_1);
          } else {
            _parameterValues_129834374.add(quotedNode_1);
            quotedNode1_2 = quotedNode_1;
          }
          if (quotedNode1_2 != null) {
            result = quotedNode1_2;
          }
        }
        return result;
      }
    }
  }
}
