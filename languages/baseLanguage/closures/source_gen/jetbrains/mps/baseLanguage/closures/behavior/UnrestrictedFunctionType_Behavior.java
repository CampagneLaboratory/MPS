package jetbrains.mps.baseLanguage.closures.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class UnrestrictedFunctionType_Behavior {
  public static void init(SNode thisNode) {
  }

  public static String virtual_getPresentation_1213877396640(SNode thisNode) {
    StringBuffer sb = new StringBuffer("{");
    String sep = "";
    for (SNode pt : SLinkOperations.getTargets(thisNode, "parameterType", true)) {
      sb.append(sep).append(BehaviorReflection.invokeVirtual(String.class, pt, "virtual_getPresentation_1213877396640", new Object[]{}));
      sep = ",";
    }
    sb.append("==>").append(BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(thisNode, "terminateType", true), "virtual_getPresentation_1213877396640", new Object[]{}));
    return sb.append("}").toString();
  }

  public static String virtual_getRuntimeClassName_1230472987259(SNode thisNode) {
    return "_UnrestrictedFunctionTypes";
  }

  public static String virtual_getRuntimeSignature_1213877404927(SNode thisNode) {
    StringBuilder sb = new StringBuilder();
    if ((BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), thisNode, "virtual_getResultType_1230475757059", new Object[]{}) != null)) {
      sb.append("_return");
    } else {
      sb.append("_void");
    }
    if ((BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), thisNode, "virtual_getTerminateType_1232032188607", new Object[]{}) != null)) {
      sb.append("_terminate");
    } else {
      sb.append("_void");
    }
    sb.append("_P").append(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "parameterType", true)).count());
    sb.append("_E").append(ListSequence.fromList(FunctionType_Behavior.call_getNormalizedThrowsTypes_3448422702164385781(thisNode)).count());
    return sb.toString();
  }

  public static String call_getRuntimeAdapterClassName_1231423631922(SNode thisNode) {
    return "_UnrestrictedClosures";
  }

  public static SNode virtual_getTerminateType_1232032188607(SNode thisNode) {
    SNode tt = SLinkOperations.getTarget(thisNode, "terminateType", true);
    if (SNodeOperations.isInstanceOf(tt, "jetbrains.mps.lang.typesystem.structure.MeetType")) {
      List<SNode> args = SLinkOperations.getTargets(SNodeOperations.cast(tt, "jetbrains.mps.lang.typesystem.structure.MeetType"), "argument", true);
      tt = ListSequence.fromList(args).getElement(0);
    }
    return ((tt != null) && !(SNodeOperations.isInstanceOf(tt, "jetbrains.mps.baseLanguage.structure.VoidType")) ?
      tt :
      null
    );
  }

  @Deprecated
  public static String call_getRuntimeSignature_3841277577642912754(SNode thisNode) {
    return BehaviorReflection.invokeVirtual(String.class, thisNode, "virtual_getRuntimeSignature_1213877404927", new Object[]{});
  }

  @Deprecated
  public static String callSuper_getRuntimeSignature_3841277577642912754(SNode thisNode, String callerConceptFqName) {
    return BehaviorManager.getInstance().invokeSuper(String.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"), callerConceptFqName, "virtual_getRuntimeSignature_1213877404927", new Class[]{SNode.class}, new Object[]{});
  }
}
