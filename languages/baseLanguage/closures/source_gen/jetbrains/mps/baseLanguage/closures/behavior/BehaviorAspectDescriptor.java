package jetbrains.mps.baseLanguage.closures.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myFunctionType_BehaviorDescriptor = new FunctionType_BehaviorDescriptor();
  private final BHDescriptor myInvokeFunctionExpression_BehaviorDescriptor = new InvokeFunctionExpression_BehaviorDescriptor();
  private final BHDescriptor myClosureLiteral_BehaviorDescriptor = new ClosureLiteral_BehaviorDescriptor();
  private final BHDescriptor myInvokeExpression_BehaviorDescriptor = new InvokeExpression_BehaviorDescriptor();
  private final BHDescriptor myYieldStatement_BehaviorDescriptor = new YieldStatement_BehaviorDescriptor();
  private final BHDescriptor myUnboundClosureParameterDeclaration_BehaviorDescriptor = new UnboundClosureParameterDeclaration_BehaviorDescriptor();
  private final BHDescriptor myInvokeFunctionOperation_BehaviorDescriptor = new InvokeFunctionOperation_BehaviorDescriptor();
  private final BHDescriptor myYieldAllStatement_BehaviorDescriptor = new YieldAllStatement_BehaviorDescriptor();
  private final BHDescriptor myUnrestrictedClosureLiteral_BehaviorDescriptor = new UnrestrictedClosureLiteral_BehaviorDescriptor();
  private final BHDescriptor myClosureControlStatement_BehaviorDescriptor = new ClosureControlStatement_BehaviorDescriptor();
  private final BHDescriptor myControlAbstractionContainer_BehaviorDescriptor = new ControlAbstractionContainer_BehaviorDescriptor();
  private final BHDescriptor myControlAbstractionDeclaration_BehaviorDescriptor = new ControlAbstractionDeclaration_BehaviorDescriptor();
  private final BHDescriptor myUnrestrictedFunctionType_BehaviorDescriptor = new UnrestrictedFunctionType_BehaviorDescriptor();
  private final BHDescriptor myCompactInvokeFunctionExpression_BehaviorDescriptor = new CompactInvokeFunctionExpression_BehaviorDescriptor();
  private final BHDescriptor myFunctionMethodDeclaration_BehaviorDescriptor = new FunctionMethodDeclaration_BehaviorDescriptor();
  private final BHDescriptor myAbstractFunctionType_BehaviorDescriptor = new AbstractFunctionType_BehaviorDescriptor();

  private final long[] myConceptBehaviorIds;

  public BehaviorAspectDescriptor() {
    myConceptBehaviorIds = new long[16];
    myConceptBehaviorIds[0] = 0x1174a4d19ffL;
    myConceptBehaviorIds[1] = 0x1174a964795L;
    myConceptBehaviorIds[2] = 0x1174bed3125L;
    myConceptBehaviorIds[3] = 0x117545d385aL;
    myConceptBehaviorIds[4] = 0x11797183e82L;
    myConceptBehaviorIds[5] = 0x118276b7086L;
    myConceptBehaviorIds[6] = 0x11d67349093L;
    myConceptBehaviorIds[7] = 0x11e25fc6c63L;
    myConceptBehaviorIds[8] = 0x11e49cdf7cbL;
    myConceptBehaviorIds[9] = 0x11e49cfed99L;
    myConceptBehaviorIds[10] = 0x11e49db3870L;
    myConceptBehaviorIds[11] = 0x11e49dc8097L;
    myConceptBehaviorIds[12] = 0x11e505b9d83L;
    myConceptBehaviorIds[13] = 0x11fb8425aa8L;
    myConceptBehaviorIds[14] = 0x42d79e63a78a7784L;
    myConceptBehaviorIds[15] = 0x4de23a15f719357dL;
  }

  @Deprecated
  @Override
  public BehaviorDescriptor getDescriptor(String fqName) {
    return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
  }

  @Nullable
  @Override
  public BHDescriptor getDescriptor(@NotNull SConceptId conceptId) {
    int behaviorIndex = Arrays.binarySearch(myConceptBehaviorIds, conceptId.getIdValue());
    switch (behaviorIndex) {
      case 0:
        return myFunctionType_BehaviorDescriptor;
      case 1:
        return myInvokeFunctionExpression_BehaviorDescriptor;
      case 2:
        return myClosureLiteral_BehaviorDescriptor;
      case 3:
        return myInvokeExpression_BehaviorDescriptor;
      case 4:
        return myYieldStatement_BehaviorDescriptor;
      case 5:
        return myUnboundClosureParameterDeclaration_BehaviorDescriptor;
      case 6:
        return myInvokeFunctionOperation_BehaviorDescriptor;
      case 7:
        return myYieldAllStatement_BehaviorDescriptor;
      case 8:
        return myUnrestrictedClosureLiteral_BehaviorDescriptor;
      case 9:
        return myClosureControlStatement_BehaviorDescriptor;
      case 10:
        return myControlAbstractionContainer_BehaviorDescriptor;
      case 11:
        return myControlAbstractionDeclaration_BehaviorDescriptor;
      case 12:
        return myUnrestrictedFunctionType_BehaviorDescriptor;
      case 13:
        return myCompactInvokeFunctionExpression_BehaviorDescriptor;
      case 14:
        return myFunctionMethodDeclaration_BehaviorDescriptor;
      case 15:
        return myAbstractFunctionType_BehaviorDescriptor;
      default:
        return null;
    }
  }
}
