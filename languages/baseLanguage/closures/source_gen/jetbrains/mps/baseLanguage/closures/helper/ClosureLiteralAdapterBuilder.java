package jetbrains.mps.baseLanguage.closures.helper;

/*Generated by MPS */

import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.closures.constraints.ClassifierTypeUtil;
import java.util.Iterator;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.closures.behavior.FunctionMethodDeclaration_Behavior;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;

public class ClosureLiteralAdapterBuilder {
  private TemplateQueryContext genContext;

  public ClosureLiteralAdapterBuilder(TemplateQueryContext genContext) {
    this.genContext = genContext;
  }

  public boolean hasAdapterClass(SNode literal) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(literal), "jetbrains.mps.baseLanguage.structure.IMethodCall") && (lookupAdapterClassAnnotation(literal) != null);
  }

  public SNode buildAdapterClassType(SNode literal, SNode targetFunType) {
    SNode annInst = lookupAdapterClassAnnotation(literal);
    SNode adapterClass = findAdapterClassDeclaration(literal, annInst);
    SNode adapterClassFunctionType = getAdapterClassFunctionType(adapterClass);

    SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType", null);
    SLinkOperations.setTarget(result, "classifier", adapterClass, false);
    for (SNode tvd : SLinkOperations.getTargets(adapterClass, "typeVariableDeclaration", true)) {
      SNode tvr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.TypeVariableReference", null);
      SLinkOperations.setTarget(tvr, "typeVariableDeclaration", tvd, false);
      ListSequence.fromList(SLinkOperations.getTargets(result, "parameter", true)).addElement(tvr);
      replaceWithTarget(tvr, adapterClassFunctionType, targetFunType);
    }
    return result;
  }

  private void replaceWithTarget(SNode tvr, SNode adapterFunType, SNode targetFunType) {
    if (SLinkOperations.getTarget(tvr, "typeVariableDeclaration", false) == SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(adapterFunType, "resultType", true), "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), "typeVariableDeclaration", false)) {
      SNodeOperations.replaceWithAnother(tvr, ClassifierTypeUtil.getTypeCoercedToClassifierType(SNodeOperations.copyNode(SLinkOperations.getTarget(targetFunType, "resultType", true))));
    } else {
      Iterator<SNode> adapterParamIt = ListSequence.fromList(SLinkOperations.getTargets(adapterFunType, "parameterType", true)).iterator();
      Iterator<SNode> targetParamIt = ListSequence.fromList(SLinkOperations.getTargets(targetFunType, "parameterType", true)).iterator();
      while (adapterParamIt.hasNext() && targetParamIt.hasNext()) {
        SNode targetParam = targetParamIt.next();
        if (SLinkOperations.getTarget(tvr, "typeVariableDeclaration", false) == SLinkOperations.getTarget(SNodeOperations.as(adapterParamIt.next(), "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), "typeVariableDeclaration", false)) {
          SNodeOperations.replaceWithAnother(tvr, ClassifierTypeUtil.getTypeCoercedToClassifierType(SNodeOperations.copyNode(targetParam)));
          break;
        }
      }
    }
  }

  private SNode lookupAdapterClassAnnotation(SNode literal) {
    final SNode adapterAnn = SLinkOperations.getTarget(new ClosureLiteralAdapterBuilder.QuotationClass_wzrebk_a0a0a0d().createNode(), "annotation", false);
    return ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.as(SNodeOperations.getParent(literal), "jetbrains.mps.baseLanguage.structure.IMethodCall"), "baseMethodDeclaration", false), "parameter", true)).getElement(SNodeOperations.getIndexInParent(literal)), "jetbrains.mps.baseLanguage.structure.HasAnnotation"), "annotation", true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode ann) {
        return SLinkOperations.getTarget(ann, "annotation", false) == adapterAnn;
      }
    });
  }

  private SNode findAdapterClassDeclaration(SNode literal, final SNode annInst) {
    return ListSequence.fromList(SModelOperations.getNodesIncludingImported(SNodeOperations.getModel(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(literal), "jetbrains.mps.baseLanguage.structure.IMethodCall"), "baseMethodDeclaration", false)), genContext.getScope(), "jetbrains.mps.baseLanguage.structure.ClassConcept")).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode cls) {
        return SPropertyOperations.getString(cls, "name").equals(SPropertyOperations.getString(SNodeOperations.cast(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(annInst, "value", true)).first(), "value", true), "jetbrains.mps.baseLanguage.structure.StringLiteral"), "value"));
      }
    });
  }

  private SNode getAdapterClassFunctionType(SNode cls) {
    return FunctionMethodDeclaration_Behavior.call_functionType_2857237956452412451(SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(cls, "method", true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode md) {
        return SNodeOperations.isInstanceOf(md, "jetbrains.mps.baseLanguage.closures.structure.FunctionMethodDeclaration");
      }
    }), "jetbrains.mps.baseLanguage.closures.structure.FunctionMethodDeclaration"));
  }

  public static class QuotationClass_wzrebk_a0a0a0d {
    public QuotationClass_wzrebk_a0a0a0d() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnnotationInstance", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("annotation", quotedNode1_2, SModelReference.fromString("r:35e808a0-0758-4b03-9053-4675a7ced44c(jetbrains.mps.baseLanguage.closures.runtime)"), SNodeId.fromString("8649343297855554552")));
        result = quotedNode1_2;
      }
      return result;
    }
  }
}
