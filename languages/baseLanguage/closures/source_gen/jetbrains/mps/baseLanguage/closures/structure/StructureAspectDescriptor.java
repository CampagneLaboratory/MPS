package jetbrains.mps.baseLanguage.closures.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.AbstractFunctionType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.ClosureArgReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.ControlAbstractionContainer", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.ControlAbstractionDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.ControlClosureLiteral", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.FunctionMethodDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.FunctionType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.InvokeExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.PairOfInts", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.UnboundClosureParameterDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.YieldAllStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.closures.structure.YieldStatement", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.AbstractFunctionType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").children(new String[]{"parameterType", "resultType"}, new boolean[]{true, false}).alias("{ ~~> }", "abstract function type").staticScope(StaticScope.NONE).create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.ClosureArgReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"original"}, new boolean[]{false}).create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("controlMethod").children(new String[]{"controlClosure", "actualParameter"}, new boolean[]{false, true}).staticScope(StaticScope.NONE).create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IStatementListContainer", "jetbrains.mps.baseLanguage.structure.IContainsStatementList", "jetbrains.mps.baseLanguage.structure.IMethodLike", "jetbrains.mps.baseLanguage.structure.IFinalWrapper", "jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter", "jetbrains.mps.lang.core.structure.ScopeProvider").properties("forceMultiLine").children(new String[]{"parameter", "body"}, new boolean[]{true, false}).alias("{ => <body> }", "closure literal").staticScope(StaticScope.NONE).create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"function", "parameter"}, new boolean[]{false, true}).alias("", "invoke function").staticScope(StaticScope.NONE).create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.ControlAbstractionContainer").super_("jetbrains.mps.baseLanguage.structure.Classifier").parents("jetbrains.mps.baseLanguage.structure.Classifier", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"controlAbstraction"}, new boolean[]{true}).create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.ControlAbstractionDeclaration").super_("jetbrains.mps.baseLanguage.structure.GenericDeclaration").parents("jetbrains.mps.baseLanguage.structure.GenericDeclaration", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.lang.core.structure.IResolveInfo", "jetbrains.mps.baseLanguage.structure.HasAnnotation").children(new String[]{"parameter", "body"}, new boolean[]{true, false}).create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.ControlClosureLiteral").super_("jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral").parents("jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral").staticScope(StaticScope.NONE).create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.FunctionMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").alias("function", "").create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.FunctionType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").references("runtimeIface").children(new String[]{"parameterType", "resultType", "throwsType"}, new boolean[]{true, false, true}).alias("{ => }", "function type").staticScope(StaticScope.NONE).create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.InvokeExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"parameter"}, new boolean[]{true}).alias("invoke", "this function invocation expression").staticScope(StaticScope.NONE).create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDeprecatable", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"function", "parameter"}, new boolean[]{false, true}).alias("invoke", "function invocation expression").staticScope(StaticScope.NONE).create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").children(new String[]{"parameter"}, new boolean[]{true}).alias("invoke", "invoke function").staticScope(StaticScope.NONE).create();
        break;
      case 13:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.PairOfInts").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("first", "second").create();
        break;
      case 14:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("value").create();
        break;
      case 15:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.UnboundClosureParameterDeclaration").super_("jetbrains.mps.baseLanguage.structure.ParameterDeclaration").parents("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").abstract_().alias("? <name>", "unbound closure parameter declaration").create();
        break;
      case 16:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral").super_("jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral").parents("jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral").alias("{ ==> <body> }", "unrestricted closure literal").staticScope(StaticScope.NONE).create();
        break;
      case 17:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType").super_("jetbrains.mps.baseLanguage.closures.structure.FunctionType").parents("jetbrains.mps.baseLanguage.closures.structure.FunctionType").children(new String[]{"terminateType"}, new boolean[]{false}).alias("{ ==> }", "unrestricted function type").staticScope(StaticScope.NONE).create();
        break;
      case 18:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.YieldAllStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"expression"}, new boolean[]{false}).alias("yieldAll", "yield all elements in a sequence").staticScope(StaticScope.NONE).create();
        break;
      case 19:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.closures.structure.YieldStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"expression"}, new boolean[]{false}).alias("yield", "yield next element").staticScope(StaticScope.NONE).create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.baseLanguage.closures.structure.AbstractFunctionType", "jetbrains.mps.baseLanguage.closures.structure.ClosureArgReference", "jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement", "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", "jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression", "jetbrains.mps.baseLanguage.closures.structure.ControlAbstractionContainer", "jetbrains.mps.baseLanguage.closures.structure.ControlAbstractionDeclaration", "jetbrains.mps.baseLanguage.closures.structure.ControlClosureLiteral", "jetbrains.mps.baseLanguage.closures.structure.FunctionMethodDeclaration", "jetbrains.mps.baseLanguage.closures.structure.FunctionType", "jetbrains.mps.baseLanguage.closures.structure.InvokeExpression", "jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionExpression", "jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionOperation", "jetbrains.mps.baseLanguage.closures.structure.PairOfInts", "jetbrains.mps.baseLanguage.closures.structure.StringPropertyHolder", "jetbrains.mps.baseLanguage.closures.structure.UnboundClosureParameterDeclaration", "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral", "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType", "jetbrains.mps.baseLanguage.closures.structure.YieldAllStatement", "jetbrains.mps.baseLanguage.closures.structure.YieldStatement"};
}
