package jetbrains.mps.baseLanguage.closures.helper;

/*Generated by MPS */

import jetbrains.mps.generator.template.TemplateQueryContext;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.closures.behavior.FunctionType_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class AdaptableClassifierTarget {
  private TemplateQueryContext genContext;
  public AdaptableClassifierTarget(TemplateQueryContext genContext) {
    this.genContext = genContext;
  }
  public void setTarget(SNode adaptable, final SNode target) {
    List<SNode> allAdaptable = (List<SNode>) genContext.getStepObject(Keys.ALL_NEEDS_ADAPTED);
    if (allAdaptable == null) {
      allAdaptable = ListSequence.fromList(new ArrayList<SNode>());
      genContext.putStepObject(Keys.ALL_NEEDS_ADAPTED, allAdaptable);
    }
    if (!(ListSequence.fromList(allAdaptable).contains(SLinkOperations.getTarget(adaptable, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier"))))) {
      ListSequence.fromList(allAdaptable).addElement(SLinkOperations.getTarget(adaptable, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier")));
    }
    List<SNode> trgList = getOrCreateTargets(adaptable);
    if (!(ListSequence.fromList(trgList).any(new IWhereFilter<SNode>() {
      @Override
      public boolean accept(SNode cr) {
        return BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(target, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier")), "virtual_getFqName_1213877404258", new Object[]{}).equals(BehaviorReflection.invokeVirtual(String.class, cr, "virtual_getFqName_1213877404258", new Object[]{}));
      }
    }))) {
      ListSequence.fromList(trgList).addElement(SLinkOperations.getTarget(target, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier")));
      Values.ADAPTABLE.set(genContext, SLinkOperations.getTarget(target, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier")), SLinkOperations.getTarget(adaptable, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier")));
    }
  }
  private List<SNode> getOrCreateTargets(SNode adaptable) {
    List<SNode> trgList = (List<SNode>) genContext.getStepObject(Keys.NEEDS_ADAPTER.compose(BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(adaptable, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier")), "virtual_getFqName_1213877404258", new Object[]{})));
    if (trgList == null) {
      trgList = ListSequence.fromList(new ArrayList<SNode>());
      genContext.putStepObject(Keys.NEEDS_ADAPTER.compose(BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(adaptable, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier")), "virtual_getFqName_1213877404258", new Object[]{})), trgList);
    }
    return trgList;
  }
  public String getTargetName(SNode target) {
    SNode adaptable = (SNode) Values.ADAPTABLE.get(genContext, target);
    String aname = SPropertyOperations.getString(adaptable, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name"));
    int aldidx = aname.lastIndexOf(".");
    aname = (aldidx >= 0 ? aname.substring(aldidx + 1) : aname);
    String tname = SPropertyOperations.getString(target, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name"));
    int tldidx = tname.lastIndexOf(".");
    tname = (tldidx >= 0 ? tname.substring(tldidx + 1) : tname);
    return aname + "_to_" + tname + "_adapter";
  }
  public SNode getTarget(SNode expr) {
    SNode ntype = FunctionType_Behavior.call_getDeclarationRuntimeType_1230319610063(SNodeOperations.as(TypeChecker.getInstance().getTypeOf(expr), "jetbrains.mps.baseLanguage.closures.structure.FunctionType"));
    ntype = (ntype == null ? TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(expr), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"), true) : ntype);
    assert ntype != null;
    final String trgFQname = (String) Values.PREP_DATA.get(genContext, expr);
    SNode target = ListSequence.fromList(getTargets(SLinkOperations.getTarget(ntype, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier")))).findFirst(new IWhereFilter<SNode>() {
      @Override
      public boolean accept(SNode cr) {
        return trgFQname.equals(BehaviorReflection.invokeVirtual(String.class, cr, "virtual_getFqName_1213877404258", new Object[]{}));
      }
    });
    assert Values.ADAPTABLE.get(genContext, target) != null;
    return target;
  }
  public List<SNode> getTargets(SNode adaptable) {
    return (List<SNode>) genContext.getStepObject(Keys.NEEDS_ADAPTER.compose(BehaviorReflection.invokeVirtual(String.class, adaptable, "virtual_getFqName_1213877404258", new Object[]{})));
  }
  public List<SNode> getAllAdaptable() {
    return (List<SNode>) genContext.getStepObject(Keys.ALL_NEEDS_ADAPTED);
  }
  public boolean hasAdaptable() {
    return ListSequence.fromList(getAllAdaptable()).isNotEmpty();
  }
}
