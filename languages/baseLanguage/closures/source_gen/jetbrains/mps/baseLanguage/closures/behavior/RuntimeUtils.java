package jetbrains.mps.baseLanguage.closures.behavior;

/*Generated by MPS */

import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.module.SRepositoryContentAdapter;
import jetbrains.mps.extapi.module.SRepositoryRegistry;
import jetbrains.mps.classloading.ClassLoaderManager;
import jetbrains.mps.classloading.MPSClassesListenerAdapter;
import java.util.Set;
import jetbrains.mps.module.ReloadableModuleBase;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class RuntimeUtils {
  private static Map<String, SNode> RUNTIME_CLASSIFIERS = null;
  private static Map<String, SNode> STATIC_RUNTIME_CLASSIFIERS = null;
  public RuntimeUtils() {
  }
  public static SModel getRuntimeModel() {
    return SNodeOperations.getModel(SNodeOperations.getNode("6ed54515-acc8-4d1e-a16c-9fd6cfe951ea/f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.baseLanguage.closures.runtime(MPS.Core/jetbrains.mps.baseLanguage.closures.runtime@java_stub)", "~_UnrestrictedClosures"));
  }
  public static SModel getStaticRuntimeModel() {
    return SNodeOperations.getModel(SNodeOperations.getNode("6ed54515-acc8-4d1e-a16c-9fd6cfe951ea/f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.baseLanguage.closures.runtime(MPS.Core/jetbrains.mps.baseLanguage.closures.runtime@java_stub)", "~_FunctionTypes"));
  }
  public static Map<String, SNode> getRuntimeClassifiersMap() {
    synchronized (RuntimeUtils.class) {
      if (RUNTIME_CLASSIFIERS == null) {
        RUNTIME_CLASSIFIERS = MapSequence.fromMap(new HashMap<String, SNode>());
        for (SNode cls : SModelOperations.nodes(getRuntimeModel(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"))) {
          MapSequence.fromMap(RUNTIME_CLASSIFIERS).put(SPropertyOperations.getString(cls, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x11a134c900dL, "nestedName")), cls);
        }

        final SRepositoryContentAdapter rcAdapter = new SRepositoryContentAdapter() {
          @Override
          public void modelReplaced(SModel model) {
            synchronized (RuntimeUtils.class) {
              RUNTIME_CLASSIFIERS = null;
            }
            SRepositoryRegistry.getInstance().removeGlobalListener(this);
          }
        };
        SRepositoryRegistry.getInstance().addGlobalListener(rcAdapter);

        // FIXME looks bad 
        ClassLoaderManager.getInstance().addClassesHandler(new MPSClassesListenerAdapter() {
          @Override
          public void beforeClassesUnloaded(Set<? extends ReloadableModuleBase> modules) {
            synchronized (RuntimeUtils.class) {
              RuntimeUtils.RUNTIME_CLASSIFIERS = null;
            }
            ClassLoaderManager.getInstance().removeClassesHandler(this);
            SRepositoryRegistry.getInstance().removeGlobalListener(rcAdapter);
          }
        });

      }
    }
    return RUNTIME_CLASSIFIERS;
  }
  public static Map<String, SNode> getStaticRuntimeClassifier() {
    synchronized (RuntimeUtils.class) {
      if (STATIC_RUNTIME_CLASSIFIERS == null) {
        STATIC_RUNTIME_CLASSIFIERS = MapSequence.fromMap(new HashMap<String, SNode>());
        for (SNode cls : ListSequence.fromList(SModelOperations.roots(getStaticRuntimeModel(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"))).translate(new ITranslator2<SNode, SNode>() {
          public Iterable<SNode> translate(SNode it) {
            return SLinkOperations.getChildren(it, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"));
          }
        }).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"));
          }
        }).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"));
          }
        })) {
          MapSequence.fromMap(STATIC_RUNTIME_CLASSIFIERS).put(SPropertyOperations.getString(cls, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x11a134c900dL, "nestedName")), cls);
        }

        final SRepositoryContentAdapter rcAdapter = new SRepositoryContentAdapter() {
          @Override
          public void modelReplaced(SModel model) {
            synchronized (RuntimeUtils.class) {
              STATIC_RUNTIME_CLASSIFIERS = null;
            }
            SRepositoryRegistry.getInstance().removeGlobalListener(this);
          }
        };
        SRepositoryRegistry.getInstance().addGlobalListener(rcAdapter);

        ClassLoaderManager.getInstance().addClassesHandler(new MPSClassesListenerAdapter() {
          @Override
          public void beforeClassesUnloaded(Set<? extends ReloadableModuleBase> modules) {
            synchronized (RuntimeUtils.class) {
              STATIC_RUNTIME_CLASSIFIERS = null;
            }
            ClassLoaderManager.getInstance().removeClassesHandler(this);
            SRepositoryRegistry.getInstance().removeGlobalListener(rcAdapter);
          }
        });
      }
    }
    return STATIC_RUNTIME_CLASSIFIERS;
  }
}
