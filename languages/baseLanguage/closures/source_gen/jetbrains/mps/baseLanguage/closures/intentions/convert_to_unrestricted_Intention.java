package jetbrains.mps.baseLanguage.closures.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class convert_to_unrestricted_Intention extends BaseIntention {
  public convert_to_unrestricted_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.closures.structure.FunctionType";
  }

  public String getPresentation() {
    return "convert_to_unrestricted";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.closures.intentions.convert_to_unrestricted_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:539733f4-9063-4002-b53b-67e3c92dcc39(jetbrains.mps.baseLanguage.closures.intentions@2_0)", "1229783473290");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Convert to Unrestricted Function Type";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.getConceptDeclaration(node) == SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.FunctionType");
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode uft = SNodeFactoryOperations.replaceWithNewChild(node, "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType");
    List<SNode> ptypes = SLinkOperations.getTargets(node, "parameterType", true);
    for (SNode pt : ptypes) {
      ListSequence.fromList(SLinkOperations.getTargets(uft, "parameterType", true)).addElement(SNodeOperations.detachNode(pt));
    }
    SLinkOperations.setTarget(uft, "resultType", SNodeOperations.detachNode(SLinkOperations.getTarget(node, "resultType", true)), true);
    List<SNode> ttypes = SLinkOperations.getTargets(node, "throwsType", true);
    for (SNode tt : ttypes) {
      ListSequence.fromList(SLinkOperations.getTargets(uft, "throwsType", true)).addElement(SNodeOperations.detachNode(tt));
    }
  }
}
