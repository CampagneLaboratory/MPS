package jetbrains.mps.baseLanguage.closures.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.baseLanguage.behavior.IOperation_Behavior;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class typeof_InvokeFunctionOperation_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_InvokeFunctionOperation_InferenceRule() {
  }

  public void applyRule(final SNode invoke, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    final List<SNode> ptypes = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode p : SLinkOperations.getTargets(invoke, "parameter", true)) {
      final SNode T_typevar_3143009324072631653 = typeCheckingContext.createNewRuntimeTypesVariable();
      if (!(typeCheckingContext.isSingleTypeComputation())) {
        {
          SNode _nodeToCheck_1029348928467 = p;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)", "5612111951671508237", 0, null);
          typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)", "5612111951671508239", true), (SNode) typeCheckingContext.getRepresentative(T_typevar_3143009324072631653), true, true, _info_12389875345);
        }
      }
      ListSequence.fromList(ptypes).addElement(typeCheckingContext.getRepresentative(T_typevar_3143009324072631653));
    }
    final SNode ret_typevar_3143009324072631671 = typeCheckingContext.createNewRuntimeTypesVariable();
    {
      SNode _nodeToCheck_1029348928467 = IOperation_Behavior.call_getOperand_1213877410070(invoke);
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)", "8710643694461127256", 0, null);
      typeCheckingContext.createGreaterThanInequality((SNode) _quotation_createNode_17nn5b_a0d0b(ptypes, typeCheckingContext.getRepresentative(ret_typevar_3143009324072631671)), (SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)", "8710643694461127258", true), false, true, _info_12389875345);
    }
    {
      final SNode reifiedRet = typeCheckingContext.getRepresentative(ret_typevar_3143009324072631671);
      typeCheckingContext.whenConcrete(reifiedRet, new Runnable() {
        public void run() {
          {
            SNode matchedNode_7xpnd0_a0e0 = typeCheckingContext.getExpandedNode(reifiedRet);
            {
              boolean matches_7xpnd0_a0a4a = false;
              {
                SNode matchingNode_7xpnd0_a0a4a = typeCheckingContext.getExpandedNode(reifiedRet);
                if (matchingNode_7xpnd0_a0a4a != null) {
                  matches_7xpnd0_a0a4a = SModelUtil_new.isAssignableConcept(matchingNode_7xpnd0_a0a4a.getConcept().getConceptId(), "jetbrains.mps.lang.typesystem.structure.MeetType");
                }
              }
              if (matches_7xpnd0_a0a4a) {
                {
                  SNode _nodeToCheck_1029348928467 = invoke;
                  EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)", "4359876593789669945", 0, null);
                  typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)", "4359876593789669922", true), (SNode) ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(typeCheckingContext.getExpandedNode(reifiedRet), "jetbrains.mps.lang.typesystem.structure.MeetType"), "argument", true)).first(), _info_12389875345);
                }
              } else {
                SNode _nodeToCheck_1029348928467 = invoke;
                EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)", "4359876593789669889", 0, null);
                typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)", "4359876593789669893", true), (SNode) typeCheckingContext.getExpandedNode(reifiedRet), _info_12389875345);
              }
            }
          }
        }
      }, "r:00000000-0000-4000-0000-011c89590337(jetbrains.mps.baseLanguage.closures.typesystem)", "4359876593789669874", false, false);
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionOperation";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getConceptId(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }

  private static SNode _quotation_createNode_17nn5b_a0d0b(Object parameter_1, Object parameter_2) {
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.FunctionType", null, null, GlobalScope.getInstance(), false);
    {
      List<SNode> nodes = (List<SNode>) parameter_1;
      for (SNode child : nodes) {
        quotedNode_3.addChild("parameterType", HUtil.copyIfNecessary(child));
      }
    }
    quotedNode_5 = (SNode) parameter_2;
    if (quotedNode_5 != null) {
      quotedNode_3.addChild("resultType", HUtil.copyIfNecessary(quotedNode_5));
    }
    return quotedNode_3;
  }
}
