package jetbrains.mps.baseLanguage.closures.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.desctiptor.ConceptEditorHintImpl;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;
import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  private Collection<ConceptEditorHintImpl> myHints;

  {
    myHints = Collections.emptyList();
  }

  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0c, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AbstractFunctionType_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new ClosureControlStatement_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new ClosureLiteral_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new CompactInvokeFunctionExpression_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new ControlAbstractionContainer_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new ControlAbstractionDeclaration_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new ControlClosureLiteral_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new FunctionMethodDeclaration_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new FunctionType_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new InvokeExpression_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new InvokeFunctionExpression_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new InvokeFunctionOperation_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new UnboundClosureParameterDeclaration_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new UnrestrictedClosureLiteral_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new UnrestrictedFunctionType_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new YieldAllStatement_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new YieldStatement_Editor());
      default:
    }
    return Collections.emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    return Collections.emptyList();
  }



  public Collection<ConceptEditorHint> getHints() {
    return myHints;
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0c = new String[]{"jetbrains.mps.baseLanguage.closures.structure.AbstractFunctionType", "jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement", "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", "jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression", "jetbrains.mps.baseLanguage.closures.structure.ControlAbstractionContainer", "jetbrains.mps.baseLanguage.closures.structure.ControlAbstractionDeclaration", "jetbrains.mps.baseLanguage.closures.structure.ControlClosureLiteral", "jetbrains.mps.baseLanguage.closures.structure.FunctionMethodDeclaration", "jetbrains.mps.baseLanguage.closures.structure.FunctionType", "jetbrains.mps.baseLanguage.closures.structure.InvokeExpression", "jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionExpression", "jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionOperation", "jetbrains.mps.baseLanguage.closures.structure.UnboundClosureParameterDeclaration", "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral", "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType", "jetbrains.mps.baseLanguage.closures.structure.YieldAllStatement", "jetbrains.mps.baseLanguage.closures.structure.YieldStatement"};
}
