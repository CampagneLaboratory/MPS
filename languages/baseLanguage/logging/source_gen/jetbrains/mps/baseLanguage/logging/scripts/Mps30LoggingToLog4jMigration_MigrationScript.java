package jetbrains.mps.baseLanguage.logging.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.resolve.ScopeResolver;
import jetbrains.mps.smodel.ModuleOperationContext;
import org.jetbrains.mps.openapi.model.SReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import java.util.List;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class Mps30LoggingToLog4jMigration_MigrationScript extends BaseMigrationScript {
  public Mps30LoggingToLog4jMigration_MigrationScript(IOperationContext operationContext) {
    super("Migrate MPS Logger to log4j (may break code compilation)");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Migrate logger fields";
      }

      public String getAdditionalInfo() {
        return "Migrate logger fields";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "type", true), "jetbrains.mps.baseLanguage.structure.ClassifierType")) || !(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node, "type", true), "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", false) == SLinkOperations.getTarget(_quotation_createNode_t030w_a0a0a0a0a(), "classifier", false))) {
          return false;
        }

        SNode initializer = SLinkOperations.getTarget(node, "initializer", true);
        if (!(SNodeOperations.isInstanceOf(initializer, "jetbrains.mps.baseLanguage.structure.StaticMethodCall"))) {
          return false;
        }

        return SLinkOperations.getTarget(SNodeOperations.cast(initializer, "jetbrains.mps.baseLanguage.structure.StaticMethodCall"), "baseMethodDeclaration", false) == SLinkOperations.getTarget(_quotation_createNode_t030w_a0a0f0a0(), "baseMethodDeclaration", false) || SLinkOperations.getTarget(SNodeOperations.cast(initializer, "jetbrains.mps.baseLanguage.structure.StaticMethodCall"), "baseMethodDeclaration", false) == SLinkOperations.getTarget(_quotation_createNode_t030w_a0a0f0a0_0(), "baseMethodDeclaration", false);
      }

      public void doUpdateInstanceNode(final SNode node) {
        SNode containingRoot = SNodeOperations.getContainingRoot(node);
        Iterable<SNode> references = ListSequence.fromList(SNodeOperations.getDescendants(containingRoot, "jetbrains.mps.baseLanguage.structure.VariableReference", false, new String[]{})).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SLinkOperations.getTarget(it, "variableDeclaration", false) == node && SNodeOperations.isInstanceOf(SNodeOperations.getParent(it), "jetbrains.mps.baseLanguage.structure.DotExpression");
          }
        });
        if ((Sequence.fromIterable(references).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            SNode operation = SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(it), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true);
            return SNodeOperations.isInstanceOf(operation, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation") && !(MigrationUtil.isLog4jCall(SNodeOperations.cast(operation, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")));
          }
        }) != null)) {
          // we have to keep using mps Logger 
        } else {
          // migrate to log4j Logger 

          SLinkOperations.setTarget(node, "type", _quotation_createNode_t030w_a0a2a0c0a0(), true);
          SNode methodCall = SNodeOperations.cast(SLinkOperations.getTarget(node, "initializer", true), "jetbrains.mps.baseLanguage.structure.StaticMethodCall");
          if (SLinkOperations.getTarget(methodCall, "baseMethodDeclaration", false) == SLinkOperations.getTarget(_quotation_createNode_t030w_a0a4a0c0a0(), "baseMethodDeclaration", false)) {
            SNodeOperations.replaceWithAnother(methodCall, _quotation_createNode_t030w_a0a0a4a0c0a0(SLinkOperations.getTargets(methodCall, "actualArgument", true)));
          } else if (SLinkOperations.getTarget(methodCall, "baseMethodDeclaration", false) == SLinkOperations.getTarget(_quotation_createNode_t030w_a0a0e0a2a0a(), "baseMethodDeclaration", false)) {
            SNodeOperations.replaceWithAnother(methodCall, _quotation_createNode_t030w_a0a0a0e0a2a0a(SLinkOperations.getTargets(methodCall, "actualArgument", true)));
          }
          SModelOperations.validateLanguagesAndImports(SNodeOperations.getModel(node), true, true);

          ScopeResolver resolver = new ScopeResolver();
          ModuleOperationContext context = new ModuleOperationContext(SNodeOperations.getModel(node).getModule());
          for (SNode ref : Sequence.fromIterable(references)) {
            SNode operation = SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(ref), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true);
            if (SNodeOperations.isInstanceOf(operation, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
              MigrationUtil.migrateInstanceMethodCall(SNodeOperations.cast(operation, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"), resolver, context);
            } else {
              for (SReference r : Sequence.fromIterable(SNodeOperations.getReferences(operation))) {
                resolver.resolve(r, operation, context);
              }
            }
          }

        }

        SModelOperations.validateLanguagesAndImports(SNodeOperations.getModel(node), true, true);
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }

  private static SNode _quotation_createNode_t030w_a0a0a0a0a() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.setReference("classifier", jetbrains.mps.smodel.SReference.create("classifier", quotedNode_1, facade.createModelReference("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.logging(MPS.Core/jetbrains.mps.logging@java_stub)"), facade.createNodeId("~Logger")));
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_t030w_a0a0f0a0() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.setReference("baseMethodDeclaration", jetbrains.mps.smodel.SReference.create("baseMethodDeclaration", quotedNode_1, facade.createModelReference("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.logging(MPS.Core/jetbrains.mps.logging@java_stub)"), facade.createNodeId("~Logger.getLogger(java.lang.Class):jetbrains.mps.logging.Logger")));
    quotedNode_1.setReference("classConcept", jetbrains.mps.smodel.SReference.create("classConcept", quotedNode_1, facade.createModelReference("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.logging(MPS.Core/jetbrains.mps.logging@java_stub)"), facade.createNodeId("~Logger")));
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.setReference("classifier", jetbrains.mps.smodel.SReference.create("classifier", quotedNode_3, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Class")));
    quotedNode_2.addChild("type", quotedNode_3);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NullLiteral", null, null, GlobalScope.getInstance(), false);
    quotedNode_2.addChild("expression", quotedNode_4);
    quotedNode_1.addChild("actualArgument", quotedNode_2);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_t030w_a0a0f0a0_0() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.setReference("classConcept", jetbrains.mps.smodel.SReference.create("classConcept", quotedNode_1, facade.createModelReference("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.logging(MPS.Core/jetbrains.mps.logging@java_stub)"), facade.createNodeId("~Logger")));
    quotedNode_1.setReference("baseMethodDeclaration", jetbrains.mps.smodel.SReference.create("baseMethodDeclaration", quotedNode_1, facade.createModelReference("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.logging(MPS.Core/jetbrains.mps.logging@java_stub)"), facade.createNodeId("~Logger.getLogger(java.lang.String):jetbrains.mps.logging.Logger")));
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_2, "value", "");
    quotedNode_1.addChild("actualArgument", quotedNode_2);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_t030w_a0a2a0c0a0() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.setReference("classifier", jetbrains.mps.smodel.SReference.create("classifier", quotedNode_1, facade.createModelReference("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#org.apache.log4j(MPS.Core/org.apache.log4j@java_stub)"), facade.createNodeId("~Logger")));
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_t030w_a0a4a0c0a0() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.setReference("baseMethodDeclaration", jetbrains.mps.smodel.SReference.create("baseMethodDeclaration", quotedNode_1, facade.createModelReference("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.logging(MPS.Core/jetbrains.mps.logging@java_stub)"), facade.createNodeId("~Logger.getLogger(java.lang.String):jetbrains.mps.logging.Logger")));
    quotedNode_1.setReference("classConcept", jetbrains.mps.smodel.SReference.create("classConcept", quotedNode_1, facade.createModelReference("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.logging(MPS.Core/jetbrains.mps.logging@java_stub)"), facade.createNodeId("~Logger")));
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_2, "value", "");
    quotedNode_1.addChild("actualArgument", quotedNode_2);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_t030w_a0a0a4a0c0a0(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null, null, GlobalScope.getInstance(), false);
    quotedNode_2.setReference("baseMethodDeclaration", jetbrains.mps.smodel.SReference.create("baseMethodDeclaration", quotedNode_2, facade.createModelReference("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#org.apache.log4j(MPS.Core/org.apache.log4j@java_stub)"), facade.createNodeId("~LogManager.getLogger(java.lang.String):org.apache.log4j.Logger")));
    quotedNode_2.setReference("classConcept", jetbrains.mps.smodel.SReference.create("classConcept", quotedNode_2, facade.createModelReference("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#org.apache.log4j(MPS.Core/org.apache.log4j@java_stub)"), facade.createNodeId("~LogManager")));
    {
      List<SNode> nodes = (List<SNode>) parameter_1;
      for (SNode child : nodes) {
        quotedNode_2.addChild("actualArgument", HUtil.copyIfNecessary(child));
      }
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_t030w_a0a0a0e0a2a0a(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null, null, GlobalScope.getInstance(), false);
    quotedNode_2.setReference("baseMethodDeclaration", jetbrains.mps.smodel.SReference.create("baseMethodDeclaration", quotedNode_2, facade.createModelReference("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#org.apache.log4j(MPS.Core/org.apache.log4j@java_stub)"), facade.createNodeId("~LogManager.getLogger(java.lang.Class):org.apache.log4j.Logger")));
    quotedNode_2.setReference("classConcept", jetbrains.mps.smodel.SReference.create("classConcept", quotedNode_2, facade.createModelReference("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#org.apache.log4j(MPS.Core/org.apache.log4j@java_stub)"), facade.createNodeId("~LogManager")));
    {
      List<SNode> nodes = (List<SNode>) parameter_1;
      for (SNode child : nodes) {
        quotedNode_2.addChild("actualArgument", HUtil.copyIfNecessary(child));
      }
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_t030w_a0a0e0a2a0a() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.setReference("baseMethodDeclaration", jetbrains.mps.smodel.SReference.create("baseMethodDeclaration", quotedNode_1, facade.createModelReference("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.logging(MPS.Core/jetbrains.mps.logging@java_stub)"), facade.createNodeId("~Logger.getLogger(java.lang.Class):jetbrains.mps.logging.Logger")));
    quotedNode_1.setReference("classConcept", jetbrains.mps.smodel.SReference.create("classConcept", quotedNode_1, facade.createModelReference("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.logging(MPS.Core/jetbrains.mps.logging@java_stub)"), facade.createNodeId("~Logger")));
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_4.setReference("classifier", jetbrains.mps.smodel.SReference.create("classifier", quotedNode_4, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Class")));
    quotedNode_3.addChild("type", quotedNode_4);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NullLiteral", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.addChild("expression", quotedNode_5);
    quotedNode_2.addChild("expression", quotedNode_3);
    quotedNode_1.addChild("actualArgument", quotedNode_2);
    return quotedNode_1;
  }
}
