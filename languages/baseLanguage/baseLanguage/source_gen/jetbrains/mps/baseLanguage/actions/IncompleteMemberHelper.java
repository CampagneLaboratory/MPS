package jetbrains.mps.baseLanguage.actions;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.util.IdentifierConstraintsUtil;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.behavior.IncompleteMemberDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.scopes.ClassifierScopes;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class IncompleteMemberHelper {

  /*package*/ static boolean isJavaKeyWordNotApplicableAsModifier(SNode member, String pattern) {
    List<SNode> subConcepts = SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.PrimitiveType"), SNodeOperations.getModel(member));
    Iterable<String> aliases = ListSequence.fromList(subConcepts).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return SPropertyOperations.getString(it, "conceptAlias");
      }
    });

    return IdentifierConstraintsUtil.isJavaReserved(pattern) && !(Sequence.fromIterable(aliases).contains(pattern)) && !(pattern.equals("abstract") && IncompleteMemberDeclaration_Behavior.call_canBeMadeAbstract_6224545524881696659(member) || pattern.equals("transient") && !(SPropertyOperations.getBoolean(member, "transient")) || pattern.equals("final") && !(SPropertyOperations.getBoolean(member, "final")) || pattern.equals("public") && (SLinkOperations.getTarget(member, "visibility", true) == null) || pattern.equals("private") && (SLinkOperations.getTarget(member, "visibility", true) == null) || pattern.equals("protected") && (SLinkOperations.getTarget(member, "visibility", true) == null) || pattern.equals("synchronized") && !(SPropertyOperations.getBoolean(member, "synchronized")) || pattern.equals("static") && !(SPropertyOperations.getBoolean(member, "static")));
  }

  /*package*/ static boolean isKnownTypeName(SNode member, final String pattern) {
    Iterable<SNode> availableElements = ClassifierScopes.getVisibleClassifiersScope(member, true).getAvailableElements(pattern);
    return pattern.equals("string") || pattern.equals("map") || pattern.equals("set") || pattern.equals("list") || pattern.equals("sorted_set") || pattern.equals("sorted_map") || Sequence.fromIterable(availableElements).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return eq_fp5qrn_a0a0a0a0a0a0b0d(SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.Classifier"), "name"), pattern);
      }
    }).isNotEmpty();
  }
  private static boolean eq_fp5qrn_a0a0a0a0a0a0b0d(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
