package jetbrains.mps.baseLanguage.actions;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.behavior.IContainsStatementList_Behavior;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class AlterStatementListContainerFactoryUtils {
  private static boolean hasCondition(SNode node) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.IfStatement") || SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.WhileStatement") || SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.DoWhileStatement");
  }

  private static SNode getCondition(SNode node) {
    assert hasCondition(node);
    return SNodeOperations.cast(ListSequence.fromList(SNodeOperations.getChildren(node)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.Expression");
      }
    }).first(), "jetbrains.mps.baseLanguage.structure.Expression");
  }

  private static void buildContainer(SNode sampleNode, final SNode newNode) {
    ListSequence.fromList(SLinkOperations.getTargets(IContainsStatementList_Behavior.call_getStatementList_1237545932619(sampleNode), "statement", true)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        ListSequence.fromList(SLinkOperations.getTargets(IContainsStatementList_Behavior.call_getStatementList_1237545932619(newNode), "statement", true)).addElement(SNodeOperations.copyNode(it));
      }
    });
    if (hasCondition(sampleNode) && hasCondition(newNode)) {
      SNode originalCondition = getCondition(sampleNode);
      if (originalCondition != null) {
        SNodeOperations.replaceWithAnother(getCondition(newNode), SNodeOperations.copyNode(originalCondition));
      }
    }
  }

  public static void buildContainerIfPossible(SNode sampleNode, SNode newNode) {
    if (SNodeOperations.isInstanceOf(sampleNode, "jetbrains.mps.baseLanguage.structure.IContainsStatementList")) {
      buildContainer(SNodeOperations.cast(sampleNode, "jetbrains.mps.baseLanguage.structure.IContainsStatementList"), newNode);
    }
  }
}
