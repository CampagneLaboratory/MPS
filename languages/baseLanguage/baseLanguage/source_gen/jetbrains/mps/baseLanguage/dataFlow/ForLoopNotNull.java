package jetbrains.mps.baseLanguage.dataFlow;

/*Generated by MPS */

import jetbrains.mps.analyzers.runtime.framework.DataFlowConstructor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.dataFlow.framework.Program;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.dataFlow.framework.instructions.Instruction;

public class ForLoopNotNull extends DataFlowConstructor {
  public ForLoopNotNull() {
  }

  public boolean isApplicable(SNode node) {
    return SModelUtil_new.isAssignableConcept(BehaviorReflection.invokeVirtual(String.class, SNodeOperations.getConceptDeclaration(node), "virtual_getFqName_1213877404258", new Object[]{}), getApplicableConceptFqName());
  }

  public String getApplicableConceptFqName() {
    return "jetbrains.mps.baseLanguage.structure.ForStatement";
  }

  public void performActions(Program o, SNode node) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "condition", true), "jetbrains.mps.baseLanguage.structure.NotEqualsExpression")) {
      SNode notEquals = SNodeOperations.cast(SLinkOperations.getTarget(node, "condition", true), "jetbrains.mps.baseLanguage.structure.NotEqualsExpression");
      SNode notNull = NullableUtil.getOtherThanNull(notEquals);
      if (notNull != null) {
        {
          Object object = SLinkOperations.getTarget(node, "body", true);
          if (((Program) o).contains(object)) {
            boolean before = true;
            int position = ((Program) (o)).getStart(SLinkOperations.getTarget(node, "body", true));
            Instruction instruction = new notNullInstruction(notNull);
            instruction.setSource(node);
            ((Program) (o)).insert(instruction, position, true, before);
          }
        }
      }
    }
  }
}
