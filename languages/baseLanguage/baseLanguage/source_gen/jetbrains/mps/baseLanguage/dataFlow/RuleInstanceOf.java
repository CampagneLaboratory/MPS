package jetbrains.mps.baseLanguage.dataFlow;

/*Generated by MPS */

import jetbrains.mps.lang.dataFlow.framework.DataFlowConstructor;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.dataFlow.framework.Program;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.dataFlow.framework.instructions.Instruction;

public class RuleInstanceOf implements DataFlowConstructor {
  public RuleInstanceOf() {
  }
  public boolean isApplicable(SNode node) {
    SAbstractConcept concept = SNodeOperations.getConcept(node);
    SAbstractConcept applicableConcept = getApplicableConcept();
    return concept.equals(applicableConcept) || concept.isSubConceptOf(applicableConcept);
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbff03700L, "jetbrains.mps.baseLanguage.structure.InstanceOfExpression");
  }
  public void performActions(Program o, SNode node) {
    Tuples._4<SNode, SNode, Boolean, Boolean> calcWhereToJump;
    SNode beforeNode;
    SNode afterNode;
    boolean ifJump;
    SNode otherThanNull = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbff03700L, 0xfbbff06218L, "leftExpression"));
    calcWhereToJump = NullableUtil.calcWhereToJump(node, true);
    beforeNode = calcWhereToJump._0();
    afterNode = calcWhereToJump._1();
    ifJump = (boolean) calcWhereToJump._3();
    if (beforeNode != null) {
      if (ifJump) {
        {
          Object object = node;
          if (((Program) o).contains(object)) {
            boolean before = false;
            int position = ((Program) (o)).getEnd(object);
            Instruction instruction = new notNullInstruction(otherThanNull);
            instruction.setRuleReference("r:00000000-0000-4000-0000-011c895902c2(jetbrains.mps.baseLanguage.dataFlow)/1383888600191330503");
            instruction.setSource(node);
            ((Program) (o)).insert(instruction, position, true, before);
          }
        }
      } else {
        {
          Object object = beforeNode;
          if (((Program) o).contains(object)) {
            boolean before = true;
            int position = ((Program) (o)).getStart(beforeNode);
            Instruction instruction = new notNullInstruction(otherThanNull);
            instruction.setRuleReference("r:00000000-0000-4000-0000-011c895902c2(jetbrains.mps.baseLanguage.dataFlow)/1383888600191330511");
            instruction.setSource(node);
            ((Program) (o)).insert(instruction, position, true, before);
          }
        }
      }
    }
    if (afterNode != null) {
      if (ifJump) {
        {
          Object object = node;
          if (((Program) o).contains(object)) {
            boolean before = false;
            int position = ((Program) (o)).getEnd(object);
            Instruction instruction = new notNullInstruction(otherThanNull);
            instruction.setRuleReference("r:00000000-0000-4000-0000-011c895902c2(jetbrains.mps.baseLanguage.dataFlow)/1383888600191330523");
            instruction.setSource(node);
            ((Program) (o)).insert(instruction, position, true, before);
          }
        }
      } else {
        {
          Object object = afterNode;
          if (((Program) o).contains(object)) {
            boolean before = false;
            int position = ((Program) (o)).getEnd(object);
            Instruction instruction = new notNullInstruction(otherThanNull);
            instruction.setRuleReference("r:00000000-0000-4000-0000-011c895902c2(jetbrains.mps.baseLanguage.dataFlow)/1383888600191330531");
            instruction.setSource(node);
            ((Program) (o)).insert(instruction, position, true, before);
          }
        }
      }
    }
  }
}
