package jetbrains.mps.baseLanguage.dataFlow;

/*Generated by MPS */

import jetbrains.mps.analyzers.runtime.framework.DataFlowConstructor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.dataFlow.framework.Program;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.dataFlow.framework.instructions.Instruction;

public class RuleTernaryOperation extends DataFlowConstructor {
  public RuleTernaryOperation() {
  }
  public boolean isApplicable(SNode node) {
    return SModelUtil_new.isAssignableConcept(BehaviorReflection.invokeVirtual(String.class, SNodeOperations.getConceptDeclaration(node), "virtual_getFqName_1213877404258", new Object[]{}), getApplicableConceptFqName());
  }
  public String getApplicableConceptFqName() {
    return "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression";
  }
  public void performActions(Program o, SNode node) {
    SNode condition = SLinkOperations.getTarget(node, "condition", true);
    if (SNodeOperations.isInstanceOf(condition, "jetbrains.mps.baseLanguage.structure.EqualsExpression") || SNodeOperations.isInstanceOf(condition, "jetbrains.mps.baseLanguage.structure.NotEqualsExpression")) {
      SNode other = NullableUtil.getOtherThanNull(SNodeOperations.cast(condition, "jetbrains.mps.baseLanguage.structure.BinaryOperation"));
      if (other == null) {
        return;
      }
      {
        Object object = SLinkOperations.getTarget(node, "ifFalse", true);
        if (((Program) o).contains(object)) {
          boolean before = false;
          int position = ((Program) (o)).getEnd(object);
          Instruction instruction = new nullableInstruction(other);
          instruction.setRuleReference("r:00000000-0000-4000-0000-011c895902c2(jetbrains.mps.baseLanguage.dataFlow)/1016339169644612767");
          instruction.setSource(node);
          ((Program) (o)).insert(instruction, position, true, before);
        }
      }
      if (SNodeOperations.isInstanceOf(condition, "jetbrains.mps.baseLanguage.structure.EqualsExpression")) {
        {
          Object object = SLinkOperations.getTarget(node, "ifTrue", true);
          if (((Program) o).contains(object)) {
            boolean before = true;
            int position = ((Program) (o)).getStart(SLinkOperations.getTarget(node, "ifTrue", true));
            Instruction instruction = new nullInstruction(other);
            instruction.setRuleReference("r:00000000-0000-4000-0000-011c895902c2(jetbrains.mps.baseLanguage.dataFlow)/3383816410303360124");
            instruction.setSource(node);
            ((Program) (o)).insert(instruction, position, true, before);
          }
        }
        {
          Object object = SLinkOperations.getTarget(node, "ifFalse", true);
          if (((Program) o).contains(object)) {
            boolean before = true;
            int position = ((Program) (o)).getStart(SLinkOperations.getTarget(node, "ifFalse", true));
            Instruction instruction = new notNullInstruction(other);
            instruction.setRuleReference("r:00000000-0000-4000-0000-011c895902c2(jetbrains.mps.baseLanguage.dataFlow)/3383816410303360110");
            instruction.setSource(node);
            ((Program) (o)).insert(instruction, position, true, before);
          }
        }
      } else {
        {
          Object object = SLinkOperations.getTarget(node, "ifTrue", true);
          if (((Program) o).contains(object)) {
            boolean before = true;
            int position = ((Program) (o)).getStart(SLinkOperations.getTarget(node, "ifTrue", true));
            Instruction instruction = new notNullInstruction(other);
            instruction.setRuleReference("r:00000000-0000-4000-0000-011c895902c2(jetbrains.mps.baseLanguage.dataFlow)/3383816410303360132");
            instruction.setSource(node);
            ((Program) (o)).insert(instruction, position, true, before);
          }
        }
        {
          Object object = SLinkOperations.getTarget(node, "ifFalse", true);
          if (((Program) o).contains(object)) {
            boolean before = true;
            int position = ((Program) (o)).getStart(SLinkOperations.getTarget(node, "ifFalse", true));
            Instruction instruction = new nullInstruction(other);
            instruction.setRuleReference("r:00000000-0000-4000-0000-011c895902c2(jetbrains.mps.baseLanguage.dataFlow)/3383816410303360139");
            instruction.setSource(node);
            ((Program) (o)).insert(instruction, position, true, before);
          }
        }
      }
    }

  }
}
