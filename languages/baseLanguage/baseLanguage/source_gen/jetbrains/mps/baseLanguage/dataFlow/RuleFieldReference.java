package jetbrains.mps.baseLanguage.dataFlow;

/*Generated by MPS */

import jetbrains.mps.analyzers.runtime.framework.DataFlowConstructor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.dataFlow.framework.Program;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.dataFlow.framework.instructions.Instruction;

public class RuleFieldReference extends DataFlowConstructor {
  public RuleFieldReference() {
  }

  public boolean isApplicable(SNode node) {
    return SModelUtil_new.isAssignableConcept(BehaviorReflection.invokeVirtual(String.class, SNodeOperations.getConceptDeclaration(node), "virtual_getFqName_1213877404258", new Object[]{}), getApplicableConceptFqName());
  }

  public String getApplicableConceptFqName() {
    return "jetbrains.mps.baseLanguage.structure.VariableReference";
  }

  public void performActions(Program o, SNode node) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.FieldDeclaration")) {
      SNode field = SNodeOperations.cast(SLinkOperations.getTarget(node, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.FieldDeclaration");
      if (SLinkOperations.getTargets(field, "annotation", true) != null) {
        for (SNode annotation : SLinkOperations.getTargets(field, "annotation", true)) {
          String name = SPropertyOperations.getString(SLinkOperations.getTarget(annotation, "annotation", false), "name");
          if (SLinkOperations.getTarget(annotation, "annotation", false) == SNodeOperations.getNode("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#org.jetbrains.annotations(MPS.Core/org.jetbrains.annotations@java_stub)", "~NotNull")) {
            {
              Object object = node;
              if (((Program) o).contains(object)) {
                boolean before = false;
                int position = ((Program) (o)).getEnd(object);
                Instruction instruction = new notNullInstruction(field);
                instruction.setSource(node);
                ((Program) (o)).insert(instruction, position, true, before);
              }
            }
          }
        }
      }
    }
  }
}
