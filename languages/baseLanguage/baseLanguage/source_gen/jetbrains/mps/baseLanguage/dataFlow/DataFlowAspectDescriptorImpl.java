package jetbrains.mps.baseLanguage.dataFlow;

/*Generated by MPS */

import jetbrains.mps.lang.dataFlow.framework.DataFlowAspectDescriptor;
import java.util.Map;
import java.util.List;
import jetbrains.mps.lang.dataFlow.framework.DataFlowConstructor;
import java.util.Collection;
import java.util.Collections;
import java.util.ArrayList;

public class DataFlowAspectDescriptorImpl implements DataFlowAspectDescriptor {
  private Map<Class, List<DataFlowConstructor>> myClassToRulesMap;
  public DataFlowAspectDescriptorImpl() {
    init(NullableAnalyzerRunner.NullableAnalyzer.class, new ForLoopNotNull());
    init(NullableAnalyzerRunner.NullableAnalyzer.class, new IfEqualsNullAll());
    init(NullableAnalyzerRunner.NullableAnalyzer.class, new IfNotNullAll());
    init(NullableAnalyzerRunner.NullableAnalyzer.class, new RuleAfterDotExpression());
    init(NullableAnalyzerRunner.NullableAnalyzer.class, new RuleAssertNotNull());
    init(NullableAnalyzerRunner.NullableAnalyzer.class, new RuleCreator());
    init(NullableAnalyzerRunner.NullableAnalyzer.class, new RuleFieldReference());
    init(NullableAnalyzerRunner.NullableAnalyzer.class, new RuleMethodCall());
    init(NullableAnalyzerRunner.NullableAnalyzer.class, new RuleNullLiteral());
    init(NullableAnalyzerRunner.NullableAnalyzer.class, new RuleTernaryOperation());
    init(NullableAnalyzerRunner.NullableAnalyzer.class, new RuleVariableDeclaration());
    init(NullableAnalyzerRunner.NullableAnalyzer.class, new RuleWhileNotNull());
  }
  public Collection<DataFlowConstructor> getConstructors(Class c) {
    List<DataFlowConstructor> result = myClassToRulesMap.get(c);
    return (result != null ? Collections.<DataFlowConstructor>unmodifiableList(result) : Collections.<DataFlowConstructor>emptyList());
  }
  private void init(Class clazz, DataFlowConstructor rule) {
    List<DataFlowConstructor> list = myClassToRulesMap.get(clazz);
    if (list == null) {
      list = new ArrayList<DataFlowConstructor>();
      myClassToRulesMap.put(clazz, list);
    }
    list.add(rule);
  }
}
