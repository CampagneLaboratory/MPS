package jetbrains.mps.baseLanguage.dataFlow;

/*Generated by MPS */

import jetbrains.mps.lang.dataFlow.framework.DataFlowAspectDescriptor;
import java.util.Map;
import java.util.List;
import jetbrains.mps.lang.dataFlow.framework.DataFlowConstructor;
import java.util.HashMap;
import java.util.Collection;
import java.util.Collections;
import java.util.ArrayList;

public class DataFlowAspectDescriptorImpl implements DataFlowAspectDescriptor {
  private Map<String, List<DataFlowConstructor>> myClassToRulesMap = new HashMap<String, List<DataFlowConstructor>>();
  public DataFlowAspectDescriptorImpl() {
    init(NullableAnalyzerRunner.NullableAnalyzer.getId(), new RuleAfterDotExpression());
    init(NullableAnalyzerRunner.NullableAnalyzer.getId(), new RuleAssertNotNull());
    init(NullableAnalyzerRunner.NullableAnalyzer.getId(), new RuleCreator());
    init(NullableAnalyzerRunner.NullableAnalyzer.getId(), new RuleEqualsExpression());
    init(NullableAnalyzerRunner.NullableAnalyzer.getId(), new RuleFieldReference());
    init(NullableAnalyzerRunner.NullableAnalyzer.getId(), new RuleMethodCall());
    init(NullableAnalyzerRunner.NullableAnalyzer.getId(), new RuleNotEqualsExpression());
    init(NullableAnalyzerRunner.NullableAnalyzer.getId(), new RuleNullLiteral());
    init(NullableAnalyzerRunner.NullableAnalyzer.getId(), new RuleTernaryOperation());
    init(NullableAnalyzerRunner.NullableAnalyzer.getId(), new RuleVariableDeclaration());
  }
  public Collection<DataFlowConstructor> getConstructors(String analyzerId) {
    List<DataFlowConstructor> result = myClassToRulesMap.get(analyzerId);
    return (result != null ? Collections.<DataFlowConstructor>unmodifiableList(result) : Collections.<DataFlowConstructor>emptyList());
  }
  private void init(String analyzerId, DataFlowConstructor rule) {
    List<DataFlowConstructor> list = myClassToRulesMap.get(analyzerId);
    if (list == null) {
      list = new ArrayList<DataFlowConstructor>();
      myClassToRulesMap.put(analyzerId, list);
    }
    list.add(rule);
  }
}
