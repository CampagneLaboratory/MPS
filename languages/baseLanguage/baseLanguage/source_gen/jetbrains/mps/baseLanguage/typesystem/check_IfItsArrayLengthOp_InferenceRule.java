package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.smodel.DynamicReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.errors.BaseQuickFixProvider;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_IfItsArrayLengthOp_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public check_IfItsArrayLengthOp_InferenceRule() {
  }

  public void applyRule(final SNode fieldRef, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    // TEMP disabled: StackOverflow in typesystem; this rule is re-entered 
    if (1 > 0) {
      return;
    }

    // this has the form of an inference rule only because I need when concrete 

    SReference ref = fieldRef.getReference("fieldDeclaration");
    boolean itsUnresolvedLength = ref instanceof DynamicReference && "length".equals(((DynamicReference) ref).getResolveInfo());
    if (!(itsUnresolvedLength)) {
      return;
    }

    if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(fieldRef), "jetbrains.mps.baseLanguage.structure.DotExpression"))) {
      return;
    }

    {
      final SNode operandType = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(fieldRef), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operand", true));
      typeCheckingContext.whenConcrete(operandType, new Runnable() {
        public void run() {
          if (!(SNodeOperations.isInstanceOf(typeCheckingContext.getExpandedNode(operandType), "jetbrains.mps.baseLanguage.structure.ArrayType"))) {
            return;
          }
          // it's an array 
          // do quick fix 
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(fieldRef, "array length operation", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "6987217777982668493", null, errorTarget);
            {
              BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("jetbrains.mps.baseLanguage.typesystem.MakeArrayLengthOp_QuickFix", true);
              _reporter_2309309498.addIntentionProvider(intentionProvider);
            }
          }
        }
      }, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "6987217777982668471", false, false);
    }

  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getConceptId(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
