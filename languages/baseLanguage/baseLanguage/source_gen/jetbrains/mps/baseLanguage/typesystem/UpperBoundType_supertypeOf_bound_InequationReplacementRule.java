package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInequationReplacementRule_Runtime;
import jetbrains.mps.lang.pattern.GeneratedMatchingPattern;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.typesystem.runtime.IsApplicable2Status;
import jetbrains.mps.lang.pattern.util.MatchingUtil;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.lang.pattern.IMatchingPattern;
import jetbrains.mps.lang.pattern.runtime.PatternUtil;

public class UpperBoundType_supertypeOf_bound_InequationReplacementRule extends AbstractInequationReplacementRule_Runtime {
  /*package*/ GeneratedMatchingPattern myMatchingPattern2;

  public UpperBoundType_supertypeOf_bound_InequationReplacementRule() {
  }

  public boolean isApplicableCustom(SNode subtype, SNode supertype, IsApplicable2Status status) {
    return MatchingUtil.matchNodes(subtype, ((SNode) status.getPattern2().getFieldValue("patternVar_BOUND")));
  }

  public void processInequation(final SNode subtype, final SNode supertype, final EquationInfo equationInfo, final TypeCheckingContext typeCheckingContext, IsApplicable2Status status, final boolean inequalityIsWeak, final boolean inequalityIsLessThan) {
    // nothing 
  }

  public boolean checkInequation(final SNode subtype, final SNode supertype, final EquationInfo equationInfo, IsApplicable2Status status, final boolean inequalityIsWeak, final boolean inequalityIsLessThan) {
    boolean result_14532009 = true;
    // nothing 
    return result_14532009;
  }

  public boolean isWeak() {
    return true;
  }

  public IsApplicableStatus isApplicableSubtypeAndPattern(SNode node) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(node.getConcept().getId(), this.getApplicableSubtypeConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public IsApplicableStatus isApplicableSupertypeAndPattern(SNode node) {
    {
      GeneratedMatchingPattern pattern = new UpperBoundType_supertypeOf_bound_InequationReplacementRule.Pattern_xnp7z4_a0a0a0a7();
      this.myMatchingPattern2 = pattern;
      boolean b = pattern.match(node);
      return new IsApplicableStatus(b, pattern);
    }
  }

  public String getApplicableSubtypeConceptFQName() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }

  public String getApplicableSupertypeConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.UpperBoundType";
  }

  public static class Pattern_xnp7z4_a0a0a0a7 extends GeneratedMatchingPattern implements IMatchingPattern {
    /*package*/ SNode patternVar_BOUND;

    public Pattern_xnp7z4_a0a0a0a7() {
    }

    public boolean match(SNode nodeToMatch) {
      {
        SNode nodeToMatch_UpperBoundType_supertypeOf_bound_y9xgfl_a0a;
        nodeToMatch_UpperBoundType_supertypeOf_bound_y9xgfl_a0a = nodeToMatch;
        if (!("jetbrains.mps.baseLanguage.structure.UpperBoundType".equals(nodeToMatch_UpperBoundType_supertypeOf_bound_y9xgfl_a0a.getConcept().getId()))) {
          return false;
        }
        {
          String childRole_UpperBoundType_supertypeOf_bound_y9xgfl_ = "bound";
          if (!(PatternUtil.hasNChildren(nodeToMatch_UpperBoundType_supertypeOf_bound_y9xgfl_a0a, childRole_UpperBoundType_supertypeOf_bound_y9xgfl_, 1))) {
            return false;
          }
          {
            SNode childVar_UpperBoundType_supertypeOf_bound_y9xgfl_a0a0 = nodeToMatch_UpperBoundType_supertypeOf_bound_y9xgfl_a0a.getChildren(childRole_UpperBoundType_supertypeOf_bound_y9xgfl_).get(0);
            this.patternVar_BOUND = childVar_UpperBoundType_supertypeOf_bound_y9xgfl_a0a0;
          }
        }
      }
      return true;
    }

    public boolean hasAntiquotations() {
      return false;
    }

    public void fillFieldValuesFrom(GeneratedMatchingPattern pattern) {
      if (pattern != null && pattern.getClass() == this.getClass()) {
        patternVar_BOUND = (SNode) pattern.getFieldValue("patternVar_BOUND");
      }
    }

    public Object getFieldValue(String fieldName) {
      if ("patternVar_BOUND".equals(fieldName)) {
        return patternVar_BOUND;
      }
      return null;
    }

    public void performActions(Object o) {
    }
  }
}
