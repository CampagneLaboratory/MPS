package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInequationReplacementRule_Runtime;
import jetbrains.mps.lang.pattern.GeneratedMatchingPattern;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.typesystem.runtime.IsApplicable2Status;
import jetbrains.mps.lang.pattern.util.MatchingUtil;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.pattern.IMatchingPattern;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.lang.pattern.runtime.PatternUtil;
import jetbrains.mps.util.IterableUtil;

public class LowerBoundType_subtypeOf_bound_InequationReplacementRule extends AbstractInequationReplacementRule_Runtime {
  /*package*/ GeneratedMatchingPattern myMatchingPattern1;
  public LowerBoundType_subtypeOf_bound_InequationReplacementRule() {
  }
  public boolean isApplicableCustom(SNode subtype, SNode supertype, IsApplicable2Status status) {
    return MatchingUtil.matchNodes(((SNode) status.getPattern1().getFieldValue("patternVar_TYPE")), supertype);
  }
  public void processInequation(final SNode subtype, final SNode supertype, final EquationInfo equationInfo, final TypeCheckingContext typeCheckingContext, IsApplicable2Status status, final boolean inequalityIsWeak, final boolean inequalityIsLessThan) {
    // 'nuff said 
  }
  public boolean checkInequation(final SNode subtype, final SNode supertype, final EquationInfo equationInfo, IsApplicable2Status status, final boolean inequalityIsWeak, final boolean inequalityIsLessThan) {
    boolean result_14532009 = true;
    // 'nuff said 
    return result_14532009;
  }
  public boolean isWeak() {
    return true;
  }
  public IsApplicableStatus isApplicableSubtypeAndPattern(SNode node) {
    {
      GeneratedMatchingPattern pattern = new LowerBoundType_subtypeOf_bound_InequationReplacementRule.Pattern_ap69b7_a0a0a0a6();
      this.myMatchingPattern1 = pattern;
      boolean b = pattern.match(node);
      return new IsApplicableStatus(b, pattern);
    }
  }
  public IsApplicableStatus isApplicableSupertypeAndPattern(SNode node) {
    return new IsApplicableStatus(node.getConcept().isSubConceptOf(getApplicableSupertypeConcept()), null);
  }

  public SAbstractConcept getApplicableSubtypeConcept() {
    return MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110dae9d53dL, "jetbrains.mps.baseLanguage.structure.LowerBoundType");
  }
  public SAbstractConcept getApplicableSupertypeConcept() {
    return MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL, "jetbrains.mps.baseLanguage.structure.Type");
  }
  public static class Pattern_ap69b7_a0a0a0a6 extends GeneratedMatchingPattern implements IMatchingPattern {
    /*package*/ SNode patternVar_TYPE;
    public Pattern_ap69b7_a0a0a0a6() {
    }
    public boolean match(SNode nodeToMatch) {
      {
        SNode nodeToMatch_4vpl4k_a0a = nodeToMatch;
        if (!("jetbrains.mps.baseLanguage.structure.LowerBoundType".equals(nodeToMatch_4vpl4k_a0a.getConcept().getQualifiedName()))) {
          return false;
        }
        {
          SContainmentLink childRole_4vpl4k_ = MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110dae9d53dL, 0x110dae9f25bL, "bound");
          if (!(PatternUtil.hasNChildren(nodeToMatch_4vpl4k_a0a, childRole_4vpl4k_, 1))) {
            return false;
          }
          {
            SNode childVar_4vpl4k_a0a0 = IterableUtil.get(nodeToMatch_4vpl4k_a0a.getChildren(childRole_4vpl4k_), 0);
            this.patternVar_TYPE = childVar_4vpl4k_a0a0;
          }
        }
      }
      return true;
    }
    public boolean hasAntiquotations() {
      return false;
    }
    public void fillFieldValuesFrom(GeneratedMatchingPattern pattern) {
      if (pattern != null && pattern.getClass() == this.getClass()) {
        patternVar_TYPE = (SNode) pattern.getFieldValue("patternVar_TYPE");
      }
    }
    public Object getFieldValue(String fieldName) {
      if ("patternVar_TYPE".equals(fieldName)) {
        return patternVar_TYPE;
      }
      return null;
    }
    public void performActions(Object o) {
    }
  }
}
