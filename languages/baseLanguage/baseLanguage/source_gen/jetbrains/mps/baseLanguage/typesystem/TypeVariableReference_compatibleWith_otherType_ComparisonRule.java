package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.ComparisonRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.typesystem.runtime.IsApplicable2Status;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;

public class TypeVariableReference_compatibleWith_otherType_ComparisonRule extends ComparisonRule_Runtime {
  public TypeVariableReference_compatibleWith_otherType_ComparisonRule() {
  }
  public boolean areComparable(SNode node1, SNode node2, IsApplicable2Status status) {
    SNode bound = SLinkOperations.getTarget(SLinkOperations.getTarget(node1, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1109283449304l, 1109283546497l, "typeVariableDeclaration")), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1109279763828l, 1214996921760l, "bound"));
    if ((bound == null)) {
      return true;
    }
    {
      SNode matchedNode_p68yon_c0 = node2;
      {
        boolean matches_p68yon_a2a = false;
        {
          SNode matchingNode_p68yon_a2a = node2;
          if (matchingNode_p68yon_a2a != null) {
            matches_p68yon_a2a = SModelUtil_new.isAssignableConcept(matchingNode_p68yon_a2a.getConcept().getQualifiedName(), "jetbrains.mps.baseLanguage.structure.TypeVariableReference");
          }
        }
        if (matches_p68yon_a2a) {
          {
            SNode otherbound = SLinkOperations.getTarget(SLinkOperations.getTarget(matchedNode_p68yon_c0, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1109283449304l, 1109283546497l, "typeVariableDeclaration")), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1109279763828l, 1214996921760l, "bound"));
            if ((otherbound == null)) {
              return true;
            }
            return TypeChecker.getInstance().getSubtypingManager().isSubtype(bound, otherbound) || TypeChecker.getInstance().getSubtypingManager().isSubtype(otherbound, bound);
          }
        } else
        return TypeChecker.getInstance().getSubtypingManager().isSubtype(bound, node2) || TypeChecker.getInstance().getSubtypingManager().isSubtype(node2, bound);
      }
    }
  }
  public boolean isWeak() {
    return true;
  }
  public IsApplicableStatus isApplicableFirst(SNode node) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(node.getConcept().getQualifiedName(), this.getApplicableConceptFQName1());
      return new IsApplicableStatus(b, null);
    }
  }
  public IsApplicableStatus isApplicableSecond(SNode node) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(node.getConcept().getQualifiedName(), this.getApplicableConceptFQName2());
      return new IsApplicableStatus(b, null);
    }
  }
  public String getApplicableConceptFQName1() {
    return "jetbrains.mps.baseLanguage.structure.TypeVariableReference";
  }
  public String getApplicableConceptFQName2() {
    return "jetbrains.mps.baseLanguage.structure.Type";
  }
}
