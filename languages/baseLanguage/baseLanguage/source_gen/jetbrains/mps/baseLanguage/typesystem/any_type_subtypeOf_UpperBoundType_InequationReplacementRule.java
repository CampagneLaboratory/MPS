package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInequationReplacementRule_Runtime;
import jetbrains.mps.lang.pattern.GeneratedMatchingPattern;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.typesystem.runtime.IsApplicable2Status;
import jetbrains.mps.lang.pattern.util.MatchingUtil;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.lang.pattern.IMatchingPattern;
import jetbrains.mps.lang.pattern.runtime.PatternUtil;
import jetbrains.mps.util.IterableUtil;

public class any_type_subtypeOf_UpperBoundType_InequationReplacementRule extends AbstractInequationReplacementRule_Runtime {
  /*package*/ GeneratedMatchingPattern myMatchingPattern2;

  public any_type_subtypeOf_UpperBoundType_InequationReplacementRule() {
  }

  public boolean isApplicableCustom(SNode subtype, SNode supertype, IsApplicable2Status status) {
    return MatchingUtil.matchNodes(subtype, ((SNode) status.getPattern2().getFieldValue("patternVar_TYPE")));
  }

  public void processInequation(final SNode subtype, final SNode supertype, final EquationInfo equationInfo, final TypeCheckingContext typeCheckingContext, IsApplicable2Status status, final boolean inequalityIsWeak, final boolean inequalityIsLessThan) {
    // 'nuff said 
  }

  public boolean checkInequation(final SNode subtype, final SNode supertype, final EquationInfo equationInfo, IsApplicable2Status status, final boolean inequalityIsWeak, final boolean inequalityIsLessThan) {
    boolean result_14532009 = true;
    // 'nuff said 
    return result_14532009;
  }

  public boolean isWeak() {
    return true;
  }

  public IsApplicableStatus isApplicableSubtypeAndPattern(SNode node) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(node.getConcept().getQualifiedName(), this.getApplicableSubtypeConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public IsApplicableStatus isApplicableSupertypeAndPattern(SNode node) {
    {
      GeneratedMatchingPattern pattern = new any_type_subtypeOf_UpperBoundType_InequationReplacementRule.Pattern_36i1i2_a0a0a0a7();
      this.myMatchingPattern2 = pattern;
      boolean b = pattern.match(node);
      return new IsApplicableStatus(b, pattern);
    }
  }

  public String getApplicableSubtypeConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.Type";
  }

  public String getApplicableSupertypeConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.UpperBoundType";
  }

  public static class Pattern_36i1i2_a0a0a0a7 extends GeneratedMatchingPattern implements IMatchingPattern {
    /*package*/ SNode patternVar_TYPE;

    public Pattern_36i1i2_a0a0a0a7() {
    }

    public boolean match(SNode nodeToMatch) {
      {
        SNode nodeToMatch_any_type_subtypeOf_UpperBoundType_m07fcb_a0a;
        nodeToMatch_any_type_subtypeOf_UpperBoundType_m07fcb_a0a = nodeToMatch;
        if (!("jetbrains.mps.baseLanguage.structure.UpperBoundType".equals(nodeToMatch_any_type_subtypeOf_UpperBoundType_m07fcb_a0a.getConcept().getQualifiedName()))) {
          return false;
        }
        {
          String childRole_any_type_subtypeOf_UpperBoundType_m07fcb_ = "bound";
          if (!(PatternUtil.hasNChildren(nodeToMatch_any_type_subtypeOf_UpperBoundType_m07fcb_a0a, childRole_any_type_subtypeOf_UpperBoundType_m07fcb_, 1))) {
            return false;
          }
          {
            SNode childVar_any_type_subtypeOf_UpperBoundType_m07fcb_a0a0 = IterableUtil.get(nodeToMatch_any_type_subtypeOf_UpperBoundType_m07fcb_a0a.getChildren(childRole_any_type_subtypeOf_UpperBoundType_m07fcb_), 0);
            this.patternVar_TYPE = childVar_any_type_subtypeOf_UpperBoundType_m07fcb_a0a0;
          }
        }
      }
      return true;
    }

    public boolean hasAntiquotations() {
      return false;
    }

    public void fillFieldValuesFrom(GeneratedMatchingPattern pattern) {
      if (pattern != null && pattern.getClass() == this.getClass()) {
        patternVar_TYPE = (SNode) pattern.getFieldValue("patternVar_TYPE");
      }
    }

    public Object getFieldValue(String fieldName) {
      if ("patternVar_TYPE".equals(fieldName)) {
        return patternVar_TYPE;
      }
      return null;
    }

    public void performActions(Object o) {
    }
  }
}
