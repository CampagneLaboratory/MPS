package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_InstanceMethodDeclarationThrownExceptionsSignature_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_InstanceMethodDeclarationThrownExceptionsSignature_NonTypesystemRule() {
  }

  public void applyRule(final SNode instanceMethodDeclaration, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode nearestOverriddenMethod = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), instanceMethodDeclaration, "virtual_getNearestOverriddenMethod_5358895268254685434", new Object[]{});
    if ((nearestOverriddenMethod == null)) {
      nearestOverriddenMethod = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), instanceMethodDeclaration, "virtual_getImplementedInterfaceMethod_8302934035201331324", new Object[]{});
    }
    if ((nearestOverriddenMethod == null)) {
      return;
    }

    SNode superVisibility = SLinkOperations.getTarget(SNodeOperations.cast(nearestOverriddenMethod, "jetbrains.mps.baseLanguage.structure.IVisible"), "visibility", true);
    SNode myVisibility = SLinkOperations.getTarget(instanceMethodDeclaration, "visibility", true);

    if (SNodeOperations.isInstanceOf(superVisibility, "jetbrains.mps.baseLanguage.structure.PrivateVisibility") || eq_l20hbd_a0a7a1(SNodeOperations.getConceptDeclaration(myVisibility), SNodeOperations.getConceptDeclaration(superVisibility))) {
      return;
    }
    if (SNodeOperations.isInstanceOf(superVisibility, "jetbrains.mps.baseLanguage.structure.ProtectedVisibility") && SNodeOperations.isInstanceOf(myVisibility, "jetbrains.mps.baseLanguage.structure.PublicVisibility")) {
      return;
    }
    if ((superVisibility == null) && !(SNodeOperations.isInstanceOf(myVisibility, "jetbrains.mps.baseLanguage.structure.PrivateVisibility"))) {
      return;
    }

    String classifierName = SPropertyOperations.getString(SNodeOperations.getAncestor(nearestOverriddenMethod, "jetbrains.mps.baseLanguage.structure.Classifier", false, false), "name");
    if (classifierName == null) {
      classifierName = "the super class";
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }

  private static boolean eq_l20hbd_a0a7a1(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
