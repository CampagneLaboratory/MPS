package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_IMethodCallTypeArgs_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_IMethodCallTypeArgs_NonTypesystemRule() {
  }

  public void applyRule(final SNode iMethodCall, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(iMethodCall, "baseMethodDeclaration", false), "typeVariableDeclaration", true)).count() != ListSequence.fromList(SLinkOperations.getTargets(iMethodCall, "typeArgument", true)).count()) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(iMethodCall, "Incorrect number of type arguments for a generic method.", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "7430872850880720443", null, errorTarget);
      }
    } else {
      final List<SNode> vars = ListSequence.fromList(new ArrayList<SNode>());
      ListSequence.fromList(vars).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(iMethodCall, "baseMethodDeclaration", false), "typeVariableDeclaration", true)));
      ListSequence.fromList(SLinkOperations.getTargets(iMethodCall, "typeArgument", true)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode typeParameter) {
          SNode var = ListSequence.fromList(vars).removeElementAt(0);
          if ((SLinkOperations.getTarget(var, "bound", true) != null)) {
            if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE, SLinkOperations.getTarget(var, "bound", true), "virtual_isSupersetOf_1220438914705", new Object[]{typeParameter}))) {
              {
                MessageTarget errorTarget = new NodeMessageTarget();
                IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(typeParameter, "The type " + typeParameter + " is not a valid substitute for the bounded parameter " + var, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "7430872850881178173", null, errorTarget);
              }
            }
          }
        }
      });
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.IMethodCall";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
