package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.errors.QuickFix_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.actions.PrecedenceUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class AddCast_QuickFix extends QuickFix_Runtime {
  public AddCast_QuickFix() {
  }
  public String getDescription(SNode node) {
    String text = "expression";
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression")) {
      text = "right side of assignment";
    } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.VariableDeclaration")) {
      text = "initializer";
    } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.BaseMethodCall") || SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation") || SNodeOperations.hasRole(node, "jetbrains.mps.baseLanguage.structure.BaseMethodCall", "actualArgument")) {
      text = "parameter";
    }
    return "Cast " + text + " to " + ((SNodeOperations.isInstanceOf(((SNode) AddCast_QuickFix.this.getField("desiredType")[0]), "jetbrains.mps.baseLanguage.structure.Type") ? ((SNode) AddCast_QuickFix.this.getField("desiredType")[0]) : BehaviorReflection.invokeVirtual(String.class, TypeChecker.getInstance().getTypeOf(((SNode) AddCast_QuickFix.this.getField("desiredType")[0])), "virtual_getPresentation_1213877396640", new Object[]{})));
  }
  public void execute(SNode node) {
    if (!(SNodeOperations.isInstanceOf(((SNode) AddCast_QuickFix.this.getField("expression")[0]), "jetbrains.mps.baseLanguage.structure.Expression"))) {
      return;
    }
    SNode actualType = (SNodeOperations.isInstanceOf(((SNode) AddCast_QuickFix.this.getField("desiredType")[0]), "jetbrains.mps.baseLanguage.structure.Type") ? ((SNode) AddCast_QuickFix.this.getField("desiredType")[0]) : TypeChecker.getInstance().getTypeOf(((SNode) AddCast_QuickFix.this.getField("desiredType")[0])));

    SNode cast = SNodeOperations.replaceWithNewChild(((SNode) AddCast_QuickFix.this.getField("expression")[0]), "jetbrains.mps.baseLanguage.structure.CastExpression");
    SLinkOperations.setTarget(cast, "expression", ((SNode) AddCast_QuickFix.this.getField("expression")[0]), true);
    SLinkOperations.setTarget(cast, "type", SNodeOperations.copyNode(actualType), true);
    boolean needsParensAroundCastExpression = PrecedenceUtil.needsParensAroundCastExpression(cast);
    if (needsParensAroundCastExpression) {
      SNode parens = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null);
      SLinkOperations.setTarget(parens, "expression", ((SNode) AddCast_QuickFix.this.getField("expression")[0]), true);
      SLinkOperations.setTarget(cast, "expression", parens, true);
    }
  }
}
