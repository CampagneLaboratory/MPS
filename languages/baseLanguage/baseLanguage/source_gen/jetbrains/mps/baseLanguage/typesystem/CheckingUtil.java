package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.behavior.Classifier_Behavior;
import jetbrains.mps.baseLanguage.behavior.ClassConcept_Behavior;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class CheckingUtil {
  public CheckingUtil() {
  }

  public static boolean isAssigned(SNode node) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation") && SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation"), "expression", true) == node) {
      return true;
    }
    SNode assignment = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression", false, false);
    if (assignment == null) {
      return false;
    }
    SNode lValue = SLinkOperations.getTarget(assignment, "lValue", true);
    if (node == lValue) {
      return true;
    }
    SNode parent = SNodeOperations.getParent(node);
    if (parent == lValue && SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.DotExpression") && SLinkOperations.getTarget(SNodeOperations.cast(parent, "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true) == node) {
      return true;
    }
    return false;
  }

  public static boolean isAssignedIllegaly(SNode node) {
    return CheckingUtil.isAssigned(node) && SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration", false, false) == null && SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.InstanceInitializer", false, false) == null;
  }

  public static boolean isFieldDuplicated(final SNode fieldDecl) {
    final String name = SPropertyOperations.getString(fieldDecl, "name");
    if ((name == null || name.length() == 0)) {
      return false;
    }
    SNode classifier = SNodeOperations.getAncestor(fieldDecl, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
    List<SNode> allFields = new ArrayList<SNode>();
    ListSequence.fromList(allFields).addSequence(Sequence.fromIterable(Classifier_Behavior.call_staticFields_5292274854859223538(classifier))).addSequence(Sequence.fromIterable(ClassConcept_Behavior.call_fields_5292274854859383272(SNodeOperations.as(classifier, "jetbrains.mps.baseLanguage.structure.ClassConcept"))));
    return ListSequence.fromList(allFields).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return it != fieldDecl && SPropertyOperations.hasValue(it, "name", name);
      }
    });
  }
}
