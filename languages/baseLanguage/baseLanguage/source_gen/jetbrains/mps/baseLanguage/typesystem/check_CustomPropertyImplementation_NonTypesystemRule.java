package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_CustomPropertyImplementation_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_CustomPropertyImplementation_NonTypesystemRule() {
  }

  public void applyRule(final SNode customPropertyImplementation, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    final SNode property = SNodeOperations.getAncestor(customPropertyImplementation, "jetbrains.mps.baseLanguage.structure.Property", false, false);
    if ((property == null)) {
      return;
    }

    ListSequence.fromList(SNodeOperations.getDescendants(customPropertyImplementation, "jetbrains.mps.baseLanguage.structure.LocalPropertyReference", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return eq_uyqio1_a0a0a0a0a0a0d0b(SLinkOperations.getTarget(it, "property", false), property);
      }
    }).union(ListSequence.fromList(SNodeOperations.getDescendants(customPropertyImplementation, "jetbrains.mps.baseLanguage.structure.PropertyReference", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return eq_uyqio1_a0a0a0a0a0a0a3a1(SLinkOperations.getTarget(it, "property", false), property);
      }
    })).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(it, "Cannot refer to a property from within its getters and setters. Create a separate field to hold the property value.", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "6526572214152427585", null, errorTarget);
        }
      }
    });
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.CustomPropertyImplementation";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }

  private static boolean eq_uyqio1_a0a0a0a0a0a0d0b(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static boolean eq_uyqio1_a0a0a0a0a0a0a3a1(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
