package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.ComparisonRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.typesystem.runtime.IsApplicable2Status;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.typesystem.inference.SubtypingManager;
import jetbrains.mps.typesystem.inference.TypeChecker;
import java.util.Iterator;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.smodel.SModelUtil_new;

public class compareClassifierTypes_ComparisonRule extends ComparisonRule_Runtime {
  public compareClassifierTypes_ComparisonRule() {
  }

  public boolean areComparable(SNode node1, SNode node2, IsApplicable2Status status) {
    if (SLinkOperations.getTarget(node1, "classifier", false) == SLinkOperations.getTarget(node2, "classifier", false) && (int) ListSequence.fromList(SLinkOperations.getTargets(node1, "parameter", true)).count() == (int) ListSequence.fromList(SLinkOperations.getTargets(node2, "parameter", true)).count()) {
      SubtypingManager subtypingManager = TypeChecker.getInstance().getSubtypingManager();
      {
        Iterator<SNode> leftParam_it = ListSequence.fromList(SLinkOperations.getTargets(node1, "parameter", true)).iterator();
        Iterator<SNode> rightParam_it = ListSequence.fromList(SLinkOperations.getTargets(node2, "parameter", true)).iterator();
        SNode leftParam_var;
        SNode rightParam_var;
        while (leftParam_it.hasNext() && rightParam_it.hasNext()) {
          leftParam_var = leftParam_it.next();
          rightParam_var = rightParam_it.next();
          if (!(subtypingManager.isComparable(leftParam_var, rightParam_var, true))) {
            return false;
          }
        }
      }
      return true;
    }
    return false;
  }

  public boolean isWeak() {
    return true;
  }

  public IsApplicableStatus isApplicableFirst(SNode node) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(node.getConceptFqName(), this.getApplicableConceptFQName1());
      return new IsApplicableStatus(b, null);
    }
  }

  public IsApplicableStatus isApplicableSecond(SNode node) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(node.getConceptFqName(), this.getApplicableConceptFQName2());
      return new IsApplicableStatus(b, null);
    }
  }

  public String getApplicableConceptFQName1() {
    return "jetbrains.mps.baseLanguage.structure.ClassifierType";
  }

  public String getApplicableConceptFQName2() {
    return "jetbrains.mps.baseLanguage.structure.ClassifierType";
  }
}
