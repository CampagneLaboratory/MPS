package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.dataFlow.framework.Program;
import jetbrains.mps.lang.dataFlow.DataFlowManager;
import java.util.ArrayList;
import jetbrains.mps.lang.dataFlow.framework.instructions.ReadInstruction;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.errors.BaseQuickFixProvider;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_FieldDeclarationCanBeLocalVariable_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_FieldDeclarationCanBeLocalVariable_NonTypesystemRule() {
  }
  public void applyRule(final SNode variableDeclaration, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (!(SNodeOperations.isInstanceOf(variableDeclaration, "jetbrains.mps.baseLanguage.structure.FieldDeclaration")) && !(SNodeOperations.isInstanceOf(variableDeclaration, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"))) {
      return;
    }
    if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(variableDeclaration, "jetbrains.mps.baseLanguage.structure.IVisible"), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1178549954367l, 1178549979242l, "visibility")), "jetbrains.mps.baseLanguage.structure.PrivateVisibility"))) {
      return;
    }
    Iterable<SNode> refs = ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getContainingRoot(variableDeclaration), "jetbrains.mps.baseLanguage.structure.VariableReference", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068498886296l, 1068581517664l, "variableDeclaration")) == variableDeclaration;
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SNodeOperations.getAncestor(it, "jetbrains.mps.baseLanguage.structure.SingleLineComment", false, false) == null);
      }
    });
    if (Sequence.fromIterable(refs).isEmpty()) {
      return;
    }
    if (Sequence.fromIterable(refs).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SNodeOperations.getAncestor(it, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false) == null);
      }
    })) {
      return;
    }
    final Iterable<SNode> methods = Sequence.fromIterable(refs).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.getAncestor(it, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false);
      }
    });

    if (Sequence.fromIterable(methods).all(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return eq_pk5n8v_a0a0a0a0a0h0b(it, Sequence.fromIterable(methods).first());
      }
    })) {
      SNode method = Sequence.fromIterable(methods).first();
      Program program = DataFlowManager.getInstance().buildProgramFor(SLinkOperations.getTarget(method, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123132l, 1068580123135l, "body")));

      // find a read instruction for variableDeclaration not preceeded by a write instruction 
      boolean uninitializedRead = ListSequence.fromList(ListSequence.fromListWithValues(new ArrayList<ReadInstruction>(), program.getUninitializedReads())).any(new IWhereFilter<ReadInstruction>() {
        public boolean accept(ReadInstruction it) {
          return eq_pk5n8v_a0a0a0a0a0a4a7a1(it.getVariable(), variableDeclaration);
        }
      });

      if (!(uninitializedRead)) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(variableDeclaration, "Field can be converted into a local variable", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "6640766779592666289", null, errorTarget);
          {
            BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("jetbrains.mps.baseLanguage.typesystem.ConvertFieldToLocalVariable_QuickFix", false);
            intentionProvider.putArgument("method", Sequence.fromIterable(methods).first());
            intentionProvider.putArgument("refs", refs);
            _reporter_2309309498.addIntentionProvider(intentionProvider);
          }
        }
      }
    }

  }
  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.VariableDeclaration";
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }
  public boolean overrides() {
    return false;
  }
  private static boolean eq_pk5n8v_a0a0a0a0a0a4a7a1(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean eq_pk5n8v_a0a0a0a0a0h0b(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
