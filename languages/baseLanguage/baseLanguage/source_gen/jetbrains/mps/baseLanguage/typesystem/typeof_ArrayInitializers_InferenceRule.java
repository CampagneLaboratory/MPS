package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class typeof_ArrayInitializers_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_ArrayInitializers_InferenceRule() {
  }

  public void applyRule(final SNode arrayInitializers, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    final SNode elementType_typevar_7150822681946998394 = typeCheckingContext.createNewRuntimeTypesVariable();
    for (SNode value : SLinkOperations.getTargets(arrayInitializers, "initValue", true)) {
      {
        SNode _nodeToCheck_1029348928467 = value;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "7150822681947058207", 0, null);
        typeCheckingContext.createGreaterThanInequality((SNode) typeCheckingContext.getRepresentative(elementType_typevar_7150822681946998394), (SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "7150822681947062538", true), false, true, _info_12389875345);
      }
      if (!(SNodeOperations.isInstanceOf(value, "jetbrains.mps.baseLanguage.structure.ArrayInitializers"))) {
        SNode surroundingArrayCreator = SNodeOperations.getAncestor(arrayInitializers, "jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializerAndMultipleDimensions", false, false);
        if ((surroundingArrayCreator == null)) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(arrayInitializers, "Misplaced Array Initializer", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "8820682311090384149", null, errorTarget);
          }
          return;
        }
        {
          SNode _nodeToCheck_1029348928467 = arrayInitializers;
          EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "8820682311091692022", 0, null);
          typeCheckingContext.createEquation((SNode) typeCheckingContext.getRepresentative(elementType_typevar_7150822681946998394), (SNode) SLinkOperations.getTarget(surroundingArrayCreator, "componentType", true), _info_12389875345);
        }
        if (!(typeCheckingContext.isSingleTypeComputation())) {
          {
            SNode _nodeToCheck_1029348928467 = value;
            EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "8820682311078305949", 0, null);
            typeCheckingContext.createLessThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "8820682311078305955", true), (SNode) SLinkOperations.getTarget(surroundingArrayCreator, "componentType", true), true, true, _info_12389875345);
          }
        }
      }
    }
    {
      SNode _nodeToCheck_1029348928467 = arrayInitializers;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "8820682311087506890", 0, null);
      typeCheckingContext.createGreaterThanInequality((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "8820682311087506899", true), (SNode) _quotation_createNode_986eq1_a0c0b(typeCheckingContext.getRepresentative(elementType_typevar_7150822681946998394)), false, true, _info_12389875345);
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.ArrayInitializers";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }

  private static SNode _quotation_createNode_986eq1_a0c0b(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ArrayType", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("componentType", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }
}
