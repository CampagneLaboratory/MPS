package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.errors.QuickFix_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class FixPrimitiveClassExpressionNotOnPrimitiveType_QuickFix extends QuickFix_Runtime {
  public FixPrimitiveClassExpressionNotOnPrimitiveType_QuickFix() {
  }

  public void execute(SNode node) {
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression"))) {
      return;
    }
    SNode statedType = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression"), "primitiveType", true);
    if (SNodeOperations.isInstanceOf(statedType, "jetbrains.mps.baseLanguage.structure.ClassifierType")) {
      SNode replacing = SNodeOperations.replaceWithNewChild(node, "jetbrains.mps.baseLanguage.structure.ClassifierClassExpression");
      SLinkOperations.setTarget(replacing, "classifier", SLinkOperations.getTarget(SNodeOperations.cast(statedType, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", false), false);
    } else if (SNodeOperations.isInstanceOf(statedType, "jetbrains.mps.baseLanguage.structure.ArrayType")) {
      SNode replacing = SNodeOperations.replaceWithNewChild(node, "jetbrains.mps.baseLanguage.structure.ArrayClassExpression");
      SLinkOperations.setTarget(replacing, "arrayType", SNodeOperations.cast(statedType, "jetbrains.mps.baseLanguage.structure.ArrayType"), true);
    }
  }
}
