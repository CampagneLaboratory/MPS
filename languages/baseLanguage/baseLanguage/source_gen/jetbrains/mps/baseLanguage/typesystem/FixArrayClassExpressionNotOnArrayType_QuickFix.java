package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.errors.QuickFix_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class FixArrayClassExpressionNotOnArrayType_QuickFix extends QuickFix_Runtime {
  public FixArrayClassExpressionNotOnArrayType_QuickFix() {
  }

  public void execute(SNode node) {
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ArrayClassExpression"))) {
      return;
    }
    SNode statedType = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ArrayClassExpression"), "arrayType", true);
    if (SNodeOperations.isInstanceOf(statedType, "jetbrains.mps.baseLanguage.structure.ClassifierType")) {
      SNode replacing = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierClassExpression", null);
      SLinkOperations.setTarget(replacing, "classifier", SLinkOperations.getTarget(SNodeOperations.cast(statedType, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", false), false);
      SNodeOperations.replaceWithAnother(node, replacing);
    } else if (SNodeOperations.isInstanceOf(statedType, "jetbrains.mps.baseLanguage.structure.PrimitiveType")) {
      SNode replacing = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression", null);
      SLinkOperations.setTarget(replacing, "primitiveType", SNodeOperations.cast(statedType, "jetbrains.mps.baseLanguage.structure.PrimitiveType"), true);
      SNodeOperations.replaceWithAnother(node, replacing);
    }
  }
}
