package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.errors.BaseQuickFixProvider;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_BinaryLogicalOperationCanBeSimplified_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_BinaryLogicalOperationCanBeSimplified_NonTypesystemRule() {
  }

  public void applyRule(final SNode binaryOperation, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (!(SNodeOperations.isInstanceOf(binaryOperation, "jetbrains.mps.baseLanguage.structure.AndExpression")) && !(SNodeOperations.isInstanceOf(binaryOperation, "jetbrains.mps.baseLanguage.structure.OrExpression"))) {
      return;
    }
    SNode left = SLinkOperations.getTarget(binaryOperation, "leftExpression", true);
    SNode right = SLinkOperations.getTarget(binaryOperation, "rightExpression", true);
    SNode eliminatedNode;
    SNode remainingNode;
    if (SNodeOperations.isInstanceOf(left, "jetbrains.mps.baseLanguage.structure.BooleanConstant")) {
      eliminatedNode = SNodeOperations.cast(left, "jetbrains.mps.baseLanguage.structure.BooleanConstant");
      remainingNode = right;
    } else if (SNodeOperations.isInstanceOf(right, "jetbrains.mps.baseLanguage.structure.BooleanConstant")) {
      eliminatedNode = SNodeOperations.cast(right, "jetbrains.mps.baseLanguage.structure.BooleanConstant");
      remainingNode = left;
    } else {
      return;
    }
    {
      MessageTarget errorTarget = new NodeMessageTarget();
      IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(binaryOperation, "The logical expression can be simplified", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "3832376534028382760", null, errorTarget);
      {
        BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("jetbrains.mps.baseLanguage.typesystem.SimplifyBinaryLogicalExpressionWithBooleanConstant_QuickFix", false);
        intentionProvider.putArgument("eliminatedNode", eliminatedNode);
        intentionProvider.putArgument("remainingNode", remainingNode);
        intentionProvider.putArgument("operation", binaryOperation);
        _reporter_2309309498.addIntentionProvider(intentionProvider);
      }
    }

  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.BinaryOperation";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
