package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.behavior.IClassifierType_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.baseLanguage.behavior.Property_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.baseLanguage.behavior.BaseMethodDeclaration_Behavior;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_PropertyNameUniqueness_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_PropertyNameUniqueness_NonTypesystemRule() {
  }

  public void applyRule(final SNode property, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    Iterable<SNode> visibleMembers = Sequence.fromIterable(IClassifierType_Behavior.call_getVisibleMembers_6145907390641297279(check_5f44vd_a0a0a0b(SNodeOperations.getAncestor(property, "jetbrains.mps.baseLanguage.structure.Classifier", false, false)), property)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return neq_5f44vd_a0a0a0a0a0a0a1(it, property);
      }
    });

    SNode duplicate = Sequence.fromIterable(visibleMembers).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.Property");
      }
    }).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return eq_5f44vd_a0a0a0a0a0a2a1(SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.Property"), "name"), SPropertyOperations.getString(property, "name"));
      }
    });
    if ((duplicate != null)) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(property, "Duplicate property name with " + BehaviorReflection.invokeVirtual(String.class, SNodeOperations.getAncestor(duplicate, "jetbrains.mps.baseLanguage.structure.Classifier", false, false), "virtual_getFqName_1213877404258", new Object[]{}) + "." + SPropertyOperations.getString(SNodeOperations.cast(duplicate, "jetbrains.mps.baseLanguage.structure.Property"), "name"), "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1472285356915365475", null, errorTarget);
      }
    }


    Iterable<SNode> visibleMethods = Sequence.fromIterable(visibleMembers).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
      }
    });
    duplicate = Sequence.fromIterable(visibleMethods).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        SNode method = SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
        return eq_5f44vd_a0a1a0a0a0a0h0b(SPropertyOperations.getString(method, "name"), Property_Behavior.call_getGetterMethodName_1213877383170(property)) && ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).isEmpty();
      }
    });
    if ((duplicate != null)) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(property, "The property getter is hiding a method of the same name: " + BehaviorReflection.invokeVirtual(String.class, SNodeOperations.getAncestor(duplicate, "jetbrains.mps.baseLanguage.structure.Classifier", false, false), "virtual_getFqName_1213877404258", new Object[]{}) + "." + SPropertyOperations.getString(SNodeOperations.cast(duplicate, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), "name") + "()", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1472285356915474315", null, errorTarget);
      }
    }

    if (Property_Behavior.call_hasSetter_1213877383224(property)) {
      duplicate = Sequence.fromIterable(visibleMethods).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          SNode method = SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
          return eq_5f44vd_a0a0b0a0a0a0a0a01a1(SPropertyOperations.getString(method, "name"), Property_Behavior.call_getSetterMethodName_1213877383179(property)) && ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).count() == 1 && (TypeChecker.getInstance().getSubtypingManager().isSubtype(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).first(), "type", true), SLinkOperations.getTarget(property, "type", true)) || TypeChecker.getInstance().getSubtypingManager().isSubtype(SLinkOperations.getTarget(property, "type", true), SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).first(), "type", true)));
        }
      });
      if ((duplicate != null)) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(property, "The property setter is hiding a method of the same name: " + BehaviorReflection.invokeVirtual(String.class, SNodeOperations.getAncestor(duplicate, "jetbrains.mps.baseLanguage.structure.Classifier", false, false), "virtual_getFqName_1213877404258", new Object[]{}) + "." + SPropertyOperations.getString(SNodeOperations.cast(duplicate, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), "name") + "(" + BaseMethodDeclaration_Behavior.call_getErasureSignature_2830572026628006618(SNodeOperations.cast(duplicate, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) + ")", "r:00000000-0000-4000-0000-011c895902c5(jetbrains.mps.baseLanguage.typesystem)", "1472285356915680442", null, errorTarget);
        }
      }
    }


  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.Property";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }

  private static SNode check_5f44vd_a0a0a0b(SNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) (Object.class)), checkedDotOperand, "virtual_getThisType_3305065273710880775", new Object[]{});
    }
    return null;
  }

  private static boolean neq_5f44vd_a0a0a0a0a0a0a1(Object a, Object b) {
    return !((a != null ? a.equals(b) : a == b));
  }

  private static boolean eq_5f44vd_a0a0a0a0a0a2a1(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static boolean eq_5f44vd_a0a1a0a0a0a0h0b(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static boolean eq_5f44vd_a0a0b0a0a0a0a0a01a1(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
