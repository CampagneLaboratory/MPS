package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.ComparisonRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.typesystem.runtime.IsApplicable2Status;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.Classifier_Behavior;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.smodel.SModelUtil_new;

public class ClassifierType_comparableTo_raw_ClassifierType_ComparisonRule extends ComparisonRule_Runtime {
  public ClassifierType_comparableTo_raw_ClassifierType_ComparisonRule() {
  }

  public boolean areComparable(SNode node1, SNode node2, IsApplicable2Status status) {
    if ((ListSequence.fromList(SLinkOperations.getTargets(node1, "parameter", true)).isNotEmpty() ^ ListSequence.fromList(SLinkOperations.getTargets(node2, "parameter", true)).isNotEmpty()) || ListSequence.fromList(SLinkOperations.getTargets(node1, "parameter", true)).all(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.WildCardType");
      }
    }) || ListSequence.fromList(SLinkOperations.getTargets(node2, "parameter", true)).all(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.WildCardType");
      }
    })) {
      // formatting 
      return Classifier_Behavior.call_isDescendant_7165541881557222913(SLinkOperations.getTarget(node1, "classifier", false), SLinkOperations.getTarget(node2, "classifier", false)) || Classifier_Behavior.call_isDescendant_7165541881557222913(SLinkOperations.getTarget(node2, "classifier", false), SLinkOperations.getTarget(node1, "classifier", false));
    }
    return false;
  }

  public boolean isWeak() {
    return true;
  }

  public IsApplicableStatus isApplicableFirst(SNode node) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(node.getConcept().getId(), this.getApplicableConceptFQName1());
      return new IsApplicableStatus(b, null);
    }
  }

  public IsApplicableStatus isApplicableSecond(SNode node) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(node.getConcept().getId(), this.getApplicableConceptFQName2());
      return new IsApplicableStatus(b, null);
    }
  }

  public String getApplicableConceptFQName1() {
    return "jetbrains.mps.baseLanguage.structure.ClassifierType";
  }

  public String getApplicableConceptFQName2() {
    return "jetbrains.mps.baseLanguage.structure.ClassifierType";
  }
}
