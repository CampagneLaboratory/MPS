package jetbrains.mps.baseLanguage.typesystem;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.newTypesystem.SubtypingUtil;
import java.util.Arrays;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.pattern.IMatchingPattern;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.typesystem.inference.TypeChecker;

public class Queries {
  public Queries() {
  }
  public static SNode getBinaryOperationType(SNode leftType, SNode rightType) {
    return getBinaryOperationType(leftType, rightType, false);
  }
  public static SNode getBinaryOperationType(SNode leftType, SNode rightType, boolean mayBeString) {
    List<SNode> leastCommonSupertypes = SubtypingUtil.leastCommonSuperTypes(Arrays.asList(leftType, rightType), null);
    if (mayBeString) {
      SModel javaLangJavaStubModelDescriptor = SModelRepository.getInstance().getModelDescriptor("java.lang@java_stub");
      assert javaLangJavaStubModelDescriptor != null;
      SModel javaLang = javaLangJavaStubModelDescriptor;
      SNode stringClass = SModelOperations.getRootByName(javaLang, "String");
      if (SNodeOperations.isInstanceOf(leftType, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, "jetbrains.mps.baseLanguage.structure.ClassifierType")) && SLinkOperations.getTarget((SNodeOperations.cast(leftType, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, "jetbrains.mps.baseLanguage.structure.ClassifierType"))), MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier")) == stringClass || SNodeOperations.isInstanceOf(rightType, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, "jetbrains.mps.baseLanguage.structure.ClassifierType")) && SLinkOperations.getTarget((SNodeOperations.cast(rightType, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, "jetbrains.mps.baseLanguage.structure.ClassifierType"))), MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier")) == stringClass) {
        SNode classifierType = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType", null);
        SLinkOperations.setTarget(classifierType, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier"), SNodeOperations.cast(stringClass, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107461130800l, "jetbrains.mps.baseLanguage.structure.Classifier")));
        return classifierType;
      }
    }
    if (leastCommonSupertypes.isEmpty()) {
      SNode runtimeErrorType = SConceptOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.RuntimeErrorType", null);
      SPropertyOperations.set(runtimeErrorType, MetaAdapterFactory.getProperty(new UUID(8817443762339858024l, -6091446231697526094l), 1185281562361l, 1185281562362l, "errorText"), "incompatible types");
      return runtimeErrorType;
    }
    SNode type = leastCommonSupertypes.iterator().next();
    {
      IMatchingPattern pattern_j6k1pf_e0c = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.PrimitiveType");
      SNode coercedNode_j6k1pf_e0c = TypeChecker.getInstance().getRuntimeSupport().coerce_(type, pattern_j6k1pf_e0c);
      if (coercedNode_j6k1pf_e0c != null) {
        return coercedNode_j6k1pf_e0c;
      } else {
        return type;
      }
    }
  }
}
