package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class ConvertIfConditionToTernaryOperator_Intention extends BaseIntention implements Intention {
  public ConvertIfConditionToTernaryOperator_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.IfStatement";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Convert If Condition to Ternary Operator";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (IntentionUtils.getExpressionFromNode(SLinkOperations.getTarget(node, "ifTrue", true)) != null) && (IntentionUtils.getExpressionFromNode(SLinkOperations.getTarget(node, "ifFalseStatement", true)) != null) && ListSequence.fromList(SLinkOperations.getTargets(node, "elsifClauses", true)).isEmpty();
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode ternaryOperator = new ConvertIfConditionToTernaryOperator_Intention.QuotationClass_5h38jn_a0a0a7().createNode(SLinkOperations.getTarget(node, "condition", true), IntentionUtils.getExpressionFromNode(SLinkOperations.getTarget(node, "ifTrue", true)), IntentionUtils.getExpressionFromNode(SLinkOperations.getTarget(node, "ifFalseStatement", true)));
    SNodeOperations.replaceWithAnother(node, ternaryOperator);
  }

  public String getLocationString() {
    return "jetbrains.mps.baseLanguage.intentions";
  }

  public static class QuotationClass_5h38jn_a0a0a7 {
    public QuotationClass_5h38jn_a0a0a7() {
    }

    public SNode createNode(Object parameter_9, Object parameter_10, Object parameter_11) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression", null, null, GlobalScope.getInstance(), false);
        SNode quotedNode1_5 = quotedNode_1;
        {
          quotedNode_2 = (SNode) parameter_9;
          SNode quotedNode1_6;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_6 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_6 = quotedNode_2;
          }
          if (quotedNode1_6 != null) {
            quotedNode_1.addChild("condition", HUtil.copyIfNecessary(quotedNode1_6));
          }
        }
        {
          quotedNode_3 = (SNode) parameter_10;
          SNode quotedNode1_7;
          if (_parameterValues_129834374.contains(quotedNode_3)) {
            quotedNode1_7 = HUtil.copyIfNecessary(quotedNode_3);
          } else {
            _parameterValues_129834374.add(quotedNode_3);
            quotedNode1_7 = quotedNode_3;
          }
          if (quotedNode1_7 != null) {
            quotedNode_1.addChild("ifTrue", HUtil.copyIfNecessary(quotedNode1_7));
          }
        }
        {
          quotedNode_4 = (SNode) parameter_11;
          SNode quotedNode1_8;
          if (_parameterValues_129834374.contains(quotedNode_4)) {
            quotedNode1_8 = HUtil.copyIfNecessary(quotedNode_4);
          } else {
            _parameterValues_129834374.add(quotedNode_4);
            quotedNode1_8 = quotedNode_4;
          }
          if (quotedNode1_8 != null) {
            quotedNode_1.addChild("ifFalse", HUtil.copyIfNecessary(quotedNode1_8));
          }
        }
        result = quotedNode1_5;
      }
      return result;
    }
  }
}
