package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class ConvertElsifToNewIfStatement_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public ConvertElsifToNewIfStatement_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.ElsifClause";
  }

  public String getPresentation() {
    return "ConvertElsifToNewIfStatement";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.intentions.ConvertElsifToNewIfStatement_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    SNode statement = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.IfStatement", false, false);
    SNode statementParent = SNodeOperations.getParent(statement);
    return (statementParent != null) && SNodeOperations.isInstanceOf(statementParent, "jetbrains.mps.baseLanguage.structure.StatementList") && SNodeOperations.getIndexInParent(node) == SNodeOperations.getIndexInParent(ListSequence.fromList(SLinkOperations.getTargets(statement, "elsifClauses", true)).last()) && (SLinkOperations.getTarget(statement, "ifFalseStatement", true) == null);
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902c6(jetbrains.mps.baseLanguage.intentions)", "8145509665020019463");
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ConvertElsifToNewIfStatement_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Convert Else-If Clause to New If Statement";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode ifStatement = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IfStatement", null);
      SLinkOperations.setTarget(ifStatement, "condition", SNodeOperations.copyNode(SLinkOperations.getTarget(node, "condition", true)), true);
      SLinkOperations.setTarget(ifStatement, "ifTrue", SNodeOperations.copyNode(SLinkOperations.getTarget(node, "statementList", true)), true);
      SNode statement = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.Statement", false, false);
      SNodeOperations.insertNextSiblingChild(statement, ifStatement);
      SNodeOperations.deleteNode(node);
    }

    public IntentionDescriptor getDescriptor() {
      return ConvertElsifToNewIfStatement_Intention.this;
    }
  }
}
