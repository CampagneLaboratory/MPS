package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class MigrateString_Intention extends BaseIntention {
  public MigrateString_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.ClassifierType";
  }

  public String getPresentation() {
    return "MigrateString";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.intentions.MigrateString_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:e456489e-54f1-4f7f-a501-bb6a31480eab(jetbrains.mps.baseLanguage.intentions@3_0)", "3627222673199430317");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Convert java.lang.String To string";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return eq_8h3uxw_a0a0i(SPropertyOperations.getString(SLinkOperations.getTarget(node, "classifier", false), "name"), "String");
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode stringType = SNodeFactoryOperations.replaceWithNewChild(node, "jetbrains.mps.baseLanguage.structure.StringType");
    editorContext.select(stringType);
  }

  private static boolean eq_8h3uxw_a0a0i(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
