package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.behavior.Classifier_Behavior;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.baseLanguage.behavior.IClassifierType_Behavior;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.baseLanguage.behavior.BaseMethodDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class TurnEnumToClassAndBack_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public TurnEnumToClassAndBack_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.ClassConcept";
  }

  public String getPresentation() {
    return "TurnEnumToClassAndBack";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.intentions.TurnEnumToClassAndBack_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.baseLanguage";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    if (editorContext.getSelectedNode() != node && !(isVisibleInChild(node, editorContext.getSelectedNode(), editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.EnumClass") || (SLinkOperations.getTarget(node, "superclass", true) == null);
  }

  private boolean isVisibleInChild(final SNode node, final SNode childNode, final EditorContext editorContext) {
    return SNodeOperations.hasRole(childNode, "jetbrains.mps.baseLanguage.structure.ClassConcept", "visibility") || SNodeOperations.hasRole(childNode, "jetbrains.mps.baseLanguage.structure.ClassConcept", "annotation") || SNodeOperations.hasRole(childNode, "jetbrains.mps.baseLanguage.structure.ClassConcept", "implementedInterface") || SNodeOperations.hasRole(childNode, "jetbrains.mps.baseLanguage.structure.ClassConcept", "superclass");
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902c6(jetbrains.mps.baseLanguage.intentions)", "4063776913609769409");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new TurnEnumToClassAndBack_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.EnumClass") ?
        "Turn Enum to Class" :
        "Turn Class to Enum"
      );
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      final SNode classNode = (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.EnumClass")) ?
        SNodeFactoryOperations.replaceWithNewChild(node, "jetbrains.mps.baseLanguage.structure.EnumClass") :
        SNodeFactoryOperations.replaceWithNewChild(node, "jetbrains.mps.baseLanguage.structure.ClassConcept")
      );
      SPropertyOperations.set(classNode, "name", SPropertyOperations.getString(node, "name"));
      ListSequence.fromList(SLinkOperations.getTargets(classNode, "typeVariableDeclaration", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "typeVariableDeclaration", true)));
      SPropertyOperations.set(classNode, "nestedName", SPropertyOperations.getString(node, "nestedName"));
      SPropertyOperations.set(classNode, "isDeprecated", "" + (SPropertyOperations.getBoolean(node, "isDeprecated")));
      SPropertyOperations.set(classNode, "nonStatic", "" + (SPropertyOperations.getBoolean(node, "nonStatic")));
      SPropertyOperations.set(classNode, "abstractClass", "" + (SPropertyOperations.getBoolean(node, "abstractClass")));
      SPropertyOperations.set(classNode, "isStatic", "" + (SPropertyOperations.getBoolean(node, "isStatic")));
      SPropertyOperations.set(classNode, "isFinal", "" + (SPropertyOperations.getBoolean(node, "isFinal")));
      SLinkOperations.setTarget(classNode, "visibility", SLinkOperations.getTarget(node, "visibility", true), true);
      SPropertyOperations.set(classNode, "resolveInfo", SPropertyOperations.getString(node, "resolveInfo"));
      ListSequence.fromList(SLinkOperations.getTargets(classNode, "implementedInterface", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "implementedInterface", true)));
      ListSequence.fromList(SLinkOperations.getTargets(classNode, "annotation", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "annotation", true)));
      ListSequence.fromList(SLinkOperations.getTargets(classNode, "member", true)).addSequence(Sequence.fromIterable(Classifier_Behavior.call_members_1465982738252129704(node)));

      ListSequence.fromList(SNodeOperations.getDescendants(classNode, "jetbrains.mps.baseLanguage.structure.SuperMethodCall", false, new String[]{})).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          final SNode superMethodCall = it;
          SNode foundNewSuperMethod = Sequence.fromIterable(IClassifierType_Behavior.call_getMembers_7405920559687277275(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), classNode, "virtual_getSuperclass_1240936569950", new Object[]{}))).findFirst(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration") && BaseMethodDeclaration_Behavior.call_hasSameSignature_1213877350435(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), SLinkOperations.getTarget(superMethodCall, "baseMethodDeclaration", false));
            }
          });
          if ((foundNewSuperMethod != null)) {
            SLinkOperations.setTarget(superMethodCall, "baseMethodDeclaration", foundNewSuperMethod, false);
          }
        }
      });

      ListSequence.fromList(SModelOperations.getNodes(SNodeOperations.getModel(node), "jetbrains.mps.baseLanguage.structure.StaticMethodCall")).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return eq_ck6aau_a0a0a0a0a0a71a2o(SLinkOperations.getTarget(it, "classConcept", false), node);
        }
      }).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          SLinkOperations.setTarget(it, "classConcept", classNode, false);
        }
      });
      ListSequence.fromList(SModelOperations.getNodes(SNodeOperations.getModel(node), "jetbrains.mps.baseLanguage.structure.StaticFieldReference")).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return eq_ck6aau_a0a0a0a0a0a81a2o(SLinkOperations.getTarget(it, "classifier", false), node);
        }
      }).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          SLinkOperations.setTarget(it, "classifier", classNode, false);
        }
      });

      editorContext.selectWRTFocusPolicy(classNode);
    }

    public IntentionDescriptor getDescriptor() {
      return TurnEnumToClassAndBack_Intention.this;
    }
  }

  private static boolean eq_ck6aau_a0a0a0a0a0a71a2o(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_ck6aau_a0a0a0a0a0a81a2o(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
