package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.model.SNodeReference;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class ElsifSwapWithMain_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public ElsifSwapWithMain_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.ElsifClause";
  }

  public String getPresentation() {
    return "ElsifSwapWithMain";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.intentions.ElsifSwapWithMain_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new jetbrains.mps.smodel.SNodePointer("r:00000000-0000-4000-0000-011c895902c6(jetbrains.mps.baseLanguage.intentions)", "1206066794083");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ElsifSwapWithMain_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Swap Elsif Clause with Main Clause";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode ifStatement = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.IfStatement");
      SNode condition = SLinkOperations.getTarget(ifStatement, "condition", true);
      SNode statementList = SLinkOperations.getTarget(ifStatement, "ifTrue", true);
      SLinkOperations.setTarget(ifStatement, "condition", SLinkOperations.getTarget(node, "condition", true), true);
      SLinkOperations.setTarget(ifStatement, "ifTrue", SLinkOperations.getTarget(node, "statementList", true), true);
      SLinkOperations.setTarget(node, "condition", condition, true);
      SLinkOperations.setTarget(node, "statementList", statementList, true);
    }

    public IntentionDescriptor getDescriptor() {
      return ElsifSwapWithMain_Intention.this;
    }
  }
}
