package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class AddElsifClause_Intention extends BaseIntention {
  public AddElsifClause_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.IfStatement";
  }

  public String getPresentation() {
    return "AddElsifClause";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.intentions.AddElsifClause_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:20de48b0-42f2-4107-9f28-986d564d8711(jetbrains.mps.baseLanguage.intentions@3_0)", "1206063267399");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Add Elsif Clause";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return ListSequence.fromList(SLinkOperations.getTargets(node, "elsifClauses", true)).isEmpty();
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode ifFalse = SLinkOperations.getTarget(node, "ifFalseStatement", true);
    SLinkOperations.setTarget(node, "ifFalseStatement", null, true);
    SNodeFactoryOperations.addNewChild(node, "elsifClauses", "jetbrains.mps.baseLanguage.structure.ElsifClause");
    SLinkOperations.setTarget(node, "ifFalseStatement", ifFalse, true);
  }
}
