package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class ElsifTransform_Intention extends BaseIntention {
  public ElsifTransform_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.IfStatement";
  }

  public String getPresentation() {
    return "ElsifTransform";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.intentions.ElsifTransform_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902c6(jetbrains.mps.baseLanguage.intentions)", "1206065955177");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Elsif Transform";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    SNode ifFalseStatement = SLinkOperations.getTarget(node, "ifFalseStatement", true);
    return (ifFalseStatement != null) && SNodeOperations.isInstanceOf(ifFalseStatement, "jetbrains.mps.baseLanguage.structure.IfStatement");
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode ifFalseStatement = SLinkOperations.getTarget(node, "ifFalseStatement", true);
    while (true) {
      SNode ifStatement = SNodeOperations.cast(ifFalseStatement, "jetbrains.mps.baseLanguage.structure.IfStatement");
      SNode elsifClause = SNodeFactoryOperations.addNewChild(node, "elsifClauses", "jetbrains.mps.baseLanguage.structure.ElsifClause");
      SLinkOperations.setTarget(elsifClause, "condition", SLinkOperations.getTarget(ifStatement, "condition", true), true);
      SLinkOperations.setTarget(elsifClause, "statementList", SLinkOperations.getTarget(ifStatement, "ifTrue", true), true);
      ifFalseStatement = SLinkOperations.getTarget(ifStatement, "ifFalseStatement", true);
      if ((ifFalseStatement == null)) {
        break;
      }
      if (!(SNodeOperations.isInstanceOf(ifFalseStatement, "jetbrains.mps.baseLanguage.structure.IfStatement"))) {
        SLinkOperations.setTarget(node, "ifFalseStatement", ifFalseStatement, true);
        break;
      }
    }
  }
}
