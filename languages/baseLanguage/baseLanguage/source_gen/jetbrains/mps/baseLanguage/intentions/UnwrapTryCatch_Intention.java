package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class UnwrapTryCatch_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public UnwrapTryCatch_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.ITryCatchStatement";
  }

  public String getPresentation() {
    return "UnwrapTryCatch";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.intentions.UnwrapTryCatch_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.baseLanguage";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    SNode selectedNode = editorContext.getSelectedNode();
    for (SNode ancestor : ListSequence.fromList(SNodeOperations.getAncestors(selectedNode, null, true))) {
      if (SNodeOperations.isInstanceOf(ancestor, "jetbrains.mps.baseLanguage.structure.ITryCatchStatement")) {
        return eq_cj56ns_a0a0a0b0j(ancestor, node);
      }
    }
    return false;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902c6(jetbrains.mps.baseLanguage.intentions)", "7093209195843978568");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new UnwrapTryCatch_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Unwrap Try-Catch Block";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode body = (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.TryStatement") ?
        SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.TryStatement"), "body", true) :
        SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.TryCatchStatement"), "body", true)
      );

      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.StatementList")) {
        final SNode statementList = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.StatementList");
        final Wrappers._int index = new Wrappers._int(ListSequence.fromList(SLinkOperations.getTargets(statementList, "statement", true)).indexOf(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.Statement")));
        ListSequence.fromList(SLinkOperations.getTargets(statementList, "statement", true)).removeElementAt(index.value);
        ListSequence.fromList(SLinkOperations.getTargets(body, "statement", true)).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            ListSequence.fromList(SLinkOperations.getTargets(statementList, "statement", true)).insertElement(index.value, it);
            index.value += 1;
          }
        });
      } else {
        SNode statement = SNodeFactoryOperations.replaceWithNewChild(node, "jetbrains.mps.baseLanguage.structure.BlockStatement");
        SLinkOperations.setTarget(statement, "statements", body, true);
      }
    }

    public IntentionDescriptor getDescriptor() {
      return UnwrapTryCatch_Intention.this;
    }
  }

  private static boolean eq_cj56ns_a0a0a0b0j(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
