package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class SwapTernaryBranches_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public SwapTernaryBranches_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression";
  }

  public String getPresentation() {
    return "SwapTernaryBranches";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.intentions.SwapTernaryBranches_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.baseLanguage";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902c6(jetbrains.mps.baseLanguage.intentions)", "7940428822325910682");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new SwapTernaryBranches_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Swap Ternary Operator Branches";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode left = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node, "condition", true), "jetbrains.mps.baseLanguage.structure.BinaryOperation"), "leftExpression", true);
      SNode right = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node, "condition", true), "jetbrains.mps.baseLanguage.structure.BinaryOperation"), "rightExpression", true);

      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "condition", true), "jetbrains.mps.baseLanguage.structure.NotExpression")) {
        SLinkOperations.setTarget(node, "condition", SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node, "condition", true), "jetbrains.mps.baseLanguage.structure.NotExpression"), "expression", true), true);
      } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "condition", true), "jetbrains.mps.baseLanguage.structure.EqualsExpression")) {
        SNode not = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.NotEqualsExpression", null);
        SLinkOperations.setTarget(not, "leftExpression", left, true);
        SLinkOperations.setTarget(not, "rightExpression", right, true);
        SLinkOperations.setTarget(node, "condition", not, true);
      } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "condition", true), "jetbrains.mps.baseLanguage.structure.NPEEqualsExpression")) {
        SNode not = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.NPENotEqualsExpression", null);
        SLinkOperations.setTarget(not, "leftExpression", left, true);
        SLinkOperations.setTarget(not, "rightExpression", right, true);
        SLinkOperations.setTarget(node, "condition", not, true);
      } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "condition", true), "jetbrains.mps.baseLanguage.structure.NotEqualsExpression")) {
        SNode eq = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EqualsExpression", null);
        SLinkOperations.setTarget(eq, "leftExpression", left, true);
        SLinkOperations.setTarget(eq, "rightExpression", right, true);
        SLinkOperations.setTarget(node, "condition", eq, true);
      } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "condition", true), "jetbrains.mps.baseLanguage.structure.NPENotEqualsExpression")) {
        SNode not = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.NPEEqualsExpression", null);
        SLinkOperations.setTarget(not, "leftExpression", left, true);
        SLinkOperations.setTarget(not, "rightExpression", right, true);
        SLinkOperations.setTarget(node, "condition", not, true);
      } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "condition", true), "jetbrains.mps.baseLanguage.structure.GreaterThanExpression")) {
        SNode not = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression", null);
        SLinkOperations.setTarget(not, "leftExpression", left, true);
        SLinkOperations.setTarget(not, "rightExpression", right, true);
        SLinkOperations.setTarget(node, "condition", not, true);
      } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "condition", true), "jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression")) {
        SNode not = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LessThanExpression", null);
        SLinkOperations.setTarget(not, "leftExpression", left, true);
        SLinkOperations.setTarget(not, "rightExpression", right, true);
        SLinkOperations.setTarget(node, "condition", not, true);
      } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "condition", true), "jetbrains.mps.baseLanguage.structure.LessThanExpression")) {
        SNode not = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression", null);
        SLinkOperations.setTarget(not, "leftExpression", left, true);
        SLinkOperations.setTarget(not, "rightExpression", right, true);
        SLinkOperations.setTarget(node, "condition", not, true);
      } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "condition", true), "jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression")) {
        SNode not = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LessThanExpression", null);
        SLinkOperations.setTarget(not, "leftExpression", left, true);
        SLinkOperations.setTarget(not, "rightExpression", right, true);
        SLinkOperations.setTarget(node, "condition", not, true);
      } else {
        SNode not = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.NotExpression", null);
        SLinkOperations.setTarget(not, "expression", SLinkOperations.getTarget(node, "condition", true), true);
        SLinkOperations.setTarget(node, "condition", not, true);
      }
      SNode ifTrue = SNodeOperations.copyNode(SLinkOperations.getTarget(node, "ifTrue", true));
      SLinkOperations.setTarget(node, "ifTrue", SNodeOperations.copyNode(SLinkOperations.getTarget(node, "ifFalse", true)), true);
      SLinkOperations.setTarget(node, "ifFalse", ifTrue, true);
    }

    public IntentionDescriptor getDescriptor() {
      return SwapTernaryBranches_Intention.this;
    }
  }
}
