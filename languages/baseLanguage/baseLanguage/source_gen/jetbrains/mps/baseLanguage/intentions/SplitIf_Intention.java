package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class SplitIf_Intention extends BaseIntention {
  public SplitIf_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.IfStatement";
  }

  public String getPresentation() {
    return "SplitIf";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.intentions.SplitIf_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:e456489e-54f1-4f7f-a501-bb6a31480eab(jetbrains.mps.baseLanguage.intentions@3_0)", "5155195849735077874");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Split If Statement";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "condition", true), "jetbrains.mps.baseLanguage.structure.AndExpression") && ListSequence.fromList(SLinkOperations.getTargets(node, "elsifClauses", true)).isEmpty() && SLinkOperations.getTarget(node, "ifFalseStatement", true) == null;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode andExpression = SNodeOperations.cast(SLinkOperations.getTarget(node, "condition", true), "jetbrains.mps.baseLanguage.structure.AndExpression");
    SNode left = SLinkOperations.getTarget(andExpression, "leftExpression", true);
    SNode right = SLinkOperations.getTarget(andExpression, "rightExpression", true);
    SLinkOperations.setTarget(node, "condition", right, true);
    SNode statement = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IfStatement", null);
    SLinkOperations.setTarget(statement, "condition", left, true);
    SNodeOperations.replaceWithAnother(node, statement);
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(statement, "ifTrue", true), "statement", true)).addElement(node);
    SNodeOperations.deleteNode(andExpression);
  }
}
