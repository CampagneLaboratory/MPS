package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.core.behavior.IDeprecatable_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class DeprecatedJavaDoc_Intention extends BaseIntention {
  public DeprecatedJavaDoc_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.IBLDeprecatable";
  }

  public String getPresentation() {
    return "DeprecatedJavaDoc";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.intentions.DeprecatedJavaDoc_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:20de48b0-42f2-4107-9f28-986d564d8711(jetbrains.mps.baseLanguage.intentions@3_0)", "1223648378225");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    if (IDeprecatable_Behavior.call_isDeprecated_1224609060727(node)) {
      return "Remove Deprecated javadoc";
    } else {
      return "Add Deprecated javadoc";
    }
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    if (SPropertyOperations.getBoolean(node, "isDeprecated")) {
      SPropertyOperations.set(node, "isDeprecated", "" + (false));
    } else {
      SPropertyOperations.set(node, "isDeprecated", "" + (true));
    }
  }
}
