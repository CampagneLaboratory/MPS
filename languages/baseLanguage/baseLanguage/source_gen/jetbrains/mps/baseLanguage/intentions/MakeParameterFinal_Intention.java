package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.intentions.IntentionDescriptor;

public class MakeParameterFinal_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public MakeParameterFinal_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.VariableReference";
  }

  public String getPresentation() {
    return "MakeParameterFinal";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.intentions.MakeParameterFinal_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.baseLanguage";
  }

  public IntentionType getType() {
    return IntentionType.ERROR;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"))) {
      return false;
    }
    SNode declaration = SNodeOperations.cast(SLinkOperations.getTarget(node, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.ParameterDeclaration");
    SNode methodNode = SNodeOperations.getAncestor(declaration, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false);
    SNode classNode = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.AnonymousClass", false, false);
    if ((classNode == null)) {
      return false;
    }
    if (SPropertyOperations.getBoolean(declaration, "isFinal")) {
      return false;
    }
    return ListSequence.fromList(SNodeOperations.getAncestors(classNode, null, false)).contains(methodNode);
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902c6(jetbrains.mps.baseLanguage.intentions)", "3898325814824766814");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new MakeParameterFinal_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Make Parameter Final";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SPropertyOperations.set(SLinkOperations.getTarget(node, "variableDeclaration", false), "isFinal", "" + (true));
    }

    public IntentionDescriptor getDescriptor() {
      return MakeParameterFinal_Intention.this;
    }
  }
}
