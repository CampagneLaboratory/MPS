package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.behavior.HasAnnotation_Behavior;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class AddAnnotation_Intention extends BaseIntention {
  public AddAnnotation_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.HasAnnotation";
  }

  public String getPresentation() {
    return "AddAnnotation";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.intentions.AddAnnotation_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:e456489e-54f1-4f7f-a501-bb6a31480eab(jetbrains.mps.baseLanguage.intentions@3_0)", "1195647284978");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Add Annotation";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    if (ListSequence.fromList(SLinkOperations.getTargets(node, "annotation", true)).isNotEmpty()) {
      return false;
    }
    if (!(HasAnnotation_Behavior.call_canBeAnnotated_1233076312117(node))) {
      return false;
    }
    SNode selectedNode = editorContext.getSelectedNode();
    if (selectedNode == node) {
      return true;
    }
    return ListSequence.fromList(HasAnnotation_Behavior.call_getChildrenToDisplayIntention_4025276038182319200(node)).contains(selectedNode);
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode annotationInstance = SNodeFactoryOperations.addNewChild(node, "annotation", "jetbrains.mps.baseLanguage.structure.AnnotationInstance");
    editorContext.selectWRTFocusPolicy(annotationInstance);
  }
}
