package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.baseLanguage.actions.AlterStatementListContainerFactoryUtils;
import jetbrains.mps.intentions.IntentionDescriptor;

public class AlterStatementListContainer_Intention implements IntentionFactory {
  public AlterStatementListContainer_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.IContainsStatementList";
  }

  public String getPresentation() {
    return "AlterStatementListContainer";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.intentions.AlterStatementListContainer_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.baseLanguage";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902c6(jetbrains.mps.baseLanguage.intentions)", "8176191621190087466");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    List<IntentionExecutable> list = ListSequence.fromList(new ArrayList<IntentionExecutable>());
    List<SNode> paramList = parameter(node, context);
    if (paramList != null) {
      for (SNode param : paramList) {
        ListSequence.fromList(list).addElement(new AlterStatementListContainer_Intention.IntentionImplementation(param));
      }
    }
    return list;
  }

  private List<SNode> parameter(final SNode node, final EditorContext editorContext) {
    List<SNode> list = ListSequence.fromListAndArray(new ArrayList<SNode>(), SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.IfStatement"), SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.WhileStatement"), SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.DoWhileStatement"), SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ForStatement"), SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ForeachStatement"), SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.ForEachStatement"));
    ListSequence.fromList(list).removeElement(SNodeOperations.getConceptDeclaration(node));
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ForeachStatement") || SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.collections.structure.ForEachStatement")) {
      ListSequence.fromList(list).removeElement(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ForeachStatement"));
      ListSequence.fromList(list).removeElement(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.ForEachStatement"));
    }
    return list;
  }

  public class IntentionImplementation implements IntentionExecutable {
    private SNode myParameter;

    public IntentionImplementation(SNode parameter) {
      myParameter = parameter;
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Change to " + SPropertyOperations.getString(myParameter, "conceptAlias") + ((SConceptOperations.isExactly(myParameter, "jetbrains.mps.baseLanguage.structure.ForeachStatement") ? "each" : "")) + (SConceptOperations.isExactly(myParameter, "jetbrains.mps.baseLanguage.structure.DoWhileStatement") ? "-While" : "") + " statement";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode newInitializedInstance = SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName(SNodeOperations.castConcept(myParameter, "jetbrains.mps.baseLanguage.structure.IContainsStatementList")), null);
      AlterStatementListContainerFactoryUtils.buildContainerIfPossible(node, newInitializedInstance);
      SNodeOperations.replaceWithAnother(node, newInitializedInstance);
      editorContext.selectWRTFocusPolicy(newInitializedInstance);
    }

    public IntentionDescriptor getDescriptor() {
      return AlterStatementListContainer_Intention.this;
    }
  }
}
