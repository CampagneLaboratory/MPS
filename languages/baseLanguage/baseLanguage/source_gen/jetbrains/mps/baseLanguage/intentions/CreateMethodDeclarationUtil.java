package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.SModelStereotype;

public class CreateMethodDeclarationUtil {
  public CreateMethodDeclarationUtil() {
  }
  public static boolean isApplicable(EditorContext editorContext, SNode node) {
    return CreateMethodDeclarationUtil.getMethodName(editorContext) != null;
  }
  public static String getMethodName(EditorContext editorContext) {
    EditorCell selectedCell = editorContext.getSelectedCell();
    if (!(selectedCell instanceof EditorCell_Label)) {
      return null;
    }
    EditorCell_Label editorCell = ((EditorCell_Label) editorContext.getSelectedCell());
    if (!(editorCell.isErrorState())) {
      return null;
    }
    String name = editorCell.getRenderedText();
    if (name.endsWith("()")) {
      name = name.substring(0, name.length() - 2);
    }
    if (!(name.matches("[a-zA-Z0-9_]*"))) {
      return null;
    }
    return name;
  }
  public static SNode getClassifier(SNode node) {
    SNode operandType = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.DotExpression"), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1197027756228l, 1197027771414l, "operand")));
    if (!(SNodeOperations.isInstanceOf(operandType, "jetbrains.mps.baseLanguage.structure.ClassifierType"))) {
      return null;
    }
    SNode classifier = SLinkOperations.getTarget(SNodeOperations.cast(operandType, "jetbrains.mps.baseLanguage.structure.ClassifierType"), MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier"));
    SModule module = SNodeOperations.getModel(classifier).getModule();
    if (!(SModelStereotype.isUserModel(SNodeOperations.getModel(classifier))) || module.isReadOnly()) {
      return null;
    }
    return classifier;
  }
}
