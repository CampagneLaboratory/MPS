package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class ReplaceForLoopWithWhileLoop_Intention extends BaseIntention {
  public ReplaceForLoopWithWhileLoop_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.ForStatement";
  }

  public String getPresentation() {
    return "ReplaceForLoopWithWhileLoop";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.intentions.ReplaceForLoopWithWhileLoop_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:20de48b0-42f2-4107-9f28-986d564d8711(jetbrains.mps.baseLanguage.intentions@3_0)", "1199623693658");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Replace For with While";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    // replace for loop with while 
    SNode whileStatement = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.WhileStatement", null);
    SNodeOperations.replaceWithAnother(node, whileStatement);
    // adjust while body 
    SLinkOperations.setTarget(whileStatement, "body", SLinkOperations.getTarget(node, "body", true), true);
    // adjust precondition 
    // todo: multiple vars 
    SNode preStatement = SNodeFactoryOperations.insertNewPrevSiblingChild(whileStatement, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement");
    SLinkOperations.setTarget(preStatement, "localVariableDeclaration", SLinkOperations.getTarget(node, "variable", true), true);
    // adjust iteration 
    // todo: multiple iterations 
    for (SNode iteration : SLinkOperations.getTargets(node, "iteration", true)) {
      SNode iterStatement = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null);
      SLinkOperations.setTarget(iterStatement, "expression", iteration, true);
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(whileStatement, "body", true), "statement", true)).addElement(iterStatement);
    }
    // adjust exit condition 
    SLinkOperations.setTarget(whileStatement, "condition", SLinkOperations.getTarget(node, "condition", true), true);
  }
}
