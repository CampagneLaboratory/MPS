package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.List;
import jetbrains.mps.util.IterableUtil;
import java.util.Iterator;

public class IntentionUtils {
  private IntentionUtils() {
  }

  /*package*/ static SNode optimizeNode(SNode node) {
    {
      SNode matchedNode_k79hya_a0b = node;
      {
        boolean matches_k79hya_a0a1 = false;
        {
          SNode matchingNode_k79hya_a0a1 = node;
          if (matchingNode_k79hya_a0a1 != null) {
            matches_k79hya_a0a1 = SModelUtil_new.isAssignableConcept(matchingNode_k79hya_a0a1.getConcept().getConceptId(), "jetbrains.mps.baseLanguage.structure.StatementList");
          }
        }
        if (matches_k79hya_a0a1) {
          return ((int) ListSequence.fromList(SLinkOperations.getTargets(matchedNode_k79hya_a0b, "statement", true)).count() == 1 ?
            optimizeNode(ListSequence.fromList(SLinkOperations.getTargets(matchedNode_k79hya_a0b, "statement", true)).getElement(0)) :
            null
          );
        } else {
          boolean matches_k79hya_b0a1 = false;
          {
            SNode matchingNode_k79hya_b0a1 = node;
            if (matchingNode_k79hya_b0a1 != null) {
              matches_k79hya_b0a1 = SModelUtil_new.isAssignableConcept(matchingNode_k79hya_b0a1.getConcept().getConceptId(), "jetbrains.mps.baseLanguage.structure.BlockStatement");
            }
          }
          if (matches_k79hya_b0a1) {
            return optimizeNode(SLinkOperations.getTarget(matchedNode_k79hya_a0b, "statements", true));
          } else {
            boolean matches_k79hya_c0a1 = false;
            {
              SNode matchingNode_k79hya_c0a1 = node;
              if (matchingNode_k79hya_c0a1 != null) {
                matches_k79hya_c0a1 = SModelUtil_new.isAssignableConcept(matchingNode_k79hya_c0a1.getConcept().getConceptId(), "jetbrains.mps.baseLanguage.structure.Statement");
              }
            }
            if (matches_k79hya_c0a1) {
              return matchedNode_k79hya_a0b;
            } else
            return null;
          }
        }
      }
    }
  }

  /*package*/ static boolean canBeConvertedToTernary(SNode statement1, SNode statement2) {
    return getAppreciateDiffNodes(statement1, statement2) != null;
  }

  /*package*/ static SNode convertToTernary(SNode statement1, SNode statement2, SNode condition) {
    Tuples._2<SNode, SNode> diff = getAppreciateDiffNodes(statement1, statement2);
    if (diff == null) {
      return null;
    }

    SNode ternaryOperator = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression", null);
    SLinkOperations.setTarget(ternaryOperator, "condition", (SNode) CopyUtil.copy(condition), true);
    SLinkOperations.setTarget(ternaryOperator, "ifTrue", (SNode) CopyUtil.copy(diff._0()), true);
    SLinkOperations.setTarget(ternaryOperator, "ifFalse", (SNode) CopyUtil.copy(diff._1()), true);

    SNodeOperations.replaceWithAnother(diff._0(), ternaryOperator);
    return statement1;
  }

  @Nullable
  /*package*/ static Tuples._2<SNode, SNode> getAppreciateDiffNodes(SNode node1, SNode node2) {
    Tuples._2<SNode, SNode> currentDiff = getDiffNodes(node1, node2);
    if (currentDiff == null) {
      return null;
    }

    while (currentDiff._0() != node1) {
      if (isDiffCanBeConvertedToTernary(currentDiff)) {
        return currentDiff;
      }
      currentDiff = MultiTuple.<SNode,SNode>from(SNodeOperations.getParent(currentDiff._0()), SNodeOperations.getParent(currentDiff._1()));
    }

    return (isDiffCanBeConvertedToTernary(currentDiff) ?
      currentDiff :
      null
    );
  }

  /*package*/ static boolean isDiffCanBeConvertedToTernary(final Tuples._2<SNode, SNode> diff) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(diff._0()), "jetbrains.mps.baseLanguage.structure.ExpressionStatement")) {
      return false;
    }

    SNode linkDeclaration = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getConceptDeclaration(SNodeOperations.getParent(diff._0())), "linkDeclaration", true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return eq_k79hya_a0a0a0a0a0a0c0f(SPropertyOperations.getString(it, "role"), diff._0().getRoleInParent()) && SPropertyOperations.hasValue(it, "metaClass", "aggregation", "reference");
      }
    });
    return SConceptOperations.isSuperConceptOf(SLinkOperations.getTarget(linkDeclaration, "target", false), "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression");
  }

  @Nullable
  /*package*/ static Tuples._2<SNode, SNode> getDiffNodes(SNode node1, SNode node2) {
    if (neq_k79hya_a0a0g(SNodeOperations.getConceptDeclaration(node1), SNodeOperations.getConceptDeclaration(node2))) {
      return MultiTuple.<SNode,SNode>from(node1, node2);
    }
    SNode concept = SNodeOperations.getConceptDeclaration(node1);

    for (SNode property : ListSequence.fromList(SLinkOperations.getTargets(concept, "propertyDeclaration", true))) {
      if (neq_k79hya_a0a0d0g(node1.getProperty(SPropertyOperations.getString(property, "name")), node2.getProperty(SPropertyOperations.getString(property, "name")))) {
        return MultiTuple.<SNode,SNode>from(node1, node2);
      }
    }

    for (SNode refLink : ListSequence.fromList(SLinkOperations.getTargets(concept, "linkDeclaration", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.hasValue(it, "metaClass", "reference", "reference");
      }
    })) {
      if (node1.getReference(SPropertyOperations.getString(refLink, "role")).getTargetNode() != node2.getReference(SPropertyOperations.getString(refLink, "role")).getTargetNode()) {
        return MultiTuple.<SNode,SNode>from(node1, node2);
      }
    }

    Tuples._2<SNode, SNode> currentResult = null;
    for (SNode childLink : ListSequence.fromList(SLinkOperations.getTargets(concept, "linkDeclaration", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.hasValue(it, "metaClass", "aggregation", "reference");
      }
    })) {
      List<SNode> children1 = IterableUtil.asList(node1.getChildren(SPropertyOperations.getString(childLink, "role")));
      List<SNode> children2 = IterableUtil.asList(node2.getChildren(SPropertyOperations.getString(childLink, "role")));

      if (children1.size() != children2.size()) {
        return MultiTuple.<SNode,SNode>from(node1, node2);
      }

      {
        Iterator<SNode> child1_it = ListSequence.fromList(children1).iterator();
        Iterator<SNode> child2_it = ListSequence.fromList(children2).iterator();
        SNode child1_var;
        SNode child2_var;
        while (child1_it.hasNext() && child2_it.hasNext()) {
          child1_var = child1_it.next();
          child2_var = child2_it.next();
          Tuples._2<SNode, SNode> currentChildDiff = getDiffNodes(child1_var, child2_var);
          if (currentChildDiff != null) {
            if (currentResult == null) {
              currentResult = currentChildDiff;
            } else {
              return MultiTuple.<SNode,SNode>from(node1, node2);
            }
          }
        }
      }
    }

    return currentResult;
  }

  /*package*/ static SNode getReturnedExpression(SNode node) {
    {
      SNode matchedNode_k79hya_a0h = optimizeNode(node);
      {
        boolean matches_k79hya_a0a7 = false;
        {
          SNode matchingNode_k79hya_a0a7 = optimizeNode(node);
          if (matchingNode_k79hya_a0a7 != null) {
            matches_k79hya_a0a7 = SModelUtil_new.isAssignableConcept(matchingNode_k79hya_a0a7.getConcept().getConceptId(), "jetbrains.mps.baseLanguage.structure.ReturnStatement");
          }
        }
        if (matches_k79hya_a0a7) {
          return SLinkOperations.getTarget(matchedNode_k79hya_a0h, "expression", true);
        } else
        return null;
      }
    }
  }

  /*package*/ static SNode getExpressionFromNode(SNode node) {
    {
      SNode matchedNode_k79hya_a0i = optimizeNode(node);
      {
        boolean matches_k79hya_a0a8 = false;
        {
          SNode matchingNode_k79hya_a0a8 = optimizeNode(node);
          if (matchingNode_k79hya_a0a8 != null) {
            matches_k79hya_a0a8 = SModelUtil_new.isAssignableConcept(matchingNode_k79hya_a0a8.getConcept().getConceptId(), "jetbrains.mps.baseLanguage.structure.ExpressionStatement");
          }
        }
        if (matches_k79hya_a0a8) {
          return SLinkOperations.getTarget(matchedNode_k79hya_a0i, "expression", true);
        } else
        return null;
      }
    }
  }



  /*package*/ static boolean hasCondition(SNode node) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.IfStatement") || SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.WhileStatement") || SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.DoWhileStatement");
  }

  /*package*/ static SNode getCondition(SNode node) {
    assert hasCondition(node);
    return SNodeOperations.cast(ListSequence.fromList(SNodeOperations.getChildren(node)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.Expression");
      }
    }).first(), "jetbrains.mps.baseLanguage.structure.Expression");
  }

  private static boolean eq_k79hya_a0a0a0a0a0a0c0f(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean neq_k79hya_a0a0g(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  private static boolean neq_k79hya_a0a0d0g(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }
}
