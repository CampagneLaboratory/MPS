package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class ConvertIfReturnConditionToTernaryOperator_Intention extends BaseIntention implements Intention {
  public ConvertIfReturnConditionToTernaryOperator_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.IfStatement";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Convert If Condition to Ternary Operator";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (IntentionUtils.getReturnedExpression(SLinkOperations.getTarget(node, "ifTrue", true)) != null) && (IntentionUtils.getReturnedExpression(SLinkOperations.getTarget(node, "ifFalseStatement", true)) != null) && ListSequence.fromList(SLinkOperations.getTargets(node, "elsifClauses", true)).isEmpty();
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode ternaryOperator = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression", null);
    SLinkOperations.setTarget(ternaryOperator, "condition", SLinkOperations.getTarget(node, "condition", true), true);
    SLinkOperations.setTarget(ternaryOperator, "ifTrue", IntentionUtils.getReturnedExpression(SLinkOperations.getTarget(node, "ifTrue", true)), true);
    SLinkOperations.setTarget(ternaryOperator, "ifFalse", IntentionUtils.getReturnedExpression(SLinkOperations.getTarget(node, "ifFalseStatement", true)), true);
    SNode returnStatement = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ReturnStatement", null);
    SLinkOperations.setTarget(returnStatement, "expression", ternaryOperator, true);
    SNodeOperations.replaceWithAnother(node, returnStatement);
  }

  public String getLocationString() {
    return "jetbrains.mps.baseLanguage.intentions";
  }
}
