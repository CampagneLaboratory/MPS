package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ReplaceForEachLoopWithIndexedLoop_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public ReplaceForEachLoopWithIndexedLoop_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.ForeachStatement";
  }

  public String getPresentation() {
    return "ReplaceForEachLoopWithIndexedLoop";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.intentions.ReplaceForEachLoopWithIndexedLoop_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.baseLanguage";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node, "iterable", true)), "jetbrains.mps.baseLanguage.structure.ArrayType") || SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node, "iterable", true)), "jetbrains.mps.baseLanguage.collections.structure.ListType");
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902c6(jetbrains.mps.baseLanguage.intentions)", "1199627182107");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ReplaceForEachLoopWithIndexedLoop_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Replace Foreach Loop with Indexed Loop";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode iterable = SLinkOperations.getTarget(node, "iterable", true);
      SNode forStatement = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ForStatement", null);
      SPropertyOperations.set(forStatement, "label", SPropertyOperations.getString(node, "label"));

      SNode forVariableDeclaration = SNodeFactoryOperations.setNewChild(forStatement, "variable", "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration");
      boolean containsDefault = false;
      String name = "i";
      List<SNode> localVariableDeclarations = SNodeOperations.getDescendants(SLinkOperations.getTarget(node, "body", true), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", false, new String[]{});
      ListSequence.fromList(localVariableDeclarations).addElement(SLinkOperations.getTarget(node, "variable", true));
      for (SNode localVar : localVariableDeclarations) {
        String varName = SPropertyOperations.getString(localVar, "name");
        if (varName.equals(name)) {
          containsDefault = true;
        }
      }
      int nameSuffix = 0;
      while (containsDefault) {
        nameSuffix++;
        containsDefault = false;
        for (SNode localVar : localVariableDeclarations) {
          String varName = SPropertyOperations.getString(localVar, "name");
          if (varName.equals(name + nameSuffix)) {
            containsDefault = true;
          }
        }
      }
      SPropertyOperations.set(forVariableDeclaration, "name", (nameSuffix == 0 ? name : name + nameSuffix));
      SLinkOperations.setTarget(forVariableDeclaration, "type", _quotation_createNode_zgbvoa_a0a31a0(), true);
      SNodeFactoryOperations.setNewChild(forVariableDeclaration, "initializer", "jetbrains.mps.baseLanguage.structure.IntegerConstant");
      SPropertyOperations.set(SNodeOperations.cast(SLinkOperations.getTarget(forVariableDeclaration, "initializer", true), "jetbrains.mps.baseLanguage.structure.IntegerConstant"), "value", "" + (0));

      SNode forCondition = SNodeFactoryOperations.setNewChild(forStatement, "condition", "jetbrains.mps.baseLanguage.structure.LessThanExpression");
      SLinkOperations.setNewChild(forCondition, "leftExpression", "jetbrains.mps.baseLanguage.structure.VariableReference");
      SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(forCondition, "leftExpression", true), "jetbrains.mps.baseLanguage.structure.VariableReference"), "variableDeclaration", forVariableDeclaration, false);
      if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node, "iterable", true)), "jetbrains.mps.baseLanguage.structure.ArrayType")) {
        SNodeFactoryOperations.setNewChild(SNodeFactoryOperations.setNewChild(forCondition, "rightExpression", "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", "jetbrains.mps.baseLanguage.structure.ArrayLengthOperation");
      } else if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node, "iterable", true)), "jetbrains.mps.baseLanguage.collections.structure.ListType")) {
        SNodeFactoryOperations.setNewChild(SNodeFactoryOperations.setNewChild(forCondition, "rightExpression", "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", "jetbrains.mps.baseLanguage.collections.structure.GetSizeOperation");
      } else {
        return;
      }
      SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(forCondition, "rightExpression", true), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operand", SNodeOperations.copyNode(iterable), true);

      SNode iterationExpr = SNodeFactoryOperations.addNewChild(forStatement, "iteration", "jetbrains.mps.baseLanguage.structure.PostfixIncrementExpression");
      SLinkOperations.setNewChild(iterationExpr, "expression", "jetbrains.mps.baseLanguage.structure.VariableReference");
      SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(iterationExpr, "expression", true), "jetbrains.mps.baseLanguage.structure.VariableReference"), "variableDeclaration", forVariableDeclaration, false);

      SNode firstStatement = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", null);
      final SNode variable = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", null);
      SLinkOperations.setTarget(firstStatement, "localVariableDeclaration", variable, true);
      SPropertyOperations.set(variable, "name", SPropertyOperations.getString(SLinkOperations.getTarget(node, "variable", true), "name"));
      SLinkOperations.setTarget(variable, "type", SLinkOperations.getTarget(SLinkOperations.getTarget(node, "variable", true), "type", true), true);

      SNode iteratorReference = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference", null);
      SLinkOperations.setTarget(iteratorReference, "variableDeclaration", forVariableDeclaration, false);
      if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node, "iterable", true)), "jetbrains.mps.baseLanguage.structure.ArrayType")) {
        SNode arrayAccess = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ArrayAccessExpression", null);
        SLinkOperations.setTarget(arrayAccess, "array", SNodeOperations.copyNode(SLinkOperations.getTarget(node, "iterable", true)), true);
        SLinkOperations.setTarget(arrayAccess, "index", iteratorReference, true);
        SLinkOperations.setTarget(variable, "initializer", arrayAccess, true);
      } else if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node, "iterable", true)), "jetbrains.mps.baseLanguage.collections.structure.ListType")) {
        SNode listAccess = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression", null);
        SLinkOperations.setTarget(listAccess, "list", SNodeOperations.copyNode(SLinkOperations.getTarget(node, "iterable", true)), true);
        SLinkOperations.setTarget(listAccess, "index", iteratorReference, true);
        SLinkOperations.setTarget(variable, "initializer", listAccess, true);
      }
      final SNode fake_node = node;
      ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(node, "body", true), null, false, new String[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.VariableReference") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.VariableReference"), "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"));
        }
      }).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          if (SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.VariableReference"), "variableDeclaration", false) == SLinkOperations.getTarget(fake_node, "variable", true)) {
            SNode itemReference = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference", null);
            SLinkOperations.setTarget(itemReference, "variableDeclaration", variable, false);
            SNodeOperations.replaceWithAnother(it, itemReference);
          }
        }
      });
      SLinkOperations.setTarget(forStatement, "body", SLinkOperations.getTarget(node, "body", true), true);
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(forStatement, "body", true), "statement", true)).insertElement(0, firstStatement);
      // 
      SNodeOperations.replaceWithAnother(node, forStatement);
    }

    public IntentionDescriptor getDescriptor() {
      return ReplaceForEachLoopWithIndexedLoop_Intention.this;
    }
  }

  private static SNode _quotation_createNode_zgbvoa_a0a31a0() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerType", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }
}
