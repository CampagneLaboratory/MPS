package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.intentions.IntentionDescriptor;

public class RemoveStaticFieldModifier_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public RemoveStaticFieldModifier_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration";
  }

  public String getPresentation() {
    return "RemoveStaticFieldModifier";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.intentions.RemoveStaticFieldModifier_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.baseLanguage";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    if (SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false) == null) {
      return false;
    }
    return true;

  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902c6(jetbrains.mps.baseLanguage.intentions)", "1809470990894798934");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new RemoveStaticFieldModifier_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Remove 'static' Modifier";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      final SNode field = SNodeFactoryOperations.insertNewNextSiblingChild(node, "jetbrains.mps.baseLanguage.structure.FieldDeclaration");
      SLinkOperations.setTarget(field, "type", SLinkOperations.getTarget(node, "type", true), true);
      SLinkOperations.setTarget(field, "visibility", SLinkOperations.getTarget(node, "visibility", true), true);
      SLinkOperations.setTarget(field, "initializer", SLinkOperations.getTarget(node, "initializer", true), true);
      SPropertyOperations.set(field, "isDeprecated", "" + (SPropertyOperations.getBoolean(node, "isDeprecated")));
      SPropertyOperations.set(field, "name", SPropertyOperations.getString(node, "name"));
      SPropertyOperations.set(field, "isFinal", "" + (SPropertyOperations.getBoolean(node, "isFinal")));
      ListSequence.fromList(SLinkOperations.getTargets(field, "annotation", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "annotation", true)));
      AttributeOperations.setAttribute(field, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment"), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment")));
      SNodeOperations.deleteNode(node);
      editorContext.selectWRTFocusPolicy(field);
    }

    public IntentionDescriptor getDescriptor() {
      return RemoveStaticFieldModifier_Intention.this;
    }
  }
}
