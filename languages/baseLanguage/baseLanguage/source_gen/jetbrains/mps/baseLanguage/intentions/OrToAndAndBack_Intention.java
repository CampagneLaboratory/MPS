package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class OrToAndAndBack_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public OrToAndAndBack_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.BinaryOperation";
  }

  public String getPresentation() {
    return "OrToAndAndBack";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.intentions.OrToAndAndBack_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.baseLanguage";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    if (editorContext.getSelectedNode() != node && !(isVisibleInChild(node, editorContext.getSelectedNode(), editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.AndExpression") || SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.OrExpression");
  }

  private boolean isVisibleInChild(final SNode node, final SNode childNode, final EditorContext editorContext) {
    return eq_x6eozt_a0a0k(SNodeOperations.getParent(childNode), node);
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902c6(jetbrains.mps.baseLanguage.intentions)", "3832376534040308203");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new OrToAndAndBack_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.AndExpression") ? "Turn to Or" : "Turn to And");
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode operation = (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.AndExpression") ? SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.OrExpression", null) : SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.AndExpression", null));
      SNode leftCandidate = IntentionUtils.negateBooleanNodes(SLinkOperations.getTarget(node, "leftExpression", true));
      SNode rightCandidate = IntentionUtils.negateBooleanNodes(SLinkOperations.getTarget(node, "rightExpression", true));
      if (SNodeOperations.isInstanceOf(operation, "jetbrains.mps.baseLanguage.structure.AndExpression")) {
        if (SNodeOperations.isInstanceOf(leftCandidate, "jetbrains.mps.baseLanguage.structure.OrExpression")) {
          SNode parens = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null);
          SLinkOperations.setTarget(parens, "expression", leftCandidate, true);
          leftCandidate = parens;
        }
        if (SNodeOperations.isInstanceOf(rightCandidate, "jetbrains.mps.baseLanguage.structure.OrExpression")) {
          SNode parens = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null);
          SLinkOperations.setTarget(parens, "expression", rightCandidate, true);
          rightCandidate = parens;
        }
      }
      SLinkOperations.setTarget(operation, "leftExpression", leftCandidate, true);
      SLinkOperations.setTarget(operation, "rightExpression", rightCandidate, true);
      SNodeOperations.replaceWithAnother(node, operation);
    }

    public IntentionDescriptor getDescriptor() {
      return OrToAndAndBack_Intention.this;
    }
  }

  private static boolean eq_x6eozt_a0a0k(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
