package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.openapi.editor.Editor;
import jetbrains.mps.openapi.navigation.NavigationSupport;
import jetbrains.mps.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class CreateMethodDeclaration_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public CreateMethodDeclaration_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.IOperation";
  }

  public String getPresentation() {
    return "CreateMethodDeclaration";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.intentions.CreateMethodDeclaration_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.baseLanguage";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return CreateMethodDeclarationUtil.isApplicable(editorContext, node);
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902c6(jetbrains.mps.baseLanguage.intentions)", "5742179528877834612");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new CreateMethodDeclaration_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Create Method Declaration";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode classifier = CreateMethodDeclarationUtil.getClassifier(node);
      boolean isSameClassifier = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.Classifier", false, false) == classifier;
      final String name = CreateMethodDeclarationUtil.getMethodName(editorContext);
      SNode type;
      SNode inferType = TypeChecker.getInstance().getInferredTypeOf(node);
      if (SNodeOperations.isInstanceOf(inferType, "jetbrains.mps.baseLanguage.structure.Type")) {
        type = SNodeOperations.cast(inferType, "jetbrains.mps.baseLanguage.structure.Type");
      } else {
        type = _quotation_createNode_v1wtfy_a0a0a5a0();
      }
      SNode method = _quotation_createNode_v1wtfy_a0g0a(type, name);
      if (!(isSameClassifier)) {
        SLinkOperations.setTarget(method, "visibility", _quotation_createNode_v1wtfy_a0a0h0a(), true);
      }
      ListSequence.fromList(SLinkOperations.getTargets(classifier, "member", true)).addElement(method);
      SNodeOperations.replaceWithAnother(node, _quotation_createNode_v1wtfy_a0a9a0(method));
      if (isSameClassifier) {
        editorContext.selectWRTFocusPolicy(method);
      } else {
        IOperationContext operationContext = editorContext.getOperationContext();
        Editor editor = NavigationSupport.getInstance().openNode(operationContext, classifier, true, false);
        editor.getEditorContext().selectWRTFocusPolicy(method);
      }
    }

    public IntentionDescriptor getDescriptor() {
      return CreateMethodDeclaration_Intention.this;
    }
  }

  private static SNode _quotation_createNode_v1wtfy_a0a0a5a0() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VoidType", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_v1wtfy_a0g0a(Object parameter_1, Object parameter_2) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_3, "name", (String) parameter_2);
    quotedNode_4 = (SNode) parameter_1;
    if (quotedNode_4 != null) {
      quotedNode_3.addChild("returnType", HUtil.copyIfNecessary(quotedNode_4));
    }
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PrivateVisibility", null, null, false);
    quotedNode_3.addChild("visibility", quotedNode_5);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, false);
    quotedNode_3.addChild("body", quotedNode_6);
    return quotedNode_3;
  }

  private static SNode _quotation_createNode_v1wtfy_a0a0h0a() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, null, false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_v1wtfy_a0a9a0(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation", null, null, false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_2, "baseMethodDeclaration", (SNode) parameter_1);
    return quotedNode_2;
  }
}
