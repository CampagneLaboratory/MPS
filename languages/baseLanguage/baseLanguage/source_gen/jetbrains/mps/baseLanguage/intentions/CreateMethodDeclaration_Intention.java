package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.openapi.editor.Editor;
import jetbrains.mps.openapi.navigation.NavigationSupport;
import jetbrains.mps.intentions.IntentionDescriptor;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class CreateMethodDeclaration_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public CreateMethodDeclaration_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.IOperation";
  }

  public String getPresentation() {
    return "CreateMethodDeclaration";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.intentions.CreateMethodDeclaration_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return CreateMethodDeclarationUtil.isApplicable(editorContext, node);
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902c6(jetbrains.mps.baseLanguage.intentions)", "5742179528877834612");
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new CreateMethodDeclaration_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Create Method Declaration";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode classifier = CreateMethodDeclarationUtil.getClassifier(node);
      boolean isSameClassifier = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.Classifier", false, false) == classifier;
      final String name = CreateMethodDeclarationUtil.getMethodName(editorContext);
      SNode type;
      SNode inferType = TypeChecker.getInstance().getInferredTypeOf(node);
      if (SNodeOperations.isInstanceOf(inferType, "jetbrains.mps.baseLanguage.structure.Type")) {
        type = SNodeOperations.cast(inferType, "jetbrains.mps.baseLanguage.structure.Type");
      } else {
        type = new CreateMethodDeclaration_Intention.QuotationClass_qv3pxx_a0a0a0f0b0().createNode();
      }
      SNode method = new CreateMethodDeclaration_Intention.QuotationClass_qv3pxx_a0a6a1a().createNode(type, name);
      if (!(isSameClassifier)) {
        SLinkOperations.setTarget(method, "visibility", new CreateMethodDeclaration_Intention.QuotationClass_qv3pxx_a2a0a7a1a().createNode(), true);
      }
      ListSequence.fromList(SLinkOperations.getTargets(classifier, "method", true)).addElement(method);
      SNodeOperations.replaceWithAnother(node, new CreateMethodDeclaration_Intention.QuotationClass_qv3pxx_a1a9a1a().createNode(method));
      if (isSameClassifier) {
        editorContext.selectWRTFocusPolicy(method);
      } else {
        IOperationContext operationContext = editorContext.getOperationContext();
        Editor editor = NavigationSupport.getInstance().openNode(operationContext, classifier, true, false);
        editor.getEditorContext().selectWRTFocusPolicy(method);
      }
    }

    public IntentionDescriptor getDescriptor() {
      return CreateMethodDeclaration_Intention.this;
    }
  }

  public static class QuotationClass_qv3pxx_a0a0a0f0b0 {
    public QuotationClass_qv3pxx_a0a0a0f0b0() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VoidType", null, null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_qv3pxx_a0a6a1a {
    public QuotationClass_qv3pxx_a0a6a1a() {
    }

    public SNode createNode(Object parameter_9, Object parameter_10) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", null, null, GlobalScope.getInstance(), false);
        SNode quotedNode1_5 = quotedNode_1;
        quotedNode1_5.setProperty("name", (String) parameter_10);
        {
          quotedNode_2 = (SNode) parameter_9;
          SNode quotedNode1_6;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_6 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_6 = quotedNode_2;
          }
          if (quotedNode1_6 != null) {
            quotedNode_1.addChild("returnType", HUtil.copyIfNecessary(quotedNode1_6));
          }
        }
        {
          quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PrivateVisibility", null, null, GlobalScope.getInstance(), false);
          SNode quotedNode1_7 = quotedNode_3;
          quotedNode_1.addChild("visibility", quotedNode1_7);
        }
        {
          quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, GlobalScope.getInstance(), false);
          SNode quotedNode1_8 = quotedNode_4;
          quotedNode_1.addChild("body", quotedNode1_8);
        }
        result = quotedNode1_5;
      }
      return result;
    }
  }

  public static class QuotationClass_qv3pxx_a2a0a7a1a {
    public QuotationClass_qv3pxx_a2a0a7a1a() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_qv3pxx_a1a9a1a {
    public QuotationClass_qv3pxx_a1a9a1a() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation", null, null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setReferenceTarget("baseMethodDeclaration", (SNode) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }
}
