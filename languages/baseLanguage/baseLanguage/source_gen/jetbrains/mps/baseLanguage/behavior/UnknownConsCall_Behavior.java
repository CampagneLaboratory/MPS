package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class UnknownConsCall_Behavior {
  public static void init(SNode thisNode) {
  }

  public static SNode virtual_evaluateSubst_8136348407761606764(SNode thisNode) {
    SNode enclosingClass = SNodeOperations.getAncestor(thisNode, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
    if ((enclosingClass == null)) {
      return null;
    }
    SNode result = (SPropertyOperations.getBoolean(thisNode, "isSuper") ?
      SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation", null) :
      SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation", null)
    );
    for (SNode arg : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "actualArgument", true))) {
      ListSequence.fromList(SLinkOperations.getTargets(result, "actualArgument", true)).addElement(SNodeOperations.copyNode(arg));
    }
    SNode foundCons = UnknownConsCall_Behavior.findConstructor_9100188248702369190(enclosingClass, SLinkOperations.getTargets(thisNode, "actualArgument", true));
    if ((foundCons == null)) {
      return null;
    }

    // success 
    SLinkOperations.setTarget(result, "baseMethodDeclaration", foundCons, false);
    return result;
  }

  public static SNode findConstructor_9100188248702369190(SNode claz, List<SNode> args) {
    SNode result;
    List<SNode> conss = SLinkOperations.getTargets(claz, "constructor", true);
    if (ListSequence.fromList(conss).isEmpty()) {
      result = null;
    } else if ((int) ListSequence.fromList(conss).count() == 1) {
      result = ListSequence.fromList(conss).first();
    } else {
      final int argCount = ListSequence.fromList(args).count();
      Iterable<SNode> subset = ListSequence.fromList(conss).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (int) ListSequence.fromList(SLinkOperations.getTargets(it, "parameter", true)).count() == argCount;
        }
      });
      result = Sequence.fromIterable(subset).first();
    }
    return result;
  }
}
