package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.project.IModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.reloading.ReflectionUtil;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.SModelDescriptor;

public class VariableReference_Behavior {
  public static void init(SNode thisNode) {
  }

  public static SNode virtual_getTypeAnnotation_1233920952262(SNode thisNode) {
    return BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SLinkOperations.getTarget(thisNode, "variableDeclaration", false), "virtual_getTypeAnnotation_1233920952262", new Object[]{});
  }

  public static SNode virtual_getVariable_1023687332192481693(SNode thisNode) {
    return SLinkOperations.getTarget(thisNode, "variableDeclaration", false);
  }

  public static Object virtual_getCompileTimeConstantValue_1238860310638(SNode thisNode, IModule module) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(thisNode, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
      // todo 
      SNode declaration = SNodeOperations.cast(SLinkOperations.getTarget(thisNode, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration");
      SNode classifier = SNodeOperations.as(SNodeOperations.getParent(declaration), "jetbrains.mps.baseLanguage.structure.Classifier");
      if ((classifier != null) && SModelStereotype.isStubModelStereotype(SNodeOperations.getModel(classifier).getSModelReference().getStereotype())) {
        return Expression_Behavior.call_eval_1213877519769(thisNode, module);
      } else {
        return (BehaviorReflection.invokeVirtual(Boolean.TYPE, SLinkOperations.getTarget(declaration, "initializer", true), "virtual_isCompileTimeConstant_1238860258777", new Object[]{}) ?
          BehaviorReflection.invokeVirtual(Object.class, SLinkOperations.getTarget(declaration, "initializer", true), "virtual_getCompileTimeConstantValue_1238860310638", new Object[]{module}) :
          null
        );
      }
    }

    return BehaviorReflection.invokeSuper(Object.class, thisNode, "jetbrains.mps.baseLanguage.structure.Expression", "virtual_getCompileTimeConstantValue_1238860310638", new Object[]{module});
  }

  public static boolean virtual_isCompileTimeConstant_1238860258777(SNode thisNode) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(thisNode, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
      // todo 
      SNode declaration = SNodeOperations.cast(SLinkOperations.getTarget(thisNode, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration");
      return SPropertyOperations.getBoolean(declaration, "isFinal");
    }

    return BehaviorReflection.invokeSuper(Boolean.TYPE, thisNode, "jetbrains.mps.baseLanguage.structure.Expression", "virtual_isCompileTimeConstant_1238860258777", new Object[]{});
  }

  public static Object virtual_eval_1213877519769(SNode thisNode, IModule module) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(thisNode, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
      // todo 
      SNode declaration = SNodeOperations.cast(SLinkOperations.getTarget(thisNode, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration");
      SNode classifier = SNodeOperations.as(SNodeOperations.getParent(declaration), "jetbrains.mps.baseLanguage.structure.Classifier");

      IModule m = check_gidzrl_a0e0a0e(SNodeOperations.getModel(declaration).getModelDescriptor());
      if (m != null) {
        Object c = null;
        try {
          c = ReflectionUtil.getConstant(m, classifier, SPropertyOperations.getString(declaration, "name"));
        } catch (Throwable t) {
          // do nothing 
        }
        if (c != null) {
          return c;
        }
      }
      return ReflectionUtil.getConstant(module, classifier, SPropertyOperations.getString(declaration, "name"));
    }

    return BehaviorReflection.invokeSuper(Object.class, thisNode, "jetbrains.mps.baseLanguage.structure.Expression", "virtual_eval_1213877519769", new Object[]{module});
  }

  public static boolean call_isParameterOfThisMethod_1240394425603(SNode thisNode) {
    // todo: method from ParameterReference. Remove. 
    if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(thisNode, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"))) {
      throw new IllegalArgumentException();
    }
    if (SNodeOperations.getAncestor(thisNode, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false) == SNodeOperations.getAncestor(SLinkOperations.getTarget(thisNode, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false)) {
      if (SNodeOperations.getAncestor(thisNode, "jetbrains.mps.baseLanguage.structure.Closureoid", false, false) == SNodeOperations.getAncestor(SLinkOperations.getTarget(thisNode, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.Closureoid", false, false)) {
        return true;
      }
    }
    return false;
  }

  public static boolean call_isVariableDefinedInThisMethod_1225456272518(SNode thisNode) {
    // todo: method from LocalVariableReference. Remove 
    if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(thisNode, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"))) {
      throw new IllegalArgumentException();
    }
    SNode anchor = thisNode;
    if ((SNodeOperations.getAncestor(thisNode, "jetbrains.mps.lang.quotation.structure.AbstractAntiquotation", false, false) != null)) {
      anchor = SNodeOperations.getAncestor(thisNode, "jetbrains.mps.lang.quotation.structure.Quotation", false, false);
    }
    if (SNodeOperations.getAncestor(anchor, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false) == SNodeOperations.getAncestor(SLinkOperations.getTarget(thisNode, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false, false)) {
      if (SNodeOperations.getAncestor(anchor, "jetbrains.mps.baseLanguage.structure.Closureoid", false, false) == SNodeOperations.getAncestor(SLinkOperations.getTarget(thisNode, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.Closureoid", false, false)) {
        return true;
      }
    }
    return false;
  }

  public static SNode virtual_getDeclaration_3262277503800831941(SNode thisNode) {
    // todo: method from LocalVariableReference. Remove 
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(thisNode, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")) {
      return SNodeOperations.cast(SLinkOperations.getTarget(thisNode, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration");
    } else {
      return null;
    }
  }

  public static boolean virtual_lvalue_1262430001741497939(SConcept thisConcept) {
    return true;
  }

  private static IModule check_gidzrl_a0e0a0e(SModelDescriptor checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }
}
