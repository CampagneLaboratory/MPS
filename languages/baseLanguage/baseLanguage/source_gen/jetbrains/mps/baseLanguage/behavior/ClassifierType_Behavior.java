package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.ArrayList;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.pattern.GeneratedMatchingPattern;
import jetbrains.mps.typesystem.inference.TypeChecker;
import java.util.Iterator;
import jetbrains.mps.lang.pattern.util.MatchingUtil;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.annotations.NotNull;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.pattern.IMatchingPattern;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.lang.pattern.runtime.PatternUtil;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SNodePointer;

public class ClassifierType_Behavior {
  public static void init(SNode thisNode) {
  }

  public static String virtual_getPresentation_1213877396640(SNode thisNode) {
    SNode classifier = SLinkOperations.getTarget(thisNode, "classifier", false);
    if (classifier == null) {
      return "?no classifier?";
    }
    return ClassifierType_Behavior.call_getPresentation_2354269628709783609(thisNode, SPropertyOperations.getString(classifier, "name"));
  }

  public static String call_getPresentation_2354269628709783609(SNode thisNode, String name) {
    String result = name;
    List<SNode> parms = SLinkOperations.getTargets(thisNode, "parameter", true);
    if (ListSequence.fromList(parms).isNotEmpty()) {
      String parmsText = "";
      for (SNode parm : ListSequence.fromList(parms)) {
        if (parmsText.length() > 0) {
          parmsText = parmsText + ",";
        }
        parmsText = parmsText + BehaviorReflection.invokeVirtual(String.class, parm, "virtual_getPresentation_1213877396640", new Object[]{});
      }
      result = result + "<" + parmsText + ">";
    }
    return result;
  }

  public static String virtual_getDetailedPresentation_2354269628709769373(SNode thisNode) {
    SNode classifier = SLinkOperations.getTarget(thisNode, "classifier", false);
    if (classifier == null) {
      return "?no classifier?";
    }
    return ClassifierType_Behavior.call_getPresentation_2354269628709783609(thisNode, BehaviorReflection.invokeVirtual(String.class, classifier, "virtual_getFqName_1213877404258", new Object[]{}));
  }

  public static String virtual_getErasureSignature_1213877337313(SNode thisNode) {
    SNode classifier = SLinkOperations.getTarget(thisNode, "classifier", false);
    if (classifier == null) {
      return "?no classifier?";
    }
    return BehaviorReflection.invokeVirtual(String.class, classifier, "virtual_getFqName_1213877404258", new Object[]{});
  }

  public static SNode virtual_getErasure_702942408396803226(SNode thisNode) {
    SNode classifierType = SNodeOperations.copyNode(thisNode);
    ListSequence.fromList(SLinkOperations.getTargets(classifierType, "parameter", true)).clear();
    return classifierType;
  }

  @Deprecated
  public static boolean call_isRawType_702942408396828337(SNode thisNode) {
    SNode classifier = SLinkOperations.getTarget(thisNode, "classifier", false);
    if ((classifier == null)) {
      return false;
    }
    if (ListSequence.fromList(SLinkOperations.getTargets(classifier, "typeVariableDeclaration", true)).isEmpty()) {
      return false;
    }
    if (ListSequence.fromList(SLinkOperations.getTargets(thisNode, "parameter", true)).isNotEmpty()) {
      return false;
    }
    return true;
  }

  public static List<String> virtual_getVariableSuffixes_1213877337304(SNode thisNode) {
    String classifierName = SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, "classifier", false), "name");
    if (classifierName == null) {
      return ListSequence.fromList(new ArrayList<String>());
    }
    String shortName = NameUtil.shortNameFromLongName(classifierName);
    return ((List<String>) NameUtil.splitByCamels(NameUtil.decapitalize(shortName)));
  }

  public static SNode virtual_getClassExpression_1213877337357(SNode thisNode) {
    return _quotation_createNode_hz3823_a0a7(SLinkOperations.getTarget(thisNode, "classifier", false));
  }

  public static SNode virtual_getAbstractCreator_1213877337340(SNode thisNode) {
    SNode classifier = SLinkOperations.getTarget(thisNode, "classifier", false);
    if (SNodeOperations.isInstanceOf(classifier, "jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      if (!(SPropertyOperations.getBoolean(SNodeOperations.cast(classifier, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "abstractClass")) && Sequence.fromIterable(ClassConcept_Behavior.call_constructors_5292274854859503373(SNodeOperations.cast(classifier, "jetbrains.mps.baseLanguage.structure.ClassConcept"))).isNotEmpty()) {
        SNode creator = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassCreator", null);
        SLinkOperations.setTarget(creator, "baseMethodDeclaration", Sequence.fromIterable(ClassConcept_Behavior.call_constructors_5292274854859503373(SNodeOperations.cast(classifier, "jetbrains.mps.baseLanguage.structure.ClassConcept"))).first(), false);
        for (SNode typeParm : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "parameter", true))) {
          ListSequence.fromList(SLinkOperations.getTargets(creator, "typeParameter", true)).addElement(SNodeOperations.copyNode(typeParm));
        }
        return creator;
      }
    }
    return null;
  }

  public static boolean virtual_isSupersetOf_1220438914705(SNode thisNode, SNode t) {
    if (SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.structure.WildCardType")) {
      {
        SNode matchedNode_hz3823_a0a0j = thisNode;
        {
          boolean matches_hz3823_a0a0a9 = false;
          GeneratedMatchingPattern matchingPattern_hz3823_a0a0a9 = new ClassifierType_Behavior.Pattern_hz3823_a0a1a1a0a0a01();
          matches_hz3823_a0a0a9 = matchingPattern_hz3823_a0a0a9.match(matchedNode_hz3823_a0a0j);
          if (matches_hz3823_a0a0a9) {
            return true;
          } else
          return false;
        }
      }
    }
    {
      GeneratedMatchingPattern pattern_hz3823_b0j = new ClassifierType_Behavior.Pattern_hz3823_a0a0a1a01(SLinkOperations.getTarget(thisNode, "classifier", false));
      SNode coercedNode_hz3823_b0j = TypeChecker.getInstance().getRuntimeSupport().coerce_(t, pattern_hz3823_b0j);
      if (coercedNode_hz3823_b0j != null) {
        {
          Iterator<SNode> typeParam_it = ListSequence.fromList(((List<SNode>) pattern_hz3823_b0j.getFieldValue("patternVar_l"))).iterator();
          Iterator<SNode> myParam_it = ListSequence.fromList(SLinkOperations.getTargets(thisNode, "parameter", true)).iterator();
          SNode typeParam_var;
          SNode myParam_var;
          while (typeParam_it.hasNext() && myParam_it.hasNext()) {
            typeParam_var = typeParam_it.next();
            myParam_var = myParam_it.next();
            if (SNodeOperations.isInstanceOf(myParam_var, "jetbrains.mps.baseLanguage.structure.WildCardType") || SNodeOperations.isInstanceOf(myParam_var, "jetbrains.mps.baseLanguage.structure.UpperBoundType")) {
              if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE, myParam_var, "virtual_isSupersetOf_1220438914705", new Object[]{typeParam_var}))) {
                return false;
              }
            } else {
              if (!(MatchingUtil.matchNodes(myParam_var, typeParam_var))) {
                return false;
              }
            }
          }
        }
        return true;
      } else {
      }
    }
    return BehaviorReflection.invokeSuper(Boolean.TYPE, thisNode, "jetbrains.mps.baseLanguage.structure.Type", "virtual_isSupersetOf_1220438914705", new Object[]{t});
  }

  public static boolean virtual_isSupersetOf_9029841626175335449(SNode thisNode, SNode t, Map<SNode, SNode> substitutions) {
    if (SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.structure.WildCardType")) {
      {
        SNode matchedNode_hz3823_a0a0k = thisNode;
        {
          boolean matches_hz3823_a0a0a01 = false;
          GeneratedMatchingPattern matchingPattern_hz3823_a0a0a01 = new ClassifierType_Behavior.Pattern_hz3823_a0a1a1a0a0a11();
          matches_hz3823_a0a0a01 = matchingPattern_hz3823_a0a0a01.match(matchedNode_hz3823_a0a0k);
          if (matches_hz3823_a0a0a01) {
            return true;
          } else
          return false;
        }
      }
    }
    {
      GeneratedMatchingPattern pattern_hz3823_b0k = new ClassifierType_Behavior.Pattern_hz3823_a0a0a1a11(SLinkOperations.getTarget(thisNode, "classifier", false));
      SNode coercedNode_hz3823_b0k = TypeChecker.getInstance().getRuntimeSupport().coerce_(t, pattern_hz3823_b0k);
      if (coercedNode_hz3823_b0k != null) {
        {
          Iterator<SNode> typeParam_it = ListSequence.fromList(((List<SNode>) pattern_hz3823_b0k.getFieldValue("patternVar_l"))).iterator();
          Iterator<SNode> myParam_it = ListSequence.fromList(SLinkOperations.getTargets(thisNode, "parameter", true)).iterator();
          SNode typeParam_var;
          SNode myParam_var;
          while (typeParam_it.hasNext() && myParam_it.hasNext()) {
            typeParam_var = typeParam_it.next();
            myParam_var = myParam_it.next();
            SNode _myParam = myParam_var;
            SNode _typeParam = typeParam_var;
            while (SNodeOperations.isInstanceOf(_myParam, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
              SNode temp = SNodeOperations.cast(MapSequence.fromMap(substitutions).get(SLinkOperations.getTarget(SNodeOperations.cast(_myParam, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), "typeVariableDeclaration", false)), "jetbrains.mps.baseLanguage.structure.Type");
              if (temp != null) {
                _myParam = temp;
              } else {
                break;
              }
            }
            while (SNodeOperations.isInstanceOf(_typeParam, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
              SNode temp = SNodeOperations.cast(MapSequence.fromMap(substitutions).get(SLinkOperations.getTarget(SNodeOperations.cast(_typeParam, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), "typeVariableDeclaration", false)), "jetbrains.mps.baseLanguage.structure.Type");
              if (temp != null) {
                _typeParam = temp;
              } else {
                break;
              }
            }
            if (SNodeOperations.isInstanceOf(_myParam, "jetbrains.mps.baseLanguage.structure.WildCardType") || SNodeOperations.isInstanceOf(_myParam, "jetbrains.mps.baseLanguage.structure.UpperBoundType") || SNodeOperations.isInstanceOf(_myParam, "jetbrains.mps.baseLanguage.structure.LowerBoundType")) {
              if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE, _myParam, "virtual_isSupersetOf_9029841626175335449", new Object[]{_typeParam, substitutions}))) {
                return false;
              }
            } else if (SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.structure.UpperBoundType") || SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.structure.LowerBoundType")) {
              return false;
            } else if (SNodeOperations.isInstanceOf(_myParam, "jetbrains.mps.baseLanguage.structure.ClassifierType") && ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(_myParam, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "parameter", true)).isNotEmpty()) {
              if (!(SNodeOperations.isInstanceOf(_typeParam, "jetbrains.mps.baseLanguage.structure.ClassifierType") && ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(_typeParam, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "parameter", true)).isNotEmpty() && BehaviorReflection.invokeVirtual(Boolean.TYPE, _myParam, "virtual_isSupersetOf_9029841626175335449", new Object[]{_typeParam, substitutions}) && BehaviorReflection.invokeVirtual(Boolean.TYPE, _typeParam, "virtual_isSupersetOf_9029841626175335449", new Object[]{_myParam, substitutions}))) {
                return false;
              }
            } else {
              if (!(MatchingUtil.matchNodes(_myParam, _typeParam))) {
                return false;
              }
            }
          }
        }
        return true;
      } else {
      }
    }
    return BehaviorReflection.invokeSuper(Boolean.TYPE, thisNode, "jetbrains.mps.baseLanguage.structure.Type", "virtual_isSupersetOf_9029841626175335449", new Object[]{t, substitutions});
  }

  public static SNode virtual_createDefaultTypeExpression_3359611512358152580(SNode thisNode) {
    return _quotation_createNode_hz3823_a0a11();
  }

  public static boolean virtual_hasMissingParameters_3508583411997314206(SNode thisNode) {
    return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "classifier", false), "typeVariableDeclaration", true)).count() != ListSequence.fromList(SLinkOperations.getTargets(thisNode, "parameter", true)).count();
  }

  public static SNode virtual_getLooseType_5744862332972792015(SNode thisNode, @NotNull Set<SNode> visitedTypes) {
    SNode classifierType = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType", null);
    SLinkOperations.setTarget(classifierType, "classifier", SLinkOperations.getTarget(thisNode, "classifier", false), false);
    for (SNode typeParam : SLinkOperations.getTargets(thisNode, "parameter", true)) {
      ListSequence.fromList(SLinkOperations.getTargets(classifierType, "parameter", true)).addElement(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), typeParam, "virtual_getLooseType_5744862332972792015", new Object[]{visitedTypes}));
    }
    return classifierType;
  }

  public static String virtual_jniSignature_8847328628797633411(SNode thisNode) {
    SNode classifier = SLinkOperations.getTarget(thisNode, "classifier", false);
    String preparedFQName = BehaviorReflection.invokeVirtual(String.class, classifier, "virtual_getFqName_1213877404258", new Object[]{}).replace('.', '/');
    return "L" + preparedFQName + ";";
  }

  public static boolean virtual_isReifiable_2817265908000464118(SNode thisNode) {
    if (!(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "parameter", true)).isEmpty())) {
      for (SNode parameter : SLinkOperations.getTargets(thisNode, "parameter", true)) {
        if (!(SNodeOperations.isInstanceOf(parameter, "jetbrains.mps.baseLanguage.structure.WildCardType"))) {
          return false;
        }
      }
    }
    return true;
  }

  public static SNode virtual_getClassifier_7405920559687237513(SNode thisNode) {
    return SLinkOperations.getTarget(thisNode, "classifier", false);
  }

  public static Iterable<SNode> virtual_getTypeParameters_7405920559687237518(SNode thisNode) {
    return SLinkOperations.getTargets(thisNode, "parameter", true);
  }

  public static SNode virtual_expandGenerics_4122274986016348613(SNode thisNode, Map<SNode, SNode> substitutions, List<SNode> expTrace) {
    if (ListSequence.fromList(SLinkOperations.getTargets(thisNode, "parameter", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "classifier", false), "typeVariableDeclaration", true)).isNotEmpty()) {
      return thisNode;
    }
    if (ListSequence.fromList(SNodeOperations.getDescendants(thisNode, "jetbrains.mps.baseLanguage.structure.TypeVariableReference", false, new String[]{})).isEmpty()) {
      return thisNode;
    }
    return IGenericType_Behavior.call_expandGenericDescendants_4107091686347838550(thisNode, SNodeOperations.copyNode(thisNode), substitutions, expTrace);
  }

  public static void virtual_collectGenericSubstitutions_4107091686347010321(SNode thisNode, final Map<SNode, SNode> substitutions) {
    // recursion guard 
    if (MapSequence.fromMap(substitutions).containsKey(SLinkOperations.getTarget(thisNode, "classifier", false))) {
      return;
    }
    MapSequence.fromMap(substitutions).put(SLinkOperations.getTarget(thisNode, "classifier", false), SLinkOperations.getTarget(thisNode, "classifier", false));

    // for each declared TypeVar substitute its actual value 
    if (ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "classifier", false), "typeVariableDeclaration", true)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return MapSequence.fromMap(substitutions).containsKey(it);
      }
    })) {
      return;
    }
    if (ListSequence.fromList(SLinkOperations.getTargets(thisNode, "parameter", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "classifier", false), "typeVariableDeclaration", true)).isNotEmpty()) {
      // treat raw type as if all params were Object or the appropriate bound 
      for (SNode tvd : ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "classifier", false), "typeVariableDeclaration", true))) {
        MapSequence.fromMap(substitutions).put(tvd, ((SLinkOperations.getTarget(tvd, "bound", true) == null) ? _quotation_createNode_hz3823_a0a0a1a6a91() : SNodeOperations.copyNode(SLinkOperations.getTarget(tvd, "bound", true))));
      }
    } else {
      {
        Iterator<SNode> tvd_it = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "classifier", false), "typeVariableDeclaration", true)).iterator();
        Iterator<SNode> tval_it = ListSequence.fromList(SLinkOperations.getTargets(thisNode, "parameter", true)).iterator();
        SNode tvd_var;
        SNode tval_var;
        while (tvd_it.hasNext() && tval_it.hasNext()) {
          tvd_var = tvd_it.next();
          tval_var = tval_it.next();
          MapSequence.fromMap(substitutions).put(tvd_var, SNodeOperations.copyNode(tval_var));
          // iterate recursively into each parameter type if generic 
          if (SNodeOperations.isInstanceOf(tval_var, "jetbrains.mps.baseLanguage.structure.IGenericType")) {
            BehaviorReflection.invokeVirtual(Void.class, SNodeOperations.cast(tval_var, "jetbrains.mps.baseLanguage.structure.IGenericType"), "virtual_collectGenericSubstitutions_4107091686347010321", new Object[]{substitutions});
          }
        }
      }
    }

    // traverse all extended/implemented classifiers 
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(thisNode, "classifier", false), "jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
      BehaviorReflection.invokeVirtual(Void.class, BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(SLinkOperations.getTarget(thisNode, "classifier", false), "jetbrains.mps.baseLanguage.structure.AnonymousClass"), "virtual_getSuperclass_1240936569950", new Object[]{}), "virtual_collectGenericSubstitutions_4107091686347010321", new Object[]{substitutions});
    } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(thisNode, "classifier", false), "jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      BehaviorReflection.invokeVirtual(Void.class, SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(thisNode, "classifier", false), "jetbrains.mps.baseLanguage.structure.ClassConcept"), "superclass", true), "virtual_collectGenericSubstitutions_4107091686347010321", new Object[]{substitutions});
      for (SNode ifc : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(thisNode, "classifier", false), "jetbrains.mps.baseLanguage.structure.ClassConcept"), "implementedInterface", true))) {
        BehaviorReflection.invokeVirtual(Void.class, ifc, "virtual_collectGenericSubstitutions_4107091686347010321", new Object[]{substitutions});
      }
    } else if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(thisNode, "classifier", false), "jetbrains.mps.baseLanguage.structure.Interface")) {
      for (SNode ifc : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(thisNode, "classifier", false), "jetbrains.mps.baseLanguage.structure.Interface"), "extendedInterface", true))) {
        BehaviorReflection.invokeVirtual(Void.class, ifc, "virtual_collectGenericSubstitutions_4107091686347010321", new Object[]{substitutions});
      }
    }
    // traverse all enclosing classifiers if not in static context 
    // TODO : move to generic declaration? 
    if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE, SLinkOperations.getTarget(thisNode, "classifier", false), "virtual_isStatic_8986964027630462944", new Object[]{}))) {
      SNode enclosing = SNodeOperations.getAncestor(SLinkOperations.getTarget(thisNode, "classifier", false), "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
      if ((enclosing != null)) {
        SNode etype = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType", null);
        SLinkOperations.setTarget(etype, "classifier", enclosing, false);
        for (SNode tvd : ListSequence.fromList(SLinkOperations.getTargets(enclosing, "typeVariableDeclaration", true))) {
          SNode tvr = SNodeFactoryOperations.addNewChild(etype, "parameter", "jetbrains.mps.baseLanguage.structure.TypeVariableReference");
          SLinkOperations.setTarget(tvr, "typeVariableDeclaration", tvd, false);
        }
        BehaviorReflection.invokeVirtual(Void.class, etype, "virtual_collectGenericSubstitutions_4107091686347010321", new Object[]{substitutions});
      }
    }
  }

  public static boolean virtual_canBeCoerced_6321644624958501287(SNode thisNode, String conceptFqName) {
    if ("jetbrains.mps.baseLanguage.structure.ArrayType".equals(conceptFqName)) {
      return SLinkOperations.getTarget(thisNode, "classifier", false) == SLinkOperations.getTarget(_quotation_createNode_hz3823_a0a0a0a0u_0(), "classifier", false) || SLinkOperations.getTarget(thisNode, "classifier", false) == SLinkOperations.getTarget(_quotation_createNode_hz3823_a0a0a0a0u(), "classifier", false);
    }
    return true;
  }

  @Deprecated
  public static SNode call_createDefaultTypeExpression_9011026350741578236(SNode thisNode) {
    return BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), thisNode, "virtual_createDefaultTypeExpression_3359611512358152580", new Object[]{});
  }

  @Deprecated
  public static SNode callSuper_createDefaultTypeExpression_9011026350741578236(SNode thisNode, String callerConceptFqName) {
    return BehaviorManager.getInstance().invokeSuper((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.ClassifierType"), callerConceptFqName, "virtual_createDefaultTypeExpression_3359611512358152580", new Class[]{SNode.class}, new Object[]{});
  }

  public static class Pattern_hz3823_a0a1a1a0a0a01 extends GeneratedMatchingPattern implements IMatchingPattern {
    public Pattern_hz3823_a0a1a1a0a0a01() {
    }

    public boolean match(SNode nodeToMatch) {
      {
        SNode nodeToMatch_ClassifierType_Behavior_hz3823_a0a0a0a0j;
        nodeToMatch_ClassifierType_Behavior_hz3823_a0a0a0a0j = nodeToMatch;
        if (!("jetbrains.mps.baseLanguage.structure.ClassifierType".equals(nodeToMatch_ClassifierType_Behavior_hz3823_a0a0a0a0j.getConcept().getQualifiedName()))) {
          return false;
        }
        {
          SNodeReference pointer = SNODE_POINTER_hz3823_a0a0a0a0b0c0a0a0a0b0b0a0a0k;
          if (!(PatternUtil.matchReferentWithNode(pointer, nodeToMatch_ClassifierType_Behavior_hz3823_a0a0a0a0j.getReferenceTarget("classifier")))) {
            return false;
          }
        }
      }
      return true;
    }

    public boolean hasAntiquotations() {
      return false;
    }

    public void fillFieldValuesFrom(GeneratedMatchingPattern pattern) {
    }

    public Object getFieldValue(String fieldName) {
      return null;
    }

    public void performActions(Object o) {
    }
  }

  public static class Pattern_hz3823_a0a0a1a01 extends GeneratedMatchingPattern implements IMatchingPattern {
    /*package*/ List<SNode> patternVar_l;
    /*package*/ SNode patternVar_ignored;
    /*package*/ Object AntiquotationField_hz3823_a0a0a1a9;

    public Pattern_hz3823_a0a0a1a01(Object parameter_hz3823_a0a0a1a9) {
      this.AntiquotationField_hz3823_a0a0a1a9 = parameter_hz3823_a0a0a1a9;
    }

    public boolean match(SNode nodeToMatch) {
      {
        SNode nodeToMatch_ClassifierType_Behavior_hz3823_a0a1a9;
        nodeToMatch_ClassifierType_Behavior_hz3823_a0a1a9 = nodeToMatch;
        if (!("jetbrains.mps.baseLanguage.structure.ClassifierType".equals(nodeToMatch_ClassifierType_Behavior_hz3823_a0a1a9.getConcept().getQualifiedName()))) {
          return false;
        }
        {
          SNode referent;
          referent = (SNode) this.AntiquotationField_hz3823_a0a0a1a9;
          if (nodeToMatch_ClassifierType_Behavior_hz3823_a0a1a9.getReferenceTarget("classifier") != referent) {
            return false;
          }
        }
        {
          String childRole_ClassifierType_Behavior_hz3823_ = "parameter";
          this.patternVar_l = ListSequence.fromList(new ArrayList<SNode>());
          patternVar_ignored = null;
          for (SNode childVar : nodeToMatch_ClassifierType_Behavior_hz3823_a0a1a9.getChildren(childRole_ClassifierType_Behavior_hz3823_)) {
            patternVar_ignored = childVar;
            ListSequence.fromList(this.patternVar_l).addElement(childVar);
          }
        }
      }
      return true;
    }

    public boolean hasAntiquotations() {
      return true;
    }

    public void fillFieldValuesFrom(GeneratedMatchingPattern pattern) {
      if (pattern != null && pattern.getClass() == this.getClass()) {
        patternVar_l = (List<SNode>) pattern.getFieldValue("patternVar_l");
        patternVar_ignored = (SNode) pattern.getFieldValue("patternVar_ignored");
      }
    }

    public Object getFieldValue(String fieldName) {
      if ("patternVar_l".equals(fieldName)) {
        return patternVar_l;
      }
      if ("patternVar_ignored".equals(fieldName)) {
        return patternVar_ignored;
      }
      return null;
    }

    public void performActions(Object o) {
    }
  }

  public static class Pattern_hz3823_a0a1a1a0a0a11 extends GeneratedMatchingPattern implements IMatchingPattern {
    public Pattern_hz3823_a0a1a1a0a0a11() {
    }

    public boolean match(SNode nodeToMatch) {
      {
        SNode nodeToMatch_ClassifierType_Behavior_hz3823_a0a0a0a0k;
        nodeToMatch_ClassifierType_Behavior_hz3823_a0a0a0a0k = nodeToMatch;
        if (!("jetbrains.mps.baseLanguage.structure.ClassifierType".equals(nodeToMatch_ClassifierType_Behavior_hz3823_a0a0a0a0k.getConcept().getQualifiedName()))) {
          return false;
        }
        {
          SNodeReference pointer = SNODE_POINTER_hz3823_a0a0a0a0b0c0a0a0a0b0b0a0a0l;
          if (!(PatternUtil.matchReferentWithNode(pointer, nodeToMatch_ClassifierType_Behavior_hz3823_a0a0a0a0k.getReferenceTarget("classifier")))) {
            return false;
          }
        }
      }
      return true;
    }

    public boolean hasAntiquotations() {
      return false;
    }

    public void fillFieldValuesFrom(GeneratedMatchingPattern pattern) {
    }

    public Object getFieldValue(String fieldName) {
      return null;
    }

    public void performActions(Object o) {
    }
  }

  public static class Pattern_hz3823_a0a0a1a11 extends GeneratedMatchingPattern implements IMatchingPattern {
    /*package*/ List<SNode> patternVar_l;
    /*package*/ SNode patternVar_ignored;
    /*package*/ Object AntiquotationField_hz3823_a0a0a1a01;

    public Pattern_hz3823_a0a0a1a11(Object parameter_hz3823_a0a0a1a01) {
      this.AntiquotationField_hz3823_a0a0a1a01 = parameter_hz3823_a0a0a1a01;
    }

    public boolean match(SNode nodeToMatch) {
      {
        SNode nodeToMatch_ClassifierType_Behavior_hz3823_a0a1a01;
        nodeToMatch_ClassifierType_Behavior_hz3823_a0a1a01 = nodeToMatch;
        if (!("jetbrains.mps.baseLanguage.structure.ClassifierType".equals(nodeToMatch_ClassifierType_Behavior_hz3823_a0a1a01.getConcept().getQualifiedName()))) {
          return false;
        }
        {
          SNode referent;
          referent = (SNode) this.AntiquotationField_hz3823_a0a0a1a01;
          if (nodeToMatch_ClassifierType_Behavior_hz3823_a0a1a01.getReferenceTarget("classifier") != referent) {
            return false;
          }
        }
        {
          String childRole_ClassifierType_Behavior_hz3823__0 = "parameter";
          this.patternVar_l = ListSequence.fromList(new ArrayList<SNode>());
          patternVar_ignored = null;
          for (SNode childVar : nodeToMatch_ClassifierType_Behavior_hz3823_a0a1a01.getChildren(childRole_ClassifierType_Behavior_hz3823__0)) {
            patternVar_ignored = childVar;
            ListSequence.fromList(this.patternVar_l).addElement(childVar);
          }
        }
      }
      return true;
    }

    public boolean hasAntiquotations() {
      return true;
    }

    public void fillFieldValuesFrom(GeneratedMatchingPattern pattern) {
      if (pattern != null && pattern.getClass() == this.getClass()) {
        patternVar_l = (List<SNode>) pattern.getFieldValue("patternVar_l");
        patternVar_ignored = (SNode) pattern.getFieldValue("patternVar_ignored");
      }
    }

    public Object getFieldValue(String fieldName) {
      if ("patternVar_l".equals(fieldName)) {
        return patternVar_l;
      }
      if ("patternVar_ignored".equals(fieldName)) {
        return patternVar_ignored;
      }
      return null;
    }

    public void performActions(Object o) {
    }
  }

  private static SNode _quotation_createNode_hz3823_a0a7(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierClassExpression", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_2, "classifier", (SNode) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_hz3823_a0a11() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NullLiteral", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_hz3823_a0a0a1a6a91() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object")));
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_hz3823_a0a0a0a0u() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object")));
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_hz3823_a0a0a0a0u_0() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang.reflect(JDK/java.lang.reflect@java_stub)"), facade.createNodeId("~Array")));
    return quotedNode_1;
  }

  private static SNodePointer SNODE_POINTER_hz3823_a0a0a0a0b0c0a0a0a0b0b0a0a0k = new SNodePointer("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)", "~Object");
  private static SNodePointer SNODE_POINTER_hz3823_a0a0a0a0b0c0a0a0a0b0b0a0a0l = new SNodePointer("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)", "~Object");
}
