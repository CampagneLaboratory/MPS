package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import javax.swing.Icon;
import java.util.List;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.search.ClassifierAndSuperClassifiersScope;
import jetbrains.mps.baseLanguage.search.IClassifiersSearchScope;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.smodel.search.IsInstanceCondition;
import jetbrains.mps.baseLanguage.scopes.MembersPopulatingContext;
import jetbrains.mps.baseLanguage.scopes.MethodSignature;

public class InstanceMethodDeclaration_Behavior {
  public static void init(SNode thisNode) {
  }
  public static boolean virtual_isDataFlowChecked_1227714048980(SNode thisNode) {
    return !(SPropertyOperations.getBoolean(thisNode, "isAbstract"));
  }
  public static boolean virtual_canBeAnnotated_1233076312117(SNode thisNode) {
    return true;
  }
  public static Icon virtual_getAdditionalIcon_5017341185733863694(SNode thisNode) {
    return IVisible_Behavior.call_getVisibilityIcon_5017341185733869581(thisNode);
  }
  public static boolean virtual_isAbstract_1232982539764(SNode thisNode) {
    return SPropertyOperations.getBoolean(thisNode, "isAbstract") || SPropertyOperations.getBoolean(thisNode, "isNative");
  }
  public static List<SNode> virtual_getChildrenToDisplayIntention_4025276038182319200(SNode thisNode) {
    List<SNode> result = BehaviorReflection.invokeSuper((Class<List<SNode>>) ((Class) Object.class), thisNode, "jetbrains.mps.baseLanguage.structure.MethodDeclaration", "virtual_getChildrenToDisplayIntention_4025276038182319200", new Object[]{});
    ListSequence.fromList(result).addElement(SLinkOperations.getTarget(thisNode, "visibility", true));
    return result;
  }
  public static boolean virtual_canBeInterfaceMember_2949815620938109095(SAbstractConcept thisConcept) {
    return true;
  }
  public static SNode virtual_getImplementedInterfaceMethod_8302934035201331324(SNode thisNode) {
    SNode containingClassifier = SNodeOperations.getAncestor(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
    if ((containingClassifier == null)) {
      return null;
    }
    ClassifierAndSuperClassifiersScope scope = new ClassifierAndSuperClassifiersScope(containingClassifier, IClassifiersSearchScope.INTERFACE);
    for (SNode method : ListSequence.fromList(((List<SNode>) scope.getNodes())).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return Classifier_Behavior.call_methods_5292274854859311639(it);
      }
    })) {
      if (eq_4b3xw6_a0a0a0d0h(SPropertyOperations.getString(method, "name"), SPropertyOperations.getString(thisNode, "name")) && ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).count() == ListSequence.fromList(SLinkOperations.getTargets(thisNode, "parameter", true)).count() && BaseMethodDeclaration_Behavior.call_hasSameSignature_1213877350435(method, thisNode)) {
        return method;
      }
    }
    return null;
  }
  public static SNode virtual_getNearestOverriddenMethod_5358895268254685434(SNode thisNode) {
    SNode parent = SNodeOperations.getAncestor(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
    if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
      parent = SLinkOperations.getTarget(SNodeOperations.cast(parent, "jetbrains.mps.baseLanguage.structure.AnonymousClass"), "classifier", false);
    } else if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      parent = ((SLinkOperations.getTarget(SNodeOperations.cast(parent, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "superclass", true) == null) ? SNodeOperations.getNode("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)", "~Object") : SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(parent, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "superclass", true), "classifier", false));
    }
    ClassifierAndSuperClassifiersScope scope = new ClassifierAndSuperClassifiersScope(parent, IClassifiersSearchScope.INSTANCE_METHOD);
    List<SNode> methodDeclarations = (List<SNode>) scope.getNodes(new IsInstanceCondition("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
    for (SNode methodCandidate : methodDeclarations) {
      if (methodCandidate != thisNode && eq_4b3xw6_a0a0a0e0i(SPropertyOperations.getString(methodCandidate, "name"), SPropertyOperations.getString(thisNode, "name")) && ListSequence.fromList(SLinkOperations.getTargets(methodCandidate, "parameter", true)).count() == ListSequence.fromList(SLinkOperations.getTargets(thisNode, "parameter", true)).count()) {
        if (BaseMethodDeclaration_Behavior.call_hasSameSignature_1213877350435(methodCandidate, thisNode)) {
          return methodCandidate;
        }
      }
    }
    return null;
  }
  public static void virtual_populateMember_7405920559687254644(SNode thisNode, MembersPopulatingContext context, SNode classifier) {
    if (!((context.isElementVisible(thisNode)))) {
      return;
    }
    MethodSignature signature = new MethodSignature(thisNode, context.getTypeByTypeVariableMapping());
    context.addMember(thisNode, signature);
    context.hideMembers(signature);
  }
  private static boolean eq_4b3xw6_a0a0a0d0h(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean eq_4b3xw6_a0a0a0e0i(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
