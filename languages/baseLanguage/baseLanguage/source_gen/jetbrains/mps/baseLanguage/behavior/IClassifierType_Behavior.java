package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.Collections;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import java.util.List;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.scopes.RepositoryStateCacheUtils;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.ISequence;
import jetbrains.mps.baseLanguage.scopes.MembersPopulatingContext;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class IClassifierType_Behavior {
  public static void init(SNode thisNode) {
  }

  public static Iterable<SNode> call_getMembers_7405920559687277275(final SNode thisNode) {
    if (thisNode == null) {
      // todo: this in virtual methods cannot be null but in non-virtual can be. think about it 
      return Collections.emptyList();
    }

    // this cache is safe, more complicated caches - think about it 
    Tuples._2<SNode, List<SNode>> cacheKey = MultiTuple.<SNode,List<SNode>>from(IClassifierType_Behavior.call_getClassifier_7405920559687237513(thisNode), new ArrayList<SNode>());
    for (SNode typeParameter : IClassifierType_Behavior.call_getTypeParameters_7405920559687237518(thisNode)) {
      if (SNodeOperations.isInstanceOf(typeParameter, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
        ListSequence.fromList(cacheKey._1()).addElement(SLinkOperations.getTarget(SNodeOperations.cast(typeParameter, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), "typeVariableDeclaration", false));
      } else {
        ListSequence.fromList(cacheKey._1()).addElement(typeParameter);
        // in pure language i don't need this things =(. Main problem here is: classifier.getThisType() != classifier.getThisType() 
      }
    }
    return RepositoryStateCacheUtils.getFromCache("IClassifierType_Behavior", cacheKey, new _FunctionTypes._return_P0_E0<ISequence<SNode>>() {
      public ISequence<SNode> invoke() {
        MembersPopulatingContext scope = new MembersPopulatingContext();
        IClassifierType_Behavior.call_populateMembers_7405920559687241253(thisNode, scope, thisNode);
        return Sequence.fromIterable(scope.getMembers()).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.IClassifierMember");
          }
        });
      }
    });
  }

  public static Iterable<SNode> call_getVisibleMembers_6145907390641297279(final SNode thisNode, final SNode contextNode) {
    return Sequence.fromIterable(IClassifierType_Behavior.call_getMembers_7405920559687277275(thisNode)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return BehaviorReflection.invokeVirtual(Boolean.TYPE, it, "virtual_isVisible_6145907390641297352", new Object[]{thisNode, contextNode});
      }
    });
  }

  public static void call_populateMembers_7405920559687241253(SNode thisNode, MembersPopulatingContext context, SNode classifier) {
    SNode thisClassifier = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), thisNode, "virtual_getClassifier_7405920559687237513", new Object[]{});

    if ((thisClassifier != null)) {
      if (context.enterClassifierInternal(thisNode)) {
        try {
          BehaviorReflection.invokeVirtual(Void.class, thisClassifier, "virtual_populateMembers_7405920559687241403", new Object[]{context, classifier});
        } finally {
          context.exitClassifierInternal(thisNode);
        }
      }
    }
  }

  @Deprecated
  public static SNode call_getClassifier_7405920559687237513(SNode thisNode) {
    return BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), thisNode, "virtual_getClassifier_7405920559687237513", new Object[]{});
  }

  @Deprecated
  public static Iterable<SNode> call_getTypeParameters_7405920559687237518(SNode thisNode) {
    return BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), thisNode, "virtual_getTypeParameters_7405920559687237518", new Object[]{});
  }
}
