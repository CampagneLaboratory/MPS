package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class IBinaryLike_Behavior {
  public static void init(SNode thisNode) {
  }
  public static boolean virtual_canPropagateUnmatchedParenUp_1742226163722653670(SNode thisNode, SNode leaf, boolean rightParen) {
    // Do not climb up into a disconnected parent, e.g. into Ternary from the ifTrue branch 
    // Only syntactically left or right children may include their parents in their parent path 
    List<SNode> leafAncestors = SNodeOperations.getNodeAncestors(leaf, null, true);
    return ListSequence.fromList(leafAncestors).contains(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), thisNode, "virtual_getSyntacticallyLeftSideExpression_1742226163722653708", new Object[]{})) || ListSequence.fromList(leafAncestors).contains(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), thisNode, "virtual_getSyntacticallyRightSideExpression_1742226163722653714", new Object[]{}));
  }
  public static void virtual_setSyntacticallyLeftSideExpression_1742226163722653680(SNode thisNode, SNode expr) {
    throw new UnsupportedOperationException("This expression cannot have its left child set: " + SNodeOperations.getConceptDeclaration(thisNode));
  }
  public static void virtual_setSyntacticallyRightSideExpression_1742226163722653694(SNode thisNode, SNode expr) {
    throw new UnsupportedOperationException("This expression cannot have its right child set: " + SNodeOperations.getConceptDeclaration(thisNode));
  }
  public static SNode virtual_getSyntacticallyLeftSideExpression_1742226163722653708(SNode thisNode) {
    return null;
  }
  public static SNode virtual_getSyntacticallyRightSideExpression_1742226163722653714(SNode thisNode) {
    return null;
  }
}
