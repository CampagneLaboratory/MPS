package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class TernaryOperatorExpression_Behavior {
  public static void init(SNode thisNode) {
  }

  public static boolean virtual_canPropagateUnmatchedParenUp_2572626204612659829(SNode thisNode, SNode leaf, boolean rightParen) {
    // true for condition anf ifFalse 
    return !(ListSequence.fromList(SNodeOperations.getAncestors(leaf, null, false)).contains(SLinkOperations.getTarget(thisNode, "ifTrue", true)));
  }

  public static void virtual_setLeftSideExpression_7583777362102629706(SNode thisNode, SNode expr) {
    SLinkOperations.setTarget(thisNode, "condition", expr, true);
  }

  public static void virtual_setRightSideExpression_7583777362102706555(SNode thisNode, SNode expr) {
    SLinkOperations.setTarget(thisNode, "ifFalse", expr, true);
  }

  public static List<SNode> virtual_getOrderedChildExpressions_7583777362095257106(SNode thisNode) {
    return ListSequence.fromListAndArray(new ArrayList<SNode>(), SLinkOperations.getTarget(thisNode, "condition", true), SLinkOperations.getTarget(thisNode, "ifTrue", true), SLinkOperations.getTarget(thisNode, "ifFalse", true));
  }

  public static void virtual_rebalanceAfterParething_4985347495062678851(SNode thisNode, SNode rightTurn, SNode leftTurn, SNode parens, SNode rightAccumulator, SNode leftAccumulator) {
    SNode bottomMostTernary = TernaryOperatorExpression_Behavior.call_findBottomMostTernary_4985347495062938743(thisNode, thisNode);
    if (rightTurn != null) {
      SNodeOperations.replaceWithAnother(thisNode, SLinkOperations.getTarget(bottomMostTernary, "ifFalse", true));
      if (leftTurn != null) {
        BehaviorReflection.invokeVirtual(Void.class, rightTurn, "virtual_setLeftSideExpression_7583777362102629706", new Object[]{SLinkOperations.getTarget(thisNode, "condition", true)});
        BehaviorReflection.invokeVirtual(Void.class, leftTurn, "virtual_setRightSideExpression_7583777362102706555", new Object[]{parens});
      } else {
        BehaviorReflection.invokeVirtual(Void.class, rightTurn, "virtual_setLeftSideExpression_7583777362102629706", new Object[]{parens});
      }
    } else {
      if (leftTurn != null) {
        SNodeOperations.replaceWithAnother(thisNode, SLinkOperations.getTarget(thisNode, "condition", true));
        BehaviorReflection.invokeVirtual(Void.class, leftTurn, "virtual_setRightSideExpression_7583777362102706555", new Object[]{parens});
      } else {
        SNodeOperations.replaceWithAnother(thisNode, parens);
      }
    }
    SLinkOperations.setTarget(bottomMostTernary, "ifFalse", rightAccumulator, true);
    SLinkOperations.setTarget(thisNode, "condition", leftAccumulator, true);
  }

  public static SNode call_findBottomMostTernary_4985347495062938743(SNode thisNode, SNode bottomMostTernary) {
    while (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(bottomMostTernary, "ifFalse", true), "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression")) {
      bottomMostTernary = SNodeOperations.cast(SLinkOperations.getTarget(bottomMostTernary, "ifFalse", true), "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression");
    }
    return bottomMostTernary;
  }
}
