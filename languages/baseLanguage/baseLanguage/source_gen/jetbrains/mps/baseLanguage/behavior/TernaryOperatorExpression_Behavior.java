package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class TernaryOperatorExpression_Behavior {
  public static void init(SNode thisNode) {
  }

  public static boolean virtual_canPropagateUnmatchedParenUp_2572626204612659829(SNode thisNode, SNode leaf, boolean rightParen) {
    // true for condition and ifFalse 
    List<SNode> ancestors = SNodeOperations.getAncestors(leaf, null, true);
    return ListSequence.fromList(ancestors).contains(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), thisNode, "virtual_getSyntacticallyLeftSideExpression_7583777362095214544", new Object[]{})) || ListSequence.fromList(ancestors).contains(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), thisNode, "virtual_getSyntacticallyRightSideExpression_7583777362095256690", new Object[]{}));
  }

  public static void virtual_setSyntacticallyLeftSideExpression_7583777362102629706(SNode thisNode, SNode expr) {
    SLinkOperations.setTarget(thisNode, "condition", expr, true);
  }

  public static void virtual_setSyntacticallyRightSideExpression_7583777362102706555(SNode thisNode, SNode expr) {
    SLinkOperations.setTarget(thisNode, "ifFalse", expr, true);
  }

  public static SNode virtual_getSyntacticallyLeftSideExpression_7583777362095214544(SNode thisNode) {
    return SLinkOperations.getTarget(thisNode, "condition", true);
  }

  public static SNode virtual_getSyntacticallyRightSideExpression_7583777362095256690(SNode thisNode) {
    return SLinkOperations.getTarget(thisNode, "ifFalse", true);
  }
}
