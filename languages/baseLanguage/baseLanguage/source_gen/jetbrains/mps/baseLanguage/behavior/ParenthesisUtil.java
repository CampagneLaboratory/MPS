package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.util.NameUtil;

public class ParenthesisUtil {
  public ParenthesisUtil() {
  }

  public static SNode createParenthesis(@NotNull SNode expression, boolean opening) {
    SNode current = expression;
    SNode prev = expression;
    while (current != null && !(SNodeOperations.isInstanceOf(current, "jetbrains.mps.baseLanguage.structure.BinaryOperation"))) {
      prev = current;
      if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(current), "jetbrains.mps.baseLanguage.structure.Expression"))) {
        break;
      }
      current = SNodeOperations.cast(SNodeOperations.getParent(current), "jetbrains.mps.baseLanguage.structure.Expression");
    }
    current = prev;
    // searching for binary operation 
    SNode binOp = getBinOp(current, opening);
    // special cases 
    if (binOp == null) {
      SNode parExpr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null);
      SNodeOperations.replaceWithAnother(current, parExpr);
      SLinkOperations.setTarget(parExpr, "expression", current, true);
      return parExpr;
    }
    boolean left = opening && SLinkOperations.getTarget(binOp, "leftExpression", true) == current;
    boolean right = !(opening) && SLinkOperations.getTarget(binOp, "rightExpression", true) == current;
    if (left || right) {
      SNode parExpr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null);
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(binOp), "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression")) {
        SNodeOperations.replaceWithAnother(current, parExpr);
        SLinkOperations.setTarget(parExpr, "expression", current, true);
      } else {
        SNodeOperations.replaceWithAnother(binOp, parExpr);
        SLinkOperations.setTarget(parExpr, "expression", binOp, true);
      }
      return parExpr;
    }
    // rotate 
    SNode subtree = (opening ?
      SLinkOperations.getTarget(binOp, "leftExpression", true) :
      SLinkOperations.getTarget(binOp, "rightExpression", true)
    );
    SNode parExpr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null);
    SNodeOperations.replaceWithAnother(current, parExpr);
    SNodeOperations.replaceWithAnother(subtree, current);
    SNodeOperations.replaceWithAnother(binOp, subtree);
    SLinkOperations.setTarget(parExpr, "expression", binOp, true);
    return parExpr;
  }

  public static void checkOperationWRTPriority(SNode binOp) {
    checkOperationChildWRTPriority(binOp, false);
    checkOperationChildWRTPriority(binOp, true);
    checkOpeartionParentWRTPriority(binOp);
  }

  private static void checkOperationChildWRTPriority(SNode node, boolean isRight) {
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.BinaryOperation"))) {
      return;
    }
    SNode binOp = SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.BinaryOperation");
    SNode sideExpr = (isRight ?
      SLinkOperations.getTarget(binOp, "rightExpression", true) :
      SLinkOperations.getTarget(binOp, "leftExpression", true)
    );
    if (SNodeOperations.isInstanceOf(sideExpr, "jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
      SNode sideChild = SNodeOperations.cast(sideExpr, "jetbrains.mps.baseLanguage.structure.BinaryOperation");
      if (isBadPriority(sideChild, binOp, isRight)) {
        ParenthesisUtil.rotateTree(sideChild, binOp, isRight);
        checkOperationWRTPriority(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.BinaryOperation"));
      }
    }
  }

  private static void checkOpeartionParentWRTPriority(SNode node) {
    if (SNodeOperations.getParent(node) == null) {
      return;
    }
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
      SNode parent = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.BinaryOperation");
      boolean isRight = false;
      if (SLinkOperations.getTarget(parent, "rightExpression", true) == node) {
        isRight = true;
      } else if (SLinkOperations.getTarget(parent, "leftExpression", true) == node) {
        isRight = false;
      }
      if (ParenthesisUtil.isBadPriority(node, parent, isRight)) {
        ParenthesisUtil.rotateTree(node, parent, isRight);
        checkOpeartionParentWRTPriority(node);
      }
    }
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation")) {
      SNode parent = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation");
      SLinkOperations.setTarget(parent, "expression", SLinkOperations.getTarget(node, "leftExpression", true), true);
      SNodeOperations.replaceWithAnother(parent, node);
      SLinkOperations.setTarget(node, "leftExpression", parent, true);
    }
  }

  public static SNode getBinOp(SNode expr, boolean toRight) {
    SNode parent = SNodeOperations.getParent(expr);
    if (!(SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.BinaryOperation"))) {
      return null;
    }
    SNode parentOp = SNodeOperations.cast(parent, "jetbrains.mps.baseLanguage.structure.BinaryOperation");
    boolean right = toRight && SLinkOperations.getTarget(parentOp, "leftExpression", true) == expr;
    boolean left = !(toRight) && SLinkOperations.getTarget(parentOp, "rightExpression", true) == expr;
    if (right || left) {
      return parentOp;
    }
    return getBinOp(parentOp, toRight);
  }

  public static void rotateTree(SNode child, SNode op, boolean isRight) {
    SNode backsideExpr = (isRight ?
      SLinkOperations.getTarget(child, "leftExpression", true) :
      SLinkOperations.getTarget(child, "rightExpression", true)
    );
    SNodeOperations.detachNode(child);
    SNodeOperations.replaceWithAnother(op, child);
    SNodeOperations.replaceWithAnother(backsideExpr, op);
    if (isRight) {
      SLinkOperations.setTarget(op, "rightExpression", backsideExpr, true);
    } else {
      SLinkOperations.setTarget(op, "leftExpression", backsideExpr, true);
    }
  }

  public static boolean isBadPriority(SNode child, SNode parent, boolean isRight) {
    return BehaviorReflection.invokeVirtualStatic(Integer.TYPE, SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(child))), "virtual_getPriority_1262430001741497858", new Object[]{}) < BehaviorReflection.invokeVirtualStatic(Integer.TYPE, SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(parent))), "virtual_getPriority_1262430001741497858", new Object[]{}) || (isRight && ((int) BehaviorReflection.invokeVirtualStatic(Integer.TYPE, SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(child))), "virtual_getPriority_1262430001741497858", new Object[]{})) == ((int) BehaviorReflection.invokeVirtualStatic(Integer.TYPE, SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(parent))), "virtual_getPriority_1262430001741497858", new Object[]{})));
  }
}
