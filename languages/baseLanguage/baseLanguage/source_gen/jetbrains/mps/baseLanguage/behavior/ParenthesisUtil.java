package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.util.NameUtil;

public class ParenthesisUtil {
  public ParenthesisUtil() {
  }



  public static SNode createUnmatchedLeftParenthesis(@NotNull SNode leftExpression) {
    return createUnmatchedParenthesis(leftExpression, false);
  }



  public static SNode createUnmatchedRightParenthesis(@NotNull SNode rightExpression) {
    return createUnmatchedParenthesis(rightExpression, true);
  }



  /**
   * Returns an orderred list of nodes with incomplete left/right paren
   * The nodes are orderred by their occurence on the expression in left-to-right order
   * The current node is added at the front or back of the list, depending on the requested paren type,
   * so that it is always the most distant node among the returned candidates
   */
  private static List<SNode> descendInto(SNode expr, final boolean completingByRightParen) {
    final List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());

    if (completingByRightParen && (AttributeOperations.getAttribute(expr, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen")) != null)) {
      ListSequence.fromList(result).addElement(expr);
    }
    ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), expr, "virtual_getOrderedChildExpressions_7583777362095257106", new Object[]{})).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        ListSequence.fromList(result).addSequence(ListSequence.fromList(descendInto(it, completingByRightParen)));
      }
    });
    if (!(completingByRightParen) && (AttributeOperations.getAttribute(expr, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteRightParen")) != null)) {
      ListSequence.fromList(result).addElement(expr);
    }

    return result;
  }



  /**
   * First search existing unmatched parens, whether they can be paired with the new one.
   * If found, pair them, if not, create an unmatched paren annotation.
   */
  private static SNode createUnmatchedParenthesis(@NotNull SNode myExpression, boolean completingByRightParen) {

    List<SNode> myParentPath = parentPath(myExpression, completingByRightParen);
    SNode topExp = ListSequence.fromList(myParentPath).last();
    List<SNode> candidateParenthedNodes = descendInto(topExp, completingByRightParen);
    // Reverse the candidates if searchng for a matching right paren 
    if (!(completingByRightParen)) {
      candidateParenthedNodes = ListSequence.fromList(candidateParenthedNodes).reversedList();
    }

    int index = ListSequence.fromList(candidateParenthedNodes).count() - 1;
    SNode candidateExpression = null;
    final Wrappers._T<List<SNode>> candidateParentPath = new Wrappers._T<List<SNode>>(null);
    // The bottom-most common ancestor 
    SNode firstCommonAncestor = null;

    // Find a matching parenthesis among candidates, going from the back of the list 
    while (index >= 0) {
      candidateExpression = ListSequence.fromList(candidateParenthedNodes).getElement(index);
      if (eq_a65dpo_a0b0o0i(candidateExpression, myExpression)) {
        // they are both the same node 
        ParenthesisUtil.clearIncompleteParens(candidateExpression, completingByRightParen);
        SNode parens = SNodeFactoryOperations.replaceWithNewChild(candidateExpression, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression");
        SLinkOperations.setTarget(parens, "expression", candidateExpression, true);
        return parens;
      }

      // Find the bottom-most common ancestor 
      candidateParentPath.value = parentPath(candidateExpression, !(completingByRightParen));
      if (ListSequence.fromList(myParentPath).contains(ListSequence.fromList(candidateParentPath.value).last()) || ListSequence.fromList(candidateParentPath.value).contains(ListSequence.fromList(myParentPath).last())) {
        firstCommonAncestor = ListSequence.fromList(myParentPath).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return ListSequence.fromList(candidateParentPath.value).contains(it);
          }
        });
        assert firstCommonAncestor != null;

        SNode leftSideExpression = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), firstCommonAncestor, "virtual_getLeftSideExpression_7583777362095214544", new Object[]{});
        SNode rightSideExpression = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), firstCommonAncestor, "virtual_getRightSideExpression_7583777362095256690", new Object[]{});
        List<SNode> candidateAncestors = SNodeOperations.getAncestors(candidateExpression, null, true);
        List<SNode> myAncestors = SNodeOperations.getAncestors(myExpression, null, true);

        // Validate the bottom-most ancestor, whether the two parentheses can be paired legally 
        if (completingByRightParen && (ListSequence.fromList(candidateAncestors).contains(leftSideExpression) || leftSideExpression == null) && (ListSequence.fromList(myAncestors).contains(rightSideExpression) || rightSideExpression == null)) {
          break;
        }
        if (!(completingByRightParen) && (ListSequence.fromList(myAncestors).contains(leftSideExpression) || leftSideExpression == null) && (ListSequence.fromList(candidateAncestors).contains(rightSideExpression) || rightSideExpression == null)) {
          break;
        }
        // Break out if found a valid match 
      }
      // Continue to try another candidate parenthesis 
      index--;
    }
    if (index == -1) {
      // no common ancestor with any of the candidate parens or swapped left-right -> can't parenthesise 
      if (completingByRightParen) {
        AttributeOperations.setAttribute(myExpression, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteRightParen"), SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IncompleteRightParen", null));
      } else {
        AttributeOperations.setAttribute(myExpression, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen"), SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen", null));
      }
      return myExpression;
    }

    clearIncompleteParens(candidateExpression, completingByRightParen);

    // Let's call them left and right parens from now, instead of 'my' and 'candidate' 
    SNode leftExpression = (completingByRightParen ? candidateExpression : myExpression);
    SNode rightExpression = (completingByRightParen ? myExpression : candidateExpression);
    try {
      // Find the turning points, if exist, otherwise just wrap in parens 
      SNode leftTurn = ParenthesisUtil.findLeftTurn(leftExpression, firstCommonAncestor);
      SNode rightTurn = ParenthesisUtil.findRightTurn(rightExpression, firstCommonAncestor);
      if (leftTurn != null || rightTurn != null) {
        return ParenthesisUtil.rebalance(leftTurn, firstCommonAncestor, rightTurn);
      } else {
        SNode parens = SNodeFactoryOperations.replaceWithNewChild(firstCommonAncestor, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression");
        SLinkOperations.setTarget(parens, "expression", firstCommonAncestor, true);
        return parens;
      }
    } finally {
      checkExpressionPriorities(topExp);
    }
  }



  /**
   * Create a ParenthesisedExpression and hook it properly into the model
   * 
   * @param leftTurn The node that should be put outside and to the left from the new parens
   * @param rightTurn The node that should be put outside and to the right from the new parens
   * @param firstCommonAncestor The common ancestor expression of both parentheses
   */
  private static SNode rebalance(SNode leftTurn, SNode firstCommonAncestor, SNode rightTurn) {

    // Accumulate expressions between the leftTurn and firstCommon to include inside the parens. 
    // These would be the nodes into which we come from the left child. 
    SNode leftAccumulator = buildAccumulator(firstCommonAncestor, leftTurn, true);
    // Accumulate expressions between the rightTurn and firstCommon to include inside the parens. 
    // These would be the nodes into which we come from the right child. 
    SNode rightAccumulator = buildAccumulator(firstCommonAncestor, rightTurn, false);

    assert leftAccumulator != null;
    assert rightAccumulator != null;

    SNode parens = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null);
    BehaviorReflection.invokeVirtual(Void.class, firstCommonAncestor, "virtual_rebalanceAfterParething_4985347495062678851", new Object[]{rightTurn, leftTurn, parens, rightAccumulator, leftAccumulator});
    SLinkOperations.setTarget(parens, "expression", firstCommonAncestor, true);
    return parens;
  }




  /**
   * Accumulate the nodes that need to be added into the parentheses
   */
  private static SNode buildAccumulator(SNode firstCommonAncestor, SNode turn, boolean left) {
    SNode accumulator;
    if (turn != null && neq_a65dpo_a0a1a31(turn, firstCommonAncestor)) {
      // Accumulate nodes on the path up from the left/right paren 
      accumulator = (left ? BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), turn, "virtual_getRightSideExpression_7583777362095256690", new Object[]{}) : BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), turn, "virtual_getLeftSideExpression_7583777362095214544", new Object[]{}));
      SNodeOperations.detachNode(accumulator);
      SNode current = SNodeOperations.cast(SNodeOperations.getParent(turn), "jetbrains.mps.baseLanguage.structure.Expression");
      SNode previous = turn;
      while (neq_a65dpo_a0f0b0n(current, firstCommonAncestor)) {
        SNode sideExpression = (left ? BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), current, "virtual_getLeftSideExpression_7583777362095214544", new Object[]{}) : BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), current, "virtual_getRightSideExpression_7583777362095256690", new Object[]{}));
        if (sideExpression != null && eq_a65dpo_a0a1a5a1a31(sideExpression, previous)) {
          SNodeOperations.replaceWithAnother(current, previous);
          if (left) {
            BehaviorReflection.invokeVirtual(Void.class, current, "virtual_setLeftSideExpression_7583777362102629706", new Object[]{accumulator});
          } else {
            BehaviorReflection.invokeVirtual(Void.class, current, "virtual_setRightSideExpression_7583777362102706555", new Object[]{accumulator});
          }
          accumulator = current;
        } else {
          previous = current;
        }
        current = SNodeOperations.cast(SNodeOperations.getParent(previous), "jetbrains.mps.baseLanguage.structure.Expression");
      }
    } else {
      // Nothing to accumulate 
      SNode firstCommonAncestorChild = (left ? BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), firstCommonAncestor, "virtual_getLeftSideExpression_7583777362095214544", new Object[]{}) : BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), firstCommonAncestor, "virtual_getRightSideExpression_7583777362095256690", new Object[]{}));
      if (firstCommonAncestorChild != null) {
        accumulator = firstCommonAncestorChild;
        SNodeOperations.detachNode(accumulator);
      } else {
        accumulator = firstCommonAncestor;
      }
    }
    return accumulator;
  }



  /**
   * Remove the found matching paren annotation from its node
   */
  private static void clearIncompleteParens(SNode otherExpression, boolean completingByRightParen) {
    if (completingByRightParen) {
      AttributeOperations.setAttribute(otherExpression, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen"), null);
    } else {
      AttributeOperations.setAttribute(otherExpression, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteRightParen"), null);
    }
  }



  /**
   * Climb up the ancestor expressions and return the first binary operation, in which we come from the right sub-tree.
   * 
   * @param stopNode Never climb beyond this node
   */
  private static SNode findLeftTurn(SNode leaf, SNode stopNode) {
    return findTurn(leaf, stopNode, true);
  }



  /**
   * Climb up the ancestor expressions and return the first binary operation, in which we come from the left sub-tree.
   * 
   * @param stopNode Never climb beyond this node
   */
  private static SNode findRightTurn(SNode leaf, SNode stopNode) {
    return findTurn(leaf, stopNode, false);
  }



  private static SNode findTurn(SNode leaf, SNode stopNode, boolean leftTurn) {
    SNode currentNode = SNodeOperations.getParent(leaf);
    SNode previous = leaf;
    while (neq_a65dpo_a0a2a12(previous, stopNode) && SNodeOperations.isInstanceOf(currentNode, "jetbrains.mps.baseLanguage.structure.Expression")) {
      SNode leftSideExpression = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(currentNode, "jetbrains.mps.baseLanguage.structure.Expression"), "virtual_getLeftSideExpression_7583777362095214544", new Object[]{});
      SNode rightSideExpression = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(currentNode, "jetbrains.mps.baseLanguage.structure.Expression"), "virtual_getRightSideExpression_7583777362095256690", new Object[]{});
      if (leftTurn && eq_a65dpo_a0a2a2a12(rightSideExpression, previous)) {
        return SNodeOperations.cast(currentNode, "jetbrains.mps.baseLanguage.structure.Expression");
      }
      if (!(leftTurn) && eq_a65dpo_a0a3a2a12(leftSideExpression, previous)) {
        return SNodeOperations.cast(currentNode, "jetbrains.mps.baseLanguage.structure.Expression");
      }

      previous = currentNode;
      currentNode = SNodeOperations.getParent(currentNode);
    }
    return null;
  }




  /**
   * Find all the ancestor expressions of leaf that could be wrapped in parens.
   * Stops when the parent current expression could no longer be parenthesised.
   */
  private static List<SNode> parentPath(SNode leaf, boolean rightParen) {
    List<SNode> path = new ArrayList<SNode>();
    ListSequence.fromList(path).addElement(leaf);

    for (SNode currentNode = SNodeOperations.getParent(leaf); SNodeOperations.isInstanceOf(currentNode, "jetbrains.mps.baseLanguage.structure.Expression"); currentNode = SNodeOperations.getParent(currentNode)) {
      ListSequence.fromList(path).addElement(SNodeOperations.cast(currentNode, "jetbrains.mps.baseLanguage.structure.Expression"));
      if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(currentNode, "jetbrains.mps.baseLanguage.structure.Expression"), "virtual_canPropagateUnmatchedParenUp_2572626204612659829", new Object[]{leaf, rightParen}))) {
        break;
      }
    }
    return path;
  }



  public static void checkExpressionPriorities(SNode expr) {
    SNode current = expr;
    // find the top-most expression 
    while (SNodeOperations.isInstanceOf(SNodeOperations.getParent(current), "jetbrains.mps.baseLanguage.structure.Expression")) {
      current = SNodeOperations.cast(SNodeOperations.getParent(current), "jetbrains.mps.baseLanguage.structure.Expression");
    }

    List<SNode> descendants = SNodeOperations.getDescendants(current, "jetbrains.mps.baseLanguage.structure.BinaryOperation", true, new String[]{});
    List<SNode> previousDescendants = null;
    // repeat until descendants keep changing 
    while (neq_a65dpo_a0h0ab(previousDescendants, descendants)) {
      ListSequence.fromList(descendants).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          checkOperationWRTPriority(it);
        }
      });
      previousDescendants = descendants;
      descendants = SNodeOperations.getDescendants(current, "jetbrains.mps.baseLanguage.structure.BinaryOperation", true, new String[]{});
    }
  }



  public static void checkOperationWRTPriority(SNode binOp) {
    checkOperationChildWRTPriority(binOp, false);
    checkOperationChildWRTPriority(binOp, true);
    checkOperationParentWRTPriority(binOp);
  }



  private static void checkOperationChildWRTPriority(SNode node, boolean isRight) {
    SNode sideExpr = (isRight ? SLinkOperations.getTarget(node, "rightExpression", true) : SLinkOperations.getTarget(node, "leftExpression", true));
    if (SNodeOperations.isInstanceOf(sideExpr, "jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
      SNode sideChild = SNodeOperations.cast(sideExpr, "jetbrains.mps.baseLanguage.structure.BinaryOperation");
      if (isBadPriority(sideChild, node, isRight)) {
        ParenthesisUtil.rotateTree(sideChild, node, isRight);
        checkOperationWRTPriority(node);
      }
    }
    if (SNodeOperations.isInstanceOf(sideExpr, "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression")) {
      SNodeOperations.replaceWithAnother(node, sideExpr);
      if (isRight) {
        SLinkOperations.setTarget(node, "rightExpression", SLinkOperations.getTarget(SNodeOperations.cast(sideExpr, "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"), "condition", true), true);
        SLinkOperations.setTarget(SNodeOperations.cast(sideExpr, "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"), "condition", node, true);
      } else {
        SLinkOperations.setTarget(node, "leftExpression", SLinkOperations.getTarget(SNodeOperations.cast(sideExpr, "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"), "ifFalse", true), true);
        SLinkOperations.setTarget(SNodeOperations.cast(sideExpr, "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"), "ifFalse", node, true);
      }
      checkOperationWRTPriority(node);
    }
  }

  private static void checkOperationParentWRTPriority(SNode node) {
    if (SNodeOperations.getParent(node) == null) {
      return;
    }
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
      SNode parent = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.BinaryOperation");
      boolean isRight = false;
      if (SLinkOperations.getTarget(parent, "rightExpression", true) == node) {
        isRight = true;
      } else if (SLinkOperations.getTarget(parent, "leftExpression", true) == node) {
        isRight = false;
      }
      if (ParenthesisUtil.isBadPriority(node, parent, isRight)) {
        ParenthesisUtil.rotateTree(node, parent, isRight);
        checkOperationParentWRTPriority(node);
      }
    }
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation")) {
      SNode parent = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation");
      SLinkOperations.setTarget(parent, "expression", SLinkOperations.getTarget(node, "leftExpression", true), true);
      SNodeOperations.replaceWithAnother(parent, node);
      SLinkOperations.setTarget(node, "leftExpression", parent, true);
    }
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.CastExpression")) {
      SNode castExpr = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.CastExpression");
      SNodeOperations.replaceWithAnother(castExpr, node);
      SLinkOperations.setTarget(castExpr, "expression", SLinkOperations.getTarget(node, "leftExpression", true), true);
      SLinkOperations.setTarget(node, "leftExpression", castExpr, true);
    }
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.DotExpression") && SNodeOperations.hasRole(node, "jetbrains.mps.baseLanguage.structure.DotExpression", "operand")) {
      SNode dotExpr = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.DotExpression");
      SNodeOperations.replaceWithAnother(dotExpr, node);
      SLinkOperations.setTarget(dotExpr, "operand", SLinkOperations.getTarget(node, "rightExpression", true), true);
      SLinkOperations.setTarget(node, "rightExpression", dotExpr, true);
    }
  }

  public static SNode getBinOp(SNode expr, boolean toRight) {
    SNode parent = SNodeOperations.getParent(expr);
    if (!(SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.BinaryOperation"))) {
      return null;
    }
    SNode parentOp = SNodeOperations.cast(parent, "jetbrains.mps.baseLanguage.structure.BinaryOperation");
    boolean right = toRight && SLinkOperations.getTarget(parentOp, "leftExpression", true) == expr;
    boolean left = !(toRight) && SLinkOperations.getTarget(parentOp, "rightExpression", true) == expr;
    if (right || left) {
      return parentOp;
    }
    return getBinOp(parentOp, toRight);
  }

  public static void rotateTree(SNode child, SNode op, boolean isRight) {
    SNode backsideExpr = (isRight ? SLinkOperations.getTarget(child, "leftExpression", true) : SLinkOperations.getTarget(child, "rightExpression", true));
    SNodeOperations.detachNode(child);
    SNodeOperations.replaceWithAnother(op, child);
    SNodeOperations.replaceWithAnother(backsideExpr, op);
    if (isRight) {
      SLinkOperations.setTarget(op, "rightExpression", backsideExpr, true);
    } else {
      SLinkOperations.setTarget(op, "leftExpression", backsideExpr, true);
    }
  }

  public static boolean isBadPriority(SNode child, SNode parent, boolean isRight) {
    return BehaviorReflection.invokeVirtualStatic(Integer.TYPE, SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(child))), "virtual_getPriority_1262430001741497858", new Object[]{}) < BehaviorReflection.invokeVirtualStatic(Integer.TYPE, SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(parent))), "virtual_getPriority_1262430001741497858", new Object[]{}) || (isRight && ((int) BehaviorReflection.invokeVirtualStatic(Integer.TYPE, SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(child))), "virtual_getPriority_1262430001741497858", new Object[]{})) == ((int) BehaviorReflection.invokeVirtualStatic(Integer.TYPE, SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(parent))), "virtual_getPriority_1262430001741497858", new Object[]{})));
  }

  private static boolean eq_a65dpo_a0b0o0i(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static boolean neq_a65dpo_a0a1a31(Object a, Object b) {
    return !((a != null ? a.equals(b) : a == b));
  }

  private static boolean eq_a65dpo_a0a1a5a1a31(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static boolean neq_a65dpo_a0f0b0n(Object a, Object b) {
    return !((a != null ? a.equals(b) : a == b));
  }

  private static boolean eq_a65dpo_a0a2a2a12(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static boolean eq_a65dpo_a0a3a2a12(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static boolean neq_a65dpo_a0a2a12(Object a, Object b) {
    return !((a != null ? a.equals(b) : a == b));
  }

  private static boolean neq_a65dpo_a0h0ab(Object a, Object b) {
    return !((a != null ? a.equals(b) : a == b));
  }
}
