package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.editor.EditorParenthesisUtil;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.util.NameUtil;

public class ParenthesisUtil {
  public ParenthesisUtil() {
  }

  public static SNode createUnmatchedLeftParenthesis(@NotNull SNode leftExpression) {
    return createUnmatchedParenthesisAndCheckParentParens(leftExpression, false);
  }

  public static SNode createUnmatchedRightParenthesis(@NotNull SNode rightExpression) {
    return createUnmatchedParenthesisAndCheckParentParens(rightExpression, true);
  }

  /**
   * Returns an orderred list of nodes with incomplete left/right paren
   * The nodes are orderred by their occurence on the expression in left-to-right order
   * The current node is added at the front of the list,
   * so that it is always the most distant node among the returned candidates
   */
  private static List<SNode> descendInto(SNode expr, final boolean completingByRightParen) {
    List<SNode> path = ListSequence.fromListAndArray(new ArrayList<SNode>(), null, expr);
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());

    SNode current = expr;
    while (ListSequence.fromList(path).isNotEmpty()) {
      if (SNodeOperations.isInstanceOf(current, "jetbrains.mps.baseLanguage.structure.IBinaryLike")) {
        if (eq_a65dpo_a0a0a0e0g(ListSequence.fromList(path).last(), current)) {
          SNode left = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(current, "jetbrains.mps.baseLanguage.structure.IBinaryLike"), "virtual_getSyntacticallyLeftSideExpression_1742226163722653708", new Object[]{});
          if (left != null) {
            ListSequence.fromList(path).addElement(left);
            current = left;
          } else {
            current = ListSequence.fromList(path).removeLastElement();
          }
        } else {
          ListSequence.fromList(result).addElement(current);
          SNode right = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(current, "jetbrains.mps.baseLanguage.structure.IBinaryLike"), "virtual_getSyntacticallyRightSideExpression_1742226163722653714", new Object[]{});
          if (right != null) {
            ListSequence.fromList(path).addElement(right);
            current = right;
          } else {
            current = ListSequence.fromList(path).removeLastElement();
          }
        }
      } else {
        ListSequence.fromList(result).addElement(current);
        if (eq_a65dpo_a0b0a0a4a6(ListSequence.fromList(path).last(), current)) {
          ListSequence.fromList(path).removeLastElement();
        }
        current = ListSequence.fromList(path).removeLastElement();
      }
    }
    if (!(completingByRightParen)) {
      result = ListSequence.fromList(result).reversedList();
    }

    result = ListSequence.fromList(result).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return completingByRightParen && (AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen")) != null) || !(completingByRightParen) && (AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteRightParen")) != null);
      }
    }).toListSequence();

    return result;
  }

  private static SNode findWrappingParens(SNode original) {
    SNode current = original;
    while (SNodeOperations.isInstanceOf(SNodeOperations.getParent(current), "jetbrains.mps.baseLanguage.structure.Expression")) {
      current = SNodeOperations.cast(SNodeOperations.getParent(current), "jetbrains.mps.baseLanguage.structure.Expression");
      if (SNodeOperations.isInstanceOf(current, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression")) {
        return current;
      }
    }
    return null;
  }

  /**
   * First search existing unmatched parens, whether they can be paired with the new one.
   * If found, pair them, if not, create an unmatched paren annotation.
   */
  private static SNode createUnmatchedParenthesisAndCheckParentParens(@NotNull final SNode myExpression, final boolean completingByRightParen) {

    SNode expressionToProcess = myExpression;
    SNode expressionToSetFocusOn = null;

    SNode current = findWrappingParens(expressionToProcess);
    while (current != null) {
      boolean leftParenOnParens = AttributeOperations.getAttribute(current, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen")) != null;
      boolean rightParenOnParens = AttributeOperations.getAttribute(current, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteRightParen")) != null;
      boolean propagateNewParensInsteadOfExpr = false;
      SNode replacing = SLinkOperations.getTarget(SNodeOperations.cast(current, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression"), "expression", true);
      SNode rightMostNode = EditorParenthesisUtil.findRightmostOrLeftmostLeafExpression(replacing, true);
      SNode leftMostNode = EditorParenthesisUtil.findRightmostOrLeftmostLeafExpression(replacing, false);

      if ((completingByRightParen && eq_a65dpo_a0a0a7a5a01_0(expressionToProcess, rightMostNode)) || (!(completingByRightParen) && eq_a65dpo_a0a0a7a5a01(expressionToProcess, leftMostNode))) {
        propagateNewParensInsteadOfExpr = true;
      }

      SNodeOperations.replaceWithAnother(current, replacing);
      SNode localExpToSetFocusOn;
      if (completingByRightParen) {
        SNodeFactoryOperations.setNewAttribute(leftMostNode, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen"), "jetbrains.mps.baseLanguage.structure.IncompleteLeftParen");
        localExpToSetFocusOn = ParenthesisUtil.createUnmatchedParenthesis(expressionToProcess, true);
        expressionToProcess = (propagateNewParensInsteadOfExpr ? localExpToSetFocusOn : rightMostNode);
        if (leftParenOnParens) {
          SNodeFactoryOperations.setNewAttribute(localExpToSetFocusOn, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen"), "jetbrains.mps.baseLanguage.structure.IncompleteLeftParen");
        }
      } else {
        SNodeFactoryOperations.setNewAttribute(rightMostNode, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteRightParen"), "jetbrains.mps.baseLanguage.structure.IncompleteRightParen");
        localExpToSetFocusOn = ParenthesisUtil.createUnmatchedParenthesis(expressionToProcess, false);
        expressionToProcess = (propagateNewParensInsteadOfExpr ? localExpToSetFocusOn : leftMostNode);
        if (rightParenOnParens) {
          SNodeFactoryOperations.setNewAttribute(localExpToSetFocusOn, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteRightParen"), "jetbrains.mps.baseLanguage.structure.IncompleteRightParen");
        }
      }

      // Remember the first parenthing result for the editor to set focus to 
      if (expressionToSetFocusOn == null) {
        expressionToSetFocusOn = localExpToSetFocusOn;
      }

      current = findWrappingParens(expressionToProcess);
    }

    SNode created = createUnmatchedParenthesis(expressionToProcess, completingByRightParen);
    return (expressionToSetFocusOn != null ? expressionToSetFocusOn : created);
  }

  /**
   * First search existing unmatched parens, whether they can be paired with the new one.
   * If found, pair them, if not, create an unmatched paren annotation.
   */
  private static SNode createUnmatchedParenthesis(@NotNull SNode myExpression, boolean completingByRightParen) {

    List<SNode> myParentPath = parentPath(myExpression, completingByRightParen);
    SNode topExp = ListSequence.fromList(myParentPath).findLast(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.IBinaryLike");
      }
    });
    if (topExp == null) {
      // No IBinaryLike ancestor of myExpression exists 
      topExp = myExpression;
    }
    List<SNode> candidateParenthedNodes = descendInto(topExp, completingByRightParen);

    int index = ListSequence.fromList(candidateParenthedNodes).count() - 1;
    SNode candidateExpression = null;
    final Wrappers._T<List<SNode>> candidateParentPath = new Wrappers._T<List<SNode>>(null);
    // The bottom-most common ancestor 
    SNode firstCommonAncestor = null;
    // Find a matching parenthesis among candidates, going from the back of the list 
    while (index >= 0) {
      candidateExpression = ListSequence.fromList(candidateParenthedNodes).getElement(index);
      if (eq_a65dpo_a0b0m0m(candidateExpression, myExpression)) {
        // they are both the same node 
        ParenthesisUtil.clearIncompleteParens(candidateExpression, completingByRightParen);
        SNode parens = SNodeFactoryOperations.replaceWithNewChild(candidateExpression, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression");
        SLinkOperations.setTarget(parens, "expression", candidateExpression, true);
        return parens;
      }

      // Find the bottom-most common ancestor 
      candidateParentPath.value = parentPath(candidateExpression, !(completingByRightParen));
      if (ListSequence.fromList(myParentPath).contains(ListSequence.fromList(candidateParentPath.value).last()) || ListSequence.fromList(candidateParentPath.value).contains(ListSequence.fromList(myParentPath).last())) {
        firstCommonAncestor = ListSequence.fromList(myParentPath).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return ListSequence.fromList(candidateParentPath.value).contains(it);
          }
        });
        assert firstCommonAncestor != null;
        if (!(SNodeOperations.isInstanceOf(firstCommonAncestor, "jetbrains.mps.baseLanguage.structure.IBinaryLike"))) {
          continue;
        }

        SNode leftSideExpression = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(firstCommonAncestor, "jetbrains.mps.baseLanguage.structure.IBinaryLike"), "virtual_getSyntacticallyLeftSideExpression_1742226163722653708", new Object[]{});
        SNode rightSideExpression = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(firstCommonAncestor, "jetbrains.mps.baseLanguage.structure.IBinaryLike"), "virtual_getSyntacticallyRightSideExpression_1742226163722653714", new Object[]{});
        List<SNode> candidateAncestors = SNodeOperations.getAncestors(candidateExpression, null, true);
        List<SNode> myAncestors = SNodeOperations.getAncestors(myExpression, null, true);

        // Validate the bottom-most ancestor, whether the two parentheses can be paired legally 
        if (completingByRightParen && (ListSequence.fromList(candidateAncestors).contains(leftSideExpression) || leftSideExpression == null) && (ListSequence.fromList(myAncestors).contains(rightSideExpression) || rightSideExpression == null)) {
          break;
        }
        if (!(completingByRightParen) && (ListSequence.fromList(myAncestors).contains(leftSideExpression) || leftSideExpression == null) && (ListSequence.fromList(candidateAncestors).contains(rightSideExpression) || rightSideExpression == null)) {
          break;
        }
        // Break out if found a valid match 
      }
      // Continue to try another candidate parenthesis 
      index--;
    }
    if (index == -1) {
      // no common ancestor with any of the candidate parens or swapped left-right -> can't parenthesise 
      if (completingByRightParen) {
        AttributeOperations.setAttribute(myExpression, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteRightParen"), SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IncompleteRightParen", null));
      } else {
        AttributeOperations.setAttribute(myExpression, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen"), SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen", null));
      }
      return myExpression;
    }

    clearIncompleteParens(candidateExpression, completingByRightParen);

    // Let's call them left and right parens from now, instead of 'my' and 'candidate' 
    SNode leftExpression = (completingByRightParen ? candidateExpression : myExpression);
    SNode rightExpression = (completingByRightParen ? myExpression : candidateExpression);
    try {
      // Find the turning points, if exist, otherwise just wrap in parens 
      SNode leftTurn = ParenthesisUtil.findLeftTurn(leftExpression, firstCommonAncestor);
      SNode rightTurn = ParenthesisUtil.findRightTurn(rightExpression, firstCommonAncestor);
      if (leftTurn != null || rightTurn != null) {
        return ParenthesisUtil.rebalance(leftTurn, SNodeOperations.cast(firstCommonAncestor, "jetbrains.mps.baseLanguage.structure.IBinaryLike"), rightTurn);
      } else {
        SNode parens = SNodeFactoryOperations.replaceWithNewChild(firstCommonAncestor, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression");
        SLinkOperations.setTarget(parens, "expression", firstCommonAncestor, true);
        return parens;
      }
    } finally {
      checkWholeExpressionPriorities(topExp);
    }
  }

  /**
   * Create a ParenthesisedExpression and hook it properly into the model
   * 
   * @param leftTurn The expression that should be put outside and to the left from the new parens
   * @param rightTurn The expression that should be put outside and to the right from the new parens
   * @param firstCommonAncestor The common ancestor expression of both parentheses
   */
  private static SNode rebalance(SNode leftTurn, SNode firstCommonAncestor, SNode rightTurn) {

    // Accumulate expressions between the leftTurn and firstCommon to include inside the parens. 
    // These would be the nodes into which we come from the left child. 
    SNode leftAccumulator = buildAccumulator(firstCommonAncestor, leftTurn, true);
    // Accumulate expressions between the rightTurn and firstCommon to include inside the parens. 
    // These would be the nodes into which we come from the right child. 
    SNode rightAccumulator = buildAccumulator(firstCommonAncestor, rightTurn, false);

    assert leftAccumulator != null;
    assert rightAccumulator != null;

    SNode parens = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null);
    if (SNodeOperations.isInstanceOf(firstCommonAncestor, "jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
      rebalanceIBinaryLikeAfterParenthing(SNodeOperations.cast(firstCommonAncestor, "jetbrains.mps.baseLanguage.structure.BinaryOperation"), rightTurn, leftTurn, parens, rightAccumulator, leftAccumulator);
    } else if (SNodeOperations.isInstanceOf(firstCommonAncestor, "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression")) {
      rebalanceTernaryOpAfterParenthing(SNodeOperations.cast(firstCommonAncestor, "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"), rightTurn, leftTurn, parens, rightAccumulator, leftAccumulator);
    } else if (SNodeOperations.isInstanceOf(firstCommonAncestor, "jetbrains.mps.baseLanguage.structure.CastExpression")) {
      rebalanceIBinaryLikeAfterParenthing(SNodeOperations.cast(firstCommonAncestor, "jetbrains.mps.baseLanguage.structure.CastExpression"), rightTurn, leftTurn, parens, rightAccumulator, leftAccumulator);
    }

    SLinkOperations.setTarget(parens, "expression", firstCommonAncestor, true);
    return parens;
  }

  private static void rebalanceIBinaryLikeAfterParenthing(SNode node, SNode rightTurn, SNode leftTurn, SNode parens, SNode rightAccumulator, SNode leftAccumulator) {
    SNode leftSide = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), node, "virtual_getSyntacticallyLeftSideExpression_1742226163722653708", new Object[]{});
    SNode rightSide = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), node, "virtual_getSyntacticallyRightSideExpression_1742226163722653714", new Object[]{});
    assert leftSide != null || rightSide != null;
    SNode head = (rightSide != null ? rightSide : leftSide);
    SNodeOperations.replaceWithAnother(node, head);
    SLinkOperations.setTarget(parens, "expression", node, true);

    if (leftAccumulator != null) {
      BehaviorReflection.invokeVirtual(Void.class, node, "virtual_setSyntacticallyLeftSideExpression_1742226163722653680", new Object[]{leftAccumulator});
    }
    if (rightAccumulator != null) {
      BehaviorReflection.invokeVirtual(Void.class, node, "virtual_setSyntacticallyRightSideExpression_1742226163722653694", new Object[]{rightAccumulator});
    }
    SNode subtree;
    if (leftSide != null) {
      subtree = leftSide;
      BehaviorReflection.invokeVirtual(Void.class, leftTurn, "virtual_setSyntacticallyRightSideExpression_1742226163722653694", new Object[]{parens});
    } else {
      subtree = parens;
    }
    if (rightSide != null) {
      BehaviorReflection.invokeVirtual(Void.class, rightTurn, "virtual_setSyntacticallyLeftSideExpression_1742226163722653680", new Object[]{subtree});
    }
  }

  private static void rebalanceTernaryOpAfterParenthing(SNode node, SNode rightTurn, SNode leftTurn, SNode parens, SNode rightAccumulator, SNode leftAccumulator) {
    SNode bottomMostTernary = findBottomMostTernary(node);
    if (rightTurn != null) {
      SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(bottomMostTernary, "ifFalse", true));
      if (leftTurn != null) {
        BehaviorReflection.invokeVirtual(Void.class, rightTurn, "virtual_setSyntacticallyLeftSideExpression_1742226163722653680", new Object[]{SLinkOperations.getTarget(node, "condition", true)});
        BehaviorReflection.invokeVirtual(Void.class, leftTurn, "virtual_setSyntacticallyRightSideExpression_1742226163722653694", new Object[]{parens});
      } else {
        BehaviorReflection.invokeVirtual(Void.class, rightTurn, "virtual_setSyntacticallyLeftSideExpression_1742226163722653680", new Object[]{parens});
      }
    } else {
      if (leftTurn != null) {
        SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(node, "condition", true));
        BehaviorReflection.invokeVirtual(Void.class, leftTurn, "virtual_setSyntacticallyRightSideExpression_1742226163722653694", new Object[]{parens});
      } else {
        SNodeOperations.replaceWithAnother(node, parens);
      }
    }
    SLinkOperations.setTarget(bottomMostTernary, "ifFalse", rightAccumulator, true);
    SLinkOperations.setTarget(node, "condition", leftAccumulator, true);
  }

  /**
   * Ternary expressions can be nested in one anothers ifFalse child. Find the right-most one.
   * 
   * @param bottomMostTernary The so-far most-bottom ternary operator expression
   * @return The found right-most ternary operator expression.
   */
  private static SNode findBottomMostTernary(SNode bottomMostTernary) {
    while (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(bottomMostTernary, "ifFalse", true), "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression")) {
      bottomMostTernary = SNodeOperations.cast(SLinkOperations.getTarget(bottomMostTernary, "ifFalse", true), "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression");
    }
    return bottomMostTernary;
  }

  /**
   * Accumulate the nodes that need to be added into the parentheses
   */
  private static SNode buildAccumulator(SNode firstCommonAncestor, SNode turn, boolean left) {
    SNode accumulator;
    if (turn != null && neq_a65dpo_a0a1a22(turn, firstCommonAncestor)) {
      // Accumulate nodes on the path up from the left/right paren 
      accumulator = (left ? BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), turn, "virtual_getSyntacticallyRightSideExpression_1742226163722653714", new Object[]{}) : BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), turn, "virtual_getSyntacticallyLeftSideExpression_1742226163722653708", new Object[]{}));
      SNodeOperations.detachNode(accumulator);
      SNode current = SNodeOperations.cast(SNodeOperations.getParent(turn), "jetbrains.mps.baseLanguage.structure.IBinaryLike");
      SNode previous = turn;
      while (neq_a65dpo_a0f0b0w(current, firstCommonAncestor)) {
        SNode sideExpression = (left ? BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), current, "virtual_getSyntacticallyLeftSideExpression_1742226163722653708", new Object[]{}) : BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), current, "virtual_getSyntacticallyRightSideExpression_1742226163722653714", new Object[]{}));
        if (sideExpression != null && eq_a65dpo_a0a1a5a1a22(sideExpression, previous)) {
          SNodeOperations.replaceWithAnother(current, previous);
          if (left) {
            BehaviorReflection.invokeVirtual(Void.class, current, "virtual_setSyntacticallyLeftSideExpression_1742226163722653680", new Object[]{accumulator});
          } else {
            BehaviorReflection.invokeVirtual(Void.class, current, "virtual_setSyntacticallyRightSideExpression_1742226163722653694", new Object[]{accumulator});
          }
          accumulator = SNodeOperations.cast(current, "jetbrains.mps.baseLanguage.structure.Expression");
        } else {
          previous = current;
        }
        current = SNodeOperations.cast(SNodeOperations.getParent(previous), "jetbrains.mps.baseLanguage.structure.IBinaryLike");
      }
    } else {
      // Nothing to accumulate 
      SNode firstCommonAncestorChild = (left ? BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), firstCommonAncestor, "virtual_getSyntacticallyLeftSideExpression_1742226163722653708", new Object[]{}) : BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), firstCommonAncestor, "virtual_getSyntacticallyRightSideExpression_1742226163722653714", new Object[]{}));
      if (firstCommonAncestorChild != null) {
        accumulator = firstCommonAncestorChild;
        SNodeOperations.detachNode(accumulator);
      } else {
        accumulator = SNodeOperations.cast(firstCommonAncestor, "jetbrains.mps.baseLanguage.structure.Expression");
      }
    }
    return accumulator;
  }

  /**
   * Remove the found matching paren annotation from its node
   */
  private static void clearIncompleteParens(SNode otherExpression, boolean completingByRightParen) {
    if (completingByRightParen) {
      AttributeOperations.setAttribute(otherExpression, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen"), null);
    } else {
      AttributeOperations.setAttribute(otherExpression, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteRightParen"), null);
    }
  }

  /**
   * Climb up the ancestor expressions and return the first binary operation, in which we come from the right sub-tree.
   * 
   * @param stopNode Never climb beyond this node
   */
  private static SNode findLeftTurn(SNode leaf, SNode stopNode) {
    return findTurn(leaf, stopNode, true);
  }

  /**
   * Climb up the ancestor expressions and return the first binary operation, in which we come from the left sub-tree.
   * 
   * @param stopNode Never climb beyond this node
   */
  private static SNode findRightTurn(SNode leaf, SNode stopNode) {
    return findTurn(leaf, stopNode, false);
  }

  private static SNode findTurn(SNode leaf, SNode stopNode, boolean leftTurn) {
    SNode currentNode = SNodeOperations.getParent(leaf);
    SNode previous = leaf;
    while (neq_a65dpo_a0a2a03(previous, stopNode) && SNodeOperations.isInstanceOf(currentNode, "jetbrains.mps.baseLanguage.structure.IBinaryLike")) {
      SNode leftSideExpression = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(currentNode, "jetbrains.mps.baseLanguage.structure.IBinaryLike"), "virtual_getSyntacticallyLeftSideExpression_1742226163722653708", new Object[]{});
      SNode rightSideExpression = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(currentNode, "jetbrains.mps.baseLanguage.structure.IBinaryLike"), "virtual_getSyntacticallyRightSideExpression_1742226163722653714", new Object[]{});
      if (leftTurn && eq_a65dpo_a0a2a2a03(rightSideExpression, previous)) {
        return SNodeOperations.cast(currentNode, "jetbrains.mps.baseLanguage.structure.IBinaryLike");
      }
      if (!(leftTurn) && eq_a65dpo_a0a3a2a03(leftSideExpression, previous)) {
        return SNodeOperations.cast(currentNode, "jetbrains.mps.baseLanguage.structure.IBinaryLike");
      }

      previous = currentNode;
      currentNode = SNodeOperations.getParent(currentNode);
    }
    return null;
  }


  /**
   * Find all the ancestor expressions of leaf that could be wrapped in parens.
   * Stops when the parent current expression could no longer be parenthesised.
   */
  private static List<SNode> parentPath(SNode leaf, boolean rightParen) {
    List<SNode> path = new ArrayList<SNode>();
    ListSequence.fromList(path).addElement(leaf);
    List<SNode> leafAncestors = SNodeOperations.getAncestors(leaf, null, true);

    for (SNode currentNode = SNodeOperations.getParent(leaf); SNodeOperations.isInstanceOf(currentNode, "jetbrains.mps.baseLanguage.structure.IBinaryLike") && BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(currentNode, "jetbrains.mps.baseLanguage.structure.IBinaryLike"), "virtual_canPropagateUnmatchedParenUp_1742226163722653670", new Object[]{leaf, rightParen}); currentNode = SNodeOperations.getParent(currentNode)) {
      ListSequence.fromList(path).addElement(SNodeOperations.cast(currentNode, "jetbrains.mps.baseLanguage.structure.Expression"));
    }
    return path;
  }

  public static void checkWholeExpressionPriorities(SNode expr) {
    SNode current = expr;
    // find the top-most expression 
    while (SNodeOperations.isInstanceOf(SNodeOperations.getParent(current), "jetbrains.mps.baseLanguage.structure.Expression")) {
      current = SNodeOperations.cast(SNodeOperations.getParent(current), "jetbrains.mps.baseLanguage.structure.Expression");
    }

    List<SNode> candidates = ListSequence.fromList(new ArrayList<SNode>());
    ListSequence.fromList(candidates).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(current, "jetbrains.mps.baseLanguage.structure.BinaryOperation", true, new String[]{})));
    checkCandidateExpressionsPriorities(candidates);
  }

  public static void checkOperationWRTPriority(SNode binOp) {
    List<SNode> candidates = ListSequence.fromListAndArray(new ArrayList<SNode>(), binOp);
    checkCandidateExpressionsPriorities(candidates);
  }

  private static void checkCandidateExpressionsPriorities(List<SNode> candidates) {
    while (ListSequence.fromList(candidates).isNotEmpty()) {
      SNode candidate = ListSequence.fromList(candidates).first();
      if (checkOperationChildWRTPriority(candidate, false, candidates) && checkOperationChildWRTPriority(candidate, true, candidates) && checkOperationParentWRTPriority(candidate, candidates)) {
        ListSequence.fromList(candidates).removeElementAt(0);
      }
    }
  }

  private static boolean checkOperationChildWRTPriority(SNode node, boolean isRight, List<SNode> candidates) {
    SNode sideExpr = (isRight ? SLinkOperations.getTarget(node, "rightExpression", true) : SLinkOperations.getTarget(node, "leftExpression", true));
    if (SNodeOperations.isInstanceOf(sideExpr, "jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
      SNode sideChild = SNodeOperations.cast(sideExpr, "jetbrains.mps.baseLanguage.structure.BinaryOperation");
      if (isBadPriority(sideChild, node, isRight)) {
        ParenthesisUtil.rotateTree(sideChild, node, isRight);
        ListSequence.fromList(candidates).addElement(SNodeOperations.cast(sideExpr, "jetbrains.mps.baseLanguage.structure.BinaryOperation"));
        return false;
      }
    } else if (SNodeOperations.isInstanceOf(sideExpr, "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression")) {
      SNodeOperations.replaceWithAnother(node, sideExpr);
      if (isRight) {
        SLinkOperations.setTarget(node, "rightExpression", SLinkOperations.getTarget(SNodeOperations.cast(sideExpr, "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"), "condition", true), true);
        SLinkOperations.setTarget(SNodeOperations.cast(sideExpr, "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"), "condition", node, true);
      } else {
        SLinkOperations.setTarget(node, "leftExpression", SLinkOperations.getTarget(SNodeOperations.cast(sideExpr, "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"), "ifFalse", true), true);
        SLinkOperations.setTarget(SNodeOperations.cast(sideExpr, "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"), "ifFalse", node, true);
      }
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(sideExpr), "jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
        ListSequence.fromList(candidates).addElement(SNodeOperations.cast(SNodeOperations.getParent(sideExpr), "jetbrains.mps.baseLanguage.structure.BinaryOperation"));
      }
      return false;
    }
    return true;
  }

  private static boolean checkOperationParentWRTPriority(SNode node, List<SNode> candidates) {
    if (SNodeOperations.getParent(node) == null) {
      return true;
    }
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
      SNode parent = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.BinaryOperation");
      boolean isRight = false;
      if (SLinkOperations.getTarget(parent, "rightExpression", true) == node) {
        isRight = true;
      } else if (SLinkOperations.getTarget(parent, "leftExpression", true) == node) {
        isRight = false;
      }
      if (ParenthesisUtil.isBadPriority(node, parent, isRight)) {
        ParenthesisUtil.rotateTree(node, parent, isRight);
        ListSequence.fromList(candidates).addElement(parent);
        return false;
      }
      return true;
    } else {
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation")) {
        SNode parent = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation");
        SLinkOperations.setTarget(parent, "expression", SLinkOperations.getTarget(node, "leftExpression", true), true);
        SNodeOperations.replaceWithAnother(parent, node);
        SLinkOperations.setTarget(node, "leftExpression", parent, true);
      } else if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.CastExpression")) {
        SNode castExpr = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.CastExpression");
        SNodeOperations.replaceWithAnother(castExpr, node);
        SLinkOperations.setTarget(castExpr, "expression", SLinkOperations.getTarget(node, "leftExpression", true), true);
        SLinkOperations.setTarget(node, "leftExpression", castExpr, true);
      } else if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.DotExpression") && SNodeOperations.hasRole(node, "jetbrains.mps.baseLanguage.structure.DotExpression", "operand")) {
        SNode dotExpr = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.DotExpression");
        SNodeOperations.replaceWithAnother(dotExpr, node);
        SLinkOperations.setTarget(dotExpr, "operand", SLinkOperations.getTarget(node, "rightExpression", true), true);
        SLinkOperations.setTarget(node, "rightExpression", dotExpr, true);
      } else {
        return true;
      }
      return false;
    }
  }

  public static SNode getBinOp(SNode expr, boolean toRight) {
    SNode parent = SNodeOperations.getParent(expr);
    if (!(SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.BinaryOperation"))) {
      return null;
    }
    SNode parentOp = SNodeOperations.cast(parent, "jetbrains.mps.baseLanguage.structure.BinaryOperation");
    boolean right = toRight && SLinkOperations.getTarget(parentOp, "leftExpression", true) == expr;
    boolean left = !(toRight) && SLinkOperations.getTarget(parentOp, "rightExpression", true) == expr;
    if (right || left) {
      return parentOp;
    }
    return getBinOp(parentOp, toRight);
  }
  public static void rotateTree(SNode child, SNode op, boolean isRight) {
    SNode backsideExpr = (isRight ? SLinkOperations.getTarget(child, "leftExpression", true) : SLinkOperations.getTarget(child, "rightExpression", true));
    SNodeOperations.detachNode(child);
    SNodeOperations.replaceWithAnother(op, child);
    SNodeOperations.replaceWithAnother(backsideExpr, op);
    if (isRight) {
      SLinkOperations.setTarget(op, "rightExpression", backsideExpr, true);
    } else {
      SLinkOperations.setTarget(op, "leftExpression", backsideExpr, true);
    }
  }
  public static boolean isBadPriority(SNode child, SNode parent, boolean isRight) {
    return BehaviorReflection.invokeVirtualStatic(Integer.TYPE, SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(child))), "virtual_getPriority_1262430001741497858", new Object[]{}) < BehaviorReflection.invokeVirtualStatic(Integer.TYPE, SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(parent))), "virtual_getPriority_1262430001741497858", new Object[]{}) || (isRight && ((int) BehaviorReflection.invokeVirtualStatic(Integer.TYPE, SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(child))), "virtual_getPriority_1262430001741497858", new Object[]{})) == ((int) BehaviorReflection.invokeVirtualStatic(Integer.TYPE, SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(parent))), "virtual_getPriority_1262430001741497858", new Object[]{})));
  }
  private static boolean eq_a65dpo_a0a0a0e0g(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean eq_a65dpo_a0b0a0a4a6(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean eq_a65dpo_a0a0a7a5a01(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean eq_a65dpo_a0a0a7a5a01_0(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean eq_a65dpo_a0b0m0m(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean neq_a65dpo_a0a1a22(Object a, Object b) {
    return !((a != null ? a.equals(b) : a == b));
  }
  private static boolean eq_a65dpo_a0a1a5a1a22(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean neq_a65dpo_a0f0b0w(Object a, Object b) {
    return !((a != null ? a.equals(b) : a == b));
  }
  private static boolean neq_a65dpo_a0a2a03(Object a, Object b) {
    return !((a != null ? a.equals(b) : a == b));
  }
  private static boolean eq_a65dpo_a0a2a2a03(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean eq_a65dpo_a0a3a2a03(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
