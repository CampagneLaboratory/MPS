package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.DynamicReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class UnknownDotCall_Behavior {
  public static void init(SNode thisNode) {
  }

  public static SNode virtual_evaluateSubst_8136348407761606764(SNode thisNode) {
    SNode result = null;
    SNode operand = UnknownNameRef_Behavior.call_resolveTokens_4018023047319628331(thisNode);

    if ((operand == null)) {
      return null;

    } else if (SNodeOperations.isInstanceOf(operand, "jetbrains.mps.baseLanguage.structure.Classifier")) {
      SNode target = SNodeOperations.cast(operand, "jetbrains.mps.baseLanguage.structure.Classifier");

      if (!(SNodeOperations.isInstanceOf(target, "jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
        // show proper error message 
        // <node> 
        return null;
      }

      SNode call = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null);
      SLinkOperations.setTarget(call, "classConcept", SNodeOperations.cast(target, "jetbrains.mps.baseLanguage.structure.ClassConcept"), false);
      SReference sref = new DynamicReference("staticMethodDeclaration", call, null, SPropertyOperations.getString(thisNode, "callee"));
      call.addReference(sref);

      for (SNode arg : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "actualArgument", true))) {
        ListSequence.fromList(SLinkOperations.getTargets(call, "actualArgument", true)).addElement(SNodeOperations.copyNode(arg));
      }

      result = call;
      return result;

    } else if (SNodeOperations.isInstanceOf(operand, "jetbrains.mps.baseLanguage.structure.Expression")) {
      // operand is some other expression. it's supposed to an instance method call then 

      System.out.println("DEBUG: operand in dot call is expression");

      SNode dotExpr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DotExpression", null);
      SLinkOperations.setTarget(dotExpr, "operand", SNodeOperations.cast(operand, "jetbrains.mps.baseLanguage.structure.Expression"), true);

      SNode call = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation", null);
      SLinkOperations.setTarget(dotExpr, "operation", call, true);

      SReference sref = new DynamicReference("instanceMethodDeclaration", call, null, SPropertyOperations.getString(thisNode, "callee"));
      call.addReference(sref);

      for (SNode arg : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "actualArgument", true))) {
        ListSequence.fromList(SLinkOperations.getTargets(call, "actualArgument", true)).addElement(SNodeOperations.copyNode(arg));
      }

      result = dotExpr;
      return result;

    } else {
      // something unexpected 
      return null;
    }
  }
}
