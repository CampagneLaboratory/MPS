package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.search.VisibilityUtil;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.baseLanguage.scopes.ClassifierScopeUtils;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptPropertyOperations;
import jetbrains.mps.smodel.structure.BehaviorDescriptor;
import jetbrains.mps.smodel.structure.ConceptRegistry;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class ClassifierMember_Behavior {
  private static Class[] PARAMETERS_8986964027630462944 = {SNode.class};
  private static Class[] PARAMETERS_8083692786967482069 = {SNode.class, SNode.class, SNode.class};
  private static Class[] PARAMETERS_274804607996650333 = {SNode.class, SNode.class};
  private static Logger LOG = Logger.getLogger(ClassifierMember_Behavior.class);

  public static void init(SNode thisNode) {
  }

  public static boolean virtual_isStatic_8986964027630462944(SNode thisNode) {
    return false;
  }

  public static boolean virtual_isVisible_8083692786967482069(SNode thisNode, final SNode contextClassifier, SNode contextNode) {
    // public 
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(thisNode, "visibility", true), "jetbrains.mps.baseLanguage.structure.PublicVisibility")) {
      return true;
    }
    // private 
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(thisNode, "visibility", true), "jetbrains.mps.baseLanguage.structure.PrivateVisibility")) {
      return ListSequence.fromList(SNodeOperations.getAncestors(contextNode, "jetbrains.mps.baseLanguage.structure.Classifier", true)).last() == ListSequence.fromList(SNodeOperations.getAncestors(contextClassifier, "jetbrains.mps.baseLanguage.structure.Classifier", true)).last();
    }
    // default 
    String contextNodePackage = VisibilityUtil.packageName(contextNode);
    String contextClassifierPackage = VisibilityUtil.packageName(contextClassifier);
    String declarationClassifierPackage = VisibilityUtil.packageName(Classifier_Behavior.getContextClassifier_6172562527426750080(thisNode));
    if ((SLinkOperations.getTarget(thisNode, "visibility", true) == null)) {
      return eq_i8o263_a0a0i0c(contextNodePackage, contextClassifierPackage);
    }
    // protected 
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(thisNode, "visibility", true), "jetbrains.mps.baseLanguage.structure.ProtectedVisibility")) {
      if (eq_i8o263_a0a0k0c(contextNodePackage, declarationClassifierPackage)) {
        return true;
      }

      // two cases: 1) from class 2) from dot expression 
      Iterable<SNode> possibleClassifiers = ListSequence.fromList(SNodeOperations.getAncestors(contextNode, "jetbrains.mps.baseLanguage.structure.Classifier", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return ListSequence.fromList(ClassifierScopeUtils.getExtendedClassifiers(it)).contains(contextClassifier);
        }
      });
      if (!(SNodeOperations.isInstanceOf(contextNode, "jetbrains.mps.baseLanguage.structure.DotExpression"))) {
        // 1 
        return Sequence.fromIterable(possibleClassifiers).isNotEmpty();
      } else {
        // 2 
        SNode leftClassifier = DotExpression_Behavior.call_getClassifier_1213877410697(SNodeOperations.cast(contextNode, "jetbrains.mps.baseLanguage.structure.DotExpression"));
        final Set<SNode> extendedClassifiers = SetSequence.fromSetWithValues(new HashSet(), ClassifierScopeUtils.getExtendedClassifiers(leftClassifier));
        return Sequence.fromIterable(possibleClassifiers).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SetSequence.fromSet(extendedClassifiers).contains(it);
          }
        });
      }
    }

    return false;
  }

  public static Object virtual_getSignatureForOverriding_274804607996650333(SNode thisNode, SNode contextClassifier) {
    if (SConceptPropertyOperations.getBoolean(thisNode, "inheritableMember")) {
      LOG.error("getSignatureForOverriding should be implemented in case of inheritable member");
    }
    return null;
  }

  public static boolean call_isStatic_8986964027630462944(SNode thisNode) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (Boolean) descriptor.invoke(Boolean.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.ClassifierMember"), "virtual_isStatic_8986964027630462944", PARAMETERS_8986964027630462944);
  }

  public static boolean call_isVisible_8083692786967482069(SNode thisNode, SNode contextClassifier, SNode contextNode) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (Boolean) descriptor.invoke(Boolean.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.ClassifierMember"), "virtual_isVisible_8083692786967482069", PARAMETERS_8083692786967482069, contextClassifier, contextNode);
  }

  public static Object call_getSignatureForOverriding_274804607996650333(SNode thisNode, SNode contextClassifier) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (Object) descriptor.invoke(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.ClassifierMember"), "virtual_getSignatureForOverriding_274804607996650333", PARAMETERS_274804607996650333, contextClassifier);
  }

  public static boolean callSuper_isStatic_8986964027630462944(SNode thisNode, String callerConceptFqName) {
    return (Boolean) BehaviorManager.getInstance().invokeSuper(Boolean.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.ClassifierMember"), callerConceptFqName, "virtual_isStatic_8986964027630462944", PARAMETERS_8986964027630462944);
  }

  public static boolean callSuper_isVisible_8083692786967482069(SNode thisNode, String callerConceptFqName, SNode contextClassifier, SNode contextNode) {
    return (Boolean) BehaviorManager.getInstance().invokeSuper(Boolean.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.ClassifierMember"), callerConceptFqName, "virtual_isVisible_8083692786967482069", PARAMETERS_8083692786967482069, contextClassifier, contextNode);
  }

  public static Object callSuper_getSignatureForOverriding_274804607996650333(SNode thisNode, String callerConceptFqName, SNode contextClassifier) {
    return (Object) BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.ClassifierMember"), callerConceptFqName, "virtual_getSignatureForOverriding_274804607996650333", PARAMETERS_274804607996650333, contextClassifier);
  }

  private static boolean eq_i8o263_a0a0i0c(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_i8o263_a0a0k0c(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
