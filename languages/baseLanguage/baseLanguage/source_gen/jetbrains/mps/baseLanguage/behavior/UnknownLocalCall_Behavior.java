package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class UnknownLocalCall_Behavior {
  public static void init(SNode thisNode) {
  }

  public static SNode virtual_evaluateSubst_8136348407761606764(SNode thisNode) {
    SNode result = null;
    SNode call = null;

    Scope staticMethodsScope = Scope.getScope(SNodeOperations.getParent(thisNode), thisNode, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"));
    Scope instMethodsScope = Scope.getScope(SNodeOperations.getParent(thisNode), thisNode, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));

    Iterable<SNode> staticMethods = staticMethodsScope.getAvailableElements(SPropertyOperations.getString(thisNode, "callee"));
    if (Sequence.fromIterable(staticMethods).isNotEmpty()) {
      SNode decl = SNodeOperations.cast(Sequence.fromIterable(staticMethods).iterator().next(), "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");
      SNode scall = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null);
      SLinkOperations.setTarget(scall, "baseMethodDeclaration", decl, false);
      call = scall;
      result = scall;

    } else {
      Iterable<SNode> instMethods = instMethodsScope.getAvailableElements(SPropertyOperations.getString(thisNode, "callee"));
      SNode decl = null;
      if (Sequence.fromIterable(instMethods).isNotEmpty()) {
        decl = SNodeOperations.cast(Sequence.fromIterable(instMethods).iterator().next(), "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
      }
      SNode icall = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall", null);
      SLinkOperations.setTarget(icall, "baseMethodDeclaration", decl, false);
      call = icall;
      result = icall;
    }

    if ((result != null)) {
      // success 
      for (SNode arg : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "actualArgument", true))) {
        ListSequence.fromList(SLinkOperations.getTargets(call, "actualArgument", true)).addElement(SNodeOperations.copyNode(arg));
      }
    }
    return result;
  }
}
