package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.search.MethodResolveUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.DynamicReference;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.baseLanguage.scopes.ClassifiersScope;
import java.util.List;

public class ResolveUnknownUtil {
  private static Logger LOG = LogManager.getLogger(ResolveUnknownUtil.class);
  public ResolveUnknownUtil() {
  }
  public static _FunctionTypes._return_P0_E0<? extends SNode> resolveQualNameRef(SNode x) {
    final SNode result = ResolveUnknownUtil.resolveTokens(x);

    if ((result == null)) {
      return null;
    }
    if (SNodeOperations.isInstanceOf(result, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107461130800l, "jetbrains.mps.baseLanguage.structure.Classifier"))) {
      // change to something real as default, e.g. static field access expression without the field 
      return new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          SNode fieldRef = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1070533707846l, "jetbrains.mps.baseLanguage.structure.StaticFieldReference"));
          SLinkOperations.setTarget(fieldRef, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1070533707846l, 1144433057691l, "classifier"), SNodeOperations.cast(result, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107461130800l, "jetbrains.mps.baseLanguage.structure.Classifier")));
          return fieldRef;
        }
      };
    }

    if (SNodeOperations.isInstanceOf(result, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068431790191l, "jetbrains.mps.baseLanguage.structure.Expression"))) {
      return new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          return result;
        }
      };
    }

    return null;
  }
  public static _FunctionTypes._return_P0_E0<? extends SNode> resolveConsCall(final SNode x) {
    SNode enclosingClass = SNodeOperations.getNodeAncestor(x, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068390468198l, "jetbrains.mps.baseLanguage.structure.ClassConcept"), false, false);
    if ((enclosingClass == null)) {
      return null;
    }
    final SNode foundCons = ResolveUnknownUtil.findConstructor(enclosingClass, SLinkOperations.getChildren(x, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1204053956946l, 1068499141038l, "actualArgument")));
    if ((foundCons == null)) {
      return null;
    }

    // success 
    return new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        SNode result = (SPropertyOperations.getBoolean(x, MetaAdapterFactory.getProperty(new UUID(-935030926396207931l, -6610165693999523818l), 9100188248702352244l, 9100188248702352610l, "isSuper")) ? SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1070475587102l, "jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation")) : SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1178893518978l, "jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation")));
        reattachMethodArguments(x, result);
        SLinkOperations.setTarget(result, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1204053956946l, 1068499141037l, "baseMethodDeclaration"), foundCons);
        return result;
      }
    };
  }
  public static _FunctionTypes._return_P0_E0<? extends SNode> resolveLocalCall(final SNode x) {
    final Wrappers._T<SNode> call = new Wrappers._T<SNode>(null);

    Scope methodsScope = Scope.getScope(SNodeOperations.getParent(x), x, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.MethodDeclaration"));

    if (methodsScope == null) {
      return null;
    }

    SNode node = methodsScope.resolve(x, SPropertyOperations.getString(x, MetaAdapterFactory.getProperty(new UUID(-935030926396207931l, -6610165693999523818l), 2621000434129552854l, 2621000434129552880l, "callee")));
    if ((node == null)) {
      return null;
    }

    if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1081236700938l, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"))) {
      SNode decl = SNodeOperations.cast(node, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1081236700938l, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"));
      SNode scall = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1081236700937l, "jetbrains.mps.baseLanguage.structure.StaticMethodCall"));
      SLinkOperations.setTarget(scall, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1204053956946l, 1068499141037l, "baseMethodDeclaration"), decl);
      call.value = scall;

    } else if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123165l, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"))) {
      SNode decl = SNodeOperations.cast(node, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123165l, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
      SNode icall = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 7812454656619025412l, "jetbrains.mps.baseLanguage.structure.LocalMethodCall"));
      SLinkOperations.setTarget(icall, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1204053956946l, 1068499141037l, "baseMethodDeclaration"), decl);
      call.value = icall;
    }

    if ((call.value == null)) {
      return null;
    }

    return new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        reattachMethodArguments(x, call.value);
        return call.value;
      }
    };
  }
  public static _FunctionTypes._return_P0_E0<? extends SNode> resolveNew(final SNode x) {
    final SNode typ = findClass(x, SPropertyOperations.getString(x, MetaAdapterFactory.getProperty(new UUID(-935030926396207931l, -6610165693999523818l), 3304084122476667220l, 3304084122476721463l, "className")));
    if ((typ == null)) {
      return null;
    }
    if (!(SNodeOperations.isInstanceOf(typ, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068390468198l, "jetbrains.mps.baseLanguage.structure.ClassConcept")))) {
      return null;
    }

    return new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {

        SNode result = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1145552977093l, "jetbrains.mps.baseLanguage.structure.GenericNewExpression"));
        SNode creator;

        Tuples._2<SNode, Boolean> resolveResult = MethodResolveUtil.resolveMethod(x, "");
        SNode ctor = (resolveResult == null ? null : SNodeOperations.as(resolveResult._0(), MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123140l, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration")));

        if ((ctor == null)) {

          // we can't use default constructor in this case 
          if (ListSequence.fromList(SLinkOperations.getChildren(x, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1204053956946l, 1068499141038l, "actualArgument"))).isNotEmpty()) {
            return null;
          }

          SNode defaultConsCreator = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 2820489544401957797l, "jetbrains.mps.baseLanguage.structure.DefaultClassCreator"));
          SLinkOperations.setTarget(defaultConsCreator, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 2820489544401957797l, 2820489544401957798l, "classifier"), typ);
          for (SNode arg : ListSequence.fromList(SLinkOperations.getChildren(x, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1204053956946l, 4972241301747169160l, "typeArgument")))) {
            SNodeOperations.detachNode(arg);
            ListSequence.fromList(SLinkOperations.getChildren(defaultConsCreator, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 2820489544401957797l, 2820489544402271667l, "typeParameter"))).addElement(arg);
          }

          creator = defaultConsCreator;

        } else {

          SNode classCreator = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1212685548494l, "jetbrains.mps.baseLanguage.structure.ClassCreator"));

          reattachMethodArguments(x, classCreator);
          for (SNode arg : ListSequence.fromList(SLinkOperations.getChildren(x, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1204053956946l, 4972241301747169160l, "typeArgument")))) {
            SNodeOperations.detachNode(arg);
            ListSequence.fromList(SLinkOperations.getChildren(classCreator, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1212685548494l, 1212687122400l, "typeParameter"))).addElement(arg);
          }

          SLinkOperations.setTarget(classCreator, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1204053956946l, 1068499141037l, "baseMethodDeclaration"), ctor);
          creator = classCreator;
        }

        SLinkOperations.setTarget(result, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1145552977093l, 1145553007750l, "creator"), creator);
        return result;
      }
    };
  }
  public static _FunctionTypes._return_P0_E0<? extends SNode> resolveDotCall(final SNode x) {
    final SNode operand = ResolveUnknownUtil.resolveTokens(x);

    final String className = null;

    if ((operand == null)) {
      return null;
    }

    if (SNodeOperations.isInstanceOf(operand, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107461130800l, "jetbrains.mps.baseLanguage.structure.Classifier"))) {
      final SNode target = ((operand == null) ? null : SNodeOperations.cast(operand, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107461130800l, "jetbrains.mps.baseLanguage.structure.Classifier")));

      if ((target != null) && !(SNodeOperations.isInstanceOf(target, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068390468198l, "jetbrains.mps.baseLanguage.structure.ClassConcept")))) {
        return null;
      }

      return new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          SNode call = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1081236700937l, "jetbrains.mps.baseLanguage.structure.StaticMethodCall"));
          if ((target != null)) {
            SLinkOperations.setTarget(call, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1081236700937l, 1144433194310l, "classConcept"), SNodeOperations.cast(target, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068390468198l, "jetbrains.mps.baseLanguage.structure.ClassConcept")));
          } else {
            call.setReference(new DynamicReference("classConcept", call, null, className).getRole(), new DynamicReference("classConcept", call, null, className));
          }
          SReference sref = new DynamicReference("baseMethodDeclaration", call, null, SPropertyOperations.getString(x, MetaAdapterFactory.getProperty(new UUID(-935030926396207931l, -6610165693999523818l), 2621000434129553333l, 4872723285943177972l, "callee")));
          call.setReference(sref.getRole(), sref);
          reattachMethodArguments(x, call);
          reattachTypeArguments(x, call);
          return call;
        }
      };

    } else if (SNodeOperations.isInstanceOf(operand, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068431790191l, "jetbrains.mps.baseLanguage.structure.Expression"))) {
      // operand is some other expression. it's supposed to be an instance method call then 

      return new _FunctionTypes._return_P0_E0<SNode>() {
        public SNode invoke() {
          SNode dotExpr = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1197027756228l, "jetbrains.mps.baseLanguage.structure.DotExpression"));
          SLinkOperations.setTarget(dotExpr, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1197027756228l, 1197027771414l, "operand"), SNodeOperations.cast(operand, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068431790191l, "jetbrains.mps.baseLanguage.structure.Expression")));

          SNode call = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1202948039474l, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"));
          SLinkOperations.setTarget(dotExpr, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1197027756228l, 1197027833540l, "operation"), call);

          SReference sref = new DynamicReference("baseMethodDeclaration", call, null, SPropertyOperations.getString(x, MetaAdapterFactory.getProperty(new UUID(-935030926396207931l, -6610165693999523818l), 2621000434129553333l, 4872723285943177972l, "callee")));
          call.setReference(sref.getRole(), sref);

          reattachMethodArguments(x, call);
          reattachTypeArguments(x, call);
          return dotExpr;
        }
      };

    } else {
      return null;

    }

  }
  public static SNode resolveTokens(SNode x) {
    // returns either node<Expression> with a normal baseLanguage expression 
    // or node<Classifier> if all tokens form a name class 
    // returns null if could not resolve 

    String[] tokens = SPropertyOperations.getString(x, MetaAdapterFactory.getProperty(new UUID(-935030926396207931l, -6610165693999523818l), 6528213125912070246l, 1843920760191311250l, "tokens")).split("\\.");

    SNode operand = null;
    int tokPos = 0;

    SNode mbVarRef = ResolveUnknownUtil.tryFirstTokenAsVarRef(x);

    if ((mbVarRef != null)) {
      // it's a variable 
      operand = mbVarRef;
      tokPos = 1;

    } else {
      // it must be a class 
      Tuples._2<SNode, Integer> classAndPos = ResolveUnknownUtil.tryFindClass(x);
      if (classAndPos == null) {
        return null;
      }

      SNode cls = classAndPos._0();
      tokPos = (int) classAndPos._1();

      if (tokPos == tokens.length) {
        // no tokens left, all of them form a class name 
        // done 
        return cls;

      } else {
        // there is at least one token that must represent a static field (or enum constant) 

        final String memberName = tokens[tokPos];
        SNode mbEnumConst = null;

        if (SNodeOperations.isInstanceOf(cls, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1083245097125l, "jetbrains.mps.baseLanguage.structure.EnumClass"))) {
          mbEnumConst = ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(cls, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1083245097125l, "jetbrains.mps.baseLanguage.structure.EnumClass")), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1083245097125l, 1083245396908l, "enumConstant"))).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return memberName.equals(SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name")));
            }
          }).first();
        }

        if (mbEnumConst != null) {
          SNode enumRef = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1083260308424l, "jetbrains.mps.baseLanguage.structure.EnumConstantReference"));
          SLinkOperations.setTarget(enumRef, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1083260308424l, 1144432896254l, "enumClass"), SNodeOperations.cast(cls, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1083245097125l, "jetbrains.mps.baseLanguage.structure.EnumClass")));
          SLinkOperations.setTarget(enumRef, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1083260308424l, 1083260308426l, "enumConstantDeclaration"), mbEnumConst);
          operand = enumRef;

        } else {
          SNode statFieldRef = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1070533707846l, "jetbrains.mps.baseLanguage.structure.StaticFieldReference"));
          SLinkOperations.setTarget(statFieldRef, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1070533707846l, 1144433057691l, "classifier"), cls);
          SReference fieldRef;
          fieldRef = new DynamicReference("variableDeclaration", statFieldRef, null, memberName);
          statFieldRef.setReference(fieldRef.getRole(), fieldRef);
          operand = statFieldRef;
        }
        // +1 is here because static field takes one extra token 
        tokPos = tokPos + 1;
      }
    }

    if ((operand == null)) {
      return null;
    }

    // success. now the structure is determined, only need to put dynamic references to nodes 
    while (tokPos < tokens.length) {
      SNode dotExpr = ResolveUnknownUtil.makeFieldDotExpression(operand, tokens[tokPos]);
      operand = dotExpr;
      tokPos++;
    }

    return operand;
  }
  public static SNode makeFieldDotExpression(SNode holder, String fieldName) {
    SNode dotExpr = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1197027756228l, "jetbrains.mps.baseLanguage.structure.DotExpression"));
    SLinkOperations.setTarget(dotExpr, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1197027756228l, 1197027771414l, "operand"), holder);
    SNode fieldRef = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1197029447546l, "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation"));
    SLinkOperations.setTarget(dotExpr, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1197027756228l, 1197027833540l, "operation"), fieldRef);
    SReference sref = new DynamicReference("fieldDeclaration", fieldRef, null, fieldName);
    fieldRef.setReference(sref.getRole(), sref);
    return dotExpr;
  }
  public static SNode tryFirstTokenAsVarRef(SNode x) {
    Scope scope = Scope.getScope(SNodeOperations.getParent(x), x, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableDeclaration"));
    if (scope == null) {
      // TODO make it more informative 
      // <node> 
      return null;
    }

    String name = Tokens_Behavior.call_firstToken_1296023605441710627(x);

    if (Sequence.fromIterable(scope.getAvailableElements(name)).isNotEmpty()) {
      // it's a variable 

      SNode varRef = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068498886296l, "jetbrains.mps.baseLanguage.structure.VariableReference"));
      SReference sref = new DynamicReference("variableDeclaration", varRef, null, name);
      varRef.setReference(sref.getRole(), sref);

      return varRef;
    } else {
      return null;
    }
  }
  public static Tuples._2<SNode, Integer> tryFindClass(SNode x) {
    StringBuilder sb = new StringBuilder();
    String[] tokens = SPropertyOperations.getString(x, MetaAdapterFactory.getProperty(new UUID(-935030926396207931l, -6610165693999523818l), 6528213125912070246l, 1843920760191311250l, "tokens")).split("\\.");

    int[] dotPositions = new int[tokens.length];
    int lastDot = -1;
    int k = 0;

    for (String tok : tokens) {
      sb.append(tok);
      sb.append('.');
      dotPositions[k] = lastDot + tok.length() + 1;
      lastDot = dotPositions[k];
      k++;
    }

    // TODO maybe should return a list of possible s along with their token count 
    // so that the client can choose the right one itself 

    // try the longest name first, the shortest last 
    for (int p = dotPositions.length - 1; p >= 0; p--) {
      String className = sb.substring(0, dotPositions[p]);
      SNode cls = findClass(x, className);
      if ((cls != null)) {

        return MultiTuple.<SNode,Integer>from(cls, p + 1);
      }
    }

    return null;
  }
  public static SNode findClass(SNode from, String className) {
    SNode res = null;

    SNode contextClas = SNodeOperations.getNodeAncestor(from, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107461130800l, "jetbrains.mps.baseLanguage.structure.Classifier"), true, false);
    ClassifiersScope scope = new ClassifiersScope(SNodeOperations.getModel(from), contextClas, "jetbrains.mps.baseLanguage.structure.Classifier", true);

    SNode claz = scope.resolve(from, className);
    if ((claz == null)) {
      return null;
    }
    if (!(SNodeOperations.isInstanceOf(claz, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107461130800l, "jetbrains.mps.baseLanguage.structure.Classifier")))) {
      return null;
    }

    return SNodeOperations.cast(claz, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107461130800l, "jetbrains.mps.baseLanguage.structure.Classifier"));
  }
  public static SNode findConstructor(SNode claz, List<SNode> args) {
    SNode result;
    Iterable<SNode> conss = ClassConcept_Behavior.call_constructors_5292274854859503373(claz);
    if (Sequence.fromIterable(conss).isEmpty()) {
      result = null;
    } else if (Sequence.fromIterable(conss).count() == 1) {
      result = Sequence.fromIterable(conss).first();
    } else {
      final int argCount = ListSequence.fromList(args).count();
      Iterable<SNode> subset = Sequence.fromIterable(conss).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return ListSequence.fromList(SLinkOperations.getChildren(it, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123132l, 1068580123134l, "parameter"))).count() == argCount;
        }
      });
      result = Sequence.fromIterable(subset).first();
    }
    return result;
  }
  public static void reattachMethodArguments(SNode from, SNode to) {
    for (SNode arg : ListSequence.fromList(SLinkOperations.getChildren(from, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1204053956946l, 1068499141038l, "actualArgument")))) {
      ListSequence.fromList(SLinkOperations.getChildren(to, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1204053956946l, 1068499141038l, "actualArgument"))).addElement(SNodeOperations.copyNode(arg));
    }
  }
  public static void reattachTypeArguments(SNode from, SNode to) {
    for (SNode arg : ListSequence.fromList(SLinkOperations.getChildren(from, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1204053956946l, 4972241301747169160l, "typeArgument")))) {
      ListSequence.fromList(SLinkOperations.getChildren(to, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1204053956946l, 4972241301747169160l, "typeArgument"))).addElement(SNodeOperations.copyNode(arg));
    }
  }

  protected static Logger LOG_180675533 = LogManager.getLogger(ResolveUnknownUtil.class);
}
