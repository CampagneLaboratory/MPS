package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.logging.Logger;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.ArrayList;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.TransactionCache;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.baseLanguage.scopes.FieldDeclarationScope;
import jetbrains.mps.baseLanguage.scopes.EnumConstantDeclarationScope;
import jetbrains.mps.baseLanguage.scopes.PropertyScope;
import jetbrains.mps.baseLanguage.scopes.StaticFieldDeclarationScope;
import jetbrains.mps.baseLanguage.scopes.StaticMethodDeclarationScope;
import jetbrains.mps.baseLanguage.scopes.InstanceMethodDeclarationScope;
import jetbrains.mps.smodel.structure.BehaviorDescriptor;
import jetbrains.mps.smodel.structure.ConceptRegistry;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class Interface_Behavior {
  private static Class[] PARAMETERS_2496361171403551004 = {SNode.class};
  private static Logger LOG = Logger.getLogger(Interface_Behavior.class);

  public static void init(SNode thisNode) {
  }

  public static boolean virtual_isDescendant_checkLoops_7165541881557222950(SNode thisNode, SNode nodeToCompare, Set<SNode> visited) {
    if (SetSequence.fromSet(visited).contains(thisNode)) {
      LOG.error("circular hierarchy in interface " + INamedConcept_Behavior.call_getFqName_1213877404258(thisNode));
      return false;
    }
    if (Classifier_Behavior.call_isSame_4855996797771684010(thisNode, nodeToCompare)) {
      return true;
    }
    SetSequence.fromSet(visited).addElement(thisNode);
    for (SNode extended : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "extendedInterface", true))) {
      Set<SNode> classifiers = SetSequence.fromSetWithValues(new HashSet<SNode>(), visited);
      if (Classifier_Behavior.call_isDescendant_checkLoops_7165541881557222950(SLinkOperations.getTarget(extended, "classifier", false), nodeToCompare, classifiers)) {
        return true;
      }
    }
    return false;
  }

  public static boolean virtual_checkLoops_3980490811621705349(SNode thisNode, Set<SNode> visited) {
    if (SetSequence.fromSet(visited).contains(thisNode)) {
      LOG.error("circular hierarchy in interface " + INamedConcept_Behavior.call_getFqName_1213877404258(thisNode));
      return false;
    }
    SetSequence.fromSet(visited).addElement(thisNode);
    for (SNode extended : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "extendedInterface", true))) {
      Set<SNode> classifiers = SetSequence.fromSetWithValues(new HashSet<SNode>(), visited);
      if (!(Classifier_Behavior.call_checkLoops_3980490811621705349(SLinkOperations.getTarget(extended, "classifier", false), classifiers))) {
        return false;
      }
    }
    return true;
  }

  public static String virtual_getUnitName_5067982036267369911(SNode thisNode) {
    String fqName = INamedConcept_Behavior.call_getFqName_1213877404258(thisNode);
    if (SNodeOperations.getAncestor(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier", false, false) == null) {
      return fqName;
    }
    int index = fqName.lastIndexOf(".");
    if (index <= 0) {
      return fqName;
    }
    return fqName.substring(0, index) + "$" + fqName.substring(index + 1);
  }

  public static List<SNode> virtual_getExtendedClassifierTypes_2201875424516179426(SNode thisNode) {
    Iterable<SNode> extendedClassifiers = ListSequence.fromList(SLinkOperations.getTargets(thisNode, "extendedInterface", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, "classifier", false) != null);
      }
    });
    if (Sequence.fromIterable(extendedClassifiers).isEmpty()) {
      return ListSequence.fromListAndArray(new ArrayList<SNode>(), Classifier_Behavior.call_getThisType_3305065273710880775(SNodeOperations.getNode("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)", "~Object")));
    } else {
      return ListSequence.fromListWithValues(new ArrayList<SNode>(), extendedClassifiers);
    }
  }

  public static Scope virtual_getMembers_2201875424515824604(SNode thisNode, final SNode kind) {
    // cache section 
    TransactionCache cache = ModelAccess.instance().getTransactionCache("jetbrains.mps.baseLanguage.structure.Interface");
    Scope cached = (Scope) cache.get(MultiTuple.<SNode,SNode>from(thisNode, kind));
    if (cached != null) {
      return cached;
    }
    // end cache section 

    SNode[] implementedInterfaces = ListSequence.fromList(SLinkOperations.getTargets(thisNode, "extendedInterface", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, "classifier", false) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "classifier", false);
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (it != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.Interface");
      }
    }).toGenericArray(SNode.class);

    // todo: generialize this code 
    Scope result = null;
    if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.baseLanguage.structure.FieldDeclaration")) {
      result = FieldDeclarationScope.forInterface(thisNode, implementedInterfaces);
    } else if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration")) {
      result = EnumConstantDeclarationScope.forInterface(thisNode, implementedInterfaces);
    } else if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.baseLanguage.structure.Property")) {
      result = PropertyScope.forInterface(thisNode, implementedInterfaces);
    } else if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
      result = StaticFieldDeclarationScope.forInterface(thisNode, implementedInterfaces);
    } else if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
      result = StaticMethodDeclarationScope.forInterface(thisNode, implementedInterfaces);
    } else if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
      result = InstanceMethodDeclarationScope.forInterface(thisNode, implementedInterfaces);
    }

    // cache section 
    if (result != null) {
      cache.put(MultiTuple.<SNode,SNode>from(thisNode, kind), result);
      return result;
    }

    return Classifier_Behavior.callSuper_getMembers_2201875424515824604(thisNode, "jetbrains.mps.baseLanguage.structure.Interface", kind);
  }

  public static String call_getUnitName_2496361171403551004(SNode thisNode) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (String) descriptor.invoke(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Interface"), "virtual_getUnitName_5067982036267369911", PARAMETERS_2496361171403551004);
  }

  public static String callSuper_getUnitName_2496361171403551004(SNode thisNode, String callerConceptFqName) {
    return (String) BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Interface"), callerConceptFqName, "virtual_getUnitName_5067982036267369911", PARAMETERS_2496361171403551004);
  }
}
