package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.logging.Logger;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.scope.Scope;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.util.Pair;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.scopes.SimpleScope;
import jetbrains.mps.smodel.structure.BehaviorDescriptor;
import jetbrains.mps.smodel.structure.ConceptRegistry;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class Interface_Behavior {
  private static Class[] PARAMETERS_2496361171403551004 = {SNode.class};
  private static Logger LOG = Logger.getLogger(Interface_Behavior.class);

  public static void init(SNode thisNode) {
  }

  public static boolean virtual_isDescendant_checkLoops_7165541881557222950(SNode thisNode, SNode nodeToCompare, Set<SNode> visited) {
    if (SetSequence.fromSet(visited).contains(thisNode)) {
      LOG.error("circular hierarchy in interface " + INamedConcept_Behavior.call_getFqName_1213877404258(thisNode));
      return false;
    }
    if (Classifier_Behavior.call_isSame_4855996797771684010(thisNode, nodeToCompare)) {
      return true;
    }
    SetSequence.fromSet(visited).addElement(thisNode);
    for (SNode extended : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "extendedInterface", true))) {
      Set<SNode> classifiers = SetSequence.fromSetWithValues(new HashSet<SNode>(), visited);
      if (Classifier_Behavior.call_isDescendant_checkLoops_7165541881557222950(SLinkOperations.getTarget(extended, "classifier", false), nodeToCompare, classifiers)) {
        return true;
      }
    }
    return false;
  }

  public static boolean virtual_checkLoops_3980490811621705349(SNode thisNode, Set<SNode> visited) {
    if (SetSequence.fromSet(visited).contains(thisNode)) {
      LOG.error("circular hierarchy in interface " + INamedConcept_Behavior.call_getFqName_1213877404258(thisNode));
      return false;
    }
    SetSequence.fromSet(visited).addElement(thisNode);
    for (SNode extended : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "extendedInterface", true))) {
      Set<SNode> classifiers = SetSequence.fromSetWithValues(new HashSet<SNode>(), visited);
      if (!(Classifier_Behavior.call_checkLoops_3980490811621705349(SLinkOperations.getTarget(extended, "classifier", false), classifiers))) {
        return false;
      }
    }
    return true;
  }

  public static String virtual_getUnitName_5067982036267369911(SNode thisNode) {
    String fqName = INamedConcept_Behavior.call_getFqName_1213877404258(thisNode);
    if (SNodeOperations.getAncestor(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier", false, false) == null) {
      return fqName;
    }
    int index = fqName.lastIndexOf(".");
    if (index <= 0) {
      return fqName;
    }
    return fqName.substring(0, index) + "$" + fqName.substring(index + 1);
  }

  public static Scope virtual_getVisibleMembers_8083692786967356611(SNode thisNode, SNode contextNode, SNode kind) {
    // composite from inherited + super. scopes + other new fields // for now just getMembers 
    List<SNode> extendsClassifiers = new ArrayList<SNode>();
    ListSequence.fromList(extendsClassifiers).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "extendedInterface", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, "classifier", false) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "classifier", false);
      }
    }));

    // todo: duplicating with ClassConcept! 

    // create new with overriding by name 
    // todo: create new scope composer (overriding in case of equal concepts and names) 
    List<SNode> elements = new ArrayList<SNode>();
    Set<Pair<SNode, String>> conceptAndNames = SetSequence.fromSet(new HashSet());
    for (SNode node : Classifier_Behavior.callSuper_getVisibleMembers_8083692786967356611(thisNode, "jetbrains.mps.baseLanguage.structure.Interface", contextNode, kind).getAvailableElements(null)) {
      ListSequence.fromList(elements).addElement(node);
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.core.structure.INamedConcept")) {
        SetSequence.fromSet(conceptAndNames).addElement(new Pair(SNodeOperations.getConceptDeclaration(node), SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.lang.core.structure.INamedConcept"), "name")));
      }
    }

    for (SNode classifier : ListSequence.fromList(extendsClassifiers).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (it != null);
      }
    })) {
      for (SNode node : Classifier_Behavior.call_getVisibleMembers_8083692786967356611(classifier, contextNode, kind).getAvailableElements(null)) {
        if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.core.structure.INamedConcept")) {
          Pair<SNode, String> tmp = new Pair(SNodeOperations.getConceptDeclaration(node), SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.lang.core.structure.INamedConcept"), "name"));
          if (!(SetSequence.fromSet(conceptAndNames).contains(tmp))) {
            SetSequence.fromSet(conceptAndNames).addElement(tmp);
            ListSequence.fromList(elements).addElement(node);
          }
        } else {
          ListSequence.fromList(elements).addElement(node);
        }
      }
    }

    return new SimpleScope(elements);
  }

  public static String call_getUnitName_2496361171403551004(SNode thisNode) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (String) descriptor.invoke(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Interface"), "virtual_getUnitName_5067982036267369911", PARAMETERS_2496361171403551004);
  }

  public static String callSuper_getUnitName_2496361171403551004(SNode thisNode, String callerConceptFqName) {
    return (String) BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Interface"), callerConceptFqName, "virtual_getUnitName_5067982036267369911", PARAMETERS_2496361171403551004);
  }
}
