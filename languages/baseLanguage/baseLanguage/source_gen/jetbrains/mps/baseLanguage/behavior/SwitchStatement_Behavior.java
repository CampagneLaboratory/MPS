package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Set;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.scopes.runtime.ScopeUtils;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.scopes.Scopes;
import java.util.Arrays;
import jetbrains.mps.lang.scopes.runtime.CompositeWithParentScope;

public class SwitchStatement_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void virtual_collectUncaughtMethodThrowables_5412515780383134223(SNode thisNode, Set<SNode> throwables, boolean ignoreMayBeThrowables) {
    if (!(ignoreMayBeThrowables)) {
      Statement_Behavior.collectUncaughtMethodThrowables_5412515780383112967(throwables, SLinkOperations.getTarget(thisNode, "expression", true));
    }
    for (SNode caseNode : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "case", true))) {
      SwitchCase_Behavior.call_collectUncaughtThrowables_4313092516461872703(caseNode, throwables, ignoreMayBeThrowables);
    }
    if ((SLinkOperations.getTarget(thisNode, "defaultBlock", true) != null)) {
      StatementList_Behavior.call_collectUncaughtThrowables_5412515780383134474(SLinkOperations.getTarget(thisNode, "defaultBlock", true), throwables, ignoreMayBeThrowables);
    }
  }

  public static Scope virtual_getScope_3734116213129936182(SNode thisNode, SNode kind, SNode child) {
    SNode childStatement = child;
    while (SNodeOperations.getParent(childStatement) != thisNode) {
      childStatement = SNodeOperations.getParent(childStatement);
    }

    {
      SNode concept_d0b;
      concept_d0b = kind;
      if (SConceptOperations.isSubConceptOf(concept_d0b, "jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration")) {
        {
          if (SLinkOperations.getTarget(thisNode, "expression", true) == childStatement) {
            return ScopeUtils.lazyParentScope(thisNode, kind);
          }

          List<SNode> variables = new ArrayList<SNode>();
          for (SNode caseNode : SLinkOperations.getTargets(thisNode, "case", true)) {
            if (caseNode == childStatement) {
              break;
            }
            ListSequence.fromList(variables).addSequence(ListSequence.fromList(StatementList_Behavior.call_getLocalVariableDeclarations_3986960521977638556(SLinkOperations.getTarget(caseNode, "body", true), null)));
          }
          return Scopes.forVariables(kind, variables, ScopeUtils.lazyParentScope(thisNode, kind));
        }
      }
      if (SConceptOperations.isSubConceptOf(concept_d0b, "jetbrains.mps.baseLanguage.structure.LoopLabel")) {
        {
          List<SNode> parameter = new ArrayList<SNode>();
          if ((SLinkOperations.getTarget(thisNode, "switchLabel", true) != null)) {
            ListSequence.fromList(parameter).addElement(SLinkOperations.getTarget(thisNode, "switchLabel", true));
          }
          SNode[] nodesInScope = new SNode[ListSequence.fromList(SLinkOperations.getTargets(thisNode, "case", true)).count() + 1];
          for (int i = 0; i < ListSequence.fromList(SLinkOperations.getTargets(thisNode, "case", true)).count(); i++) {
            nodesInScope[i] = ListSequence.fromList(SLinkOperations.getTargets(thisNode, "case", true)).getElement(i);
          }
          nodesInScope[nodesInScope.length - 1] = SLinkOperations.getTarget(thisNode, "defaultBlock", true);

          // todo: how to generialize? 
          if (Arrays.asList(nodesInScope).contains(child)) {
            return CompositeWithParentScope.from(parameter, thisNode, kind);
          }
        }
      }
    }
    return null;
  }
}
