package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Set;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.search.ISearchScope;
import jetbrains.mps.smodel.search.SimpleSearchScope;
import jetbrains.mps.scope.CompositeScope;
import jetbrains.mps.baseLanguage.scopes.ScopeProvider;
import jetbrains.mps.baseLanguage.scopes.HierarchyScopeProvider;

public class SwitchStatement_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void virtual_collectUncaughtMethodThrowables_5412515780383134223(SNode thisNode, Set<SNode> throwables, boolean ignoreMayBeThrowables) {
    if (!(ignoreMayBeThrowables)) {
      Statement_Behavior.collectUncaughtMethodThrowables_5412515780383112967(throwables, SLinkOperations.getTarget(thisNode, "expression", true));
    }
    for (SNode caseNode : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "case", true))) {
      SwitchCase_Behavior.call_collectUncaughtThrowables_4313092516461872703(caseNode, throwables, ignoreMayBeThrowables);
    }
    if ((SLinkOperations.getTarget(thisNode, "defaultBlock", true) != null)) {
      StatementList_Behavior.call_collectUncaughtThrowables_5412515780383134474(SLinkOperations.getTarget(thisNode, "defaultBlock", true), throwables, ignoreMayBeThrowables);
    }
  }

  public static Scope virtual_getScope_3734116213129936182(SNode thisNode, SNode kind, SNode child) {
    SNode childStatement = child;
    while (SNodeOperations.getParent(childStatement) != thisNode) {
      childStatement = SNodeOperations.getParent(childStatement);
    }

    if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")) {
      Scope nextScope = Scope.getScope(SNodeOperations.getParent(thisNode), child, kind);
      if (SLinkOperations.getTarget(thisNode, "expression", true) == childStatement) {
        return nextScope;
      }

      List<SNode> variables = new ArrayList<SNode>();
      for (SNode caseNode : SLinkOperations.getTargets(thisNode, "case", true)) {
        if (caseNode == childStatement) {
          break;
        }
        ListSequence.fromList(variables).addSequence(ListSequence.fromList(StatementList_Behavior.call_getLocalVariableDeclarations_3986960521977638556(SLinkOperations.getTarget(caseNode, "body", true), null)));
      }
      Scope currentScope = new ISearchScope.Adapter(new SimpleSearchScope(variables));
      return (nextScope == null ?
        currentScope :
        new CompositeScope(currentScope, nextScope)
      );
    }

    return SwitchStatement_Behavior.call_getInnerScopeProvider_8967654016644457798(thisNode).getScope(thisNode, kind, child);
    // <node> 
  }

  public static ScopeProvider call_getInnerScopeProvider_8967654016644457798(SNode thisNode) {
    List<SNode> parameter = new ArrayList<SNode>();
    if ((SLinkOperations.getTarget(thisNode, "switchLabel", true) != null)) {
      ListSequence.fromList(parameter).addElement(SLinkOperations.getTarget(thisNode, "switchLabel", true));
    }
    SNode[] nodesInScope = new SNode[ListSequence.fromList(SLinkOperations.getTargets(thisNode, "case", true)).count() + 1];
    for (int i = 0; i < ListSequence.fromList(SLinkOperations.getTargets(thisNode, "case", true)).count(); i++) {
      nodesInScope[i] = ListSequence.fromList(SLinkOperations.getTargets(thisNode, "case", true)).getElement(i);
    }
    nodesInScope[nodesInScope.length - 1] = SLinkOperations.getTarget(thisNode, "defaultBlock", true);
    return new HierarchyScopeProvider(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.LoopLabel"), parameter, nodesInScope);
  }
}
