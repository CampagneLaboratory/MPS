package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.adapter.SConceptNodeAdapter;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.scope.EmptyScope;
import jetbrains.mps.lang.scopes.runtime.ScopeUtils;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class ConceptFunction_Behavior {
  public static void init(SNode thisNode) {
  }

  public static boolean virtual_usesParameterObjectFor_1213877374432(SNode thisNode, SNode parameter) {
    return BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, new SConceptNodeAdapter(NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(thisNode))), "virtual_usesParameterObject_1262430001741497984", new Object[]{});
  }

  public static SNode virtual_getExpectedReturnType_1213877374441(SNode thisNode) {
    return ListSequence.fromList(SLinkOperations.getConceptLinkTargets(thisNode, "conceptFunctionReturnType")).first();
  }

  public static List<SNode> virtual_getThrowableTypes_6204026822016975623(SNode thisNode) {
    return SLinkOperations.getConceptLinkTargets(thisNode, "conceptFunctionThrowsType");
  }

  public static SNode virtual_getExpectedRetType_1239354342632(SNode thisNode) {
    return ConceptFunction_Behavior.call_getExpectedReturnType_1213877374441(thisNode);
  }

  public static SNode virtual_getBody_1239354440022(SNode thisNode) {
    return SLinkOperations.getTarget(thisNode, "body", true);
  }

  public static List<SNode> virtual_getParameters_1213877374450(SNode thisNode) {
    if (thisNode == null) {
      return ListSequence.fromList(new ArrayList<SNode>());
    }
    List<SNode> result = new ArrayList<SNode>();
    ListSequence.fromList(result).addSequence(ListSequence.fromList(SLinkOperations.getConceptLinkTargets(thisNode, "conceptFunctionParameter")));
    ListSequence.fromList(result).addSequence(ListSequence.fromList(SLinkOperations.getConceptLinkTargets(thisNode, "applicableConceptFunctionParameter")));
    return (List<SNode>) result;
  }

  public static boolean call_isReturnOnly_3745452943050787634(SNode thisNode) {
    if (!(StatementList_Behavior.call_isOneLiner_1237538811451(SLinkOperations.getTarget(thisNode, "body", true)))) {
      return false;
    }
    SNode stmt = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "body", true), "statement", true)).first();
    return SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.baseLanguage.structure.ExpressionStatement") || SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.baseLanguage.structure.ReturnStatement");
  }

  public static String virtual_getName_1216468837268(SNode thisNode) {
    return SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(thisNode), "conceptAlias");
  }

  public static String call_getHeader_2866018809101862250(SNode thisNode) {
    StringBuilder result = new StringBuilder();
    // by default 'alias' is not shown. 
    // if you need presentation like alias(...)->.. 
    // then use the ConceptFunctionAliased_Component 
    if (BehaviorReflection.invokeVirtualStatic(Boolean.TYPE, new SConceptNodeAdapter(NameUtil.nodeFQName(SNodeOperations.getConceptDeclaration(thisNode))), "virtual_showName_1262430001741498082", new Object[]{})) {
      result.append(ConceptFunction_Behavior.call_getName_1216468837268(thisNode));
    }
    return ConceptFunction_Behavior.call_appendHeader_2866018809101869378(thisNode, result);
  }

  public static String call_getHeaderForAliasedEditor_2866018809101869089(SNode thisNode) {
    StringBuilder result = new StringBuilder();
    return ConceptFunction_Behavior.call_appendHeader_2866018809101869378(thisNode, result);
  }

  public static String call_appendHeader_2866018809101869378(SNode thisNode, StringBuilder result) {
    result.append("(");
    List<SNode> parameters = ConceptFunction_Behavior.call_getParameters_1213877374450(thisNode);
    boolean isFirst = true;
    for (SNode cfp : parameters) {
      if (!(isFirst)) {
        result.append(", ");
      }
      isFirst = false;
      result.append(SPropertyOperations.getString(cfp, "conceptAlias"));
    }
    result.append(")->");
    SNode expectedReturnType = ConceptFunction_Behavior.call_getExpectedReturnType_1213877374441(thisNode);
    if (expectedReturnType == null) {
      result.append("void");
    } else {
      result.append(BehaviorReflection.invokeVirtual(String.class, expectedReturnType, "virtual_getPresentation_1213877396640", new Object[]{}));
    }
    if (ListSequence.fromList(SLinkOperations.getConceptLinkTargets(thisNode, "conceptFunctionThrowsType")).isNotEmpty()) {
      result.append(" throws ");
      boolean isFirstThrowable = true;
      for (SNode throwableType : SLinkOperations.getConceptLinkTargets(thisNode, "conceptFunctionThrowsType")) {
        if (!(isFirstThrowable)) {
          result.append(", ");
        }
        isFirstThrowable = false;
        result.append(BehaviorReflection.invokeVirtual(String.class, throwableType, "virtual_getPresentation_1213877396640", new Object[]{}));
      }
    }
    return result.toString();
  }

  public static Scope virtual_getScope_3734116213129936182(SNode thisNode, SNode kind, SNode child) {
    // todo: rewrite using filtering scope 
    {
      SNode concept_b0l;
      concept_b0l = kind;
      if (SConceptOperations.isSubConceptOf(concept_b0l, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")) {
        return new EmptyScope();
      }
      if (SConceptOperations.isSubConceptOf(concept_b0l, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration")) {
        return new EmptyScope();
      }
    }
    return ScopeUtils.lazyParentScope(thisNode, kind);
  }

  public static boolean virtual_usesParameterObject_1262430001741497984(SConcept thisConcept) {
    return false;
  }

  public static boolean virtual_showName_1262430001741498082(SConcept thisConcept) {
    return false;
  }

  @Deprecated
  public static boolean call_usesParameterObjectFor_1213877374432(SNode thisNode, SNode parameter) {
    return BehaviorReflection.invokeVirtual(Boolean.TYPE, thisNode, "virtual_usesParameterObjectFor_1213877374432", new Object[]{parameter});
  }

  @Deprecated
  public static SNode call_getExpectedReturnType_1213877374441(SNode thisNode) {
    return BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), thisNode, "virtual_getExpectedReturnType_1213877374441", new Object[]{});
  }

  @Deprecated
  public static List<SNode> call_getParameters_1213877374450(SNode thisNode) {
    return BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), thisNode, "virtual_getParameters_1213877374450", new Object[]{});
  }

  @Deprecated
  public static String call_getName_1216468837268(SNode thisNode) {
    return BehaviorReflection.invokeVirtual(String.class, thisNode, "virtual_getName_1216468837268", new Object[]{});
  }

  @Deprecated
  public static boolean callSuper_usesParameterObjectFor_1213877374432(SNode thisNode, String callerConceptFqName, SNode parameter) {
    return BehaviorManager.getInstance().invokeSuper(Boolean.TYPE, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.ConceptFunction"), callerConceptFqName, "virtual_usesParameterObjectFor_1213877374432", new Class[]{SNode.class, SNode.class}, new Object[]{parameter});
  }

  @Deprecated
  public static SNode callSuper_getExpectedReturnType_1213877374441(SNode thisNode, String callerConceptFqName) {
    return BehaviorManager.getInstance().invokeSuper((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.ConceptFunction"), callerConceptFqName, "virtual_getExpectedReturnType_1213877374441", new Class[]{SNode.class}, new Object[]{});
  }

  @Deprecated
  public static List<SNode> callSuper_getParameters_1213877374450(SNode thisNode, String callerConceptFqName) {
    return BehaviorManager.getInstance().invokeSuper((Class<List<SNode>>) ((Class) Object.class), SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.ConceptFunction"), callerConceptFqName, "virtual_getParameters_1213877374450", new Class[]{SNode.class}, new Object[]{});
  }

  @Deprecated
  public static String callSuper_getName_1216468837268(SNode thisNode, String callerConceptFqName) {
    return BehaviorManager.getInstance().invokeSuper(String.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.ConceptFunction"), callerConceptFqName, "virtual_getName_1216468837268", new Class[]{SNode.class}, new Object[]{});
  }
}
