package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Set;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import javax.swing.Icon;
import java.util.ArrayList;
import jetbrains.mps.lang.core.behavior.BaseConcept_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.plugin.IconResourceBundle_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.search.ISearchScope;
import jetbrains.mps.baseLanguage.search.ClassifierVisibleMembersScope;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.baseLanguage.scopes.MemberScopes;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.scope.EmptyScope;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.LanguageID;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.scopes.runtime.ScopeUtils;
import jetbrains.mps.lang.scopes.runtime.CompositeWithParentScope;
import jetbrains.mps.baseLanguage.scopes.Scopes;
import jetbrains.mps.scope.CompositeScope;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.scopes.runtime.NamedElementsScope;
import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.baseLanguage.search.IClassifiersSearchScope;
import jetbrains.mps.lang.pattern.GeneratedMatchingPattern;
import jetbrains.mps.lang.pattern.IMatchingPattern;

public class Classifier_Behavior {
  private static Class[] PARAMETERS_5039675756633081868 = {SNode.class};
  private static Class[] PARAMETERS_8083692786967356611 = {SNode.class, SNode.class, SNode.class};
  private static Class[] PARAMETERS_2201875424515824604 = {SNode.class, SNode.class};
  private static Class[] PARAMETERS_2201875424516179426 = {SNode.class};
  private static Class[] PARAMETERS_1214840444586 = {SNode.class};
  private static Class[] PARAMETERS_8540045600162184125 = {SNode.class};
  private static Class[] PARAMETERS_3980490811621705344 = {SNode.class};
  private static Class[] PARAMETERS_7165541881557222913 = {SNode.class, SNode.class};
  private static Class[] PARAMETERS_7165541881557222950 = {SNode.class, SNode.class, Set.class};
  private static Class[] PARAMETERS_3980490811621705349 = {SNode.class, Set.class};
  private static Class[] PARAMETERS_1906502351318572840 = {SNode.class};
  private static Class[] PARAMETERS_5017341185733869650 = {SNode.class};
  private static Class[] PARAMETERS_3305065273710880775 = {SNode.class};

  public static void init(SNode thisNode) {
    SLinkOperations.setNewChild(thisNode, "visibility", "jetbrains.mps.baseLanguage.structure.PublicVisibility");
  }

  public static List<Icon> virtual_getMarkIcons_3923831204883340393(SNode thisNode) {
    List<Icon> markIcons = new ArrayList<Icon>(BaseConcept_Behavior.callSuper_getMarkIcons_3923831204883340393(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"));
    if ((SNodeOperations.getParent(thisNode) != null) && Classifier_Behavior.call_isStatic_521412098689998668(thisNode)) {
      markIcons.add(IconResourceBundle_Behavior.getInstance().getResource("STATICMARK"));
    }
    return markIcons;
  }

  public static List<SNode> call_getVisibleMembers_1213877306257(SNode thisNode, SNode contextNode, int constraint) {
    SNode ct = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType", null);
    SLinkOperations.setTarget(ct, "classifier", thisNode, false);
    ISearchScope ss = new ClassifierVisibleMembersScope(ct, contextNode, constraint);
    return (List<SNode>) ss.getNodes();
  }

  public static Scope virtual_getVisibleMembers_8083692786967356611(SNode thisNode, SNode contextNode, SNode kind) {
    return MemberScopes.visibleClassifierMembers(thisNode, kind, contextNode);
  }

  public static String virtual_getFqName_1213877404258(SNode thisNode) {
    SNode parentClassifier = SNodeOperations.getAncestor(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
    if (parentClassifier != null) {
      return INamedConcept_Behavior.call_getFqName_1213877404258(parentClassifier) + "." + SPropertyOperations.getString(thisNode, "name");
    }
    return INamedConcept_Behavior.callSuper_getFqName_1213877404258(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier");
  }

  public static List<SNode> virtual_getMembers_1213877531970(SNode thisNode) {
    List<SNode> members = new ArrayList<SNode>();
    ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "staticField", true)));
    ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "method", true)));
    return members;
  }

  public static Scope virtual_getMembers_2201875424515824604(SNode thisNode, final SNode kind) {
    // returns all accessible classifier members in classifier 
    // todo: ? 
    return new EmptyScope();
  }

  public static List<SNode> virtual_getExtendedClassifierTypes_2201875424516179426(final SNode thisNode) {
    // todo: maybe use typesystem instead of this method??? 
    // <node> 
    // <node> 
    // <node> 

    return new ArrayList<SNode>();
  }

  public static Set<SNode> call_getAllExtendedClassifiers_2907982978864985482(SNode thisNode) {
    // should be cached // based on extended classifiers 
    // without cyclic dependencies checking 
    Set<SNode> result = SetSequence.fromSet(new HashSet<SNode>());
    Classifier_Behavior.call_getAllExtendedClassifiers_2907982978864985509(thisNode, result);
    return result;
  }

  public static void call_getAllExtendedClassifiers_2907982978864985509(SNode thisNode, Set<SNode> nodes) {
    if (SetSequence.fromSet(nodes).contains(thisNode)) {
      return;
    }
    SetSequence.fromSet(nodes).addElement(thisNode);
    for (SNode extended : Classifier_Behavior.call_getExtendedClassifierTypes_2201875424516179426(thisNode)) {
      Classifier_Behavior.call_getAllExtendedClassifiers_2907982978864985509(SLinkOperations.getTarget(extended, "classifier", false), nodes);
    }
  }

  public static String virtual_getPresentation_1213877396640(SNode thisNode) {
    return SPropertyOperations.getString(thisNode, "nestedName");
  }

  public static boolean virtual_hasStaticMemebers_1214840444586(SNode thisNode) {
    return ListSequence.fromList(SLinkOperations.getTargets(thisNode, "staticField", true)).count() > 0;
  }

  public static String virtual_getNestedName_8540045600162184125(SNode thisNode) {
    return Classifier_Behavior.call_getNestedNameInContext_8540045600162183880(thisNode, null);
  }

  public static String call_getNestedNameInContext_8540045600162183880(SNode thisNode, SNode context) {
    List<SNode> containers = ListSequence.fromList(SNodeOperations.getAncestors(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier", true)).reversedList();
    List<SNode> contextContainers = SNodeOperations.getAncestors(context, "jetbrains.mps.baseLanguage.structure.Classifier", true);

    List<SNode> ancestors = SNodeOperations.getAncestors(context, null, true);
    if (ListSequence.fromList(ancestors).contains(SNodeOperations.getParent(thisNode)) || ListSequence.fromList(ancestors).contains(thisNode)) {
      return SPropertyOperations.getString(thisNode, "name");
    }

    int index = -1;
    for (SNode ctxCls : contextContainers) {
      index = ListSequence.fromList(containers).indexOf(ctxCls);
      if (index != -1) {
        break;
      }
    }
    if (index != -1) {
      List<SNode> newContainers = new ArrayList<SNode>();
      for (int i = index + 1; i < ListSequence.fromList(containers).count(); i++) {
        ListSequence.fromList(newContainers).addElement(ListSequence.fromList(containers).getElement(i));
      }
      containers = newContainers;
    }

    if ((int) ListSequence.fromList(containers).count() == 1) {
      return SPropertyOperations.getString(thisNode, "name");
    }

    StringBuilder result = new StringBuilder();
    boolean first = true;
    for (SNode c : containers) {
      if (first) {
        first = false;
      } else {
        result.append(".");
      }
      result.append(SPropertyOperations.getString(c, "name"));
    }
    return result.toString();
  }

  public static boolean call_isStatic_521412098689998668(SNode thisNode) {
    // todo: make virtual and right 
    if (SNodeOperations.isInstanceOf(thisNode, "jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
      return false;
    }
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(thisNode), "jetbrains.mps.baseLanguage.structure.Interface")) {
      return true;
    }
    // ignore the value of nonStatic for top-level classes 
    return SNodeOperations.getParent(thisNode) == null || !(SPropertyOperations.getBoolean(thisNode, "nonStatic"));
  }

  public static boolean call_isInner_521412098689998677(SNode thisNode) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(thisNode), "jetbrains.mps.baseLanguage.structure.Classifier");
  }

  public static boolean virtual_checkLoops_3980490811621705344(SNode thisNode) {
    return Classifier_Behavior.call_checkLoops_3980490811621705349(thisNode, SetSequence.fromSet(new HashSet<SNode>()));
  }

  public static boolean virtual_isDescendant_7165541881557222913(SNode thisNode, SNode nodeToCompare) {
    return Classifier_Behavior.call_isDescendant_checkLoops_7165541881557222950(thisNode, nodeToCompare, SetSequence.fromSet(new HashSet<SNode>()));
  }

  public static boolean virtual_isDescendant_checkLoops_7165541881557222950(SNode thisNode, SNode nodeToCompare, Set<SNode> visited) {
    return false;
  }

  public static boolean call_isSame_4855996797771684010(SNode thisNode, SNode that) {
    if (SNodeOperations.getConceptDeclaration(thisNode) != SNodeOperations.getConceptDeclaration(that)) {
      return false;
    }
    // ignore model defferences for java_stub models 
    String javastub = SModelStereotype.getStubStereotypeForId(LanguageID.JAVA);
    if (javastub.equals(SNodeOperations.getModel(thisNode).getStereotype()) && javastub.equals(SNodeOperations.getModel(that).getStereotype())) {
      return INamedConcept_Behavior.call_getFqName_1213877404258(thisNode).equals(INamedConcept_Behavior.call_getFqName_1213877404258(that));
    }
    return thisNode == that;
  }

  public static boolean virtual_checkLoops_3980490811621705349(SNode thisNode, Set<SNode> visited) {
    return false;
  }

  public static boolean call_canInstantiateIn_6935810692634457550(SNode thisNode, SNode context) {
    List<SNode> contextClassifiers = Classifier_Behavior.getNonStaticContextClassifiers_6775591514230482802(context);
    List<SNode> required = Classifier_Behavior.getNonStaticContextClassifiers_6775591514230482802(thisNode);
    ListSequence.fromList(required).removeElement(thisNode);
    for (final SNode req : required) {
      if (!(ListSequence.fromList(contextClassifiers).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode cl) {
          return Classifier_Behavior.call_isDescendant_7165541881557222913(cl, req);
        }
      }))) {
        return false;
      }
    }
    return true;
  }

  public static List<SNode> virtual_getOwnMethods_1906502351318572840(SNode thisNode) {
    List<SNode> result = new ArrayList<SNode>();
    ListSequence.fromList(result).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "method", true)));
    return result;
  }

  public static Icon virtual_getAdditionalIcon_5017341185733863694(SNode thisNode) {
    return IVisible_Behavior.call_getVisibilityIcon_5017341185733869581(thisNode);
  }

  public static SNode virtual_getThisType_3305065273710880775(SNode thisNode) {
    SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType", null);
    SLinkOperations.setTarget(result, "classifier", thisNode, false);
    for (SNode decl : SLinkOperations.getTargets(thisNode, "typeVariableDeclaration", true)) {
      SNode reference = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.TypeVariableReference", null);
      SLinkOperations.setTarget(reference, "typeVariableDeclaration", decl, false);
      ListSequence.fromList(SLinkOperations.getTargets(result, "parameter", true)).addElement(reference);
    }
    return result;
  }

  public static SNode call_getWithResolvedTypevars_3305065273710852527(SNode thisNode, SNode t, SNode ancestor, SNode method, SNode baseMethod) {
    SNode coercedType = TypeChecker.getInstance().getRuntimeSupport().coerce_(Classifier_Behavior.call_getThisType_3305065273710880775(thisNode), new Classifier_Behavior.Pattern_qw8l7c_a1a0a0a52(ancestor), true);
    if (SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) {
      return Classifier_Behavior.call_getResolvedVar_3305065273710881245(thisNode, SNodeOperations.cast(t, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), ancestor, coercedType, method, baseMethod);
    } else {
      SNode result = SNodeOperations.copyNode(t);
      for (SNode reference : SNodeOperations.getDescendants(result, "jetbrains.mps.baseLanguage.structure.TypeVariableReference", false, new String[]{})) {
        SNode resolvedVar = Classifier_Behavior.call_getResolvedVar_3305065273710881245(thisNode, reference, ancestor, coercedType, method, baseMethod);
        if (reference != resolvedVar) {
          SNodeOperations.replaceWithAnother(reference, resolvedVar);
        }
      }
      return result;
    }
  }

  public static SNode call_getResolvedVar_3305065273710881245(SNode thisNode, SNode reference, SNode ancestor, SNode coercedType, SNode method, SNode baseMethod) {
    SNode decl = SLinkOperations.getTarget(reference, "typeVariableDeclaration", false);
    int i = ListSequence.fromList(SLinkOperations.getTargets(ancestor, "typeVariableDeclaration", true)).indexOf(decl);
    SNode resolvedVar;
    if (i < 0) {
      SNode var = Classifier_Behavior.call_getResolvedMethodVar_836080658851951996(thisNode, reference, method, baseMethod);
      if (var != null) {
        return var;
      }
      resolvedVar = reference;
    } else if (i < ListSequence.fromList(SLinkOperations.getTargets(coercedType, "parameter", true)).count()) {
      resolvedVar = SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getTargets(coercedType, "parameter", true)).getElement(i));
    } else {
      resolvedVar = TypeVariableDeclaration_Behavior.call_getConcreteUpperBound_4346214032091509920(decl);
    }
    return resolvedVar;
  }

  public static SNode call_getResolvedMethodVar_836080658851951996(SNode thisNode, SNode reference, SNode method, SNode baseMethod) {
    int i = ListSequence.fromList(SLinkOperations.getTargets(baseMethod, "typeVariableDeclaration", true)).indexOf(SLinkOperations.getTarget(reference, "typeVariableDeclaration", false));
    if (i >= 0 && i <= ListSequence.fromList(SLinkOperations.getTargets(method, "typeVariableDeclaration", true)).count()) {
      SNode varRef = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.TypeVariableReference", null);
      SLinkOperations.setTarget(varRef, "typeVariableDeclaration", ListSequence.fromList(SLinkOperations.getTargets(method, "typeVariableDeclaration", true)).getElement(i), false);
      return varRef;
    }
    return null;
  }

  public static Scope virtual_getScope_3734116213129936182(SNode thisNode, final SNode kind, SNode child) {
    while (SNodeOperations.getParent(child) != thisNode && child != null) {
      child = SNodeOperations.getParent(child);
    }
    if (child == null) {
      return ScopeUtils.lazyParentScope(thisNode, kind);
    }
    boolean isStaticContext = (SNodeOperations.isInstanceOf(child, "jetbrains.mps.baseLanguage.structure.ClassifierMember") && ClassifierMember_Behavior.call_isStatic_8986964027630462944(SNodeOperations.cast(child, "jetbrains.mps.baseLanguage.structure.ClassifierMember"))) || (SNodeOperations.isInstanceOf(child, "jetbrains.mps.baseLanguage.structure.Classifier") && Classifier_Behavior.call_isStatic_521412098689998668(SNodeOperations.cast(child, "jetbrains.mps.baseLanguage.structure.Classifier"))) || SNodeOperations.isInstanceOf(child, "jetbrains.mps.baseLanguage.structure.StaticInitializer");

    // todo: remove this logic from Classifier 
    {
      SNode concept_f0bb;
      concept_f0bb = kind;
      if (SConceptOperations.isSubConceptOf(concept_f0bb, "jetbrains.mps.baseLanguage.structure.ContextClassifierKind")) {
        return CompositeWithParentScope.from(thisNode, thisNode, kind);
      }
      if (SConceptOperations.isSubConceptOf(concept_f0bb, "jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration")) {
        // todo: Classifier should be ClassifierMember! 
        if (!(isStaticContext)) {
          return Scopes.forTypeVariables(SLinkOperations.getTargets(thisNode, "typeVariableDeclaration", true), ScopeUtils.lazyParentScope(thisNode, kind));
        } else {
          return ScopeUtils.lazyParentScope(thisNode, kind);
        }
      }
      if (SConceptOperations.isSubConceptOf(concept_f0bb, "jetbrains.mps.baseLanguage.structure.IVariableDeclaration")) {
        {
          // add 1) instance fields 2) static fields 
          Scope scope = Scopes.forVariables(kind, Classifier_Behavior.call_getMembers_2201875424515824604(thisNode, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")), ScopeUtils.lazyParentScope(thisNode, kind));
          if (!(isStaticContext)) {
            return Scopes.forVariables(kind, Classifier_Behavior.call_getMembers_2201875424515824604(thisNode, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldDeclaration")), scope);
          } else {
            return scope;
          }
        }
      }
      if (SConceptOperations.isSubConceptOf(concept_f0bb, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
        // add instance fields + static fields 
        if (!(isStaticContext)) {
          Scope scope = CompositeScope.createComposite(Classifier_Behavior.call_getMembers_2201875424515824604(thisNode, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")), Classifier_Behavior.call_getMembers_2201875424515824604(thisNode, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")));
          return Scopes.forMethods(kind, scope, ScopeUtils.lazyParentScope(thisNode, kind));
        } else {
          return Scopes.forMethods(kind, Classifier_Behavior.call_getMembers_2201875424515824604(thisNode, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")), ScopeUtils.lazyParentScope(thisNode, kind));
        }
      }
      if (SConceptOperations.isSubConceptOf(concept_f0bb, "jetbrains.mps.baseLanguage.structure.ClassifierMember")) {
        {
          // in other cases - hide everything by name... 
          // todo: change! 
          Scope addition = null;
          if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.baseLanguage.structure.StaticKind")) {
            Iterable<SNode> members = ListSequence.fromList(SNodeOperations.getChildren(thisNode)).where(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.core.structure.INamedConcept") && SNodeOperations.isInstanceOf(it, NameUtil.nodeFQName(kind));
              }
            }).select(new ISelector<SNode, SNode>() {
              public SNode select(SNode it) {
                return SNodeOperations.cast(it, "jetbrains.mps.lang.core.structure.INamedConcept");
              }
            });
            addition = new NamedElementsScope(members);
          } else {
            if (!(isStaticContext)) {
              addition = Classifier_Behavior.call_getVisibleMembers_8083692786967356611(thisNode, child, kind);
            }
          }
          return (addition != null ?
            Scopes.defaultWithNameHiding(kind, addition, ScopeUtils.lazyParentScope(thisNode, kind)) :
            ScopeUtils.lazyParentScope(thisNode, kind)
          );
        }
      }
    }

    return ScopeUtils.lazyParentScope(thisNode, kind);
  }

  public static List<Icon> call_getMarkIcons_5039675756633081868(SNode thisNode) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (List<Icon>) descriptor.invoke(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), "virtual_getMarkIcons_3923831204883340393", PARAMETERS_5039675756633081868);
  }

  public static Scope call_getVisibleMembers_8083692786967356611(SNode thisNode, SNode contextNode, SNode kind) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (Scope) descriptor.invoke(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), "virtual_getVisibleMembers_8083692786967356611", PARAMETERS_8083692786967356611, contextNode, kind);
  }

  public static Scope call_getMembers_2201875424515824604(SNode thisNode, final SNode kind) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (Scope) descriptor.invoke(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), "virtual_getMembers_2201875424515824604", PARAMETERS_2201875424515824604, kind);
  }

  public static List<SNode> call_getExtendedClassifierTypes_2201875424516179426(SNode thisNode) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (List<SNode>) descriptor.invoke(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), "virtual_getExtendedClassifierTypes_2201875424516179426", PARAMETERS_2201875424516179426);
  }

  public static boolean call_hasStaticMemebers_1214840444586(SNode thisNode) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (Boolean) descriptor.invoke(Boolean.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), "virtual_hasStaticMemebers_1214840444586", PARAMETERS_1214840444586);
  }

  public static String call_getNestedName_8540045600162184125(SNode thisNode) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (String) descriptor.invoke(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), "virtual_getNestedName_8540045600162184125", PARAMETERS_8540045600162184125);
  }

  public static boolean call_checkLoops_3980490811621705344(SNode thisNode) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (Boolean) descriptor.invoke(Boolean.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), "virtual_checkLoops_3980490811621705344", PARAMETERS_3980490811621705344);
  }

  public static boolean call_isDescendant_7165541881557222913(SNode thisNode, SNode nodeToCompare) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (Boolean) descriptor.invoke(Boolean.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), "virtual_isDescendant_7165541881557222913", PARAMETERS_7165541881557222913, nodeToCompare);
  }

  public static boolean call_isDescendant_checkLoops_7165541881557222950(SNode thisNode, SNode nodeToCompare, Set<SNode> visited) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (Boolean) descriptor.invoke(Boolean.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), "virtual_isDescendant_checkLoops_7165541881557222950", PARAMETERS_7165541881557222950, nodeToCompare, visited);
  }

  public static boolean call_checkLoops_3980490811621705349(SNode thisNode, Set<SNode> visited) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (Boolean) descriptor.invoke(Boolean.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), "virtual_checkLoops_3980490811621705349", PARAMETERS_3980490811621705349, visited);
  }

  public static List<SNode> call_getOwnMethods_1906502351318572840(SNode thisNode) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (List<SNode>) descriptor.invoke(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), "virtual_getOwnMethods_1906502351318572840", PARAMETERS_1906502351318572840);
  }

  public static Icon call_getAdditionalIcon_5017341185733869650(SNode thisNode) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (Icon) descriptor.invoke(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), "virtual_getAdditionalIcon_5017341185733863694", PARAMETERS_5017341185733869650);
  }

  public static SNode call_getThisType_3305065273710880775(SNode thisNode) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (SNode) descriptor.invoke(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), "virtual_getThisType_3305065273710880775", PARAMETERS_3305065273710880775);
  }

  public static List<Icon> callSuper_getMarkIcons_5039675756633081868(SNode thisNode, String callerConceptFqName) {
    return (List<Icon>) BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), callerConceptFqName, "virtual_getMarkIcons_3923831204883340393", PARAMETERS_5039675756633081868);
  }

  public static Scope callSuper_getVisibleMembers_8083692786967356611(SNode thisNode, String callerConceptFqName, SNode contextNode, SNode kind) {
    return (Scope) BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), callerConceptFqName, "virtual_getVisibleMembers_8083692786967356611", PARAMETERS_8083692786967356611, contextNode, kind);
  }

  public static Scope callSuper_getMembers_2201875424515824604(SNode thisNode, String callerConceptFqName, final SNode kind) {
    return (Scope) BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), callerConceptFqName, "virtual_getMembers_2201875424515824604", PARAMETERS_2201875424515824604, kind);
  }

  public static List<SNode> callSuper_getExtendedClassifierTypes_2201875424516179426(SNode thisNode, String callerConceptFqName) {
    return (List<SNode>) BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), callerConceptFqName, "virtual_getExtendedClassifierTypes_2201875424516179426", PARAMETERS_2201875424516179426);
  }

  public static boolean callSuper_hasStaticMemebers_1214840444586(SNode thisNode, String callerConceptFqName) {
    return (Boolean) BehaviorManager.getInstance().invokeSuper(Boolean.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), callerConceptFqName, "virtual_hasStaticMemebers_1214840444586", PARAMETERS_1214840444586);
  }

  public static String callSuper_getNestedName_8540045600162184125(SNode thisNode, String callerConceptFqName) {
    return (String) BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), callerConceptFqName, "virtual_getNestedName_8540045600162184125", PARAMETERS_8540045600162184125);
  }

  public static boolean callSuper_checkLoops_3980490811621705344(SNode thisNode, String callerConceptFqName) {
    return (Boolean) BehaviorManager.getInstance().invokeSuper(Boolean.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), callerConceptFqName, "virtual_checkLoops_3980490811621705344", PARAMETERS_3980490811621705344);
  }

  public static boolean callSuper_isDescendant_7165541881557222913(SNode thisNode, String callerConceptFqName, SNode nodeToCompare) {
    return (Boolean) BehaviorManager.getInstance().invokeSuper(Boolean.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), callerConceptFqName, "virtual_isDescendant_7165541881557222913", PARAMETERS_7165541881557222913, nodeToCompare);
  }

  public static boolean callSuper_isDescendant_checkLoops_7165541881557222950(SNode thisNode, String callerConceptFqName, SNode nodeToCompare, Set<SNode> visited) {
    return (Boolean) BehaviorManager.getInstance().invokeSuper(Boolean.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), callerConceptFqName, "virtual_isDescendant_checkLoops_7165541881557222950", PARAMETERS_7165541881557222950, nodeToCompare, visited);
  }

  public static boolean callSuper_checkLoops_3980490811621705349(SNode thisNode, String callerConceptFqName, Set<SNode> visited) {
    return (Boolean) BehaviorManager.getInstance().invokeSuper(Boolean.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), callerConceptFqName, "virtual_checkLoops_3980490811621705349", PARAMETERS_3980490811621705349, visited);
  }

  public static List<SNode> callSuper_getOwnMethods_1906502351318572840(SNode thisNode, String callerConceptFqName) {
    return (List<SNode>) BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), callerConceptFqName, "virtual_getOwnMethods_1906502351318572840", PARAMETERS_1906502351318572840);
  }

  public static Icon callSuper_getAdditionalIcon_5017341185733869650(SNode thisNode, String callerConceptFqName) {
    return (Icon) BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), callerConceptFqName, "virtual_getAdditionalIcon_5017341185733863694", PARAMETERS_5017341185733869650);
  }

  public static SNode callSuper_getThisType_3305065273710880775(SNode thisNode, String callerConceptFqName) {
    return (SNode) BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Classifier"), callerConceptFqName, "virtual_getThisType_3305065273710880775", PARAMETERS_3305065273710880775);
  }

  public static List<SNode> getNonStaticContextClassifiers_6775591514230482802(SNode context) {
    List<SNode> result = new ArrayList<SNode>();
    for (SNode current : ListSequence.fromList(SNodeOperations.getAncestors(context, "jetbrains.mps.baseLanguage.structure.Classifier", true))) {
      if (SNodeOperations.isInstanceOf(current, "jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
        SNode classifier = SLinkOperations.getTarget(SNodeOperations.cast(current, "jetbrains.mps.baseLanguage.structure.AnonymousClass"), "classifier", false);
        if ((classifier == null)) {
          continue;
        }
        ListSequence.fromList(result).addElement(classifier);
      } else {
        ListSequence.fromList(result).addElement(current);
        if (Classifier_Behavior.call_isStatic_521412098689998668(current)) {
          // according to Java rules static inner classifiers can be only on the second level so we can 
          // safely break here 
          break;
        }
      }
    }
    return result;
  }

  public static List<SNode> getAccessibleMembers_669019847198843527(SNode contextNode, int constraint) {
    SNode classifier = ClassConcept_Behavior.getContextClass_8008512149545173402(contextNode);
    List<SNode> result = new ArrayList<SNode>();
    while (classifier != null) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(Classifier_Behavior.call_getVisibleMembers_1213877306257(classifier, contextNode, constraint)));
      if (!(Classifier_Behavior.call_isStatic_521412098689998668(classifier)) || (constraint & IClassifiersSearchScope.STATIC_MEMBER) != 0) {
        classifier = SNodeOperations.getAncestor(classifier, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
      } else {
        break;
      }
    }
    return result;
  }

  public static SNode getContextClassifier_6172562527426750080(SNode expr) {
    SNode concept = ClassConcept_Behavior.getContextClass_8008512149545173402(expr);
    if (concept != null) {
      return concept;
    }
    return SNodeOperations.getAncestor(expr, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
  }

  public static class Pattern_qw8l7c_a1a0a0a52 extends GeneratedMatchingPattern implements IMatchingPattern {
    /*package*/ List<SNode> patternVar_l;
    /*package*/ SNode patternVar_foo;
    /*package*/ Object AntiquotationField_qw8l7c_a0a0a0a0a42;

    public Pattern_qw8l7c_a1a0a0a52(Object parameter_qw8l7c_a0a0a0a0a42) {
      this.AntiquotationField_qw8l7c_a0a0a0a0a42 = parameter_qw8l7c_a0a0a0a0a42;
    }

    public boolean match(SNode nodeToMatch) {
      {
        SNode nodeToMatch_Classifier_Behavior_qw8l7c_a0a0a0a42;
        nodeToMatch_Classifier_Behavior_qw8l7c_a0a0a0a42 = nodeToMatch;
        if (!("jetbrains.mps.baseLanguage.structure.ClassifierType".equals(nodeToMatch_Classifier_Behavior_qw8l7c_a0a0a0a42.getConceptFqName()))) {
          return false;
        }
        {
          SNode referent;
          referent = (SNode) this.AntiquotationField_qw8l7c_a0a0a0a0a42;
          if (nodeToMatch_Classifier_Behavior_qw8l7c_a0a0a0a42.getReferent("classifier") != referent) {
            return false;
          }
        }
        {
          String childRole_Classifier_Behavior_qw8l7c_ = "parameter";
          this.patternVar_l = ListSequence.fromList(new ArrayList<SNode>());
          patternVar_foo = null;
          for (SNode childVar : nodeToMatch_Classifier_Behavior_qw8l7c_a0a0a0a42.getChildren(childRole_Classifier_Behavior_qw8l7c_)) {
            patternVar_foo = childVar;
            ListSequence.fromList(this.patternVar_l).addElement(childVar);
          }
        }
      }
      return true;
    }

    public boolean hasAntiquotations() {
      return true;
    }

    public void fillFieldValuesFrom(GeneratedMatchingPattern pattern) {
      if (pattern != null && pattern.getClass() == this.getClass()) {
        patternVar_l = (List<SNode>) pattern.getFieldValue("patternVar_l");
        patternVar_foo = (SNode) pattern.getFieldValue("patternVar_foo");
      }
    }

    public Object getFieldValue(String fieldName) {
      if ("patternVar_l".equals(fieldName)) {
        return patternVar_l;
      }
      if ("patternVar_foo".equals(fieldName)) {
        return patternVar_foo;
      }
      return null;
    }

    public void performActions(Object o) {
    }
  }
}
