package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import javax.swing.Icon;
import java.util.ArrayList;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.baseLanguage.plugin.IconResourceBundle_Behavior;
import jetbrains.mps.typesystem.inference.TypeContextManager;
import jetbrains.mps.util.Computable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.baseLanguage.scopes.MembersPopulatingContext;
import jetbrains.mps.baseLanguage.scopes.Signature;
import jetbrains.mps.baseLanguage.scopes.MethodSignature;
import java.util.Collections;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;

public class StaticMethodDeclaration_Behavior {
  public static void init(SNode thisNode) {
  }
  public static List<Icon> virtual_getMarkIcons_3923831204883340393(SNode thisNode) {
    List<Icon> markIcons = new ArrayList<Icon>(BehaviorReflection.invokeSuper((Class<List<Icon>>) ((Class) Object.class), thisNode, "jetbrains.mps.baseLanguage.structure.MethodDeclaration", "virtual_getMarkIcons_3923831204883340393", new Object[]{}));
    markIcons.add(IconResourceBundle_Behavior.getInstance().getResource("STATICMARK"));
    return markIcons;
  }
  public static boolean virtual_canBeAnnotated_1233076312117(SNode thisNode) {
    return true;
  }
  public static boolean call_isMainMethod_1213877536670(final SNode thisNode) {
    // if we do not use resolve action, type system would compute all types in the root 
    // while in resolve mode only types required for calculating typeof are computed 
    // the difference between two methods is very visible in main node selection in java run configuation () 
    return TypeContextManager.getInstance().runResolveAction(new Computable<Boolean>() {
      public Boolean compute() {
        return "main".equals(SPropertyOperations.getString(thisNode, "name")) && ListSequence.fromList(SLinkOperations.getTargets(thisNode, "parameter", true)).count() == 1 && TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "parameter", true)).first()), _quotation_createNode_qyxuoz_a0a0a0a0d0c(), false);
      }
    });
  }
  public static List<SNode> virtual_getChildrenToDisplayIntention_4025276038182319200(SNode thisNode) {
    List<SNode> result = BehaviorReflection.invokeSuper((Class<List<SNode>>) ((Class) Object.class), thisNode, "jetbrains.mps.baseLanguage.structure.MethodDeclaration", "virtual_getChildrenToDisplayIntention_4025276038182319200", new Object[]{});
    ListSequence.fromList(result).addElement(SLinkOperations.getTarget(thisNode, "visibility", true));
    return result;
  }
  public static boolean virtual_isStatic_8986964027630462944(SNode thisNode) {
    return true;
  }
  public static Icon virtual_getAdditionalIcon_5017341185733863694(SNode thisNode) {
    return IVisible_Behavior.call_getVisibilityIcon_5017341185733869581(thisNode);
  }
  public static void virtual_populateMember_7405920559687254644(SNode thisNode, MembersPopulatingContext context, SNode classifier) {
    if (!((context.isElementVisible(thisNode)))) {
      return;
    }
    Signature signature = new MethodSignature(thisNode, Collections.<SNode,SNode>emptyMap());
    context.addMember(thisNode, signature);
    context.hideMembers(signature);
  }
  private static SNode _quotation_createNode_qyxuoz_a0a0a0a0d0c() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ArrayType", null, null, false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringType", null, null, false);
    quotedNode_1.addChild("componentType", quotedNode_2);
    return quotedNode_1;
  }
}
