package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.search.ISearchScope;
import jetbrains.mps.smodel.search.SimpleSearchScope;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.scope.CompositeScope;
import jetbrains.mps.smodel.structure.BehaviorDescriptor;
import jetbrains.mps.smodel.structure.ConceptRegistry;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class AbstractLoopStatement_Behavior {
  private static Class[] PARAMETERS_1955452033143960289 = {SNode.class};

  public static void init(SNode thisNode) {
  }

  public static List<SNode> virtual_getOrderedParts_1955452033143960289(SNode thisNode) {
    return ListSequence.fromListAndArray(new ArrayList<SNode>(), SLinkOperations.getTarget(thisNode, "body", true));
  }

  public static Scope virtual_getScope_3734116213129936182(SNode thisNode, SNode kind, SNode child) {
    if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")) {
      Scope nextScope = Scope.getScope(SNodeOperations.getParent(thisNode), child, kind);

      List<SNode> result = new ArrayList<SNode>();
      for (SNode childPart : AbstractLoopStatement_Behavior.call_getOrderedParts_1955452033143960289(thisNode)) {
        if (ListSequence.fromList(SNodeOperations.getAncestors(child, null, false)).contains(childPart)) {
          break;
        }
        if (SNodeOperations.isInstanceOf(childPart, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")) {
          ListSequence.fromList(result).addElement(SNodeOperations.cast(childPart, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"));
        }
      }
      // todo: support child == null 

      // todo: check on null? why? 
      Scope currentScope = new ISearchScope.Adapter(new SimpleSearchScope(ListSequence.fromListWithValues(new ArrayList<SNode>(), ListSequence.fromList(result).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (it != null);
        }
      }))));
      return (nextScope == null ?
        currentScope :
        new CompositeScope(currentScope, nextScope)
      );
    }

    return null;
  }

  public static List<SNode> call_getOrderedParts_1955452033143960289(SNode thisNode) {
    BehaviorDescriptor descriptor = ConceptRegistry.getInstance().getBehaviorDescriptorForInstanceNode(thisNode);
    return (List<SNode>) descriptor.invoke(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), "virtual_getOrderedParts_1955452033143960289", PARAMETERS_1955452033143960289);
  }

  public static List<SNode> callSuper_getOrderedParts_1955452033143960289(SNode thisNode, String callerConceptFqName) {
    return (List<SNode>) BehaviorManager.getInstance().invokeSuper(Object.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), callerConceptFqName, "virtual_getOrderedParts_1955452033143960289", PARAMETERS_1955452033143960289);
  }
}
