package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.baseLanguage.scopes.RepositoryStateCacheUtils;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.lang.reflect.Method;
import jetbrains.mps.reloading.ReflectionUtil;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class DotExpression_Behavior {
  public static void init(SNode thisNode) {
  }
  public static boolean virtual_isLValue_1213877519786(SNode thisNode) {
    return BehaviorReflection.invokeVirtual(Boolean.TYPE, SLinkOperations.getTarget(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1197027756228l, 1197027833540l, "operation")), "virtual_isLValue_1213877410080", new Object[]{});
  }
  public static SNode call_getClassifier_1213877410697(SNode thisNode) {
    return SLinkOperations.getTarget(TypeChecker.getInstance().getRuntimeSupport().coerce_(DotExpression_Behavior.call_getOperandType_8871623299328377715(thisNode), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"), false), MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1107535904670l, 1107535924139l, "classifier"));
  }
  public static SNode call_getOperandType_8871623299328377715(final SNode thisNode) {
    return RepositoryStateCacheUtils.getFromCache("DotExpression_Behavior", thisNode, new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        // long calculation 
        return TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1197027756228l, 1197027771414l, "operand")));
      }
    });
  }
  public static String virtual_getVariableExpectedName_1213877519781(SNode thisNode) {
    return BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1197027756228l, 1197027833540l, "operation")), "virtual_getVariableExpectedName_1213877410087", new Object[]{});
  }
  public static Object virtual_eval_1213877519769(SNode thisNode, SModule module) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1197027756228l, 1197027833540l, "operation")), "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) {
      Object instance = BehaviorReflection.invokeVirtual(Object.class, SLinkOperations.getTarget(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1197027756228l, 1197027771414l, "operand")), "virtual_eval_1213877519769", new Object[]{module});
      SNode methodCall = SNodeOperations.cast(SLinkOperations.getTarget(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1197027756228l, 1197027833540l, "operation")), "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation");
      Method method = BaseMethodDeclaration_Behavior.call_getMethod_1213877350393(SLinkOperations.getTarget(methodCall, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1204053956946l, 1068499141037l, "baseMethodDeclaration")), module);
      Object[] actualArguments = IMethodCall_Behavior.call_getActualArguments_1219275428261(methodCall, module);
      return ReflectionUtil.invoke(method, instance, actualArguments);
    }
    return BehaviorReflection.invokeSuper(Object.class, thisNode, "jetbrains.mps.baseLanguage.structure.Expression", "virtual_eval_1213877519769", new Object[]{module});
  }
  public static boolean virtual_isLegalAsStatement_1239211900844(SNode thisNode) {
    return BehaviorReflection.invokeVirtual(Boolean.TYPE, SLinkOperations.getTarget(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1197027756228l, 1197027833540l, "operation")), "virtual_isDotExpressionLegalAsStatement_1239212437413", new Object[]{});
  }
  public static boolean virtual_allowsNullOperand_4585239809762176541(SNode thisNode) {
    return false;
  }
  public static boolean virtual_lvalue_1262430001741497939(SAbstractConcept thisConcept) {
    return true;
  }
  public static SNode virtual_getSyntacticallyLeftSideExpression_1742226163722653708(SNode thisNode) {
    return SLinkOperations.getTarget(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1197027756228l, 1197027771414l, "operand"));
  }
  public static void virtual_setSyntacticallyLeftSideExpression_1742226163722653680(SNode thisNode, SNode expr) {
    SLinkOperations.setTarget(thisNode, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1197027756228l, 1197027771414l, "operand"), expr);
  }
}
