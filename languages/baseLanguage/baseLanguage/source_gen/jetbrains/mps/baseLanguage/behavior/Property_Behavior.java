package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.search.VisibilityUtil;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.baseLanguage.scopes.ClassifierScopeUtils;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import javax.swing.Icon;
import jetbrains.mps.baseLanguage.scopes.MembersPopulatingContext;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class Property_Behavior {
  public static void init(SNode thisNode) {
    SLinkOperations.setNewChild(thisNode, "visibility", "jetbrains.mps.baseLanguage.structure.PublicVisibility");
  }

  public static boolean call_isDefaultImplementation_1213877383134(SNode thisNode) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(thisNode, "propertyImplementation", true), "jetbrains.mps.baseLanguage.structure.DefaultPropertyImplementation");
  }

  public static boolean call_isCustomImplementation_1213877383144(SNode thisNode) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(thisNode, "propertyImplementation", true), "jetbrains.mps.baseLanguage.structure.CustomPropertyImplementation");
  }

  public static SNode call_getCustomPropertyImplementation_1213877383154(SNode thisNode) {
    return SNodeOperations.cast(SLinkOperations.getTarget(thisNode, "propertyImplementation", true), "jetbrains.mps.baseLanguage.structure.CustomPropertyImplementation");
  }

  public static String call_getPropertyNameWithId_1213877383162(SNode thisNode) {
    return NameUtil.capitalize(SPropertyOperations.getString(thisNode, "propertyName"));
  }

  public static String call_getGetterMethodName_1213877383170(SNode thisNode) {
    return (check_9xvv7i_a0a0e(SLinkOperations.getTarget(thisNode, "type", true)) ?
      "is" + Property_Behavior.call_getPropertyNameWithId_1213877383162(thisNode) :
      "get" + Property_Behavior.call_getPropertyNameWithId_1213877383162(thisNode)
    );
  }

  public static String call_getSetterMethodName_1213877383179(SNode thisNode) {
    return "set" + Property_Behavior.call_getPropertyNameWithId_1213877383162(thisNode);
  }

  public static SNode call_getSetterVisibility_1213877383188(SNode thisNode) {
    SNode visibility = SLinkOperations.getTarget(thisNode, "visibility", true);
    if (Property_Behavior.call_isDefaultImplementation_1213877383134(thisNode)) {
      SNode setterVisibility = SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(thisNode, "propertyImplementation", true), "jetbrains.mps.baseLanguage.structure.DefaultPropertyImplementation"), "defaultSetAccessor", true), "visibility", true);
      if ((setterVisibility != null)) {
        visibility = setterVisibility;
      }
    }
    return visibility;
  }

  public static boolean call_isSetterVisible_6861608246233143251(SNode thisNode, final SNode contextClassifier, SNode contextNode) {
    SNode setterVisibility = Property_Behavior.call_getSetterVisibility_1213877383188(thisNode);
    // public 
    if (SNodeOperations.isInstanceOf(setterVisibility, "jetbrains.mps.baseLanguage.structure.PublicVisibility")) {
      return true;
    }
    // private 
    if (SNodeOperations.isInstanceOf(setterVisibility, "jetbrains.mps.baseLanguage.structure.PrivateVisibility")) {
      return ListSequence.fromList(SNodeOperations.getAncestors(contextNode, "jetbrains.mps.baseLanguage.structure.Classifier", true)).last() == ListSequence.fromList(SNodeOperations.getAncestors(contextClassifier, "jetbrains.mps.baseLanguage.structure.Classifier", true)).last();
    }
    // default 
    String contextNodePackage = VisibilityUtil.packageName(contextNode);
    String contextClassifierPackage = VisibilityUtil.packageName(contextClassifier);
    if ((setterVisibility == null)) {
      return eq_9xvv7i_a0a0i0i(contextNodePackage, contextClassifierPackage);
    }
    // protected 
    if (SNodeOperations.isInstanceOf(setterVisibility, "jetbrains.mps.baseLanguage.structure.ProtectedVisibility")) {
      String declarationClassifierPackage = VisibilityUtil.packageName(Classifier_Behavior.call_getContextClassifier_6172562527426750080(SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Classifier"))), thisNode));
      if (eq_9xvv7i_a0b0k0i(contextNodePackage, declarationClassifierPackage)) {
        return true;
      }

      // two cases: 1) from class 2) from dot expression 
      Iterable<SNode> possibleClassifiers = ListSequence.fromList(SNodeOperations.getAncestors(contextNode, "jetbrains.mps.baseLanguage.structure.Classifier", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SetSequence.fromSet(ClassifierScopeUtils.getExtendedClassifiers(it)).contains(contextClassifier);
        }
      });
      if (!(SNodeOperations.isInstanceOf(contextNode, "jetbrains.mps.baseLanguage.structure.DotExpression"))) {
        // 1 
        return Sequence.fromIterable(possibleClassifiers).isNotEmpty();
      } else {
        // 2 
        SNode leftClassifier = DotExpression_Behavior.call_getClassifier_1213877410697(SNodeOperations.cast(contextNode, "jetbrains.mps.baseLanguage.structure.DotExpression"));
        final Set<SNode> extendedClassifiers = SetSequence.fromSetWithValues(new HashSet<SNode>(), ClassifierScopeUtils.getExtendedClassifiers(leftClassifier));
        return Sequence.fromIterable(possibleClassifiers).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SetSequence.fromSet(extendedClassifiers).contains(it);
          }
        });
      }
    }

    return false;
  }

  public static boolean call_hasSetter_1213877383224(SNode thisNode) {
    return BehaviorReflection.invokeVirtual(Boolean.TYPE, SLinkOperations.getTarget(thisNode, "propertyImplementation", true), "virtual_hasSetter_1213877430658", new Object[]{});
  }

  public static Icon virtual_getAdditionalIcon_5017341185733863694(SNode thisNode) {
    return IVisible_Behavior.call_getVisibilityIcon_5017341185733869581(thisNode);
  }

  public static void virtual_populateMember_7405920559687254644(SNode thisNode, MembersPopulatingContext context, SNode classifier) {
    // todo: just populate for now, make it right! 
    context.addMember(thisNode, null);
  }

  @Deprecated
  public static Icon call_getAdditionalIcon_8884554759541381539(SNode thisNode) {
    return BehaviorReflection.invokeVirtual(Icon.class, thisNode, "virtual_getAdditionalIcon_5017341185733863694", new Object[]{});
  }

  @Deprecated
  public static Icon callSuper_getAdditionalIcon_8884554759541381539(SNode thisNode, String callerConceptFqName) {
    return BehaviorManager.getInstance().invokeSuper(Icon.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.structure.Property"), callerConceptFqName, "virtual_getAdditionalIcon_5017341185733863694", new Class[]{SNode.class}, new Object[]{});
  }

  private static boolean check_9xvv7i_a0a0e(SNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return SNodeOperations.isInstanceOf(checkedDotOperand, "jetbrains.mps.baseLanguage.structure.BooleanType");
    }
    return false;
  }

  private static boolean eq_9xvv7i_a0a0i0i(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_9xvv7i_a0b0k0i(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
