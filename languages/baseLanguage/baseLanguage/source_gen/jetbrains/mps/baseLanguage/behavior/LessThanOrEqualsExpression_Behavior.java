package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class LessThanOrEqualsExpression_Behavior {
  public static void init(SNode thisNode) {
  }
  public static int virtual_getPriority_1262430001741497858(SAbstractConcept thisConcept) {
    return 8;
  }
  public static Object virtual_calculateCompileTimeConstantValue_1587718783752756055(SNode thisNode, Object leftValue, Object rightValue) {
    if (leftValue instanceof Number && rightValue instanceof Number) {
      Number a = (Number) leftValue;
      Number b = (Number) rightValue;
      if (BinaryOperation_Behavior.call_bothShouldBeWidenedTo_6205351058571053912(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL, "jetbrains.mps.baseLanguage.structure.BinaryOperation"), Double.class, a, b)) {
        return a.doubleValue() <= b.doubleValue();
      }
      if (BinaryOperation_Behavior.call_bothShouldBeWidenedTo_6205351058571053912(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL, "jetbrains.mps.baseLanguage.structure.BinaryOperation"), Float.class, a, b)) {
        return a.floatValue() <= b.floatValue();
      }
      if (BinaryOperation_Behavior.call_bothShouldBeWidenedTo_6205351058571053912(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL, "jetbrains.mps.baseLanguage.structure.BinaryOperation"), Long.class, a, b)) {
        return a.longValue() <= b.longValue();
      }
      if (BinaryOperation_Behavior.call_bothShouldBeWidenedTo_6205351058571053912(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL, "jetbrains.mps.baseLanguage.structure.BinaryOperation"), Integer.class, a, b)) {
        return a.intValue() <= b.intValue();
      }
    } else if (leftValue instanceof Character && rightValue instanceof Character) {
      return ((Character) leftValue).charValue() <= ((Character) rightValue).charValue();
    }
    return null;
  }
}
