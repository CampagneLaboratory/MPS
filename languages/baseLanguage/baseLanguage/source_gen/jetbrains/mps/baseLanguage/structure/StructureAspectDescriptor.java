package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AbstractClassifierReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AbstractCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AbstractForStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AbstractOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AdditionalForLoopVariable", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AndAssignmentExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AndExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Annotation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AnnotationInstance", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AnnotationInstanceExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AnonymousClass", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AnonymousClassCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ArrayAccessExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ArrayClassExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ArrayCloneOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ArrayCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializer", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ArrayLengthOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ArrayLiteral", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ArrayType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AsExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AssertStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.AssignmentExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BLBottomType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BaseMethodCall", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BaseStringOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BaseVariableReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BinaryOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BitwiseAndExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BitwiseNotExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BitwiseOrExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BitwiseXorExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BlockStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BooleanConstant", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BooleanType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.BreakStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ByteType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.CastExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.CatchClause", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.CharConstant", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.CharType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ClassConcept", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ClassCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Classifier", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ClassifierClassExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ClassifierMember", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ClassifierType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Closure", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ClosureParameter", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ClosureParameterReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Closureoid", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.CommentPart", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.CommentedStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ConceptFunction", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ConstructorDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ContextClassifierKind", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ContinueStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.CustomPropertyImplementation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.CustomSetterPropertyImplementation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DefaultClassCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DefaultGetAccessor", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DefaultPropertyImplementation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DefaultSetAccessor", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DimensionExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DivAssignmentExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DivExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DoWhileStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DotExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.DoubleType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ElsifClause", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.EnumClass", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.EnumConstantReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.EnumValueOfExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.EnumValuesExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.EqualsExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.EscapeOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Expression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.FieldDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.FloatType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.FloatingPointConstant", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.FloatingPointFloatConstant", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ForStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ForeachStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.GenericDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.GenericNewExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.GetAccessor", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.GreaterThanExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.HasAnnotation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.HexIntegerLiteral", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IAnonymousClass", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IBLDeprecatable", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IBinaryLike", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IClassifier", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IClassifierMember", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IClassifierType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IContainsStatementList", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IFinalWrapper", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IGenericType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IHasModifiers", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IInternalType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ILocalDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ILocalReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ILocalVariableElement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ILocalVariableElementList", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IMemberContainer", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IMethodCall", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IMethodLike", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IParameter", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ISkipsReturn", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IStatementListContainer", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IStaticContainerForMethods", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IThisExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ITryCatchStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ITypeApplicable", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IValidIdentifier", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IVariableAssignment", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IVariableDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IVariableReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IVisible", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IWillBeClassifier", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IYetUnresolved", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IfStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ImplicitAnnotationInstanceValue", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ImplicitAnnotationMethodKind", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IncompleteRightParen", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.InstanceInitializer", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.InstanceOfExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IntegerConstant", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IntegerLiteral", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IntegerType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Interface", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IsEmptyOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.IsNotEmptyOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.JavaImport", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.JavaImports", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LeftShiftAssignmentExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LessThanExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalMethodCall", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalPropertyReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalStaticFieldReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalToMethodKind", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LongLiteral", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LongType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LoopLabel", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LoopLabelReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.LowerBoundType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.MethodDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.MinusAssignmentExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.MinusExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Modifier", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.MulAssignmentExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.MulExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.NPEEqualsExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.NPENotEqualsExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.NotEqualsExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.NotExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.NullLiteral", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.NullType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Number", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.OrAssignmentExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.OrExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ParameterReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PlaceholderMember", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PlaceholderMethodDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PlusAssignmentExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PlusExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PostfixDecrementExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PostfixIncrementExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PrefixDecrementExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PrefixIncrementExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PrimitiveType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PrivateVisibility", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Property", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PropertyImplementation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PropertyReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PropertyValueReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ProtectedVisibility", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.PublicVisibility", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.RemAssignmentExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.RemExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.RemarkStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ReturnStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.RightShiftAssignmentExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SetAccessor", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ShiftLeftExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ShiftRightExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ShiftRightUnsignedExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ShortType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SingleLineComment", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Statement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StatementCommentPart", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StatementList", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StaticFieldReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StaticInitializer", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StaticKind", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StaticMethodCall", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StringBooleanOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StringLiteral", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StringToken", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StringType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.StubStatementList", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SubstringExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SuperConstructorKind", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SuperMethodCall", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SuperMethodKind", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SwitchCase", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SwitchStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.SynchronizedStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.TextCommentPart", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ThisConstructorKind", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ThisExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ThrowStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Tokens", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.TrimOperation", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.TryCatchStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.TryStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Type", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.TypeAnnotable", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.TypeDerivable", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.TypeVariableReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UnaryMinus", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UndefinedType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UnknownConsCall", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UnknownDotCall", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UnknownLocalCall", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UnknownNameRef", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UnknownNew", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UnresolvedNameReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UnsignedRightShiftAssignmentExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UpperBoundType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.UsingStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.ValueParameter", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.VarType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.VariableArityType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.VariableDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.VariableReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.Visibility", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.VoidType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.WhileStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.WildCardType", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.structure.XorAssignmentExpression", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AbstractClassifierReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("classifier").staticScope(StaticScope.NONE).create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AbstractCreator").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AbstractForStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").children(new String[]{"variable"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IContainer", "jetbrains.mps.baseLanguage.structure.IContainsStatementList", "jetbrains.mps.lang.core.structure.ScopeProvider").properties("label").children(new String[]{"body", "loopLabel"}, new boolean[]{false, false}).abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AbstractOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"expression"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AdditionalForLoopVariable").super_("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration").create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AndAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("&=", "").staticScope(StaticScope.NONE).create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AndExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("&&", "conditional-and operation").staticScope(StaticScope.NONE).create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Annotation").super_("jetbrains.mps.baseLanguage.structure.Interface").parents("jetbrains.mps.baseLanguage.structure.Interface").children(new String[]{"annotationMethod"}, new boolean[]{true}).alias("@interface", "Annotation declaration").create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AnnotationInstance").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.ScopeProvider").references("annotation").children(new String[]{"value"}, new boolean[]{true}).staticScope(StaticScope.NONE).create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AnnotationInstanceExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"annotationInstance"}, new boolean[]{false}).alias("annotation instance", "").staticScope(StaticScope.NONE).create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("key").children(new String[]{"value"}, new boolean[]{false}).create();
        break;
      case 13:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").children(new String[]{"defaultValue"}, new boolean[]{false}).create();
        break;
      case 14:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AnonymousClass").super_("jetbrains.mps.baseLanguage.structure.ClassConcept").parents("jetbrains.mps.baseLanguage.structure.ClassConcept", "jetbrains.mps.baseLanguage.structure.IMethodCall", "jetbrains.mps.baseLanguage.structure.IAnonymousClass", "jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter", "jetbrains.mps.lang.traceable.structure.UnitConcept", "jetbrains.mps.lang.core.structure.ScopeProvider", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("classifier", "constructorDeclaration").children(new String[]{"parameter", "constructorArgument", "typeParameter"}, new boolean[]{true, true, true}).alias("", "anonymous class").create();
        break;
      case 15:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AnonymousClassCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"cls"}, new boolean[]{false}).alias("anonymous class", "").staticScope(StaticScope.NONE).create();
        break;
      case 16:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayAccessExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"array", "index"}, new boolean[]{false, false}).alias("[", "array access expression").staticScope(StaticScope.NONE).create();
        break;
      case 17:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayClassExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"arrayType"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
        break;
      case 18:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayCloneOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").alias("clone()", "special public method of array").staticScope(StaticScope.NONE).create();
        break;
      case 19:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"componentType", "dimensionExpression"}, new boolean[]{false, true}).alias("array", "").staticScope(StaticScope.NONE).create();
        break;
      case 20:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializer").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"componentType", "initValue"}, new boolean[]{false, true}).alias("array with initializer", "").staticScope(StaticScope.NONE).create();
        break;
      case 21:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayLengthOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").alias("length", "array length readonly property").staticScope(StaticScope.NONE).create();
        break;
      case 22:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"item"}, new boolean[]{true}).alias("{", "array literal").staticScope(StaticScope.NONE).create();
        break;
      case 23:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"componentType"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
        break;
      case 24:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AsExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"expression", "classifierType"}, new boolean[]{false, false}).alias("as", "type case expression or return null").staticScope(StaticScope.NONE).create();
        break;
      case 25:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AssertStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"condition", "message"}, new boolean[]{false, false}).alias("assert", "").staticScope(StaticScope.NONE).create();
        break;
      case 26:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression", "jetbrains.mps.baseLanguage.structure.TypeDerivable").alias("=", "").staticScope(StaticScope.NONE).create();
        break;
      case 27:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BLBottomType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("BLBottom", "").staticScope(StaticScope.NONE).create();
        break;
      case 28:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"lValue", "rValue"}, new boolean[]{false, false}).abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 29:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BaseMethodCall").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IMethodCall").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 30:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.GenericDeclaration").parents("jetbrains.mps.baseLanguage.structure.GenericDeclaration", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "jetbrains.mps.baseLanguage.structure.HasAnnotation", "jetbrains.mps.baseLanguage.structure.IBLDeprecatable", "jetbrains.mps.baseLanguage.structure.IStatementListContainer", "jetbrains.mps.lang.core.structure.IContainer", "jetbrains.mps.baseLanguage.structure.IMethodLike", "jetbrains.mps.baseLanguage.structure.TypeAnnotable", "jetbrains.mps.lang.traceable.structure.TraceableConcept", "jetbrains.mps.lang.traceable.structure.ScopeConcept", "jetbrains.mps.lang.core.structure.ScopeProvider", "jetbrains.mps.baseLanguage.structure.ITypeApplicable", "jetbrains.mps.baseLanguage.structure.IHasModifiers", "jetbrains.mps.lang.core.structure.ImplementationContainer").properties("isFinal", "isSynchronized").children(new String[]{"returnType", "parameter", "body", "throwsItem"}, new boolean[]{false, true, false, true}).abstract_().create();
        break;
      case 31:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BaseStringOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 32:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier").children(new String[]{"type"}, new boolean[]{false}).create();
        break;
      case 33:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BaseVariableReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("baseVariableDeclaration").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 34:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 35:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 36:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BinaryOperation").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"rightExpression", "leftExpression"}, new boolean[]{false, false}).abstract_().alias("<?>", "abstract binary operation").staticScope(StaticScope.NONE).create();
        break;
      case 37:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BitwiseAndExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").alias("&", "").staticScope(StaticScope.NONE).create();
        break;
      case 38:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BitwiseNotExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"expression"}, new boolean[]{false}).alias("~(expr)", "bitwise not-expression").staticScope(StaticScope.NONE).create();
        break;
      case 39:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BitwiseOrExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").alias("|", "").staticScope(StaticScope.NONE).create();
        break;
      case 40:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BitwiseXorExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").alias("^", "").staticScope(StaticScope.NONE).create();
        break;
      case 41:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BlockStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"statements"}, new boolean[]{false}).alias("{", "block statement").staticScope(StaticScope.NONE).create();
        break;
      case 42:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BooleanConstant").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("boolean constant", "boolean constant").staticScope(StaticScope.NONE).create();
        break;
      case 43:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BooleanType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("boolean", "").staticScope(StaticScope.NONE).create();
        break;
      case 44:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BreakStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("label").children(new String[]{"loopLabelReference"}, new boolean[]{false}).alias("break", "").staticScope(StaticScope.NONE).create();
        break;
      case 45:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ByteType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("byte", "").staticScope(StaticScope.NONE).create();
        break;
      case 46:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CastExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault", "jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"type", "expression"}, new boolean[]{false, false}).alias("(type)exp", "type cast expression").staticScope(StaticScope.NONE).create();
        break;
      case 47:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CatchClause").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.traceable.structure.ScopeConcept", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"throwable", "catchBody"}, new boolean[]{false, false}).staticScope(StaticScope.NONE).create();
        break;
      case 48:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CharConstant").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("charConstant").alias("'", "char constant").staticScope(StaticScope.NONE).create();
        break;
      case 49:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CharType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("char", "").staticScope(StaticScope.NONE).create();
        break;
      case 50:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClassConcept").super_("jetbrains.mps.baseLanguage.structure.Classifier").parents("jetbrains.mps.baseLanguage.structure.Classifier", "jetbrains.mps.baseLanguage.structure.IBLDeprecatable", "jetbrains.mps.lang.traceable.structure.UnitConcept", "jetbrains.mps.lang.core.structure.ScopeProvider", "jetbrains.mps.lang.core.structure.InterfacePart").properties("abstractClass", "isFinal", "isStatic").children(new String[]{"field", "constructor", "staticMethod", "superclass", "implementedInterface", "instanceInitializer", "classInitializer", "staticInitializer", "property"}, new boolean[]{true, true, true, false, true, false, false, false, true}).alias("class", "Class declaration").create();
        break;
      case 51:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClassCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator", "jetbrains.mps.baseLanguage.structure.IMethodCall").references("constructorDeclaration").children(new String[]{"typeParameter"}, new boolean[]{true}).staticScope(StaticScope.NONE).create();
        break;
      case 52:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Classifier").super_("jetbrains.mps.baseLanguage.structure.GenericDeclaration").parents("jetbrains.mps.baseLanguage.structure.GenericDeclaration", "jetbrains.mps.baseLanguage.structure.IClassifier", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.baseLanguage.structure.HasAnnotation", "jetbrains.mps.baseLanguage.structure.IMemberContainer", "jetbrains.mps.lang.core.structure.IResolveInfo", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "jetbrains.mps.baseLanguage.structure.IVisible", "jetbrains.mps.lang.core.structure.IContainer", "jetbrains.mps.lang.core.structure.ScopeProvider").properties("nestedName", "isDeprecated", "nonStatic").children(new String[]{"member", "staticField", "method", "staticInnerClassifiers"}, new boolean[]{true, true, true, true}).unordered("member").abstract_().create();
        break;
      case 53:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClassifierClassExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("classifier").alias("", "class of node operation").staticScope(StaticScope.NONE).create();
        break;
      case 54:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClassifierMember").interface_().parents("jetbrains.mps.baseLanguage.structure.IVisible", "jetbrains.mps.baseLanguage.structure.IClassifierMember").create();
        break;
      case 55:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClassifierType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IClassifierType", "jetbrains.mps.baseLanguage.structure.IGenericType").references("classifier").children(new String[]{"parameter"}, new boolean[]{true}).alias("", "reference to classifier").staticScope(StaticScope.NONE).create();
        break;
      case 56:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Closure").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction", "jetbrains.mps.baseLanguage.structure.Closureoid", "jetbrains.mps.lang.core.structure.ScopeProvider").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 57:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClosureParameter").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.IResolveInfo").abstract_().create();
        break;
      case 58:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClosureParameterReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("closureParameter").staticScope(StaticScope.NONE).create();
        break;
      case 59:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Closureoid").interface_().create();
        break;
      case 60:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CommentPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.ISuppressErrors").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 61:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CommentedStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"statement"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
        break;
      case 62:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.ILocalVariableElementList", "jetbrains.mps.lang.core.structure.ISuppressErrors").children(new String[]{"statement"}, new boolean[]{true}).alias("/*", "").staticScope(StaticScope.NONE).create();
        break;
      case 63:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ConceptFunction").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IMethodLike", "jetbrains.mps.baseLanguage.structure.IStatementListContainer", "jetbrains.mps.lang.core.structure.ImplementationContainer", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"body"}, new boolean[]{false}).abstract_().alias("", "embedded block of code").staticScope(StaticScope.NONE).create();
        break;
      case 64:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 65:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ConstructorDeclaration").super_("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.lang.core.structure.IResolveInfo", "jetbrains.mps.lang.core.structure.InterfacePart").properties("nestedName").alias("constructor", "").create();
        break;
      case 66:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.IMethodCall").references("constructorDeclaration").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 67:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ContextClassifierKind").interface_().create();
        break;
      case 68:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ContinueStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("label").children(new String[]{"loopLabelReference"}, new boolean[]{false}).alias("continue", "").staticScope(StaticScope.NONE).create();
        break;
      case 69:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CustomPropertyImplementation").super_("jetbrains.mps.baseLanguage.structure.PropertyImplementation").parents("jetbrains.mps.baseLanguage.structure.PropertyImplementation").children(new String[]{"getAccessor", "setAccessor"}, new boolean[]{false, false}).alias("custom", "").create();
        break;
      case 70:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CustomSetterPropertyImplementation").super_("jetbrains.mps.baseLanguage.structure.PropertyImplementation").parents("jetbrains.mps.baseLanguage.structure.PropertyImplementation").children(new String[]{"getAccessor", "setAccessor"}, new boolean[]{false, false}).alias("custom setter", "").create();
        break;
      case 71:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DefaultClassCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").references("classifier").children(new String[]{"typeParameter"}, new boolean[]{true}).staticScope(StaticScope.NONE).create();
        break;
      case 72:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DefaultGetAccessor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").create();
        break;
      case 73:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DefaultPropertyImplementation").super_("jetbrains.mps.baseLanguage.structure.PropertyImplementation").parents("jetbrains.mps.baseLanguage.structure.PropertyImplementation").children(new String[]{"defaultGetAccessor", "defaultSetAccessor"}, new boolean[]{false, false}).alias("default", "").create();
        break;
      case 74:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DefaultSetAccessor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"visibility"}, new boolean[]{false}).create();
        break;
      case 75:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DimensionExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"expression"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
        break;
      case 76:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DivAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("/=", "").staticScope(StaticScope.NONE).create();
        break;
      case 77:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DivExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("/", "divide operation").staticScope(StaticScope.NONE).create();
        break;
      case 78:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DoWhileStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").children(new String[]{"condition"}, new boolean[]{false}).alias("do", "do... while loop").staticScope(StaticScope.NONE).create();
        break;
      case 79:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DotExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault", "jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"operand", "operation"}, new boolean[]{false, false}).staticScope(StaticScope.NONE).create();
        break;
      case 80:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DoubleType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("double", "").staticScope(StaticScope.NONE).create();
        break;
      case 81:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ElsifClause").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"condition", "statementList"}, new boolean[]{false, false}).create();
        break;
      case 82:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EnumClass").super_("jetbrains.mps.baseLanguage.structure.ClassConcept").parents("jetbrains.mps.baseLanguage.structure.ClassConcept").children(new String[]{"enumConstant"}, new boolean[]{true}).alias("enum", "Enumeration class declaration").create();
        break;
      case 83:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "jetbrains.mps.lang.core.structure.IResolveInfo", "jetbrains.mps.baseLanguage.structure.HasAnnotation", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.baseLanguage.structure.IMethodCall", "jetbrains.mps.lang.core.structure.InterfacePart", "jetbrains.mps.baseLanguage.structure.IMemberContainer", "jetbrains.mps.lang.core.structure.ScopeProvider").references("constructor").children(new String[]{"method"}, new boolean[]{true}).create();
        break;
      case 84:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EnumConstantReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.ScopeProvider").references("enumClass", "enumConstantDeclaration").alias(".<enum>", "enumeration constant reference").staticScope(StaticScope.NONE).create();
        break;
      case 85:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EnumValueOfExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("enumClass").children(new String[]{"value"}, new boolean[]{false}).alias("valueOf", "").staticScope(StaticScope.NONE).create();
        break;
      case 86:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EnumValuesExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("enumClass").alias("values", "").staticScope(StaticScope.NONE).create();
        break;
      case 87:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EqualsExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("==", "equals operation").staticScope(StaticScope.NONE).create();
        break;
      case 88:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EscapeOperation").super_("jetbrains.mps.baseLanguage.structure.BaseStringOperation").parents("jetbrains.mps.baseLanguage.structure.BaseStringOperation").alias("escape", "escape quotation marks, back slashes, etc.").staticScope(StaticScope.NONE).create();
        break;
      case 89:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Expression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 90:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ExpressionStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IWrapper").children(new String[]{"expression"}, new boolean[]{false}).alias("", "expression statement").staticScope(StaticScope.NONE).create();
        break;
      case 91:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.FieldDeclaration").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.lang.core.structure.IResolveInfo", "jetbrains.mps.baseLanguage.structure.IBLDeprecatable", "jetbrains.mps.lang.traceable.structure.TraceableConcept", "jetbrains.mps.lang.core.structure.InterfacePart").properties("isVolatile", "isTransient").alias("field", "").create();
        break;
      case 92:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").references("fieldDeclaration").alias("", "instance field reference").staticScope(StaticScope.NONE).create();
        break;
      case 93:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.FloatType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("float", "").staticScope(StaticScope.NONE).create();
        break;
      case 94:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.FloatingPointConstant").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("floating point constant (double)", "floating point constant (double)").staticScope(StaticScope.NONE).create();
        break;
      case 95:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.FloatingPointFloatConstant").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("floating point constant (float)", "floating point constant (float)").staticScope(StaticScope.NONE).create();
        break;
      case 96:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ForStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractForStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractForStatement", "jetbrains.mps.lang.traceable.structure.ScopeConcept").children(new String[]{"condition", "iteration", "additionalVar"}, new boolean[]{false, true, true}).alias("for", "for(type name = init; condition; update)").staticScope(StaticScope.NONE).create();
        break;
      case 97:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ForeachStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractForStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractForStatement", "jetbrains.mps.lang.traceable.structure.ScopeConcept").children(new String[]{"iterable"}, new boolean[]{false}).alias("for", "for (type name : iterable)").staticScope(StaticScope.NONE).create();
        break;
      case 98:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.GenericDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"typeVariableDeclaration"}, new boolean[]{true}).abstract_().create();
        break;
      case 99:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.GenericNewExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"creator"}, new boolean[]{false}).alias("new", "instance creation expression").staticScope(StaticScope.NONE).create();
        break;
      case 100:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.GetAccessor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IMethodLike", "jetbrains.mps.baseLanguage.structure.IStatementListContainer").children(new String[]{"statementList"}, new boolean[]{false}).create();
        break;
      case 101:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.GreaterThanExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").alias(">", "greater than operation").staticScope(StaticScope.NONE).create();
        break;
      case 102:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").alias(">=", "greater than or equals operation").staticScope(StaticScope.NONE).create();
        break;
      case 103:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.HasAnnotation").interface_().children(new String[]{"annotation"}, new boolean[]{true}).create();
        break;
      case 104:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.HexIntegerLiteral").super_("jetbrains.mps.baseLanguage.structure.IntegerLiteral").parents("jetbrains.mps.baseLanguage.structure.IntegerLiteral").properties("value").alias("0x", "").staticScope(StaticScope.NONE).create();
        break;
      case 105:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IAnonymousClass").interface_().create();
        break;
      case 106:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IBLDeprecatable").interface_().parents("jetbrains.mps.lang.core.structure.IDeprecatable").properties("isDeprecated").create();
        break;
      case 107:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IBinaryLike").interface_().create();
        break;
      case 108:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IClassifier").interface_().create();
        break;
      case 109:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IClassifierMember").interface_().create();
        break;
      case 110:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IClassifierType").interface_().create();
        break;
      case 111:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IContainsStatementList").interface_().create();
        break;
      case 112:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter").interface_().create();
        break;
      case 113:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable").interface_().create();
        break;
      case 114:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IFinalWrapper").interface_().create();
        break;
      case 115:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IGenericType").interface_().create();
        break;
      case 116:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IHasModifiers").interface_().children(new String[]{"modifiers"}, new boolean[]{true}).create();
        break;
      case 117:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IInternalType").interface_().create();
        break;
      case 118:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ILocalDeclaration").interface_().create();
        break;
      case 119:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ILocalReference").interface_().create();
        break;
      case 120:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ILocalVariableElement").interface_().create();
        break;
      case 121:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ILocalVariableElementList").interface_().create();
        break;
      case 122:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IMemberContainer").interface_().create();
        break;
      case 123:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IMethodCall").interface_().parents("jetbrains.mps.baseLanguage.structure.TypeDerivable", "jetbrains.mps.baseLanguage.structure.TypeAnnotable").references("baseMethodDeclaration").children(new String[]{"actualArgument", "typeArgument"}, new boolean[]{true, true}).create();
        break;
      case 124:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IMethodLike").interface_().create();
        break;
      case 125:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IOperation").interface_().create();
        break;
      case 126:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IParameter").interface_().create();
        break;
      case 127:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ISkipsReturn").interface_().create();
        break;
      case 128:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IStatementListContainer").interface_().create();
        break;
      case 129:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IStaticContainerForMethods").interface_().create();
        break;
      case 130:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IThisExpression").interface_().create();
        break;
      case 131:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ITryCatchStatement").interface_().create();
        break;
      case 132:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ITypeApplicable").interface_().create();
        break;
      case 133:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IValidIdentifier").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
        break;
      case 134:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IVariableAssignment").interface_().create();
        break;
      case 135:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IVariableDeclaration").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
        break;
      case 136:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IVariableReference").interface_().create();
        break;
      case 137:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IVisible").interface_().children(new String[]{"visibility"}, new boolean[]{false}).create();
        break;
      case 138:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IWillBeClassifier").interface_().create();
        break;
      case 139:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IYetUnresolved").interface_().create();
        break;
      case 140:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IfStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.IContainsStatementList", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("forceOneLine", "forceMultiLine").children(new String[]{"condition", "ifFalseStatement", "ifTrue", "elsifClauses"}, new boolean[]{false, false, false, true}).alias("if", "").staticScope(StaticScope.NONE).create();
        break;
      case 141:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ImplicitAnnotationInstanceValue").super_("jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue").parents("jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").create();
        break;
      case 142:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ImplicitAnnotationMethodKind").interface_().create();
        break;
      case 143:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").alias("(", "").create();
        break;
      case 144:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("static", "final", "abstract", "synchronized", "volatile", "transient").children(new String[]{"type"}, new boolean[]{false}).create();
        break;
      case 145:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IncompleteRightParen").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").alias(")", "").create();
        break;
      case 146:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.InstanceInitializer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.baseLanguage.structure.IStatementListContainer", "jetbrains.mps.lang.core.structure.ImplementationPart").children(new String[]{"statementList"}, new boolean[]{false}).alias("{", "").create();
        break;
      case 147:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation", "jetbrains.mps.baseLanguage.structure.IMethodCall").references("instanceMethodDeclaration").alias("", "instance method call").staticScope(StaticScope.NONE).create();
        break;
      case 148:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.MethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.MethodDeclaration", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.baseLanguage.structure.ITypeApplicable", "jetbrains.mps.lang.core.structure.InterfacePart").properties("isAbstract").alias("method", "").create();
        break;
      case 149:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.InstanceOfExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"leftExpression", "classType"}, new boolean[]{false, false}).alias("instanceof", "").staticScope(StaticScope.NONE).create();
        break;
      case 150:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IntegerConstant").super_("jetbrains.mps.baseLanguage.structure.IntegerLiteral").parents("jetbrains.mps.baseLanguage.structure.IntegerLiteral", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("integer constant", "integer constant").staticScope(StaticScope.NONE).create();
        break;
      case 151:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IntegerLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 152:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IntegerType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("int", "").staticScope(StaticScope.NONE).create();
        break;
      case 153:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Interface").super_("jetbrains.mps.baseLanguage.structure.Classifier").parents("jetbrains.mps.baseLanguage.structure.Classifier", "jetbrains.mps.baseLanguage.structure.IBLDeprecatable", "jetbrains.mps.lang.traceable.structure.UnitConcept", "jetbrains.mps.lang.core.structure.InterfacePart").children(new String[]{"extendedInterface"}, new boolean[]{true}).alias("interface", "Interface declaration").create();
        break;
      case 154:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IsEmptyOperation").super_("jetbrains.mps.baseLanguage.structure.StringBooleanOperation").parents("jetbrains.mps.baseLanguage.structure.StringBooleanOperation").alias("isEmpty", "string is null or empty").staticScope(StaticScope.NONE).create();
        break;
      case 155:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IsNotEmptyOperation").super_("jetbrains.mps.baseLanguage.structure.StringBooleanOperation").parents("jetbrains.mps.baseLanguage.structure.StringBooleanOperation").alias("isNotEmpty", "string is not null and not empty").staticScope(StaticScope.NONE).create();
        break;
      case 156:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.JavaImport").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.Tokens").properties("onDemand", "static").alias("java import", "").create();
        break;
      case 157:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.JavaImports").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").children(new String[]{"entries"}, new boolean[]{true}).create();
        break;
      case 158:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LeftShiftAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("<<=", "").staticScope(StaticScope.NONE).create();
        break;
      case 159:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LessThanExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").alias("<", "less then operation").staticScope(StaticScope.NONE).create();
        break;
      case 160:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").alias("<=", "less then or equals operation").staticScope(StaticScope.NONE).create();
        break;
      case 161:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("fieldDeclaration").alias("", "local instance field reference").staticScope(StaticScope.NONE).create();
        break;
      case 162:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall").super_("jetbrains.mps.baseLanguage.structure.LocalMethodCall").parents("jetbrains.mps.baseLanguage.structure.LocalMethodCall", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("instanceMethodDeclaration").alias("", "local instance method call").staticScope(StaticScope.NONE).create();
        break;
      case 163:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalMethodCall").super_("jetbrains.mps.baseLanguage.structure.BaseMethodCall").parents("jetbrains.mps.baseLanguage.structure.BaseMethodCall").references("method").alias("", "local method invocation").staticScope(StaticScope.NONE).create();
        break;
      case 164:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalPropertyReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("property").staticScope(StaticScope.NONE).create();
        break;
      case 165:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalStaticFieldReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("staticFieldDeclaration").alias("", "reference to local static field declaration").staticScope(StaticScope.NONE).create();
        break;
      case 166:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall").super_("jetbrains.mps.baseLanguage.structure.LocalMethodCall").parents("jetbrains.mps.baseLanguage.structure.LocalMethodCall", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("staticMethodDeclaration").alias("", "local static method invocation").staticScope(StaticScope.NONE).create();
        break;
      case 167:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalToMethodKind").interface_().create();
        break;
      case 168:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration", "jetbrains.mps.lang.core.structure.IResolveInfo", "jetbrains.mps.baseLanguage.structure.IVariableAssignment", "jetbrains.mps.baseLanguage.structure.IVariableDeclaration", "jetbrains.mps.baseLanguage.structure.ILocalDeclaration", "jetbrains.mps.lang.core.structure.ScopeProvider").alias("<type> <var>", "local variable declaration").staticScope(StaticScope.ROOT).create();
        break;
      case 169:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IWrapper").children(new String[]{"localVariableDeclaration"}, new boolean[]{false}).alias("<type> <var>;", "local variable declaration statement").staticScope(StaticScope.NONE).create();
        break;
      case 170:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalVariableReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("localVariableDeclaration").alias("", "reference to local variable declaration").staticScope(StaticScope.NONE).create();
        break;
      case 171:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LongLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").staticScope(StaticScope.NONE).create();
        break;
      case 172:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LongType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("long", "").staticScope(StaticScope.NONE).create();
        break;
      case 173:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LoopLabel").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.LocalToMethodKind", "jetbrains.mps.lang.core.structure.INamedConcept").create();
        break;
      case 174:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LoopLabelReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("loopLabel").create();
        break;
      case 175:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LowerBoundType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"bound"}, new boolean[]{false}).alias("? super", "").staticScope(StaticScope.NONE).create();
        break;
      case 176:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.MethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", "jetbrains.mps.lang.core.structure.IResolveInfo").abstract_().create();
        break;
      case 177:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.MinusAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("-=", "").staticScope(StaticScope.NONE).create();
        break;
      case 178:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.MinusExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("-", "minus operation").staticScope(StaticScope.NONE).create();
        break;
      case 179:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Modifier").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 180:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.MulAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("*=", "").staticScope(StaticScope.NONE).create();
        break;
      case 181:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.MulExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("*", "multiplication operation").staticScope(StaticScope.NONE).create();
        break;
      case 182:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.NPEEqualsExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias(":eq:", "NPE-safe equals operation").staticScope(StaticScope.NONE).create();
        break;
      case 183:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.NPENotEqualsExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias(":ne:", "NPE-safe not equals operation").staticScope(StaticScope.NONE).create();
        break;
      case 184:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.NotEqualsExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("!=", "not equals operation").staticScope(StaticScope.NONE).create();
        break;
      case 185:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.NotExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"expression"}, new boolean[]{false}).alias("!(expr)", "not-expression").staticScope(StaticScope.NONE).create();
        break;
      case 186:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.NullLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("null", "").staticScope(StaticScope.NONE).create();
        break;
      case 187:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.NullType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("nulltype", "").staticScope(StaticScope.NONE).create();
        break;
      case 188:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Number").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").create();
        break;
      case 189:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression").staticScope(StaticScope.NONE).create();
        break;
      case 190:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.OrAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("|=", "").staticScope(StaticScope.NONE).create();
        break;
      case 191:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.OrExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("||", "conditional-or operation").staticScope(StaticScope.NONE).create();
        break;
      case 192:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ParameterDeclaration").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration", "jetbrains.mps.lang.core.structure.IResolveInfo", "jetbrains.mps.baseLanguage.structure.IVariableAssignment", "jetbrains.mps.lang.core.structure.InterfacePart").alias("", "parameter").staticScope(StaticScope.ROOT).create();
        break;
      case 193:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ParameterReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("parameterDeclaration").alias("", "reference to method parameter").staticScope(StaticScope.NONE).create();
        break;
      case 194:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"expression"}, new boolean[]{false}).alias("(expr)", "parenthesis").staticScope(StaticScope.NONE).create();
        break;
      case 195:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PlaceholderMember").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").create();
        break;
      case 196:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PlaceholderMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("empty line", "Use PlaceholderMember instead").create();
        break;
      case 197:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PlusAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("+=", "").staticScope(StaticScope.NONE).create();
        break;
      case 198:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PlusExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("+", "plus operation").staticScope(StaticScope.NONE).create();
        break;
      case 199:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PostfixDecrementExpression").super_("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").parents("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").alias("postfix decrement", "").staticScope(StaticScope.NONE).create();
        break;
      case 200:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PostfixIncrementExpression").super_("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").parents("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").alias("postfix increment", "").staticScope(StaticScope.NONE).create();
        break;
      case 201:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PrefixDecrementExpression").super_("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").parents("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").alias("--", "").staticScope(StaticScope.NONE).create();
        break;
      case 202:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PrefixIncrementExpression").super_("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").parents("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").alias("++", "").staticScope(StaticScope.NONE).create();
        break;
      case 203:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"primitiveType"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
        break;
      case 204:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PrimitiveType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 205:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PrivateVisibility").super_("jetbrains.mps.baseLanguage.structure.Visibility").parents("jetbrains.mps.baseLanguage.structure.Visibility").alias("private", "").staticScope(StaticScope.NONE).create();
        break;
      case 206:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Property").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.InterfacePart").properties("propertyName").children(new String[]{"type", "propertyImplementation"}, new boolean[]{false, false}).alias("property", "").create();
        break;
      case 207:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PropertyImplementation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 208:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PropertyReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").references("property").staticScope(StaticScope.NONE).create();
        break;
      case 209:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PropertyValueReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("owningProperty").alias("", "Property value represented in custom getters and setters").create();
        break;
      case 210:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ProtectedVisibility").super_("jetbrains.mps.baseLanguage.structure.Visibility").parents("jetbrains.mps.baseLanguage.structure.Visibility").alias("protected", "").staticScope(StaticScope.NONE).create();
        break;
      case 211:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PublicVisibility").super_("jetbrains.mps.baseLanguage.structure.Visibility").parents("jetbrains.mps.baseLanguage.structure.Visibility").alias("public", "").staticScope(StaticScope.NONE).create();
        break;
      case 212:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.RemAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("%=", "").staticScope(StaticScope.NONE).create();
        break;
      case 213:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.RemExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("%", "remainder operation").staticScope(StaticScope.NONE).create();
        break;
      case 214:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.RemarkStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("//", "remark").staticScope(StaticScope.NONE).create();
        break;
      case 215:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ReturnStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.TypeDerivable").children(new String[]{"expression"}, new boolean[]{false}).alias("return", "").staticScope(StaticScope.NONE).create();
        break;
      case 216:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.RightShiftAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias(">>=", "").staticScope(StaticScope.NONE).create();
        break;
      case 217:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SetAccessor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IMethodLike", "jetbrains.mps.baseLanguage.structure.IStatementListContainer").children(new String[]{"statementList"}, new boolean[]{false}).alias("setter", "").create();
        break;
      case 218:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ShiftLeftExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").alias("<<", "").staticScope(StaticScope.NONE).create();
        break;
      case 219:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ShiftRightExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").alias(">>", "").staticScope(StaticScope.NONE).create();
        break;
      case 220:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ShiftRightUnsignedExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").alias(">>>", "").staticScope(StaticScope.NONE).create();
        break;
      case 221:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ShortType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("short", "").staticScope(StaticScope.NONE).create();
        break;
      case 222:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SingleLineComment").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"commentPart"}, new boolean[]{true}).alias("//", "single-line comment").staticScope(StaticScope.NONE).create();
        break;
      case 223:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Statement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.ILocalVariableElement", "jetbrains.mps.lang.traceable.structure.TraceableConcept", "jetbrains.mps.lang.core.structure.ICanSuppressErrors").alias("<statement>", "").staticScope(StaticScope.NONE).create();
        break;
      case 224:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StatementCommentPart").super_("jetbrains.mps.baseLanguage.structure.CommentPart").parents("jetbrains.mps.baseLanguage.structure.CommentPart").children(new String[]{"commentedStatement"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
        break;
      case 225:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StatementList").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IContainer", "jetbrains.mps.baseLanguage.structure.ILocalVariableElementList", "jetbrains.mps.lang.core.structure.ImplementationWithStubPart", "jetbrains.mps.lang.traceable.structure.ScopeConcept", "jetbrains.mps.lang.core.structure.ScopeProvider", "jetbrains.mps.lang.core.structure.ScopeFacade").children(new String[]{"statement"}, new boolean[]{true}).staticScope(StaticScope.NONE).create();
        break;
      case 226:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.baseLanguage.structure.StaticKind", "jetbrains.mps.lang.core.structure.IResolveInfo", "jetbrains.mps.baseLanguage.structure.IBLDeprecatable", "jetbrains.mps.lang.traceable.structure.TraceableConcept", "jetbrains.mps.lang.core.structure.InterfacePart").properties("isVolatile", "isTransient").alias("static field", "static field declaration").create();
        break;
      case 227:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StaticFieldReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference").references("classifier", "staticFieldDeclaration").alias(".<static field>", "reference to static field declaration").staticScope(StaticScope.NONE).create();
        break;
      case 228:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StaticInitializer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.baseLanguage.structure.IStatementListContainer", "jetbrains.mps.lang.core.structure.ImplementationPart").children(new String[]{"statementList"}, new boolean[]{false}).alias("static {", "").create();
        break;
      case 229:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StaticKind").interface_().create();
        break;
      case 230:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StaticMethodCall").super_("jetbrains.mps.baseLanguage.structure.BaseMethodCall").parents("jetbrains.mps.baseLanguage.structure.BaseMethodCall").references("classConcept", "staticMethodDeclaration").alias(".<static method>", "static method invocation").staticScope(StaticScope.NONE).create();
        break;
      case 231:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.MethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.MethodDeclaration", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.baseLanguage.structure.StaticKind", "jetbrains.mps.lang.core.structure.InterfacePart").alias("static method", "").create();
        break;
      case 232:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StringBooleanOperation").super_("jetbrains.mps.baseLanguage.structure.BaseStringOperation").parents("jetbrains.mps.baseLanguage.structure.BaseStringOperation").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 233:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StringLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("\"", "string literal").staticScope(StaticScope.NONE).create();
        break;
      case 234:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StringToken").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").abstract_().create();
        break;
      case 235:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StringType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("string", "").staticScope(StaticScope.NONE).create();
        break;
      case 236:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StubStatementList").super_("jetbrains.mps.baseLanguage.structure.StatementList").parents("jetbrains.mps.baseLanguage.structure.StatementList", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").create();
        break;
      case 237:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SubstringExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"operand", "startIndex", "endIndex"}, new boolean[]{false, false, false}).alias("[", "substing").staticScope(StaticScope.NONE).create();
        break;
      case 238:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation").super_("jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement").parents("jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("super", "super constructor invocation").staticScope(StaticScope.NONE).create();
        break;
      case 239:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SuperConstructorKind").interface_().create();
        break;
      case 240:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SuperMethodCall").super_("jetbrains.mps.baseLanguage.structure.BaseMethodCall").parents("jetbrains.mps.baseLanguage.structure.BaseMethodCall").references("instanceMethodDeclaration").alias("super", "super method invocation").staticScope(StaticScope.NONE).create();
        break;
      case 241:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SuperMethodKind").interface_().create();
        break;
      case 242:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SwitchCase").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"expression", "body"}, new boolean[]{false, false}).alias("case", "").create();
        break;
      case 243:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SwitchStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.ScopeProvider").properties("label").children(new String[]{"expression", "case", "defaultBlock", "switchLabel"}, new boolean[]{false, true, false, false}).alias("switch", "").staticScope(StaticScope.NONE).create();
        break;
      case 244:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SynchronizedStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"expression", "block"}, new boolean[]{false, false}).alias("synchronized", "").staticScope(StaticScope.NONE).create();
        break;
      case 245:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"condition", "ifTrue", "ifFalse"}, new boolean[]{false, false, false}).alias("(expr) ? (expr) : expr", "ternary operator").staticScope(StaticScope.NONE).create();
        break;
      case 246:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TextCommentPart").super_("jetbrains.mps.baseLanguage.structure.CommentPart").parents("jetbrains.mps.baseLanguage.structure.CommentPart").properties("text").staticScope(StaticScope.NONE).create();
        break;
      case 247:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation").super_("jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement").parents("jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("this", "this constructor invocation").staticScope(StaticScope.NONE).create();
        break;
      case 248:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ThisConstructorKind").interface_().create();
        break;
      case 249:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ThisExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IThisExpression").references("classConcept").alias("this", "").staticScope(StaticScope.NONE).create();
        break;
      case 250:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ThrowStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"throwable"}, new boolean[]{false}).alias("throw", "").staticScope(StaticScope.NONE).create();
        break;
      case 251:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Tokens").interface_().properties("tokens").create();
        break;
      case 252:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TrimOperation").super_("jetbrains.mps.baseLanguage.structure.BaseStringOperation").parents("jetbrains.mps.baseLanguage.structure.BaseStringOperation").properties("trimKind").alias("trim", "trim white spaces, line breaks, tabs, etc.").staticScope(StaticScope.NONE).create();
        break;
      case 253:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TryCatchStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.IContainsStatementList", "jetbrains.mps.baseLanguage.structure.ITryCatchStatement").children(new String[]{"body", "catchClause"}, new boolean[]{false, true}).alias("try {...} catch", "").staticScope(StaticScope.NONE).create();
        break;
      case 254:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TryStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.IContainsStatementList", "jetbrains.mps.baseLanguage.structure.ITryCatchStatement").children(new String[]{"body", "finallyBody", "catchClause"}, new boolean[]{false, false, true}).alias("try {...} finally", "").staticScope(StaticScope.NONE).create();
        break;
      case 255:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Type").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IType", "jetbrains.mps.lang.core.structure.InterfacePart").abstract_().alias("", "a type").staticScope(StaticScope.NONE).create();
        break;
      case 256:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TypeAnnotable").interface_().create();
        break;
      case 257:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TypeDerivable").interface_().create();
        break;
      case 258:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "jetbrains.mps.lang.core.structure.IResolveInfo").properties("extends").children(new String[]{"bound", "auxBounds"}, new boolean[]{false, true}).create();
        break;
      case 259:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TypeVariableReference").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").references("typeVariableDeclaration").alias("", "reference to type variable").staticScope(StaticScope.NONE).create();
        break;
      case 260:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnaryMinus").super_("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").parents("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").alias("-", "unary minus").staticScope(StaticScope.NONE).create();
        break;
      case 261:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UndefinedType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("undefined", "undefined type").staticScope(StaticScope.NONE).create();
        break;
      case 262:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnknownConsCall").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.IMethodCall", "jetbrains.mps.baseLanguage.structure.IYetUnresolved", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("isSuper").staticScope(StaticScope.NONE).create();
        break;
      case 263:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnknownDotCall").super_("jetbrains.mps.baseLanguage.structure.UnknownNameRef").parents("jetbrains.mps.baseLanguage.structure.UnknownNameRef", "jetbrains.mps.baseLanguage.structure.IMethodCall", "jetbrains.mps.baseLanguage.structure.IYetUnresolved", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("callee").staticScope(StaticScope.NONE).create();
        break;
      case 264:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnknownLocalCall").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IMethodCall", "jetbrains.mps.baseLanguage.structure.IYetUnresolved", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("callee").staticScope(StaticScope.NONE).create();
        break;
      case 265:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnknownNameRef").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.Tokens", "jetbrains.mps.baseLanguage.structure.IYetUnresolved", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 266:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnknownNew").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IMethodCall", "jetbrains.mps.baseLanguage.structure.IYetUnresolved", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("className").staticScope(StaticScope.NONE).create();
        break;
      case 267:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnresolvedNameReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("resolveName").staticScope(StaticScope.NONE).create();
        break;
      case 268:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnsignedRightShiftAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias(">>>=", "").staticScope(StaticScope.NONE).create();
        break;
      case 269:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UpperBoundType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"bound"}, new boolean[]{false}).alias("? extends", "").staticScope(StaticScope.NONE).create();
        break;
      case 270:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UsingStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"resource", "body"}, new boolean[]{true, false}).alias("using(...)", "").staticScope(StaticScope.NONE).create();
        break;
      case 271:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ValueParameter").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("value", "").staticScope(StaticScope.NONE).create();
        break;
      case 272:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.VarType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("var", "").staticScope(StaticScope.NONE).create();
        break;
      case 273:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.VariableArityType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").children(new String[]{"componentType"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
        break;
      case 274:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.VariableDeclaration").super_("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration", "jetbrains.mps.baseLanguage.structure.HasAnnotation", "jetbrains.mps.baseLanguage.structure.TypeDerivable", "jetbrains.mps.baseLanguage.structure.TypeAnnotable", "jetbrains.mps.baseLanguage.structure.IVariableDeclaration", "jetbrains.mps.lang.core.structure.IResolveInfo").properties("isFinal").children(new String[]{"initializer"}, new boolean[]{false}).create();
        break;
      case 275:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.VariableReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.TypeAnnotable", "jetbrains.mps.baseLanguage.structure.IVariableReference", "jetbrains.mps.baseLanguage.structure.ILocalReference").references("variableDeclaration").alias("", "reference to variable").staticScope(StaticScope.NONE).create();
        break;
      case 276:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Visibility").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 277:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.VoidType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("void", "").staticScope(StaticScope.NONE).create();
        break;
      case 278:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.WhileStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").children(new String[]{"condition"}, new boolean[]{false}).alias("while", "").staticScope(StaticScope.NONE).create();
        break;
      case 279:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.WildCardType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("?", "wildcard type").staticScope(StaticScope.NONE).create();
        break;
      case 280:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.XorAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("^=", "").staticScope(StaticScope.NONE).create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.baseLanguage.structure.AbstractClassifierReference", "jetbrains.mps.baseLanguage.structure.AbstractCreator", "jetbrains.mps.baseLanguage.structure.AbstractForStatement", "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement", "jetbrains.mps.baseLanguage.structure.AbstractOperation", "jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation", "jetbrains.mps.baseLanguage.structure.AdditionalForLoopVariable", "jetbrains.mps.baseLanguage.structure.AndAssignmentExpression", "jetbrains.mps.baseLanguage.structure.AndExpression", "jetbrains.mps.baseLanguage.structure.Annotation", "jetbrains.mps.baseLanguage.structure.AnnotationInstance", "jetbrains.mps.baseLanguage.structure.AnnotationInstanceExpression", "jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue", "jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration", "jetbrains.mps.baseLanguage.structure.AnonymousClass", "jetbrains.mps.baseLanguage.structure.AnonymousClassCreator", "jetbrains.mps.baseLanguage.structure.ArrayAccessExpression", "jetbrains.mps.baseLanguage.structure.ArrayClassExpression", "jetbrains.mps.baseLanguage.structure.ArrayCloneOperation", "jetbrains.mps.baseLanguage.structure.ArrayCreator", "jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializer", "jetbrains.mps.baseLanguage.structure.ArrayLengthOperation", "jetbrains.mps.baseLanguage.structure.ArrayLiteral", "jetbrains.mps.baseLanguage.structure.ArrayType", "jetbrains.mps.baseLanguage.structure.AsExpression", "jetbrains.mps.baseLanguage.structure.AssertStatement", "jetbrains.mps.baseLanguage.structure.AssignmentExpression", "jetbrains.mps.baseLanguage.structure.BLBottomType", "jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression", "jetbrains.mps.baseLanguage.structure.BaseMethodCall", "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", "jetbrains.mps.baseLanguage.structure.BaseStringOperation", "jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration", "jetbrains.mps.baseLanguage.structure.BaseVariableReference", "jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation", "jetbrains.mps.baseLanguage.structure.BinaryCompareOperation", "jetbrains.mps.baseLanguage.structure.BinaryOperation", "jetbrains.mps.baseLanguage.structure.BitwiseAndExpression", "jetbrains.mps.baseLanguage.structure.BitwiseNotExpression", "jetbrains.mps.baseLanguage.structure.BitwiseOrExpression", "jetbrains.mps.baseLanguage.structure.BitwiseXorExpression", "jetbrains.mps.baseLanguage.structure.BlockStatement", "jetbrains.mps.baseLanguage.structure.BooleanConstant", "jetbrains.mps.baseLanguage.structure.BooleanType", "jetbrains.mps.baseLanguage.structure.BreakStatement", "jetbrains.mps.baseLanguage.structure.ByteType", "jetbrains.mps.baseLanguage.structure.CastExpression", "jetbrains.mps.baseLanguage.structure.CatchClause", "jetbrains.mps.baseLanguage.structure.CharConstant", "jetbrains.mps.baseLanguage.structure.CharType", "jetbrains.mps.baseLanguage.structure.ClassConcept", "jetbrains.mps.baseLanguage.structure.ClassCreator", "jetbrains.mps.baseLanguage.structure.Classifier", "jetbrains.mps.baseLanguage.structure.ClassifierClassExpression", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.baseLanguage.structure.ClassifierType", "jetbrains.mps.baseLanguage.structure.Closure", "jetbrains.mps.baseLanguage.structure.ClosureParameter", "jetbrains.mps.baseLanguage.structure.ClosureParameterReference", "jetbrains.mps.baseLanguage.structure.Closureoid", "jetbrains.mps.baseLanguage.structure.CommentPart", "jetbrains.mps.baseLanguage.structure.CommentedStatement", "jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock", "jetbrains.mps.baseLanguage.structure.ConceptFunction", "jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration", "jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement", "jetbrains.mps.baseLanguage.structure.ContextClassifierKind", "jetbrains.mps.baseLanguage.structure.ContinueStatement", "jetbrains.mps.baseLanguage.structure.CustomPropertyImplementation", "jetbrains.mps.baseLanguage.structure.CustomSetterPropertyImplementation", "jetbrains.mps.baseLanguage.structure.DefaultClassCreator", "jetbrains.mps.baseLanguage.structure.DefaultGetAccessor", "jetbrains.mps.baseLanguage.structure.DefaultPropertyImplementation", "jetbrains.mps.baseLanguage.structure.DefaultSetAccessor", "jetbrains.mps.baseLanguage.structure.DimensionExpression", "jetbrains.mps.baseLanguage.structure.DivAssignmentExpression", "jetbrains.mps.baseLanguage.structure.DivExpression", "jetbrains.mps.baseLanguage.structure.DoWhileStatement", "jetbrains.mps.baseLanguage.structure.DotExpression", "jetbrains.mps.baseLanguage.structure.DoubleType", "jetbrains.mps.baseLanguage.structure.ElsifClause", "jetbrains.mps.baseLanguage.structure.EnumClass", "jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration", "jetbrains.mps.baseLanguage.structure.EnumConstantReference", "jetbrains.mps.baseLanguage.structure.EnumValueOfExpression", "jetbrains.mps.baseLanguage.structure.EnumValuesExpression", "jetbrains.mps.baseLanguage.structure.EqualsExpression", "jetbrains.mps.baseLanguage.structure.EscapeOperation", "jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.ExpressionStatement", "jetbrains.mps.baseLanguage.structure.FieldDeclaration", "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation", "jetbrains.mps.baseLanguage.structure.FloatType", "jetbrains.mps.baseLanguage.structure.FloatingPointConstant", "jetbrains.mps.baseLanguage.structure.FloatingPointFloatConstant", "jetbrains.mps.baseLanguage.structure.ForStatement", "jetbrains.mps.baseLanguage.structure.ForeachStatement", "jetbrains.mps.baseLanguage.structure.GenericDeclaration", "jetbrains.mps.baseLanguage.structure.GenericNewExpression", "jetbrains.mps.baseLanguage.structure.GetAccessor", "jetbrains.mps.baseLanguage.structure.GreaterThanExpression", "jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression", "jetbrains.mps.baseLanguage.structure.HasAnnotation", "jetbrains.mps.baseLanguage.structure.HexIntegerLiteral", "jetbrains.mps.baseLanguage.structure.IAnonymousClass", "jetbrains.mps.baseLanguage.structure.IBLDeprecatable", "jetbrains.mps.baseLanguage.structure.IBinaryLike", "jetbrains.mps.baseLanguage.structure.IClassifier", "jetbrains.mps.baseLanguage.structure.IClassifierMember", "jetbrains.mps.baseLanguage.structure.IClassifierType", "jetbrains.mps.baseLanguage.structure.IContainsStatementList", "jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter", "jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable", "jetbrains.mps.baseLanguage.structure.IFinalWrapper", "jetbrains.mps.baseLanguage.structure.IGenericType", "jetbrains.mps.baseLanguage.structure.IHasModifiers", "jetbrains.mps.baseLanguage.structure.IInternalType", "jetbrains.mps.baseLanguage.structure.ILocalDeclaration", "jetbrains.mps.baseLanguage.structure.ILocalReference", "jetbrains.mps.baseLanguage.structure.ILocalVariableElement", "jetbrains.mps.baseLanguage.structure.ILocalVariableElementList", "jetbrains.mps.baseLanguage.structure.IMemberContainer", "jetbrains.mps.baseLanguage.structure.IMethodCall", "jetbrains.mps.baseLanguage.structure.IMethodLike", "jetbrains.mps.baseLanguage.structure.IOperation", "jetbrains.mps.baseLanguage.structure.IParameter", "jetbrains.mps.baseLanguage.structure.ISkipsReturn", "jetbrains.mps.baseLanguage.structure.IStatementListContainer", "jetbrains.mps.baseLanguage.structure.IStaticContainerForMethods", "jetbrains.mps.baseLanguage.structure.IThisExpression", "jetbrains.mps.baseLanguage.structure.ITryCatchStatement", "jetbrains.mps.baseLanguage.structure.ITypeApplicable", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "jetbrains.mps.baseLanguage.structure.IVariableAssignment", "jetbrains.mps.baseLanguage.structure.IVariableDeclaration", "jetbrains.mps.baseLanguage.structure.IVariableReference", "jetbrains.mps.baseLanguage.structure.IVisible", "jetbrains.mps.baseLanguage.structure.IWillBeClassifier", "jetbrains.mps.baseLanguage.structure.IYetUnresolved", "jetbrains.mps.baseLanguage.structure.IfStatement", "jetbrains.mps.baseLanguage.structure.ImplicitAnnotationInstanceValue", "jetbrains.mps.baseLanguage.structure.ImplicitAnnotationMethodKind", "jetbrains.mps.baseLanguage.structure.IncompleteLeftParen", "jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration", "jetbrains.mps.baseLanguage.structure.IncompleteRightParen", "jetbrains.mps.baseLanguage.structure.InstanceInitializer", "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation", "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", "jetbrains.mps.baseLanguage.structure.InstanceOfExpression", "jetbrains.mps.baseLanguage.structure.IntegerConstant", "jetbrains.mps.baseLanguage.structure.IntegerLiteral", "jetbrains.mps.baseLanguage.structure.IntegerType", "jetbrains.mps.baseLanguage.structure.Interface", "jetbrains.mps.baseLanguage.structure.IsEmptyOperation", "jetbrains.mps.baseLanguage.structure.IsNotEmptyOperation", "jetbrains.mps.baseLanguage.structure.JavaImport", "jetbrains.mps.baseLanguage.structure.JavaImports", "jetbrains.mps.baseLanguage.structure.LeftShiftAssignmentExpression", "jetbrains.mps.baseLanguage.structure.LessThanExpression", "jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression", "jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference", "jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall", "jetbrains.mps.baseLanguage.structure.LocalMethodCall", "jetbrains.mps.baseLanguage.structure.LocalPropertyReference", "jetbrains.mps.baseLanguage.structure.LocalStaticFieldReference", "jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall", "jetbrains.mps.baseLanguage.structure.LocalToMethodKind", "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", "jetbrains.mps.baseLanguage.structure.LocalVariableReference", "jetbrains.mps.baseLanguage.structure.LongLiteral", "jetbrains.mps.baseLanguage.structure.LongType", "jetbrains.mps.baseLanguage.structure.LoopLabel", "jetbrains.mps.baseLanguage.structure.LoopLabelReference", "jetbrains.mps.baseLanguage.structure.LowerBoundType", "jetbrains.mps.baseLanguage.structure.MethodDeclaration", "jetbrains.mps.baseLanguage.structure.MinusAssignmentExpression", "jetbrains.mps.baseLanguage.structure.MinusExpression", "jetbrains.mps.baseLanguage.structure.Modifier", "jetbrains.mps.baseLanguage.structure.MulAssignmentExpression", "jetbrains.mps.baseLanguage.structure.MulExpression", "jetbrains.mps.baseLanguage.structure.NPEEqualsExpression", "jetbrains.mps.baseLanguage.structure.NPENotEqualsExpression", "jetbrains.mps.baseLanguage.structure.NotEqualsExpression", "jetbrains.mps.baseLanguage.structure.NotExpression", "jetbrains.mps.baseLanguage.structure.NullLiteral", "jetbrains.mps.baseLanguage.structure.NullType", "jetbrains.mps.baseLanguage.structure.Number", "jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression", "jetbrains.mps.baseLanguage.structure.OrAssignmentExpression", "jetbrains.mps.baseLanguage.structure.OrExpression", "jetbrains.mps.baseLanguage.structure.ParameterDeclaration", "jetbrains.mps.baseLanguage.structure.ParameterReference", "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", "jetbrains.mps.baseLanguage.structure.PlaceholderMember", "jetbrains.mps.baseLanguage.structure.PlaceholderMethodDeclaration", "jetbrains.mps.baseLanguage.structure.PlusAssignmentExpression", "jetbrains.mps.baseLanguage.structure.PlusExpression", "jetbrains.mps.baseLanguage.structure.PostfixDecrementExpression", "jetbrains.mps.baseLanguage.structure.PostfixIncrementExpression", "jetbrains.mps.baseLanguage.structure.PrefixDecrementExpression", "jetbrains.mps.baseLanguage.structure.PrefixIncrementExpression", "jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression", "jetbrains.mps.baseLanguage.structure.PrimitiveType", "jetbrains.mps.baseLanguage.structure.PrivateVisibility", "jetbrains.mps.baseLanguage.structure.Property", "jetbrains.mps.baseLanguage.structure.PropertyImplementation", "jetbrains.mps.baseLanguage.structure.PropertyReference", "jetbrains.mps.baseLanguage.structure.PropertyValueReference", "jetbrains.mps.baseLanguage.structure.ProtectedVisibility", "jetbrains.mps.baseLanguage.structure.PublicVisibility", "jetbrains.mps.baseLanguage.structure.RemAssignmentExpression", "jetbrains.mps.baseLanguage.structure.RemExpression", "jetbrains.mps.baseLanguage.structure.RemarkStatement", "jetbrains.mps.baseLanguage.structure.ReturnStatement", "jetbrains.mps.baseLanguage.structure.RightShiftAssignmentExpression", "jetbrains.mps.baseLanguage.structure.SetAccessor", "jetbrains.mps.baseLanguage.structure.ShiftLeftExpression", "jetbrains.mps.baseLanguage.structure.ShiftRightExpression", "jetbrains.mps.baseLanguage.structure.ShiftRightUnsignedExpression", "jetbrains.mps.baseLanguage.structure.ShortType", "jetbrains.mps.baseLanguage.structure.SingleLineComment", "jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.StatementCommentPart", "jetbrains.mps.baseLanguage.structure.StatementList", "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration", "jetbrains.mps.baseLanguage.structure.StaticFieldReference", "jetbrains.mps.baseLanguage.structure.StaticInitializer", "jetbrains.mps.baseLanguage.structure.StaticKind", "jetbrains.mps.baseLanguage.structure.StaticMethodCall", "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration", "jetbrains.mps.baseLanguage.structure.StringBooleanOperation", "jetbrains.mps.baseLanguage.structure.StringLiteral", "jetbrains.mps.baseLanguage.structure.StringToken", "jetbrains.mps.baseLanguage.structure.StringType", "jetbrains.mps.baseLanguage.structure.StubStatementList", "jetbrains.mps.baseLanguage.structure.SubstringExpression", "jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation", "jetbrains.mps.baseLanguage.structure.SuperConstructorKind", "jetbrains.mps.baseLanguage.structure.SuperMethodCall", "jetbrains.mps.baseLanguage.structure.SuperMethodKind", "jetbrains.mps.baseLanguage.structure.SwitchCase", "jetbrains.mps.baseLanguage.structure.SwitchStatement", "jetbrains.mps.baseLanguage.structure.SynchronizedStatement", "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression", "jetbrains.mps.baseLanguage.structure.TextCommentPart", "jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation", "jetbrains.mps.baseLanguage.structure.ThisConstructorKind", "jetbrains.mps.baseLanguage.structure.ThisExpression", "jetbrains.mps.baseLanguage.structure.ThrowStatement", "jetbrains.mps.baseLanguage.structure.Tokens", "jetbrains.mps.baseLanguage.structure.TrimOperation", "jetbrains.mps.baseLanguage.structure.TryCatchStatement", "jetbrains.mps.baseLanguage.structure.TryStatement", "jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.TypeAnnotable", "jetbrains.mps.baseLanguage.structure.TypeDerivable", "jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration", "jetbrains.mps.baseLanguage.structure.TypeVariableReference", "jetbrains.mps.baseLanguage.structure.UnaryMinus", "jetbrains.mps.baseLanguage.structure.UndefinedType", "jetbrains.mps.baseLanguage.structure.UnknownConsCall", "jetbrains.mps.baseLanguage.structure.UnknownDotCall", "jetbrains.mps.baseLanguage.structure.UnknownLocalCall", "jetbrains.mps.baseLanguage.structure.UnknownNameRef", "jetbrains.mps.baseLanguage.structure.UnknownNew", "jetbrains.mps.baseLanguage.structure.UnresolvedNameReference", "jetbrains.mps.baseLanguage.structure.UnsignedRightShiftAssignmentExpression", "jetbrains.mps.baseLanguage.structure.UpperBoundType", "jetbrains.mps.baseLanguage.structure.UsingStatement", "jetbrains.mps.baseLanguage.structure.ValueParameter", "jetbrains.mps.baseLanguage.structure.VarType", "jetbrains.mps.baseLanguage.structure.VariableArityType", "jetbrains.mps.baseLanguage.structure.VariableDeclaration", "jetbrains.mps.baseLanguage.structure.VariableReference", "jetbrains.mps.baseLanguage.structure.Visibility", "jetbrains.mps.baseLanguage.structure.VoidType", "jetbrains.mps.baseLanguage.structure.WhileStatement", "jetbrains.mps.baseLanguage.structure.WildCardType", "jetbrains.mps.baseLanguage.structure.XorAssignmentExpression"};
}
