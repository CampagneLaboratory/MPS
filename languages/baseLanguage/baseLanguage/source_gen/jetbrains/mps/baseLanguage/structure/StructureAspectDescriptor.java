package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractClassifierReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AbstractClassifierReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("classifier").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAbstractCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AbstractCreator").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAbstractForStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AbstractForStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").children(new String[]{"variable"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAbstractLoopStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IContainer", "jetbrains.mps.baseLanguage.structure.IContainsStatementList", "jetbrains.mps.lang.core.structure.ScopeProvider").properties("label").children(new String[]{"body", "loopLabel"}, new boolean[]{false, false}).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAbstractOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AbstractOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAbstractUnaryNumberOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"expression"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAdditionalForLoopVariable = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AdditionalForLoopVariable").super_("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration").create();
  /*package*/ final ConceptDescriptor myConceptAndAssignmentExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AndAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("&=", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAndExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AndExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("&&", "conditional-and operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAnnotation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Annotation").super_("jetbrains.mps.baseLanguage.structure.Interface").parents("jetbrains.mps.baseLanguage.structure.Interface").children(new String[]{"annotationMethod"}, new boolean[]{true}).alias("@interface", "Annotation declaration").create();
  /*package*/ final ConceptDescriptor myConceptAnnotationInstance = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AnnotationInstance").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.ScopeProvider").references("annotation").children(new String[]{"value"}, new boolean[]{true}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAnnotationInstanceExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AnnotationInstanceExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"annotationInstance"}, new boolean[]{false}).alias("annotation instance", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAnnotationInstanceValue = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("key").children(new String[]{"value"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptAnnotationMethodDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").children(new String[]{"defaultValue"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptAnonymousClass = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AnonymousClass").super_("jetbrains.mps.baseLanguage.structure.ClassConcept").parents("jetbrains.mps.baseLanguage.structure.ClassConcept", "jetbrains.mps.baseLanguage.structure.IMethodCall", "jetbrains.mps.baseLanguage.structure.IAnonymousClass", "jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter", "jetbrains.mps.lang.traceable.structure.UnitConcept", "jetbrains.mps.lang.core.structure.ScopeProvider", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("classifier", "constructorDeclaration").children(new String[]{"parameter", "constructorArgument", "typeParameter"}, new boolean[]{true, true, true}).alias("", "anonymous class").create();
  /*package*/ final ConceptDescriptor myConceptAnonymousClassCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AnonymousClassCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"cls"}, new boolean[]{false}).alias("anonymous class", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptArrayAccessExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayAccessExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"array", "index"}, new boolean[]{false, false}).alias("[", "array access expression").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptArrayClassExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayClassExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"arrayType"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptArrayCloneOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayCloneOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").alias("clone()", "special public method of array").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptArrayCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"componentType", "dimensionExpression"}, new boolean[]{false, true}).alias("array", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptArrayCreatorWithInitializer = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializer").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"componentType", "initValue"}, new boolean[]{false, true}).alias("array with initializer", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptArrayLengthOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayLengthOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").alias("length", "array length readonly property").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptArrayLiteral = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"item"}, new boolean[]{true}).alias("{", "array literal").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptArrayType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ArrayType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"componentType"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAsExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AsExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"expression", "classifierType"}, new boolean[]{false, false}).alias("as", "type case expression or return null").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAssertStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AssertStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"condition", "message"}, new boolean[]{false, false}).alias("assert", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAssignmentExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.AssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression", "jetbrains.mps.baseLanguage.structure.TypeDerivable").alias("=", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBLBottomType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BLBottomType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("BLBottom", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBaseAssignmentExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"lValue", "rValue"}, new boolean[]{false, false}).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBaseMethodCall = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BaseMethodCall").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IMethodCall").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBaseMethodDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.GenericDeclaration").parents("jetbrains.mps.baseLanguage.structure.GenericDeclaration", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "jetbrains.mps.baseLanguage.structure.HasAnnotation", "jetbrains.mps.baseLanguage.structure.IBLDeprecatable", "jetbrains.mps.baseLanguage.structure.IStatementListContainer", "jetbrains.mps.lang.core.structure.IContainer", "jetbrains.mps.baseLanguage.structure.IMethodLike", "jetbrains.mps.baseLanguage.structure.TypeAnnotable", "jetbrains.mps.lang.traceable.structure.TraceableConcept", "jetbrains.mps.lang.traceable.structure.ScopeConcept", "jetbrains.mps.lang.core.structure.ScopeProvider", "jetbrains.mps.baseLanguage.structure.ITypeApplicable", "jetbrains.mps.baseLanguage.structure.IHasModifiers", "jetbrains.mps.lang.core.structure.ImplementationContainer").properties("isFinal", "isSynchronized").children(new String[]{"returnType", "parameter", "body", "throwsItem"}, new boolean[]{false, true, false, true}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBaseStringOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BaseStringOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBaseVariableDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier").children(new String[]{"type"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptBaseVariableReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BaseVariableReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("baseVariableDeclaration").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBinaryBitwiseOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBinaryCompareOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBinaryOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BinaryOperation").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"rightExpression", "leftExpression"}, new boolean[]{false, false}).abstract_().alias("<?>", "abstract binary operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBitwiseAndExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BitwiseAndExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").alias("&", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBitwiseNotExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BitwiseNotExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"expression"}, new boolean[]{false}).alias("~(expr)", "bitwise not-expression").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBitwiseOrExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BitwiseOrExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").alias("|", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBitwiseXorExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BitwiseXorExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").alias("^", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBlockStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BlockStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"statements"}, new boolean[]{false}).alias("{", "block statement").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBooleanConstant = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BooleanConstant").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("boolean constant", "boolean constant").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBooleanType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BooleanType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("boolean", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBreakStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.BreakStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("label").children(new String[]{"loopLabelReference"}, new boolean[]{false}).alias("break", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptByteType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ByteType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("byte", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCastExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CastExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault", "jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"type", "expression"}, new boolean[]{false, false}).alias("(type)exp", "type cast expression").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCatchClause = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CatchClause").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.traceable.structure.ScopeConcept", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"throwable", "catchBody"}, new boolean[]{false, false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCharConstant = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CharConstant").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("charConstant").alias("'", "char constant").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCharType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CharType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("char", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptClassConcept = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClassConcept").super_("jetbrains.mps.baseLanguage.structure.Classifier").parents("jetbrains.mps.baseLanguage.structure.Classifier", "jetbrains.mps.baseLanguage.structure.IBLDeprecatable", "jetbrains.mps.lang.traceable.structure.UnitConcept", "jetbrains.mps.lang.core.structure.ScopeProvider", "jetbrains.mps.lang.core.structure.InterfacePart").properties("abstractClass", "isFinal", "isStatic").children(new String[]{"field", "constructor", "staticMethod", "superclass", "implementedInterface", "instanceInitializer", "classInitializer", "staticInitializer", "property"}, new boolean[]{true, true, true, false, true, false, false, false, true}).alias("class", "Class declaration").create();
  /*package*/ final ConceptDescriptor myConceptClassCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClassCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator", "jetbrains.mps.baseLanguage.structure.IMethodCall").references("constructorDeclaration").children(new String[]{"typeParameter"}, new boolean[]{true}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptClassifier = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Classifier").super_("jetbrains.mps.baseLanguage.structure.GenericDeclaration").parents("jetbrains.mps.baseLanguage.structure.GenericDeclaration", "jetbrains.mps.baseLanguage.structure.IClassifier", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.baseLanguage.structure.HasAnnotation", "jetbrains.mps.baseLanguage.structure.IMemberContainer", "jetbrains.mps.lang.core.structure.IResolveInfo", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "jetbrains.mps.baseLanguage.structure.IVisible", "jetbrains.mps.lang.core.structure.IContainer", "jetbrains.mps.lang.core.structure.ScopeProvider").properties("nestedName", "isDeprecated", "nonStatic").children(new String[]{"member", "staticField", "method", "staticInnerClassifiers"}, new boolean[]{true, true, true, true}).unordered("member").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptClassifierClassExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClassifierClassExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("classifier").alias("", "class of node operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptClassifierMember = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClassifierMember").interface_().parents("jetbrains.mps.baseLanguage.structure.IVisible", "jetbrains.mps.baseLanguage.structure.IClassifierMember").create();
  /*package*/ final ConceptDescriptor myConceptClassifierType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClassifierType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IClassifierType", "jetbrains.mps.baseLanguage.structure.IGenericType").references("classifier").children(new String[]{"parameter"}, new boolean[]{true}).alias("", "reference to classifier").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptClosure = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Closure").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction", "jetbrains.mps.baseLanguage.structure.Closureoid", "jetbrains.mps.lang.core.structure.ScopeProvider").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptClosureParameter = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClosureParameter").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.IResolveInfo").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptClosureParameterReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ClosureParameterReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("closureParameter").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptClosureoid = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Closureoid").interface_().create();
  /*package*/ final ConceptDescriptor myConceptCommentPart = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CommentPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.ISuppressErrors").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCommentedStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CommentedStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"statement"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCommentedStatementsBlock = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.ILocalVariableElementList", "jetbrains.mps.lang.core.structure.ISuppressErrors").children(new String[]{"statement"}, new boolean[]{true}).alias("/*", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunction = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ConceptFunction").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IMethodLike", "jetbrains.mps.baseLanguage.structure.IStatementListContainer", "jetbrains.mps.lang.core.structure.ImplementationContainer", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"body"}, new boolean[]{false}).abstract_().alias("", "embedded block of code").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstructorDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ConstructorDeclaration").super_("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.lang.core.structure.IResolveInfo", "jetbrains.mps.lang.core.structure.InterfacePart").properties("nestedName").alias("constructor", "").create();
  /*package*/ final ConceptDescriptor myConceptConstructorInvocationStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.IMethodCall").references("constructorDeclaration").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptContextClassifierKind = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ContextClassifierKind").interface_().create();
  /*package*/ final ConceptDescriptor myConceptContinueStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ContinueStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("label").children(new String[]{"loopLabelReference"}, new boolean[]{false}).alias("continue", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCustomPropertyImplementation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CustomPropertyImplementation").super_("jetbrains.mps.baseLanguage.structure.PropertyImplementation").parents("jetbrains.mps.baseLanguage.structure.PropertyImplementation").children(new String[]{"getAccessor", "setAccessor"}, new boolean[]{false, false}).alias("custom", "").create();
  /*package*/ final ConceptDescriptor myConceptCustomSetterPropertyImplementation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.CustomSetterPropertyImplementation").super_("jetbrains.mps.baseLanguage.structure.PropertyImplementation").parents("jetbrains.mps.baseLanguage.structure.PropertyImplementation").children(new String[]{"getAccessor", "setAccessor"}, new boolean[]{false, false}).alias("custom setter", "").create();
  /*package*/ final ConceptDescriptor myConceptDefaultClassCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DefaultClassCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").references("classifier").children(new String[]{"typeParameter"}, new boolean[]{true}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDefaultGetAccessor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DefaultGetAccessor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").create();
  /*package*/ final ConceptDescriptor myConceptDefaultPropertyImplementation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DefaultPropertyImplementation").super_("jetbrains.mps.baseLanguage.structure.PropertyImplementation").parents("jetbrains.mps.baseLanguage.structure.PropertyImplementation").children(new String[]{"defaultGetAccessor", "defaultSetAccessor"}, new boolean[]{false, false}).alias("default", "").create();
  /*package*/ final ConceptDescriptor myConceptDefaultSetAccessor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DefaultSetAccessor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"visibility"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptDimensionExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DimensionExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"expression"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDivAssignmentExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DivAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("/=", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDivExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DivExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("/", "divide operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDoWhileStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DoWhileStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").children(new String[]{"condition"}, new boolean[]{false}).alias("do", "do... while loop").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDotExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DotExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault", "jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"operand", "operation"}, new boolean[]{false, false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDoubleType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.DoubleType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("double", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptElsifClause = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ElsifClause").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"condition", "statementList"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptEnumClass = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EnumClass").super_("jetbrains.mps.baseLanguage.structure.ClassConcept").parents("jetbrains.mps.baseLanguage.structure.ClassConcept").children(new String[]{"enumConstant"}, new boolean[]{true}).alias("enum", "Enumeration class declaration").create();
  /*package*/ final ConceptDescriptor myConceptEnumConstantDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "jetbrains.mps.lang.core.structure.IResolveInfo", "jetbrains.mps.baseLanguage.structure.HasAnnotation", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.baseLanguage.structure.IMethodCall", "jetbrains.mps.lang.core.structure.InterfacePart", "jetbrains.mps.baseLanguage.structure.IMemberContainer", "jetbrains.mps.lang.core.structure.ScopeProvider").references("constructor").children(new String[]{"method"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptEnumConstantReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EnumConstantReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.ScopeProvider").references("enumClass", "enumConstantDeclaration").alias(".<enum>", "enumeration constant reference").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptEnumValueOfExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EnumValueOfExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("enumClass").children(new String[]{"value"}, new boolean[]{false}).alias("valueOf", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptEnumValuesExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EnumValuesExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("enumClass").alias("values", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptEqualsExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EqualsExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("==", "equals operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptEscapeOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.EscapeOperation").super_("jetbrains.mps.baseLanguage.structure.BaseStringOperation").parents("jetbrains.mps.baseLanguage.structure.BaseStringOperation").alias("escape", "escape quotation marks, back slashes, etc.").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Expression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExpressionStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ExpressionStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IWrapper").children(new String[]{"expression"}, new boolean[]{false}).alias("", "expression statement").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptFieldDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.FieldDeclaration").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.lang.core.structure.IResolveInfo", "jetbrains.mps.baseLanguage.structure.IBLDeprecatable", "jetbrains.mps.lang.traceable.structure.TraceableConcept", "jetbrains.mps.lang.core.structure.InterfacePart").properties("isVolatile", "isTransient").alias("field", "").create();
  /*package*/ final ConceptDescriptor myConceptFieldReferenceOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").references("fieldDeclaration").alias("", "instance field reference").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptFloatType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.FloatType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("float", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptFloatingPointConstant = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.FloatingPointConstant").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("floating point constant (double)", "floating point constant (double)").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptFloatingPointFloatConstant = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.FloatingPointFloatConstant").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("floating point constant (float)", "floating point constant (float)").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptForStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ForStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractForStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractForStatement", "jetbrains.mps.lang.traceable.structure.ScopeConcept").children(new String[]{"condition", "iteration", "additionalVar"}, new boolean[]{false, true, true}).alias("for", "for(type name = init; condition; update)").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptForeachStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ForeachStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractForStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractForStatement", "jetbrains.mps.lang.traceable.structure.ScopeConcept").children(new String[]{"iterable"}, new boolean[]{false}).alias("for", "for (type name : iterable)").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGenericDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.GenericDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"typeVariableDeclaration"}, new boolean[]{true}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptGenericNewExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.GenericNewExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"creator"}, new boolean[]{false}).alias("new", "instance creation expression").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetAccessor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.GetAccessor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IMethodLike", "jetbrains.mps.baseLanguage.structure.IStatementListContainer").children(new String[]{"statementList"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptGreaterThanExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.GreaterThanExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").alias(">", "greater than operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGreaterThanOrEqualsExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").alias(">=", "greater than or equals operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptHasAnnotation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.HasAnnotation").interface_().children(new String[]{"annotation"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptHexIntegerLiteral = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.HexIntegerLiteral").super_("jetbrains.mps.baseLanguage.structure.IntegerLiteral").parents("jetbrains.mps.baseLanguage.structure.IntegerLiteral").properties("value").alias("0x", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIAnonymousClass = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IAnonymousClass").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIBLDeprecatable = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IBLDeprecatable").interface_().parents("jetbrains.mps.lang.core.structure.IDeprecatable").properties("isDeprecated").create();
  /*package*/ final ConceptDescriptor myConceptIBinaryLike = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IBinaryLike").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIClassifier = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IClassifier").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIClassifierMember = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IClassifierMember").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIClassifierType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IClassifierType").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIContainsStatementList = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IContainsStatementList").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIControlFlowInterrupter = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIExtractMethodAvailable = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIFinalWrapper = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IFinalWrapper").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIGenericType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IGenericType").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIHasModifiers = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IHasModifiers").interface_().children(new String[]{"modifiers"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptIIncompleteParen = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IIncompleteParen").interface_().properties("count").create();
  /*package*/ final ConceptDescriptor myConceptIInternalType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IInternalType").interface_().create();
  /*package*/ final ConceptDescriptor myConceptILocalDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ILocalDeclaration").interface_().create();
  /*package*/ final ConceptDescriptor myConceptILocalReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ILocalReference").interface_().create();
  /*package*/ final ConceptDescriptor myConceptILocalVariableElement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ILocalVariableElement").interface_().create();
  /*package*/ final ConceptDescriptor myConceptILocalVariableElementList = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ILocalVariableElementList").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIMemberContainer = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IMemberContainer").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIMethodCall = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IMethodCall").interface_().parents("jetbrains.mps.baseLanguage.structure.TypeDerivable", "jetbrains.mps.baseLanguage.structure.TypeAnnotable").references("baseMethodDeclaration").children(new String[]{"actualArgument", "typeArgument"}, new boolean[]{true, true}).create();
  /*package*/ final ConceptDescriptor myConceptIMethodLike = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IMethodLike").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IOperation").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIParameter = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IParameter").interface_().create();
  /*package*/ final ConceptDescriptor myConceptISkipsReturn = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ISkipsReturn").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIStatementListContainer = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IStatementListContainer").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIStaticContainerForMethods = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IStaticContainerForMethods").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIThisExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IThisExpression").interface_().create();
  /*package*/ final ConceptDescriptor myConceptITryCatchStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ITryCatchStatement").interface_().create();
  /*package*/ final ConceptDescriptor myConceptITypeApplicable = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ITypeApplicable").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIValidIdentifier = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IValidIdentifier").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptIVariableAssignment = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IVariableAssignment").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIVariableDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IVariableDeclaration").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptIVariableReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IVariableReference").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIVisible = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IVisible").interface_().children(new String[]{"visibility"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptIWillBeClassifier = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IWillBeClassifier").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIYetUnresolved = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IYetUnresolved").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIfStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IfStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.IContainsStatementList", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("forceOneLine", "forceMultiLine").children(new String[]{"condition", "ifFalseStatement", "ifTrue", "elsifClauses"}, new boolean[]{false, false, false, true}).alias("if", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptImplicitAnnotationInstanceValue = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ImplicitAnnotationInstanceValue").super_("jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue").parents("jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").create();
  /*package*/ final ConceptDescriptor myConceptImplicitAnnotationMethodKind = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ImplicitAnnotationMethodKind").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIncompleteLeftParen = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute", "jetbrains.mps.baseLanguage.structure.IIncompleteParen").alias("(", "").create();
  /*package*/ final ConceptDescriptor myConceptIncompleteMemberDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("static", "final", "abstract", "synchronized", "volatile", "transient", "native").children(new String[]{"type"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptIncompleteRightParen = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IncompleteRightParen").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute", "jetbrains.mps.baseLanguage.structure.IIncompleteParen").alias(")", "").create();
  /*package*/ final ConceptDescriptor myConceptInstanceInitializer = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.InstanceInitializer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.baseLanguage.structure.IStatementListContainer", "jetbrains.mps.lang.core.structure.ImplementationPart").children(new String[]{"statementList"}, new boolean[]{false}).alias("{", "").create();
  /*package*/ final ConceptDescriptor myConceptInstanceMethodCallOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation", "jetbrains.mps.baseLanguage.structure.IMethodCall").references("instanceMethodDeclaration").alias("", "instance method call").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInstanceMethodDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.MethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.MethodDeclaration", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.baseLanguage.structure.ITypeApplicable", "jetbrains.mps.lang.core.structure.InterfacePart").properties("isAbstract").alias("method", "").create();
  /*package*/ final ConceptDescriptor myConceptInstanceOfExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.InstanceOfExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"leftExpression", "classType"}, new boolean[]{false, false}).alias("instanceof", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIntegerConstant = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IntegerConstant").super_("jetbrains.mps.baseLanguage.structure.IntegerLiteral").parents("jetbrains.mps.baseLanguage.structure.IntegerLiteral", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("integer constant", "integer constant").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIntegerLiteral = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IntegerLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIntegerType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IntegerType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("int", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInterface = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Interface").super_("jetbrains.mps.baseLanguage.structure.Classifier").parents("jetbrains.mps.baseLanguage.structure.Classifier", "jetbrains.mps.baseLanguage.structure.IBLDeprecatable", "jetbrains.mps.lang.traceable.structure.UnitConcept", "jetbrains.mps.lang.core.structure.InterfacePart").children(new String[]{"extendedInterface"}, new boolean[]{true}).alias("interface", "Interface declaration").create();
  /*package*/ final ConceptDescriptor myConceptIsEmptyOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IsEmptyOperation").super_("jetbrains.mps.baseLanguage.structure.StringBooleanOperation").parents("jetbrains.mps.baseLanguage.structure.StringBooleanOperation").alias("isEmpty", "string is null or empty").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIsNotEmptyOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.IsNotEmptyOperation").super_("jetbrains.mps.baseLanguage.structure.StringBooleanOperation").parents("jetbrains.mps.baseLanguage.structure.StringBooleanOperation").alias("isNotEmpty", "string is not null and not empty").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptJavaImport = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.JavaImport").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.Tokens").properties("onDemand", "static").alias("java import", "").create();
  /*package*/ final ConceptDescriptor myConceptJavaImports = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.JavaImports").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").children(new String[]{"entries"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptLeftShiftAssignmentExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LeftShiftAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("<<=", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLessThanExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LessThanExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").alias("<", "less then operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLessThanOrEqualsExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryCompareOperation").alias("<=", "less then or equals operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLocalInstanceFieldReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("fieldDeclaration").alias("", "local instance field reference").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLocalInstanceMethodCall = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall").super_("jetbrains.mps.baseLanguage.structure.LocalMethodCall").parents("jetbrains.mps.baseLanguage.structure.LocalMethodCall", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("instanceMethodDeclaration").alias("", "local instance method call").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLocalMethodCall = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalMethodCall").super_("jetbrains.mps.baseLanguage.structure.BaseMethodCall").parents("jetbrains.mps.baseLanguage.structure.BaseMethodCall").references("method").alias("", "local method invocation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLocalPropertyReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalPropertyReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("property").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLocalStaticFieldReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalStaticFieldReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("staticFieldDeclaration").alias("", "reference to local static field declaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLocalStaticMethodCall = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall").super_("jetbrains.mps.baseLanguage.structure.LocalMethodCall").parents("jetbrains.mps.baseLanguage.structure.LocalMethodCall", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("staticMethodDeclaration").alias("", "local static method invocation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLocalToMethodKind = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalToMethodKind").interface_().create();
  /*package*/ final ConceptDescriptor myConceptLocalVariableDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration", "jetbrains.mps.lang.core.structure.IResolveInfo", "jetbrains.mps.baseLanguage.structure.IVariableAssignment", "jetbrains.mps.baseLanguage.structure.IVariableDeclaration", "jetbrains.mps.baseLanguage.structure.ILocalDeclaration", "jetbrains.mps.lang.core.structure.ScopeProvider").alias("<type> <var>", "local variable declaration").staticScope(StaticScope.ROOT).create();
  /*package*/ final ConceptDescriptor myConceptLocalVariableDeclarationStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IWrapper").children(new String[]{"localVariableDeclaration"}, new boolean[]{false}).alias("<type> <var>;", "local variable declaration statement").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLocalVariableReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LocalVariableReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("localVariableDeclaration").alias("", "reference to local variable declaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLongLiteral = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LongLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLongType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LongType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("long", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLoopLabel = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LoopLabel").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.LocalToMethodKind", "jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptLoopLabelReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LoopLabelReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("loopLabel").create();
  /*package*/ final ConceptDescriptor myConceptLowerBoundType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.LowerBoundType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"bound"}, new boolean[]{false}).alias("? super", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMethodDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.MethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", "jetbrains.mps.lang.core.structure.IResolveInfo").properties("isNative").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptMinusAssignmentExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.MinusAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("-=", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMinusExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.MinusExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("-", "minus operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptModifier = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Modifier").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptMulAssignmentExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.MulAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("*=", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMulExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.MulExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("*", "multiplication operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNPEEqualsExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.NPEEqualsExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias(":eq:", "NPE-safe equals operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNPENotEqualsExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.NPENotEqualsExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias(":ne:", "NPE-safe not equals operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNotEqualsExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.NotEqualsExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("!=", "not equals operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNotExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.NotExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"expression"}, new boolean[]{false}).alias("!", "not-expression").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNullLiteral = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.NullLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("null", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNullType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.NullType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("nulltype", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNumber = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Number").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").create();
  /*package*/ final ConceptDescriptor myConceptOperationAssignmentExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptOrAssignmentExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.OrAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("|=", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptOrExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.OrExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("||", "conditional-or operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptParameterDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ParameterDeclaration").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration", "jetbrains.mps.lang.core.structure.IResolveInfo", "jetbrains.mps.baseLanguage.structure.IVariableAssignment", "jetbrains.mps.lang.core.structure.InterfacePart").alias("", "parameter").staticScope(StaticScope.ROOT).create();
  /*package*/ final ConceptDescriptor myConceptParameterReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ParameterReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("parameterDeclaration").alias("", "reference to method parameter").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptParenthesizedExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"expression"}, new boolean[]{false}).alias("(expr)", "parenthesis").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPlaceholderMember = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PlaceholderMember").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").create();
  /*package*/ final ConceptDescriptor myConceptPlaceholderMethodDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PlaceholderMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("empty line", "Use PlaceholderMember instead").create();
  /*package*/ final ConceptDescriptor myConceptPlusAssignmentExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PlusAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("+=", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPlusExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PlusExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("+", "plus operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPostfixDecrementExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PostfixDecrementExpression").super_("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").parents("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").alias("postfix decrement", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPostfixIncrementExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PostfixIncrementExpression").super_("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").parents("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").alias("postfix increment", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPrefixDecrementExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PrefixDecrementExpression").super_("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").parents("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").alias("--", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPrefixIncrementExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PrefixIncrementExpression").super_("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").parents("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").alias("++", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPrimitiveClassExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"primitiveType"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPrimitiveType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PrimitiveType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPrivateVisibility = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PrivateVisibility").super_("jetbrains.mps.baseLanguage.structure.Visibility").parents("jetbrains.mps.baseLanguage.structure.Visibility").alias("private", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptProperty = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Property").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.InterfacePart").properties("propertyName").children(new String[]{"type", "propertyImplementation"}, new boolean[]{false, false}).alias("property", "").create();
  /*package*/ final ConceptDescriptor myConceptPropertyImplementation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PropertyImplementation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptPropertyReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PropertyReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").references("property").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPropertyValueReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PropertyValueReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("owningProperty").alias("", "Property value represented in custom getters and setters").create();
  /*package*/ final ConceptDescriptor myConceptProtectedVisibility = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ProtectedVisibility").super_("jetbrains.mps.baseLanguage.structure.Visibility").parents("jetbrains.mps.baseLanguage.structure.Visibility").alias("protected", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPublicVisibility = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.PublicVisibility").super_("jetbrains.mps.baseLanguage.structure.Visibility").parents("jetbrains.mps.baseLanguage.structure.Visibility").alias("public", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRemAssignmentExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.RemAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("%=", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRemExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.RemExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("%", "remainder operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRemarkStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.RemarkStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("//", "remark").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptReturnStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ReturnStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.TypeDerivable").children(new String[]{"expression"}, new boolean[]{false}).alias("return", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRightShiftAssignmentExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.RightShiftAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias(">>=", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSetAccessor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SetAccessor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IMethodLike", "jetbrains.mps.baseLanguage.structure.IStatementListContainer").children(new String[]{"statementList"}, new boolean[]{false}).alias("setter", "").create();
  /*package*/ final ConceptDescriptor myConceptShiftLeftExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ShiftLeftExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").alias("<<", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptShiftRightExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ShiftRightExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").alias(">>", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptShiftRightUnsignedExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ShiftRightUnsignedExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation").alias(">>>", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptShortType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ShortType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("short", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSingleLineComment = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SingleLineComment").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"commentPart"}, new boolean[]{true}).alias("//", "single-line comment").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Statement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.ILocalVariableElement", "jetbrains.mps.lang.traceable.structure.TraceableConcept", "jetbrains.mps.lang.core.structure.ICanSuppressErrors").alias("<statement>", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptStatementCommentPart = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StatementCommentPart").super_("jetbrains.mps.baseLanguage.structure.CommentPart").parents("jetbrains.mps.baseLanguage.structure.CommentPart").children(new String[]{"commentedStatement"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptStatementList = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StatementList").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IContainer", "jetbrains.mps.baseLanguage.structure.ILocalVariableElementList", "jetbrains.mps.lang.core.structure.ImplementationWithStubPart", "jetbrains.mps.lang.traceable.structure.ScopeConcept", "jetbrains.mps.lang.core.structure.ScopeProvider", "jetbrains.mps.lang.core.structure.ScopeFacade").children(new String[]{"statement"}, new boolean[]{true}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptStaticFieldDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.baseLanguage.structure.StaticKind", "jetbrains.mps.lang.core.structure.IResolveInfo", "jetbrains.mps.baseLanguage.structure.IBLDeprecatable", "jetbrains.mps.lang.traceable.structure.TraceableConcept", "jetbrains.mps.lang.core.structure.InterfacePart").properties("isVolatile", "isTransient").alias("static field", "static field declaration").create();
  /*package*/ final ConceptDescriptor myConceptStaticFieldReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StaticFieldReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference").references("classifier", "staticFieldDeclaration").alias(".<static field>", "reference to static field declaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptStaticInitializer = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StaticInitializer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.baseLanguage.structure.IStatementListContainer", "jetbrains.mps.lang.core.structure.ImplementationPart").children(new String[]{"statementList"}, new boolean[]{false}).alias("static {", "").create();
  /*package*/ final ConceptDescriptor myConceptStaticKind = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StaticKind").interface_().create();
  /*package*/ final ConceptDescriptor myConceptStaticMethodCall = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StaticMethodCall").super_("jetbrains.mps.baseLanguage.structure.BaseMethodCall").parents("jetbrains.mps.baseLanguage.structure.BaseMethodCall").references("classConcept", "staticMethodDeclaration").alias(".<static method>", "static method invocation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptStaticMethodDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.MethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.MethodDeclaration", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.baseLanguage.structure.StaticKind", "jetbrains.mps.lang.core.structure.InterfacePart").alias("static method", "").create();
  /*package*/ final ConceptDescriptor myConceptStringBooleanOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StringBooleanOperation").super_("jetbrains.mps.baseLanguage.structure.BaseStringOperation").parents("jetbrains.mps.baseLanguage.structure.BaseStringOperation").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptStringLiteral = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StringLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("\"", "string literal").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptStringToken = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StringToken").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptStringType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StringType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("string", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptStubStatementList = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.StubStatementList").super_("jetbrains.mps.baseLanguage.structure.StatementList").parents("jetbrains.mps.baseLanguage.structure.StatementList", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").create();
  /*package*/ final ConceptDescriptor myConceptSubstringExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SubstringExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"operand", "startIndex", "endIndex"}, new boolean[]{false, false, false}).alias("[", "substing").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSuperConstructorInvocation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation").super_("jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement").parents("jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("super", "super constructor invocation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSuperConstructorKind = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SuperConstructorKind").interface_().create();
  /*package*/ final ConceptDescriptor myConceptSuperMethodCall = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SuperMethodCall").super_("jetbrains.mps.baseLanguage.structure.BaseMethodCall").parents("jetbrains.mps.baseLanguage.structure.BaseMethodCall").references("instanceMethodDeclaration").alias("super", "super method invocation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSuperMethodKind = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SuperMethodKind").interface_().create();
  /*package*/ final ConceptDescriptor myConceptSwitchCase = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SwitchCase").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"expression", "body"}, new boolean[]{false, false}).alias("case", "").create();
  /*package*/ final ConceptDescriptor myConceptSwitchStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SwitchStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.ScopeProvider").properties("label").children(new String[]{"expression", "case", "defaultBlock", "switchLabel"}, new boolean[]{false, true, false, false}).alias("switch", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSynchronizedStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.SynchronizedStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"expression", "block"}, new boolean[]{false, false}).alias("synchronized", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTernaryOperatorExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IBinaryLike").children(new String[]{"condition", "ifTrue", "ifFalse"}, new boolean[]{false, false, false}).alias("(expr) ? (expr) : expr", "ternary operator").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTextCommentPart = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TextCommentPart").super_("jetbrains.mps.baseLanguage.structure.CommentPart").parents("jetbrains.mps.baseLanguage.structure.CommentPart").properties("text").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptThisConstructorInvocation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation").super_("jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement").parents("jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("this", "this constructor invocation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptThisConstructorKind = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ThisConstructorKind").interface_().create();
  /*package*/ final ConceptDescriptor myConceptThisExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ThisExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IThisExpression").references("classConcept").alias("this", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptThrowStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ThrowStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"throwable"}, new boolean[]{false}).alias("throw", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTokens = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Tokens").interface_().properties("tokens").create();
  /*package*/ final ConceptDescriptor myConceptTrimOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TrimOperation").super_("jetbrains.mps.baseLanguage.structure.BaseStringOperation").parents("jetbrains.mps.baseLanguage.structure.BaseStringOperation").properties("trimKind").alias("trim", "trim white spaces, line breaks, tabs, etc.").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTryCatchStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TryCatchStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.IContainsStatementList", "jetbrains.mps.baseLanguage.structure.ITryCatchStatement").children(new String[]{"body", "catchClause"}, new boolean[]{false, true}).alias("try {...} catch", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTryStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TryStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.IContainsStatementList", "jetbrains.mps.baseLanguage.structure.ITryCatchStatement").children(new String[]{"body", "finallyBody", "catchClause"}, new boolean[]{false, false, true}).alias("try {...} finally", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Type").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IType", "jetbrains.mps.lang.core.structure.InterfacePart").abstract_().alias("", "a type").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTypeAnnotable = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TypeAnnotable").interface_().create();
  /*package*/ final ConceptDescriptor myConceptTypeDerivable = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TypeDerivable").interface_().create();
  /*package*/ final ConceptDescriptor myConceptTypeVariableDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "jetbrains.mps.lang.core.structure.IResolveInfo").properties("extends").children(new String[]{"bound", "auxBounds"}, new boolean[]{false, true}).create();
  /*package*/ final ConceptDescriptor myConceptTypeVariableReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.TypeVariableReference").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").references("typeVariableDeclaration").alias("", "reference to type variable").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptUnaryMinus = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnaryMinus").super_("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").parents("jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation").alias("-", "unary minus").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptUndefinedType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UndefinedType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("undefined", "undefined type").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptUnknownConsCall = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnknownConsCall").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.IMethodCall", "jetbrains.mps.baseLanguage.structure.IYetUnresolved", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("isSuper").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptUnknownDotCall = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnknownDotCall").super_("jetbrains.mps.baseLanguage.structure.UnknownNameRef").parents("jetbrains.mps.baseLanguage.structure.UnknownNameRef", "jetbrains.mps.baseLanguage.structure.IMethodCall", "jetbrains.mps.baseLanguage.structure.IYetUnresolved", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("callee").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptUnknownLocalCall = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnknownLocalCall").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IMethodCall", "jetbrains.mps.baseLanguage.structure.IYetUnresolved", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("callee").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptUnknownNameRef = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnknownNameRef").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.Tokens", "jetbrains.mps.baseLanguage.structure.IYetUnresolved", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptUnknownNew = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnknownNew").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IMethodCall", "jetbrains.mps.baseLanguage.structure.IYetUnresolved", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("className").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptUnresolvedNameReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnresolvedNameReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("resolveName").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptUnsignedRightShiftAssignmentExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UnsignedRightShiftAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias(">>>=", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptUpperBoundType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UpperBoundType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").children(new String[]{"bound"}, new boolean[]{false}).alias("? extends", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptUsingStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.UsingStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"resource", "body"}, new boolean[]{true, false}).alias("using(...)", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptValueParameter = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.ValueParameter").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("value", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptVarType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.VarType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("var", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptVariableArityType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.VariableArityType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").children(new String[]{"componentType"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptVariableDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.VariableDeclaration").super_("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration", "jetbrains.mps.baseLanguage.structure.HasAnnotation", "jetbrains.mps.baseLanguage.structure.TypeDerivable", "jetbrains.mps.baseLanguage.structure.TypeAnnotable", "jetbrains.mps.baseLanguage.structure.IVariableDeclaration", "jetbrains.mps.lang.core.structure.IResolveInfo").properties("isFinal").children(new String[]{"initializer"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptVariableReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.VariableReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.TypeAnnotable", "jetbrains.mps.baseLanguage.structure.IVariableReference", "jetbrains.mps.baseLanguage.structure.ILocalReference").references("variableDeclaration").alias("", "reference to variable").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptVisibility = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.Visibility").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptVoidType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.VoidType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("void", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptWhileStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.WhileStatement").super_("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").children(new String[]{"condition"}, new boolean[]{false}).alias("while", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptWildCardType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.WildCardType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("?", "wildcard type").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXorAssignmentExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.structure.XorAssignmentExpression").super_("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").parents("jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression").alias("^=", "").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractClassifierReference, myConceptAbstractCreator, myConceptAbstractForStatement, myConceptAbstractLoopStatement, myConceptAbstractOperation, myConceptAbstractUnaryNumberOperation, myConceptAdditionalForLoopVariable, myConceptAndAssignmentExpression, myConceptAndExpression, myConceptAnnotation, myConceptAnnotationInstance, myConceptAnnotationInstanceExpression, myConceptAnnotationInstanceValue, myConceptAnnotationMethodDeclaration, myConceptAnonymousClass, myConceptAnonymousClassCreator, myConceptArrayAccessExpression, myConceptArrayClassExpression, myConceptArrayCloneOperation, myConceptArrayCreator, myConceptArrayCreatorWithInitializer, myConceptArrayLengthOperation, myConceptArrayLiteral, myConceptArrayType, myConceptAsExpression, myConceptAssertStatement, myConceptAssignmentExpression, myConceptBLBottomType, myConceptBaseAssignmentExpression, myConceptBaseMethodCall, myConceptBaseMethodDeclaration, myConceptBaseStringOperation, myConceptBaseVariableDeclaration, myConceptBaseVariableReference, myConceptBinaryBitwiseOperation, myConceptBinaryCompareOperation, myConceptBinaryOperation, myConceptBitwiseAndExpression, myConceptBitwiseNotExpression, myConceptBitwiseOrExpression, myConceptBitwiseXorExpression, myConceptBlockStatement, myConceptBooleanConstant, myConceptBooleanType, myConceptBreakStatement, myConceptByteType, myConceptCastExpression, myConceptCatchClause, myConceptCharConstant, myConceptCharType, myConceptClassConcept, myConceptClassCreator, myConceptClassifier, myConceptClassifierClassExpression, myConceptClassifierMember, myConceptClassifierType, myConceptClosure, myConceptClosureParameter, myConceptClosureParameterReference, myConceptClosureoid, myConceptCommentPart, myConceptCommentedStatement, myConceptCommentedStatementsBlock, myConceptConceptFunction, myConceptConceptFunctionParameter, myConceptConstructorDeclaration, myConceptConstructorInvocationStatement, myConceptContextClassifierKind, myConceptContinueStatement, myConceptCustomPropertyImplementation, myConceptCustomSetterPropertyImplementation, myConceptDefaultClassCreator, myConceptDefaultGetAccessor, myConceptDefaultPropertyImplementation, myConceptDefaultSetAccessor, myConceptDimensionExpression, myConceptDivAssignmentExpression, myConceptDivExpression, myConceptDoWhileStatement, myConceptDotExpression, myConceptDoubleType, myConceptElsifClause, myConceptEnumClass, myConceptEnumConstantDeclaration, myConceptEnumConstantReference, myConceptEnumValueOfExpression, myConceptEnumValuesExpression, myConceptEqualsExpression, myConceptEscapeOperation, myConceptExpression, myConceptExpressionStatement, myConceptFieldDeclaration, myConceptFieldReferenceOperation, myConceptFloatType, myConceptFloatingPointConstant, myConceptFloatingPointFloatConstant, myConceptForStatement, myConceptForeachStatement, myConceptGenericDeclaration, myConceptGenericNewExpression, myConceptGetAccessor, myConceptGreaterThanExpression, myConceptGreaterThanOrEqualsExpression, myConceptHasAnnotation, myConceptHexIntegerLiteral, myConceptIAnonymousClass, myConceptIBLDeprecatable, myConceptIBinaryLike, myConceptIClassifier, myConceptIClassifierMember, myConceptIClassifierType, myConceptIContainsStatementList, myConceptIControlFlowInterrupter, myConceptIExtractMethodAvailable, myConceptIFinalWrapper, myConceptIGenericType, myConceptIHasModifiers, myConceptIIncompleteParen, myConceptIInternalType, myConceptILocalDeclaration, myConceptILocalReference, myConceptILocalVariableElement, myConceptILocalVariableElementList, myConceptIMemberContainer, myConceptIMethodCall, myConceptIMethodLike, myConceptIOperation, myConceptIParameter, myConceptISkipsReturn, myConceptIStatementListContainer, myConceptIStaticContainerForMethods, myConceptIThisExpression, myConceptITryCatchStatement, myConceptITypeApplicable, myConceptIValidIdentifier, myConceptIVariableAssignment, myConceptIVariableDeclaration, myConceptIVariableReference, myConceptIVisible, myConceptIWillBeClassifier, myConceptIYetUnresolved, myConceptIfStatement, myConceptImplicitAnnotationInstanceValue, myConceptImplicitAnnotationMethodKind, myConceptIncompleteLeftParen, myConceptIncompleteMemberDeclaration, myConceptIncompleteRightParen, myConceptInstanceInitializer, myConceptInstanceMethodCallOperation, myConceptInstanceMethodDeclaration, myConceptInstanceOfExpression, myConceptIntegerConstant, myConceptIntegerLiteral, myConceptIntegerType, myConceptInterface, myConceptIsEmptyOperation, myConceptIsNotEmptyOperation, myConceptJavaImport, myConceptJavaImports, myConceptLeftShiftAssignmentExpression, myConceptLessThanExpression, myConceptLessThanOrEqualsExpression, myConceptLocalInstanceFieldReference, myConceptLocalInstanceMethodCall, myConceptLocalMethodCall, myConceptLocalPropertyReference, myConceptLocalStaticFieldReference, myConceptLocalStaticMethodCall, myConceptLocalToMethodKind, myConceptLocalVariableDeclaration, myConceptLocalVariableDeclarationStatement, myConceptLocalVariableReference, myConceptLongLiteral, myConceptLongType, myConceptLoopLabel, myConceptLoopLabelReference, myConceptLowerBoundType, myConceptMethodDeclaration, myConceptMinusAssignmentExpression, myConceptMinusExpression, myConceptModifier, myConceptMulAssignmentExpression, myConceptMulExpression, myConceptNPEEqualsExpression, myConceptNPENotEqualsExpression, myConceptNotEqualsExpression, myConceptNotExpression, myConceptNullLiteral, myConceptNullType, myConceptNumber, myConceptOperationAssignmentExpression, myConceptOrAssignmentExpression, myConceptOrExpression, myConceptParameterDeclaration, myConceptParameterReference, myConceptParenthesizedExpression, myConceptPlaceholderMember, myConceptPlaceholderMethodDeclaration, myConceptPlusAssignmentExpression, myConceptPlusExpression, myConceptPostfixDecrementExpression, myConceptPostfixIncrementExpression, myConceptPrefixDecrementExpression, myConceptPrefixIncrementExpression, myConceptPrimitiveClassExpression, myConceptPrimitiveType, myConceptPrivateVisibility, myConceptProperty, myConceptPropertyImplementation, myConceptPropertyReference, myConceptPropertyValueReference, myConceptProtectedVisibility, myConceptPublicVisibility, myConceptRemAssignmentExpression, myConceptRemExpression, myConceptRemarkStatement, myConceptReturnStatement, myConceptRightShiftAssignmentExpression, myConceptSetAccessor, myConceptShiftLeftExpression, myConceptShiftRightExpression, myConceptShiftRightUnsignedExpression, myConceptShortType, myConceptSingleLineComment, myConceptStatement, myConceptStatementCommentPart, myConceptStatementList, myConceptStaticFieldDeclaration, myConceptStaticFieldReference, myConceptStaticInitializer, myConceptStaticKind, myConceptStaticMethodCall, myConceptStaticMethodDeclaration, myConceptStringBooleanOperation, myConceptStringLiteral, myConceptStringToken, myConceptStringType, myConceptStubStatementList, myConceptSubstringExpression, myConceptSuperConstructorInvocation, myConceptSuperConstructorKind, myConceptSuperMethodCall, myConceptSuperMethodKind, myConceptSwitchCase, myConceptSwitchStatement, myConceptSynchronizedStatement, myConceptTernaryOperatorExpression, myConceptTextCommentPart, myConceptThisConstructorInvocation, myConceptThisConstructorKind, myConceptThisExpression, myConceptThrowStatement, myConceptTokens, myConceptTrimOperation, myConceptTryCatchStatement, myConceptTryStatement, myConceptType, myConceptTypeAnnotable, myConceptTypeDerivable, myConceptTypeVariableDeclaration, myConceptTypeVariableReference, myConceptUnaryMinus, myConceptUndefinedType, myConceptUnknownConsCall, myConceptUnknownDotCall, myConceptUnknownLocalCall, myConceptUnknownNameRef, myConceptUnknownNew, myConceptUnresolvedNameReference, myConceptUnsignedRightShiftAssignmentExpression, myConceptUpperBoundType, myConceptUsingStatement, myConceptValueParameter, myConceptVarType, myConceptVariableArityType, myConceptVariableDeclaration, myConceptVariableReference, myConceptVisibility, myConceptVoidType, myConceptWhileStatement, myConceptWildCardType, myConceptXorAssignmentExpression);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0zk, conceptFqName)) {
      case 0:
        return myConceptAbstractClassifierReference;
      case 1:
        return myConceptAbstractCreator;
      case 2:
        return myConceptAbstractForStatement;
      case 3:
        return myConceptAbstractLoopStatement;
      case 4:
        return myConceptAbstractOperation;
      case 5:
        return myConceptAbstractUnaryNumberOperation;
      case 6:
        return myConceptAdditionalForLoopVariable;
      case 7:
        return myConceptAndAssignmentExpression;
      case 8:
        return myConceptAndExpression;
      case 9:
        return myConceptAnnotation;
      case 10:
        return myConceptAnnotationInstance;
      case 11:
        return myConceptAnnotationInstanceExpression;
      case 12:
        return myConceptAnnotationInstanceValue;
      case 13:
        return myConceptAnnotationMethodDeclaration;
      case 14:
        return myConceptAnonymousClass;
      case 15:
        return myConceptAnonymousClassCreator;
      case 16:
        return myConceptArrayAccessExpression;
      case 17:
        return myConceptArrayClassExpression;
      case 18:
        return myConceptArrayCloneOperation;
      case 19:
        return myConceptArrayCreator;
      case 20:
        return myConceptArrayCreatorWithInitializer;
      case 21:
        return myConceptArrayLengthOperation;
      case 22:
        return myConceptArrayLiteral;
      case 23:
        return myConceptArrayType;
      case 24:
        return myConceptAsExpression;
      case 25:
        return myConceptAssertStatement;
      case 26:
        return myConceptAssignmentExpression;
      case 27:
        return myConceptBLBottomType;
      case 28:
        return myConceptBaseAssignmentExpression;
      case 29:
        return myConceptBaseMethodCall;
      case 30:
        return myConceptBaseMethodDeclaration;
      case 31:
        return myConceptBaseStringOperation;
      case 32:
        return myConceptBaseVariableDeclaration;
      case 33:
        return myConceptBaseVariableReference;
      case 34:
        return myConceptBinaryBitwiseOperation;
      case 35:
        return myConceptBinaryCompareOperation;
      case 36:
        return myConceptBinaryOperation;
      case 37:
        return myConceptBitwiseAndExpression;
      case 38:
        return myConceptBitwiseNotExpression;
      case 39:
        return myConceptBitwiseOrExpression;
      case 40:
        return myConceptBitwiseXorExpression;
      case 41:
        return myConceptBlockStatement;
      case 42:
        return myConceptBooleanConstant;
      case 43:
        return myConceptBooleanType;
      case 44:
        return myConceptBreakStatement;
      case 45:
        return myConceptByteType;
      case 46:
        return myConceptCastExpression;
      case 47:
        return myConceptCatchClause;
      case 48:
        return myConceptCharConstant;
      case 49:
        return myConceptCharType;
      case 50:
        return myConceptClassConcept;
      case 51:
        return myConceptClassCreator;
      case 52:
        return myConceptClassifier;
      case 53:
        return myConceptClassifierClassExpression;
      case 54:
        return myConceptClassifierMember;
      case 55:
        return myConceptClassifierType;
      case 56:
        return myConceptClosure;
      case 57:
        return myConceptClosureParameter;
      case 58:
        return myConceptClosureParameterReference;
      case 59:
        return myConceptClosureoid;
      case 60:
        return myConceptCommentPart;
      case 61:
        return myConceptCommentedStatement;
      case 62:
        return myConceptCommentedStatementsBlock;
      case 63:
        return myConceptConceptFunction;
      case 64:
        return myConceptConceptFunctionParameter;
      case 65:
        return myConceptConstructorDeclaration;
      case 66:
        return myConceptConstructorInvocationStatement;
      case 67:
        return myConceptContextClassifierKind;
      case 68:
        return myConceptContinueStatement;
      case 69:
        return myConceptCustomPropertyImplementation;
      case 70:
        return myConceptCustomSetterPropertyImplementation;
      case 71:
        return myConceptDefaultClassCreator;
      case 72:
        return myConceptDefaultGetAccessor;
      case 73:
        return myConceptDefaultPropertyImplementation;
      case 74:
        return myConceptDefaultSetAccessor;
      case 75:
        return myConceptDimensionExpression;
      case 76:
        return myConceptDivAssignmentExpression;
      case 77:
        return myConceptDivExpression;
      case 78:
        return myConceptDoWhileStatement;
      case 79:
        return myConceptDotExpression;
      case 80:
        return myConceptDoubleType;
      case 81:
        return myConceptElsifClause;
      case 82:
        return myConceptEnumClass;
      case 83:
        return myConceptEnumConstantDeclaration;
      case 84:
        return myConceptEnumConstantReference;
      case 85:
        return myConceptEnumValueOfExpression;
      case 86:
        return myConceptEnumValuesExpression;
      case 87:
        return myConceptEqualsExpression;
      case 88:
        return myConceptEscapeOperation;
      case 89:
        return myConceptExpression;
      case 90:
        return myConceptExpressionStatement;
      case 91:
        return myConceptFieldDeclaration;
      case 92:
        return myConceptFieldReferenceOperation;
      case 93:
        return myConceptFloatType;
      case 94:
        return myConceptFloatingPointConstant;
      case 95:
        return myConceptFloatingPointFloatConstant;
      case 96:
        return myConceptForStatement;
      case 97:
        return myConceptForeachStatement;
      case 98:
        return myConceptGenericDeclaration;
      case 99:
        return myConceptGenericNewExpression;
      case 100:
        return myConceptGetAccessor;
      case 101:
        return myConceptGreaterThanExpression;
      case 102:
        return myConceptGreaterThanOrEqualsExpression;
      case 103:
        return myConceptHasAnnotation;
      case 104:
        return myConceptHexIntegerLiteral;
      case 105:
        return myConceptIAnonymousClass;
      case 106:
        return myConceptIBLDeprecatable;
      case 107:
        return myConceptIBinaryLike;
      case 108:
        return myConceptIClassifier;
      case 109:
        return myConceptIClassifierMember;
      case 110:
        return myConceptIClassifierType;
      case 111:
        return myConceptIContainsStatementList;
      case 112:
        return myConceptIControlFlowInterrupter;
      case 113:
        return myConceptIExtractMethodAvailable;
      case 114:
        return myConceptIFinalWrapper;
      case 115:
        return myConceptIGenericType;
      case 116:
        return myConceptIHasModifiers;
      case 117:
        return myConceptIIncompleteParen;
      case 118:
        return myConceptIInternalType;
      case 119:
        return myConceptILocalDeclaration;
      case 120:
        return myConceptILocalReference;
      case 121:
        return myConceptILocalVariableElement;
      case 122:
        return myConceptILocalVariableElementList;
      case 123:
        return myConceptIMemberContainer;
      case 124:
        return myConceptIMethodCall;
      case 125:
        return myConceptIMethodLike;
      case 126:
        return myConceptIOperation;
      case 127:
        return myConceptIParameter;
      case 128:
        return myConceptISkipsReturn;
      case 129:
        return myConceptIStatementListContainer;
      case 130:
        return myConceptIStaticContainerForMethods;
      case 131:
        return myConceptIThisExpression;
      case 132:
        return myConceptITryCatchStatement;
      case 133:
        return myConceptITypeApplicable;
      case 134:
        return myConceptIValidIdentifier;
      case 135:
        return myConceptIVariableAssignment;
      case 136:
        return myConceptIVariableDeclaration;
      case 137:
        return myConceptIVariableReference;
      case 138:
        return myConceptIVisible;
      case 139:
        return myConceptIWillBeClassifier;
      case 140:
        return myConceptIYetUnresolved;
      case 141:
        return myConceptIfStatement;
      case 142:
        return myConceptImplicitAnnotationInstanceValue;
      case 143:
        return myConceptImplicitAnnotationMethodKind;
      case 144:
        return myConceptIncompleteLeftParen;
      case 145:
        return myConceptIncompleteMemberDeclaration;
      case 146:
        return myConceptIncompleteRightParen;
      case 147:
        return myConceptInstanceInitializer;
      case 148:
        return myConceptInstanceMethodCallOperation;
      case 149:
        return myConceptInstanceMethodDeclaration;
      case 150:
        return myConceptInstanceOfExpression;
      case 151:
        return myConceptIntegerConstant;
      case 152:
        return myConceptIntegerLiteral;
      case 153:
        return myConceptIntegerType;
      case 154:
        return myConceptInterface;
      case 155:
        return myConceptIsEmptyOperation;
      case 156:
        return myConceptIsNotEmptyOperation;
      case 157:
        return myConceptJavaImport;
      case 158:
        return myConceptJavaImports;
      case 159:
        return myConceptLeftShiftAssignmentExpression;
      case 160:
        return myConceptLessThanExpression;
      case 161:
        return myConceptLessThanOrEqualsExpression;
      case 162:
        return myConceptLocalInstanceFieldReference;
      case 163:
        return myConceptLocalInstanceMethodCall;
      case 164:
        return myConceptLocalMethodCall;
      case 165:
        return myConceptLocalPropertyReference;
      case 166:
        return myConceptLocalStaticFieldReference;
      case 167:
        return myConceptLocalStaticMethodCall;
      case 168:
        return myConceptLocalToMethodKind;
      case 169:
        return myConceptLocalVariableDeclaration;
      case 170:
        return myConceptLocalVariableDeclarationStatement;
      case 171:
        return myConceptLocalVariableReference;
      case 172:
        return myConceptLongLiteral;
      case 173:
        return myConceptLongType;
      case 174:
        return myConceptLoopLabel;
      case 175:
        return myConceptLoopLabelReference;
      case 176:
        return myConceptLowerBoundType;
      case 177:
        return myConceptMethodDeclaration;
      case 178:
        return myConceptMinusAssignmentExpression;
      case 179:
        return myConceptMinusExpression;
      case 180:
        return myConceptModifier;
      case 181:
        return myConceptMulAssignmentExpression;
      case 182:
        return myConceptMulExpression;
      case 183:
        return myConceptNPEEqualsExpression;
      case 184:
        return myConceptNPENotEqualsExpression;
      case 185:
        return myConceptNotEqualsExpression;
      case 186:
        return myConceptNotExpression;
      case 187:
        return myConceptNullLiteral;
      case 188:
        return myConceptNullType;
      case 189:
        return myConceptNumber;
      case 190:
        return myConceptOperationAssignmentExpression;
      case 191:
        return myConceptOrAssignmentExpression;
      case 192:
        return myConceptOrExpression;
      case 193:
        return myConceptParameterDeclaration;
      case 194:
        return myConceptParameterReference;
      case 195:
        return myConceptParenthesizedExpression;
      case 196:
        return myConceptPlaceholderMember;
      case 197:
        return myConceptPlaceholderMethodDeclaration;
      case 198:
        return myConceptPlusAssignmentExpression;
      case 199:
        return myConceptPlusExpression;
      case 200:
        return myConceptPostfixDecrementExpression;
      case 201:
        return myConceptPostfixIncrementExpression;
      case 202:
        return myConceptPrefixDecrementExpression;
      case 203:
        return myConceptPrefixIncrementExpression;
      case 204:
        return myConceptPrimitiveClassExpression;
      case 205:
        return myConceptPrimitiveType;
      case 206:
        return myConceptPrivateVisibility;
      case 207:
        return myConceptProperty;
      case 208:
        return myConceptPropertyImplementation;
      case 209:
        return myConceptPropertyReference;
      case 210:
        return myConceptPropertyValueReference;
      case 211:
        return myConceptProtectedVisibility;
      case 212:
        return myConceptPublicVisibility;
      case 213:
        return myConceptRemAssignmentExpression;
      case 214:
        return myConceptRemExpression;
      case 215:
        return myConceptRemarkStatement;
      case 216:
        return myConceptReturnStatement;
      case 217:
        return myConceptRightShiftAssignmentExpression;
      case 218:
        return myConceptSetAccessor;
      case 219:
        return myConceptShiftLeftExpression;
      case 220:
        return myConceptShiftRightExpression;
      case 221:
        return myConceptShiftRightUnsignedExpression;
      case 222:
        return myConceptShortType;
      case 223:
        return myConceptSingleLineComment;
      case 224:
        return myConceptStatement;
      case 225:
        return myConceptStatementCommentPart;
      case 226:
        return myConceptStatementList;
      case 227:
        return myConceptStaticFieldDeclaration;
      case 228:
        return myConceptStaticFieldReference;
      case 229:
        return myConceptStaticInitializer;
      case 230:
        return myConceptStaticKind;
      case 231:
        return myConceptStaticMethodCall;
      case 232:
        return myConceptStaticMethodDeclaration;
      case 233:
        return myConceptStringBooleanOperation;
      case 234:
        return myConceptStringLiteral;
      case 235:
        return myConceptStringToken;
      case 236:
        return myConceptStringType;
      case 237:
        return myConceptStubStatementList;
      case 238:
        return myConceptSubstringExpression;
      case 239:
        return myConceptSuperConstructorInvocation;
      case 240:
        return myConceptSuperConstructorKind;
      case 241:
        return myConceptSuperMethodCall;
      case 242:
        return myConceptSuperMethodKind;
      case 243:
        return myConceptSwitchCase;
      case 244:
        return myConceptSwitchStatement;
      case 245:
        return myConceptSynchronizedStatement;
      case 246:
        return myConceptTernaryOperatorExpression;
      case 247:
        return myConceptTextCommentPart;
      case 248:
        return myConceptThisConstructorInvocation;
      case 249:
        return myConceptThisConstructorKind;
      case 250:
        return myConceptThisExpression;
      case 251:
        return myConceptThrowStatement;
      case 252:
        return myConceptTokens;
      case 253:
        return myConceptTrimOperation;
      case 254:
        return myConceptTryCatchStatement;
      case 255:
        return myConceptTryStatement;
      case 256:
        return myConceptType;
      case 257:
        return myConceptTypeAnnotable;
      case 258:
        return myConceptTypeDerivable;
      case 259:
        return myConceptTypeVariableDeclaration;
      case 260:
        return myConceptTypeVariableReference;
      case 261:
        return myConceptUnaryMinus;
      case 262:
        return myConceptUndefinedType;
      case 263:
        return myConceptUnknownConsCall;
      case 264:
        return myConceptUnknownDotCall;
      case 265:
        return myConceptUnknownLocalCall;
      case 266:
        return myConceptUnknownNameRef;
      case 267:
        return myConceptUnknownNew;
      case 268:
        return myConceptUnresolvedNameReference;
      case 269:
        return myConceptUnsignedRightShiftAssignmentExpression;
      case 270:
        return myConceptUpperBoundType;
      case 271:
        return myConceptUsingStatement;
      case 272:
        return myConceptValueParameter;
      case 273:
        return myConceptVarType;
      case 274:
        return myConceptVariableArityType;
      case 275:
        return myConceptVariableDeclaration;
      case 276:
        return myConceptVariableReference;
      case 277:
        return myConceptVisibility;
      case 278:
        return myConceptVoidType;
      case 279:
        return myConceptWhileStatement;
      case 280:
        return myConceptWildCardType;
      case 281:
        return myConceptXorAssignmentExpression;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0zk = new String[]{"jetbrains.mps.baseLanguage.structure.AbstractClassifierReference", "jetbrains.mps.baseLanguage.structure.AbstractCreator", "jetbrains.mps.baseLanguage.structure.AbstractForStatement", "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement", "jetbrains.mps.baseLanguage.structure.AbstractOperation", "jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation", "jetbrains.mps.baseLanguage.structure.AdditionalForLoopVariable", "jetbrains.mps.baseLanguage.structure.AndAssignmentExpression", "jetbrains.mps.baseLanguage.structure.AndExpression", "jetbrains.mps.baseLanguage.structure.Annotation", "jetbrains.mps.baseLanguage.structure.AnnotationInstance", "jetbrains.mps.baseLanguage.structure.AnnotationInstanceExpression", "jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue", "jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration", "jetbrains.mps.baseLanguage.structure.AnonymousClass", "jetbrains.mps.baseLanguage.structure.AnonymousClassCreator", "jetbrains.mps.baseLanguage.structure.ArrayAccessExpression", "jetbrains.mps.baseLanguage.structure.ArrayClassExpression", "jetbrains.mps.baseLanguage.structure.ArrayCloneOperation", "jetbrains.mps.baseLanguage.structure.ArrayCreator", "jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializer", "jetbrains.mps.baseLanguage.structure.ArrayLengthOperation", "jetbrains.mps.baseLanguage.structure.ArrayLiteral", "jetbrains.mps.baseLanguage.structure.ArrayType", "jetbrains.mps.baseLanguage.structure.AsExpression", "jetbrains.mps.baseLanguage.structure.AssertStatement", "jetbrains.mps.baseLanguage.structure.AssignmentExpression", "jetbrains.mps.baseLanguage.structure.BLBottomType", "jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression", "jetbrains.mps.baseLanguage.structure.BaseMethodCall", "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", "jetbrains.mps.baseLanguage.structure.BaseStringOperation", "jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration", "jetbrains.mps.baseLanguage.structure.BaseVariableReference", "jetbrains.mps.baseLanguage.structure.BinaryBitwiseOperation", "jetbrains.mps.baseLanguage.structure.BinaryCompareOperation", "jetbrains.mps.baseLanguage.structure.BinaryOperation", "jetbrains.mps.baseLanguage.structure.BitwiseAndExpression", "jetbrains.mps.baseLanguage.structure.BitwiseNotExpression", "jetbrains.mps.baseLanguage.structure.BitwiseOrExpression", "jetbrains.mps.baseLanguage.structure.BitwiseXorExpression", "jetbrains.mps.baseLanguage.structure.BlockStatement", "jetbrains.mps.baseLanguage.structure.BooleanConstant", "jetbrains.mps.baseLanguage.structure.BooleanType", "jetbrains.mps.baseLanguage.structure.BreakStatement", "jetbrains.mps.baseLanguage.structure.ByteType", "jetbrains.mps.baseLanguage.structure.CastExpression", "jetbrains.mps.baseLanguage.structure.CatchClause", "jetbrains.mps.baseLanguage.structure.CharConstant", "jetbrains.mps.baseLanguage.structure.CharType", "jetbrains.mps.baseLanguage.structure.ClassConcept", "jetbrains.mps.baseLanguage.structure.ClassCreator", "jetbrains.mps.baseLanguage.structure.Classifier", "jetbrains.mps.baseLanguage.structure.ClassifierClassExpression", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.baseLanguage.structure.ClassifierType", "jetbrains.mps.baseLanguage.structure.Closure", "jetbrains.mps.baseLanguage.structure.ClosureParameter", "jetbrains.mps.baseLanguage.structure.ClosureParameterReference", "jetbrains.mps.baseLanguage.structure.Closureoid", "jetbrains.mps.baseLanguage.structure.CommentPart", "jetbrains.mps.baseLanguage.structure.CommentedStatement", "jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock", "jetbrains.mps.baseLanguage.structure.ConceptFunction", "jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration", "jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement", "jetbrains.mps.baseLanguage.structure.ContextClassifierKind", "jetbrains.mps.baseLanguage.structure.ContinueStatement", "jetbrains.mps.baseLanguage.structure.CustomPropertyImplementation", "jetbrains.mps.baseLanguage.structure.CustomSetterPropertyImplementation", "jetbrains.mps.baseLanguage.structure.DefaultClassCreator", "jetbrains.mps.baseLanguage.structure.DefaultGetAccessor", "jetbrains.mps.baseLanguage.structure.DefaultPropertyImplementation", "jetbrains.mps.baseLanguage.structure.DefaultSetAccessor", "jetbrains.mps.baseLanguage.structure.DimensionExpression", "jetbrains.mps.baseLanguage.structure.DivAssignmentExpression", "jetbrains.mps.baseLanguage.structure.DivExpression", "jetbrains.mps.baseLanguage.structure.DoWhileStatement", "jetbrains.mps.baseLanguage.structure.DotExpression", "jetbrains.mps.baseLanguage.structure.DoubleType", "jetbrains.mps.baseLanguage.structure.ElsifClause", "jetbrains.mps.baseLanguage.structure.EnumClass", "jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration", "jetbrains.mps.baseLanguage.structure.EnumConstantReference", "jetbrains.mps.baseLanguage.structure.EnumValueOfExpression", "jetbrains.mps.baseLanguage.structure.EnumValuesExpression", "jetbrains.mps.baseLanguage.structure.EqualsExpression", "jetbrains.mps.baseLanguage.structure.EscapeOperation", "jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.ExpressionStatement", "jetbrains.mps.baseLanguage.structure.FieldDeclaration", "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation", "jetbrains.mps.baseLanguage.structure.FloatType", "jetbrains.mps.baseLanguage.structure.FloatingPointConstant", "jetbrains.mps.baseLanguage.structure.FloatingPointFloatConstant", "jetbrains.mps.baseLanguage.structure.ForStatement", "jetbrains.mps.baseLanguage.structure.ForeachStatement", "jetbrains.mps.baseLanguage.structure.GenericDeclaration", "jetbrains.mps.baseLanguage.structure.GenericNewExpression", "jetbrains.mps.baseLanguage.structure.GetAccessor", "jetbrains.mps.baseLanguage.structure.GreaterThanExpression", "jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression", "jetbrains.mps.baseLanguage.structure.HasAnnotation", "jetbrains.mps.baseLanguage.structure.HexIntegerLiteral", "jetbrains.mps.baseLanguage.structure.IAnonymousClass", "jetbrains.mps.baseLanguage.structure.IBLDeprecatable", "jetbrains.mps.baseLanguage.structure.IBinaryLike", "jetbrains.mps.baseLanguage.structure.IClassifier", "jetbrains.mps.baseLanguage.structure.IClassifierMember", "jetbrains.mps.baseLanguage.structure.IClassifierType", "jetbrains.mps.baseLanguage.structure.IContainsStatementList", "jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter", "jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable", "jetbrains.mps.baseLanguage.structure.IFinalWrapper", "jetbrains.mps.baseLanguage.structure.IGenericType", "jetbrains.mps.baseLanguage.structure.IHasModifiers", "jetbrains.mps.baseLanguage.structure.IIncompleteParen", "jetbrains.mps.baseLanguage.structure.IInternalType", "jetbrains.mps.baseLanguage.structure.ILocalDeclaration", "jetbrains.mps.baseLanguage.structure.ILocalReference", "jetbrains.mps.baseLanguage.structure.ILocalVariableElement", "jetbrains.mps.baseLanguage.structure.ILocalVariableElementList", "jetbrains.mps.baseLanguage.structure.IMemberContainer", "jetbrains.mps.baseLanguage.structure.IMethodCall", "jetbrains.mps.baseLanguage.structure.IMethodLike", "jetbrains.mps.baseLanguage.structure.IOperation", "jetbrains.mps.baseLanguage.structure.IParameter", "jetbrains.mps.baseLanguage.structure.ISkipsReturn", "jetbrains.mps.baseLanguage.structure.IStatementListContainer", "jetbrains.mps.baseLanguage.structure.IStaticContainerForMethods", "jetbrains.mps.baseLanguage.structure.IThisExpression", "jetbrains.mps.baseLanguage.structure.ITryCatchStatement", "jetbrains.mps.baseLanguage.structure.ITypeApplicable", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "jetbrains.mps.baseLanguage.structure.IVariableAssignment", "jetbrains.mps.baseLanguage.structure.IVariableDeclaration", "jetbrains.mps.baseLanguage.structure.IVariableReference", "jetbrains.mps.baseLanguage.structure.IVisible", "jetbrains.mps.baseLanguage.structure.IWillBeClassifier", "jetbrains.mps.baseLanguage.structure.IYetUnresolved", "jetbrains.mps.baseLanguage.structure.IfStatement", "jetbrains.mps.baseLanguage.structure.ImplicitAnnotationInstanceValue", "jetbrains.mps.baseLanguage.structure.ImplicitAnnotationMethodKind", "jetbrains.mps.baseLanguage.structure.IncompleteLeftParen", "jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration", "jetbrains.mps.baseLanguage.structure.IncompleteRightParen", "jetbrains.mps.baseLanguage.structure.InstanceInitializer", "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation", "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", "jetbrains.mps.baseLanguage.structure.InstanceOfExpression", "jetbrains.mps.baseLanguage.structure.IntegerConstant", "jetbrains.mps.baseLanguage.structure.IntegerLiteral", "jetbrains.mps.baseLanguage.structure.IntegerType", "jetbrains.mps.baseLanguage.structure.Interface", "jetbrains.mps.baseLanguage.structure.IsEmptyOperation", "jetbrains.mps.baseLanguage.structure.IsNotEmptyOperation", "jetbrains.mps.baseLanguage.structure.JavaImport", "jetbrains.mps.baseLanguage.structure.JavaImports", "jetbrains.mps.baseLanguage.structure.LeftShiftAssignmentExpression", "jetbrains.mps.baseLanguage.structure.LessThanExpression", "jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression", "jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference", "jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall", "jetbrains.mps.baseLanguage.structure.LocalMethodCall", "jetbrains.mps.baseLanguage.structure.LocalPropertyReference", "jetbrains.mps.baseLanguage.structure.LocalStaticFieldReference", "jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall", "jetbrains.mps.baseLanguage.structure.LocalToMethodKind", "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", "jetbrains.mps.baseLanguage.structure.LocalVariableReference", "jetbrains.mps.baseLanguage.structure.LongLiteral", "jetbrains.mps.baseLanguage.structure.LongType", "jetbrains.mps.baseLanguage.structure.LoopLabel", "jetbrains.mps.baseLanguage.structure.LoopLabelReference", "jetbrains.mps.baseLanguage.structure.LowerBoundType", "jetbrains.mps.baseLanguage.structure.MethodDeclaration", "jetbrains.mps.baseLanguage.structure.MinusAssignmentExpression", "jetbrains.mps.baseLanguage.structure.MinusExpression", "jetbrains.mps.baseLanguage.structure.Modifier", "jetbrains.mps.baseLanguage.structure.MulAssignmentExpression", "jetbrains.mps.baseLanguage.structure.MulExpression", "jetbrains.mps.baseLanguage.structure.NPEEqualsExpression", "jetbrains.mps.baseLanguage.structure.NPENotEqualsExpression", "jetbrains.mps.baseLanguage.structure.NotEqualsExpression", "jetbrains.mps.baseLanguage.structure.NotExpression", "jetbrains.mps.baseLanguage.structure.NullLiteral", "jetbrains.mps.baseLanguage.structure.NullType", "jetbrains.mps.baseLanguage.structure.Number", "jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression", "jetbrains.mps.baseLanguage.structure.OrAssignmentExpression", "jetbrains.mps.baseLanguage.structure.OrExpression", "jetbrains.mps.baseLanguage.structure.ParameterDeclaration", "jetbrains.mps.baseLanguage.structure.ParameterReference", "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", "jetbrains.mps.baseLanguage.structure.PlaceholderMember", "jetbrains.mps.baseLanguage.structure.PlaceholderMethodDeclaration", "jetbrains.mps.baseLanguage.structure.PlusAssignmentExpression", "jetbrains.mps.baseLanguage.structure.PlusExpression", "jetbrains.mps.baseLanguage.structure.PostfixDecrementExpression", "jetbrains.mps.baseLanguage.structure.PostfixIncrementExpression", "jetbrains.mps.baseLanguage.structure.PrefixDecrementExpression", "jetbrains.mps.baseLanguage.structure.PrefixIncrementExpression", "jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression", "jetbrains.mps.baseLanguage.structure.PrimitiveType", "jetbrains.mps.baseLanguage.structure.PrivateVisibility", "jetbrains.mps.baseLanguage.structure.Property", "jetbrains.mps.baseLanguage.structure.PropertyImplementation", "jetbrains.mps.baseLanguage.structure.PropertyReference", "jetbrains.mps.baseLanguage.structure.PropertyValueReference", "jetbrains.mps.baseLanguage.structure.ProtectedVisibility", "jetbrains.mps.baseLanguage.structure.PublicVisibility", "jetbrains.mps.baseLanguage.structure.RemAssignmentExpression", "jetbrains.mps.baseLanguage.structure.RemExpression", "jetbrains.mps.baseLanguage.structure.RemarkStatement", "jetbrains.mps.baseLanguage.structure.ReturnStatement", "jetbrains.mps.baseLanguage.structure.RightShiftAssignmentExpression", "jetbrains.mps.baseLanguage.structure.SetAccessor", "jetbrains.mps.baseLanguage.structure.ShiftLeftExpression", "jetbrains.mps.baseLanguage.structure.ShiftRightExpression", "jetbrains.mps.baseLanguage.structure.ShiftRightUnsignedExpression", "jetbrains.mps.baseLanguage.structure.ShortType", "jetbrains.mps.baseLanguage.structure.SingleLineComment", "jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.StatementCommentPart", "jetbrains.mps.baseLanguage.structure.StatementList", "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration", "jetbrains.mps.baseLanguage.structure.StaticFieldReference", "jetbrains.mps.baseLanguage.structure.StaticInitializer", "jetbrains.mps.baseLanguage.structure.StaticKind", "jetbrains.mps.baseLanguage.structure.StaticMethodCall", "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration", "jetbrains.mps.baseLanguage.structure.StringBooleanOperation", "jetbrains.mps.baseLanguage.structure.StringLiteral", "jetbrains.mps.baseLanguage.structure.StringToken", "jetbrains.mps.baseLanguage.structure.StringType", "jetbrains.mps.baseLanguage.structure.StubStatementList", "jetbrains.mps.baseLanguage.structure.SubstringExpression", "jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation", "jetbrains.mps.baseLanguage.structure.SuperConstructorKind", "jetbrains.mps.baseLanguage.structure.SuperMethodCall", "jetbrains.mps.baseLanguage.structure.SuperMethodKind", "jetbrains.mps.baseLanguage.structure.SwitchCase", "jetbrains.mps.baseLanguage.structure.SwitchStatement", "jetbrains.mps.baseLanguage.structure.SynchronizedStatement", "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression", "jetbrains.mps.baseLanguage.structure.TextCommentPart", "jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation", "jetbrains.mps.baseLanguage.structure.ThisConstructorKind", "jetbrains.mps.baseLanguage.structure.ThisExpression", "jetbrains.mps.baseLanguage.structure.ThrowStatement", "jetbrains.mps.baseLanguage.structure.Tokens", "jetbrains.mps.baseLanguage.structure.TrimOperation", "jetbrains.mps.baseLanguage.structure.TryCatchStatement", "jetbrains.mps.baseLanguage.structure.TryStatement", "jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.TypeAnnotable", "jetbrains.mps.baseLanguage.structure.TypeDerivable", "jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration", "jetbrains.mps.baseLanguage.structure.TypeVariableReference", "jetbrains.mps.baseLanguage.structure.UnaryMinus", "jetbrains.mps.baseLanguage.structure.UndefinedType", "jetbrains.mps.baseLanguage.structure.UnknownConsCall", "jetbrains.mps.baseLanguage.structure.UnknownDotCall", "jetbrains.mps.baseLanguage.structure.UnknownLocalCall", "jetbrains.mps.baseLanguage.structure.UnknownNameRef", "jetbrains.mps.baseLanguage.structure.UnknownNew", "jetbrains.mps.baseLanguage.structure.UnresolvedNameReference", "jetbrains.mps.baseLanguage.structure.UnsignedRightShiftAssignmentExpression", "jetbrains.mps.baseLanguage.structure.UpperBoundType", "jetbrains.mps.baseLanguage.structure.UsingStatement", "jetbrains.mps.baseLanguage.structure.ValueParameter", "jetbrains.mps.baseLanguage.structure.VarType", "jetbrains.mps.baseLanguage.structure.VariableArityType", "jetbrains.mps.baseLanguage.structure.VariableDeclaration", "jetbrains.mps.baseLanguage.structure.VariableReference", "jetbrains.mps.baseLanguage.structure.Visibility", "jetbrains.mps.baseLanguage.structure.VoidType", "jetbrains.mps.baseLanguage.structure.WhileStatement", "jetbrains.mps.baseLanguage.structure.WildCardType", "jetbrains.mps.baseLanguage.structure.XorAssignmentExpression"};
}
