package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class DefaultClassCreator extends AbstractCreator {
  public static final String concept = "jetbrains.mps.baseLanguage.structure.DefaultClassCreator";
  public static final String CLASSIFIER = "classifier";
  public static final String TYPE_PARAMETER = "typeParameter";

  public DefaultClassCreator(SNode node) {
    super(node);
  }

  public Classifier getClassifier() {
    return (Classifier) this.getReferent(Classifier.class, DefaultClassCreator.CLASSIFIER);
  }

  public void setClassifier(Classifier node) {
    super.setReferent(DefaultClassCreator.CLASSIFIER, node);
  }

  public int getTypeParametersCount() {
    return this.getChildCount(DefaultClassCreator.TYPE_PARAMETER);
  }

  public Iterator<Type> typeParameters() {
    return this.children(Type.class, DefaultClassCreator.TYPE_PARAMETER);
  }

  public List<Type> getTypeParameters() {
    return this.getChildren(Type.class, DefaultClassCreator.TYPE_PARAMETER);
  }

  public void addTypeParameter(Type node) {
    this.addChild(DefaultClassCreator.TYPE_PARAMETER, node);
  }

  public void insertTypeParameter(Type prev, Type node) {
    this.insertChild(prev, DefaultClassCreator.TYPE_PARAMETER, node);
  }

  public static DefaultClassCreator newInstance(SModel sm, boolean init) {
    return (DefaultClassCreator) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DefaultClassCreator", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static DefaultClassCreator newInstance(SModel sm) {
    return DefaultClassCreator.newInstance(sm, false);
  }
}
