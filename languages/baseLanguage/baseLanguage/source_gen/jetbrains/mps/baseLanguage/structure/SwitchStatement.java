package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.ScopeProvider;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class SwitchStatement extends Statement implements ScopeProvider {
  public static final String concept = "jetbrains.mps.baseLanguage.structure.SwitchStatement";
  public static final String LABEL = "label";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String EXPRESSION = "expression";
  public static final String DEFAULT_BLOCK = "defaultBlock";
  public static final String SWITCH_LABEL = "switchLabel";
  public static final String CASE = "case";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public SwitchStatement(SNode node) {
    super(node);
  }

  public String getLabel() {
    return this.getProperty(SwitchStatement.LABEL);
  }

  public void setLabel(String value) {
    this.setProperty(SwitchStatement.LABEL, value);
  }

  public String getShortDescription() {
    return this.getProperty(SwitchStatement.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(SwitchStatement.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(SwitchStatement.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(SwitchStatement.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(SwitchStatement.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(SwitchStatement.VIRTUAL_PACKAGE, value);
  }

  public Expression getExpression() {
    return (Expression) this.getChild(Expression.class, SwitchStatement.EXPRESSION);
  }

  public void setExpression(Expression node) {
    super.setChild(SwitchStatement.EXPRESSION, node);
  }

  public StatementList getDefaultBlock() {
    return (StatementList) this.getChild(StatementList.class, SwitchStatement.DEFAULT_BLOCK);
  }

  public void setDefaultBlock(StatementList node) {
    super.setChild(SwitchStatement.DEFAULT_BLOCK, node);
  }

  public LoopLabel getSwitchLabel() {
    return (LoopLabel) this.getChild(LoopLabel.class, SwitchStatement.SWITCH_LABEL);
  }

  public void setSwitchLabel(LoopLabel node) {
    super.setChild(SwitchStatement.SWITCH_LABEL, node);
  }

  public int getCasesCount() {
    return this.getChildCount(SwitchStatement.CASE);
  }

  public Iterator<SwitchCase> cases() {
    return this.children(SwitchCase.class, SwitchStatement.CASE);
  }

  public List<SwitchCase> getCases() {
    return this.getChildren(SwitchCase.class, SwitchStatement.CASE);
  }

  public void addCase(SwitchCase node) {
    this.addChild(SwitchStatement.CASE, node);
  }

  public void insertCase(SwitchCase prev, SwitchCase node) {
    this.insertChild(prev, SwitchStatement.CASE, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(SwitchStatement.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, SwitchStatement.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, SwitchStatement.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(SwitchStatement.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, SwitchStatement.SMODEL_ATTRIBUTE, node);
  }

  public static SwitchStatement newInstance(SModel sm, boolean init) {
    return (SwitchStatement) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.SwitchStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static SwitchStatement newInstance(SModel sm) {
    return SwitchStatement.newInstance(sm, false);
  }
}
