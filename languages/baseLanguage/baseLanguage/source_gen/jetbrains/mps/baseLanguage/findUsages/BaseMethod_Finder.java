package jetbrains.mps.baseLanguage.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.IScope;
import java.util.List;
import jetbrains.mps.progress.ProgressMonitor;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.ide.findusages.view.FindUtils;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.baseLanguage.behavior.ClassConcept_Behavior;
import jetbrains.mps.baseLanguage.behavior.Classifier_Behavior;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.behavior.BaseMethodDeclaration_Behavior;

public class BaseMethod_Finder extends GeneratedFinder {
  private static Logger LOG = LogManager.getLogger("jetbrains.mps.baseLanguage.findUsages.BaseMethod_Finder");

  public BaseMethod_Finder() {
  }

  @Override
  public String getDescription() {
    return "Base Methods";
  }

  @Override
  public String getLongDescription() {
    return "";
  }

  @Override
  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration";
  }

  @Override
  public boolean isApplicable(SNode node) {
    if (SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false) == null && SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.Interface", false, false) == null) {
      return false;
    }
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) && !(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"))) {
      return false;
    }
    return true;
  }

  @Override
  protected void doFind(SNode node, IScope scope, List<SNode> _results, ProgressMonitor monitor) {
    try {
      monitor.start("Base method", 3);
      List<SNode> allAncestors = new ArrayList<SNode>();
      SNode method = node;
      boolean isStatic = SNodeOperations.isInstanceOf(method, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");
      SNode classNode = SNodeOperations.getAncestor(method, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
      SNode interfaceNode = SNodeOperations.getAncestor(method, "jetbrains.mps.baseLanguage.structure.Interface", false, false);
      if (classNode != null) {
        ListSequence.fromList(allAncestors).addElement(classNode);
        ListSequence.fromList(allAncestors).addSequence(ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.ClassAncestors_Finder", classNode, scope, monitor.subTask(1))));
        ListSequence.fromList(allAncestors).addSequence(ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.ImplementedInterfaces_Finder", classNode, scope, monitor.subTask(1))));
      } else if (interfaceNode != null) {
        ListSequence.fromList(allAncestors).addElement(interfaceNode);
        ListSequence.fromList(allAncestors).addSequence(ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.InterfaceAncestors_Finder", interfaceNode, scope, monitor.subTask(1))));
        monitor.advance(1);
      }
      Set<SNode> results = SetSequence.fromSet(new HashSet<SNode>());
      for (SNode ancestor : ListSequence.fromList(allAncestors)) {
        Iterable<SNode> classMethods = null;
        if (isStatic) {
          if (SNodeOperations.isInstanceOf(ancestor, "jetbrains.mps.baseLanguage.structure.ClassConcept")) {
            classMethods = ClassConcept_Behavior.call_staticMethods_5292274854859435867(SNodeOperations.cast(ancestor, "jetbrains.mps.baseLanguage.structure.ClassConcept"));
          }
        } else {
          if (SNodeOperations.isInstanceOf(ancestor, "jetbrains.mps.baseLanguage.structure.ClassConcept")) {
            classMethods = Classifier_Behavior.call_methods_5292274854859311639(SNodeOperations.cast(ancestor, "jetbrains.mps.baseLanguage.structure.ClassConcept"));
          } else {
            classMethods = Classifier_Behavior.call_methods_5292274854859311639(SNodeOperations.cast(ancestor, "jetbrains.mps.baseLanguage.structure.Interface"));
          }
        }
        for (SNode classMethod : Sequence.fromIterable(classMethods)) {
          if (BaseMethodDeclaration_Behavior.call_hasSameSignature_1213877350435(classMethod, method)) {
            SetSequence.fromSet(results).addElement(classMethod);
          }
        }
      }
      for (SNode result : SetSequence.fromSet(results)) {
        ListSequence.fromList(_results).addElement(result);
      }
    } finally {
      monitor.done();
    }
  }

  @Override
  public String getNodeCategory(SNode node) {
    return "Base methods";
  }
}
