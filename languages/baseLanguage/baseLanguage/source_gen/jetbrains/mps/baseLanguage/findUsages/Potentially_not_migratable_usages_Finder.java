package jetbrains.mps.baseLanguage.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IScope;
import java.util.List;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.scripts.NonMigratableUsagesFinder;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class Potentially_not_migratable_usages_Finder extends GeneratedFinder {
  private static Logger LOG = LogManager.getLogger("jetbrains.mps.baseLanguage.findUsages.Potentially_not_migratable_usages_Finder");

  public Potentially_not_migratable_usages_Finder() {
  }

  @Override
  public String getDescription() {
    return "Potentially not migratable usages";
  }

  @Override
  public String getLongDescription() {
    return "";
  }

  @Override
  public String getConcept() {
    return "jetbrains.mps.lang.structure.structure.LinkDeclaration";
  }

  @Override
  protected void doFind(SNode node, IScope scope, List<SNode> _results, ProgressMonitor monitor) {
    monitor.start(getDescription(), 0);
    try {
      for (SNode result : Sequence.fromIterable(NonMigratableUsagesFinder.findNonMigratableUsages(node))) {
        ListSequence.fromList(_results).addElement(result);
      }
    } finally {
      monitor.done();
    }
  }
}
