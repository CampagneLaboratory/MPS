package jetbrains.mps.baseLanguage.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import jetbrains.mps.logging.Logger;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.ide.findusages.model.scopes.ModelsScope;
import java.util.List;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.ide.findusages.view.FindUtils;

public class InterfaceAncestors_Finder extends GeneratedFinder {
  private static Logger LOG = Logger.getLogger("jetbrains.mps.baseLanguage.findUsages.InterfaceAncestors_Finder");

  public InterfaceAncestors_Finder() {
  }

  public boolean isVisible(SNode node, IScope scope) {
    return ListSequence.fromList(SLinkOperations.getTargets(node, "extendedInterface", true)).isNotEmpty();
  }

  @Override
  public boolean isVisible(SNode node) {
    return isVisible(node, new ModelsScope(node.getModel()));
  }

  @Override
  public String getDescription() {
    return "Interface Ancestors";
  }

  @Override
  public String getLongDescription() {
    return "";
  }

  @Override
  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.Interface";
  }

  @Override
  protected void doFind(SNode node, IScope scope, List<SNode> _results, ProgressMonitor monitor) {
    monitor.start(getDescription(), 1);
    try {
      if (ListSequence.fromList(SLinkOperations.getTargets(node, "extendedInterface", true)).isEmpty()) {
        return;
      }
      SNode current = node;
      for (SNode ancestor : ListSequence.fromList(SLinkOperations.getTargets(current, "extendedInterface", true))) {
        SNode ancestorNode = (SNode) SLinkOperations.getTarget(ancestor, "classifier", false);
        ListSequence.fromList(_results).addElement(ancestorNode);
        for (SNode ancestorAncestor : ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.baseLanguage.findUsages.InterfaceAncestors_Finder", ancestorNode, scope, monitor.subTask(1)))) {
          ListSequence.fromList(_results).addElement(ancestorAncestor);
        }
      }
    } finally {
      monitor.done();
    }
  }

  @Override
  public String getNodeCategory(SNode node) {
    return "Ancestor";
  }
}
