package jetbrains.mps.baseLanguage.refactorings;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.BaseRefactoring;
import jetbrains.mps.lang.core.refactorings.Rename;
import jetbrains.mps.refactoring.framework.IRefactoringTarget;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.util.plugin.refactorings.RenameUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.util.plugin.refactorings.MethodRefactoringUtils;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.project.GlobalScope;

public class RenameMethod extends BaseRefactoring {
  public RenameMethod() {
    this.addTransientParameter("newName");
    this.addTransientParameter("refactorOverriding");
  }

  public String getUserFriendlyName() {
    return "Rename Method";
  }

  public Class getOverridenRefactoringClass() {
    return Rename.class;
  }

  public IRefactoringTarget getRefactoringTarget() {
    return new RenameMethod_Target();
  }

  public void refactor(final RefactoringContext refactoringContext) {
    SNode method = RenameUtil.getMethodDeclaration(refactoringContext.getSelectedNode());
    if (((Boolean) refactoringContext.getParameter("refactorOverriding"))) {
      for (SNode node : ListSequence.fromList(MethodRefactoringUtils.findOverridingMethods(method, new EmptyProgressMonitor()))) {
        SPropertyOperations.set(node, "name", ((String) refactoringContext.getParameter("newName")));
      }
    }
    SPropertyOperations.set(method, "name", ((String) refactoringContext.getParameter("newName")));
  }

  public List<SModel> getModelsToGenerate(final RefactoringContext refactoringContext) {
    return (List<SModel>) refactoringContext.getModelsFromUsages(refactoringContext.getSelectedModel());
  }

  public SearchResults getAffectedNodes(final RefactoringContext refactoringContext) {
    SNode method = RenameUtil.getMethodDeclaration(refactoringContext.getSelectedNode());
    if (SNodeOperations.isInstanceOf(method, "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration")) {
      return FindUtils.getSearchResults(new EmptyProgressMonitor(), method, GlobalScope.getInstance(), "jetbrains.mps.baseLanguage.findUsages.ExactMethodUsages_Finder", "jetbrains.mps.lang.behavior.findUsages.OverridingMethods_Finder");
    } else {
      return (((Boolean) refactoringContext.getParameter("refactorOverriding")) != null && ((Boolean) refactoringContext.getParameter("refactorOverriding")) ?
        FindUtils.getSearchResults(new EmptyProgressMonitor(), method, GlobalScope.getInstance(), "jetbrains.mps.baseLanguage.findUsages.BaseMethodUsages_Finder") :
        FindUtils.getSearchResults(new EmptyProgressMonitor(), method, GlobalScope.getInstance(), "jetbrains.mps.baseLanguage.findUsages.ExactMethodUsages_Finder")
      );
    }
  }
}
