package jetbrains.mps.baseLanguage.refactorings;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.util.plugin.refactorings.MethodRefactoringUtils;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class SafeDeleteMethod {
  private SNode myMethod;

  public SafeDeleteMethod(SNode method) {
    myMethod = method;
  }

  public void doRefactor() {
    for (SNode method : ListSequence.fromList(MethodRefactoringUtils.findOverridingMethods(myMethod, new EmptyProgressMonitor()))) {
      if (SNodeOperations.isInstanceOf(method, "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration")) {
        SNode methodDecl = SNodeOperations.cast(method, "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration");
        SLinkOperations.setTarget(methodDecl, "overriddenMethod", getNewOverriddenMethod(myMethod), false);
      }
    }
    SNodeOperations.deleteNode(myMethod);
  }

  private SNode getNewOverriddenMethod(SNode methodDecl) {
    return SLinkOperations.getTarget(methodDecl, "overriddenMethod", false);
  }
}
