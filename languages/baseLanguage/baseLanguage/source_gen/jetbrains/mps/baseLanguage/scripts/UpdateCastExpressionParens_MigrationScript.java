package jetbrains.mps.baseLanguage.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.actions.PrecedenceUtil;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class UpdateCastExpressionParens_MigrationScript extends BaseMigrationScript {
  public UpdateCastExpressionParens_MigrationScript(IOperationContext operationContext) {
    super("Add missing parentheses to CastExpressions");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Find CaseExpressions with required but missing parens around their nested expressions adn add them";
      }

      public String getAdditionalInfo() {
        return "Find CaseExpressions with required but missing parens around their nested expressions adn add them";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.baseLanguage.structure.CastExpression";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression")) && PrecedenceUtil.needsParensAroundCastExpression(node);
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode expression = SLinkOperations.getTarget(node, "expression", true);
        SNode result = SNodeFactoryOperations.replaceWithNewChild(expression, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression");
        SLinkOperations.setTarget(result, "expression", expression, true);
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
}
