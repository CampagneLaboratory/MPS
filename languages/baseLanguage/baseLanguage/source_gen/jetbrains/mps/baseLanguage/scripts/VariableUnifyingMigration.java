package jetbrains.mps.baseLanguage.scripts;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.CopyUtil;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;

public class VariableUnifyingMigration {
  private VariableUnifyingMigration() {
  }

  public static List<AbstractMigrationRefactoring> forConcept(SNode referenceConcept, SNode targetConcept) {
    List<AbstractMigrationRefactoring> refactorings = ListSequence.fromList(new ArrayList<AbstractMigrationRefactoring>());

    MigrationConfig config = getMigrationConfig(referenceConcept, targetConcept);
    ListSequence.fromList(refactorings).addSequence(ListSequence.fromList(Migrations.migrateConcept(config)));
    ListSequence.fromList(refactorings).addElement(migrateSpecializedLinkAccess(referenceConcept, targetConcept));

    return refactorings;
  }

  private static AbstractMigrationRefactoring migrateSpecializedLinkAccess(final SNode referenceConcept, final SNode targetConcept) {
    final SNode linkDeclaration = ListSequence.fromList(SLinkOperations.getTargets(referenceConcept, "linkDeclaration", true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "target", false) == targetConcept;
      }
    });
    if (linkDeclaration == null) {
      throw new IllegalArgumentException();
    }

    return new SimpleMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SLinkAccess")) {
      public String getName() {
        return "Migrate specialized link reference access for " + SPropertyOperations.getString(referenceConcept, "name");
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return SLinkOperations.getTarget(node, "link", false) == linkDeclaration;
      }

      public void doUpdateInstanceNode(SNode node) {
        SLinkOperations.setTarget(node, "link", SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference", "variableDeclaration"), false);
        // <node> 
      }
    };
  }

  public static MigrationConfig getMigrationConfig(SNode referenceConcept, SNode targetConcept) {
    return new MigrationConfig(referenceConcept, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference")) {
      public SNode createCondition(SNode arg) {
        // <node> 
        return new VariableUnifyingMigration.QuotationClass_u7t7ux_a0b0a0a0a0c().createNode(targetConcept, arg);
      }

      @Override
      public boolean isConditionNonTrivial() {
        return true;
      }

      public SNode migrateInstanceNode(SNode node) {
        SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference", null);
        SLinkOperations.setTarget(result, "variableDeclaration", SLinkOperations.getTarget(node, "variableDeclaration", false), false);
        // copy smodel attributes 
        for (SNode attribute : SLinkOperations.getTargets(node, "smodelAttribute", true)) {
          SNode copy = SNodeOperations.cast(CopyUtil.copyAndPreserveId(attribute), "jetbrains.mps.lang.core.structure.Attribute");
          ListSequence.fromList(SNodeOperations.getChildren(result, SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.core.structure.BaseConcept", "smodelAttribute"))).addElement(copy);
        }
        result.setId(node.getSNodeId());
        return result;
      }

      @Override
      public boolean isInstanceNodeMigrationNonTrivial() {
        return true;
      }
    };
  }

  public static class QuotationClass_u7t7ux_a0a2a0a1a2a0a3a1 {
    public QuotationClass_u7t7ux_a0a2a0a1a2a0a3a1() {
    }

    public SNode createNode(Object parameter_5, Object parameter_6) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        quotedNode1_3.setReferenceTarget("concept", (SNode) parameter_6);
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }

  public static class QuotationClass_u7t7ux_a0b0a0a0a0c {
    public QuotationClass_u7t7ux_a0b0a0a0a0c() {
    }

    public SNode createNode(Object parameter_13, Object parameter_14) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      SNode quotedNode_5 = null;
      SNode quotedNode_6 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_7 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_IsInstanceOfOperation", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_8 = quotedNode_2;
          {
            quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.RefConcept_Reference", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_9 = quotedNode_4;
            quotedNode1_9.setReferenceTarget("conceptDeclaration", (SNode) parameter_13);
            quotedNode_2.addChild("conceptArgument", quotedNode1_9);
          }
          quotedNode_1.addChild("operation", quotedNode1_8);
        }
        {
          quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_10 = quotedNode_3;
          {
            quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SLinkAccess", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_11 = quotedNode_5;
            quotedNode1_11.setReference("link", SReference.create("link", quotedNode1_11, SModelReference.fromString("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)"), SNodeId.fromString("1068581517664")));
            quotedNode_3.addChild("operation", quotedNode1_11);
          }
          {
            quotedNode_6 = (SNode) parameter_14;
            SNode quotedNode1_12;
            if (_parameterValues_129834374.contains(quotedNode_6)) {
              quotedNode1_12 = HUtil.copyIfNecessary(quotedNode_6);
            } else {
              _parameterValues_129834374.add(quotedNode_6);
              quotedNode1_12 = quotedNode_6;
            }
            if (quotedNode1_12 != null) {
              quotedNode_3.addChild("operand", HUtil.copyIfNecessary(quotedNode1_12));
            }
          }
          quotedNode_1.addChild("operand", quotedNode1_10);
        }
        result = quotedNode1_7;
      }
      return result;
    }
  }
}
