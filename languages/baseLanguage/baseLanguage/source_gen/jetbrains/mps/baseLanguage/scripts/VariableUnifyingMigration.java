package jetbrains.mps.baseLanguage.scripts;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.CopyUtil;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class VariableUnifyingMigration {
  private VariableUnifyingMigration() {
  }

  public static List<AbstractMigrationRefactoring> forConcept(SNode referenceConcept, SNode declarationConcept) {
    List<AbstractMigrationRefactoring> refactorings = ListSequence.fromList(new ArrayList<AbstractMigrationRefactoring>());

    MigrationConfig config = getMigrationConfig(referenceConcept, declarationConcept);
    ListSequence.fromList(refactorings).addSequence(ListSequence.fromList(Migrations.migrateConcept(config)));
    ListSequence.fromList(refactorings).addSequence(ListSequence.fromList(SpecialMigrations.migrateSpecializedLinkAccess(config, declarationConcept)));

    return refactorings;
  }

  public static MigrationConfig getMigrationConfig(SNode referenceConcept, final SNode declarationConcept) {
    return new MigrationConfig(referenceConcept, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference")) {
      @Override
      protected SNode createConditionInternal(SNode arg) {
        // <node> 
        return _quotation_createNode_u7t7ux_a1a0a0a0a2(arg, declarationConcept);
      }

      @Override
      public boolean isConditionNonTrivial() {
        return true;
      }

      @Override
      public SNode migrateInstanceNode(SNode node) {
        SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference", null);
        SLinkOperations.setTarget(result, "variableDeclaration", SLinkOperations.getTarget(node, "variableDeclaration", false), false);
        // copy smodel attributes 
        for (SNode attribute : SLinkOperations.getTargets(node, "smodelAttribute", true)) {
          SNode copy = SNodeOperations.cast(CopyUtil.copyAndPreserveId(attribute), "jetbrains.mps.lang.core.structure.Attribute");
          ListSequence.fromList(SNodeOperations.getChildren(result, SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.core.structure.BaseConcept", "smodelAttribute"))).addElement(copy);
        }
        return result;
      }

      @Override
      public boolean isInstanceNodeMigrationNonTrivial() {
        return true;
      }
    };
  }

  private static SNode _quotation_createNode_u7t7ux_a1a0a0a0a2(Object parameter_1, Object parameter_2) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SLinkAccess", null, null, GlobalScope.getInstance(), false);
    quotedNode_6.setReference("link", SReference.create("link", quotedNode_6, facade.createModelReference("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)"), facade.createNodeId("1068581517664")));
    quotedNode_4.addChild("operation", quotedNode_6);
    quotedNode_7 = (SNode) (parameter_1);
    if (quotedNode_7 != null) {
      quotedNode_4.addChild("operand", HUtil.copyIfNecessary(quotedNode_7));
    }
    quotedNode_3.addChild("operand", quotedNode_4);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_IsInstanceOfOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.RefConcept_Reference", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_8, "conceptDeclaration", (SNode) (parameter_2));
    quotedNode_5.addChild("conceptArgument", quotedNode_8);
    quotedNode_3.addChild("operation", quotedNode_5);
    return quotedNode_3;
  }
}
