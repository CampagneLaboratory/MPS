package jetbrains.mps.baseLanguage.scripts;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public abstract class SModelMethodMigration extends SimpleMigration {
  private final SNode sourceConcept;
  private final SNode smodelFunctionConcept;

  public SModelMethodMigration(SNode smodelFunctionConcept, MigrationConfig config) {
    super(smodelFunctionConcept);
    this.sourceConcept = config.sourceConcept;
    this.smodelFunctionConcept = smodelFunctionConcept;
  }

  @Override
  public String getName() {
    String functionAlias = SPropertyOperations.getString(SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(smodelFunctionConcept, "conceptProperty", true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getString(SLinkOperations.getTarget(it, "conceptPropertyDeclaration", false), "name").equals("alias");
      }
    }), "jetbrains.mps.lang.structure.structure.StringConceptProperty"), "value");
    return "Migrate " + functionAlias + "(" + SPropertyOperations.getString(sourceConcept, "name") + ") usages";
  }
}
