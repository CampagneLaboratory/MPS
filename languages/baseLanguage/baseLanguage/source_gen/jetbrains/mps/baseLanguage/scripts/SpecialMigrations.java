package jetbrains.mps.baseLanguage.scripts;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class SpecialMigrations {
  private SpecialMigrations() {
  }

  public static List<AbstractMigrationRefactoring> migrateSpecializedLinkAccess(final MigrationConfig config, final SNode linkTargetConcept) {
    // migrate all specialized link accesses to "base" link access 
    final SNode sourceLinkDeclaration = ListSequence.fromList(SLinkOperations.getTargets(config.sourceConcept, "linkDeclaration", true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "target", false) == linkTargetConcept;
      }
    });
    final SNode targetLinkDeclaration = SLinkOperations.getTarget(sourceLinkDeclaration, "specializedLink", false);
    if (sourceLinkDeclaration == null) {
      throw new IllegalArgumentException();
    }

    List<AbstractMigrationRefactoring> migrations = ListSequence.fromList(new ArrayList<AbstractMigrationRefactoring>());

    ListSequence.fromList(migrations).addElement(new SimpleMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SLinkAccess")) {
      public String getName() {
        return "Migrate specialized link reference access for " + SPropertyOperations.getString(config.sourceConcept, "name");
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return SLinkOperations.getTarget(node, "link", false) == sourceLinkDeclaration;
      }

      public void doUpdateInstanceNode(SNode node) {
        SLinkOperations.setTarget(node, "link", targetLinkDeclaration, false);
        // <node> 
      }
    });
    ListSequence.fromList(migrations).addElement(new SModelMethodMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_GetReferenceOperation"), config) {
      public boolean isApplicableInstanceNode(SNode node) {
        SNode qualifier = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "linkQualifier", true), "linkQualifier", true);
        return SNodeOperations.isInstanceOf(qualifier, "jetbrains.mps.lang.smodel.structure.LinkRefQualifier") && SLinkOperations.getTarget(SNodeOperations.cast(qualifier, "jetbrains.mps.lang.smodel.structure.LinkRefQualifier"), "link", false) == sourceLinkDeclaration;
      }

      public void doUpdateInstanceNode(SNode node) {
        SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "linkQualifier", true), "linkQualifier", true), "jetbrains.mps.lang.smodel.structure.LinkRefQualifier"), "link", targetLinkDeclaration, false);
      }
    });

    return migrations;
  }

  private static SNode _quotation_createNode_i1zgmn_a0c0a0b0c0a0a0h0b(Object parameter_1, Object parameter_2) {
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_3, "concept", (SNode) parameter_1);
    quotedNode_4 = (SNode) parameter_2;
    if (quotedNode_4 != null) {
      quotedNode_3.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode_4));
    }
    return quotedNode_3;
  }
}
