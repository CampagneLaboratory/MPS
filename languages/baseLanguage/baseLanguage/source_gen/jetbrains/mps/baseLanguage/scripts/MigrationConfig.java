package jetbrains.mps.baseLanguage.scripts;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public abstract class MigrationConfig {
  public final SNode sourceConcept;
  public final SNode targetConcept;
  public MigrationConfig(SNode sourceConcept, SNode targetConcept) {
    this.sourceConcept = sourceConcept;
    this.targetConcept = targetConcept;
  }
  public String getName() {
    return sourceConcept.getName() + " to " + targetConcept.getName() + " migration";
  }
  public boolean isConditionNonTrivial() {
    return false;
  }
  /**
   * 
   * 
   * @param arg expression with type "node<sourceConcept>"
   * @return condition expression with type "boolean", return expression simple as possible 
   */
  protected abstract SNode createConditionInternal(SNode arg);
  public boolean isInstanceNodeMigrationNonTrivial() {
    return false;
  }
  public abstract SNode migrateInstanceNode(SNode node);
  public final SNode createCondition(SNode arg) {
    SNode condition = createConditionInternal(arg);
    // todo: add simplifyings here! : (VariableReference) -> VariableReference 
    return condition;
  }
  public final boolean isPullUp() {
    return SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(sourceConcept), SNodeOperations.asSConcept(targetConcept));
  }
}
