package jetbrains.mps.baseLanguage.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AddNativeFlagToAllMethods_MigrationScript extends BaseMigrationScript {
  public AddNativeFlagToAllMethods_MigrationScript(IOperationContext operationContext) {
    super("Add native flag to all methods");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Add the native flag";
      }
      public String getAdditionalInfo() {
        return "Add the native flag";
      }
      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.baseLanguage.structure.MethodDeclaration";
      }
      public boolean isApplicableInstanceNode(SNode node) {
        return node.getProperty("isNative") == null;
      }
      public void doUpdateInstanceNode(SNode node) {
        SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6c6b6a1e379f9408L, 0x73f30e3df95c0b73L, "isNative"), "" + (false));
      }
      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
}
