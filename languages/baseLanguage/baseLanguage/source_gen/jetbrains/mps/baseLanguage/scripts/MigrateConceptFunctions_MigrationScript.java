package jetbrains.mps.baseLanguage.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class MigrateConceptFunctions_MigrationScript extends BaseMigrationScript {
  public MigrateConceptFunctions_MigrationScript(IOperationContext operationContext) {
    super("Migrate Concept Functions");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "return type";
      }

      public String getAdditionalInfo() {
        return "return type";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.structure.structure.AggregationConceptLink";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return SLinkOperations.getTarget(node, "conceptLinkDeclaration", false) == ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)", "1137021947720"), "jetbrains.mps.lang.structure.structure.AggregationConceptLinkDeclaration", false, new String[]{})).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return eq_3uyx8s_a0a0a0a0a0a0a3a0a0a0a1a0(SPropertyOperations.getString(it, "name"), "conceptFunctionReturnType");
          }
        });
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode concept = SNodeOperations.getAncestor(node, "jetbrains.mps.lang.structure.structure.ConceptDeclaration", false, false);
        SNode behavior = ((SNode) AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(concept, LanguageAspect.BEHAVIOR));
        if (behavior == null) {
          behavior = ((SNode) ConceptEditorHelper.createNewConceptAspectInstance(LanguageAspect.BEHAVIOR, concept, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.behavior.structure.ConceptBehavior")));
        }
        SNode q = SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.Quotation", null);
        SLinkOperations.setTarget(q, "quotedNode", SLinkOperations.getTarget(node, "target", true), true);
        ListSequence.fromList(SLinkOperations.getTargets(behavior, "method", true)).addElement(_quotation_createNode_49yvvj_a0a5a0a(q));
        SNodeOperations.deleteNode(node);
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "concept function parameter type";
      }

      public String getAdditionalInfo() {
        return "concept function parameter type";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.structure.structure.AggregationConceptLink";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return SLinkOperations.getTarget(node, "conceptLinkDeclaration", false) == ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)", "1107135704075"), "jetbrains.mps.lang.structure.structure.AggregationConceptLinkDeclaration", false, new String[]{})).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return eq_3uyx8s_a0a0a0a0a0a0a3a0a0a0a2a0(SPropertyOperations.getString(it, "name"), "conceptFunctionParameterType");
          }
        });
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode concept = SNodeOperations.getAncestor(node, "jetbrains.mps.lang.structure.structure.ConceptDeclaration", false, false);
        SNode behavior = ((SNode) AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(concept, LanguageAspect.BEHAVIOR));
        if (behavior == null) {
          behavior = ((SNode) ConceptEditorHelper.createNewConceptAspectInstance(LanguageAspect.BEHAVIOR, concept, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.behavior.structure.ConceptBehavior")));
        }
        SNode q = SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.Quotation", null);
        SLinkOperations.setTarget(q, "quotedNode", SLinkOperations.getTarget(node, "target", true), true);
        ListSequence.fromList(SLinkOperations.getTargets(behavior, "method", true)).addElement(_quotation_createNode_49yvvj_a0a5a0b(q));
        SNodeOperations.deleteNode(node);
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "throws items";
      }

      public String getAdditionalInfo() {
        return "throws items";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.structure.structure.ConceptDeclaration";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.lang.structure.structure.AggregationConceptLink", false, new String[]{})).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SLinkOperations.getTarget(it, "conceptLinkDeclaration", false) == ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)", "1137021947720"), "jetbrains.mps.lang.structure.structure.AggregationConceptLinkDeclaration", false, new String[]{})).findFirst(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return eq_3uyx8s_a0a0a0a0a0a0a0a0a0a0a3a0a0a0a3a0(SPropertyOperations.getString(it, "name"), "conceptFunctionThrowsType");
              }
            });
          }
        });
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode behavior = ((SNode) AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(node, LanguageAspect.BEHAVIOR));
        if (behavior == null) {
          behavior = ((SNode) ConceptEditorHelper.createNewConceptAspectInstance(LanguageAspect.BEHAVIOR, node, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.behavior.structure.ConceptBehavior")));
        }

        Iterable<SNode> links = Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getTargets(node, "conceptLink", true), "jetbrains.mps.lang.structure.structure.AggregationConceptLink")).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SLinkOperations.getTarget(it, "conceptLinkDeclaration", false) == ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)", "1137021947720"), "jetbrains.mps.lang.structure.structure.AggregationConceptLinkDeclaration", false, new String[]{})).findFirst(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return eq_3uyx8s_a0a0a0a0a0a0a0a0a0a0d0e0a0a0a0d0a(SPropertyOperations.getString(it, "name"), "conceptFunctionThrowsType");
              }
            });
          }
        });
        List<SNode> throwables = ((List<SNode>) Sequence.fromIterable(links).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SLinkOperations.getTarget(it, "target", true);
          }
        }).toListSequence());

        ListSequence.fromList(SLinkOperations.getTargets(behavior, "method", true)).addElement(_quotation_createNode_49yvvj_a0a6a0c(ListSequence.fromList(throwables).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            SNode res = SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.Quotation", null);
            SLinkOperations.setTarget(res, "quotedNode", it, true);
            return res;
          }
        }).toListSequence()));
        Sequence.fromIterable(links).visitAll(new IVisitor<SNode>() {
          public void visit(SNode l) {
            SNodeOperations.deleteNode(l);
          }
        });
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }

  private static SNode _quotation_createNode_49yvvj_a0a5a0a(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "isPrivate", "false");
    SNodeAccessUtil.setProperty(quotedNode_2, "name", "getExpectedReturnType");
    SNodeAccessUtil.setProperty(quotedNode_2, "isVirtual", "false");
    SNodeAccessUtil.setProperty(quotedNode_2, "isAbstract", "false");
    quotedNode_2.setReference("overriddenMethod", SReference.create("overriddenMethod", quotedNode_2, facade.createModelReference("r:00000000-0000-4000-0000-011c895902c0(jetbrains.mps.baseLanguage.behavior)"), facade.createNodeId("1213877374441")));
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, null, false);
    quotedNode_2.addChild("visibility", quotedNode_3);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, false);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, false);
    quotedNode_7 = (SNode) parameter_1;
    if (quotedNode_7 != null) {
      quotedNode_6.addChild("expression", HUtil.copyIfNecessary(quotedNode_7));
    }
    quotedNode_4.addChild("statement", quotedNode_6);
    quotedNode_2.addChild("body", quotedNode_4);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, false);
    quotedNode_2.addChild("returnType", quotedNode_5);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_49yvvj_a0a5a0b(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "name", "getType");
    SNodeAccessUtil.setProperty(quotedNode_2, "isVirtual", "false");
    SNodeAccessUtil.setProperty(quotedNode_2, "isAbstract", "false");
    quotedNode_2.setReference("overriddenMethod", SReference.create("overriddenMethod", quotedNode_2, facade.createModelReference("r:00000000-0000-4000-0000-011c895902c0(jetbrains.mps.baseLanguage.behavior)"), facade.createNodeId("2443692612523876968")));
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, null, false);
    quotedNode_2.addChild("visibility", quotedNode_3);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, false);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, false);
    quotedNode_7 = (SNode) parameter_1;
    if (quotedNode_7 != null) {
      quotedNode_6.addChild("expression", HUtil.copyIfNecessary(quotedNode_7));
    }
    quotedNode_4.addChild("statement", quotedNode_6);
    quotedNode_2.addChild("body", quotedNode_4);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, false);
    quotedNode_5.setReference("concept", SReference.create("concept", quotedNode_5, facade.createModelReference("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)"), facade.createNodeId("1068431790189")));
    quotedNode_2.addChild("returnType", quotedNode_5);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_49yvvj_a0a6a0c(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    SNode quotedNode_13 = null;
    SNode quotedNode_14 = null;
    SNode quotedNode_15 = null;
    SNode quotedNode_16 = null;
    SNode quotedNode_17 = null;
    SNode quotedNode_18 = null;
    SNode quotedNode_19 = null;
    SNode quotedNode_20 = null;
    SNode quotedNode_21 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_2, "name", "getThrowableTypes");
    SNodeAccessUtil.setProperty(quotedNode_2, "isVirtual", "false");
    SNodeAccessUtil.setProperty(quotedNode_2, "isAbstract", "false");
    quotedNode_2.setReference("overriddenMethod", SReference.create("overriddenMethod", quotedNode_2, facade.createModelReference("r:00000000-0000-4000-0000-011c895902c0(jetbrains.mps.baseLanguage.behavior)"), facade.createNodeId("6204026822016975623")));
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, null, false);
    quotedNode_2.addChild("visibility", quotedNode_3);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, false);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", null, null, false);
    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_9, "name", "result");
    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeListType", null, null, false);
    quotedNode_12.setReference("elementConcept", SReference.create("elementConcept", quotedNode_12, facade.createModelReference("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)"), facade.createNodeId("1068431790189")));
    quotedNode_9.addChild("type", quotedNode_12);
    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
    quotedNode_16 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.behavior.structure.SuperNodeExpression", null, null, false);
    quotedNode_13.addChild("operand", quotedNode_16);
    quotedNode_17 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall", null, null, false);
    quotedNode_17.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_17, facade.createModelReference("r:00000000-0000-4000-0000-011c895902c0(jetbrains.mps.baseLanguage.behavior)"), facade.createNodeId("6204026822016975623")));
    quotedNode_13.addChild("operation", quotedNode_17);
    quotedNode_9.addChild("initializer", quotedNode_13);
    quotedNode_6.addChild("localVariableDeclaration", quotedNode_9);
    quotedNode_4.addChild("statement", quotedNode_6);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, false);
    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference", null, null, false);
    quotedNode_10.addChild("operand", quotedNode_14);
    quotedNode_15 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.AddAllElementsOperation", null, null, false);
    quotedNode_18 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.GenericNewExpression", null, null, false);
    quotedNode_19 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.ListCreatorWithInit", null, null, false);
    quotedNode_20 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, false);
    quotedNode_20.setReference("concept", SReference.create("concept", quotedNode_20, facade.createModelReference("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)"), facade.createNodeId("1068431790189")));
    quotedNode_19.addChild("elementType", quotedNode_20);
    {
      List<SNode> nodes = (List<SNode>) parameter_1;
      for (SNode child : nodes) {
        quotedNode_19.addChild("initValue", HUtil.copyIfNecessary(child));
      }
    }
    quotedNode_18.addChild("creator", quotedNode_19);
    quotedNode_15.addChild("argument", quotedNode_18);
    quotedNode_10.addChild("operation", quotedNode_15);
    quotedNode_7.addChild("expression", quotedNode_10);
    quotedNode_4.addChild("statement", quotedNode_7);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, false);
    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference", null, null, false);
    quotedNode_8.addChild("expression", quotedNode_11);
    quotedNode_4.addChild("statement", quotedNode_8);
    quotedNode_2.addChild("body", quotedNode_4);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeListType", null, null, false);
    quotedNode_5.setReference("elementConcept", SReference.create("elementConcept", quotedNode_5, facade.createModelReference("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)"), facade.createNodeId("1068431790189")));
    quotedNode_2.addChild("returnType", quotedNode_5);
    SNodeAccessUtil.setReferenceTarget(quotedNode_11, "variableDeclaration", quotedNode_9);
    SNodeAccessUtil.setReferenceTarget(quotedNode_14, "variableDeclaration", quotedNode_9);
    return quotedNode_2;
  }

  private static boolean eq_3uyx8s_a0a0a0a0a0a0a3a0a0a0a1a0(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static boolean eq_3uyx8s_a0a0a0a0a0a0a3a0a0a0a2a0(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static boolean eq_3uyx8s_a0a0a0a0a0a0a0a0a0a0a3a0a0a0a3a0(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }

  private static boolean eq_3uyx8s_a0a0a0a0a0a0a0a0a0a0d0e0a0a0a0d0a(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
