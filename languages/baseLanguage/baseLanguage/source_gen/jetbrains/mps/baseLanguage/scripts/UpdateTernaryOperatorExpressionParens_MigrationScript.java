package jetbrains.mps.baseLanguage.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class UpdateTernaryOperatorExpressionParens_MigrationScript extends BaseMigrationScript {
  public UpdateTernaryOperatorExpressionParens_MigrationScript(IOperationContext operationContext) {
    super("Add missing parentheses to TernaryOperatorExpressionExpression");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Find TernaryOperatorExpressions with required but missing parens around them and add them";
      }
      public String getAdditionalInfo() {
        return "Find TernaryOperatorExpressions with required but missing parens around them and add them";
      }
      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression";
      }
      public boolean isApplicableInstanceNode(SNode node) {
        return SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.BinaryOperation") || (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression") && eq_lkooh4_a0a0a0a3a0a0a0a1a0(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"), "condition", true), node));
      }
      public void doUpdateInstanceNode(SNode node) {

        SNode result = SNodeFactoryOperations.replaceWithNewChild(node, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression");
        SLinkOperations.setTarget(result, "expression", node, true);
      }
      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
  private static boolean eq_lkooh4_a0a0a0a3a0a0a0a1a0(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
