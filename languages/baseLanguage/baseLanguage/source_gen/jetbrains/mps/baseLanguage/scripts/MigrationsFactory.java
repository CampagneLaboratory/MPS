package jetbrains.mps.baseLanguage.scripts;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Collections;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModel;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class MigrationsFactory {
  private MigrationsFactory() {
  }

  public static List<AbstractMigrationRefactoring> migrateVariableReferenceNodes(final SNode referenceConcept, final SNode targetConcept) {
    final String referenceConceptSimpleName = SPropertyOperations.getString(referenceConcept, "name");
    final String referenceConceptFqName = INamedConcept_Behavior.call_getFqName_1213877404258(referenceConcept);
    final String targetConceptFqName = INamedConcept_Behavior.call_getFqName_1213877404258(targetConcept);

    return ListSequence.fromListAndArray(new ArrayList<AbstractMigrationRefactoring>(), new AbstractMigrationRefactoring(null) {
      public String getName() {
        return "Convert all nodes of " + referenceConceptSimpleName + " concept to VariableReference nodes";
      }

      public String getAdditionalInfo() {
        return getName();
      }

      public String getFqNameOfConceptToSearchInstances() {
        return referenceConceptFqName;
      }

      public boolean isApplicableInstanceNode(SNode node) {
        if (!(targetConceptFqName.equals(check_uzzzvm_a0a0a0d0a0a0e0a(check_uzzzvm_a0a0a0a3a0a0a4a0(check_uzzzvm_a0a0a0a0a3a0a0a4a0(node)))))) {
          return false;
        }

        // <node> 
        // <node> 

        // <node> 
        // <node> 

        return true;
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference", null);
        SLinkOperations.setTarget(result, "variableDeclaration", SLinkOperations.getTarget(node, "variableDeclaration", false), false);
        // copy smodel attributes 
        for (SNode attribute : SLinkOperations.getTargets(node, "smodelAttribute", true)) {
          SNode copy = SNodeOperations.cast(CopyUtil.copyAndPreserveId(attribute), "jetbrains.mps.lang.core.structure.Attribute");
          ListSequence.fromList(SNodeOperations.getChildren(result, SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.core.structure.BaseConcept", "smodelAttribute"))).addElement(copy);
        }
        result.setId(node.getSNodeId());
        SNodeOperations.replaceWithAnother(node, result);
      }

      @Override
      public boolean isShowAsIntention() {
        return false;
      }
    });
  }

  public static List<AbstractMigrationRefactoring> migrateLocalMethodCallNodes(final SNode methodCallConcept, final SNode methodDeclarationConcept) {
    final String callConceptSimpleName = SPropertyOperations.getString(methodCallConcept, "name");
    final String callConceptFqName = INamedConcept_Behavior.call_getFqName_1213877404258(methodCallConcept);
    final String declarationConceptFqName = INamedConcept_Behavior.call_getFqName_1213877404258(methodDeclarationConcept);

    return ListSequence.fromListAndArray(new ArrayList<AbstractMigrationRefactoring>(), new AbstractMigrationRefactoring(null) {
      public String getName() {
        return "Convert all nodes of " + callConceptSimpleName + " concept to LocalMethodCall nodes";
      }

      public String getAdditionalInfo() {
        return getName();
      }

      public String getFqNameOfConceptToSearchInstances() {
        return callConceptFqName;
      }

      public boolean isApplicableInstanceNode(SNode node) {
        if (!(declarationConceptFqName.equals(check_uzzzvm_a0a0a0d0a0a0e0b(check_uzzzvm_a0a0a0a3a0a0a4a1(check_uzzzvm_a0a0a0a0a3a0a0a4a1(node)))))) {
          return false;
        }

        // <node> 
        // <node> 

        // <node> 
        // <node> 

        return true;
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalMethodCall", null);
        SLinkOperations.setTarget(result, "baseMethodDeclaration", SLinkOperations.getTarget(node, "baseMethodDeclaration", false), false);
        // copy smodel attributes 
        for (SNode attribute : SLinkOperations.getTargets(node, "smodelAttribute", true)) {
          SNode copy = SNodeOperations.cast(CopyUtil.copyAndPreserveId(attribute), "jetbrains.mps.lang.core.structure.Attribute");
          ListSequence.fromList(SNodeOperations.getChildren(result, SLinkOperations.findLinkDeclaration("jetbrains.mps.lang.core.structure.BaseConcept", "smodelAttribute"))).addElement(copy);
        }
        result.setId(node.getSNodeId());
        SNodeOperations.replaceWithAnother(node, result);
      }

      @Override
      public boolean isShowAsIntention() {
        return false;
      }
    });
  }

  public static List<AbstractMigrationRefactoring> migrateVariableReferenceSModelUsages(SNode referenceConcept, SNode targetConcept) {
    List<AbstractMigrationRefactoring> refactorings = ListSequence.fromList(new ArrayList<AbstractMigrationRefactoring>());

    ListSequence.fromList(refactorings).addSequence(ListSequence.fromList(migrateSModelFunctions(referenceConcept, targetConcept)));
    ListSequence.fromList(refactorings).addSequence(ListSequence.fromList(migrateSModelTypes(referenceConcept)));
    ListSequence.fromList(refactorings).addSequence(ListSequence.fromList(migrateSModelAccess(referenceConcept, targetConcept)));

    return refactorings;
  }

  private static List<AbstractMigrationRefactoring> migrateSModelTypes(final SNode referenceConcept) {
    List<AbstractMigrationRefactoring> refactorings = ListSequence.fromList(new ArrayList<AbstractMigrationRefactoring>());

    ListSequence.fromList(refactorings).addElement(new AbstractMigrationRefactoring(null) {
      public String getName() {
        return "Migrate all SNodeTypes with " + SPropertyOperations.getString(referenceConcept, "name");
      }

      public String getAdditionalInfo() {
        return getName();
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.smodel.structure.SNodeType";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return SLinkOperations.getTarget(node, "concept", false) == referenceConcept;
      }

      public void doUpdateInstanceNode(SNode node) {
        SLinkOperations.setTarget(node, "concept", SNodeOperations.getNode("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)", "1068498886296"), false);
      }
    });
    ListSequence.fromList(refactorings).addElement(new AbstractMigrationRefactoring(null) {
      public String getName() {
        return "Migrate all SNodeListTypes with " + SPropertyOperations.getString(referenceConcept, "name");
      }

      public String getAdditionalInfo() {
        return getName();
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.smodel.structure.SNodeListType";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return SLinkOperations.getTarget(node, "elementConcept", false) == referenceConcept;
      }

      public void doUpdateInstanceNode(SNode node) {
        SLinkOperations.setTarget(node, "elementConcept", SNodeOperations.getNode("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)", "1068498886296"), false);
      }
    });

    return refactorings;
  }

  private static List<AbstractMigrationRefactoring> migrateSModelAccess(final SNode referenceConcept, final SNode targetConcept) {
    final SNode linkDeclaration = ListSequence.fromList(SLinkOperations.getTargets(referenceConcept, "linkDeclaration", true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "target", false) == targetConcept;
      }
    });
    if (linkDeclaration == null) {
      throw new IllegalArgumentException();
    }

    return Collections.<AbstractMigrationRefactoring>singletonList(new AbstractMigrationRefactoring(null) {
      public String getName() {
        return "Migrate specialized link reference access for " + SPropertyOperations.getString(referenceConcept, "name");
      }

      public String getAdditionalInfo() {
        return getName();
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.smodel.structure.SLinkAccess";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return SLinkOperations.getTarget(node, "link", false) == linkDeclaration;
      }

      public void doUpdateInstanceNode(SNode node) {
        SLinkOperations.setTarget(node, "link", SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference", "variableDeclaration"), false);
        // <node> 
      }
    });
  }

  private static List<AbstractMigrationRefactoring> migrateSModelFunctions(final SNode referenceConcept, final SNode targetConcept) {
    List<AbstractMigrationRefactoring> refactorings = ListSequence.fromList(new ArrayList<AbstractMigrationRefactoring>());
    ListSequence.fromList(refactorings).addSequence(ListSequence.fromList(Migrations.migrateConcept(MigrationConfigs.variableUnifyingMigration(referenceConcept, targetConcept))));

    ListSequence.fromList(refactorings).addElement(new SModelMethodMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_ReplaceWithNewOperation"), referenceConcept) {
      public boolean isApplicableInstanceNode(SNode node) {
        return SLinkOperations.getTarget(node, "concept", false) == referenceConcept;
      }

      public void doUpdateInstanceNode(SNode node) {
        SLinkOperations.setTarget(node, "concept", SNodeOperations.getNode("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)", "1068498886296"), false);
      }
    });
    ListSequence.fromList(refactorings).addElement(new SModelMethodMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.Model_CreateNewNodeOperation"), referenceConcept) {
      public boolean isApplicableInstanceNode(SNode node) {
        return SLinkOperations.getTarget(node, "concept", false) == referenceConcept;
      }

      public void doUpdateInstanceNode(SNode node) {
        SLinkOperations.setTarget(node, "concept", SNodeOperations.getNode("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)", "1068498886296"), false);
      }
    });
    ListSequence.fromList(refactorings).addElement(new SModelMethodMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.LinkList_AddNewChildOperation"), referenceConcept) {
      public boolean isApplicableInstanceNode(SNode node) {
        return SLinkOperations.getTarget(node, "concept", false) == referenceConcept;
      }

      public void doUpdateInstanceNode(SNode node) {
        SLinkOperations.setTarget(node, "concept", SNodeOperations.getNode("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)", "1068498886296"), false);
      }
    });
    ListSequence.fromList(refactorings).addElement(new SModelMethodMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression"), referenceConcept) {
      public boolean isApplicableInstanceNode(SNode node) {
        return SLinkOperations.getTarget(node, "concept", false) == referenceConcept;
      }

      public void doUpdateInstanceNode(SNode node) {
        SLinkOperations.setTarget(node, "concept", SNodeOperations.getNode("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)", "1068498886296"), false);
      }
    });


    return refactorings;
  }

  private static String check_uzzzvm_a0a0a0d0a0a0e0a(SConcept checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getId();
    }
    return null;
  }

  private static SConcept check_uzzzvm_a0a0a0a3a0a0a4a0(SNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getConcept();
    }
    return null;
  }

  private static SNode check_uzzzvm_a0a0a0a0a3a0a0a4a0(SNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return SLinkOperations.getTarget(checkedDotOperand, "variableDeclaration", false);
    }
    return null;
  }

  private static String check_uzzzvm_a0a0d0d0a0a0e0a(SModelFqName checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getLongName();
    }
    return null;
  }

  private static SModelFqName check_uzzzvm_a0a0a3a3a0a0a4a0(SModelReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getSModelFqName();
    }
    return null;
  }

  private static SModelReference check_uzzzvm_a0a0a0d0d0a0a0e0a(SModelDescriptor checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getSModelReference();
    }
    return null;
  }

  private static SModelDescriptor check_uzzzvm_a0a0a0a3a3a0a0a4a0(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelDescriptor();
    }
    return null;
  }

  private static String check_uzzzvm_a0a0a0d0a0a0e0b(SConcept checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getId();
    }
    return null;
  }

  private static SConcept check_uzzzvm_a0a0a0a3a0a0a4a1(SNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getConcept();
    }
    return null;
  }

  private static SNode check_uzzzvm_a0a0a0a0a3a0a0a4a1(SNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return SLinkOperations.getTarget(checkedDotOperand, "baseMethodDeclaration", false);
    }
    return null;
  }

  private static String check_uzzzvm_a0a0d0d0a0a0e0b(SModelFqName checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getLongName();
    }
    return null;
  }

  private static SModelFqName check_uzzzvm_a0a0a3a3a0a0a4a1(SModelReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getSModelFqName();
    }
    return null;
  }

  private static SModelReference check_uzzzvm_a0a0a0d0d0a0a0e0b(SModelDescriptor checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getSModelReference();
    }
    return null;
  }

  private static SModelDescriptor check_uzzzvm_a0a0a0a3a3a0a0a4a1(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelDescriptor();
    }
    return null;
  }

  public static class QuotationClass_uzzzvm_a0a2a0a1a4a0a0d0e {
    public QuotationClass_uzzzvm_a0a2a0a1a4a0a0d0e() {
    }

    public SNode createNode(Object parameter_5, Object parameter_6) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        quotedNode1_3.setReferenceTarget("concept", (SNode) parameter_6);
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("leftExpression", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }
}
