package jetbrains.mps.baseLanguage.scripts;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class Migrations {
  private Migrations() {
  }

  public static List<AbstractMigrationRefactoring> migrateConcept(MigrationConfig config) {
    List<AbstractMigrationRefactoring> migrations = ListSequence.fromList(new ArrayList<AbstractMigrationRefactoring>());

    ListSequence.fromList(migrations).addElement(migrateIntentionCondition(config));
    ListSequence.fromList(migrations).addElement(migrateNodeAttributes(config));

    return migrations;
  }

  public static AbstractMigrationRefactoring migrateIntentionCondition(final MigrationConfig context) {
    return new SimpleMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.intentions.structure.IntentionDeclaration")) {
      public String getName() {
        return "Migrate intentions condition for " + context.getName();
      }

      public boolean isApplicableInstanceNode(SNode intention) {
        return SLinkOperations.getTarget(intention, "forConcept", false) == context.sourceConcept;
      }

      public void doUpdateInstanceNode(SNode intention) {
        SLinkOperations.setTarget(intention, "forConcept", context.targetConcept, false);
        SNode condition = context.conditionCreator.invoke(SConceptOperations.createNewNode("jetbrains.mps.lang.intentions.structure.ConceptFunctionParameter_node", null));
        if ((SLinkOperations.getTarget(intention, "isApplicableFunction", true) == null)) {
          SLinkOperations.setTarget(intention, "isApplicableFunction", new Migrations.QuotationClass_b5gojm_a0a0a2a2a0a0a1().createNode(condition), true);
        } else {
          SNode isApplicableBody = new Migrations.QuotationClass_b5gojm_a0a0a0c0c0a0a0b().createNode(condition, SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(intention, "isApplicableFunction", true), "body", true), "statement", true));
          SLinkOperations.setTarget(SLinkOperations.getTarget(intention, "isApplicableFunction", true), "body", isApplicableBody, true);
        }
      }
    };
  }

  public static AbstractMigrationRefactoring migrateNodeAttributes(final MigrationConfig context) {
    return new SimpleMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.ConceptDeclaration")) {
      public String getName() {
        return "Migrate node attributes for " + context.getName();
      }

      public boolean isApplicableInstanceNode(SNode conceptDeclaration) {
        if (!(SConceptOperations.isSubConceptOf(((SNode) conceptDeclaration), "jetbrains.mps.lang.core.structure.NodeAttribute"))) {
          return false;
        }
        SNode concept = (SNode) conceptDeclaration;
        Iterable<SNode> attributedConcepts = getAttributedConcepts(concept);

        return Sequence.fromIterable(attributedConcepts).contains(context.sourceConcept) && !(Sequence.fromIterable(attributedConcepts).contains(context.targetConcept));
      }

      public void doUpdateInstanceNode(SNode conceptDeclaration) {
        SNode concept = (SNode) conceptDeclaration;
        Iterable<SNode> attributedConcepts = getAttributedConcepts(concept);

        if (!(Sequence.fromIterable(attributedConcepts).contains(context.targetConcept))) {
          ListSequence.fromList(SLinkOperations.getTargets(concept, "conceptLink", true)).addElement(new Migrations.QuotationClass_b5gojm_a0a0a0d0c0a0a0c().createNode(context.targetConcept, ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "5169995583184591161"), "conceptLinkDeclaration", true)).first()));
        }
      }

      private Iterable<SNode> getAttributedConcepts(SNode concept) {
        final SNode attributedLinkDeclaration = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "5169995583184591161"), "conceptLinkDeclaration", true)).first();
        assert (attributedLinkDeclaration != null);

        return ListSequence.fromList(SLinkOperations.getTargets(concept, "conceptLink", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SLinkOperations.getTarget(it, "conceptLinkDeclaration", false) == attributedLinkDeclaration;
          }
        }).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.lang.structure.structure.ReferenceConceptLink"), "target", false), "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration");
          }
        });
      }
    };
  }

  public static class QuotationClass_b5gojm_a0a0a2a2a0a0a1 {
    public QuotationClass_b5gojm_a0a0a2a2a0a0a1() {
    }

    public SNode createNode(Object parameter_9) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.intentions.structure.IsApplicableBlock", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_5 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_6 = quotedNode_2;
          {
            quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_7 = quotedNode_3;
            {
              quotedNode_4 = (SNode) parameter_9;
              SNode quotedNode1_8;
              if (_parameterValues_129834374.contains(quotedNode_4)) {
                quotedNode1_8 = HUtil.copyIfNecessary(quotedNode_4);
              } else {
                _parameterValues_129834374.add(quotedNode_4);
                quotedNode1_8 = quotedNode_4;
              }
              if (quotedNode1_8 != null) {
                quotedNode_3.addChild("expression", HUtil.copyIfNecessary(quotedNode1_8));
              }
            }
            quotedNode_2.addChild("statement", quotedNode1_7);
          }
          quotedNode_1.addChild("body", quotedNode1_6);
        }
        result = quotedNode1_5;
      }
      return result;
    }
  }

  public static class QuotationClass_b5gojm_a0a0a0c0c0a0a0b {
    public QuotationClass_b5gojm_a0a0a0c0c0a0a0b() {
    }

    public SNode createNode(Object parameter_16, Object parameter_17) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      SNode quotedNode_5 = null;
      SNode quotedNode_6 = null;
      SNode quotedNode_7 = null;
      SNode quotedNode_8 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_9 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IfStatement", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_10 = quotedNode_2;
          {
            quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_11 = quotedNode_4;
            {
              quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, GlobalScope.getInstance(), false);
              SNode quotedNode1_12 = quotedNode_6;
              {
                quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, GlobalScope.getInstance(), false);
                SNode quotedNode1_13 = quotedNode_8;
                quotedNode1_13.setProperty("value", "false");
                quotedNode_6.addChild("expression", quotedNode1_13);
              }
              quotedNode_4.addChild("statement", quotedNode1_12);
            }
            quotedNode_2.addChild("ifTrue", quotedNode1_11);
          }
          {
            quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotExpression", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_14 = quotedNode_5;
            {
              quotedNode_7 = (SNode) parameter_16;
              SNode quotedNode1_15;
              if (_parameterValues_129834374.contains(quotedNode_7)) {
                quotedNode1_15 = HUtil.copyIfNecessary(quotedNode_7);
              } else {
                _parameterValues_129834374.add(quotedNode_7);
                quotedNode1_15 = quotedNode_7;
              }
              if (quotedNode1_15 != null) {
                quotedNode_5.addChild("expression", HUtil.copyIfNecessary(quotedNode1_15));
              }
            }
            quotedNode_2.addChild("condition", quotedNode1_14);
          }
          quotedNode_1.addChild("statement", quotedNode1_10);
        }
        {
          List<SNode> nodes = (List<SNode>) parameter_17;
          for (SNode child : nodes) {
            quotedNode_1.addChild("statement", HUtil.copyIfNecessary(child));
          }
        }
        result = quotedNode1_9;
      }
      return result;
    }
  }

  public static class QuotationClass_b5gojm_a0a0a0d0c0a0a0c {
    public QuotationClass_b5gojm_a0a0a0d0c0a0a0c() {
    }

    public SNode createNode(Object parameter_3, Object parameter_4) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.structure.structure.ReferenceConceptLink", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setReferenceTarget("conceptLinkDeclaration", (SNode) parameter_4);
        quotedNode1_2.setReferenceTarget("target", (SNode) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }
}
