package jetbrains.mps.baseLanguage.scripts;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.baseLanguage.behavior.IOperation_Behavior;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class Migrations {
  private Migrations() {
  }

  public static List<AbstractMigrationRefactoring> migrateConcept(MigrationConfig config) {
    List<AbstractMigrationRefactoring> migrations = ListSequence.fromList(new ArrayList<AbstractMigrationRefactoring>());

    ListSequence.fromList(migrations).addElement(migrateIntentionCondition(config));
    ListSequence.fromList(migrations).addElement(migrateNodeAttributes(config));
    ListSequence.fromList(migrations).addElement(migrateInstanceOf(config));
    ListSequence.fromList(migrations).addElement(migrateGetDescendants(config));

    return migrations;
  }

  public static AbstractMigrationRefactoring migrateIntentionCondition(final MigrationConfig config) {
    return new SimpleMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.intentions.structure.IntentionDeclaration")) {
      public String getName() {
        return "Migrate intentions condition for " + config.getName();
      }

      public boolean isApplicableInstanceNode(SNode intention) {
        return SLinkOperations.getTarget(intention, "forConcept", false) == config.sourceConcept;
      }

      public void doUpdateInstanceNode(SNode intention) {
        SLinkOperations.setTarget(intention, "forConcept", config.targetConcept, false);
        SNode condition = createCondition(config, SConceptOperations.createNewNode("jetbrains.mps.lang.intentions.structure.ConceptFunctionParameter_node", null));
        if ((SLinkOperations.getTarget(intention, "isApplicableFunction", true) == null)) {
          SLinkOperations.setTarget(intention, "isApplicableFunction", new Migrations.QuotationClass_b5gojm_a0a0a2a2a0a0a1().createNode(condition), true);
        } else {
          SNode isApplicableBody = new Migrations.QuotationClass_b5gojm_a0a0a0c0c0a0a0b().createNode(condition, SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(intention, "isApplicableFunction", true), "body", true), "statement", true));
          SLinkOperations.setTarget(SLinkOperations.getTarget(intention, "isApplicableFunction", true), "body", isApplicableBody, true);
        }
      }
    };
  }

  public static AbstractMigrationRefactoring migrateNodeAttributes(final MigrationConfig config) {
    return new SimpleMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.ConceptDeclaration")) {
      public String getName() {
        return "Migrate node attributes for " + config.getName();
      }

      public boolean isApplicableInstanceNode(SNode conceptDeclaration) {
        if (!(SConceptOperations.isSubConceptOf(((SNode) conceptDeclaration), "jetbrains.mps.lang.core.structure.NodeAttribute"))) {
          return false;
        }
        SNode concept = (SNode) conceptDeclaration;
        Iterable<SNode> attributedConcepts = getAttributedConcepts(concept);

        return Sequence.fromIterable(attributedConcepts).contains(config.sourceConcept) && !(Sequence.fromIterable(attributedConcepts).contains(config.targetConcept));
      }

      public void doUpdateInstanceNode(SNode conceptDeclaration) {
        SNode concept = (SNode) conceptDeclaration;
        Iterable<SNode> attributedConcepts = getAttributedConcepts(concept);

        if (!(Sequence.fromIterable(attributedConcepts).contains(config.targetConcept))) {
          ListSequence.fromList(SLinkOperations.getTargets(concept, "conceptLink", true)).addElement(new Migrations.QuotationClass_b5gojm_a0a0a0d0c0a0a0c().createNode(config.targetConcept, ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "5169995583184591161"), "conceptLinkDeclaration", true)).first()));
        }
      }

      private Iterable<SNode> getAttributedConcepts(SNode concept) {
        final SNode attributedLinkDeclaration = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "5169995583184591161"), "conceptLinkDeclaration", true)).first();
        assert (attributedLinkDeclaration != null);

        return ListSequence.fromList(SLinkOperations.getTargets(concept, "conceptLink", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SLinkOperations.getTarget(it, "conceptLinkDeclaration", false) == attributedLinkDeclaration;
          }
        }).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.lang.structure.structure.ReferenceConceptLink"), "target", false), "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration");
          }
        });
      }
    };
  }

  public static AbstractMigrationRefactoring migrateInstanceOf(final MigrationConfig config) {
    return new SModelMethodMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_IsInstanceOfOperation"), config.sourceConcept) {
      public boolean isApplicableInstanceNode(SNode node) {
        return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "conceptArgument", true), "jetbrains.mps.lang.smodel.structure.RefConcept_Reference") && SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node, "conceptArgument", true), "jetbrains.mps.lang.smodel.structure.RefConcept_Reference"), "conceptDeclaration", false) == config.sourceConcept;
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode result = new Migrations.QuotationClass_b5gojm_a0a0a1a0a0a3().createNode(IOperation_Behavior.call_getOperand_1213877410070(node), config.targetConcept, createCondition(config, IOperation_Behavior.call_getOperand_1213877410070(node)));

        SNodeOperations.replaceWithAnother(SNodeOperations.getParent(node), result);
      }
    };
  }

  public static AbstractMigrationRefactoring migrateGetDescendants(final MigrationConfig config) {
    return new SModelMethodMigration(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_GetDescendantsOperation"), config.sourceConcept) {
      public boolean isApplicableInstanceNode(SNode node) {
        return ListSequence.fromList(SLinkOperations.getTargets(node, "parameter", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.smodel.structure.OperationParm_Concept");
          }
        }).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            SNode conceptArg = SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.lang.smodel.structure.OperationParm_Concept"), "conceptArgument", true);
            return SNodeOperations.isInstanceOf(conceptArg, "jetbrains.mps.lang.smodel.structure.RefConcept_Reference") && SLinkOperations.getTarget(SNodeOperations.cast(conceptArg, "jetbrains.mps.lang.smodel.structure.RefConcept_Reference"), "conceptDeclaration", false) == config.sourceConcept;
          }
        });
      }

      public void doUpdateInstanceNode(SNode node) {
        Iterable<SNode> parameters = ListSequence.fromList(SLinkOperations.getTargets(node, "parameter", true)).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            if (SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.smodel.structure.OperationParm_Concept")) {
              return new Migrations.QuotationClass_b5gojm_a0a0a0a0a0a0a0a1a0a0a4().createNode(config.targetConcept);
            } else {
              return it;
            }
          }
        });

        // prepare result 
        SNode result = new Migrations.QuotationClass_b5gojm_a0a3a1a0a0a4().createNode(IOperation_Behavior.call_getOperand_1213877410070(node), Sequence.fromIterable(parameters).toListSequence(), config.targetConcept);
        SNode whereClosure = SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(result, "jetbrains.mps.baseLanguage.structure.DotExpression"), "operand", true), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true), "jetbrains.mps.baseLanguage.collections.structure.WhereOperation"), "closure", true), "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral");
        SNode condition = createCondition(config, ListSequence.fromList(SNodeOperations.getDescendants(whereClosure, "jetbrains.mps.baseLanguage.structure.VariableReference", false, new String[]{})).first());
        SNodeOperations.replaceWithAnother(ListSequence.fromList(SNodeOperations.getDescendants(whereClosure, "jetbrains.mps.baseLanguage.structure.VariableReference", false, new String[]{})).first(), condition);

        SNodeOperations.replaceWithAnother(SNodeOperations.getParent(node), result);
      }
    };
  }

  public static SNode createCondition(MigrationConfig config, SNode arg) {
    SNode condition = config.conditionCreator.invoke(arg);
    // todo: add simplifyings here! : (VariableReference) -> VariableReference 
    return condition;
  }

  public static class QuotationClass_b5gojm_a0a0a2a2a0a0a1 {
    public QuotationClass_b5gojm_a0a0a2a2a0a0a1() {
    }

    public SNode createNode(Object parameter_9) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.intentions.structure.IsApplicableBlock", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_5 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_6 = quotedNode_2;
          {
            quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_7 = quotedNode_3;
            {
              quotedNode_4 = (SNode) parameter_9;
              SNode quotedNode1_8;
              if (_parameterValues_129834374.contains(quotedNode_4)) {
                quotedNode1_8 = HUtil.copyIfNecessary(quotedNode_4);
              } else {
                _parameterValues_129834374.add(quotedNode_4);
                quotedNode1_8 = quotedNode_4;
              }
              if (quotedNode1_8 != null) {
                quotedNode_3.addChild("expression", HUtil.copyIfNecessary(quotedNode1_8));
              }
            }
            quotedNode_2.addChild("statement", quotedNode1_7);
          }
          quotedNode_1.addChild("body", quotedNode1_6);
        }
        result = quotedNode1_5;
      }
      return result;
    }
  }

  public static class QuotationClass_b5gojm_a0a0a0c0c0a0a0b {
    public QuotationClass_b5gojm_a0a0a0c0c0a0a0b() {
    }

    public SNode createNode(Object parameter_16, Object parameter_17) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      SNode quotedNode_5 = null;
      SNode quotedNode_6 = null;
      SNode quotedNode_7 = null;
      SNode quotedNode_8 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_9 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IfStatement", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_10 = quotedNode_2;
          {
            quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_11 = quotedNode_4;
            {
              quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, GlobalScope.getInstance(), false);
              SNode quotedNode1_12 = quotedNode_6;
              {
                quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, GlobalScope.getInstance(), false);
                SNode quotedNode1_13 = quotedNode_8;
                quotedNode1_13.setProperty("value", "false");
                quotedNode_6.addChild("expression", quotedNode1_13);
              }
              quotedNode_4.addChild("statement", quotedNode1_12);
            }
            quotedNode_2.addChild("ifTrue", quotedNode1_11);
          }
          {
            quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NotExpression", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_14 = quotedNode_5;
            {
              quotedNode_7 = (SNode) parameter_16;
              SNode quotedNode1_15;
              if (_parameterValues_129834374.contains(quotedNode_7)) {
                quotedNode1_15 = HUtil.copyIfNecessary(quotedNode_7);
              } else {
                _parameterValues_129834374.add(quotedNode_7);
                quotedNode1_15 = quotedNode_7;
              }
              if (quotedNode1_15 != null) {
                quotedNode_5.addChild("expression", HUtil.copyIfNecessary(quotedNode1_15));
              }
            }
            quotedNode_2.addChild("condition", quotedNode1_14);
          }
          quotedNode_1.addChild("statement", quotedNode1_10);
        }
        {
          List<SNode> nodes = (List<SNode>) parameter_17;
          for (SNode child : nodes) {
            quotedNode_1.addChild("statement", HUtil.copyIfNecessary(child));
          }
        }
        result = quotedNode1_9;
      }
      return result;
    }
  }

  public static class QuotationClass_b5gojm_a0a0a0d0c0a0a0c {
    public QuotationClass_b5gojm_a0a0a0d0c0a0a0c() {
    }

    public SNode createNode(Object parameter_3, Object parameter_4) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.structure.structure.ReferenceConceptLink", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setReferenceTarget("conceptLinkDeclaration", (SNode) parameter_4);
        quotedNode1_2.setReferenceTarget("target", (SNode) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_b5gojm_a0a0a1a0a0a3 {
    public QuotationClass_b5gojm_a0a0a1a0a0a3() {
    }

    public SNode createNode(Object parameter_15, Object parameter_16, Object parameter_17) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      SNode quotedNode_5 = null;
      SNode quotedNode_6 = null;
      SNode quotedNode_7 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AndExpression", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_8 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_9 = quotedNode_2;
          {
            quotedNode_4 = (SNode) parameter_15;
            SNode quotedNode1_10;
            if (_parameterValues_129834374.contains(quotedNode_4)) {
              quotedNode1_10 = HUtil.copyIfNecessary(quotedNode_4);
            } else {
              _parameterValues_129834374.add(quotedNode_4);
              quotedNode1_10 = quotedNode_4;
            }
            if (quotedNode1_10 != null) {
              quotedNode_2.addChild("operand", HUtil.copyIfNecessary(quotedNode1_10));
            }
          }
          {
            quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_IsInstanceOfOperation", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_11 = quotedNode_5;
            {
              quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.RefConcept_Reference", null, GlobalScope.getInstance(), false);
              SNode quotedNode1_12 = quotedNode_7;
              quotedNode1_12.setReferenceTarget("conceptDeclaration", (SNode) parameter_16);
              quotedNode_5.addChild("conceptArgument", quotedNode1_12);
            }
            quotedNode_2.addChild("operation", quotedNode1_11);
          }
          quotedNode_1.addChild("leftExpression", quotedNode1_9);
        }
        {
          quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_13 = quotedNode_3;
          {
            quotedNode_6 = (SNode) parameter_17;
            SNode quotedNode1_14;
            if (_parameterValues_129834374.contains(quotedNode_6)) {
              quotedNode1_14 = HUtil.copyIfNecessary(quotedNode_6);
            } else {
              _parameterValues_129834374.add(quotedNode_6);
              quotedNode1_14 = quotedNode_6;
            }
            if (quotedNode1_14 != null) {
              quotedNode_3.addChild("expression", HUtil.copyIfNecessary(quotedNode1_14));
            }
          }
          quotedNode_1.addChild("rightExpression", quotedNode1_13);
        }
        result = quotedNode1_8;
      }
      return result;
    }
  }

  public static class QuotationClass_b5gojm_a0a0a0a0a0a0a0a1a0a0a4 {
    public QuotationClass_b5gojm_a0a0a0a0a0a0a0a1a0a0a4() {
    }

    public SNode createNode(Object parameter_5) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.OperationParm_Concept", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.RefConcept_Reference", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_4 = quotedNode_2;
          quotedNode1_4.setReferenceTarget("conceptDeclaration", (SNode) parameter_5);
          quotedNode_1.addChild("conceptArgument", quotedNode1_4);
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }

  public static class QuotationClass_b5gojm_a0a3a1a0a0a4 {
    public QuotationClass_b5gojm_a0a3a1a0a0a4() {
    }

    public SNode createNode(Object parameter_28, Object parameter_29, Object parameter_30) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      SNode quotedNode_5 = null;
      SNode quotedNode_6 = null;
      SNode quotedNode_7 = null;
      SNode quotedNode_8 = null;
      SNode quotedNode_9 = null;
      SNode quotedNode_10 = null;
      SNode quotedNode_11 = null;
      SNode quotedNode_12 = null;
      SNode quotedNode_13 = null;
      SNode quotedNode_14 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_15 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_16 = quotedNode_2;
          {
            quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_17 = quotedNode_4;
            {
              quotedNode_6 = (SNode) parameter_28;
              SNode quotedNode1_18;
              if (_parameterValues_129834374.contains(quotedNode_6)) {
                quotedNode1_18 = HUtil.copyIfNecessary(quotedNode_6);
              } else {
                _parameterValues_129834374.add(quotedNode_6);
                quotedNode1_18 = quotedNode_6;
              }
              if (quotedNode1_18 != null) {
                quotedNode_4.addChild("operand", HUtil.copyIfNecessary(quotedNode1_18));
              }
            }
            {
              quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_GetDescendantsOperation", null, GlobalScope.getInstance(), false);
              SNode quotedNode1_19 = quotedNode_7;
              {
                List<SNode> nodes = (List<SNode>) parameter_29;
                for (SNode child : nodes) {
                  quotedNode_7.addChild("parameter", HUtil.copyIfNecessary(child));
                }
              }
              quotedNode_4.addChild("operation", quotedNode1_19);
            }
            quotedNode_2.addChild("operand", quotedNode1_17);
          }
          {
            quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.WhereOperation", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_20 = quotedNode_5;
            {
              quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", null, GlobalScope.getInstance(), false);
              SNode quotedNode1_21 = quotedNode_8;
              {
                quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null, GlobalScope.getInstance(), false);
                SNode quotedNode1_22 = quotedNode_10;
                quotedNode1_22.setProperty("name", "it");
                {
                  quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, GlobalScope.getInstance(), false);
                  SNode quotedNode1_23 = quotedNode_12;
                  quotedNode1_23.setReferenceTarget("concept", (SNode) parameter_30);
                  quotedNode_10.addChild("type", quotedNode1_23);
                }
                quotedNode_8.addChild("parameter", quotedNode1_22);
              }
              {
                quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, GlobalScope.getInstance(), false);
                SNode quotedNode1_24 = quotedNode_11;
                {
                  quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, GlobalScope.getInstance(), false);
                  SNode quotedNode1_25 = quotedNode_13;
                  {
                    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference", null, GlobalScope.getInstance(), false);
                    SNode quotedNode1_26 = quotedNode_14;
                    quotedNode_13.addChild("expression", quotedNode1_26);
                  }
                  quotedNode_11.addChild("statement", quotedNode1_25);
                }
                quotedNode_8.addChild("body", quotedNode1_24);
              }
              quotedNode_5.addChild("closure", quotedNode1_21);
            }
            quotedNode_2.addChild("operation", quotedNode1_20);
          }
          quotedNode_1.addChild("operand", quotedNode1_16);
        }
        {
          quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.ToListOperation", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_27 = quotedNode_3;
          quotedNode_1.addChild("operation", quotedNode1_27);
        }
        result = quotedNode1_15;
      }
      quotedNode_14.setReferenceTarget("variableDeclaration", quotedNode_10);
      return result;
    }
  }
}
