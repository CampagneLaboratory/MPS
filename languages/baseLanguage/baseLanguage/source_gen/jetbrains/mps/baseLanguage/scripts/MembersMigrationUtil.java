package jetbrains.mps.baseLanguage.scripts;

/*Generated by MPS */

import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.smodel.LanguageAspect;

public class MembersMigrationUtil {
  /*package*/ static final Map<SNode, SNode> OLD_LINK_TO_NEW_BEHAVIOR_METHOD = MapSequence.fromMap(new HashMap<SNode, SNode>());
  private MembersMigrationUtil() {
  }
  private static void putMapping(String oldLinkName, String newMethodName) {
    SNode oldLink = findOldLinkDeclaration(oldLinkName);
    SNode newMethod = findNewBehaviorMethod(newMethodName);
    if ((oldLink == null) || (newMethod == null)) {
      throw new IllegalArgumentException();
    }
    MapSequence.fromMap(OLD_LINK_TO_NEW_BEHAVIOR_METHOD).put(oldLink, newMethod);
  }
  private static SNode findOldLinkDeclaration(final String linkName) {
    List<SNode> links = ListSequence.fromListWithValues(new ArrayList<SNode>(), Sequence.fromIterable(classifierConcepts()).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SLinkOperations.getChildren(it, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0xf979c3ba6bL, "linkDeclaration"));
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return linkName.equals(SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf98052f333L, "role")));
      }
    }));
    return (ListSequence.fromList(links).count() == 1 ? ListSequence.fromList(links).getElement(0) : null);
  }
  private static SNode findNewBehaviorMethod(final String methodName) {
    List<SNode> methods = ListSequence.fromListWithValues(new ArrayList<SNode>(), Sequence.fromIterable(classifierConcepts()).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(it, LanguageAspect.BEHAVIOR), MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d43447b1aL, "jetbrains.mps.lang.behavior.structure.ConceptBehavior"));
      }
    }).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SLinkOperations.getChildren(it, MetaAdapterFactory.getContainmentLink(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d43447b1aL, 0x11d43447b25L, "method"));
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return methodName.equals(SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
      }
    }));
    return (ListSequence.fromList(methods).count() == 1 ? ListSequence.fromList(methods).getElement(0) : null);
  }
  private static Iterable<SNode> classifierConcepts() {
    return ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.getNode("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)", "1107461130800"), SNodeOperations.getNode("r:00000000-0000-4000-0000-011c895902ca(jetbrains.mps.baseLanguage.structure)", "1068390468198"));
  }
  static {
    // todo: node<> in static fields is not ok - think about read/write actions 
    // Classifier 
    putMapping("staticField", "staticFields");
    putMapping("method", "methods");
    putMapping("staticInnerClassifiers", "nestedClassifiers");
    // ClassConcept 
    putMapping("field", "fields");
    putMapping("constructor", "constructors");
    putMapping("staticMethod", "staticMethods");
    putMapping("property", "properties");
  }
}
