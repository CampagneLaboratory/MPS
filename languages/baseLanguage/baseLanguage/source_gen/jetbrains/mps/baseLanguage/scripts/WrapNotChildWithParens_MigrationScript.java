package jetbrains.mps.baseLanguage.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.actions.PrecedenceUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class WrapNotChildWithParens_MigrationScript extends BaseMigrationScript {
  public WrapNotChildWithParens_MigrationScript(IOperationContext operationContext) {
    super("Wrap Not Expression Child with Parentheses");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Find Not Expressions and wrap their child expression in parentheses, if needed";
      }
      public String getAdditionalInfo() {
        return "Find Not Expressions and wrap their child expression in parentheses, if needed";
      }
      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.baseLanguage.structure.NotExpression";
      }
      public boolean isApplicableInstanceNode(SNode node) {
        return PrecedenceUtil.needsParensAroundNotExpression(node);
      }
      public void doUpdateInstanceNode(SNode node) {
        SNode childExpr = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1081516740877l, 1081516765348l, "expression"));
        SNode parens = SNodeFactoryOperations.replaceWithNewChild(childExpr, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression");
        SLinkOperations.setTarget(parens, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1079359253375l, 1079359253376l, "expression"), childExpr);
      }
      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
}
