package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class DeleteStaticInField {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new DeleteStaticInField.DeleteStaticInField_DELETE(node));
  }

  public static class DeleteStaticInField_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;

    public DeleteStaticInField_DELETE(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      final SNode field = SNodeFactoryOperations.insertNewNextSiblingChild(node, "jetbrains.mps.baseLanguage.structure.FieldDeclaration");
      SLinkOperations.setTarget(field, "type", SLinkOperations.getTarget(node, "type", true), true);
      SLinkOperations.setTarget(field, "visibility", SLinkOperations.getTarget(node, "visibility", true), true);
      SLinkOperations.setTarget(field, "initializer", SLinkOperations.getTarget(node, "initializer", true), true);
      SPropertyOperations.set(field, "isDeprecated", "" + (SPropertyOperations.getBoolean(node, "isDeprecated")));
      SPropertyOperations.set(field, "name", SPropertyOperations.getString(node, "name"));
      SPropertyOperations.set(field, "isFinal", "" + (SPropertyOperations.getBoolean(node, "isFinal")));
      ListSequence.fromList(SLinkOperations.getTargets(field, "annotation", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "annotation", true)));
      AttributeOperations.setAttribute(field, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment")), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment"))));
      SNodeOperations.deleteNode(node);
    }
  }
}
