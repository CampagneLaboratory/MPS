package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.behavior.IContainsStatementList_Behavior;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class UnwrapStatementListContainer {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new UnwrapStatementListContainer.UnwrapStatementListContainer_DELETE(node));
    editorCell.setAction(CellActionType.BACKSPACE, new UnwrapStatementListContainer.UnwrapStatementListContainer_BACKSPACE(node));
  }
  public static class UnwrapStatementListContainer_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public UnwrapStatementListContainer_DELETE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, final SNode node) {
      List<SNode> statements = SLinkOperations.getChildren(IContainsStatementList_Behavior.call_getStatementList_1237545932619(node), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123136l, 1068581517665l, "statement"));
      ListSequence.fromList(statements).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          SNodeOperations.insertPrevSiblingChild(node, it);
        }
      });
      SNodeOperations.deleteNode(node);
    }
  }
  public static class UnwrapStatementListContainer_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public UnwrapStatementListContainer_BACKSPACE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, final SNode node) {
      List<SNode> statements = SLinkOperations.getChildren(IContainsStatementList_Behavior.call_getStatementList_1237545932619(node), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123136l, 1068581517665l, "statement"));
      ListSequence.fromList(statements).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          SNodeOperations.insertPrevSiblingChild(node, it);
        }
      });
      SNodeOperations.deleteNode(node);
    }
  }
}
