package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.ParenthesisUtil;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;

public class DeleteParenthesisRight_Action {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new DeleteParenthesisRight_Action.DeleteParenthesisRight_Action_DELETE(node));
    editorCell.setAction(CellActionType.BACKSPACE, new DeleteParenthesisRight_Action.DeleteParenthesisRight_Action_BACKSPACE(node));
  }

  public static class DeleteParenthesisRight_Action_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;

    public DeleteParenthesisRight_Action_DELETE(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      AttributeOperations.setAttribute(EditorParenthesisUtil.findRightmostOrLeftmostLeafExpression(SLinkOperations.getTarget(node, "expression", true), false), new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen"), SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen", null));
      SNode replacing = SLinkOperations.getTarget(node, "expression", true);
      SNodeOperations.replaceWithAnother(node, replacing);

      SNode rightMostNode = EditorParenthesisUtil.findRightmostOrLeftmostLeafExpression(replacing, true);
      ParenthesisUtil.checkExpressionPriorities(replacing);
      SelectionUtil.selectLabelCellAnSetCaret(editorContext, rightMostNode, SelectionManager.LAST_EDITABLE_CELL, -1);
    }
  }

  public static class DeleteParenthesisRight_Action_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;

    public DeleteParenthesisRight_Action_BACKSPACE(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      AttributeOperations.setAttribute(EditorParenthesisUtil.findRightmostOrLeftmostLeafExpression(SLinkOperations.getTarget(node, "expression", true), false), new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen"), SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IncompleteLeftParen", null));
      SNode replacing = SLinkOperations.getTarget(node, "expression", true);
      SNodeOperations.replaceWithAnother(node, replacing);

      SNode rightMostNode = EditorParenthesisUtil.findRightmostOrLeftmostLeafExpression(replacing, true);
      ParenthesisUtil.checkExpressionPriorities(replacing);
      SelectionUtil.selectLabelCellAnSetCaret(editorContext, rightMostNode, SelectionManager.LAST_EDITABLE_CELL, -1);
    }
  }
}
