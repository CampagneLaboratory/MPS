package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class SingleLineCommentActions {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.INSERT, new SingleLineCommentActions.SingleLineCommentActions_INSERT(node));
  }

  public static class SingleLineCommentActions_INSERT extends AbstractCellAction {
    /*package*/ SNode myNode;

    public SingleLineCommentActions_INSERT(SNode node) {
      this.myNode = node;
    }

    public String getDescriptionText() {
      return "Facilitate familiar comment editing experience: add newline if enter in the end of comment line";
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode selectedPart = SNodeOperations.cast(editorContext.getSelectedNode(), "jetbrains.mps.baseLanguage.structure.CommentPart");
      if (ListSequence.fromList(SLinkOperations.getTargets(node, "commentPart", true)).last() == selectedPart) {
        SNodeOperations.insertNextSiblingChild(node, SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Statement", null));
      } else {
        SNodeOperations.insertNextSiblingChild(selectedPart, SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.CommentPart", null));
      }
    }
  }
}
