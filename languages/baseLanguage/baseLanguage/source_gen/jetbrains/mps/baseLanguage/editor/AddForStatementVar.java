package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.KeyMapImpl;
import jetbrains.mps.openapi.editor.cells.KeyMapAction;
import jetbrains.mps.editor.runtime.cells.KeyMapActionImpl;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class AddForStatementVar extends KeyMapImpl {
  public AddForStatementVar() {
    this.setApplicableToEveryModel(false);
    KeyMapAction action;
    action = new AddForStatementVar.AddForStatementVar_Action0();
    this.putAction("any", ",", action);
  }
  public static class AddForStatementVar_Action0 extends KeyMapActionImpl {
    public AddForStatementVar_Action0() {
      super.setCaretPolicy(KeyMapAction.CARET_AT_LAST_POSITION);
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeUtil.isInstanceOf(contextNode, SConceptRepository.getInstance().getConcept("jetbrains.mps.lang.core.structure.BaseConcept")))) {
        return false;
      }
      return this.canExecute_internal(editorContext, contextNode, this.getSelectedNodes(editorContext));
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private boolean canExecute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode variableDeclaration = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", false, false);
      if ((variableDeclaration != null) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(variableDeclaration), "jetbrains.mps.baseLanguage.structure.ForStatement")) {
        SNode forStatement = SNodeOperations.cast(SNodeOperations.getParent(variableDeclaration), "jetbrains.mps.baseLanguage.structure.ForStatement");
        if (SLinkOperations.getTarget(forStatement, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1144230876926l, 1144230900587l, "variable")) == variableDeclaration) {
          return true;
        }
      }
      return false;
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode variableDeclaration = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", false, false);
      SNode forStatement = SNodeOperations.cast(SNodeOperations.getParent(variableDeclaration), "jetbrains.mps.baseLanguage.structure.ForStatement");
      ListSequence.fromList(SLinkOperations.getChildren(forStatement, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1144231330558l, 1032195626824963089l, "additionalVar"))).insertElement(0, SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.AdditionalForLoopVariable", null));
    }
    public String getKeyStroke() {
      return " ,";
    }
  }
}
