package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class IfStatement_elseDelete_action {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new IfStatement_elseDelete_action.IfStatement_elseDelete_action_DELETE(node));
    editorCell.setAction(CellActionType.BACKSPACE, new IfStatement_elseDelete_action.IfStatement_elseDelete_action_BACKSPACE(node));
  }

  public static class IfStatement_elseDelete_action_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;

    public IfStatement_elseDelete_action_DELETE(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.StatementList"))) {
        SNodeOperations.detachNode(SLinkOperations.getTarget(node, "ifFalseStatement", true));
      } else {
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.BlockStatement")) {
          SNode block = SNodeOperations.cast(SLinkOperations.getTarget(node, "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.BlockStatement");
          while (ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(block, "statements", true), "statement", true)).isNotEmpty()) {
            SNodeOperations.insertNextSiblingChild(node, ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(block, "statements", true), "statement", true)).last());
          }
          SNodeOperations.detachNode(SLinkOperations.getTarget(node, "ifFalseStatement", true));
        } else {
          SNodeOperations.insertNextSiblingChild(node, SLinkOperations.getTarget(node, "ifFalseStatement", true));
        }
      }
    }
  }

  public static class IfStatement_elseDelete_action_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;

    public IfStatement_elseDelete_action_BACKSPACE(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.StatementList"))) {
        SNodeOperations.detachNode(SLinkOperations.getTarget(node, "ifFalseStatement", true));
      } else {
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.BlockStatement")) {
          SNode block = SNodeOperations.cast(SLinkOperations.getTarget(node, "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.BlockStatement");
          while (ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(block, "statements", true), "statement", true)).isNotEmpty()) {
            SNodeOperations.insertNextSiblingChild(node, ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(block, "statements", true), "statement", true)).last());
          }
          SNodeOperations.detachNode(SLinkOperations.getTarget(node, "ifFalseStatement", true));
        } else {
          SNodeOperations.insertNextSiblingChild(node, SLinkOperations.getTarget(node, "ifFalseStatement", true));
        }
      }
    }
  }
}
