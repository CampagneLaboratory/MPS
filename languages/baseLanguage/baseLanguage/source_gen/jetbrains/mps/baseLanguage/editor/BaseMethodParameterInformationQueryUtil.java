package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.IClassifierType_Behavior;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.editor.runtime.style.StyledTextPrinter;

public class BaseMethodParameterInformationQueryUtil {
  public BaseMethodParameterInformationQueryUtil() {
  }

  public static List<SNode> getMethodsToShow(SNode methodCall) {
    SNode method = SLinkOperations.getTarget(methodCall, "baseMethodDeclaration", false);
    SNode classifier = SNodeOperations.cast(SNodeOperations.getParent(method), "jetbrains.mps.baseLanguage.structure.IMemberContainer");
    Iterable<SNode> members;
    if (SNodeOperations.isInstanceOf(classifier, "jetbrains.mps.baseLanguage.structure.Classifier")) {
      members = IClassifierType_Behavior.call_getVisibleMembers_6145907390641297279(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(classifier, "jetbrains.mps.baseLanguage.structure.Classifier"), "virtual_getThisType_7405920559687254782", new Object[]{}), methodCall);
    } else {
      members = BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), classifier, "virtual_getMembers_1213877531970", new Object[]{});
    }
    List<SNode> methodsToShow = new ArrayList<SNode>();
    for (SNode member : Sequence.fromIterable(members)) {
      if (SNodeOperations.isInstanceOf(member, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration") && eq_bha4h6_a0a0a5a1(SPropertyOperations.getString(SNodeOperations.cast(member, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), "name"), SPropertyOperations.getString(method, "name"))) {
        ListSequence.fromList(methodsToShow).addElement(SNodeOperations.cast(member, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
      }
    }
    return methodsToShow;
  }

  public static void fillPresentation(SNode methodDeclaration, SNode selectedActualArgument, StyledTextPrinter styledText) {
    if (!(SNodeOperations.isInstanceOf(methodDeclaration, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration"))) {
      if (SLinkOperations.getTarget(methodDeclaration, "returnType", true) != null) {
        styledText.append(BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(methodDeclaration, "returnType", true), "virtual_getPresentation_1213877396640", new Object[]{}) + " ");
      } else {
        styledText.append("??? ");
      }
    }
    if (SPropertyOperations.getString(methodDeclaration, "name") != null) {
      styledText.append(SPropertyOperations.getString(methodDeclaration, "name"));
    } else {
      styledText.append("<no name>");
    }
    if (SNodeOperations.isInstanceOf(methodDeclaration, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration")) {
      SNode classifier = SNodeOperations.getAncestor(methodDeclaration, "jetbrains.mps.baseLanguage.structure.Classifier", false, false);
      if (classifier != null && ListSequence.fromList(SLinkOperations.getTargets(classifier, "typeVariableDeclaration", true)).isNotEmpty()) {
        styledText.append("<");
        for (SNode param : SLinkOperations.getTargets(classifier, "typeVariableDeclaration", true)) {
          if (SNodeOperations.getIndexInParent(param) > 0) {
            styledText.append(", ");
          }
          styledText.append(BehaviorReflection.invokeVirtual(String.class, param, "virtual_getPresentation_1213877396640", new Object[]{}));
        }
        styledText.append(">");
      }
    }

    int argumentIndex = (selectedActualArgument != null ?
      SNodeOperations.getIndexInParent(selectedActualArgument) :
      -1
    );
    styledText.append("(");
    for (SNode param : SLinkOperations.getTargets(methodDeclaration, "parameter", true)) {
      if (SNodeOperations.getIndexInParent(param) > 0) {
        styledText.append(", ");
      }
      if (SNodeOperations.getIndexInParent(param) == argumentIndex) {
        styledText.setBold(true);
      }
      if (SLinkOperations.getTarget(param, "type", true) != null) {
        styledText.append(BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(param, "type", true), "virtual_getPresentation_1213877396640", new Object[]{}));
      } else {
        styledText.append("???");
      }
      if (SPropertyOperations.getString(param, "name") != null) {
        styledText.append(" " + SPropertyOperations.getString(param, "name"));
      }
      styledText.setBold(false);
    }
    styledText.append(")");
  }

  private static boolean eq_bha4h6_a0a0a5a1(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
