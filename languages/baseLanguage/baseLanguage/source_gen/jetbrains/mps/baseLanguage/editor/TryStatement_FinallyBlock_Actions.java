package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.baseLanguage.behavior.IContainsStatementList_Behavior;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class TryStatement_FinallyBlock_Actions {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new TryStatement_FinallyBlock_Actions.TryStatement_FinallyBlock_Actions_DELETE(node));
    editorCell.setAction(CellActionType.BACKSPACE, new TryStatement_FinallyBlock_Actions.TryStatement_FinallyBlock_Actions_BACKSPACE(node));
  }
  public static class TryStatement_FinallyBlock_Actions_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public TryStatement_FinallyBlock_Actions_DELETE(SNode node) {
      this.myNode = node;
    }
    public String getDescriptionText() {
      return "remove finally ";
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, final SNode node) {
      if (ListSequence.fromList(SLinkOperations.getTargets(node, "catchClause", true)).isNotEmpty()) {
        SNode tryCatchStatement = SNodeFactoryOperations.replaceWithNewChild(node, "jetbrains.mps.baseLanguage.structure.TryCatchStatement");
        SLinkOperations.setTarget(tryCatchStatement, "body", SLinkOperations.getTarget(node, "body", true), true);
        ListSequence.fromList(SLinkOperations.getTargets(tryCatchStatement, "catchClause", true)).clear();
        ListSequence.fromList(SLinkOperations.getTargets(tryCatchStatement, "catchClause", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "catchClause", true)));
        SNodeOperations.deleteNode(node);
      } else {
        List<SNode> statements = SLinkOperations.getTargets(IContainsStatementList_Behavior.call_getStatementList_1237545932619(node), "statement", true);
        ListSequence.fromList(statements).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            SNodeOperations.insertPrevSiblingChild(node, it);
          }
        });
        SNodeOperations.deleteNode(node);
      }
    }
  }
  public static class TryStatement_FinallyBlock_Actions_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public TryStatement_FinallyBlock_Actions_BACKSPACE(SNode node) {
      this.myNode = node;
    }
    public String getDescriptionText() {
      return "remove finally ";
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, final SNode node) {
      if (ListSequence.fromList(SLinkOperations.getTargets(node, "catchClause", true)).isNotEmpty()) {
        SNode tryCatchStatement = SNodeFactoryOperations.replaceWithNewChild(node, "jetbrains.mps.baseLanguage.structure.TryCatchStatement");
        SLinkOperations.setTarget(tryCatchStatement, "body", SLinkOperations.getTarget(node, "body", true), true);
        ListSequence.fromList(SLinkOperations.getTargets(tryCatchStatement, "catchClause", true)).clear();
        ListSequence.fromList(SLinkOperations.getTargets(tryCatchStatement, "catchClause", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "catchClause", true)));
        SNodeOperations.deleteNode(node);
      } else {
        List<SNode> statements = SLinkOperations.getTargets(IContainsStatementList_Behavior.call_getStatementList_1237545932619(node), "statement", true);
        ListSequence.fromList(statements).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            SNodeOperations.insertPrevSiblingChild(node, it);
          }
        });
        SNodeOperations.deleteNode(node);
      }
    }
  }
}
