package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.InlineCellProvider;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.nodeEditor.MPSFonts;
import java.awt.Color;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.lang.editor.cellProviders.RefCellCellProvider;

public class VariableReference_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_ge17fi_a(editorContext, node);
  }

  public static class _Inline_ge17fi_a0a extends InlineCellProvider {
    public _Inline_ge17fi_a0a() {
      super();
    }

    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_ge17fi_a0a0(editorContext, node);
    }

    private EditorCell createProperty_ge17fi_a0a0(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("name");
      provider.setNoTargetText("<no name>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_name");
      BaseLanguageStyle_StyleSheet.getVariableName(editorCell).apply(editorCell);
      {
        Style style = editorCell.getStyle();
        style.set(StyleAttributes.TEXT_COLOR, VariableReference_Editor._Inline_ge17fi_a0a._StyleParameter_QueryFunction_ge17fi_a0a0a0((editorCell == null ?
          null :
          editorCell.getSNode()
        ), (editorCell == null ?
          null :
          editorCell.getContext()
        )));
        style.set(StyleAttributes.FONT_STYLE, VariableReference_Editor._Inline_ge17fi_a0a._StyleParameter_QueryFunction_ge17fi_a1a0a0((editorCell == null ?
          null :
          editorCell.getSNode()
        ), (editorCell == null ?
          null :
          editorCell.getContext()
        )));
      }
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = editorContext.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }

    private static int _StyleParameter_QueryFunction_ge17fi_a1a0a0(SNode node, EditorContext editorContext) {
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember")) {
        if (BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember"), "virtual_isStatic_7405920559687241224", new Object[]{})) {
          return MPSFonts.BOLD_ITALIC;
        } else {
          return MPSFonts.BOLD;
        }
      } else {
        return MPSFonts.PLAIN;
      }
    }

    private static Color _StyleParameter_QueryFunction_ge17fi_a0a0a0(SNode node, EditorContext editorContext) {
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember")) {
        return MPSColors.DARK_MAGENTA;
      } else {
        return MPSColors.BLACK;
      }
    }
  }

  private EditorCell createCollection_ge17fi_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_ge17fi_a");
    editorCell.addEditorCell(this.createRefCell_ge17fi_a0(editorContext, node));
    return editorCell;
  }

  private EditorCell createRefCell_ge17fi_a0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("variableDeclaration");
    provider.setNoTargetText("<no variableDeclaration>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new VariableReference_Editor._Inline_ge17fi_a0a());
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
}
