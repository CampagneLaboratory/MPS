package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.style.StyleRegistry;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class BaseLanguageStyle_StyleSheet {
  public static void applyMPSDefault(Style style, EditorCell editorCell) {
  }

  public static void applyMPSKeyWord(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("KEYWORD"));
  }

  public static void applyMPSComment(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("LINE_COMMENT"));
  }

  public static void applyTODO(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyMPSComment(style, editorCell);
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a0d((editorCell == null ?
      null :
      editorCell.getContext()
    ), (editorCell == null ?
      null :
      editorCell.getSNode()
    ))) {
      style.putAll(StyleRegistry.getInstance().getStyle("TODO"));
    }
  }

  public static void applyDoc(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("DOC_COMMENT"));
  }

  public static void applyDocTag(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("DOC_TAG"));
  }

  public static void applyMPSField(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("INSTANCE_FIELD"));
  }

  public static void applyString(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("STRING"));
  }

  public static void applyNumeric(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("NUMBER"));
  }

  public static void applyNotUsed(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("NOT_USED_ELEMENT"));
  }

  public static void applyMPSAnnotation(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("ANNOTATION"));
  }

  public static void applyMPSFolded(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("FOLDED_TEXT"));
  }

  public static void applyMPSVariable(Style style, EditorCell editorCell) {
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a0m((editorCell == null ?
      null :
      editorCell.getContext()
    ), (editorCell == null ?
      null :
      editorCell.getSNode()
    ))) {
      style.putAll(StyleRegistry.getInstance().getStyle("STATIC_FINAL_FIELD"));
    }
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a1m((editorCell == null ?
      null :
      editorCell.getContext()
    ), (editorCell == null ?
      null :
      editorCell.getSNode()
    ))) {
      style.putAll(StyleRegistry.getInstance().getStyle("STATIC_FIELD"));
    }
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a2m((editorCell == null ?
      null :
      editorCell.getContext()
    ), (editorCell == null ?
      null :
      editorCell.getSNode()
    ))) {
      style.putAll(StyleRegistry.getInstance().getStyle("INSTANCE_FIELD"));
    }
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a3m((editorCell == null ?
      null :
      editorCell.getContext()
    ), (editorCell == null ?
      null :
      editorCell.getSNode()
    ))) {
      style.putAll(StyleRegistry.getInstance().getStyle("LOCAL_VARIABLE"));
    }
  }

  public static void applyMPSMethodDeclaration(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("METHOD_DECLARATION"));
  }

  public static void applyMPSMethodCall(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("METHOD_CALL"));
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a1o((editorCell == null ?
      null :
      editorCell.getContext()
    ), (editorCell == null ?
      null :
      editorCell.getSNode()
    ))) {
      style.putAll(StyleRegistry.getInstance().getStyle("STATIC_METHOD"));
    }
  }

  public static void applyMPSLocalVariable(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("LOCAL_VARIABLE"));
  }

  public static void applyMPSParameter(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("PARAMETER"));
  }

  public static void applyMPSStaticMethod(Style style, EditorCell editorCell) {
  }

  public static void applyMPSClassName(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("CLASS_NAME"));
  }

  public static void applyMPSOperation(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("OPERATION_SIGN"));
  }

  public static void applyMPSParentheses(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyAnyBracket(style, editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("PARENTH"));
  }

  public static void applyMPSBrackets(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyAnyBracket(style, editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("BRACKETS"));
  }

  public static void applyMPSBraces(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyAnyBracket(style, editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("BRACES"));
  }

  public static void applyMPSSemicolon(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("SEMICOLON"));
  }

  public static void applyMPSDot(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("DOT"));
  }

  @Deprecated
  public static Style getMPSDefault(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    return style;
  }

  @Deprecated
  public static Style getMPSKeyWord(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("KEYWORD"));
    return style;
  }

  @Deprecated
  public static Style getMPSComment(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("LINE_COMMENT"));
    return style;
  }

  @Deprecated
  public static Style getTODO(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getMPSComment(editorCell));
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a0d((editorCell == null ?
      null :
      editorCell.getContext()
    ), (editorCell == null ?
      null :
      editorCell.getSNode()
    ))) {
      style.putAll(StyleRegistry.getInstance().getStyle("TODO"));
    }
    return style;
  }

  @Deprecated
  public static Style getDoc(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("DOC_COMMENT"));
    return style;
  }

  @Deprecated
  public static Style getDocTag(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("DOC_TAG"));
    return style;
  }

  @Deprecated
  public static Style getMPSField(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("INSTANCE_FIELD"));
    return style;
  }

  @Deprecated
  public static Style getString(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("STRING"));
    return style;
  }

  @Deprecated
  public static Style getNumeric(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("NUMBER"));
    return style;
  }

  @Deprecated
  public static Style getNotUsed(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("NOT_USED_ELEMENT"));
    return style;
  }

  @Deprecated
  public static Style getMPSAnnotation(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("ANNOTATION"));
    return style;
  }

  @Deprecated
  public static Style getMPSFolded(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("FOLDED_TEXT"));
    return style;
  }

  @Deprecated
  public static Style getMPSVariable(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a0m((editorCell == null ?
      null :
      editorCell.getContext()
    ), (editorCell == null ?
      null :
      editorCell.getSNode()
    ))) {
      style.putAll(StyleRegistry.getInstance().getStyle("STATIC_FINAL_FIELD"));
    }
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a1m((editorCell == null ?
      null :
      editorCell.getContext()
    ), (editorCell == null ?
      null :
      editorCell.getSNode()
    ))) {
      style.putAll(StyleRegistry.getInstance().getStyle("STATIC_FIELD"));
    }
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a2m((editorCell == null ?
      null :
      editorCell.getContext()
    ), (editorCell == null ?
      null :
      editorCell.getSNode()
    ))) {
      style.putAll(StyleRegistry.getInstance().getStyle("INSTANCE_FIELD"));
    }
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a3m((editorCell == null ?
      null :
      editorCell.getContext()
    ), (editorCell == null ?
      null :
      editorCell.getSNode()
    ))) {
      style.putAll(StyleRegistry.getInstance().getStyle("LOCAL_VARIABLE"));
    }
    return style;
  }

  @Deprecated
  public static Style getMPSMethodDeclaration(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("METHOD_DECLARATION"));
    return style;
  }

  @Deprecated
  public static Style getMPSMethodCall(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("METHOD_CALL"));
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a1o((editorCell == null ?
      null :
      editorCell.getContext()
    ), (editorCell == null ?
      null :
      editorCell.getSNode()
    ))) {
      style.putAll(StyleRegistry.getInstance().getStyle("STATIC_METHOD"));
    }
    return style;
  }

  @Deprecated
  public static Style getMPSLocalVariable(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("LOCAL_VARIABLE"));
    return style;
  }

  @Deprecated
  public static Style getMPSParameter(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("PARAMETER"));
    return style;
  }

  @Deprecated
  public static Style getMPSStaticMethod(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    return style;
  }

  @Deprecated
  public static Style getMPSClassName(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("CLASS_NAME"));
    return style;
  }

  @Deprecated
  public static Style getMPSOperation(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("OPERATION_SIGN"));
    return style;
  }

  @Deprecated
  public static Style getMPSParentheses(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getAnyBracket(editorCell));
    style.putAll(StyleRegistry.getInstance().getStyle("PARENTH"));
    return style;
  }

  @Deprecated
  public static Style getMPSBrackets(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getAnyBracket(editorCell));
    style.putAll(StyleRegistry.getInstance().getStyle("BRACKETS"));
    return style;
  }

  @Deprecated
  public static Style getMPSBraces(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getAnyBracket(editorCell));
    style.putAll(StyleRegistry.getInstance().getStyle("BRACES"));
    return style;
  }

  @Deprecated
  public static Style getMPSSemicolon(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("SEMICOLON"));
    return style;
  }

  @Deprecated
  public static Style getMPSDot(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("DOT"));
    return style;
  }

  @Deprecated
  public static Style getKeyWord(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getMPSKeyWord(editorCell));
    return style;
  }

  @Deprecated
  public static Style getCompactKeyWord(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getKeyWord(editorCell));
    return style;
  }

  @Deprecated
  public static Style getComment(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getMPSComment(editorCell));
    return style;
  }

  @Deprecated
  public static Style getJavaDoc(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getDoc(editorCell));
    return style;
  }

  @Deprecated
  public static Style getJavaDocTag(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getDocTag(editorCell));
    return style;
  }

  @Deprecated
  public static Style getField(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getMPSField(editorCell));
    return style;
  }

  @Deprecated
  public static Style getLocalVariable(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getMPSLocalVariable(editorCell));
    return style;
  }

  @Deprecated
  public static Style getParameter(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getMPSParameter(editorCell));
    return style;
  }

  @Deprecated
  public static Style getStaticField(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getVariableName(editorCell));
    return style;
  }

  @Deprecated
  public static Style getStringLiteral(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getString(editorCell));
    return style;
  }

  @Deprecated
  public static Style getNumericLiteral(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getNumeric(editorCell));
    return style;
  }

  @Deprecated
  public static Style getEmptyCell(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getNotUsed(editorCell));
    return style;
  }

  @Deprecated
  public static Style getInstanceMethod(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    return style;
  }

  @Deprecated
  public static Style getStaticMethod(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getMPSStaticMethod(editorCell));
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.ITALIC);
    return style;
  }

  @Deprecated
  public static Style getAnnotation(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getMPSAnnotation(editorCell));
    return style;
  }

  @Deprecated
  public static Style getOperator(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getMPSOperation(editorCell));
    return style;
  }

  @Deprecated
  public static Style getAnyBracket(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, true);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    return style;
  }

  @Deprecated
  public static Style getParenthesis(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getMPSParentheses(editorCell));
    style.set(StyleAttributes.MATCHING_LABEL, "parenthesis");
    return style;
  }

  @Deprecated
  public static Style getLeftParen(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getParenthesis(editorCell));
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
    return style;
  }

  @Deprecated
  public static Style getLeftParenAfterName(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getLeftParen(editorCell));
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    return style;
  }

  @Deprecated
  public static Style getRightParen(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getParenthesis(editorCell));
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    return style;
  }

  @Deprecated
  public static Style getBrace(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getMPSBraces(editorCell));
    style.set(StyleAttributes.MATCHING_LABEL, "brace");
    return style;
  }

  @Deprecated
  public static Style getLeftBrace(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getBrace(editorCell));
    return style;
  }

  @Deprecated
  public static Style getRightBrace(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getBrace(editorCell));
    return style;
  }

  @Deprecated
  public static Style getBracket(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getMPSBrackets(editorCell));
    style.set(StyleAttributes.MATCHING_LABEL, "bracket");
    return style;
  }

  @Deprecated
  public static Style getLeftBracket(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getBracket(editorCell));
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
    return style;
  }

  @Deprecated
  public static Style getRightBracket(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getBracket(editorCell));
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    return style;
  }

  @Deprecated
  public static Style getAngleBracket(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getAnyBracket(editorCell));
    style.set(StyleAttributes.MATCHING_LABEL, "angleBracket");
    return style;
  }

  @Deprecated
  public static Style getLeftAngleBracket(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getAngleBracket(editorCell));
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
    return style;
  }

  @Deprecated
  public static Style getRightAngleBracket(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getAngleBracket(editorCell));
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
    return style;
  }

  @Deprecated
  public static Style getMethodName(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getMPSMethodDeclaration(editorCell));
    return style;
  }

  @Deprecated
  public static Style getVariableName(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getMPSVariable(editorCell));
    return style;
  }

  @Deprecated
  public static Style getClassName(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getMPSClassName(editorCell));
    return style;
  }

  @Deprecated
  public static Style getSemicolon(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getMPSSemicolon(editorCell));
    style.set(StyleAttributes.EDITABLE, false);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    return style;
  }

  @Deprecated
  public static Style getDot(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getMPSDot(editorCell));
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
    style.set(StyleAttributes.SELECTABLE, false);
    return style;
  }

  @Deprecated
  public static Style getBaseAngleBracket(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.MATCHING_LABEL, "AngleBracket");
    return style;
  }

  @Deprecated
  public static Style getMatching(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.MATCHING_LABEL, "matching");
    return style;
  }

  @Deprecated
  public static Style getFoldedCell(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getMPSFolded(editorCell));
    return style;
  }

  @Deprecated
  public static Style getLabel(final jetbrains.mps.nodeEditor.cells.EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.DARK_GREEN);
    return style;
  }

  public static void applyKeyWord(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyMPSKeyWord(style, editorCell);
  }

  public static void applyCompactKeyWord(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyKeyWord(style, editorCell);
  }

  public static void applyComment(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyMPSComment(style, editorCell);
  }

  public static void applyJavaDoc(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyDoc(style, editorCell);
  }

  public static void applyJavaDocTag(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyDocTag(style, editorCell);
  }

  public static void applyField(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyMPSField(style, editorCell);
  }

  public static void applyLocalVariable(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyMPSLocalVariable(style, editorCell);
  }

  public static void applyParameter(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyMPSParameter(style, editorCell);
  }

  public static void applyStaticField(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyVariableName(style, editorCell);
  }

  public static void applyStringLiteral(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyString(style, editorCell);
  }

  public static void applyNumericLiteral(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyNumeric(style, editorCell);
  }

  public static void applyEmptyCell(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyNotUsed(style, editorCell);
  }

  public static void applyInstanceMethod(Style style, EditorCell editorCell) {
  }

  public static void applyStaticMethod(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyMPSStaticMethod(style, editorCell);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.ITALIC);
  }

  public static void applyAnnotation(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyMPSAnnotation(style, editorCell);
  }

  public static void applyOperator(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyMPSOperation(style, editorCell);
  }

  public static void applyAnyBracket(Style style, EditorCell editorCell) {
    style.set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, true);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
  }

  public static void applyParenthesis(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyMPSParentheses(style, editorCell);
    style.set(StyleAttributes.MATCHING_LABEL, "parenthesis");
  }

  public static void applyLeftParen(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyParenthesis(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
  }

  public static void applyLeftParenAfterName(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyLeftParen(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
  }

  public static void applyRightParen(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyParenthesis(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
  }

  public static void applyBrace(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyMPSBraces(style, editorCell);
    style.set(StyleAttributes.MATCHING_LABEL, "brace");
  }

  public static void applyLeftBrace(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyBrace(style, editorCell);
  }

  public static void applyRightBrace(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyBrace(style, editorCell);
  }

  public static void applyBracket(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyMPSBrackets(style, editorCell);
    style.set(StyleAttributes.MATCHING_LABEL, "bracket");
  }

  public static void applyLeftBracket(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyBracket(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
  }

  public static void applyRightBracket(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyBracket(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
  }

  public static void applyAngleBracket(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyAnyBracket(style, editorCell);
    style.set(StyleAttributes.MATCHING_LABEL, "angleBracket");
  }

  public static void applyLeftAngleBracket(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyAngleBracket(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
  }

  public static void applyRightAngleBracket(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyAngleBracket(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
  }

  public static void applyMethodName(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyMPSMethodDeclaration(style, editorCell);
  }

  public static void applyVariableName(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyMPSVariable(style, editorCell);
  }

  public static void applyClassName(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyMPSClassName(style, editorCell);
  }

  public static void applySemicolon(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyMPSSemicolon(style, editorCell);
    style.set(StyleAttributes.EDITABLE, false);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
  }

  public static void applyDot(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyMPSDot(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
    style.set(StyleAttributes.SELECTABLE, false);
  }

  public static void applyBaseAngleBracket(Style style, EditorCell editorCell) {
    style.set(StyleAttributes.MATCHING_LABEL, "AngleBracket");
  }

  public static void applyMatching(Style style, EditorCell editorCell) {
    style.set(StyleAttributes.MATCHING_LABEL, "matching");
  }

  public static void applyFoldedCell(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyMPSFolded(style, editorCell);
  }

  public static void applyLabel(Style style, EditorCell editorCell) {
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.DARK_GREEN);
  }

  private static boolean _StyleParameter_QueryFunction_the604_a0d(EditorContext editorContext, SNode node) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.TextCommentPart") && BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.as(node, "jetbrains.mps.baseLanguage.structure.TextCommentPart"), "virtual_isToDo_7236590470026152831", new Object[]{});
  }

  private static boolean _StyleParameter_QueryFunction_the604_a0m(EditorContext editorContext, SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember")) {
      if (BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember"), "virtual_isStatic_7405920559687241224", new Object[]{})) {
        if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.VariableDeclaration") && SPropertyOperations.getBoolean(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.VariableDeclaration"), "isFinal")) {
          return true;
        }
      }
    }
    return false;
  }

  private static boolean _StyleParameter_QueryFunction_the604_a1m(EditorContext editorContext, SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember")) {
      if (BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember"), "virtual_isStatic_7405920559687241224", new Object[]{})) {
        if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.VariableDeclaration") && SPropertyOperations.getBoolean(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.VariableDeclaration"), "isFinal"))) {
          return true;
        }
      }
    }
    return false;
  }

  private static boolean _StyleParameter_QueryFunction_the604_a2m(EditorContext editorContext, SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember")) {
      if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember"), "virtual_isStatic_7405920559687241224", new Object[]{}))) {
        return true;
      }
    }
    return false;
  }

  private static boolean _StyleParameter_QueryFunction_the604_a3m(EditorContext editorContext, SNode node) {
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember"))) {
      return true;
    }
    return false;
  }

  private static boolean _StyleParameter_QueryFunction_the604_a1o(EditorContext editorContext, SNode node) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");
  }
}
