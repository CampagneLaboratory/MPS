package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.nodeEditor.MPSFonts;
import java.awt.Color;

public class BaseLanguageStyle_StyleSheet {
  @Deprecated
  public static Style getKeyWord(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.DARK_BLUE);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
    return style;
  }

  @Deprecated
  public static Style getCompactKeyWord(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getKeyWord(editorCell));
    return style;
  }

  @Deprecated
  public static Style getComment(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.gray);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
    return style;
  }

  @Deprecated
  public static Style getJavaDoc(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.gray);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD_ITALIC);
    style.set(StyleAttributes.UNDERLINED, true);
    return style;
  }

  @Deprecated
  public static Style getField(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.DARK_MAGENTA);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
    return style;
  }

  @Deprecated
  public static Style getLocalVariable(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    return style;
  }

  @Deprecated
  public static Style getParameter(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    return style;
  }

  @Deprecated
  public static Style getStaticField(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.DARK_MAGENTA);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD_ITALIC);
    return style;
  }

  @Deprecated
  public static Style getStringLiteral(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.DARK_GREEN);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
    return style;
  }

  @Deprecated
  public static Style getNumericLiteral(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.blue);
    return style;
  }

  @Deprecated
  public static Style getEmptyCell(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.lightGray);
    return style;
  }

  @Deprecated
  public static Style getInstanceMethod(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    return style;
  }

  @Deprecated
  public static Style getStaticMethod(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.ITALIC);
    return style;
  }

  @Deprecated
  public static Style getAnnotation(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.DARK_GREEN);
    return style;
  }

  @Deprecated
  public static Style getOperator(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    return style;
  }

  @Deprecated
  public static Style getAnyBracket(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, true);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    return style;
  }

  @Deprecated
  public static Style getParenthesis(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getAnyBracket(editorCell));
    style.set(StyleAttributes.MATCHING_LABEL, "parenthesis");
    return style;
  }

  @Deprecated
  public static Style getLeftParen(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getParenthesis(editorCell));
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
    return style;
  }

  @Deprecated
  public static Style getLeftParenAfterName(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getLeftParen(editorCell));
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    return style;
  }

  @Deprecated
  public static Style getRightParen(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getParenthesis(editorCell));
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    return style;
  }

  @Deprecated
  public static Style getBrace(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getAnyBracket(editorCell));
    style.set(StyleAttributes.MATCHING_LABEL, "brace");
    return style;
  }

  @Deprecated
  public static Style getLeftBrace(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getBrace(editorCell));
    return style;
  }

  @Deprecated
  public static Style getRightBrace(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getBrace(editorCell));
    return style;
  }

  @Deprecated
  public static Style getBracket(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getAnyBracket(editorCell));
    style.set(StyleAttributes.MATCHING_LABEL, "bracket");
    return style;
  }

  @Deprecated
  public static Style getLeftBracket(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getBracket(editorCell));
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
    return style;
  }

  @Deprecated
  public static Style getRightBracket(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getBracket(editorCell));
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    return style;
  }

  @Deprecated
  public static Style getAngleBracket(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getAnyBracket(editorCell));
    style.set(StyleAttributes.MATCHING_LABEL, "angleBracket");
    return style;
  }

  @Deprecated
  public static Style getLeftAngleBracket(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getAngleBracket(editorCell));
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
    return style;
  }

  @Deprecated
  public static Style getRightAngleBracket(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.putAll(BaseLanguageStyle_StyleSheet.getAngleBracket(editorCell));
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
    return style;
  }

  @Deprecated
  public static Style getMethodName(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    return style;
  }

  @Deprecated
  public static Style getVariableName(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    return style;
  }

  @Deprecated
  public static Style getClassName(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    return style;
  }

  @Deprecated
  public static Style getSemicolon(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.EDITABLE, false);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    return style;
  }

  @Deprecated
  public static Style getDot(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
    style.set(StyleAttributes.SELECTABLE, false);
    return style;
  }

  @Deprecated
  public static Style getBaseAngleBracket(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.MATCHING_LABEL, "AngleBracket");
    return style;
  }

  @Deprecated
  public static Style getMatching(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.MATCHING_LABEL, "matching");
    return style;
  }

  @Deprecated
  public static Style getFoldedCell(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.TEXT_BACKGROUND_COLOR, new Color(15790320));
    style.set(StyleAttributes.TEXT_COLOR, new Color(12829635));
    return style;
  }

  @Deprecated
  public static Style getLabel(final EditorCell editorCell) {
    Style style = new StyleImpl(editorCell);
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.DARK_GREEN);
    return style;
  }

  public static void applyKeyWord(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.DARK_BLUE);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
  }

  public static void applyCompactKeyWord(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyKeyWord(style, editorCell);
  }

  public static void applyComment(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.gray);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
  }

  public static void applyJavaDoc(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.gray);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD_ITALIC);
    style.set(StyleAttributes.UNDERLINED, true);
  }

  public static void applyField(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.DARK_MAGENTA);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
  }

  public static void applyLocalVariable(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
  }

  public static void applyParameter(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
  }

  public static void applyStaticField(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.DARK_MAGENTA);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD_ITALIC);
  }

  public static void applyStringLiteral(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.DARK_GREEN);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
  }

  public static void applyNumericLiteral(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.blue);
  }

  public static void applyEmptyCell(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.lightGray);
  }

  public static void applyInstanceMethod(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
  }

  public static void applyStaticMethod(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.ITALIC);
  }

  public static void applyAnnotation(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.DARK_GREEN);
  }

  public static void applyOperator(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
  }

  public static void applyAnyBracket(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    style.set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, true);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
  }

  public static void applyParenthesis(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyAnyBracket(style, editorCell);
    style.set(StyleAttributes.MATCHING_LABEL, "parenthesis");
  }

  public static void applyLeftParen(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyParenthesis(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
  }

  public static void applyLeftParenAfterName(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyLeftParen(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
  }

  public static void applyRightParen(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyParenthesis(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
  }

  public static void applyBrace(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyAnyBracket(style, editorCell);
    style.set(StyleAttributes.MATCHING_LABEL, "brace");
  }

  public static void applyLeftBrace(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyBrace(style, editorCell);
  }

  public static void applyRightBrace(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyBrace(style, editorCell);
  }

  public static void applyBracket(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyAnyBracket(style, editorCell);
    style.set(StyleAttributes.MATCHING_LABEL, "bracket");
  }

  public static void applyLeftBracket(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyBracket(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
  }

  public static void applyRightBracket(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyBracket(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
  }

  public static void applyAngleBracket(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyAnyBracket(style, editorCell);
    style.set(StyleAttributes.MATCHING_LABEL, "angleBracket");
  }

  public static void applyLeftAngleBracket(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyAngleBracket(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
  }

  public static void applyRightAngleBracket(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.applyAngleBracket(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
  }

  public static void applyMethodName(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
  }

  public static void applyVariableName(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
  }

  public static void applyClassName(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
  }

  public static void applySemicolon(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    style.set(StyleAttributes.EDITABLE, false);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
  }

  public static void applyDot(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
    style.set(StyleAttributes.SELECTABLE, false);
  }

  public static void applyBaseAngleBracket(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    style.set(StyleAttributes.MATCHING_LABEL, "AngleBracket");
  }

  public static void applyMatching(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    style.set(StyleAttributes.MATCHING_LABEL, "matching");
  }

  public static void applyFoldedCell(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    style.set(StyleAttributes.TEXT_BACKGROUND_COLOR, new Color(15790320));
    style.set(StyleAttributes.TEXT_COLOR, new Color(12829635));
  }

  public static void applyLabel(Style style, jetbrains.mps.openapi.editor.cells.EditorCell editorCell) {
    style.set(StyleAttributes.TEXT_COLOR, MPSColors.DARK_GREEN);
  }
}
