package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.style.StyleRegistry;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class BaseLanguageStyle_StyleSheet {
  public static void apply_KeyWord(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("KEYWORD"));
  }

  public static void apply_CompactKeyWord(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.apply_KeyWord(style, editorCell);
  }

  public static void apply_CommentPG(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("LINE_COMMENT"), 1);
  }

  public static void apply_Comment(Style style, EditorCell editorCell) {
    {
      Style styleToPut;
      styleToPut = new StyleImpl();
      BaseLanguageStyle_StyleSheet.apply_CommentPG(styleToPut, editorCell);
      style.putAll(styleToPut);
    }
  }

  public static void apply_TODO_PG(Style style, EditorCell editorCell) {
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a0e((editorCell == null ? null : editorCell.getContext()), (editorCell == null ? null : editorCell.getSNode()))) {
      style.putAll(StyleRegistry.getInstance().getStyle("TODO"), 2);
    }
  }

  public static void apply_TODO(Style style, EditorCell editorCell) {
    {
      Style styleToPut;
      styleToPut = new StyleImpl();
      BaseLanguageStyle_StyleSheet.apply_TODO_PG(styleToPut, editorCell);
      style.putAll(styleToPut);
    }
  }

  public static void apply_BlockCommentPG(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("BLOCK_COMMENT"), 1);
  }

  public static void apply_BlockComment(Style style, EditorCell editorCell) {
    {
      Style styleToPut;
      styleToPut = new StyleImpl();
      BaseLanguageStyle_StyleSheet.apply_BlockCommentPG(styleToPut, editorCell);
      style.putAll(styleToPut);
    }
  }

  public static void apply_JavaDoc(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("DOC_COMMENT"));
  }

  public static void apply_JavaDocTag(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("DOC_TAG"));
  }

  public static void apply_Field(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("INSTANCE_FIELD"));
  }

  public static void apply_LocalVariable(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("LOCAL_VARIABLE"));
  }

  public static void apply_Parameter(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("PARAMETER"));
  }

  public static void apply_StaticField(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.apply_VariableName(style, editorCell);
  }

  public static void apply_StringLiteral(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("STRING"));
  }

  public static void apply_NumericLiteral(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("NUMBER"));
  }

  public static void apply_EmptyCell(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("NOT_USED_ELEMENT"));
  }

  public static void apply_InstanceMethod(Style style, EditorCell editorCell) {
  }

  public static void apply_StaticMethod(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("STATIC_METHOD"));
  }

  public static void apply_Annotation(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("ANNOTATION"));
  }

  public static void apply_Operator(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("OPERATION_SIGN"));
  }

  public static void apply_AnyBracket(Style style, EditorCell editorCell) {
    style.set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, true);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
  }

  public static void apply_Parenthesis(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.apply_AnyBracket(style, editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("PARENTH"));
    style.set(StyleAttributes.MATCHING_LABEL, "parenthesis");
  }

  public static void apply_LeftParen(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.apply_Parenthesis(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
  }

  public static void apply_LeftParenAfterName(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.apply_LeftParen(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
  }

  public static void apply_RightParen(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.apply_Parenthesis(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
  }

  public static void apply_Brace(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.apply_AnyBracket(style, editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("BRACES"));
    style.set(StyleAttributes.MATCHING_LABEL, "brace");
  }

  public static void apply_LeftBrace(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.apply_Brace(style, editorCell);
  }

  public static void apply_RightBrace(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.apply_Brace(style, editorCell);
  }

  public static void apply_Bracket(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.apply_AnyBracket(style, editorCell);
    style.putAll(StyleRegistry.getInstance().getStyle("BRACKETS"));
    style.set(StyleAttributes.MATCHING_LABEL, "bracket");
  }

  public static void apply_LeftBracket(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.apply_Bracket(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
  }

  public static void apply_RightBracket(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.apply_Bracket(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
  }

  public static void apply_AngleBracket(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.apply_AnyBracket(style, editorCell);
    style.set(StyleAttributes.MATCHING_LABEL, "angleBracket");
  }

  public static void apply_LeftAngleBracket(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.apply_AngleBracket(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
  }

  public static void apply_RightAngleBracket(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.apply_AngleBracket(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
  }

  public static void apply_MethodName(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("METHOD_DECLARATION"));
  }

  public static void apply_MPSMethodCall(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("METHOD_CALL"));
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a1kb((editorCell == null ? null : editorCell.getContext()), (editorCell == null ? null : editorCell.getSNode()))) {
      style.putAll(StyleRegistry.getInstance().getStyle("STATIC_METHOD"));
    }
  }

  public static void apply_VariableName(Style style, EditorCell editorCell) {
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a0lb((editorCell == null ? null : editorCell.getContext()), (editorCell == null ? null : editorCell.getSNode()))) {
      style.putAll(StyleRegistry.getInstance().getStyle("STATIC_FINAL_FIELD"));
    }
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a1lb((editorCell == null ? null : editorCell.getContext()), (editorCell == null ? null : editorCell.getSNode()))) {
      style.putAll(StyleRegistry.getInstance().getStyle("STATIC_FIELD"));
    }
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a2lb((editorCell == null ? null : editorCell.getContext()), (editorCell == null ? null : editorCell.getSNode()))) {
      style.putAll(StyleRegistry.getInstance().getStyle("INSTANCE_FIELD"));
    }
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a3lb((editorCell == null ? null : editorCell.getContext()), (editorCell == null ? null : editorCell.getSNode()))) {
      style.putAll(StyleRegistry.getInstance().getStyle("LOCAL_VARIABLE"));
    }
  }

  public static void apply_ClassName(Style style, EditorCell editorCell) {
    BaseLanguageStyle_StyleSheet.apply_ConceptName(style, editorCell);
  }

  public static void apply_ConceptName(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("CLASS_NAME"));
  }

  public static void apply_Semicolon(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("SEMICOLON"));
    style.set(StyleAttributes.EDITABLE, false);
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
  }

  public static void apply_Dot(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("DOT"));
    style.set(StyleAttributes.PUNCTUATION_LEFT, true);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, true);
    style.set(StyleAttributes.SELECTABLE, false);
  }

  public static void apply_BaseAngleBracket(Style style, EditorCell editorCell) {
    style.set(StyleAttributes.MATCHING_LABEL, "AngleBracket");
  }

  public static void apply_Matching(Style style, EditorCell editorCell) {
    style.set(StyleAttributes.MATCHING_LABEL, "matching");
  }

  public static void apply_FoldedCell(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("FOLDED_TEXT"));
  }

  public static void apply_Url(Style style, EditorCell editorCell) {
    style.putAll(StyleRegistry.getInstance().getStyle("URL"));
  }

  public static void apply_Label(Style style, EditorCell editorCell) {
    style.set(StyleAttributes.TEXT_COLOR, StyleRegistry.getInstance().getSimpleColor(MPSColors.DARK_GREEN));
  }

  public static void apply_FirstLevel(Style style, EditorCell editorCell) {
    style.set(StyleAttributes.TEXT_COLOR, StyleRegistry.getInstance().getSimpleColor(MPSColors.darkGray));
  }

  public static void apply_SecondLevel(Style style, EditorCell editorCell) {
    style.set(StyleAttributes.TEXT_COLOR, StyleRegistry.getInstance().getSimpleColor(MPSColors.gray));
  }

  public static void apply_ThirdLevel(Style style, EditorCell editorCell) {
    style.set(StyleAttributes.TEXT_COLOR, StyleRegistry.getInstance().getSimpleColor(MPSColors.lightGray));
  }



  private static boolean _StyleParameter_QueryFunction_the604_a0e(EditorContext editorContext, SNode node) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.TextCommentPart") && BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.as(node, "jetbrains.mps.baseLanguage.structure.TextCommentPart"), "virtual_isToDo_7236590470026152831", new Object[]{});
  }

  private static boolean _StyleParameter_QueryFunction_the604_a1kb(EditorContext editorContext, SNode node) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");
  }

  private static boolean _StyleParameter_QueryFunction_the604_a0lb(EditorContext editorContext, SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember")) {
      if (BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember"), "virtual_isStatic_7405920559687241224", new Object[]{})) {
        if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.VariableDeclaration") && SPropertyOperations.getBoolean(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.VariableDeclaration"), "isFinal")) {
          return true;
        }
      }
    }
    return false;
  }

  private static boolean _StyleParameter_QueryFunction_the604_a1lb(EditorContext editorContext, SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember")) {
      if (BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember"), "virtual_isStatic_7405920559687241224", new Object[]{})) {
        if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.VariableDeclaration") && SPropertyOperations.getBoolean(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.VariableDeclaration"), "isFinal"))) {
          return true;
        }
      }
    }
    return false;
  }

  private static boolean _StyleParameter_QueryFunction_the604_a2lb(EditorContext editorContext, SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember")) {
      if (!(BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember"), "virtual_isStatic_7405920559687241224", new Object[]{}))) {
        return true;
      }
    }
    return false;
  }

  private static boolean _StyleParameter_QueryFunction_the604_a3lb(EditorContext editorContext, SNode node) {
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember"))) {
      return true;
    }
    return false;
  }
}
