package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class DeleteIfUtil {
  public static void unwrapIf(SNode ifStatement) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(ifStatement), "jetbrains.mps.baseLanguage.structure.StatementList")) {
      final SNode statementList = SNodeOperations.cast(SNodeOperations.getParent(ifStatement), "jetbrains.mps.baseLanguage.structure.StatementList");
      final Wrappers._int index = new Wrappers._int(ListSequence.fromList(SLinkOperations.getTargets(statementList, "statement", true)).indexOf(ifStatement));
      ListSequence.fromList(SLinkOperations.getTargets(statementList, "statement", true)).removeElementAt(index.value);
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(ifStatement, "ifTrue", true), "statement", true)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          ListSequence.fromList(SLinkOperations.getTargets(statementList, "statement", true)).insertElement(index.value, it);
          index.value += 1;
        }
      });
    } else {
      SNode statement = SNodeFactoryOperations.replaceWithNewChild(ifStatement, "jetbrains.mps.baseLanguage.structure.BlockStatement");
      SLinkOperations.setTarget(statement, "statements", SLinkOperations.getTarget(ifStatement, "ifTrue", true), true);
    }
    SNodeOperations.deleteNode(ifStatement);
  }



  public static void unwrapElse(SNode ifStatement) {
    if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(ifStatement), "jetbrains.mps.baseLanguage.structure.StatementList"))) {
      SNodeOperations.detachNode(SLinkOperations.getTarget(ifStatement, "ifFalseStatement", true));
    } else {
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ifStatement, "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.BlockStatement")) {
        SNode block = SNodeOperations.cast(SLinkOperations.getTarget(ifStatement, "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.BlockStatement");
        while (ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(block, "statements", true), "statement", true)).isNotEmpty()) {
          SNodeOperations.insertNextSiblingChild(ifStatement, ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(block, "statements", true), "statement", true)).last());
        }
        SNodeOperations.detachNode(SLinkOperations.getTarget(ifStatement, "ifFalseStatement", true));
      } else {
        SNodeOperations.insertNextSiblingChild(ifStatement, SLinkOperations.getTarget(ifStatement, "ifFalseStatement", true));
      }
    }
  }
}
