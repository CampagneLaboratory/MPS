package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class MultiDimension2OneDimensionArrayCreator {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new MultiDimension2OneDimensionArrayCreator.MultiDimension2OneDimensionArrayCreator_DELETE(node));
  }

  public static class MultiDimension2OneDimensionArrayCreator_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;

    public MultiDimension2OneDimensionArrayCreator_DELETE(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode replacing = SNodeFactoryOperations.replaceWithNewChild(node, "jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializer");
      SLinkOperations.setTarget(replacing, "componentType", SLinkOperations.getTarget(node, "componentType", true), true);
      SNode initValues = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "arrayInitializers", true), "initValue", true)).getElement(0);
      if (SNodeOperations.isInstanceOf(initValues, "jetbrains.mps.baseLanguage.structure.ArrayInitializers")) {
        ListSequence.fromList(SLinkOperations.getTargets(replacing, "initValue", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(initValues, "jetbrains.mps.baseLanguage.structure.ArrayInitializers"), "initValue", true)));
      } else {
        ListSequence.fromList(SLinkOperations.getTargets(replacing, "initValue", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "arrayInitializers", true), "initValue", true)));
      }
      editorContext.selectWRTFocusPolicy(replacing);
    }
  }
}
