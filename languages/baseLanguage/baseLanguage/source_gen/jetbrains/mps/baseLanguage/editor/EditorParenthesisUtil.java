package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.baseLanguage.behavior.ParenthesisUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.openapi.editor.EditorComponent;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.CellFinders;

public class EditorParenthesisUtil {
  public EditorParenthesisUtil() {
  }

  public static void addClosingParenthesis(@NotNull SNode expression, boolean opening, EditorContext context) {
    SNode newExpr = ParenthesisUtil.createParenthesis(expression, opening);
    selectNode(context, newExpr, !(opening));
  }

  public static void moveParenthesisToTheRightOrLeft(SNode expr, EditorContext context, boolean toRight) {
    if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(expr), "jetbrains.mps.baseLanguage.structure.BinaryOperation"))) {
      return;
    }
    SNode binOp = ParenthesisUtil.getBinOp(expr, toRight);
    if (binOp == null) {
      return;
    }
    SNode sidemost = findRightmostOrLeftmostLeafExpression(SLinkOperations.getTarget(expr, "expression", true), toRight);
    SNode leaf = findRightmostOrLeftmostLeafExpression((toRight ?
      SLinkOperations.getTarget(binOp, "rightExpression", true) :
      SLinkOperations.getTarget(binOp, "leftExpression", true)
    ), !(toRight));
    SNode backsideSubtree = (toRight ?
      SLinkOperations.getTarget(binOp, "leftExpression", true) :
      SLinkOperations.getTarget(binOp, "rightExpression", true)
    );
    SNodeOperations.detachNode(backsideSubtree);
    SNodeOperations.replaceWithAnother(binOp, backsideSubtree);
    SNodeOperations.replaceWithAnother(sidemost, binOp);
    if (toRight) {
      SLinkOperations.setTarget(binOp, "leftExpression", sidemost, true);
    } else {
      SLinkOperations.setTarget(binOp, "rightExpression", sidemost, true);
    }
    SNode sideSubtree = (toRight ?
      SLinkOperations.getTarget(binOp, "rightExpression", true) :
      SLinkOperations.getTarget(binOp, "leftExpression", true)
    );
    SNodeOperations.detachNode(leaf);
    if (toRight) {
      SLinkOperations.setTarget(binOp, "rightExpression", leaf, true);
    } else {
      SLinkOperations.setTarget(binOp, "leftExpression", leaf, true);
    }
    if (sideSubtree != leaf) {
      SNode leafParentOperation = SNodeOperations.cast(sideSubtree, "jetbrains.mps.baseLanguage.structure.BinaryOperation");
      SNode exprParent = SNodeOperations.getParent(expr);
      SNodeOperations.replaceWithAnother(expr, sideSubtree);
      if (toRight) {
        SLinkOperations.setTarget(leafParentOperation, "leftExpression", expr, true);
      } else {
        SLinkOperations.setTarget(leafParentOperation, "rightExpression", expr, true);
      }
      if (SNodeOperations.isInstanceOf(exprParent, "jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
        ParenthesisUtil.checkOperationWRTPriority(SNodeOperations.cast(exprParent, "jetbrains.mps.baseLanguage.structure.BinaryOperation"));
      }
    }
    SNode binOpCheck = (SNodeOperations.isInstanceOf(SNodeOperations.getParent(binOp), "jetbrains.mps.baseLanguage.structure.BinaryOperation") ?
      SNodeOperations.cast(SNodeOperations.getParent(binOp), "jetbrains.mps.baseLanguage.structure.BinaryOperation") :
      binOp
    );
    ParenthesisUtil.checkOperationWRTPriority(binOpCheck);
    selectNode(context, expr, toRight);
  }

  private static void selectNode(EditorContext context, SNode expr, boolean selectLastLeaf) {
    context.flushEvents();
    EditorComponent component = context.getEditorComponent();
    EditorCell nodeCell = (EditorCell) component.findNodeCell(expr);
    EditorCell cell = nodeCell.findChild((selectLastLeaf ?
      CellFinders.LAST_SELECTABLE_LEAF :
      CellFinders.FIRST_SELECTABLE_LEAF
    ));
    if (cell != null) {
      component.changeSelection(cell);
    }
  }

  public static void moveParenthesisToTheLeftOrRightInside(SNode expr, EditorContext context, boolean toRight) {
    if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(expr, "expression", true), "jetbrains.mps.baseLanguage.structure.BinaryOperation"))) {
      return;
    }
    SNode sidemost = findRightmostOrLeftmostLeafExpression(SLinkOperations.getTarget(expr, "expression", true), !(toRight));
    SNode binOp = SNodeOperations.cast(SNodeOperations.getParent(sidemost), "jetbrains.mps.baseLanguage.structure.BinaryOperation");
    SNode sideExpr = (toRight ?
      SLinkOperations.getTarget(binOp, "rightExpression", true) :
      SLinkOperations.getTarget(binOp, "leftExpression", true)
    );
    SNodeOperations.detachNode(sideExpr);
    SNodeOperations.replaceWithAnother(binOp, sideExpr);
    SNodeOperations.replaceWithAnother(expr, binOp);
    if (toRight) {
      SLinkOperations.setTarget(binOp, "rightExpression", expr, true);
    } else {
      SLinkOperations.setTarget(binOp, "leftExpression", expr, true);
    }
    ParenthesisUtil.checkOperationWRTPriority(binOp);
    selectNode(context, expr, false);
  }

  private static SNode findRightmostOrLeftmostLeafExpression(SNode root, boolean rightmost) {
    if (!(SNodeOperations.isInstanceOf(root, "jetbrains.mps.baseLanguage.structure.BinaryOperation"))) {
      return root;
    }
    SNode binOp = SNodeOperations.cast(root, "jetbrains.mps.baseLanguage.structure.BinaryOperation");
    return findRightmostOrLeftmostLeafExpression((rightmost ?
      SLinkOperations.getTarget(binOp, "rightExpression", true) :
      SLinkOperations.getTarget(binOp, "leftExpression", true)
    ), rightmost);
  }
}
