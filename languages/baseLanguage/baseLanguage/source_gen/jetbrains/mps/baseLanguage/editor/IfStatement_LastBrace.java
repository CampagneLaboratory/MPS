package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class IfStatement_LastBrace {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new IfStatement_LastBrace.IfStatement_LastBrace_DELETE(node));
    editorCell.setAction(CellActionType.BACKSPACE, new IfStatement_LastBrace.IfStatement_LastBrace_BACKSPACE(node));
  }
  public static class IfStatement_LastBrace_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public IfStatement_LastBrace_DELETE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      if (ListSequence.fromList(SLinkOperations.getTargets(node, "elsifClauses", true)).isNotEmpty()) {
        SNodeOperations.deleteNode(ListSequence.fromList(SLinkOperations.getTargets(node, "elsifClauses", true)).first());
      } else if ((SLinkOperations.getTarget(node, "ifFalseStatement", true) != null)) {
        DeleteIfUtil.unwrapElse(node);
      } else if (ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "ifTrue", true), "statement", true)).isNotEmpty()) {
        DeleteIfUtil.unwrapIf(node);
      } else {
        SNodeOperations.deleteNode(node);
      }
    }
  }
  public static class IfStatement_LastBrace_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public IfStatement_LastBrace_BACKSPACE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      if (ListSequence.fromList(SLinkOperations.getTargets(node, "elsifClauses", true)).isNotEmpty()) {
        SNodeOperations.deleteNode(ListSequence.fromList(SLinkOperations.getTargets(node, "elsifClauses", true)).first());
      } else if ((SLinkOperations.getTarget(node, "ifFalseStatement", true) != null)) {
        DeleteIfUtil.unwrapElse(node);
      } else if (ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "ifTrue", true), "statement", true)).isNotEmpty()) {
        DeleteIfUtil.unwrapIf(node);
      } else {
        SNodeOperations.deleteNode(node);
      }
    }
  }
}
