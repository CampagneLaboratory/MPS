package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.KeyMapImpl;
import jetbrains.mps.openapi.editor.cells.KeyMapAction;
import jetbrains.mps.editor.runtime.cells.KeyMapActionImpl;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.FieldDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class FieldDeclaration_keyMap extends KeyMapImpl {
  public FieldDeclaration_keyMap() {
    this.setApplicableToEveryModel(false);
    KeyMapAction action;
    action = new FieldDeclaration_keyMap.FieldDeclaration_keyMap_Action0();
    this.putAction("alt", "VK_INSERT", action);
    this.putAction("alt", "VK_HELP", action);
    action = new FieldDeclaration_keyMap.FieldDeclaration_keyMap_Action1();
    this.putAction("alt", "VK_INSERT", action);
    this.putAction("alt", "VK_HELP", action);
  }
  public static class FieldDeclaration_keyMap_Action0 extends KeyMapActionImpl {
    public FieldDeclaration_keyMap_Action0() {
      this.setShownInPopupMenu(true);
    }
    public String getDescriptionText() {
      return "Generate getter";
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeUtil.isInstanceOf(contextNode, SConceptRepository.getInstance().getConcept("jetbrains.mps.baseLanguage.structure.FieldDeclaration")))) {
        return false;
      }
      return this.canExecute_internal(editorContext, contextNode, this.getSelectedNodes(editorContext));
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private boolean canExecute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode classConcept = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
      return (classConcept != null) && !(FieldDeclaration_Behavior.call_hasGetter_1213877243808(node, classConcept));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode g;
      g = _quotation_createNode_bsktda_a0b0a0(SNodeOperations.copyNode(SLinkOperations.getTarget(node, "type", true)), node, FieldDeclaration_Behavior.call_getGetterName_1213877243782(node));
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false), "member", true)).addElement(g);
    }
    public String getKeyStroke() {
      return "alt INSERT";
    }
    private static SNode _quotation_createNode_bsktda_a0b0a0(Object parameter_1, Object parameter_2, Object parameter_3) {
      PersistenceFacade facade = PersistenceFacade.getInstance();
      SNode quotedNode_4 = null;
      SNode quotedNode_5 = null;
      SNode quotedNode_6 = null;
      SNode quotedNode_7 = null;
      SNode quotedNode_8 = null;
      SNode quotedNode_9 = null;
      SNode quotedNode_10 = null;
      SNode quotedNode_11 = null;
      quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", null, null, false);
      SNodeAccessUtil.setProperty(quotedNode_4, "name", (String) parameter_3);
      quotedNode_5 = (SNode) parameter_1;
      if (quotedNode_5 != null) {
        quotedNode_4.addChild("returnType", HUtil.copyIfNecessary(quotedNode_5));
      }
      quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, null, false);
      quotedNode_4.addChild("visibility", quotedNode_6);
      quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, false);
      quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, false);
      quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
      quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisExpression", null, null, false);
      quotedNode_9.addChild("operand", quotedNode_10);
      quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation", null, null, false);
      SNodeAccessUtil.setReferenceTarget(quotedNode_11, "fieldDeclaration", (SNode) parameter_2);
      quotedNode_9.addChild("operation", quotedNode_11);
      quotedNode_8.addChild("expression", quotedNode_9);
      quotedNode_7.addChild("statement", quotedNode_8);
      quotedNode_4.addChild("body", quotedNode_7);
      return quotedNode_4;
    }
  }
  public static class FieldDeclaration_keyMap_Action1 extends KeyMapActionImpl {
    public FieldDeclaration_keyMap_Action1() {
      this.setShownInPopupMenu(true);
    }
    public String getDescriptionText() {
      return "Generate setter";
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeUtil.isInstanceOf(contextNode, SConceptRepository.getInstance().getConcept("jetbrains.mps.baseLanguage.structure.FieldDeclaration")))) {
        return false;
      }
      return this.canExecute_internal(editorContext, contextNode, this.getSelectedNodes(editorContext));
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private boolean canExecute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode classConcept = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
      return (classConcept != null) && !(FieldDeclaration_Behavior.call_hasSetter_1213877243871(node, classConcept));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode s;
      s = _quotation_createNode_bsktda_a0b0a1(node, FieldDeclaration_Behavior.call_getSetterName_1213877243861(node), SNodeOperations.copyNode(SLinkOperations.getTarget(node, "type", true)), SPropertyOperations.getString(node, "name"));
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false), "member", true)).addElement(s);
    }
    public String getKeyStroke() {
      return "alt INSERT";
    }
    private static SNode _quotation_createNode_bsktda_a0b0a1(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {
      PersistenceFacade facade = PersistenceFacade.getInstance();
      SNode quotedNode_5 = null;
      SNode quotedNode_6 = null;
      SNode quotedNode_7 = null;
      SNode quotedNode_8 = null;
      SNode quotedNode_9 = null;
      SNode quotedNode_10 = null;
      SNode quotedNode_11 = null;
      SNode quotedNode_12 = null;
      SNode quotedNode_13 = null;
      SNode quotedNode_14 = null;
      SNode quotedNode_15 = null;
      SNode quotedNode_16 = null;
      quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", null, null, false);
      SNodeAccessUtil.setProperty(quotedNode_5, "name", (String) parameter_2);
      quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VoidType", null, null, false);
      quotedNode_5.addChild("returnType", quotedNode_6);
      quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PublicVisibility", null, null, false);
      quotedNode_5.addChild("visibility", quotedNode_7);
      quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, false);
      quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, false);
      quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression", null, null, false);
      quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference", null, null, false);
      quotedNode_12.addChild("rValue", quotedNode_13);
      quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
      quotedNode_15 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisExpression", null, null, false);
      quotedNode_14.addChild("operand", quotedNode_15);
      quotedNode_16 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation", null, null, false);
      SNodeAccessUtil.setReferenceTarget(quotedNode_16, "fieldDeclaration", (SNode) parameter_1);
      quotedNode_14.addChild("operation", quotedNode_16);
      quotedNode_12.addChild("lValue", quotedNode_14);
      quotedNode_10.addChild("expression", quotedNode_12);
      quotedNode_8.addChild("statement", quotedNode_10);
      quotedNode_5.addChild("body", quotedNode_8);
      quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null, null, false);
      SNodeAccessUtil.setProperty(quotedNode_9, "name", (String) parameter_4);
      quotedNode_11 = (SNode) parameter_3;
      if (quotedNode_11 != null) {
        quotedNode_9.addChild("type", HUtil.copyIfNecessary(quotedNode_11));
      }
      quotedNode_5.addChild("parameter", quotedNode_9);
      SNodeAccessUtil.setReferenceTarget(quotedNode_13, "variableDeclaration", quotedNode_9);
      return quotedNode_5;
    }
  }
}
