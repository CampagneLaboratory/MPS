package jetbrains.mps.baseLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferencePresentationContext;
import jetbrains.mps.baseLanguage.behavior.Classifier_Behavior;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.baseLanguage.scopes.ClassifierScopes;
import jetbrains.mps.smodel.SNodePointer;

public class ClassifierClassExpression_Constraints extends BaseConstraintsDescriptor {
  public ClassifierClassExpression_Constraints() {
    super("jetbrains.mps.baseLanguage.structure.ClassifierClassExpression");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("classifier", new BaseReferenceConstraintsDescriptor("classifier", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      };;
;
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public boolean hasPresentation() {
            return true;
          };;
;
          @Override
          public String getPresentation(final IOperationContext operationContext, final ReferencePresentationContext _context) {
            String nameInContext = Classifier_Behavior.call_getNestedNameInContext_8540045600162183880(_context.getParameterNode(), _context.getEnclosingNode());
            if (_context.getSmartReference()) {
              return nameInContext + ".class";
            }
            return nameInContext;
          };;
;
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_w155fn_a0a2a0a0a1a0b0a1a1;
          };;
;
          @Override
          public Scope createScope(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return ClassifierScopes.getWithClassExpressionClassifiers(_context.getContextNode());
          };;
;        };
      };;
;    });
    return references;
  };;
;
  private static SNodePointer breakingNode_w155fn_a0a2a0a0a1a0b0a1a1 = new SNodePointer("r:00000000-0000-4000-0000-011c895902c1(jetbrains.mps.baseLanguage.constraints)", "7898359107948136857");
}
