package jetbrains.mps.baseLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class EnumConstantDeclaration_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    this.appendNewLine();
    if (isEmptyString(SPropertyOperations.getString(node, "name"))) {
      this.foundError("enum constant without name");
      this.appendWithIndent("???");
    } else {
      this.appendWithIndent(SPropertyOperations.getString(node, "name"));
    }
    this.append("(");
    {
      Iterable<SNode> collection = SLinkOperations.getTargets(node, "actualArgument", true);
      final SNode lastItem = Sequence.fromIterable(collection).last();
      for (SNode item : collection) {
        appendNode(item);
        if (item != lastItem) {
          append(", ");
        }
      }
    }
    this.append(")");
    if (ListSequence.fromList(SLinkOperations.getTargets(node, "method", true)).isNotEmpty()) {
      this.append(" {");
      this.appendNewLine();
      this.increaseDepth();
      for (SNode imd : SLinkOperations.getTargets(node, "method", true)) {
        appendNode(imd);
      }
      this.decreaseDepth();
      this.appendNewLine();
      this.appendWithIndent("}");
    }
  }

  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}
