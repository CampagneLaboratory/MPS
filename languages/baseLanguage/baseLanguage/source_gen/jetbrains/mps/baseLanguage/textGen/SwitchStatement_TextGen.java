package jetbrains.mps.baseLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.textGen.TraceInfoGenerationUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class SwitchStatement_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    if (getBuffer().hasPositionsSupport()) {
      TraceInfoGenerationUtil.createPositionInfo(this, node);
    }
    if ((SLinkOperations.getTarget(node, "switchLabel", true) != null)) {
      this.appendNewLine();
      this.append(SPropertyOperations.getString(SLinkOperations.getTarget(node, "switchLabel", true), "name"));
      this.append(":");
    } else if (SPropertyOperations.getString(node, "label") != null) {
      this.appendNewLine();
      this.append(SPropertyOperations.getString(node, "label"));
      this.append(":");
    }
    this.appendNewLine();
    this.appendWithIndent("switch (");
    appendNode(SLinkOperations.getTarget(node, "expression", true));
    this.append(") {");
    this.increaseDepth();
    for (SNode sc : SLinkOperations.getTargets(node, "case", true)) {
      this.appendNewLine();
      this.appendWithIndent("case ");
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(sc, "expression", true), "jetbrains.mps.baseLanguage.structure.EnumConstantReference")) {
        SNode enumConstant = (SNode) SLinkOperations.getTarget(sc, "expression", true);
        this.append(SPropertyOperations.getString(SLinkOperations.getTarget(enumConstant, "enumConstantDeclaration", false), "name"));
      } else {
        appendNode(SLinkOperations.getTarget(sc, "expression", true));
      }
      this.append(":");
      this.increaseDepth();
      appendNode(SLinkOperations.getTarget(sc, "body", true));
      this.decreaseDepth();
    }
    this.appendNewLine();
    this.appendWithIndent("default:");
    this.increaseDepth();
    appendNode(SLinkOperations.getTarget(node, "defaultBlock", true));
    this.decreaseDepth();
    this.decreaseDepth();
    this.appendNewLine();
    this.appendWithIndent("}");
    if (getBuffer().hasPositionsSupport()) {
      {
        String traceableProperty = "";
        try {
          traceableProperty = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, "jetbrains.mps.lang.traceable.structure.TraceableConcept"), "virtual_getTraceableProperty_5067982036267369901", new Object[]{});
        } catch (Throwable t) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("Can't calculate traceable prorerty for a node " + node + ".", t);
          }
        }
        TraceInfoGenerationUtil.fillPositionInfo(this, node, traceableProperty);
      }
    }
  }

  protected static Logger LOG = LogManager.getLogger(SwitchStatement_TextGen.class);
}
