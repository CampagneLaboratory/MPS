package jetbrains.mps.baseLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.textGen.TraceInfoGenerationUtil;
import jetbrains.mps.textGen.TextGenManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.logging.Logger;

public class CatchClause_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    if (getBuffer().hasPositionsSupport()) {
      TraceInfoGenerationUtil.createScopeInfo(this, node);
    }
    this.appendWithIndent("} catch (");
    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, "throwable", true), this.getSNode());
    this.append(") {");
    this.increaseDepth();
    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, "catchBody", true), this.getSNode());
    this.decreaseDepth();
    if (getBuffer().hasPositionsSupport()) {
      {
        List<SNode> scopeVariables = new ArrayList<SNode>();
        try {
          scopeVariables = BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), SNodeOperations.cast(node, "jetbrains.mps.lang.traceable.structure.ScopeConcept"), "virtual_getScopeVariables_5067982036267369894", new Object[]{});
        } catch (Throwable t) {
          LOG.error("Can't calculate scope variables for a node " + node + ".", t);
        }
        TraceInfoGenerationUtil.fillScopeInfo(this, node, scopeVariables);
      }
    }
  }

  private static Logger LOG = Logger.getLogger(CatchClause_TextGen.class);
}
