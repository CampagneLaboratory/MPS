package jetbrains.mps.baseLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.textGen.SNodeTextGen;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.behavior.Classifier_Behavior;
import jetbrains.mps.textGen.TextGenManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public abstract class BaseClassConceptTextGen {
  public static void members(SNode classifier, final SNodeTextGen textGen) {
    if (Sequence.fromIterable(Classifier_Behavior.call_members_1465982738252129704(classifier)).isNotEmpty()) {
      for (SNode item : Classifier_Behavior.call_members_1465982738252129704(classifier)) {
        TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());
      }
    }
    if ((SLinkOperations.getTarget(SNodeOperations.as(classifier, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "staticInitializer", true) != null)) {
      textGen.appendWithIndent("static {");
      textGen.increaseDepth();
      TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), SLinkOperations.getTarget(SNodeOperations.cast(classifier, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "staticInitializer", true), textGen.getSNode());
      textGen.appendNewLine();
      textGen.decreaseDepth();
      textGen.appendWithIndent("}");
      textGen.appendNewLine();
    }
  }

  public static void body(SNode concept, final SNodeTextGen textGen) {
    BaseClassConceptTextGen.members(concept, textGen);
  }

  public static void innerClassifiers(SNode concept, final SNodeTextGen textGen) {
    for (SNode classifier : SLinkOperations.getTargets(concept, "staticInnerClassifiers", true)) {
      TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), classifier, textGen.getSNode());
      if (!(classifier.equals(ListSequence.fromList(SLinkOperations.getTargets(concept, "staticInnerClassifiers", true)).last()))) {
        textGen.appendNewLine();
      }
    }
  }

  public static void collection(Iterable<SNode> nodes, final SNodeTextGen textGen) {
    if (Sequence.fromIterable(nodes).isNotEmpty()) {
      for (SNode item : nodes) {
        TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());
      }
    }
    textGen.appendNewLine();
  }
}
