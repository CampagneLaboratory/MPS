package jetbrains.mps.baseLanguage.textGen;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.textGen.SNodeTextGen;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.behavior.Classifier_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public abstract class BaseClassConceptTextGen {
  public static void membersWithBrackets(SNode classifier, boolean newLineOnEmptyMembers, final SNodeTextGen textGen) {
    if (Sequence.fromIterable(Classifier_Behavior.call_members_1465982738252129704(classifier)).isNotEmpty() || newLineOnEmptyMembers) {
      textGen.append("{");
      textGen.appendNewLine();
      textGen.increaseDepth();
      BaseClassConceptTextGen.members(classifier, textGen);
      textGen.decreaseDepth();
      textGen.appendWithIndent("}");
    } else {
      textGen.append("{}");
    }
  }
  public static void members(SNode classifier, final SNodeTextGen textGen) {
    // just for first element 
    boolean isWrappedElementBefore = true;
    SNode lastMember = Sequence.fromIterable(Classifier_Behavior.call_members_1465982738252129704(classifier)).last();
    for (SNode member : Classifier_Behavior.call_members_1465982738252129704(classifier)) {
      if (SNodeOperations.isInstanceOf(member, MetaAdapterFactory.getInterfaceConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1178285077437l, "jetbrains.mps.baseLanguage.structure.ClassifierMember"))) {
        boolean needsLineBefore = BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(member, MetaAdapterFactory.getInterfaceConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1178285077437l, "jetbrains.mps.baseLanguage.structure.ClassifierMember")), "virtual_needsEmptyLineBefore_641490355014296733", new Object[]{});
        boolean needsLineAfter = BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(member, MetaAdapterFactory.getInterfaceConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1178285077437l, "jetbrains.mps.baseLanguage.structure.ClassifierMember")), "virtual_needsEmptyLineAfter_641490355014298838", new Object[]{});
        BaseLanguageTextGen.newLine(needsLineBefore && !(isWrappedElementBefore), textGen);
        textGen.appendNode(member);
        BaseLanguageTextGen.newLine(needsLineAfter && !((lastMember == member)), textGen);
        isWrappedElementBefore = needsLineAfter;
      } else {
        textGen.appendNode(member);
        isWrappedElementBefore = false;
      }
    }
    if ((SLinkOperations.getTarget(SNodeOperations.as(classifier, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068390468198l, "jetbrains.mps.baseLanguage.structure.ClassConcept")), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068390468198l, 1171626359898l, "staticInitializer")) != null)) {
      textGen.appendWithIndent("static {");
      textGen.increaseDepth();
      textGen.appendNode(SLinkOperations.getTarget(SNodeOperations.cast(classifier, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068390468198l, "jetbrains.mps.baseLanguage.structure.ClassConcept")), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068390468198l, 1171626359898l, "staticInitializer")));
      textGen.appendNewLine();
      textGen.decreaseDepth();
      textGen.appendWithIndent("}");
      textGen.appendNewLine();
    }
  }
  public static void body(SNode concept, final SNodeTextGen textGen) {
    BaseClassConceptTextGen.members(concept, textGen);
  }
  public static void innerClassifiers(SNode concept, final SNodeTextGen textGen) {
    SNode last = Sequence.fromIterable(Classifier_Behavior.call_nestedClassifiers_5292274854859193142(concept)).last();
    for (SNode classifier : Classifier_Behavior.call_nestedClassifiers_5292274854859193142(concept)) {
      textGen.appendNode(classifier);
      if (!(classifier.equals(last))) {
        textGen.appendNewLine();
      }
    }
  }
  public static void collection(Iterable<SNode> nodes, final SNodeTextGen textGen) {
    {
      Iterable<SNode> collection = nodes;
      for (SNode item : collection) {
        textGen.appendNode(item);
      }
    }
    textGen.appendNewLine();
  }
}
