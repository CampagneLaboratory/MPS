package jetbrains.mps.baseLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.textGen.SNodeTextGen;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.textGen.TextGenManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.core.behavior.IDeprecatable_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.textGen.TextGenBuffer;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples._2;
import jetbrains.mps.smodel.DynamicReference;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.smodel.SModelReference;
import java.util.HashSet;
import jetbrains.mps.util.InternUtil;
import jetbrains.mps.baseLanguage.textGen.ImportsContext.ClassifierRefText;

public abstract class BaseLanguageTextGen {
  private static Logger LOG = Logger.getLogger(BaseLanguageTextGen.class);

  public static void typeParameters(List<SNode> types, final SNodeTextGen textGen) {
    if (ListSequence.fromList(types).isNotEmpty()) {
      textGen.append("<");
      if (ListSequence.fromList(types).isNotEmpty()) {
        for (SNode item : types) {
          TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());
          if (item != ListSequence.fromList(types).last()) {
            textGen.append(", ");
          }
        }
      }
      textGen.append(">");
    }
  }

  public static void arguments(SNode methodCall, final SNodeTextGen textGen) {
    textGen.append("(");
    if (ListSequence.fromList(SLinkOperations.getTargets(methodCall, "actualArgument", true)).isNotEmpty()) {
      for (SNode item : SLinkOperations.getTargets(methodCall, "actualArgument", true)) {
        TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());
        if (item != ListSequence.fromList(SLinkOperations.getTargets(methodCall, "actualArgument", true)).last()) {
          textGen.append(", ");
        }
      }
    }
    textGen.append(")");
  }

  public static void newLine(boolean need, final SNodeTextGen textGen) {
    if (need) {
      textGen.appendNewLine();
    }
  }

  public static void annotations(SNode annotable, final SNodeTextGen textGen) {
    if (ListSequence.fromList(SLinkOperations.getTargets(annotable, "annotation", true)).isNotEmpty()) {
      for (SNode item : SLinkOperations.getTargets(annotable, "annotation", true)) {
        TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());
      }
    }
    if (SNodeOperations.isInstanceOf(annotable, "jetbrains.mps.lang.core.structure.IDeprecatable") && IDeprecatable_Behavior.call_isDeprecated_1224609060727(SNodeOperations.cast(annotable, "jetbrains.mps.lang.core.structure.IDeprecatable"))) {
      boolean containsDeprecated = false;
      for (SNode annotationInstance : SLinkOperations.getTargets(annotable, "annotation", true)) {
        if (SLinkOperations.getTarget(annotationInstance, "annotation", false) == SNodeOperations.getNode("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)", "~Deprecated")) {
          containsDeprecated = true;
          break;
        }
      }
      if (!(containsDeprecated)) {
        SNode deprecated = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.AnnotationInstance", null);
        SLinkOperations.setTarget(deprecated, "annotation", SNodeOperations.getNode("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)", "~Deprecated"), false);
        TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), deprecated, textGen.getSNode());
      }
    }
  }

  public static void visibility(SNode v, final SNodeTextGen textGen) {
    if ((v == null)) {
      textGen.append("/*package*/ ");
    } else {
      TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), v, textGen.getSNode());
    }
  }

  public static void visibilityWithIndent(SNode v, final SNodeTextGen textGen) {
    textGen.indentBuffer();
    BaseLanguageTextGen.visibility(v, textGen);
  }

  public static void internalClassifierName(SNode node, SNode contextNode, final SNodeTextGen textGen) {
    if ((node == null)) {
      textGen.append("???");
      textGen.foundError("classifier is null");
      return;
    }
    BaseLanguageTextGen.appendClassName(BaseLanguageTextGen.getPackageName(node, textGen), NameUtil.longNameFromNamespaceAndShortName(BaseLanguageTextGen.getPackageName(node, textGen), SPropertyOperations.getString(node, "nestedName")), contextNode, textGen);
  }

  public static void internalClassName(String packageName, String className, SNode contextNode, final SNodeTextGen textGen) {
    BaseLanguageTextGen.appendClassName(packageName, NameUtil.longNameFromNamespaceAndShortName(packageName, className), contextNode, textGen);
  }

  public static void extendedInterface(SNode interface1, final SNodeTextGen textGen) {
    Set<String> dependencies = BaseLanguageTextGen.getUserObjects(TextGenManager.EXTENDS, textGen);
    SetSequence.fromSet(dependencies).addElement(NameUtil.nodeFQName(interface1));
  }

  public static void implementedInterface(SNode classConcept, final SNodeTextGen textGen) {
    for (SNode classifierType : SLinkOperations.getTargets(classConcept, "implementedInterface", true)) {
      if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(classifierType, "classifier", false), "jetbrains.mps.baseLanguage.structure.Interface")) {
        BaseLanguageTextGen.extendedInterface(SNodeOperations.cast(SLinkOperations.getTarget(classifierType, "classifier", false), "jetbrains.mps.baseLanguage.structure.Interface"), textGen);
      }
    }
  }

  public static void extendedClasses(SNode classConcept, final SNodeTextGen textGen) {
    Set<String> dependencies = BaseLanguageTextGen.getUserObjects(TextGenManager.EXTENDS, textGen);
    SetSequence.fromSet(dependencies).addElement(NameUtil.nodeFQName(classConcept));
  }

  public static void variableDeclaration(SNode node, final SNodeTextGen textGen) {
    if (SPropertyOperations.getBoolean(node, "isFinal")) {
      textGen.append("final ");
    }
    TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), SLinkOperations.getTarget(node, "type", true), textGen.getSNode());
    textGen.append(" ");
    textGen.append(SPropertyOperations.getString(node, "name"));
    if ((SLinkOperations.getTarget(node, "initializer", true) != null)) {
      textGen.append(" = ");
      TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), SLinkOperations.getTarget(node, "initializer", true), textGen.getSNode());
    }
  }

  public static void fileHeader(SNode cls, final SNodeTextGen textGen) {
    Set<String> names = BaseLanguageTextGen.getUserObjects(TextGenManager.IMPORT, textGen);
    String newImport = BaseLanguageTextGen.getPackageName(cls, textGen) + "." + SPropertyOperations.getString(cls, "name");
    SetSequence.fromSet(names).addElement(newImport);
    if (cls.isRoot()) {
      for (SNode nestedClassifier : SNodeOperations.getDescendants(cls, "jetbrains.mps.baseLanguage.structure.Classifier", false, new String[]{})) {
        SetSequence.fromSet(names).addElement(BaseLanguageTextGen.getPackageName(nestedClassifier, textGen) + "." + SPropertyOperations.getString(nestedClassifier, "name"));
      }
      int wasPart = textGen.getBuffer().selectPart(TextGenBuffer.TOP);
      textGen.append("package " + BaseLanguageTextGen.getPackageName(cls, textGen) + ";");
      textGen.appendNewLine();
      textGen.appendNewLine();
      textGen.append("/*Generated by MPS */");
      textGen.appendNewLine();
      textGen.getBuffer().selectPart(wasPart);
    }
    if (SNodeOperations.isInstanceOf(cls, "jetbrains.mps.baseLanguage.structure.Interface") && ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(cls, "jetbrains.mps.baseLanguage.structure.Interface"), "extendedInterface", true)).isNotEmpty()) {
      for (SNode interface1 : SLinkOperations.getTargets(SNodeOperations.cast(cls, "jetbrains.mps.baseLanguage.structure.Interface"), "extendedInterface", true)) {
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(interface1, "classifier", false), "jetbrains.mps.baseLanguage.structure.Interface")) {
          BaseLanguageTextGen.extendedInterface(SNodeOperations.cast(SLinkOperations.getTarget(interface1, "classifier", false), "jetbrains.mps.baseLanguage.structure.Interface"), textGen);
        } else {
          textGen.foundError("Collection of extended interfaces can't be contains other Classifier Types except Interface");
        }
      }
    } else if (SNodeOperations.isInstanceOf(cls, "jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      BaseLanguageTextGen.implementedInterface(cls, textGen);
      BaseLanguageTextGen.extendedClasses(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(cls, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "superclass", true), "classifier", false), textGen);
    }
  }

  public static void methodCall(SNode methodCall, final SNodeTextGen textGen) {
    BaseLanguageTextGen.methodTypeArguments(methodCall, textGen);
    textGen.append(textGen.getReferentPresentation(SNodeOperations.getReference(methodCall, SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.IMethodCall", "baseMethodDeclaration")), false));
    BaseLanguageTextGen.arguments(methodCall, textGen);
  }

  public static void methodTypeArguments(SNode methodCall, final SNodeTextGen textGen) {
    if (ListSequence.fromList(SLinkOperations.getTargets(methodCall, "typeArgument", true)).isNotEmpty()) {
      textGen.append("<");
      if (ListSequence.fromList(SLinkOperations.getTargets(methodCall, "typeArgument", true)).isNotEmpty()) {
        for (SNode item : SLinkOperations.getTargets(methodCall, "typeArgument", true)) {
          TextGenManager.instance().appendNodeText(textGen.getContext(), textGen.getBuffer(), item, textGen.getSNode());
          if (item != ListSequence.fromList(SLinkOperations.getTargets(methodCall, "typeArgument", true)).last()) {
            textGen.append(",");
          }
        }
      }
      textGen.append(">");
    }
  }

  public static void blClassifierRef(SReference classifierRef, final SNodeTextGen textGen) {
    if (classifierRef == null) {
      textGen.foundError("null classifier ref");
      return;
    }
    _2<String, String> packageAndShortName = BaseLanguageTextGen.getPackageAndShortName(classifierRef, textGen);
    if (packageAndShortName == null) {
      LOG.warning("null package and short name");
      return;
    }
    String longName = NameUtil.longNameFromNamespaceAndShortName(packageAndShortName._0(), packageAndShortName._1());
    BaseLanguageTextGen.appendClassName(packageAndShortName._0(), longName, classifierRef.getSourceNode(), textGen);
  }

  protected static _2<String, String> getPackageAndShortName(SReference classifierRef, final SNodeTextGen textGen) {
    SReference reference = classifierRef;
    if (reference == null) {
      textGen.foundError("null reference");
      return null;
    }
    String shortName = "";
    String packageName = "";
    if (reference instanceof DynamicReference) {
      shortName = reference.getResolveInfo();
      // hack, todo: remove! 
      if (shortName.startsWith("[")) {
        return MultiTuple.<String,String>from(shortName.substring(1, shortName.lastIndexOf("]")).trim(), shortName.substring(shortName.lastIndexOf("]") + 1).trim());
      } else {
        // todo: remove! 
        final SModelReference modelReference = reference.getTargetSModelReference();
        if (modelReference != null) {
          packageName = modelReference.getLongName();
          LOG.warning("generating classifier reference with target model reference " + modelReference + " @ " + classifierRef);
        } else {
          int lastDot = shortName.lastIndexOf('.');
          if (lastDot >= 0) {
            packageName = shortName.substring(0, lastDot);
            shortName = shortName.substring(lastDot + 1).replace('$', '.');
          } else {
            SModelReference sModelReference = classifierRef.getSourceNode().getModel().getSModelReference();
            packageName = (sModelReference != null ?
              sModelReference.getLongName() :
              ""
            );
          }
        }
        return MultiTuple.<String,String>from(packageName, shortName);
      }
    } else {
      SNode targetNode = reference.getTargetNodeSilently();
      if (targetNode == null) {
        textGen.foundError("Target node is null for reference to classifier with role " + SLinkOperations.getRole(classifierRef) + "; resolve info " + SLinkOperations.getResolveInfo(classifierRef) + "; " + classifierRef.getSourceNode().getDebugText());
        return null;
      }
      return MultiTuple.<String,String>from(targetNode.getModel().getSModelReference().getLongName(), (SNodeOperations.isInstanceOf(targetNode, "jetbrains.mps.baseLanguage.structure.Classifier") ?
        SPropertyOperations.getString(SNodeOperations.cast(targetNode, "jetbrains.mps.baseLanguage.structure.Classifier"), "nestedName") :
        targetNode.getResolveInfo()
      ));
    }
  }

  protected static Set<String> getUserObjects(String type, final SNodeTextGen textGen) {
    Set<String> names = (Set<String>) textGen.getBuffer().getUserObject(type);
    if (names == null) {
      names = SetSequence.fromSet(new HashSet<String>());
      textGen.getBuffer().putUserObject(type, names);
    }
    return names;
  }

  protected static void addDependency(String name, final SNodeTextGen textGen) {
    Set<String> dependencies = BaseLanguageTextGen.getUserObjects(TextGenManager.DEPENDENCY, textGen);
    SetSequence.fromSet(dependencies).addElement(name);
  }

  protected static void addDependency(SNode node, final SNodeTextGen textGen) {
    BaseLanguageTextGen.addDependency(InternUtil.intern(NameUtil.nodeFQName(node)), textGen);
  }

  protected static String getPackageName(SNode cls, final SNodeTextGen textGen) {
    return cls.getModel().getSModelReference().getLongName();
  }

  protected static String getClassName(String packageName, String fqName, SNode contextNode, final SNodeTextGen textGen) {
    if (fqName == null) {
      textGen.foundError("class name is NULL");
      return "???";
    }
    ClassifierRefText refText = ImportsContext.getInstance(textGen.getBuffer()).getClassRefText(packageName, fqName, contextNode);

    if (refText.shouldBeImported) {
      int currPartId = textGen.getBuffer().selectPart(TextGenBuffer.TOP);
      textGen.appendNewLine();
      textGen.append("import " + fqName + ";");
      textGen.getBuffer().selectPart(currPartId);
    }

    return refText.refText;
  }

  protected static void appendClassName(String packageName, String fqName, SNode contextNode, final SNodeTextGen textGen) {
    textGen.append(BaseLanguageTextGen.getClassName(packageName, fqName, contextNode, textGen));
  }
}
