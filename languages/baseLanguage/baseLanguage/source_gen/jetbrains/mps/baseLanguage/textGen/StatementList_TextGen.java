package jetbrains.mps.baseLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.textGen.TraceInfoGenerationUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.textGen.TextGenManager;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class StatementList_TextGen extends SNodeTextGen {
  private static Logger LOG = Logger.getLogger(StatementList_TextGen.class);

  public void doGenerateText(SNode node) {
    if (getBuffer().hasPositionsSupport()) {
      TraceInfoGenerationUtil.createScopeInfo(this, node);
    }
    int size = ListSequence.fromList(SLinkOperations.getTargets(node, "statement", true)).count();
    for (int i = 0; i < size; i++) {
      SNode statement = ListSequence.fromList(ListSequence.fromList(SLinkOperations.getTargets(node, "statement", true)).toListSequence()).getElement(i);
      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), statement, this.getSNode());
    }
    if (getBuffer().hasPositionsSupport()) {
      {
        List<SNode> scopeVariables = new ArrayList<SNode>();
        try {
          scopeVariables = BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), SNodeOperations.cast(node, "jetbrains.mps.lang.traceable.structure.ScopeConcept"), "virtual_getScopeVariables_5067982036267369894", new Object[]{});
        } catch (Throwable t) {
          LOG.error("Can't calculate scope variables for a node " + node + ".", t);
        }
        TraceInfoGenerationUtil.fillScopeInfo(this, node, scopeVariables);
      }
    }
  }
}
