package jetbrains.mps.baseLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.textGen.TraceInfoGenerationUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.util.SNodeOperations;
import jetbrains.mps.util.JavaNameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class EnumClass_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    if (getBuffer().hasPositionsSupport()) {
      TraceInfoGenerationUtil.createUnitInfo(this, node);
    }
    BaseLanguageTextGen.fileHeader(node, this);
    BaseLanguageTextGen.annotations(node, this);
    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, "visibility", true), this);
    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment")) != null)) {
      appendNode(AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment")));
    }
    if (!(SNodeOperations.isRoot(node))) {
      this.append("static ");
    }
    this.appendWithIndent("enum ");
    this.append(JavaNameUtil.shortName(SPropertyOperations.getString(node, "name")));
    if (ListSequence.fromList(SLinkOperations.getTargets(node, "implementedInterface", true)).isNotEmpty()) {
      this.append(" implements ");
      {
        Iterable<SNode> collection = SLinkOperations.getTargets(node, "implementedInterface", true);
        final SNode lastItem = Sequence.fromIterable(collection).last();
        for (SNode item : collection) {
          appendNode(item);
          if (item != lastItem) {
            append(", ");
          }
        }
      }
    }
    this.append(" {");
    this.increaseDepth();
    {
      Iterable<SNode> collection = SLinkOperations.getTargets(node, "enumConstant", true);
      final SNode lastItem = Sequence.fromIterable(collection).last();
      for (SNode item : collection) {
        appendNode(item);
        if (item != lastItem) {
          append(",");
        }
      }
    }
    this.append(";");
    this.appendNewLine();
    this.appendNewLine();
    BaseClassConceptTextGen.members(node, this);
    this.decreaseDepth();
    this.appendWithIndent("}");
    this.appendNewLine();
    if (getBuffer().hasPositionsSupport()) {
      {
        String unitName = null;
        try {
          unitName = BehaviorReflection.invokeVirtual(String.class, jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.cast(node, "jetbrains.mps.lang.traceable.structure.UnitConcept"), "virtual_getUnitName_5067982036267369911", new Object[]{});
        } catch (Throwable t) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("Can't calculate unit name for a node " + node + ".", t);
          }
        }
        TraceInfoGenerationUtil.fillUnitInfo(this, node, unitName);
      }
    }
  }

  public String getExtension(SNode node) {
    return "java";
  }

  protected static Logger LOG = LogManager.getLogger(EnumClass_TextGen.class);
}
