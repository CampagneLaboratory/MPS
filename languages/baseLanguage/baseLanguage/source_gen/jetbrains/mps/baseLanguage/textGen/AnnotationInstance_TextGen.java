package jetbrains.mps.baseLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class AnnotationInstance_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    boolean oneLine = SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.ParameterDeclaration") || SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration");
    if (oneLine) {
      this.append("@");
    } else {
      this.appendWithIndent("@");
    }
    BaseLanguageTextGen.blClassifierRef(SNodeOperations.getReference(node, SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.AnnotationInstance", "annotation")), this);
    if (ListSequence.fromList(SLinkOperations.getTargets(node, "value", true)).isNotEmpty()) {
      this.append("(");
      {
        Iterable<SNode> collection = SLinkOperations.getTargets(node, "value", true);
        final SNode lastItem = Sequence.fromIterable(collection).last();
        for (SNode item : collection) {
          appendNode(item);
          if (item != lastItem) {
            append(", ");
          }
        }
      }
      this.append(")");
    }
    if (oneLine) {
      this.append(" ");
    } else {
      this.appendNewLine();
    }
  }
}
