package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.search.ISearchScope;
import jetbrains.mps.smodel.search.SimpleSearchScope;
import jetbrains.mps.scope.CompositeScope;

public class HierarchyScopeProvider implements ScopeProvider {
  private final SNode providedConcept;
  private final List<SNode> providedNodes;
  private final SNode[] nodesInScope;

  public HierarchyScopeProvider(SNode providedConcept, List<SNode> providedNodes, SNode... nodesInScope) {
    this.providedConcept = providedConcept;
    this.providedNodes = providedNodes;
    this.nodesInScope = nodesInScope;
  }

  public Scope getScope(SNode thisNode, SNode kind, SNode child) {
    if (SConceptOperations.isSubConceptOf(kind, NameUtil.nodeFQName(this.providedConcept))) {
      // todo: =( 
      while (SNodeOperations.getParent(child) != thisNode) {
        child = SNodeOperations.getParent(child);
      }

      boolean isOk = false;
      for (SNode nodeInScope : nodesInScope) {
        if (nodeInScope == child) {
          isOk = true;
          break;
        }
      }

      if (isOk) {
        Scope currentScope = new ISearchScope.Adapter(new SimpleSearchScope(this.providedNodes));
        Scope nextScope = Scope.getScope(Scope.parent(thisNode), thisNode, kind);
        return (nextScope == null ?
          currentScope :
          new CompositeScope(currentScope, nextScope)
        );
      } else {
        return null;
      }
    }

    return null;
  }

  public Scope getScope(SNode thisNode, SNode kind, String role, int index) {
    return null;
  }
}
