package jetbrains.mps.baseLanguage.search;

/*Generated by MPS */

import jetbrains.mps.smodel.search.AbstractSearchScope;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.apache.log4j.Priority;
import jetbrains.mps.smodel.search.IReferenceInfoResolver;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

@Deprecated
public class ClassifierVisibleMembersScope extends AbstractSearchScope {
  private SNode myClassifierType;
  private final SNode myContextNode;
  private final ClassifierAndSuperClassifiersScope myClassifierScope;

  @Deprecated
  public ClassifierVisibleMembersScope(@Nullable SNode classifierType, @Nullable SNode contextNode, int constraint) {
    // if constraint == CLASSIFIER_INSTANCE_METHOD use classifierType.classifier.getVisibleMembers(contextNode, concept/InstanceMethodDeclaration) instead 
    this.myClassifierType = classifierType;
    this.myContextNode = contextNode;
    this.myClassifierScope = new ClassifierAndSuperClassifiersScope(SLinkOperations.getTarget(classifierType, "classifier", false), constraint);
  }

  @NotNull
  @Override
  public List<SNode> getNodes(final Condition<SNode> condition) {
    return myClassifierScope.getNodes(new Condition<SNode>() {
      @Override
      public boolean met(SNode node) {
        SNode member = SNodeOperations.as(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember");
        return (member != null) && ((myContextNode == null) || isVisible(member)) && condition.met(node);
      }
    });
  }

  @Override
  public boolean isInScope(SNode node) {
    if (myContextNode == null || !(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember"))) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("isInScope(" + node + ") - context is null or not ClassifierMember");
      }
      return super.isInScope(node);
    }
    return myClassifierScope.getClassifierNodes().contains(SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.Classifier", false, false)) && isVisible(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember"));
  }

  @Override
  public IReferenceInfoResolver getReferenceInfoResolver(SNode referenceNode, SNode targetConcept) {
    if (this.myClassifierType != null) {
      if (SModelUtil.isAssignableConcept(targetConcept, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"))) {
        SNode classifier = SLinkOperations.getTarget(this.myClassifierType, "classifier", false);
        if (SNodeOperations.isInstanceOf(classifier, "jetbrains.mps.baseLanguage.structure.ClassConcept") && SNodeOperations.isInstanceOf(referenceNode, "jetbrains.mps.baseLanguage.structure.IMethodCall")) {
          return new StaticMethodReferenceInfoResolver(this.myClassifierScope, SNodeOperations.cast(classifier, "jetbrains.mps.baseLanguage.structure.ClassConcept"), SLinkOperations.getTargets((SNodeOperations.cast(referenceNode, "jetbrains.mps.baseLanguage.structure.IMethodCall")), "actualArgument", true));
        }
      } else
      if (SModelUtil.isAssignableConcept(targetConcept, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"))) {
        if (SNodeOperations.isInstanceOf(referenceNode, "jetbrains.mps.baseLanguage.structure.IMethodCall")) {
          return new InstanceMethodReferenceInfoResolver(this.myClassifierScope, this.myClassifierType, SLinkOperations.getTargets((SNodeOperations.cast(referenceNode, "jetbrains.mps.baseLanguage.structure.IMethodCall")), "actualArgument", true));
        }
      }
    }
    return this.myClassifierScope.getReferenceInfoResolver(referenceNode, targetConcept);
  }

  protected boolean isVisible(SNode member) {
    return VisibilityUtil.isVisible(myContextNode, member);
  }

  protected static Logger LOG = LogManager.getLogger(ClassifierVisibleMembersScope.class);
}
