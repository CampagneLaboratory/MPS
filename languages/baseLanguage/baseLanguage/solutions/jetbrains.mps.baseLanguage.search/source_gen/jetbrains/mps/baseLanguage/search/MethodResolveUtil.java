package jetbrains.mps.baseLanguage.search;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import java.util.Map;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.constraints.ModelConstraints;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.annotations.Nullable;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.util.Pair;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.annotations.NotNull;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.HashMap;
import jetbrains.mps.typesystem.inference.TypeContextManager;
import jetbrains.mps.util.Computable;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.typesystem.inference.util.StructuralNodeMap;
import java.util.Set;
import jetbrains.mps.typesystem.inference.SubtypingManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.util.HashSet;
import jetbrains.mps.newTypesystem.SubtypingUtil;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.IMapping;
import java.util.Iterator;

public class MethodResolveUtil {
  public MethodResolveUtil() {
  }

  public static Tuples._2<SNode, Boolean> resolveMethod(SNode methodCall, String name) {
    if (BehaviorReflection.invokeVirtual(Boolean.TYPE, methodCall, "virtual_useScopesForMethodDeclarationFixer_66132694723287898", new Object[]{})) {
      return resolveMethodUsingScopes(methodCall, name);
    }

    Iterable<SNode> candidates = getCandidates(methodCall, name);
    if (candidates == null || Sequence.fromIterable(candidates).isEmpty()) {
      return MultiTuple.<SNode,Boolean>from((SNode) null, false);
    }
    Map<SNode, SNode> typeByTypeVar = getTypeByTypeVar(methodCall);

    return resolveMethodByCandidatesAndTypes(methodCall, candidates, typeByTypeVar);
  }
  private static Tuples._2<SNode, Boolean> resolveMethodUsingScopes(SNode methodCall, final String name) {
    if (SNodeOperations.getReference(methodCall, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1204053956946l, 1068499141037l, "baseMethodDeclaration")) == null) {
      return MultiTuple.<SNode,Boolean>from((SNode) null, false);
    }

    Scope scope = ModelConstraints.getScope(SNodeOperations.getReference(methodCall, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1204053956946l, 1068499141037l, "baseMethodDeclaration")));
    SNode resolvedMethod = SNodeOperations.cast(scope.resolve(methodCall, name), MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123132l, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
    if ((resolvedMethod != null)) {
      return MultiTuple.<SNode,Boolean>from(resolvedMethod, true);
    } else {
      return resolveMethodByCandidatesAndTypes(methodCall, Sequence.fromIterable(((Iterable<SNode>) scope.getAvailableElements(name))).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return eq_zegw12_a0a0a0a0a1a0a0e0d(SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name")), name);
        }
      }), null);
    }
  }
  private static Tuples._2<SNode, Boolean> resolveMethodByCandidatesAndTypes(SNode methodCall, Iterable<SNode> candidates, @Nullable Map<SNode, SNode> typeByTypeVar) {
    List<SNode> actualArgs = SLinkOperations.getChildren(methodCall, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1204053956946l, 1068499141038l, "actualArgument"));
    SNode baseMethodDeclaration = SLinkOperations.getTarget(methodCall, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1204053956946l, 1068499141037l, "baseMethodDeclaration"));

    Pair<List<SNode>, Boolean> parmCountPair = MethodResolveUtil.selectByVisibilityReportNoGoodMethodNode(Sequence.fromIterable(candidates).toListSequence(), methodCall);
    List<SNode> methodDeclarationsGoodParams = parmCountPair.o1;

    if (methodDeclarationsGoodParams.size() == 1) {
      return MultiTuple.<SNode,Boolean>from(ListSequence.fromList(methodDeclarationsGoodParams).first(), parmCountPair.o2);
    } else {
      parmCountPair = MethodResolveUtil.selectByParmCountReportNoGoodMethodNode(methodDeclarationsGoodParams, actualArgs);
      methodDeclarationsGoodParams = parmCountPair.o1;
      if (methodDeclarationsGoodParams.size() == 1) {
        return MultiTuple.<SNode,Boolean>from(ListSequence.fromList(methodDeclarationsGoodParams).first(), parmCountPair.o2);
      } else {
        if (typeByTypeVar == null) {
          return MultiTuple.<SNode,Boolean>from(ListSequence.fromList(methodDeclarationsGoodParams).first(), false);
        }

        Pair<SNode, Boolean> parmTypesPair = MethodResolveUtil.chooseByParameterTypeReportNoGoodMethodNode(baseMethodDeclaration, methodDeclarationsGoodParams, actualArgs, typeByTypeVar);
        return MultiTuple.<SNode,Boolean>from(parmTypesPair.o1, parmTypesPair.o2);
      }
    }
  }
  private static Map<SNode, SNode> getTypeByTypeVar(SNode methodCall) {
    return BehaviorReflection.invokeVirtual((Class<Map<SNode, SNode>>) ((Class) Object.class), methodCall, "virtual_getTypesByTypeVars_851115533308208851", new Object[]{});
  }
  public static Iterable<SNode> getCandidates(@NotNull SNode methodCall, String methodName) {
    Iterable<SNode> availableMethodDeclarations = BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), methodCall, "virtual_getAvailableMethodDeclarations_5776618742611315379", new Object[]{methodName});
    assert availableMethodDeclarations != null : "getAvailableMethodDeclarations() return null for concept: " + BehaviorReflection.invokeVirtual(String.class, SNodeOperations.asNode(SNodeOperations.getConceptDeclaration(methodCall)), "virtual_getFqName_1213877404258", new Object[]{});
    return availableMethodDeclarations;
  }


  public static List<SNode> selectByParmCount(List<SNode> methods, List<SNode> actualArgs) {
    return selectByParmCountReportNoGoodMethodNode(methods, actualArgs).o1;
  }
  public static Pair<List<SNode>, Boolean> selectByParmCountReportNoGoodMethodNode(List<SNode> methods, List<SNode> actualArgs) {
    int minParmCountDiff = Integer.MAX_VALUE;
    int[] parmCountDiffs = new int[ListSequence.fromList(methods).count()];
    boolean[] varargs = new boolean[ListSequence.fromList(methods).count()];
    int index = 0;
    for (SNode method : methods) {
      int parmCountDiff;
      int count = ListSequence.fromList(SLinkOperations.getChildren(method, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123132l, 1068580123134l, "parameter"))).count();
      int actualArgsCount = ListSequence.fromList(actualArgs).count();
      boolean vararg = false;
      if (count > 0 && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getChildren(method, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123132l, 1068580123134l, "parameter"))).last(), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 4972933694980447171l, 5680397130376446158l, "type")), MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1219920932475l, "jetbrains.mps.baseLanguage.structure.VariableArityType"))) {
        vararg = true;
        parmCountDiff = Math.max(0, (count - 1) - actualArgsCount);
      } else {
        parmCountDiff = Math.abs(count - actualArgsCount);
      }
      varargs[index] = vararg;
      parmCountDiffs[index++] = parmCountDiff;
      minParmCountDiff = Math.min(minParmCountDiff, parmCountDiff);
    }
    boolean good = true;
    List<SNode> result = new ArrayList<SNode>();
    for (int i = 0; i < parmCountDiffs.length; i++) {
      if (minParmCountDiff == parmCountDiffs[i]) {
        SNode method = ListSequence.fromList(methods).getElement(i);
        if (varargs[i]) {
          ListSequence.fromList(result).addElement(method);
        } else {
          ListSequence.fromList(result).insertElement(0, method);
        }
        if (minParmCountDiff > 0) {
          good = false;
          break;
        }
      }
    }
    return new Pair<List<SNode>, Boolean>(result, good);
  }
  public static Pair<List<SNode>, Boolean> selectByVisibilityReportNoGoodMethodNode(List<SNode> methods, SNode methodCall) {
    List<SNode> goodMethods = new ArrayList<SNode>();
    List<SNode> badMethods = new ArrayList<SNode>();
    for (SNode method : methods) {
      if (SNodeOperations.isInstanceOf(method, MetaAdapterFactory.getInterfaceConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1178549954367l, "jetbrains.mps.baseLanguage.structure.IVisible"))) {
        SNode visibility = SLinkOperations.getTarget(SNodeOperations.cast(method, MetaAdapterFactory.getInterfaceConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1178549954367l, "jetbrains.mps.baseLanguage.structure.IVisible")), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1178549954367l, 1178549979242l, "visibility"));
        if (SNodeOperations.isInstanceOf(visibility, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1146644602865l, "jetbrains.mps.baseLanguage.structure.PublicVisibility"))) {
          goodMethods.add(method);
        } else if (SNodeOperations.isInstanceOf(visibility, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1146644623116l, "jetbrains.mps.baseLanguage.structure.PrivateVisibility"))) {
          if (SNodeOperations.getContainingRoot(methodCall) == SNodeOperations.getContainingRoot(method)) {
            goodMethods.add(method);
          } else {
            badMethods.add(method);
          }
        } else if (SNodeOperations.isInstanceOf(visibility, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1146644641414l, "jetbrains.mps.baseLanguage.structure.ProtectedVisibility"))) {
          if (hasEqualsFQName(SNodeOperations.getModel(methodCall), SNodeOperations.getModel(method))) {
            goodMethods.add(method);
          } else {
            SNode desc = SNodeOperations.getNodeAncestor(methodCall, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107461130800l, "jetbrains.mps.baseLanguage.structure.Classifier"), false, false);
            SNode anc = SNodeOperations.getNodeAncestor(method, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107461130800l, "jetbrains.mps.baseLanguage.structure.Classifier"), false, false);
            if (BehaviorReflection.invokeVirtual(Boolean.TYPE, desc, "virtual_isDescendant_7165541881557222913", new Object[]{anc})) {
              goodMethods.add(method);
            } else {
              badMethods.add(method);
            }
          }
        } else {
          if (hasEqualsFQName(SNodeOperations.getModel(methodCall), SNodeOperations.getModel(method))) {
            goodMethods.add(method);
          } else {
            badMethods.add(method);
          }
        }
      } else {
        goodMethods.add(method);
      }
    }
    if (goodMethods.isEmpty()) {
      return new Pair<List<SNode>, Boolean>(badMethods, false);
    } else {
      return new Pair<List<SNode>, Boolean>(goodMethods, true);
    }
  }
  private static boolean hasEqualsFQName(SModel model1, SModel model2) {
    return jetbrains.mps.util.SNodeOperations.getModelLongName(model1).equals(jetbrains.mps.util.SNodeOperations.getModelLongName(model2));
  }
  public static SNode chooseByParameterType(List<SNode> candidates, List<SNode> actualArgs, Map<SNode, SNode> typeByTypeVar) {
    return MethodResolveUtil.chooseByParameterTypeReportNoGoodMethodNode(null, candidates, actualArgs, typeByTypeVar).o1;
  }
  public static Pair<SNode, Boolean> chooseByParameterTypeReportNoGoodMethodNode(SNode current, List<SNode> candidates, List<SNode> actualArgs, Map<SNode, SNode> typeByTypeVar) {
    Map<SNode, SNode> nodesAndTypes = new HashMap<SNode, SNode>();
    int i = 1;
    Boolean good = true;
    for (boolean mostSpecific = false; i <= 2; mostSpecific = !(mostSpecific), i++) {
      int indexOfArg = 0;
      for (SNode actualArg : actualArgs) {
        final SNode term = actualArg;
        SNode typeOfArg;
        if (nodesAndTypes.containsKey(term)) {
          typeOfArg = nodesAndTypes.get(term);
        } else {
          typeOfArg = TypeContextManager.getInstance().runResolveAction(new Computable<SNode>() {
            @Override
            public SNode compute() {
              return TypeChecker.getInstance().getTypeOf(term);
            }
          });
          nodesAndTypes.put(term, typeOfArg);
        }
        List<SNode> candidates1 = selectByParameterTypeNode(typeOfArg, indexOfArg, candidates, typeByTypeVar, mostSpecific, false);
        if (ListSequence.fromList(candidates1).isEmpty()) {
          candidates1 = selectByParameterTypeNode(typeOfArg, indexOfArg, candidates, typeByTypeVar, mostSpecific, true);
        }
        if (candidates1.isEmpty()) {
          good = false;
          break;
        }
        if (candidates1.size() == 1) {
          return new Pair<SNode, Boolean>(candidates1.get(0), good);
        }
        if (mostSpecific && current != null && ListSequence.fromList(candidates).contains(current)) {
          return new Pair<SNode, Boolean>(current, good);
        }
        candidates = candidates1;
        indexOfArg++;
      }
    }
    return new Pair<SNode, Boolean>(ListSequence.fromList(candidates).first(), good);
  }
  private static List<SNode> selectByParameterTypeNode(@Nullable SNode typeOfArg, int indexOfArg, List<SNode> candidates, final Map<SNode, SNode> typeByTypeVar, boolean mostSpecific, boolean isWeak) {
    List<SNode> result = new ArrayList<SNode>();
    StructuralNodeMap<Set<SNode>> typesOfParamToMethods = new StructuralNodeMap<Set<SNode>>();
    SubtypingManager subtypingManager = TypeChecker.getInstance().getSubtypingManager();
    for (SNode candidate : candidates) {
      boolean varArg = false;
      List<SNode> params = SLinkOperations.getChildren(candidate, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123132l, 1068580123134l, "parameter"));
      SNode type = SLinkOperations.getTarget(ListSequence.fromList(params).last(), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 4972933694980447171l, 5680397130376446158l, "type"));
      if (SNodeOperations.isInstanceOf(type, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1219920932475l, "jetbrains.mps.baseLanguage.structure.VariableArityType"))) {
        if (ListSequence.fromList(params).count() - 1 <= indexOfArg) {
          varArg = true;
        }
      } else {
        if (ListSequence.fromList(params).count() <= indexOfArg) {
          continue;
        }
      }
      List<SNode> methodTypeVariableDecls = SLinkOperations.getChildren(candidate, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1109279851642l, 1109279881614l, "typeVariableDeclaration"));
      for (SNode tvd : ListSequence.fromList(methodTypeVariableDecls)) {
        typeByTypeVar.put(tvd, SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1171903607971l, "jetbrains.mps.baseLanguage.structure.WildCardType"))));
      }
      SNode typeOfParam = (varArg ? SLinkOperations.getTarget(SNodeOperations.cast(type, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1219920932475l, "jetbrains.mps.baseLanguage.structure.VariableArityType")), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1219920932475l, 1219921048460l, "componentType")) : SLinkOperations.getTarget(ListSequence.fromList(params).getElement(indexOfArg), MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 4972933694980447171l, 5680397130376446158l, "type")));
      if ((typeOfParam == null)) {
        continue;
      }
      typeOfParam = GenericTypesUtil.getTypeWithResolvedTypeVars(typeOfParam, typeByTypeVar);
      ListSequence.fromList(methodTypeVariableDecls).visitAll(new IVisitor<SNode>() {
        public void visit(SNode tvd) {
          typeByTypeVar.remove(tvd);
        }
      });
      if (subtypingManager.isSubtype(typeOfArg, typeOfParam, isWeak)) {
        Set<SNode> methods = typesOfParamToMethods.get(typeOfParam);
        if (methods == null) {
          methods = new HashSet<SNode>();
          typesOfParamToMethods.put(typeOfParam, methods);
        }
        methods.add(candidate);
        result.add(candidate);
      }
    }
    if (mostSpecific) {
      Set<SNode> goodParamTypes = typesOfParamToMethods.keySet();
      Set<SNode> mostSpecificTypes = SubtypingUtil.mostSpecificTypes(goodParamTypes);
      if (!(mostSpecificTypes.isEmpty())) {
        result = new ArrayList<SNode>();
        for (SNode mostSpecificType : mostSpecificTypes) {
          result.addAll(typesOfParamToMethods.get(mostSpecificType));
        }
      }
    }
    return result;
  }
  /**
   * Use this method in baseLanguage.scopes module
   */
  @Deprecated
  public static Map<SNode, SNode> getTypesByTypeVars(@NotNull SNode classifier, List<SNode> typeParameters) {
    Map<SNode, SNode> typeByTypeVar = MapSequence.fromMap(new HashMap<SNode, SNode>());
    for (IMapping<SNode, SNode> elem : MapSequence.fromMap(ClassifierAndSuperClassifiersCache.getInstance(classifier).getTypeByTypeVariableMap())) {
      typeByTypeVar.put(elem.key(), elem.value());
    }
    Iterator<SNode> typeParms = ListSequence.fromList(typeParameters).iterator();
    for (SNode typeVar : ListSequence.fromList(SLinkOperations.getChildren(classifier, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1109279851642l, 1109279881614l, "typeVariableDeclaration")))) {
      if (!(typeParms.hasNext())) {
        break;
      }
      SNode typeParm = SNodeOperations.as(typeParms.next(), MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068431790189l, "jetbrains.mps.baseLanguage.structure.Type"));
      if ((typeParm == null) || SLinkOperations.getTarget(SNodeOperations.as(typeParm, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1109283449304l, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")), MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1109283449304l, 1109283546497l, "typeVariableDeclaration")) == typeVar) {
        continue;
      }
      MapSequence.fromMap(typeByTypeVar).put(typeVar, SNodeOperations.cast(typeParm, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068431790189l, "jetbrains.mps.baseLanguage.structure.Type")));
    }
    return typeByTypeVar;
  }
  private static boolean eq_zegw12_a0a0a0a0a1a0a0e0d(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
