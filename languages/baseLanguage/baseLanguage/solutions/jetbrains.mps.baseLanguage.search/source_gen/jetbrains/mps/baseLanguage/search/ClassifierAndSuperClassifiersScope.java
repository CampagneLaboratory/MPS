package jetbrains.mps.baseLanguage.search;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.util.EqualUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.smodel.behaviour.BHReflection;
import jetbrains.mps.core.aspects.behaviour.SMethodTrimmedId;
import jetbrains.mps.smodel.search.IReferenceInfoResolver;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.MetaAdapterByDeclaration;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.model.SModelReference;

@Deprecated
public class ClassifierAndSuperClassifiersScope extends AbstractClassifiersScope {
  private SNode myTopClassifier;
  private int myOriginalConstraint;
  @Deprecated
  public ClassifierAndSuperClassifiersScope(@Nullable SNode topClassifier, int constraint) {
    super(constraint ^ (constraint & (INSTANCE_METHOD | STATIC_METHOD | CONSTRUCTOR | INSTANCE_FIELD | STATIC_FIELD)));
    this.myTopClassifier = topClassifier;
    this.myOriginalConstraint = constraint;
  }
  @Deprecated
  public ClassifierAndSuperClassifiersScope(@Nullable SNode topClassifier) {
    this(topClassifier, ANYTHING);
  }
  @NotNull
  @Override
  public List<SNode> getClassifiers() {
    if (this.myTopClassifier == null) {
      return new ArrayList<SNode>();
    }
    return new ArrayList<SNode>(ClassifierAndSuperClassifiersCache.getInstance(this.myTopClassifier).getClassifiers());
  }
  @NotNull
  public List<SNode> getMethods() {
    if (this.myTopClassifier == null) {
      return new ArrayList<SNode>();
    }
    return new ArrayList<SNode>(ClassifierAndSuperClassifiersCache.getInstance(this.myTopClassifier).getMethods());
  }
  @NotNull
  public List<SNode> getOverriddenMethods(SNode method) {
    if (this.myTopClassifier == null) {
      return new ArrayList<SNode>();
    }
    return new ArrayList<SNode>(ClassifierAndSuperClassifiersCache.getInstance(this.myTopClassifier).getOverriddenMethods(method));
  }
  public List<SNode> getMethodsByName(String methodName) {
    if (this.myTopClassifier == null) {
      return new ArrayList<SNode>();
    }
    return new ArrayList<SNode>(ClassifierAndSuperClassifiersCache.getInstance(this.myTopClassifier).getMethodsByName(methodName));
  }
  @NotNull
  public List<SNode> getFields() {
    if (this.myTopClassifier == null) {
      return new ArrayList<SNode>();
    }
    return new ArrayList<SNode>(ClassifierAndSuperClassifiersCache.getInstance(this.myTopClassifier).getFields());
  }
  public SNode getFieldByName(String name) {
    if (this.myTopClassifier == null) {
      return null;
    }
    return ClassifierAndSuperClassifiersCache.getInstance(this.myTopClassifier).getFieldByName(name);
  }
  public SNode getStaticFieldByName(String name) {
    if (this.myTopClassifier == null) {
      return null;
    }
    return ClassifierAndSuperClassifiersCache.getInstance(this.myTopClassifier).getStaticFieldByName(name);
  }
  public SNode getEnumConstantByName(String name) {
    if (myTopClassifier == null) {
      return null;
    }
    if (SNodeOperations.isInstanceOf(myTopClassifier, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367070a5L, "jetbrains.mps.baseLanguage.structure.EnumClass"))) {
      SNode enumClass = SNodeOperations.cast(myTopClassifier, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367070a5L, "jetbrains.mps.baseLanguage.structure.EnumClass"));
      for (SNode ec : SLinkOperations.getChildren(enumClass, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367070a5L, 0xfc367503acL, "enumConstant"))) {
        if (EqualUtil.equals(SPropertyOperations.getString(ec, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), name)) {
          return ec;
        }
      }
    }
    return null;
  }
  @NotNull
  @Override
  public List<SNode> getNodes(Condition<SNode> condition) {
    List<SNode> list = super.getNodes(condition);
    if (SNodeOperations.isInstanceOf(myTopClassifier, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept")) && (this.myOriginalConstraint & IClassifiersSearchScope.CONSTRUCTOR) == IClassifiersSearchScope.CONSTRUCTOR) {
      for (SNode constructor : ((Iterable<SNode>) BHReflection.invoke((SNodeOperations.cast(myTopClassifier, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"))), SMethodTrimmedId.create("constructors", MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "4_LVZ3pCvsd")))) {
        if (condition.met(constructor)) {
          list.add(constructor);
        }
      }
    }
    if ((this.myOriginalConstraint & (IClassifiersSearchScope.INSTANCE_METHOD | IClassifiersSearchScope.STATIC_METHOD)) != 0) {
      List<SNode> methods = this.getMethods();
      for (SNode method : methods) {
        if (SNodeOperations.isInstanceOf(method, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"))) {
          if ((this.myOriginalConstraint & IClassifiersSearchScope.INSTANCE_METHOD) == IClassifiersSearchScope.INSTANCE_METHOD) {
            if (condition.met(method)) {
              list.add(method);
            }
          }
        } else
        if (SNodeOperations.isInstanceOf(method, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbebabf0aL, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"))) {
          if ((this.myOriginalConstraint & IClassifiersSearchScope.STATIC_METHOD) == IClassifiersSearchScope.STATIC_METHOD) {
            if (condition.met(method)) {
              list.add(method);
            }
          }
        }
      }
    }
    if ((this.myOriginalConstraint & (IClassifiersSearchScope.INSTANCE_FIELD | IClassifiersSearchScope.STATIC_FIELD)) != 0) {
      List<SNode> fields = this.getFields();
      for (SNode field : fields) {
        if (SNodeOperations.isInstanceOf(field, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca68L, "jetbrains.mps.baseLanguage.structure.FieldDeclaration"))) {
          if ((this.myOriginalConstraint & IClassifiersSearchScope.INSTANCE_FIELD) == IClassifiersSearchScope.INSTANCE_FIELD) {
            if (condition.met(field)) {
              list.add(field);
            }
          }
        } else
        if (SNodeOperations.isInstanceOf(field, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93c84351fL, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"))) {
          if ((this.myOriginalConstraint & IClassifiersSearchScope.STATIC_FIELD) == IClassifiersSearchScope.STATIC_FIELD) {
            if (condition.met(field)) {
              list.add(field);
            }
          }
        }
      }
    }
    return list;
  }
  @Override
  public IReferenceInfoResolver getReferenceInfoResolver(SNode referenceNode, SNode targetConceptNode) {
    SAbstractConcept targetConcept = MetaAdapterByDeclaration.getConcept(targetConceptNode);
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(targetConcept), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca68L, "jetbrains.mps.baseLanguage.structure.FieldDeclaration"))) {
      return new IReferenceInfoResolver() {
        @Override
        public SNode resolve(String referenceInfo, SModelReference targetModelReference) {
          if (referenceInfo == null) {
            return null;
          }
          return ClassifierAndSuperClassifiersScope.this.getFieldByName(referenceInfo);
        }
      };
    }
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(targetConcept), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93c84351fL, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"))) {
      return new IReferenceInfoResolver() {
        @Override
        public SNode resolve(String referenceInfo, SModelReference targetModelReference) {
          if (referenceInfo == null) {
            return null;
          }
          return ClassifierAndSuperClassifiersScope.this.getStaticFieldByName(referenceInfo);
        }
      };
    }
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(targetConcept), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367388b3L, "jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration"))) {
      return new IReferenceInfoResolver() {
        @Override
        public SNode resolve(String referenceInfo, SModelReference targetModelReference) {
          if (referenceInfo == null) {
            return null;
          }
          return ClassifierAndSuperClassifiersScope.this.getEnumConstantByName(referenceInfo);
        }
      };
    }
    return super.getReferenceInfoResolver(referenceNode, targetConceptNode);
  }
}
