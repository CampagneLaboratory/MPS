/*
 * Copyright 2003-2012 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import java.util.LinkedHashSet;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import org.jetbrains.annotations.Nullable;
import org.apache.commons.lang.StringUtils;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.annotations.NotNull;

public class SimpleScope extends Scope {
  private LinkedHashSet<SNode> nodes;

  public SimpleScope(List<SNode> nodes) {
    this.nodes = new LinkedHashSet();
    for (SNode node : nodes) {
      if ((node != null)) {
        this.nodes.add(node);
      }
    }
  }

  public SimpleScope(SNode node) {
    this.nodes = new LinkedHashSet(1);
    if ((node != null)) {
      nodes.add(node);
    }
  }

  public List<SNode> getAvailableElements(@Nullable String prefix) {
    boolean isEverything = StringUtils.isEmpty(prefix);
    List<SNode> result = new ArrayList<SNode>();

    for (SNode node : nodes) {
      if ((node != null)) {
        if (isEverything) {
          result.add(node);
        } else {
          String presentation = getReferenceText(null, node);
          if (presentation != null && presentation.startsWith(prefix)) {
            ListSequence.fromList(result).addElement(node);
          }
        }
      }
    }

    return result;
  }

  @Nullable
  public SNode resolve(SNode contextNode, @NotNull String refText) {
    return null;
  }

  @Nullable
  public String getReferenceText(SNode contextNode, @NotNull SNode target) {
    String resolveInfo = target.getResolveInfo();
    if (StringUtils.isNotEmpty(resolveInfo)) {
      return resolveInfo;
    }
    return target.getPresentation();
  }
}
