package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;

public class CachedClassifierMembersScope {
  private static Map<Tuples._2<SNode, SNode>, Scope> CACHE = MapSequence.fromMap(new HashMap<Tuples._2<SNode, SNode>, Scope>());

  private CachedClassifierMembersScope() {
  }

  public static Scope from(SNode classifier, SNode kind, boolean doFlat, _FunctionTypes._return_P0_E0<? extends Scope> scopeCreator) {
    Tuples._2<SNode, SNode> key = MultiTuple.<SNode,SNode>from(classifier, kind);
    if (!(MapSequence.fromMap(CACHE).containsKey(key))) {
      Scope scope = scopeCreator.invoke();
      if (doFlat) {
        scope = new SimpleScope(scope.getAvailableElements(null));
      }
      MapSequence.fromMap(CACHE).put(key, scope);
    }
    return MapSequence.fromMap(CACHE).get(key);
  }
}
