package jetbrains.mps.baseLanguage.search;

/*Generated by MPS */

import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

@Deprecated
public class ClassifierVisibleStaticMembersScope extends ClassifierVisibleMembersScope {
  @Deprecated
  public ClassifierVisibleStaticMembersScope(@Nullable SNode classifier, @Nullable SNode contextNode, int constraint) {
    // if constraint == STATIC_FIELD use classifier.getVisibleMembers(contextNode, concept/StaticFieldDeclaration) 
    // if constraint == STATIC_METHOD use classifier.getVisibleMembers(contextNode, concept/StaticMethodDeclaration) 
    super(toClassifierType(classifier), contextNode, constraint);
    if ((constraint & IClassifiersSearchScope.STATIC_MEMBER) != constraint) {
      throw new IllegalArgumentException("only static members are applicable");
    }
  }

  private static SNode toClassifierType(SNode classifier) {
    if (classifier == null) {
      return null;
    }
    return _quotation_createNode_ctg1ot_a1a1(classifier);
  }

  private static SNode _quotation_createNode_ctg1ot_a1a1(Object parameter_1) {
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_2, "classifier", (SNode) parameter_1);
    return quotedNode_2;
  }
}
