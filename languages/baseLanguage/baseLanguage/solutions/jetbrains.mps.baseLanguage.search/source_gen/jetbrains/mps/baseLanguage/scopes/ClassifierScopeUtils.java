package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Map;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.search.GenericTypesUtil;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.List;

public class ClassifierScopeUtils {
  private ClassifierScopeUtils() {
  }

  public static String createMethodParameterTypesString(SNode method, Map<SNode, SNode> typeByTypeVar) {
    StringBuilder result = new StringBuilder();
    for (SNode parm : SLinkOperations.getTargets(method, "parameter", true)) {
      SNode type = SLinkOperations.getTarget(parm, "type", true);
      type = GenericTypesUtil.getTypeWithResolvedTypeVars(type, typeByTypeVar);
      if (result.length() > 0) {
        result.append(',');
      }
      if (type != null) {
        result.append(((String) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(type, "jetbrains.mps.baseLanguage.structure.Type"), "virtual_getErasureSignature_1213877337313", new Class[]{SNode.class})));
      } else {
        result.append("");
      }
    }
    return result.toString();
  }

  public static String getMethodSignatureForOverriding(SNode contextClassifier, SNode method) {
    return SPropertyOperations.getString(method, "name") + "(" + createMethodParameterTypesString(method, resolveClassifierTypeVars(contextClassifier)) + ")";
  }

  public static Map<SNode, SNode> resolveClassifierTypeVars(SNode classifier) {
    return getCache(classifier).getTypeByTypeVariableMap();
  }

  public static List<SNode> getExtendedClassifiers(SNode classifier) {
    return getCache(classifier).getClassifiers();
  }

  public static ClassifierAndSuperClassifiersCache getCache(SNode classifier) {
    return ClassifierAndSuperClassifiersCache.getInstance(classifier);
  }
}
