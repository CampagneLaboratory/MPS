package jetbrains.mps.baseLanguage.search;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.scope.Scope;

public class MpsScopesUtil {
  public MpsScopesUtil() {
  }

  public static String getSignature(SNode classifierMember, SNode classifier) {
    String classifierPrefix = ((String) BehaviorManager.getInstance().invoke(Object.class, SNodeOperations.cast(SNodeOperations.getParent(classifierMember), "jetbrains.mps.baseLanguage.structure.Classifier"), "virtual_getFqName_1213877404258", new Class[]{SNode.class})) + ":";
    if (SNodeOperations.isInstanceOf(classifierMember, "jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration")) {
      return classifierPrefix + SPropertyOperations.getString(SNodeOperations.cast(classifierMember, "jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration"), "name");
    }

    if (SNodeOperations.isInstanceOf(classifierMember, "jetbrains.mps.baseLanguage.structure.VariableDeclaration")) {
      return classifierPrefix + SPropertyOperations.getString(SNodeOperations.cast(classifierMember, "jetbrains.mps.baseLanguage.structure.VariableDeclaration"), "name");
    }
    if (SNodeOperations.isInstanceOf(classifierMember, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
      SNode method = SNodeOperations.cast(classifierMember, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration");
      return classifierPrefix + SPropertyOperations.getString(method, "name") + "<" + ListSequence.fromList(SLinkOperations.getTargets(method, "typeVariableDeclaration", true)).count() + ">" + "(" + ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).count() + ")";
    }
    return "No signature for " + classifierMember;
  }

  public static Iterable<SNode> getMembersOld(SNode classifier) {
    List<SNode> members = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode memberType : ListSequence.fromList(Arrays.asList(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldDeclaration"), SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"), SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"), SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"), SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration")))) {
      Scope scope = ((Scope) BehaviorManager.getInstance().invoke(Object.class, classifier, "virtual_getMembers_2201875424515824604", new Class[]{SNode.class, SNode.class}, memberType));
      for (SNode member : scope.getAvailableElements(null)) {
        ListSequence.fromList(members).addElement(member);
      }
    }
    return members;
  }

  public static Iterable<SNode> getMembersNew(SNode classifier) {
    // here new way to members calculating 
    return getMembersOld(classifier);
  }

  public static List<String> getMembersSignatures(SNode classifier) {
    List<String> result = ListSequence.fromList(new ArrayList<String>());
    for (SNode member : getMembersNew(classifier)) {
      if (!(SNodeOperations.isInstanceOf(member, "jetbrains.mps.baseLanguage.structure.ClassifierMember"))) {
        ListSequence.fromList(result).addElement("Not ClassifierMember member: " + member);
      } else {
        ListSequence.fromList(result).addElement(((((Boolean) BehaviorManager.getInstance().invoke(Boolean.class, SNodeOperations.cast(member, "jetbrains.mps.baseLanguage.structure.ClassifierMember"), "virtual_isStatic_8986964027630462944", new Class[]{SNode.class})) ?
          "static " :
          ""
        )) + getSignature(member, classifier));
      }
    }
    return result;
  }
}
