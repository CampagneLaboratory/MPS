/*
 * Copyright 2003-2012 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.smodel.TransactionCache;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;

public class BLCachedScopes {
  private BLCachedScopes() {
  }

  public static Scope forClassifierMembers(SNode classifier, SNode kind, boolean doFlat, _FunctionTypes._return_P0_E0<? extends Scope> scopeCreator) {
    TransactionCache<Tuples._2<SNode, SNode>, Scope> cache = TransactionCache.instance();
    Tuples._2<SNode, SNode> key = MultiTuple.<SNode,SNode>from(classifier, kind);

    Scope scope = cache.get(key);
    if (scope != null) {
      return scope;
    }

    scope = scopeCreator.invoke();
    if (doFlat) {
      scope = new SimpleScope(scope.getAvailableElements(null));
    }

    return cache.put(key, scope);
  }
}
