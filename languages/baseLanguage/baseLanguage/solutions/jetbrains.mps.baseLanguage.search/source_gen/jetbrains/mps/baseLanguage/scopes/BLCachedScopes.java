package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;

public class BLCachedScopes {
  private BLCachedScopes() {
  }

  public static Scope forClassifierMembers(SNode classifier, SNode kind, final boolean doFlat, final _FunctionTypes._return_P0_E0<? extends Scope> scopeCreator) {
    Tuples._2<SNode, SNode> key = MultiTuple.<SNode,SNode>from(classifier, kind);

    return TransactionCacheUtils.getFromCache(BLCachedScopes.class, key, new _FunctionTypes._return_P1_E0<Scope, Tuples._2<SNode, SNode>>() {
      public Scope invoke(Tuples._2<SNode, SNode> key) {
        Scope scope = scopeCreator.invoke();
        if (doFlat) {
          scope = new SimpleScope(scope.getAvailableElements(null));
        }
        return scope;
      }
    });
  }
}
