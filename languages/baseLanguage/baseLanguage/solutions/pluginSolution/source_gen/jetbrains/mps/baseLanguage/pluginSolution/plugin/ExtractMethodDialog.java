package jetbrains.mps.baseLanguage.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.dialogs.BaseDialog;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JCheckBox;
import jetbrains.mps.baseLanguage.util.plugin.refactorings.VisibilityPanel;
import jetbrains.mps.baseLanguage.util.plugin.refactorings.ExtractMethodRefactoringParameters;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.baseLanguage.util.plugin.refactorings.ExtractMethodRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import java.awt.Frame;
import java.awt.Dimension;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.baseLanguage.util.plugin.refactorings.ExtractMethodFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import javax.swing.JComponent;
import javax.swing.event.TableModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.JLabel;
import javax.swing.JTextField;
import com.intellij.ui.DocumentAdapter;
import javax.swing.event.DocumentEvent;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import javax.swing.JOptionPane;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.ide.dialogs.DialogDimensionsSettings;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.util.plugin.refactorings.MethodMatch;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class ExtractMethodDialog extends BaseDialog {
  private JPanel myPanel;
  private boolean myCanRefactor;
  private JTextArea myPreviewArea = new JTextArea();
  private JTextArea myMessagesArea = new JTextArea();
  private JCheckBox myDeclareStaticCheckBox;
  private VisibilityPanel myVisibilityPanel;
  private ExtractMethodDialog.ChooseContainerPanel myChooseContainerPanel;
  private ExtractMethodRefactoringParameters myParameters;
  private EditorContext myContext;
  private ExtractMethodRefactoring myRefactoring;
  private SNode myStaticTarget;
  private SModel myRefactoringModel;
  private boolean myExtractIntoOuterContainer;
  private boolean myStaticSelected;
  private boolean myStaticSelectedByUser;
  private boolean myStaticEnabled;
  private String myAnalyzeErrors;
  private String myErrors;

  public ExtractMethodDialog(Frame frame, EditorContext context, ExtractMethodRefactoringParameters params, ExtractMethodRefactoring refactoring) {
    super(frame, "Extract Method");
    this.setMinimumSize(new Dimension(600, 450));
    this.myContext = context;
    this.myParameters = params;
    this.myRefactoring = refactoring;
    this.myExtractIntoOuterContainer = this.myParameters.getAnalyzer().shouldChooseOuterContainer();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        myAnalyzeErrors = ExtractMethodFactory.getErrors(ExtractMethodDialog.this.myParameters.getNodesToRefactor());
        ExtractMethodDialog.this.initPanel();
      }
    });
    this.update();

  }

  private void update() {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        ExtractMethodDialog.this.myErrors = ExtractMethodDialog.this.getMessagesText();
        ExtractMethodDialog.this.myMessagesArea.setText(ExtractMethodDialog.this.myErrors);
        ExtractMethodDialog.this.myPreviewArea.setText(ExtractMethodDialog.this.myParameters.getMethodText());
      }
    });
    this.repaint();
  }

  private String getMessagesText() {
    this.myCanRefactor = true;
    StringBuffer buff = new StringBuffer();
    String methodName = this.myParameters.getName();
    if (methodName.length() == 0) {
      buff.append("Method name is empty.\n");
      this.myCanRefactor = false;
    } else {
      boolean nameIsGood = Character.isJavaIdentifierStart(methodName.charAt(0));
      for (int i = 1; i < methodName.length(); i++) {
        nameIsGood = nameIsGood && Character.isJavaIdentifierPart(methodName.charAt(i));
      }
      if (!(nameIsGood)) {
        buff.append("Method name is incorrect.");
        this.myCanRefactor = false;
      }
    }
    if (this.myAnalyzeErrors != null) {
      buff.append(this.myAnalyzeErrors);
      this.myCanRefactor = false;
    }
    SNode overrides = this.myParameters.getOverridingMethodClass();
    if (overrides != null && !(this.myExtractIntoOuterContainer)) {
      if ((overrides == SNodeOperations.getAncestor(this.myParameters.getContainerMethod(), "jetbrains.mps.baseLanguage.structure.Classifier", false, false))) {
        buff.append("Such method already exists.\n");
      } else {
        buff.append("Method overrides method from class ").append(SPropertyOperations.getString(overrides, "name")).append("\n");
      }
      this.myCanRefactor = false;
    }
    if (buff.length() == 0) {
      buff.append("\n");
    }
    return buff.toString();
  }

  private void initPanel() {
    this.myPanel = new JPanel(new GridBagLayout());
    GridBagConstraints c = new GridBagConstraints();
    c.fill = GridBagConstraints.BOTH;
    c.anchor = GridBagConstraints.NORTHWEST;
    c.insets = new Insets(3, 5, 3, 5);

    c.gridx = 0;
    c.gridy = 0;
    c.weightx = 1;
    c.weighty = 0;
    c.gridwidth = 2;
    this.myPanel.add(this.createMethodPanel(), c);



    c.gridx = 0;
    c.gridy = 1;
    c.weightx = 1;
    c.weighty = 1;
    c.gridwidth = 1;

    this.myPanel.add(this.createParametersPanel(), c);

    c.gridx = 1;
    c.gridy = 1;
    c.weightx = 0;
    c.weighty = 1;
    c.gridwidth = 1;
    this.myVisibilityPanel = new VisibilityPanel();
    this.myVisibilityPanel.addChangeListener(new ChangeListener() {
      public void stateChanged(ChangeEvent p0) {
        ExtractMethodDialog.this.myParameters.setVisibilityLevel(ExtractMethodDialog.this.myVisibilityPanel.getResult());
        ExtractMethodDialog.this.update();
      }
    });


    this.myPanel.add(this.myVisibilityPanel, c);

    c.gridx = 0;
    c.gridy = 2;
    c.weightx = 1;
    c.weighty = 0;
    c.gridwidth = 2;
    this.myPanel.add(this.createPreviewPanel(), c);

    c.gridx = 0;
    c.gridy = 3;
    c.weightx = 1;
    c.weighty = 0;
    c.gridwidth = 2;

    this.myChooseContainerPanel = new ExtractMethodDialog.ChooseContainerPanel();
    myChooseContainerPanel.setBorder(this.createBorder("Choose container"));
    this.myPanel.add(this.myChooseContainerPanel, c);


    c.gridx = 0;
    c.gridy = 4;
    c.weightx = 1;
    c.weighty = 0;
    c.gridwidth = 2;

    this.myPanel.add(this.createMessagesComponent(), c);
  }

  private JComponent createPreviewPanel() {
    this.myPreviewArea.setEditable(false);
    this.myPreviewArea.setBackground(this.myPanel.getBackground());
    this.myPreviewArea.setBorder(this.createBorder("Signature Preview"));
    return this.myPreviewArea;
  }

  private JComponent createMessagesComponent() {
    this.myMessagesArea.setEditable(false);
    this.myMessagesArea.setBackground(this.myPanel.getBackground());
    this.myMessagesArea.setBorder(this.createBorder("Messages"));
    return this.myMessagesArea;
  }

  private JComponent createParametersPanel() {
    ParametersPanel parametersPanel = new ParametersPanel(this.myParameters);
    parametersPanel.setBorder(this.createBorder("Parameters"));
    ParametersTableModel tableModel = parametersPanel.getTableModel();
    tableModel.addTableModelListener(new TableModelListener() {
      public void tableChanged(TableModelEvent p0) {
        ExtractMethodDialog.this.update();
      }
    });


    return parametersPanel;
  }

  private JComponent createMethodPanel() {
    JPanel methodPanel = new JPanel(new GridBagLayout());
    methodPanel.setBorder(this.createBorder("Method"));
    GridBagConstraints c = new GridBagConstraints();
    c.gridx = 0;
    c.gridy = 0;
    c.weightx = 0;
    c.anchor = GridBagConstraints.FIRST_LINE_START;
    methodPanel.add(new JLabel("Name:"), c);
    c = new GridBagConstraints();
    c.fill = GridBagConstraints.HORIZONTAL;
    c.gridx = 0;
    c.gridy = 1;
    c.weightx = 1;
    c.weighty = 1;
    c.anchor = GridBagConstraints.FIRST_LINE_START;
    final JTextField nameField = new JTextField(20);
    methodPanel.add(nameField, c);
    nameField.getDocument().addDocumentListener(new DocumentAdapter() {
      protected void textChanged(DocumentEvent p0) {
        ExtractMethodDialog.this.myParameters.setName(nameField.getText());
        ExtractMethodDialog.this.update();
      }
    });

    c.fill = GridBagConstraints.NONE;
    c.gridx = 0;
    c.gridy = 2;
    c.weightx = 1;
    c.weighty = 1;
    c.anchor = GridBagConstraints.FIRST_LINE_START;
    myDeclareStaticCheckBox = createDeclareStaticCheckBox();
    methodPanel.add(this.myDeclareStaticCheckBox, c);
    this.myDeclareStaticCheckBox.addItemListener(new ItemListener() {
      public void itemStateChanged(ItemEvent p0) {
        myStaticSelected = ExtractMethodDialog.this.myDeclareStaticCheckBox.isSelected();
        ExtractMethodDialog.this.myParameters.setStatic(myStaticSelected);
        ExtractMethodDialog.this.update();
      }
    });






    return methodPanel;
  }

  public JCheckBox createDeclareStaticCheckBox() {
    JCheckBox result = new JCheckBox("Declare static");
    boolean canBeStatic = myRefactoring.canBeStatic();
    boolean shouldBeStatic = myRefactoring.shouldBeStatic();
    this.myStaticSelected = shouldBeStatic;
    this.myStaticEnabled = canBeStatic && !(shouldBeStatic);
    setCheckBox(result, this.myStaticSelected, this.myStaticEnabled);
    return result;
  }

  public void setCheckBox(JCheckBox checkBox, boolean selected, boolean enabled) {
    checkBox.setSelected(selected);
    checkBox.setEnabled(enabled);
  }

  private Border createBorder(String title) {
    return new CompoundBorder(new TitledBorder(title), new EmptyBorder(5, 5, 5, 5));
  }

  public JComponent getMainComponent() {
    return this.myPanel;
  }

  @BaseDialog.Button(position = 0, name = "Refactor", mnemonic = 'R', defaultButton = true)
  public void onOk() {
    final Wrappers._T<SNode> result = new Wrappers._T<SNode>(null);
    if (!(this.myCanRefactor)) {
      JOptionPane.showMessageDialog(this, "Can't refactor\n" + this.myErrors, "Can't perform refactoring", JOptionPane.ERROR_MESSAGE);
      return;
    } else {
      if (this.myExtractIntoOuterContainer) {
        if (this.myStaticTarget == null) {
          chooseStaticContainer();
        }
        if (this.myStaticTarget != null) {
          setStaticContainer();
        } else {
          return;
        }
      }
      ModelAccess.instance().runWriteActionInCommand(new Runnable() {
        public void run() {
          result.value = ExtractMethodDialog.this.myRefactoring.doRefactor();
          ExtractMethodDialog.this.myContext.select(result.value);
          if ((myRefactoringModel != null) && ExtractMethodDialog.this.myExtractIntoOuterContainer) {
            SModelReference ref = SNodeOperations.getModel(myStaticTarget).getSModelReference();
            myRefactoringModel.addModelImport(ref, false);
          }
        }
      });
    }
    this.dispose();
    if ((result.value != null)) {
      new ExtractMethodDialog.MyMethodDuplicatesProcessor(this.myContext, result.value).process(this.myRefactoring.getMatches());
    }
  }

  private void setStaticContainer() {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        ExtractMethodDialog.this.myRefactoring.setStaticContainer(ExtractMethodDialog.this.myStaticTarget);
      }
    });
  }

  @BaseDialog.Button(position = 1, name = "Cancel", mnemonic = 'C', defaultButton = false)
  public void onCancel() {
    this.dispose();
  }

  public DialogDimensionsSettings.DialogDimensions getDefaultDimensionSettings() {
    return new DialogDimensionsSettings.DialogDimensions(100, 200, 500, 400);
  }

  protected void prepareDialog() {
    super.prepareDialog();
    this.pack();
  }

  public void chooseStaticContainer() {
    final Wrappers._T<SModelDescriptor> model = new Wrappers._T<SModelDescriptor>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        myRefactoringModel = SNodeOperations.getModel(ListSequence.fromList(ExtractMethodDialog.this.myParameters.getNodesToRefactor()).first());
        model.value = myRefactoringModel.getModelDescriptor();
      }
    });
    myStaticTarget = BLDialogs.showStaticContainerChooser(this.myContext.getOperationContext(), model.value);
    if (myStaticTarget == null) {
      myRefactoringModel = null;
    }

  }

  public class MyMethodDuplicatesProcessor extends MethodDuplicatesProcessor {
    private SNode myMethod;

    public MyMethodDuplicatesProcessor(EditorContext context, SNode method) {
      super(context);
      this.myMethod = method;
    }

    public void substitute(MethodMatch duplicate) {
      duplicate.getRefactoring().replaceMatch(duplicate, this.myMethod);
    }
  }

  private class ChooseContainerPanel extends JPanel {
    {
      myOuterContainerCheckBox = new JCheckBox("Extract into outer container");
      myChooseContainerButton = new JButton("Choose Container");
    }

    private JButton myChooseContainerButton;
    private JCheckBox myOuterContainerCheckBox;

    public ChooseContainerPanel() {
      super(new GridBagLayout());
      this.initPanel();
    }

    private void initPanel() {
      ExtractMethodDialog.this.setCheckBox(this.myOuterContainerCheckBox, ExtractMethodDialog.this.myExtractIntoOuterContainer, !(ExtractMethodDialog.this.myExtractIntoOuterContainer));
      myOuterContainerCheckBox.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent p0) {
          ExtractMethodDialog.this.myExtractIntoOuterContainer = myOuterContainerCheckBox.isSelected();
          myChooseContainerButton.setEnabled(ExtractMethodDialog.this.myExtractIntoOuterContainer);
          if (ExtractMethodDialog.this.myExtractIntoOuterContainer) {
            ExtractMethodDialog.this.myStaticSelectedByUser = ExtractMethodDialog.this.myStaticSelected;
          }

          setCheckBox(ExtractMethodDialog.this.myDeclareStaticCheckBox, ExtractMethodDialog.this.myExtractIntoOuterContainer || ExtractMethodDialog.this.myStaticSelectedByUser, !(ExtractMethodDialog.this.myExtractIntoOuterContainer) && ExtractMethodDialog.this.myStaticEnabled);
        }
      });

      myChooseContainerButton.setEnabled(ExtractMethodDialog.this.myExtractIntoOuterContainer);
      myChooseContainerButton.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent p0) {
          chooseStaticContainer();
          ModelAccess.instance().runReadAction(new Runnable() {
            public void run() {
              if (ExtractMethodDialog.this.myStaticTarget != null) {
                if (SNodeOperations.isInstanceOf(ExtractMethodDialog.this.myStaticTarget, "jetbrains.mps.baseLanguage.structure.ClassConcept")) {
                  myChooseContainerButton.setIcon(IconContainer.ICON_a0a0a0a0a0b0a0a0a0e0a1);
                } else if (SNodeOperations.isInstanceOf(ExtractMethodDialog.this.myStaticTarget, "jetbrains.mps.lang.behavior.structure.ConceptBehavior")) {
                  myChooseContainerButton.setIcon(IconContainer.ICON_a0a0a0a0a0a1a0a0a0a4a0b);
                }
                if (SNodeOperations.isInstanceOf(ExtractMethodDialog.this.myStaticTarget, "jetbrains.mps.lang.core.structure.INamedConcept")) {
                  myChooseContainerButton.setText(SPropertyOperations.getString((SNodeOperations.cast(ExtractMethodDialog.this.myStaticTarget, "jetbrains.mps.lang.core.structure.INamedConcept")), "name"));
                }

              }
              ExtractMethodDialog.this.update();
            }
          });
        }
      });

      GridBagConstraints c = new GridBagConstraints();
      c.gridx = 0;
      c.gridy = 0;
      c.weightx = 3;
      c.anchor = GridBagConstraints.FIRST_LINE_START;
      add(myOuterContainerCheckBox, c);

      c.gridx = 1;
      c.gridy = 0;
      c.weightx = 1;
      c.anchor = GridBagConstraints.FIRST_LINE_END;
      add(myChooseContainerButton, c);

    }
  }
}
