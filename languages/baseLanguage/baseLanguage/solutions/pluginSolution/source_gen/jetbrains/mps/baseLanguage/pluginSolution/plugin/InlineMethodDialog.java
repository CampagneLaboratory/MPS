package jetbrains.mps.baseLanguage.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.platform.refactoring.RefactoringDialog;
import javax.swing.JLabel;
import jetbrains.mps.smodel.SNode;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.IOperationContext;
import javax.swing.JPanel;
import java.awt.GridBagLayout;
import javax.swing.border.TitledBorder;
import javax.swing.ButtonGroup;
import javax.swing.JRadioButton;
import java.awt.Component;
import jetbrains.mps.smodel.ModelAccess;
import javax.swing.JOptionPane;
import java.awt.GridBagConstraints;
import javax.swing.AbstractAction;
import java.awt.event.ActionEvent;
import jetbrains.mps.ide.dialogs.DialogDimensionsSettings;
import org.jetbrains.annotations.Nullable;
import javax.swing.JComponent;
import java.awt.Insets;
import javax.swing.Action;
import com.intellij.openapi.ui.DialogWrapper;

public class InlineMethodDialog extends RefactoringDialog {
  private JLabel myText = new JLabel();
  private String myErrors;
  private InlineMethodDialogModel myModel;
  private InlineMethodDialog.PreviewAction myPreviewAction;

  public InlineMethodDialog(SNode node, Project project, IOperationContext operationContext) {
    super(project, true);
    setTitle("Inline Method");
    setResizable(false);

    this.myModel = new InlineMethodDialogModel(node, operationContext);
    init();
  }

  private JPanel createCheckBoxes() {
    JPanel checkboxesPanel = new JPanel(new GridBagLayout());
    checkboxesPanel.setBorder(new TitledBorder("Inline"));
    ButtonGroup group = new ButtonGroup();
    JRadioButton button1 = this.createButton(group, checkboxesPanel, 0, false, "Inline only this call of method.");
    JRadioButton button2 = this.createButton(group, checkboxesPanel, 1, true, "Inline all calls of method.");
    if (myModel.isRecusive()) {
      button2.setEnabled(false);
    }
    if (myModel.getMethodCall() != null) {
      button1.setSelected(true);
      myModel.setForAll(false);
      myPreviewAction.setEnabled(false);
    } else {
      button1.setEnabled(false);
      button2.setSelected(true);
      myModel.setForAll(true);
      myPreviewAction.setEnabled(true);
    }
    return checkboxesPanel;
  }

  public void tryToShow(Component parentComponent) {
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        InlineMethodDialog.this.myErrors = InlineMethodRefactoringAnalyzer.getErrors(InlineMethodDialog.this.myModel);
      }
    });
    if (this.myErrors == null) {
      this.show();
    } else {
      JOptionPane.showMessageDialog(parentComponent, this.myErrors, "Can't perform refactoring", JOptionPane.ERROR_MESSAGE);
    }
  }

  private JRadioButton createButton(ButtonGroup group, JPanel checkboxesPanel, int y, final boolean forAll, String text) {
    GridBagConstraints c = new GridBagConstraints();
    c.fill = GridBagConstraints.NONE;
    c.gridx = 0;
    c.gridy = y;
    c.weightx = 1;
    c.anchor = GridBagConstraints.FIRST_LINE_START;
    JRadioButton button1 = new JRadioButton(new AbstractAction(text) {
      public void actionPerformed(ActionEvent e) {
        InlineMethodDialog.this.myModel.setForAll(forAll);
        myPreviewAction.setEnabled(forAll);
      }
    });
    group.add(button1);
    checkboxesPanel.add(button1, c);
    return button1;
  }

  public DialogDimensionsSettings.DialogDimensions getDefaultDimensionSettings() {
    return new DialogDimensionsSettings.DialogDimensions(100, 200, 300, 200);
  }

  @Nullable
  protected JComponent createCenterPanel() {
    JPanel panel = new JPanel(new GridBagLayout());
    GridBagConstraints c = new GridBagConstraints();
    c.fill = GridBagConstraints.BOTH;
    c.insets = new Insets(3, 3, 3, 3);
    c.gridx = 0;
    c.gridy = 0;
    c.weightx = 1;
    panel.add(myText, c);
    c = new GridBagConstraints();
    c.fill = GridBagConstraints.BOTH;
    c.insets = new Insets(3, 3, 3, 3);
    c.gridx = 0;
    c.gridy = 1;
    c.weighty = 1;
    panel.add(createCheckBoxes(), c);
    return panel;
  }

  @Override
  protected void createDefaultActions() {
    super.createDefaultActions();
    myPreviewAction = new InlineMethodDialog.PreviewAction();
  }

  @Override
  protected Action[] createActions() {
    return new Action[]{getRefactorAction(), myPreviewAction, getCancelAction()};
  }

  /**
   * This method will be called on pressing "Refactor" button in dialog.
   * 
   * 
   * @return true if the dialog can be closed and false to prevent dialog from closing and continue working with it
   */
  protected boolean doRefactoringAction() {
    myModel.onOk();
    return true;
  }

  public class PreviewAction extends DialogWrapper.DialogWrapperAction {
    public PreviewAction() {
      super("Preview");
    }

    protected void doAction(ActionEvent event) {
      myModel.preview();
      close(DialogWrapper.OK_EXIT_CODE);
    }
  }
}
