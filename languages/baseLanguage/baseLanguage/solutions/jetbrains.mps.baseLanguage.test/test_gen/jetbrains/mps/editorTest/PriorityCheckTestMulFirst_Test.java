package jetbrains.mps.editorTest;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.ParenthesisUtil;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import junit.framework.Assert;
import jetbrains.mps.lang.test.matcher.NodesMatcher;

@MPSLaunch
public class PriorityCheckTestMulFirst_Test extends BaseTransformationTest {
  @Test
  public void test_testRotation() throws Throwable {
    this.initTest("${mps_home}", "r:914ee49a-537d-44b2-a5fb-bac87a54743d(jetbrains.mps.editorTest@tests)");
    this.runTest("jetbrains.mps.editorTest.PriorityCheckTestMulFirst_Test$TestBody", "test_testRotation", true);
  }
  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_testRotation() throws Exception {
      this.addNodeById("818296778579227382");
      this.addNodeById("818296778579227391");
      SNode op = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.MulExpression", null);
      SNode constant = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IntegerConstant", null);
      SPropertyOperations.set(constant, "value", "" + (3));
      SLinkOperations.setTarget(op, "leftExpression", constant, true);
      SNodeOperations.replaceWithAnother(SNodeOperations.cast(this.getNodeById("818296778579227386"), "jetbrains.mps.baseLanguage.structure.PlusExpression"), op);
      SLinkOperations.setTarget(op, "rightExpression", SNodeOperations.cast(this.getNodeById("818296778579227386"), "jetbrains.mps.baseLanguage.structure.PlusExpression"), true);
      ParenthesisUtil.checkOperationWRTPriority(op);
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById("818296778579227394"), "jetbrains.mps.baseLanguage.structure.ExpressionStatement"));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById("818296778579227385"), "jetbrains.mps.baseLanguage.structure.ExpressionStatement"));
        Assert.assertNull("nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", NodesMatcher.matchNodes(nodesBefore, nodesAfter));
      }
    }
  }
}
