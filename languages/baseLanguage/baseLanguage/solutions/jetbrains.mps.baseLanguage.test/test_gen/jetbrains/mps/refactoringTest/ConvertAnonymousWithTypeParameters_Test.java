package jetbrains.mps.refactoringTest;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest4;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.baseLanguage.util.plugin.refactorings.ConvertAnonymousRefactoring;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import junit.framework.Assert;
import jetbrains.mps.lang.test.matcher.NodesMatcher;

@MPSLaunch
public class ConvertAnonymousWithTypeParameters_Test extends BaseTransformationTest4 {
  @Test
  public void test_TypeParametersTest() throws Throwable {
    this.initTest("${mps_home}", "r:4dc6ffb5-4bbb-4773-b0b7-e52989ceb56f(jetbrains.mps.refactoringTest@tests)");
    this.runTest("jetbrains.mps.refactoringTest.ConvertAnonymousWithTypeParameters_Test$TestBody", "test_TypeParametersTest", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_TypeParametersTest() throws Exception {
      this.addNodeById("9160497614872088317");
      this.addNodeById("9160497614872003746");
      new ConvertAnonymousRefactoring(SNodeOperations.cast(this.getNodeById("9160497614872088338"), "jetbrains.mps.baseLanguage.structure.AnonymousClass"), "MyIterable").doRefactor();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById("9160497614872088318"), "jetbrains.mps.baseLanguage.structure.ClassConcept"));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById("9160497614872087740"), "jetbrains.mps.baseLanguage.structure.ClassConcept"));
        Assert.assertNull("nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", NodesMatcher.matchNodes(nodesBefore, nodesAfter));
      }
    }
  }
}
