package jetbrains.mps.prioritiesTest;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest4;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import org.jetbrains.mps.openapi.model.SNode;
import junit.framework.Assert;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.ParenthesisUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

@MPSLaunch
public class TestBlPriorities_Test extends BaseTransformationTest4 {
  @Test
  public void test_testBitwisePriorities() throws Throwable {
    this.initTest("${mps_home}", "r:3c49ab36-1271-439f-ac5d-2df7deb7394d(jetbrains.mps.prioritiesTest)");
    this.runTest("jetbrains.mps.prioritiesTest.TestBlPriorities_Test$TestBody", "test_testBitwisePriorities", true);
  }

  @Test
  public void test_testBooleanAndWithEqualsOperation() throws Throwable {
    this.initTest("${mps_home}", "r:3c49ab36-1271-439f-ac5d-2df7deb7394d(jetbrains.mps.prioritiesTest)");
    this.runTest("jetbrains.mps.prioritiesTest.TestBlPriorities_Test$TestBody", "test_testBooleanAndWithEqualsOperation", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_testBitwisePriorities() throws Exception {
      this.check(_quotation_createNode_hlijcv_a0a0a0(), 1 & 2 | 3 << 4 ^ 5 | 6);
    }

    public void test_testBooleanAndWithEqualsOperation() throws Exception {
      this.check(_quotation_createNode_hlijcv_a0a0a1(), true || false == false);
    }

    public void check(SNode expr, Object expectedValue) {
      this.expressionPriorityRebalance(expr);
      Assert.assertEquals(expectedValue, this.eval(SLinkOperations.getTarget(expr, "expression", true)));
    }

    public void expressionPriorityRebalance(SNode e) {
      for (SNode child : SNodeOperations.getChildren(e)) {
        if (SNodeOperations.isInstanceOf(child, "jetbrains.mps.baseLanguage.structure.Expression")) {
          this.expressionPriorityRebalance(SNodeOperations.cast(child, "jetbrains.mps.baseLanguage.structure.Expression"));
        }
      }
      if (SNodeOperations.isInstanceOf(e, "jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
        ParenthesisUtil.checkOperationWRTPriority(SNodeOperations.cast(e, "jetbrains.mps.baseLanguage.structure.BinaryOperation"));
      }
    }

    public Object eval(SNode e) {
      if (SNodeOperations.isInstanceOf(e, "jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
        return this.evalBinaryOperation(SNodeOperations.cast(e, "jetbrains.mps.baseLanguage.structure.BinaryOperation"));
      }
      if (SNodeOperations.isInstanceOf(e, "jetbrains.mps.baseLanguage.structure.IntegerConstant")) {
        return SPropertyOperations.getInteger(SNodeOperations.cast(e, "jetbrains.mps.baseLanguage.structure.IntegerConstant"), "value");
      }
      if (SNodeOperations.isInstanceOf(e, "jetbrains.mps.baseLanguage.structure.BooleanConstant")) {
        return SPropertyOperations.getBoolean(SNodeOperations.cast(e, "jetbrains.mps.baseLanguage.structure.BooleanConstant"), "value");
      }

      throw new UnsupportedOperationException(e.getPresentation());
    }

    public Object evalBinaryOperation(SNode e) {
      Object left = this.eval(SLinkOperations.getTarget(SNodeOperations.cast(e, "jetbrains.mps.baseLanguage.structure.BinaryOperation"), "leftExpression", true));
      Object right = this.eval(SLinkOperations.getTarget(SNodeOperations.cast(e, "jetbrains.mps.baseLanguage.structure.BinaryOperation"), "rightExpression", true));

      if (SNodeOperations.isInstanceOf(e, "jetbrains.mps.baseLanguage.structure.ShiftLeftExpression")) {
        return ((Integer) left) << ((Integer) right);
      }
      if (SNodeOperations.isInstanceOf(e, "jetbrains.mps.baseLanguage.structure.BitwiseAndExpression")) {
        return ((Integer) left) & ((Integer) right);
      }
      if (SNodeOperations.isInstanceOf(e, "jetbrains.mps.baseLanguage.structure.BitwiseOrExpression")) {
        return ((Integer) left) | ((Integer) right);
      }
      if (SNodeOperations.isInstanceOf(e, "jetbrains.mps.baseLanguage.structure.BitwiseXorExpression")) {
        return ((Integer) left) ^ ((Integer) right);
      }

      if (SNodeOperations.isInstanceOf(e, "jetbrains.mps.baseLanguage.structure.AndExpression")) {
        return ((Boolean) left) && ((Boolean) right);
      }
      if (SNodeOperations.isInstanceOf(e, "jetbrains.mps.baseLanguage.structure.OrExpression")) {
        return ((Boolean) left) || ((Boolean) right);
      }

      if (SNodeOperations.isInstanceOf(e, "jetbrains.mps.baseLanguage.structure.EqualsExpression")) {
        return eq_p8h609_a0a0l0f2(left, right);
      }

      throw new UnsupportedOperationException(e.getPresentation());
    }

    private static SNode _quotation_createNode_hlijcv_a0a0a0() {
      PersistenceFacade facade = PersistenceFacade.getInstance();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      SNode quotedNode_5 = null;
      SNode quotedNode_6 = null;
      SNode quotedNode_7 = null;
      SNode quotedNode_8 = null;
      SNode quotedNode_9 = null;
      SNode quotedNode_10 = null;
      SNode quotedNode_11 = null;
      SNode quotedNode_12 = null;
      quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, null, GlobalScope.getInstance(), false);
      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BitwiseOrExpression", null, null, GlobalScope.getInstance(), false);
      quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, GlobalScope.getInstance(), false);
      SNodeAccessUtil.setProperty(quotedNode_3, "value", "6");
      quotedNode_2.addChild("rightExpression", quotedNode_3);
      quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BitwiseOrExpression", null, null, GlobalScope.getInstance(), false);
      quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BitwiseAndExpression", null, null, GlobalScope.getInstance(), false);
      quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, GlobalScope.getInstance(), false);
      SNodeAccessUtil.setProperty(quotedNode_7, "value", "1");
      quotedNode_5.addChild("leftExpression", quotedNode_7);
      quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, GlobalScope.getInstance(), false);
      SNodeAccessUtil.setProperty(quotedNode_8, "value", "2");
      quotedNode_5.addChild("rightExpression", quotedNode_8);
      quotedNode_4.addChild("leftExpression", quotedNode_5);
      quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BitwiseXorExpression", null, null, GlobalScope.getInstance(), false);
      quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ShiftLeftExpression", null, null, GlobalScope.getInstance(), false);
      quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, GlobalScope.getInstance(), false);
      SNodeAccessUtil.setProperty(quotedNode_11, "value", "3");
      quotedNode_9.addChild("leftExpression", quotedNode_11);
      quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, GlobalScope.getInstance(), false);
      SNodeAccessUtil.setProperty(quotedNode_12, "value", "4");
      quotedNode_9.addChild("rightExpression", quotedNode_12);
      quotedNode_6.addChild("leftExpression", quotedNode_9);
      quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, GlobalScope.getInstance(), false);
      SNodeAccessUtil.setProperty(quotedNode_10, "value", "5");
      quotedNode_6.addChild("rightExpression", quotedNode_10);
      quotedNode_4.addChild("rightExpression", quotedNode_6);
      quotedNode_2.addChild("leftExpression", quotedNode_4);
      quotedNode_1.addChild("expression", quotedNode_2);
      return quotedNode_1;
    }

    private static SNode _quotation_createNode_hlijcv_a0a0a1() {
      PersistenceFacade facade = PersistenceFacade.getInstance();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      SNode quotedNode_5 = null;
      SNode quotedNode_6 = null;
      quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, null, GlobalScope.getInstance(), false);
      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.EqualsExpression", null, null, GlobalScope.getInstance(), false);
      quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, null, GlobalScope.getInstance(), false);
      SNodeAccessUtil.setProperty(quotedNode_3, "value", "false");
      quotedNode_2.addChild("rightExpression", quotedNode_3);
      quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.OrExpression", null, null, GlobalScope.getInstance(), false);
      quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, null, GlobalScope.getInstance(), false);
      SNodeAccessUtil.setProperty(quotedNode_5, "value", "false");
      quotedNode_4.addChild("rightExpression", quotedNode_5);
      quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, null, GlobalScope.getInstance(), false);
      SNodeAccessUtil.setProperty(quotedNode_6, "value", "true");
      quotedNode_4.addChild("leftExpression", quotedNode_6);
      quotedNode_2.addChild("leftExpression", quotedNode_4);
      quotedNode_1.addChild("expression", quotedNode_2);
      return quotedNode_1;
    }

    private static boolean eq_p8h609_a0a0l0f2(Object a, Object b) {
      return (a != null ?
        a.equals(b) :
        a == b
      );
    }
  }
}
