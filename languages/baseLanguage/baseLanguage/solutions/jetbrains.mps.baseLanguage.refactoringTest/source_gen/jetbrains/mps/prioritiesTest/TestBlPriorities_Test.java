package jetbrains.mps.prioritiesTest;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest4;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.smodel.SNode;
import junit.framework.Assert;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.ParenthesisUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

@MPSLaunch
public class TestBlPriorities_Test extends BaseTransformationTest4 {
  @Test
  public void test_testPriorities1() throws Throwable {
    this.initTest("${mps_home}/MPS.mpr", "r:3c49ab36-1271-439f-ac5d-2df7deb7394d(jetbrains.mps.prioritiesTest)");
    this.runTest("jetbrains.mps.prioritiesTest.TestBlPriorities_Test$TestBody", "test_testPriorities1", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_testPriorities1() throws Exception {
      this.check(new TestBlPriorities_Test.TestBody.QuotationClass_p8h609_a0a0a0a0().createNode(), 1 & 2 | 3 << 4 ^ 5 | 6);
    }

    public void check(SNode expr, int expectedValue) {
      this.expressionPriorityRebalance(expr);
      Assert.assertEquals(expectedValue, this.eval(SLinkOperations.getTarget(expr, "expression", true)));
    }

    public void expressionPriorityRebalance(SNode e) {
      for (SNode child : SNodeOperations.getChildren(e)) {
        if (SNodeOperations.isInstanceOf(child, "jetbrains.mps.baseLanguage.structure.Expression")) {
          this.expressionPriorityRebalance(SNodeOperations.cast(child, "jetbrains.mps.baseLanguage.structure.Expression"));
        }
      }
      if (SNodeOperations.isInstanceOf(e, "jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
        ParenthesisUtil.checkOperationWRTPriority(SNodeOperations.cast(e, "jetbrains.mps.baseLanguage.structure.BinaryOperation"));
      }
    }

    public int eval(SNode e) {
      if (SNodeOperations.isInstanceOf(e, "jetbrains.mps.baseLanguage.structure.BinaryOperation")) {
        return this.evalBinaryOperation(SNodeOperations.cast(e, "jetbrains.mps.baseLanguage.structure.BinaryOperation"));
      }
      if (SNodeOperations.isInstanceOf(e, "jetbrains.mps.baseLanguage.structure.IntegerConstant")) {
        return SPropertyOperations.getInteger(SNodeOperations.cast(e, "jetbrains.mps.baseLanguage.structure.IntegerConstant"), "value");
      }

      throw new UnsupportedOperationException(e.getPresentation());
    }

    public int evalBinaryOperation(SNode e) {
      int left = this.eval(SLinkOperations.getTarget(SNodeOperations.cast(e, "jetbrains.mps.baseLanguage.structure.BinaryOperation"), "leftExpression", true));
      int right = this.eval(SLinkOperations.getTarget(SNodeOperations.cast(e, "jetbrains.mps.baseLanguage.structure.BinaryOperation"), "rightExpression", true));

      if (SNodeOperations.isInstanceOf(e, "jetbrains.mps.baseLanguage.structure.ShiftLeftExpression")) {
        return left << right;
      }
      if (SNodeOperations.isInstanceOf(e, "jetbrains.mps.baseLanguage.structure.BitwiseAndExpression")) {
        return left & right;
      }
      if (SNodeOperations.isInstanceOf(e, "jetbrains.mps.baseLanguage.structure.BitwiseOrExpression")) {
        return left | right;
      }
      if (SNodeOperations.isInstanceOf(e, "jetbrains.mps.baseLanguage.structure.BitwiseXorExpression")) {
        return left ^ right;
      }

      throw new UnsupportedOperationException(e.getPresentation());
    }

    public static class QuotationClass_p8h609_a0a0a0a0 {
      public QuotationClass_p8h609_a0a0a0a0() {
      }

      public SNode createNode() {
        SNode result = null;
        Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
        SNode quotedNode_1 = null;
        SNode quotedNode_2 = null;
        SNode quotedNode_3 = null;
        SNode quotedNode_4 = null;
        SNode quotedNode_5 = null;
        SNode quotedNode_6 = null;
        SNode quotedNode_7 = null;
        SNode quotedNode_8 = null;
        SNode quotedNode_9 = null;
        SNode quotedNode_10 = null;
        SNode quotedNode_11 = null;
        SNode quotedNode_12 = null;
        {
          quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_13 = quotedNode_1;
          {
            quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BitwiseOrExpression", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_14 = quotedNode_2;
            {
              quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, GlobalScope.getInstance(), false);
              SNode quotedNode1_15 = quotedNode_3;
              quotedNode1_15.setProperty("value", "6");
              quotedNode_2.addChild("rightExpression", quotedNode1_15);
            }
            {
              quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BitwiseOrExpression", null, GlobalScope.getInstance(), false);
              SNode quotedNode1_16 = quotedNode_4;
              {
                quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BitwiseAndExpression", null, GlobalScope.getInstance(), false);
                SNode quotedNode1_17 = quotedNode_5;
                {
                  quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, GlobalScope.getInstance(), false);
                  SNode quotedNode1_18 = quotedNode_7;
                  quotedNode1_18.setProperty("value", "1");
                  quotedNode_5.addChild("leftExpression", quotedNode1_18);
                }
                {
                  quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, GlobalScope.getInstance(), false);
                  SNode quotedNode1_19 = quotedNode_8;
                  quotedNode1_19.setProperty("value", "2");
                  quotedNode_5.addChild("rightExpression", quotedNode1_19);
                }
                quotedNode_4.addChild("leftExpression", quotedNode1_17);
              }
              {
                quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BitwiseXorExpression", null, GlobalScope.getInstance(), false);
                SNode quotedNode1_20 = quotedNode_6;
                {
                  quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ShiftLeftExpression", null, GlobalScope.getInstance(), false);
                  SNode quotedNode1_21 = quotedNode_9;
                  {
                    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, GlobalScope.getInstance(), false);
                    SNode quotedNode1_22 = quotedNode_11;
                    quotedNode1_22.setProperty("value", "3");
                    quotedNode_9.addChild("leftExpression", quotedNode1_22);
                  }
                  {
                    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, GlobalScope.getInstance(), false);
                    SNode quotedNode1_23 = quotedNode_12;
                    quotedNode1_23.setProperty("value", "4");
                    quotedNode_9.addChild("rightExpression", quotedNode1_23);
                  }
                  quotedNode_6.addChild("leftExpression", quotedNode1_21);
                }
                {
                  quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, GlobalScope.getInstance(), false);
                  SNode quotedNode1_24 = quotedNode_10;
                  quotedNode1_24.setProperty("value", "5");
                  quotedNode_6.addChild("rightExpression", quotedNode1_24);
                }
                quotedNode_4.addChild("rightExpression", quotedNode1_20);
              }
              quotedNode_2.addChild("leftExpression", quotedNode1_16);
            }
            quotedNode_1.addChild("expression", quotedNode1_14);
          }
          result = quotedNode1_13;
        }
        return result;
      }
    }
  }
}
