package jetbrains.mps.baseLanguage.test.types;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest4;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.lang.test.runtime.SubtreeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

@MPSLaunch
public class Generics_Test extends BaseTransformationTest4 {
  @Test
  public void test_no_errors_in_generics() throws Throwable {
    this.initTest("${mps_home}/MPS.mpr", "r:f97a2ccc-2c11-40bc-a45f-f69a36e6ad63(jetbrains.mps.baseLanguage.test.types)");
    this.runTest("jetbrains.mps.baseLanguage.test.types.Generics_Test$TestBody", "test_no_errors_in_generics", true);
  }

  @Test
  public void test_expected_errors_in_generics() throws Throwable {
    this.initTest("${mps_home}/MPS.mpr", "r:f97a2ccc-2c11-40bc-a45f-f69a36e6ad63(jetbrains.mps.baseLanguage.test.types)");
    this.runTest("jetbrains.mps.baseLanguage.test.types.Generics_Test$TestBody", "test_expected_errors_in_generics", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_no_errors_in_generics() throws Exception {
      this.addNodeById("580901458078250387");
      this.addNodeById("778192503039454095");
      this.addNodeById("7192154694571020337");
      this.addNodeById("778192503039851717");
      this.addNodeById("6902868426313875442");
      SubtreeChecker.checkNodeForErrors(SNodeOperations.cast(this.getNodeById("580901458078250394"), "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
      SubtreeChecker.checkNodeForErrors(SNodeOperations.cast(this.getNodeById("778192503039454102"), "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
      SubtreeChecker.checkNodeForErrors(SNodeOperations.cast(this.getNodeById("7192154694571020350"), "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
      // TODO: MPS-15011 must not have a warning either 
      SubtreeChecker.checkNodeForErrors(SNodeOperations.cast(this.getNodeById("6902868426313875614"), "jetbrains.mps.baseLanguage.structure.PublicVisibility"));

    }

    public void test_expected_errors_in_generics() throws Exception {
      this.addNodeById("580901458078250387");
      this.addNodeById("778192503039454095");
      this.addNodeById("7192154694571020337");
      this.addNodeById("778192503039851717");
      this.addNodeById("6902868426313875442");
      // TODO: MPS-15014 must have a type error 
      // TODO: MPS-15025 must have a type error 
      SubtreeChecker.checkNodeForErrors(SNodeOperations.cast(this.getNodeById("6902868426313875614"), "jetbrains.mps.baseLanguage.structure.PublicVisibility"));
    }
  }
}
