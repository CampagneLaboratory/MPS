package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.SNode;
import java.util.Map;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedHashMap;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.search.SModelSearchUtil;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class ConvertAnonymousRefactoring {
  private static final Set<String> ROLES_NOT_TO_COPY = SetSequence.fromSetAndArray(new HashSet<String>(), "visibility");
  private SNode myClassToRefactor;
  private String myNameForInnerClass;
  private Map<SNode, SNode> myInnerFields;
  private Map<SNode, SNode> myInnerTypeVariables;
  private Map<SNode, SNode> myInnerConstructorParameters;
  private List<SNode> mySuperConstructorParameters;

  public ConvertAnonymousRefactoring(SNode anonymousClass, String name) {
    this.myClassToRefactor = anonymousClass;
    this.myNameForInnerClass = name;
  }

  public void doRefactor() {
    collectInformation();
    SNode creator = SNodeOperations.as(SNodeOperations.getParent(myClassToRefactor), "jetbrains.mps.baseLanguage.structure.AnonymousClassCreator");
    if ((creator != null)) {
      SNodeOperations.replaceWithAnother(creator, makeInnerConstructorInvocation(Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>) ((Class) Object.class), makeInnerClass(), "jetbrains.mps.baseLanguage.structure.ClassConcept", "call_constructors_5292274854859503373", new Object[]{})).first()));
    }
  }

  private void collectInformation() {
    this.collectFields();
    this.createParameterDeclarationsForFields();
    this.collectTypeVariables();
    this.collectSuperConstructorParameters();
  }

  private void createParameterDeclarationsForFields() {
    this.myInnerConstructorParameters = MapSequence.fromMap(new LinkedHashMap<SNode, SNode>(16, (float) 0.75, false));
    for (SNode varDeclaration : SetSequence.fromSet(MapSequence.fromMap(this.myInnerFields).keySet())) {
      MapSequence.fromMap(this.myInnerConstructorParameters).put(MapSequence.fromMap(this.myInnerFields).get(varDeclaration), _quotation_createNode_qy1soj_a0a0b0k(SLinkOperations.getTarget(varDeclaration, "type", true), SPropertyOperations.getString(varDeclaration, "name")));
    }
  }

  private void collectFields() {
    this.myInnerFields = MapSequence.fromMap(new LinkedHashMap<SNode, SNode>(16, (float) 0.75, false));
    for (SNode varReference : Sequence.fromIterable(this.getExternalReferences(this.myClassToRefactor))) {
      SNode varDeclaration = SLinkOperations.getTarget(varReference, "variableDeclaration", false);
      if (!(MapSequence.fromMap(this.myInnerFields).containsKey(varDeclaration))) {
        MapSequence.fromMap(this.myInnerFields).put(varDeclaration, _quotation_createNode_qy1soj_a0a0b0b0l(SNodeOperations.copyNode(SLinkOperations.getTarget(varDeclaration, "type", true)), "my" + NameUtil.capitalize(SPropertyOperations.getString(varDeclaration, "name"))));
      }
    }
  }

  private void collectTypeVariables() {
    Set<SNode> usedTypeVariables = SetSequence.fromSet(new HashSet<SNode>());
    for (SNode node : Sequence.fromIterable(MapSequence.fromMap(myInnerFields).values()).concat(Sequence.fromIterable(Sequence.<SNode>singleton(myClassToRefactor)))) {
      SetSequence.fromSet(usedTypeVariables).addSequence(ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.baseLanguage.structure.TypeVariableReference", false, new String[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return (SLinkOperations.getTarget(it, "typeVariableDeclaration", false) != null);
        }
      }).select(new ISelector<SNode, SNode>() {
        public SNode select(SNode it) {
          return SLinkOperations.getTarget(it, "typeVariableDeclaration", false);
        }
      }));
    }

    myInnerTypeVariables = MapSequence.fromMap(new LinkedHashMap<SNode, SNode>(16, (float) 0.75, false));
    for (SNode decl : ListSequence.fromList(SNodeOperations.getAncestors(myClassToRefactor, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", false)).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SLinkOperations.getTargets(it, "typeVariableDeclaration", true);
      }
    })) {
      if (SetSequence.fromSet(usedTypeVariables).contains(decl)) {
        MapSequence.fromMap(myInnerTypeVariables).put(decl, SNodeOperations.copyNode(decl));
      }
    }
  }

  private void collectSuperConstructorParameters() {
    this.mySuperConstructorParameters = new ArrayList<SNode>();
    for (SNode param : ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(this.myClassToRefactor, "baseMethodDeclaration", false), "parameter", true))) {
      ListSequence.fromList(this.mySuperConstructorParameters).addElement(SNodeOperations.copyNode(param));
    }
  }

  private SNode makeInnerClass() {
    SNode innerClass = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassConcept", null);
    ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getAncestor(this.myClassToRefactor, "jetbrains.mps.baseLanguage.structure.Classifier", false, false), "member", true)).addElement(innerClass);
    SPropertyOperations.set(innerClass, "name", this.myNameForInnerClass);
    SLinkOperations.setTarget(innerClass, "visibility", SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.PrivateVisibility", null), true);
    this.chooseNonStaticForInnerClass(innerClass);
    this.copyChildren(this.myClassToRefactor, innerClass);
    this.addSuperToInnerClass(innerClass);
    this.makeInnerConstructor(innerClass);
    this.addFieldsToInnerClass(innerClass);
    this.addTypeVariablesToInnerClass(innerClass);
    return innerClass;
  }

  private void makeInnerConstructor(SNode innerClass) {
    if (Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>) ((Class) Object.class), innerClass, "jetbrains.mps.baseLanguage.structure.ClassConcept", "call_constructors_5292274854859503373", new Object[]{})).isEmpty()) {
      SNode ctor = SModelOperations.createNewNode(SNodeOperations.getModel(innerClass), null, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration");
      MemberInsertingUtils.insertClassifierMemberInBestPlace(innerClass, ctor);
      SLinkOperations.setNewChild(ctor, "body", "jetbrains.mps.baseLanguage.structure.StatementList");
      SLinkOperations.setNewChild(ctor, "visibility", "jetbrains.mps.baseLanguage.structure.PublicVisibility");
      SLinkOperations.setNewChild(ctor, "returnType", "jetbrains.mps.baseLanguage.structure.VoidType");
    }
    SNode innerConstructor = Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>) ((Class) Object.class), innerClass, "jetbrains.mps.baseLanguage.structure.ClassConcept", "call_constructors_5292274854859503373", new Object[]{})).first();
    this.addParametersToConstructor(innerConstructor);
    this.makeConstructorBody(innerConstructor);
  }

  private void makeConstructorBody(SNode constructorDeclaration) {
    if (ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(this.myClassToRefactor, "baseMethodDeclaration", false), "parameter", true)).isNotEmpty()) {
      List<SNode> parameterReferences = ListSequence.fromList(this.mySuperConstructorParameters).select(new ISelector<SNode, SNode>() {
        public SNode select(SNode it) {
          return BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), it, "virtual_createReference_1213877517482", new Object[]{});
        }
      }).toListSequence();
      SNode invocation = _quotation_createNode_qy1soj_a0b0a0q(parameterReferences);
      SLinkOperations.setTarget(invocation, "baseMethodDeclaration", SLinkOperations.getTarget(this.myClassToRefactor, "baseMethodDeclaration", false), false);
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(constructorDeclaration, "body", true), "statement", true)).insertElement(0, invocation);
    }
    for (SNode fieldDeclaration : SetSequence.fromSet(MapSequence.fromMap(this.myInnerConstructorParameters).keySet())) {
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(constructorDeclaration, "body", true), "statement", true)).addElement(_quotation_createNode_qy1soj_a0a0a1a61(SNodeOperations.getParent(constructorDeclaration), fieldDeclaration, BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), MapSequence.fromMap(this.myInnerConstructorParameters).get(fieldDeclaration), "virtual_createReference_1213877517482", new Object[]{})));
    }
  }

  private void addParametersToConstructor(SNode constructorDeclaration) {
    ListSequence.fromList(SLinkOperations.getTargets(constructorDeclaration, "parameter", true)).addSequence(ListSequence.fromList(this.mySuperConstructorParameters));
    ListSequence.fromList(SLinkOperations.getTargets(constructorDeclaration, "parameter", true)).addSequence(Sequence.fromIterable(MapSequence.fromMap(this.myInnerConstructorParameters).values()));
  }

  private void copyChildren(SNode from, SNode to) {
    List<SNode> ld = SModelSearchUtil.getLinkDeclarations(SNodeOperations.getConceptDeclaration(to));
    for (String role : ListSequence.fromList(ld).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.lang.structure.structure.LinkDeclaration"), "role");
      }
    })) {
      if (SetSequence.fromSet(ROLES_NOT_TO_COPY).contains(role)) {
        continue;
      }
      for (SNode child : ListSequence.fromList(from.getChildren(role))) {
        to.addChild(role, SNodeOperations.detachNode(((SNode) child)));
      }
    }
  }

  private void chooseNonStaticForInnerClass(SNode innerClass) {
    SPropertyOperations.set(innerClass, "nonStatic", "" + (!(isStatic())));
  }

  private void addFieldsToInnerClass(SNode innerClass) {
    for (SNode field : Sequence.fromIterable(MapSequence.fromMap(this.myInnerFields).values())) {
      MemberInsertingUtils.insertClassifierMemberInBestPlace(innerClass, field);
    }
    for (SNode varReference : Sequence.fromIterable(this.getExternalReferences(innerClass))) {
      SNodeOperations.replaceWithAnother(varReference, _quotation_createNode_qy1soj_a0a0a1a02(innerClass, MapSequence.fromMap(this.myInnerFields).get(SLinkOperations.getTarget(varReference, "variableDeclaration", false))));
    }
  }

  private void addTypeVariablesToInnerClass(SNode innerClass) {
    ListSequence.fromList(SLinkOperations.getTargets(innerClass, "typeVariableDeclaration", true)).addSequence(MapSequence.fromMap(myInnerTypeVariables).select(new ISelector<IMapping<SNode, SNode>, SNode>() {
      public SNode select(IMapping<SNode, SNode> it) {
        return it.value();
      }
    }));
    for (SNode typeReference : ListSequence.fromList(SNodeOperations.getDescendants(innerClass, "jetbrains.mps.baseLanguage.structure.TypeVariableReference", false, new String[]{}))) {
      if (MapSequence.fromMap(myInnerTypeVariables).containsKey(SLinkOperations.getTarget(typeReference, "typeVariableDeclaration", false))) {
        SLinkOperations.setTarget(typeReference, "typeVariableDeclaration", MapSequence.fromMap(myInnerTypeVariables).get(SLinkOperations.getTarget(typeReference, "typeVariableDeclaration", false)), false);
      }
    }
  }

  private void addSuperToInnerClass(SNode innerClass) {
    SNode superInnerClass = _quotation_createNode_qy1soj_a0a0w(SLinkOperations.getTarget(this.myClassToRefactor, "classifier", false));
    ListSequence.fromList(SLinkOperations.getTargets(superInnerClass, "parameter", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(this.myClassToRefactor, "typeParameter", true)));
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(this.myClassToRefactor, "classifier", false), "jetbrains.mps.baseLanguage.structure.Interface")) {
      ListSequence.fromList(SLinkOperations.getTargets(innerClass, "implementedInterface", true)).addElement(superInnerClass);
    } else {
      SLinkOperations.setTarget(innerClass, "superclass", superInnerClass, true);
    }
  }

  private SNode makeInnerConstructorInvocation(SNode constructor) {
    SNode constructorInvocation = _quotation_createNode_qy1soj_a0a0x(constructor, SLinkOperations.getTargets(this.myClassToRefactor, "actualArgument", true));
    ListSequence.fromList(SLinkOperations.getTargets(constructorInvocation, "actualArgument", true)).addSequence(SetSequence.fromSet(MapSequence.fromMap(this.myInnerFields).keySet()).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), it, "virtual_createReference_1213877517482", new Object[]{});
      }
    }));
    for (SNode typeVaryable : MapSequence.fromMap(this.myInnerTypeVariables).select(new ISelector<IMapping<SNode, SNode>, SNode>() {
      public SNode select(IMapping<SNode, SNode> it) {
        return it.key();
      }
    })) {
      ListSequence.fromList(SLinkOperations.getTargets(constructorInvocation, "typeParameter", true)).addElement(_quotation_createNode_qy1soj_a0a0a2a32(typeVaryable));
    }
    return constructorInvocation;
  }

  private Iterable<SNode> getExternalReferences(final SNode node) {
    Iterable<SNode> result = ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.baseLanguage.structure.VariableReference", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.VariableReference"), "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.ParameterDeclaration");
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(ListSequence.fromList(SNodeOperations.getAncestors(SLinkOperations.getTarget(it, "variableDeclaration", false), null, false)).contains(node));
      }
    });
    result = Sequence.fromIterable(result).concat(ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.baseLanguage.structure.VariableReference", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.VariableReference"), "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration");
      }
    }).toListSequence().where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(ListSequence.fromList(SNodeOperations.getAncestors(SLinkOperations.getTarget(it, "variableDeclaration", false), null, false)).contains(node));
      }
    }));
    return result;
  }

  private boolean isStatic() {
    return check_qy1soj_a0a52(SNodeOperations.getAncestor(myClassToRefactor, "jetbrains.mps.baseLanguage.structure.ClassifierMember", false, false));
  }

  private static SNode _quotation_createNode_qy1soj_a0a0b0k(Object parameter_1, Object parameter_2) {
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.setProperty("name", (String) parameter_2);
    quotedNode_4 = (SNode) parameter_1;
    if (quotedNode_4 != null) {
      quotedNode_3.addChild("type", HUtil.copyIfNecessary(quotedNode_4));
    }
    return quotedNode_3;
  }

  private static SNode _quotation_createNode_qy1soj_a0a0b0b0l(Object parameter_1, Object parameter_2) {
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldDeclaration", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.setProperty("isFinal", "true");
    quotedNode_3.setProperty("name", (String) parameter_2);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.PrivateVisibility", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.addChild("visibility", quotedNode_4);
    quotedNode_5 = (SNode) parameter_1;
    if (quotedNode_5 != null) {
      quotedNode_3.addChild("type", HUtil.copyIfNecessary(quotedNode_5));
    }
    return quotedNode_3;
  }

  private static SNode _quotation_createNode_qy1soj_a0b0a0q(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation", null, null, GlobalScope.getInstance(), false);
    {
      List<SNode> nodes = (List<SNode>) parameter_1;
      for (SNode child : nodes) {
        quotedNode_2.addChild("actualArgument", HUtil.copyIfNecessary(child));
      }
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_qy1soj_a0a0a1a61(Object parameter_1, Object parameter_2, Object parameter_3) {
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_8.setReferenceTarget("classConcept", (SNode) parameter_1);
    quotedNode_6.addChild("operand", quotedNode_8);
    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_9.setReferenceTarget("fieldDeclaration", (SNode) parameter_2);
    quotedNode_6.addChild("operation", quotedNode_9);
    quotedNode_5.addChild("lValue", quotedNode_6);
    quotedNode_7 = (SNode) parameter_3;
    if (quotedNode_7 != null) {
      quotedNode_5.addChild("rValue", HUtil.copyIfNecessary(quotedNode_7));
    }
    quotedNode_4.addChild("expression", quotedNode_5);
    return quotedNode_4;
  }

  private static SNode _quotation_createNode_qy1soj_a0a0a1a02(Object parameter_1, Object parameter_2) {
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_4.setReferenceTarget("classConcept", (SNode) parameter_1);
    quotedNode_3.addChild("operand", quotedNode_4);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldReferenceOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_5.setReferenceTarget("fieldDeclaration", (SNode) parameter_2);
    quotedNode_3.addChild("operation", quotedNode_5);
    return quotedNode_3;
  }

  private static SNode _quotation_createNode_qy1soj_a0a0w(Object parameter_1) {
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_2.setReferenceTarget("classifier", (SNode) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_qy1soj_a0a0x(Object parameter_1, Object parameter_2) {
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassCreator", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.setReferenceTarget("baseMethodDeclaration", (SNode) parameter_1);
    {
      List<SNode> nodes = (List<SNode>) parameter_2;
      for (SNode child : nodes) {
        quotedNode_3.addChild("actualArgument", HUtil.copyIfNecessary(child));
      }
    }
    return quotedNode_3;
  }

  private static SNode _quotation_createNode_qy1soj_a0a0a2a32(Object parameter_1) {
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.TypeVariableReference", null, null, GlobalScope.getInstance(), false);
    quotedNode_2.setReferenceTarget("typeVariableDeclaration", (SNode) parameter_1);
    return quotedNode_2;
  }

  private static boolean check_qy1soj_a0a52(SNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return BehaviorReflection.invokeVirtual(Boolean.TYPE, checkedDotOperand, "virtual_isStatic_8986964027630462944", new Object[]{});
    }
    return false;
  }
}
