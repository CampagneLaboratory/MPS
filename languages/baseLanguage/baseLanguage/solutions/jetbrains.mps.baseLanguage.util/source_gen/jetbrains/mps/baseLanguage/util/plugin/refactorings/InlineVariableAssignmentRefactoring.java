package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import jetbrains.mps.lang.dataFlow.framework.Program;
import java.util.Set;
import jetbrains.mps.lang.dataFlow.framework.instructions.ReadInstruction;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.dataFlow.DataFlowManager;
import jetbrains.mps.lang.dataFlow.framework.AnalysisResult;
import jetbrains.mps.lang.dataFlow.framework.analyzers.ReachingReadsAnalyzer;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.dataFlow.framework.instructions.Instruction;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class InlineVariableAssignmentRefactoring extends InlineVariableRefactoring {
  private Program myProgram;
  private Set<ReadInstruction> myReadInstructions;
  private SNode myVariable;
  public InlineVariableAssignmentRefactoring(SNode node) {
    this.myVariable = node;
    SNode body = findStatementList(node);
    this.myProgram = DataFlowManager.getInstance().buildProgramFor(body);
    AnalysisResult<Set<ReadInstruction>> reachingReads = this.myProgram.analyze(new ReachingReadsAnalyzer());
    this.myReadInstructions = SetSequence.fromSet(new HashSet<ReadInstruction>());
    for (Instruction instruction : ListSequence.fromList(this.myProgram.getInstructionsFor(node))) {
      for (Instruction next : SetSequence.fromSet(instruction.succ())) {
        for (ReadInstruction read : reachingReads.get(next)) {
          if (read.getVariable() == node) {
            SetSequence.fromSet(this.myReadInstructions).addElement(read);
          }
        }
      }
    }
  }
  @Override
  public SNode doRefactoring() {
    SNode newSelection = null;
    for (SNode sourceNode : this.getNodesToRefactor()) {
      // <node> 
      for (SNode reference : ListSequence.fromList(SNodeOperations.getNodeDescendants(sourceNode, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068498886296l, "jetbrains.mps.baseLanguage.structure.VariableReference"), true, new SAbstractConcept[]{}))) {
        if (SLinkOperations.getTarget(reference, MetaAdapterFactory.getReferenceLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068498886296l, 1068581517664l, "variableDeclaration")) == myVariable) {
          SNodeOperations.replaceWithAnother(reference, SNodeOperations.copyNode(SLinkOperations.getTarget(myVariable, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068431474542l, 1068431790190l, "initializer"))));
        }
      }
    }
    this.optimizeDeclaration(this.myVariable);
    return newSelection;
  }
  public List<SNode> getNodesToRefactor() {
    List<SNode> result = new ArrayList<SNode>();
    for (ReadInstruction read : SetSequence.fromSet(this.myReadInstructions)) {
      SNode node = (SNode) read.getSource();
      if (!((SNodeOperations.hasRole(node, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1239714755177l, 1239714902950l, "expression")) && !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 8064396509828172209l, "jetbrains.mps.baseLanguage.structure.UnaryMinus"))))) && !(SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 4957392803029437192l, "jetbrains.mps.baseLanguage.structure.OperationAssignmentExpression")))) {
        ListSequence.fromList(result).addElement((node));
      }
    }
    return result;
  }
  public static SNode findStatementList(SNode node) {
    SNode body = SNodeOperations.getNodeAncestor(node, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123136l, "jetbrains.mps.baseLanguage.structure.StatementList"), false, false);
    if (SNodeOperations.getNodeAncestor(body, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123136l, "jetbrains.mps.baseLanguage.structure.StatementList"), false, false) == null) {
      return body;
    }
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(body), MetaAdapterFactory.getInterfaceConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1199653749349l, "jetbrains.mps.baseLanguage.structure.IStatementListContainer")) && !(BehaviorReflection.invokeVirtual(Boolean.TYPE, SNodeOperations.cast(SNodeOperations.getParent(body), MetaAdapterFactory.getInterfaceConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1199653749349l, "jetbrains.mps.baseLanguage.structure.IStatementListContainer")), "virtual_isExecuteSynchronous_1230212745736", new Object[]{}))) {
      return body;
    }
    return findStatementList(body);
  }
}
