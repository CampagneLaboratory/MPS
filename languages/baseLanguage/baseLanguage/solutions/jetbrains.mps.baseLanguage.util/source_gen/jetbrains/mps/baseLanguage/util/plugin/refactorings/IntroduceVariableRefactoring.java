package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.List;
import java.util.ArrayList;
import javax.swing.JComponent;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;

public abstract class IntroduceVariableRefactoring {
  private String myName;
  private SNode myExpression;
  private SNode myExpressionType;
  private List<String> myExpectedNames;
  protected SNode myContainer;
  protected boolean myIsReplacingAll;
  protected boolean myIsFinal = false;
  protected VisibilityLevel myVisibilityLevel;
  protected List<SNode> myDuplicates = new ArrayList<SNode>();

  public IntroduceVariableRefactoring() {
  }

  public String init(SNode node, JComponent editorComponent) {
    this.myExpression = node;
    this.myContainer = findContainer(node);
    findDuplicates();
    SNode expressionType = this.getExpressionType(node);
    if (!(SNodeOperations.isInstanceOf(expressionType, "jetbrains.mps.baseLanguage.structure.Type"))) {
      return "Couldn't compute type of expression: " + expressionType;
    } else
    if (this.isVoidType(expressionType)) {
      return "Expression has no type";
    } else {
      this.myExpressionType = SNodeOperations.cast(expressionType, "jetbrains.mps.baseLanguage.structure.Type");
      List<String> expectedNames = ListSequence.fromList(new ArrayList<String>());
      String expectedVariableName = null;
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.Expression")) {
        expectedVariableName = BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.Expression"), "virtual_getVariableExpectedName_1213877519781", new Object[]{});
      }
      if (expectedVariableName != null) {
        ListSequence.fromList(expectedNames).addElement(NameUtil.decapitalize(expectedVariableName));
      }
      List<String> variableSuffixes = BehaviorReflection.invokeVirtual((Class<List<String>>) ((Class) Object.class), myExpressionType, "virtual_getVariableSuffixes_1213877337304", new Object[]{});
      if (variableSuffixes != null) {
        ListSequence.fromList(expectedNames).addSequence(ListSequence.fromList(variableSuffixes));
      }
      this.myExpectedNames = ListSequence.fromList(expectedNames).where(new IWhereFilter<String>() {
        public boolean accept(String it) {
          return it.matches("[a-zA-Z0-9_]*");
        }
      }).toListSequence();
      if (ListSequence.fromList(this.myExpectedNames).isEmpty()) {
        ListSequence.fromList(this.myExpectedNames).addElement("");
      }
      return null;
    }
  }

  private SNode getExpressionType(SNode node) {
    SNode expressionType = TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(node), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.Type"), true);
    if (SNodeOperations.isInstanceOf(expressionType, "jetbrains.mps.baseLanguage.structure.IInternalType")) {
      expressionType = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(expressionType, "jetbrains.mps.baseLanguage.structure.IInternalType"), "virtual_getPublicType_1213877443338", new Object[]{});
    }
    if (SNodeOperations.isInstanceOf(expressionType, "jetbrains.mps.baseLanguage.structure.ClassifierType")) {
      SNode exprClassifier = SLinkOperations.getTarget(SNodeOperations.cast(expressionType, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", false);
      if (SNodeOperations.isInstanceOf(exprClassifier, "jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
        List<SNode> params = SLinkOperations.getTargets(SNodeOperations.cast(expressionType, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "parameter", true);
        expressionType = _quotation_createNode_x65dk2_a0b0b0c0b(SLinkOperations.getTarget(SNodeOperations.cast(exprClassifier, "jetbrains.mps.baseLanguage.structure.AnonymousClass"), "classifier", false));
        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(expressionType, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "parameter", true)).addSequence(ListSequence.fromList(params));
      }
    }
    if (SNodeOperations.isInstanceOf(expressionType, "jetbrains.mps.baseLanguage.structure.WildCardType")) {
      expressionType = _quotation_createNode_x65dk2_a0a0d0b();
    }
    if (SNodeOperations.isInstanceOf(expressionType, "jetbrains.mps.baseLanguage.structure.UpperBoundType")) {
      expressionType = SLinkOperations.getTarget(SNodeOperations.cast(expressionType, "jetbrains.mps.baseLanguage.structure.UpperBoundType"), "bound", true);
    }
    if (SNodeOperations.isInstanceOf(expressionType, "jetbrains.mps.baseLanguage.structure.LowerBoundType")) {
      expressionType = SLinkOperations.getTarget(SNodeOperations.cast(expressionType, "jetbrains.mps.baseLanguage.structure.LowerBoundType"), "bound", true);
    }
    return expressionType;
  }

  public void setName(String name) {
    this.myName = name;
  }

  public void setVisibilityLevel(VisibilityLevel level) {
    this.myVisibilityLevel = level;
  }

  public void setReplacingAll(boolean b) {
    this.myIsReplacingAll = b;
  }

  public void setIsFinal(boolean b) {
    myIsFinal = b;
  }

  public boolean hasDuplicates() {
    return ListSequence.fromList(myDuplicates).isNotEmpty();
  }

  public String getName() {
    return this.myName;
  }

  public SNode getExpression() {
    return this.myExpression;
  }

  public SNode getExpressionType() {
    return this.myExpressionType;
  }

  public List<String> getExpectedNames() {
    return this.myExpectedNames;
  }

  public SNode getContainer() {
    return this.myContainer;
  }

  public abstract void replaceNode(SNode node, SNode declaration);

  public List<SNode> getDuplicates() {
    return this.myDuplicates;
  }

  protected void findDuplicates() {
    this.myDuplicates = new SimpleDuplicatesFinder(this.getExpression()).findDuplicates(this.getRootToFindDuplicates(this.getExpression()));
    this.myDuplicates = ListSequence.fromList(this.myDuplicates).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(it), "jetbrains.mps.baseLanguage.structure.ExpressionStatement"));
      }
    }).toListSequence();
  }

  protected SNode findContainer(SNode node) {
    return SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
  }

  protected SNode getRootToFindDuplicates(SNode node) {
    return SNodeOperations.getContainingRoot(node);
  }

  public abstract SNode doRefactoring();

  protected boolean isVoidType(SNode expressionType) {
    return SNodeOperations.isInstanceOf(expressionType, "jetbrains.mps.baseLanguage.structure.VoidType");
  }

  private static SNode _quotation_createNode_x65dk2_a0b0b0c0b(Object parameter_1) {
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_2.setReferenceTarget("classifier", (SNode) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_x65dk2_a0a0d0b() {
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, SModelReference.fromString("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), SNodeId.fromString("~Object")));
    return quotedNode_1;
  }
}
