package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class AbstractExtractMethodRefactoringProcessor implements IExtractMethodRefactoringProcessor {
  protected SNode myNode;
  protected List<SNode> myNodesToRefactor;
  protected boolean isStatic;

  public AbstractExtractMethodRefactoringProcessor(SNode node, List<SNode> nodesToRefactor) {
    this.myNode = node;
    this.myNodesToRefactor = nodesToRefactor;
  }

  @Override
  public void addMethod(SNode method) {
    universalAddMethod(this.myNode, method);
  }

  @Override
  public SNode createNewMethod() {
    return SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", null);
  }

  @Override
  public SNode createMethodCall(SNode methodDeclaration, List<SNode> parameteres) {
    return null;
  }

  @Override
  public SNode getContainerMethod() {
    SNode node = ListSequence.fromList(this.myNodesToRefactor).first();
    while (node != null) {
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
        return node;
      }
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ConceptFunction")) {
        return node;
      }
      node = SNodeOperations.getParent(node);
    }
    throw new IllegalStateException("can't be applied in this case");
  }

  @Override
  public SNode getContainerReturnType() {
    SNode containerMethod = this.getContainerMethod();
    if (SNodeOperations.isInstanceOf(containerMethod, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
      return SNodeOperations.copyNode(SLinkOperations.getTarget(SNodeOperations.cast(containerMethod, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), "returnType", true));
    }
    if (SNodeOperations.isInstanceOf(containerMethod, "jetbrains.mps.baseLanguage.structure.ConceptFunction")) {
      return TypeChecker.getInstance().getRuntimeSupport().coerce_(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(containerMethod, "jetbrains.mps.baseLanguage.structure.ConceptFunction"), "virtual_getExpectedReturnType_1213877374441", new Object[]{}), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.Type"), true);
    }
    return null;
  }

  public void setStatic(boolean isStatic) {
    this.isStatic = isStatic;
  }

  public static void universalAddMethod(SNode container, SNode method) {
    MoveRefactoringUtils.addNodeAtLink(container, method);
  }
}
