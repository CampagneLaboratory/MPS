package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class MemberInsertingUtils {
  private static List<String> MEMBERS_ORDER = ListSequence.fromListAndArray(new ArrayList<String>(), "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration", "jetbrains.mps.baseLanguage.structure.FieldDeclaration", "jetbrains.mps.baseLanguage.structure.StaticInitializer", "jetbrains.mps.baseLanguage.structure.InstanceInitializer", "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration", "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");

  private MemberInsertingUtils() {
  }

  public static void insertClassifierMemberInBestPlace(SNode container, SNode memberToInsert) {
    int memberRank = getMemberRank(memberToInsert);
    int indexToInsert = 0;
    for (SNode member : ListSequence.fromList(SLinkOperations.getTargets(container, "member", true))) {
      if (getMemberRank(member) > memberRank) {
        break;
      }
      indexToInsert++;
    }
    ListSequence.fromList(SLinkOperations.getTargets(container, "member", true)).insertElement(indexToInsert, memberToInsert);
  }

  private static int getMemberRank(SNode member) {
    int memberRank = ListSequence.fromList(MEMBERS_ORDER).indexOf(member.getConcept().getQualifiedName());
    return (memberRank != -1 ?
      memberRank :
      ListSequence.fromList(MEMBERS_ORDER).count()
    );
  }
}
