package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IOperationContext;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class MethodRefactoringUtils {
  public MethodRefactoringUtils() {
  }
  public static List<SNode> findOverridingMethods(final SNode method, IOperationContext operationContext, ProgressMonitor monitor) {
    List<SNode> results = MethodRefactoringUtils.findOverridingMethods(method, monitor);
    return results;
  }
  public static List<SNode> findOverridingMethods(SNode method, ProgressMonitor progressMonitor) {
    List<SNode> results = new ArrayList<SNode>();
    if (SNodeOperations.isInstanceOf(method, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
      if (SPropertyOperations.getBoolean(method, "isFinal") || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(method, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"), "visibility", true), "jetbrains.mps.baseLanguage.structure.PrivateVisibility")) {
        return results;
      }
      SearchResults<SNode> searchResults;
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(method), "jetbrains.mps.baseLanguage.structure.Interface")) {
        searchResults = FindUtils.getSearchResults(progressMonitor, method, GlobalScope.getInstance(), "jetbrains.mps.baseLanguage.findUsages.InterfaceMethodImplementations_Finder");
      } else {
        searchResults = FindUtils.getSearchResults(progressMonitor, method, GlobalScope.getInstance(), "jetbrains.mps.baseLanguage.findUsages.OverridingMethods_Finder");
      }

      for (SearchResult<SNode> result : ListSequence.fromList(searchResults.getSearchResults())) {
        ListSequence.fromList(results).addElement(SNodeOperations.cast(result.getObject(), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
      }
    }
    if (SNodeOperations.isInstanceOf(method, "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration")) {
      SearchResults<SNode> searchResults = FindUtils.getSearchResults(progressMonitor, method, GlobalScope.getInstance(), "jetbrains.mps.lang.behavior.findUsages.OverridingMethods_Finder");
      for (SearchResult<SNode> result : ListSequence.fromList(searchResults.getSearchResults())) {
        ListSequence.fromList(results).addElement(SNodeOperations.cast(result.getObject(), "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
      }
    }
    return results;
  }
  public static SearchResults findMethodUsages(SNode method, ProgressMonitor progressMonitor) {
    return FindUtils.getSearchResults(progressMonitor, method, GlobalScope.getInstance(), "jetbrains.mps.baseLanguage.findUsages.ExactMethodUsages_Finder");
  }
}
