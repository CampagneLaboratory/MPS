package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.List;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class IntroduceLocalVariableRefactoring extends IntroduceVariableRefactoring {
  public IntroduceLocalVariableRefactoring() {
  }
  @Override
  public SNode doRefactoring() {
    this.findDuplicates();
    SNode var = _quotation_createNode_nngwe4_a0b0b(this.getName(), this.getExpressionType(), this.getExpression());
    if (myIsFinal) {
      SPropertyOperations.set(SLinkOperations.getTarget(var, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068581242864l, 1068581242865l, "localVariableDeclaration")), MetaAdapterFactory.getProperty(new UUID(-935030926396207931l, -6610165693999523818l), 1068431474542l, 1176718929932l, "isFinal"), "" + (true));
    }
    SNode varDeclaration = SLinkOperations.getTarget(var, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068581242864l, 1068581242865l, "localVariableDeclaration"));
    // <node> 
    SNode parentStatement = SNodeOperations.getAncestor(this.getExpression(), "jetbrains.mps.baseLanguage.structure.Statement", false, false);
    while (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(parentStatement), "jetbrains.mps.baseLanguage.structure.StatementList"))) {
      parentStatement = SNodeOperations.getAncestor(parentStatement, "jetbrains.mps.baseLanguage.structure.Statement", false, false);
    }
    SNodeOperations.insertPrevSiblingChild(parentStatement, var);
    replaceNode(getExpression(), varDeclaration);
    // <node> 

    if (myIsReplacingAll) {
      for (SNode duplicate : ListSequence.fromList(myDuplicates)) {
        replaceNode(duplicate, varDeclaration);
      }
    }
    return varDeclaration;
  }
  @Override
  protected SNode getRootToFindDuplicates(SNode node) {
    SNode result = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.StatementList", false, false);
    while ((SNodeOperations.getAncestor(result, "jetbrains.mps.baseLanguage.structure.StatementList", false, false) != null)) {
      result = SNodeOperations.getAncestor(result, "jetbrains.mps.baseLanguage.structure.StatementList", false, false);
    }
    return result;
  }
  @Override
  public void replaceNode(SNode node, SNode declaration) {
    SNode reference = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), declaration, "virtual_createReference_1213877517482", new Object[]{});
    SNodeOperations.replaceWithAnother(node, reference);
    this.moveDeclarationIfNeed(reference, SNodeOperations.getParent(declaration));
  }
  private void moveDeclarationIfNeed(SNode node, SNode declaration) {
    List<SNode> declAncestors = SNodeOperations.getAncestors(declaration, null, false);
    ListSequence.fromList(declAncestors).addElement(declaration);
    SNode commonList = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.StatementList", false, false);
    while ((commonList != null) && !(ListSequence.fromList(declAncestors).contains(commonList))) {
      commonList = SNodeOperations.getAncestor(commonList, "jetbrains.mps.baseLanguage.structure.StatementList", false, false);
    }
    if ((commonList != null)) {
      SNode firstAncestor = null;
      for (SNode statement : ListSequence.fromList(SLinkOperations.getChildren(commonList, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123136l, 1068581517665l, "statement")))) {
        List<SNode> nodeAncestors = SNodeOperations.getAncestors(node, null, false);
        if (ListSequence.fromList(declAncestors).contains(statement) || ListSequence.fromList(nodeAncestors).contains(statement)) {
          firstAncestor = statement;
          break;
        }
      }
      if (firstAncestor != declaration) {
        SNodeOperations.insertPrevSiblingChild(firstAncestor, SNodeOperations.detachNode(declaration));
      }
    }
  }
  public static boolean isApplicable(SNode expr) {
    return SNodeOperations.isInstanceOf(expr, "jetbrains.mps.baseLanguage.structure.Expression") && SNodeOperations.getAncestor(expr, "jetbrains.mps.baseLanguage.structure.StatementList", false, false) != null;
  }
  private static SNode _quotation_createNode_nngwe4_a0b0b(Object parameter_1, Object parameter_2, Object parameter_3) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", null, null, false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_5, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name"), (String) parameter_1);
    quotedNode_6 = (SNode) parameter_2;
    if (quotedNode_6 != null) {
      quotedNode_5.addChild(MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 4972933694980447171l, 5680397130376446158l, "type"), HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_7 = (SNode) parameter_3;
    if (quotedNode_7 != null) {
      quotedNode_5.addChild(MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068431474542l, 1068431790190l, "initializer"), HUtil.copyIfNecessary(quotedNode_7));
    }
    quotedNode_4.addChild(MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068581242864l, 1068581242865l, "localVariableDeclaration"), quotedNode_5);
    return quotedNode_4;
  }
}
