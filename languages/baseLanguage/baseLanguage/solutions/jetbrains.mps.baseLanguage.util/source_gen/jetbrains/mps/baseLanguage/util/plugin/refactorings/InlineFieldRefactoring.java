package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;

public abstract class InlineFieldRefactoring {
  public InlineFieldRefactoring() {
  }

  public abstract SNode doRefactoring();



  public Iterable<SNode> findAllReferences(final SNode variable) {
    return ListSequence.fromList(SModelOperations.getNodes(SNodeOperations.getModel(variable), "jetbrains.mps.baseLanguage.structure.VariableReference")).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "variableDeclaration", false) == variable;
      }
    });
  }

  public Iterable<SNode> findAllReferenceOperations(final SNode variable) {
    return ListSequence.fromList(SModelOperations.getNodes(SNodeOperations.getModel(variable), "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation")).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "fieldDeclaration", false) == variable;
      }
    });
  }



  public void optimizeDeclaration(SNode variable) {
    if (Sequence.fromIterable(findAllReferences(variable)).isEmpty() && Sequence.fromIterable(findAllReferenceOperations(variable)).isEmpty()) {
      SNodeOperations.deleteNode(variable);
    }
  }



  public static InlineFieldRefactoring createRefactoring(SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.VariableDeclaration")) {
      return new InlineFieldAssignmentRefactoring(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.VariableDeclaration"));
    } else {
      return new InlineFieldReferenceRefactoring(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.VariableReference"));
    }
  }
}
