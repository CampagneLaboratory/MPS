package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class ExtractMethodFromStatementsRefactoring extends ExtractMethodRefactoring {
  protected List<SNode> myStatements = new ArrayList<SNode>();

  public ExtractMethodFromStatementsRefactoring(ExtractMethodRefactoringParameters params) {
    super(params);
    ListSequence.fromList(this.myStatements).addSequence(ListSequence.fromList(((List<SNode>) params.getNodesToRefactor())));
  }

  @Override
  protected SNode createMethodBody() {
    SNode body = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StatementList", null);
    this.modifyPartToExtract();
    ListSequence.fromList(SLinkOperations.getTargets(body, "statement", true)).addSequence(ListSequence.fromList((List<SNode>) CopyUtil.copy(this.myStatements)));
    return body;
  }

  @Override
  public void replaceMatch(final MethodMatch match, final SNode methodDeclaration) {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        SNode methodCall = ExtractMethodFromStatementsRefactoring.this.createMethodCall(match, methodDeclaration);
        SNode callStatement = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null);
        SLinkOperations.setTarget(callStatement, "expression", methodCall, true);
        List<SNode> statements = match.getNodes();
        SNodeOperations.insertPrevSiblingChild(ListSequence.fromList(statements).first(), callStatement);
        for (SNode statement : ListSequence.fromList(statements)) {
          SNodeOperations.deleteNode(statement);
        }
      }
    });
  }

  protected void modifyPartToExtract() {
  }

  @Override
  public SNode getMethodType() {
    return SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VoidType", null);
  }
}
