package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.List;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class IntroduceStaticFieldRefactoring extends AbstractIntroduceFieldRefactoring {
  @Override
  public SNode doRefactoring() {
    this.findDuplicates();
    SNode newDeclaration;
    SNode expressionType = SNodeOperations.copyNode(this.getExpressionType());
    String name = this.getName();
    SNode expression = SNodeOperations.copyNode(this.getExpression());

    if (myFieldInitialization == FieldInitializationPlace.FIELD) {
      newDeclaration = _quotation_createNode_282g55_a0a0g0a(myVisibilityLevel.getNode(), expressionType, name, expression);
    } else {
      newDeclaration = _quotation_createNode_282g55_a0a0a6a0(myVisibilityLevel.getNode(), expressionType, name);
    }
    if (myIsFinal) {
      SPropertyOperations.set(newDeclaration, "isFinal", "" + (true));
    }
    SNode classConcept = SNodeOperations.getAncestor(this.getExpression(), "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
    MemberInsertingUtils.insertClassifierMemberInBestPlace(classConcept, newDeclaration);
    SNode assignExp = _quotation_createNode_282g55_a0k0a(expression, newDeclaration);
    SNode assignmentStatement = _quotation_createNode_282g55_a0l0a(assignExp);

    if (this.myFieldInitialization == FieldInitializationPlace.METHOD) {
      SNodeOperations.insertPrevSiblingChild(SNodeOperations.getAncestor(this.getExpression(), "jetbrains.mps.baseLanguage.structure.Statement", false, false), SNodeOperations.copyNode(assignmentStatement));
    }
    if (this.myFieldInitialization == FieldInitializationPlace.STATICINIT) {
      SNode declaration = SNodeOperations.getAncestor(this.getExpression(), "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
      Iterable<SNode> staticInitializers = BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>) ((Class) Object.class), declaration, "jetbrains.mps.baseLanguage.structure.ClassConcept", "call_staticInitializers_3136320261464948039", new Object[]{});
      SNode initializer;
      if (Sequence.fromIterable(staticInitializers).isNotEmpty()) {
        initializer = Sequence.fromIterable(staticInitializers).first();
      } else {
        initializer = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticInitializer", null);
        SLinkOperations.setTarget(initializer, "statementList", SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StatementList", null), true);
        ListSequence.fromList(SLinkOperations.getTargets(declaration, "member", true)).addElement(initializer);
      }
      List<SNode> statement = SLinkOperations.getTargets(SLinkOperations.getTarget(initializer, "statementList", true), "statement", true);
      if (ListSequence.fromList(statement).isNotEmpty()) {
        SNodeOperations.insertPrevSiblingChild(ListSequence.fromList(statement).first(), SNodeOperations.copyNode(assignmentStatement));
      } else {
        ListSequence.fromList(statement).addElement(SNodeOperations.copyNode(assignmentStatement));
      }
    }
    replaceNode(this.getExpression(), newDeclaration);
    if (myIsReplacingAll) {
      for (SNode duplicate : ListSequence.fromList(myDuplicates)) {
        replaceNode(duplicate, newDeclaration);
      }
    }
    return newDeclaration;
  }



  @Override
  public void replaceNode(SNode node, SNode declaration) {
    SNodeOperations.replaceWithAnother(node, _quotation_createNode_282g55_a0a0a2(declaration));
  }



  private static SNode _quotation_createNode_282g55_a0a0g0a(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_5, "name", (String) parameter_3);
    quotedNode_6 = (SNode) parameter_1;
    if (quotedNode_6 != null) {
      quotedNode_5.addChild("visibility", HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_7 = (SNode) parameter_2;
    if (quotedNode_7 != null) {
      quotedNode_5.addChild("type", HUtil.copyIfNecessary(quotedNode_7));
    }
    quotedNode_8 = (SNode) parameter_4;
    if (quotedNode_8 != null) {
      quotedNode_5.addChild("initializer", HUtil.copyIfNecessary(quotedNode_8));
    }
    return quotedNode_5;
  }

  private static SNode _quotation_createNode_282g55_a0a0a6a0(Object parameter_1, Object parameter_2, Object parameter_3) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_4, "name", (String) parameter_3);
    quotedNode_5 = (SNode) parameter_1;
    if (quotedNode_5 != null) {
      quotedNode_4.addChild("visibility", HUtil.copyIfNecessary(quotedNode_5));
    }
    quotedNode_6 = (SNode) parameter_2;
    if (quotedNode_6 != null) {
      quotedNode_4.addChild("type", HUtil.copyIfNecessary(quotedNode_6));
    }
    return quotedNode_4;
  }

  private static SNode _quotation_createNode_282g55_a0k0a(Object parameter_1, Object parameter_2) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AssignmentExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_4 = (SNode) parameter_1;
    if (quotedNode_4 != null) {
      quotedNode_3.addChild("rValue", HUtil.copyIfNecessary(quotedNode_4));
    }
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_5, "variableDeclaration", (SNode) parameter_2);
    quotedNode_3.addChild("lValue", quotedNode_5);
    return quotedNode_3;
  }

  private static SNode _quotation_createNode_282g55_a0l0a(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("expression", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_282g55_a0a0a2(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_2, "variableDeclaration", (SNode) parameter_1);
    return quotedNode_2;
  }
}
