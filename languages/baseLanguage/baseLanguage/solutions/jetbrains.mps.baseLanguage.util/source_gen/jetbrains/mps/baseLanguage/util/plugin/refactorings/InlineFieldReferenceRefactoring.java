package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class InlineFieldReferenceRefactoring extends InlineFieldRefactoring {
  private SNode myReference;

  public InlineFieldReferenceRefactoring(SNode node) {
    if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.VariableDeclaration"))) {
      throw new IllegalArgumentException();
    }

    this.myReference = node;
  }

  @Override
  public SNode doRefactoring() {
    SNode variable = SLinkOperations.getTarget(this.myReference, "variableDeclaration", false);
    SNode nodeToSelect = SNodeOperations.copyNode(SLinkOperations.getTarget(variable, "initializer", true));
    SNodeOperations.replaceWithAnother(this.myReference, nodeToSelect);
    this.optimizeDeclaration(variable);
    return nodeToSelect;
  }
}
