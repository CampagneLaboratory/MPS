package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class InlineFieldAssignmentRefactoring extends InlineFieldRefactoring {
  private SNode myVariable;

  public InlineFieldAssignmentRefactoring(SNode node) {
    this.myVariable = node;

  }
  @Override
  public SNode doRefactoring() {
    for (SNode reference : this.findAllReferences(this.myVariable)) {
      SNodeOperations.replaceWithAnother(reference, SNodeOperations.copyNode(SLinkOperations.getTarget(this.myVariable, "initializer", true)));
    }
    for (SNode reference : this.findAllReferenceOperations(this.myVariable)) {
      SNodeOperations.replaceWithAnother(SNodeOperations.getAncestor(reference, "jetbrains.mps.baseLanguage.structure.DotExpression", false, false), SNodeOperations.copyNode(SLinkOperations.getTarget(this.myVariable, "initializer", true)));
    }
    this.optimizeDeclaration(this.myVariable);
    return null;
  }
}
