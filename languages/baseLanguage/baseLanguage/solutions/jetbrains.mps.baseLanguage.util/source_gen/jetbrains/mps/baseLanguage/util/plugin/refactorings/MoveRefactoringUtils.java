package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.smodel.SModelInternal;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.module.SDependency;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.model.SReference;

public class MoveRefactoringUtils {
  public MoveRefactoringUtils() {
  }
  public static void addNodeAtLink(SNode container, SNode node) {
    if (SNodeOperations.isInstanceOf(container, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107461130800l, "jetbrains.mps.baseLanguage.structure.Classifier")) && SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1178285077437l, "jetbrains.mps.baseLanguage.structure.ClassifierMember"))) {
      MemberInsertingUtils.insertClassifierMemberInBestPlace(SNodeOperations.cast(container, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1107461130800l, "jetbrains.mps.baseLanguage.structure.Classifier")), SNodeOperations.cast(node, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1178285077437l, "jetbrains.mps.baseLanguage.structure.ClassifierMember")));
    } else {
      SNode concept = SNodeOperations.getConceptDeclaration(node);
      for (SNode link : ListSequence.fromList(BehaviorReflection.invokeNonVirtual((Class<List<SNode>>) ((Class) Object.class), SNodeOperations.asNode(SNodeOperations.getConceptDeclaration(container)), "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", "call_getLinkDeclarations_1213877394480", new Object[]{}))) {
        if (SLinkOperations.getTarget(link, MetaAdapterFactory.getReferenceLink(new UUID(-4094437568663370681l, -8968368868337559369l), 1071489288298l, 1071599976176l, "target")) == concept) {
          container.addChild(SPropertyOperations.getString(link, MetaAdapterFactory.getProperty(new UUID(-4094437568663370681l, -8968368868337559369l), 1071489288298l, 1071599776563l, "role")), node);
        }
      }
    }
  }
  private static void addImportIfNeed(SModel model, SModel toImport) {
    if (model == null || toImport == null) {
      return;
    }
    SModelReference ref = toImport.getReference();
    if (model == toImport || SModelOperations.getImportedModelUIDs(model).contains(ref)) {
      return;
    }
    ((SModelInternal) model).addModelImport(ref, false);

    SModule module = model.getModule();
    if (module instanceof Language) {
      Iterable<SDependency> declaredDependencies = module.getDeclaredDependencies();
      for (SDependency dependency : Sequence.fromIterable(declaredDependencies)) {
        if (dependency.getTarget() == toImport.getModule()) {
          return;
        }
      }
      ((Language) module).addDependency(toImport.getModule().getModuleReference(), false);
    }
  }
  public static void addNodeModelImportIfNeed(SNode node, SNode toImport) {
    addImportIfNeed(SNodeOperations.getModel(node), SNodeOperations.getModel(toImport));
  }
  public static void fixImportsFromNode(SNode node) {
    for (SNode descendant : ListSequence.fromList(SNodeOperations.getNodeDescendants(node, MetaAdapterFactory.getConcept(new UUID(-3554657779850784990l, -7236703803128771572l), 1133920641626l, "jetbrains.mps.lang.core.structure.BaseConcept"), false, new SConcept[]{}))) {
      for (SReference reference : Sequence.fromIterable(SNodeOperations.getReferences(descendant))) {
        addNodeModelImportIfNeed(node, SLinkOperations.getTargetNode(reference));
      }
    }
  }
  public static boolean isReference(SNode node) {
    return ListSequence.fromList(SNodeOperations.getChildren(node)).isEmpty() && Sequence.fromIterable(SNodeOperations.getReferences(node)).count() == 1;
  }
}
