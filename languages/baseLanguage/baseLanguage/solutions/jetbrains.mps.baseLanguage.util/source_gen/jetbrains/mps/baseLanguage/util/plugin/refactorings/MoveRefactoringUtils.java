package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModelOperations;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class MoveRefactoringUtils {
  public MoveRefactoringUtils() {
  }

  public static void addNodeAtLink(SNode container, SNode node) {
    if (SNodeOperations.isInstanceOf(container, "jetbrains.mps.baseLanguage.structure.Classifier") && SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember")) {
      MemberInsertingUtils.insertClassifierMemberInBestPlace(SNodeOperations.cast(container, "jetbrains.mps.baseLanguage.structure.Classifier"), SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember"));
    } else {
      SNode concept = SNodeOperations.getConceptDeclaration(node);
      for (SNode link : ListSequence.fromList(BehaviorReflection.invokeNonVirtual((Class<List<SNode>>) ((Class) Object.class), SNodeOperations.getConceptDeclaration(container), "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", "call_getLinkDeclarations_1213877394480", new Object[]{}))) {
        if (SLinkOperations.getTarget(link, "target", false) == concept) {
          container.addChild(SPropertyOperations.getString(link, "role"), node);
        }
      }
    }
  }

  private static void addImportIfNeed(SModel model, SModel toImport) {
    if (model == null || toImport == null) {
      return;
    }
    SModelReference ref = toImport.getReference();
    if (model == toImport || SModelOperations.getImportedModelUIDs(model).contains(ref)) {
      return;
    }
    model.addModelImport(ref, false);
  }

  public static void addNodeModelImportIfNeed(SNode node, SNode toImport) {
    addImportIfNeed(SNodeOperations.getModel(node), SNodeOperations.getModel(toImport));
  }

  public static void fixImportsFromNode(SNode node) {
    for (SNode descendant : ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{}))) {
      for (SReference reference : Sequence.fromIterable(SNodeOperations.getReferences(descendant))) {
        addNodeModelImportIfNeed(node, SLinkOperations.getTargetNode(reference));
      }
    }
  }

  public static boolean isReference(SNode node) {
    return ListSequence.fromList(SNodeOperations.getChildren(node)).isEmpty() && (int) Sequence.fromIterable(SNodeOperations.getReferences(node)).count() == 1;
  }
}
