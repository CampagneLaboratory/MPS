package jetbrains.mps.baseLanguage.util.plugin.refactorings;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class IntroduceConstantRefactoring extends IntroduceVariableRefactoring {
  public IntroduceConstantRefactoring() {
  }

  public SNode doRefactoring() {
    SNode newDeclaration = _quotation_createNode_2jj2z2_a0a0a(myVisibilityLevel.getNode(), SNodeOperations.copyNode(getExpressionType()), SNodeOperations.copyNode(getExpression()), getName());
    SNode container = SNodeOperations.cast(this.myContainer, "jetbrains.mps.baseLanguage.structure.ClassConcept");
    ListSequence.fromList(SLinkOperations.getTargets(container, "member", true)).addElement(newDeclaration);
    // <node> 
    replaceNode(getExpression(), newDeclaration);
    if (this.myIsReplacingAll) {
      for (SNode duplicate : ListSequence.fromList(this.myDuplicates)) {
        replaceNode(duplicate, newDeclaration);
      }
    }
    return newDeclaration;
  }

  protected SNode findContainer(SNode node) {
    SNode container = SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
    while ((SNodeOperations.getAncestor(container, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false) != null)) {
      container = SNodeOperations.getAncestor(container, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
    }
    return container;
  }

  public void replaceNode(SNode node, SNode declaration) {
    if (Scope.getScope(Scope.parent(node), node, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableDeclaration")).contains(declaration)) {
      SNodeOperations.replaceWithAnother(node, _quotation_createNode_2jj2z2_a0a0a0a2(declaration));
    } else {
      SNodeOperations.replaceWithAnother(node, _quotation_createNode_2jj2z2_a0a0a0a0c(this.myContainer, declaration));
    }
  }

  public static boolean isApplicable(SNode node) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.Expression") && (SNodeOperations.getAncestor(node, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false) != null);
  }

  private static SNode _quotation_createNode_2jj2z2_a0a0a(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration", null, null, GlobalScope.getInstance(), false);
    quotedNode_5.setProperty("isFinal", "true");
    quotedNode_5.setProperty("name", (String) parameter_4);
    quotedNode_6 = (SNode) parameter_1;
    if (quotedNode_6 != null) {
      quotedNode_5.addChild("visibility", HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_7 = (SNode) parameter_2;
    if (quotedNode_7 != null) {
      quotedNode_5.addChild("type", HUtil.copyIfNecessary(quotedNode_7));
    }
    quotedNode_8 = (SNode) parameter_3;
    if (quotedNode_8 != null) {
      quotedNode_5.addChild("initializer", HUtil.copyIfNecessary(quotedNode_8));
    }
    return quotedNode_5;
  }

  private static SNode _quotation_createNode_2jj2z2_a0a0a3a0(Object parameter_1) {
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalStaticFieldReference", null, null, GlobalScope.getInstance(), false);
    quotedNode_2.setReferenceTarget("variableDeclaration", (SNode) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_2jj2z2_a0a0a0a2(Object parameter_1) {
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableReference", null, null, GlobalScope.getInstance(), false);
    quotedNode_2.setReferenceTarget("variableDeclaration", (SNode) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_2jj2z2_a0a0a0a0c(Object parameter_1, Object parameter_2) {
    SNode quotedNode_3 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticFieldReference", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.setReferenceTarget("classifier", (SNode) parameter_1);
    quotedNode_3.setReferenceTarget("variableDeclaration", (SNode) parameter_2);
    return quotedNode_3;
  }
}
