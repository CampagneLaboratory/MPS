package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import java.util.List;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.ArrayList;

public class VisibleClassConstructorsScope extends Scope {
  private final Scope visibleClassifiers;

  public VisibleClassConstructorsScope(@NotNull SNode contextNode, IScope scope) {
    visibleClassifiers = ClassifierScopes.getVisibleClassifiersScope(contextNode, scope);
  }

  public List<SNode> getAvailableElements(@Nullable String prefix) {
    Iterable<SNode> allConstructors = ListSequence.fromList(visibleClassifiers.getAvailableElements(prefix)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.ClassConcept");
      }
    }).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SLinkOperations.getTargets(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "constructor", true);
      }
    });
    // todo: filter by visibility 
    return ListSequence.fromListWithValues(new ArrayList(), allConstructors);
  }

  @Nullable
  public String getReferenceText(SNode contextNode, @NotNull SNode node) {
    // todo: ! 
    return null;
  }

  @Nullable
  public SNode resolve(SNode contextNode, @NotNull String refText) {
    // todo: ! 
    return null;
  }
}
