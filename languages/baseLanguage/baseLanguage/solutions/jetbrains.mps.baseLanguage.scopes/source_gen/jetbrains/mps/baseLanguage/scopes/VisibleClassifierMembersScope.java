package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.lang.scopes.runtime.FilteringScope;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class VisibleClassifierMembersScope extends FilteringScope {
  private final SNode contextNode;
  private final SNode contextClassifier;

  public VisibleClassifierMembersScope(Scope membersScope, SNode contextClassifier, SNode contextNode) {
    super(membersScope);
    this.contextClassifier = contextClassifier;
    this.contextNode = contextNode;
  }

  public VisibleClassifierMembersScope(SNode contextClassifier, SNode kind, SNode contextNode) {
    this(((Scope) BehaviorManager.getInstance().invoke(Object.class, contextClassifier, "virtual_getMembers_2201875424515824604", new Class[]{SNode.class, SNode.class}, kind)), contextClassifier, contextNode);
  }

  @Override
  public boolean isExcluded(SNode node) {
    return !(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember")) || !(((Boolean) BehaviorManager.getInstance().invoke(Boolean.class, SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember"), "virtual_isVisible_8083692786967482069", new Class[]{SNode.class, SNode.class, SNode.class}, contextClassifier, contextNode)));
  }
}
