package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.util.JavaNameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.scopes.runtime.NamedElementsScope;

public class MembersPopulatingContext {
  private final String packageName;
  private List<SNode> members = new ArrayList<SNode>();
  private Set<Signature> hidedMembers = new HashSet<Signature>();

  public MembersPopulatingContext(SNode classifier) {
    // java collections for speed 
    this.packageName = JavaNameUtil.packageName(SNodeOperations.getModel(classifier));
  }

  public void hideMembers(Signature signature) {
    hidedMembers.add(signature);
  }

  public void addMember(SNode member, Signature signature) {
    if (!(hidedMembers.contains(signature))) {
      members.add(member);
    }
  }

  public Scope toScope() {
    // todo: implement scope! 
    List<SNode> namedMembers = new ArrayList<SNode>();
    for (SNode member : members) {
      if (SNodeOperations.isInstanceOf(member, "jetbrains.mps.lang.core.structure.INamedConcept")) {
        namedMembers.add(SNodeOperations.cast(member, "jetbrains.mps.lang.core.structure.INamedConcept"));
      }
    }
    return new NamedElementsScope(namedMembers);
  }

  public void enterClassifierInternal(SNode classifier) {
  }

  public void exitClassifierInternal(SNode classifier) {
  }
}
