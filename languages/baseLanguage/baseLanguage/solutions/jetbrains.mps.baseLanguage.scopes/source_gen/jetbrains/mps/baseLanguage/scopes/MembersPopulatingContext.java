package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import java.util.Stack;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.util.JavaNameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class MembersPopulatingContext {
  private Stack<SNode> classifiers = new Stack<SNode>();
  private boolean isPackageProtectedAvailable = true;
  private final List<SNode> members = new ArrayList<SNode>();
  private final Set<Signature> hidedSignatures = new HashSet<Signature>();

  public MembersPopulatingContext() {
    // java collections for speed 
  }

  public void hideMembers(Signature signature) {
    hidedSignatures.add(signature);
  }

  public void addMember(SNode member, Signature signature) {
    if (!(hidedSignatures.contains(signature))) {
      members.add(member);
    }
  }

  public Iterable<SNode> getMembers() {
    List<SNode> members = new ArrayList<SNode>();
    members.addAll(this.members);
    return members;
  }

  public void enterClassifierInternal(SNode classifier) {
    // todo: check recursion here! 
    classifiers.add(((SNode) BehaviorManager.getInstance().invoke(Object.class, classifier, "virtual_getClassifier_7405920559687237513", new Class[]{SNode.class})));

    // recalc is package protected available 
    isPackageProtectedAvailable = true;
    String contextClassifierPackage = JavaNameUtil.packageName(SNodeOperations.getModel(classifiers.get(0)));
    for (SNode inheritedClassifier : classifiers) {
      if (!(JavaNameUtil.packageName(SNodeOperations.getModel(inheritedClassifier)).equals(contextClassifierPackage))) {
        isPackageProtectedAvailable = false;
        break;
      }
    }
  }

  public void exitClassifierInternal(SNode classifier) {
    assert classifiers.pop() == ((SNode) BehaviorManager.getInstance().invoke(Object.class, classifier, "virtual_getClassifier_7405920559687237513", new Class[]{SNode.class}));
  }

  public boolean isPackageProtectedVisible() {
    return isPackageProtectedAvailable;
  }

  public boolean isPrivateVisible() {
    return classifiers.size() == 1;
  }

  public boolean isElementVisible(SNode element) {
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(element, "visibility", true), "jetbrains.mps.baseLanguage.structure.PrivateVisibility")) {
      return isPrivateVisible();
    }
    if ((SLinkOperations.getTarget(element, "visibility", true) == null)) {
      return isPackageProtectedVisible();
    }
    return true;
  }
}
