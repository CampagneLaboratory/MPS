package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import java.util.Stack;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.util.JavaNameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class MembersPopulatingContext {
  private Stack<SNode> classifiers = new Stack<SNode>();
  private boolean isPackageProtectedAvailable = true;
  private List<SNode> members = new ArrayList<SNode>();
  private Set<Signature> hidedMembers = new HashSet<Signature>();

  public MembersPopulatingContext(SNode classifier) {
    // java collections for speed 
  }

  public void hideMembers(Signature signature) {
    hidedMembers.add(signature);
  }

  public void addMember(SNode member, Signature signature) {
    if (!(hidedMembers.contains(signature))) {
      members.add(member);
    }
  }

  public Iterable<SNode> getMembers() {
    List<SNode> members = new ArrayList<SNode>();
    members.addAll(this.members);
    return members;
  }

  public void enterClassifierInternal(SNode classifier) {
    classifiers.add(classifier);

    // recalc is package protected available 
    isPackageProtectedAvailable = true;
    String contextClassifierPackage = JavaNameUtil.packageName(SNodeOperations.getModel(classifiers.get(0)));
    for (SNode inheritedClassifier : classifiers) {
      if (!(JavaNameUtil.packageName(SNodeOperations.getModel(inheritedClassifier)).equals(contextClassifierPackage))) {
        isPackageProtectedAvailable = false;
        break;
      }
    }
  }

  public void exitClassifierInternal(SNode classifier) {
    assert classifiers.pop() == classifier;
  }

  public boolean isPackageProtectedAvailable() {
    return isPackageProtectedAvailable;
  }
}
