package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.scopes.runtime.FilteringScope;
import jetbrains.mps.baseLanguage.search.VisibilityUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.IScope;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.SetSequence;

public class ClassifierScopes {
  private ClassifierScopes() {
  }

  public static Scope filterVisibleClassifiersScope(final SNode contextNode, Scope inner) {
    return new FilteringScope(inner) {
      @Override
      public boolean isExcluded(SNode node) {
        return !(VisibilityUtil.isVisible(contextNode, SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.IVisible")));
      }
    };
  }

  public static Scope filterWithClassExpressionClassifiers(Scope inner) {
    return new FilteringScope(inner) {
      @Override
      public boolean isExcluded(SNode node) {
        return SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.tuples.structure.NamedTupleDeclaration") || SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.AnonymousClass");
      }
    };
  }

  public static Scope getReachableClassifiersScope(SModel model, IScope scope) {
    return new ClassifiersScope(model, scope, "jetbrains.mps.baseLanguage.structure.Classifier");
  }

  public static Scope getVisibleClassifiersScope(@NotNull final SNode contextNode, IScope scope) {
    return filterVisibleClassifiersScope(contextNode, getReachableClassifiersScope(SNodeOperations.getModel(contextNode), scope));
  }

  public static Scope getWithClassExpressionClassifiers(SNode contextNode, IScope scope) {
    return filterVisibleClassifiersScope(contextNode, filterWithClassExpressionClassifiers(getReachableClassifiersScope(SNodeOperations.getModel(contextNode), scope)));
  }

  public static Scope getAnnotationClassifiersScope(final SNode contextNode, IScope scope) {
    return filterVisibleClassifiersScope(contextNode, new ClassifiersScope(SNodeOperations.getModel(contextNode), scope, "jetbrains.mps.baseLanguage.structure.Annotation"));
  }

  public static void getThrowablesScope(@NotNull SNode contextNode, IScope scope) {
    new FilteringScope(new ClassifiersScope(SNodeOperations.getModel(contextNode), scope, "jetbrains.mps.baseLanguage.structure.ClassConcept")) {
      @Override
      public boolean isExcluded(SNode node) {
        // todo: change it! need only extended classes here 
        return !(SetSequence.fromSet(ClassifierScopeUtils.getExtendedClassifiers(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.Classifier"))).contains(SNodeOperations.getNode("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)", "~Throwable")));
      }
    };
  }
}
