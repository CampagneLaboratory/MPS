package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.scopes.runtime.FilteringScope;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class MemberScopes {
  private MemberScopes() {
  }

  public static Scope nonAbstractMethods(Scope scope) {
    return new FilteringScope(scope) {
      @Override
      public boolean isExcluded(SNode node) {
        return !(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) || ((Boolean) BehaviorManager.getInstance().invoke(Boolean.class, SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), "virtual_isAbstract_1232982539764", new Class[]{SNode.class}));
      }
    };
  }

  public static Scope visibleClassifierMembers(Scope scope, final SNode contextClassifier, final SNode contextNode) {
    return new FilteringScope(scope) {
      @Override
      public boolean isExcluded(SNode node) {
        return !(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember")) || !(((Boolean) BehaviorManager.getInstance().invoke(Boolean.class, SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember"), "virtual_isVisible_8083692786967482069", new Class[]{SNode.class, SNode.class, SNode.class}, contextClassifier, contextNode)));
      }
    };
  }

  public static Scope visibleClassifierMembers(SNode contextClassifier, SNode kind, SNode contextNode) {
    return visibleClassifierMembers(((Scope) BehaviorManager.getInstance().invoke(Object.class, contextClassifier, "virtual_getMembers_2201875424515824604", new Class[]{SNode.class, SNode.class}, kind)), contextClassifier, contextNode);
  }
}
