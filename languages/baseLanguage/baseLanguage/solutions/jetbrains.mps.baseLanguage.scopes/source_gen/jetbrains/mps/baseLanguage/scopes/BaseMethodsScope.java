package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import java.util.Map;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.ArrayList;
import org.jetbrains.annotations.Nullable;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.IMapping;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

@Deprecated
public abstract class BaseMethodsScope extends Scope {
  private final Map<String, List<SNode>> nameToMethods;
  protected final SNode kind;
  protected final SNode classifier;
  protected final Iterable<SNode> extendedClassifiers;
  private SNode[] allMethods;
  @Deprecated
  public BaseMethodsScope(final SNode kind, SNode classifier, Iterable<SNode> extendedClassifiers) {
    // all extendedClassifiers should be not null 
    if (Sequence.fromIterable(extendedClassifiers).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (it == null);
      }
    })) {
      // todo: make macro like methodParamsToString()? 
      throw new IllegalArgumentException("One of extended classifiers is null. Kind: " + NameUtil.nodeFQName(kind) + "; classifier: " + classifier + "; extendedClassifiers: " + extendedClassifiers);
    }

    this.kind = kind;
    this.classifier = classifier;
    this.extendedClassifiers = extendedClassifiers;

    nameToMethods = MapSequence.fromMap(new HashMap<String, List<SNode>>());
    for (SNode node : ListSequence.fromList(SNodeOperations.getChildren(classifier)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, SNodeOperations.asSConcept(kind));
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
      }
    })) {
      String name = SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
      if (name != null) {
        if (MapSequence.fromMap(nameToMethods).containsKey(name)) {
          ListSequence.fromList(MapSequence.fromMap(nameToMethods).get(name)).addElement(node);
        } else {
          MapSequence.fromMap(nameToMethods).put(name, ListSequence.fromListAndArray(new ArrayList(), node));
        }
      }
    }
  }
  public abstract String getSignatureForOverriding(SNode method, SNode contextClassifier);
  public Iterable<SNode> getMethodsFromGroup(Iterable<SNode> groupWithEqualSignature) {
    if (Sequence.fromIterable(groupWithEqualSignature).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(SNodeOperations.getParent(it), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"));
      }
    }).distinct().count() == 1) {
      return groupWithEqualSignature;
    } else {
      return ListSequence.fromList(new ArrayList<SNode>());
    }
  }
  @Override
  public Iterable<SNode> getAvailableElements(@Nullable final String prefix) {
    if (allMethods != null) {
      return Sequence.fromIterable(Sequence.fromArray(allMethods)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return prefix == null || SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).startsWith(prefix);
        }
      }).toListSequence();
    }

    List<SNode> result = ListSequence.fromList(new ArrayList());
    Set<String> overridenSignatures = SetSequence.fromSet(new HashSet<String>());

    for (String name : MapSequence.fromMap(nameToMethods).keySet()) {
      if (prefix == null || name.startsWith(prefix)) {
        Iterable<SNode> methods = MapSequence.fromMap(nameToMethods).get(name);
        ListSequence.fromList(result).addSequence(Sequence.fromIterable(methods));
        SetSequence.fromSet(overridenSignatures).addSequence(Sequence.fromIterable(methods).select(new ISelector<SNode, String>() {
          public String select(SNode it) {
            return getSignatureForOverriding(it, classifier);
          }
        }));
      }
    }

    Map<String, Set<SNode>> groups = MapSequence.fromMap(new HashMap<String, Set<SNode>>());
    for (SNode extendedClassifier : Sequence.fromIterable(extendedClassifiers)) {
      for (SNode method : Sequence.fromIterable(BehaviorReflection.invokeVirtual(Scope.class, extendedClassifier, "virtual_getVisibleMembers_8083692786967356611", new Object[]{classifier, kind}).getAvailableElements(prefix)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, SNodeOperations.asSConcept(kind));
        }
      }).select(new ISelector<SNode, SNode>() {
        public SNode select(SNode it) {
          return SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
        }
      })) {
        String signature = getSignatureForOverriding(method, classifier);
        if (!(SetSequence.fromSet(overridenSignatures).contains(signature))) {
          if (MapSequence.fromMap(groups).containsKey(signature)) {
            SetSequence.fromSet(MapSequence.fromMap(groups).get(signature)).addElement(method);
          } else {
            MapSequence.fromMap(groups).put(signature, SetSequence.fromSetAndArray(new HashSet<SNode>(), method));
          }
        }
      }
    }

    for (IMapping<String, Set<SNode>> group : MapSequence.fromMap(groups)) {
      // todo: extension methods? 
      ListSequence.fromList(result).addSequence(Sequence.fromIterable(getMethodsFromGroup(group.value())));
    }

    if (prefix == null) {
      allMethods = ListSequence.fromList(result).select(new ISelector<SNode, SNode>() {
        public SNode select(SNode it) {
          return SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
        }
      }).toGenericArray(SNode.class);
    }

    return result;
  }
  @Nullable
  @Override
  public SNode resolve(SNode contextNode, @NotNull final String refText) {
    List<SNode> methods = Sequence.fromIterable(this.getAvailableElements(refText)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return refText.equals(SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
      }
    }).toListSequence();
    if (methods.isEmpty()) {
      return null;
    }
    if (methods.size() == 1) {
      return ListSequence.fromList(methods).first();
    }
    if (!(SNodeOperations.isInstanceOf(contextNode, MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, "jetbrains.mps.baseLanguage.structure.IMethodCall")))) {
      return null;
    }
    List<SNode> actualArguments = SLinkOperations.getChildren((SNodeOperations.cast(contextNode, MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, "jetbrains.mps.baseLanguage.structure.IMethodCall"))), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument"));

    methods = MethodResolveUtil.selectByParmCount(methods, actualArguments);
    if (methods.size() == 1) {
      return ListSequence.fromList(methods).first();
    }

    return resolveMethod(contextNode, refText, actualArguments, methods);
  }
  @Nullable
  public SNode resolveMethod(SNode contextNode, @NotNull String refText, List<SNode> actualArguments, List<SNode> methods) {
    // all methods have exactly actualArguments.size arguments and name of all methods is refText 
    throw new UnsupportedOperationException();
  }
  @Nullable
  @Override
  public String getReferenceText(SNode contextNode, @NotNull SNode node) {
    return SPropertyOperations.getString(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
  }
  @Override
  public boolean contains(SNode node) {
    return SNodeOperations.isInstanceOf(node, SNodeOperations.asSConcept(kind)) && Sequence.fromIterable(getAvailableElements(SPropertyOperations.getString(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))).contains(node);
  }
}
