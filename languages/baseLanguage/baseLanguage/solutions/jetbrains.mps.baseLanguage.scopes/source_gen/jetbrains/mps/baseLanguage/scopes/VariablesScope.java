package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.SNode;
import java.util.Map;
import java.util.Set;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.internal.collections.runtime.SortedMapSequence;
import java.util.TreeMap;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.annotations.NotNull;

public class VariablesScope extends Scope {
  private final SNode kind;
  private final Map<String, SNode> vars;
  private final Set<String> names;
  @Nullable
  private final Scope parentScope;

  public VariablesScope(SNode kind, Iterable<SNode> vars, @Nullable Scope parentScope) {
    // behavior: hide parent elements by name 
    // hide all BaseVariableDeclaration nodes in parent scope by vars 
    // parent scope should be with equal kind 
    this.vars = SortedMapSequence.fromMap(new TreeMap<String, SNode>());
    this.names = SetSequence.fromSet(new HashSet());
    for (SNode node : Sequence.fromIterable(vars)) {
      if ((node != null)) {
        SetSequence.fromSet(this.names).addElement(SPropertyOperations.getString(node, "name"));
        if (SNodeOperations.isInstanceOf(node, NameUtil.nodeFQName(kind))) {
          MapSequence.fromMap(this.vars).put(SPropertyOperations.getString(node, "name"), node);
        }
      }
    }
    this.parentScope = parentScope;
    this.kind = kind;
  }

  public List<SNode> getAvailableElements(@Nullable final String prefix) {
    List<SNode> result = ListSequence.fromList(new ArrayList());
    if (prefix == null) {
      ListSequence.fromList(result).addSequence(Sequence.fromIterable(MapSequence.fromMap(vars).values()));
    } else {
      ListSequence.fromList(result).addSequence(SetSequence.fromSet(MapSequence.fromMap(vars).keySet()).where(new IWhereFilter<String>() {
        public boolean accept(String it) {
          return it.startsWith(prefix);
        }
      }).select(new ISelector<String, SNode>() {
        public SNode select(String it) {
          return MapSequence.fromMap(vars).get(it);
        }
      }));
    }
    if (parentScope != null) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(parentScope.getAvailableElements(prefix)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return !(SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration")) || !(SetSequence.fromSet(names).contains(SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration"), "name")));
        }
      }));
    }
    return result;
  }

  @Override
  public boolean contains(SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration")) {
      String name = SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration"), "name");
      if (MapSequence.fromMap(vars).containsKey(name)) {
        return MapSequence.fromMap(vars).get(name) == node;
      } else {
        return (parentScope != null ?
          parentScope.contains(node) :
          false
        );
      }
    } else {
      return (parentScope != null ?
        parentScope.contains(node) :
        false
      );
    }
  }

  @Nullable
  public SNode resolve(SNode contextNode, @NotNull String refText) {
    if (SetSequence.fromSet(names).contains(refText)) {
      return MapSequence.fromMap(vars).get(refText);
    } else {
      return (parentScope != null ?
        parentScope.resolve(contextNode, refText) :
        null
      );
    }
  }

  @Nullable
  public String getReferenceText(SNode contextNode, @NotNull SNode node) {
    return SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration"), "name");
  }

  public static Scope create(SNode kind, SNode var, @Nullable Scope parentScope) {
    if ((var != null)) {
      return new VariablesScope(kind, ListSequence.fromListAndArray(new ArrayList<SNode>(), var), parentScope);
    } else {
      return parentScope;
    }
  }
}
