package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import java.util.Set;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.annotations.NotNull;

public class VariablesScope extends Scope {
  private final SNode kind;
  private final List<SNode> vars;
  private final Set<String> names;
  @Nullable
  private final Scope parentScope;

  public VariablesScope(final SNode kind, Iterable<SNode> vars, @Nullable Scope parentScope) {
    // behavior: hide parent elements by name 
    // hide all BaseVariableDeclaration nodes in parent scope by vars 
    // parent scope should be with equal kind 
    this.vars = ListSequence.fromListWithValues(new ArrayList(), Sequence.fromIterable(vars).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (it != null) && SNodeOperations.isInstanceOf(it, NameUtil.nodeFQName(kind));
      }
    }));
    this.parentScope = parentScope;
    this.kind = kind;
    this.names = SetSequence.fromSetWithValues(new HashSet(), Sequence.fromIterable(vars).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (it != null);
      }
    }).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return SPropertyOperations.getString(it, "name");
      }
    }));
  }

  public List<SNode> getAvailableElements(@Nullable final String prefix) {
    List<SNode> result = ListSequence.fromList(new ArrayList());
    ListSequence.fromList(result).addSequence(ListSequence.fromList(vars).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return prefix == null || SPropertyOperations.getString(it, "name").startsWith(prefix);
      }
    }));
    if (parentScope != null) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(parentScope.getAvailableElements(prefix)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return !(SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration")) || !(SetSequence.fromSet(names).contains(SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration"), "name")));
        }
      }));
    }
    return result;
  }

  @Override
  public boolean contains(SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration")) {
      if (SetSequence.fromSet(names).contains(SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration"), "name"))) {
        return ListSequence.fromList(vars).contains(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration"));
      } else {
        return (parentScope != null ?
          parentScope.contains(node) :
          false
        );
      }
    } else {
      return (parentScope != null ?
        parentScope.contains(node) :
        false
      );
    }
  }

  @Nullable
  public SNode resolve(SNode contextNode, @NotNull final String refText) {
    if (SetSequence.fromSet(names).contains(refText)) {
      Iterable<SNode> element = ListSequence.fromList(vars).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getString(it, "name").equals(refText);
        }
      });
      return (Sequence.fromIterable(element).isNotEmpty() ?
        Sequence.fromIterable(element).first() :
        null
      );
    } else {
      return (parentScope != null ?
        parentScope.resolve(contextNode, refText) :
        null
      );
    }
  }

  @Nullable
  public String getReferenceText(SNode contextNode, @NotNull SNode node) {
    return SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration"), "name");
  }

  public static Scope create(SNode kind, SNode var, @Nullable Scope parentScope) {
    if ((var != null)) {
      return new VariablesScope(kind, ListSequence.fromListAndArray(new ArrayList<SNode>(), var), parentScope);
    } else {
      return parentScope;
    }
  }
}
