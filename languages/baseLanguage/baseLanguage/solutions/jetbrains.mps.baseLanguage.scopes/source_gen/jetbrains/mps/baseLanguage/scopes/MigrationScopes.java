package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.scope.EmptyScope;
import jetbrains.mps.scope.FilteringScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.NameUtil;

public class MigrationScopes {
  private MigrationScopes() {
  }

  public static Scope forVariables(SNode declarationConcept, SNode contextNode, String contextRole, int position) {
    Scope scope = Scope.getScope(contextNode, contextRole, position, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.VariableDeclaration"));
    if (scope != null) {
      return new MigrationScopes.MigrationVariablesScope(scope, declarationConcept);
    } else {
      return new EmptyScope();
    }
  }

  public static class MigrationVariablesScope extends FilteringScope {
    private final SNode declarationConcept;

    public MigrationVariablesScope(Scope innerScope, SNode declarationConcept) {
      super(innerScope);
      this.declarationConcept = declarationConcept;
    }

    @Override
    public boolean isExcluded(SNode node) {
      return !(SNodeOperations.isInstanceOf(node, NameUtil.nodeFQName(declarationConcept)));
    }
  }
}
