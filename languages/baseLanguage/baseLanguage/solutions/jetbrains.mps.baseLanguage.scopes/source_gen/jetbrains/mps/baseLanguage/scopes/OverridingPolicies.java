package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import java.util.ArrayList;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class OverridingPolicies {
  private OverridingPolicies() {
  }

  public static Iterable<SNode> doClassLikeOverriding(final SNode classifier, SNode kind, List<SNode> equalSignatureMembers) {
    if (ListSequence.fromList(equalSignatureMembers).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.getParent(it) == classifier;
      }
    }).isNotEmpty()) {
      return ListSequence.fromList(equalSignatureMembers).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.getParent(it) == classifier;
        }
      });
    }

    if (ListSequence.fromList(equalSignatureMembers).count() < 2) {
      return equalSignatureMembers;
    }

    // size >= 2 
    // not overrided in current class 
    // possible variants: StaticFields and InstanceMethods (intersect of Interface and Classes) 
    if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
      return ListSequence.fromList(new ArrayList<SNode>());
    }

    if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
      Iterable<SNode> nonAbstractMethods = ListSequence.fromList(equalSignatureMembers).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return !(((Boolean) BehaviorManager.getInstance().invoke(Boolean.class, SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"), "virtual_isAbstract_1232982539764", new Class[]{SNode.class})));
        }
      }).select(new ISelector<SNode, SNode>() {
        public SNode select(SNode it) {
          return SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
        }
      });
      if (Sequence.fromIterable(nonAbstractMethods).isNotEmpty()) {
        if ((int) Sequence.fromIterable(nonAbstractMethods).count() == 1) {
          return nonAbstractMethods;
        } else {
          return Sequence.fromIterable(nonAbstractMethods).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SNodeOperations.getParent(it) != SNodeOperations.getNode("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)", "~Object");
            }
          });
        }
      } else {
        return ListSequence.fromList(equalSignatureMembers).take(1);
      }
    }

    // by default 
    return equalSignatureMembers;
  }

  public static Iterable<SNode> doInterfaceLikeOverriding(final SNode classifier, SNode kind, List<SNode> equalSignatureMembers) {
    if (ListSequence.fromList(equalSignatureMembers).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.getParent(it) == classifier;
      }
    }).isNotEmpty()) {
      return ListSequence.fromList(equalSignatureMembers).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.getParent(it) == classifier;
        }
      });
    }

    if (ListSequence.fromList(equalSignatureMembers).count() < 2) {
      return equalSignatureMembers;
    }

    // size >= 2 
    // not overrided in current class 
    // possible variants: StaticFields and InstanceMethods (intersect of Interfaces and maybe Object class) 
    if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
      return ListSequence.fromList(new ArrayList<SNode>());
    }

    if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
      Iterable<SNode> methods = ListSequence.fromList(equalSignatureMembers).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
        }
      }).select(new ISelector<SNode, SNode>() {
        public SNode select(SNode it) {
          return SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
        }
      });
      if (Sequence.fromIterable(methods).isNotEmpty()) {
        if ((int) Sequence.fromIterable(methods).count() == 1) {
          return methods;
        } else {
          return Sequence.fromIterable(methods).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SNodeOperations.getParent(it) != SNodeOperations.getNode("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)", "~Object");
            }
          }).take(1);
        }
      } else {
        return ListSequence.fromList(new ArrayList<SNode>());
      }
    }

    // by default 
    return equalSignatureMembers;
  }
}
