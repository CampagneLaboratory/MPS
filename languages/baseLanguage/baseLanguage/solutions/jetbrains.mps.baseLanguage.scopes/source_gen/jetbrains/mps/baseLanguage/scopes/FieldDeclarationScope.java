package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.scopes.runtime.NamedElementsScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.scopes.runtime.LazyScope;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.scope.EmptyScope;

public class FieldDeclarationScope {
  private FieldDeclarationScope() {
  }

  public static Scope forClass(final SNode classNode, @Nullable final SNode extendsClass, SNode... implementsInterfaces) {
    // todo: not .field but .children.filter, .field only as optimize 
    Scope fields = new NamedElementsScope(SLinkOperations.getTargets(classNode, "field", true));
    if ((extendsClass != null)) {
      // hiding based on name 
      return Scopes.defaultWithNameHiding(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldDeclaration"), fields, new LazyScope(new _FunctionTypes._return_P0_E0<Scope>() {
        public Scope invoke() {
          return ((Scope) BehaviorManager.getInstance().invoke(Object.class, extendsClass, "virtual_getVisibleMembers_8083692786967356611", new Class[]{SNode.class, SNode.class, SNode.class}, classNode, SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.FieldDeclaration")));
        }
      }));
    } else {
      return fields;
    }
  }

  public static Scope forInterface(SNode interfaceNode, SNode... extendsInterfaces) {
    return new EmptyScope();
  }
}
