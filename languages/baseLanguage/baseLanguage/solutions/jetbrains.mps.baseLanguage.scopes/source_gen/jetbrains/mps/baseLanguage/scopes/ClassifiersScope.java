package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.scope.FilteringScope;
import jetbrains.mps.smodel.IScope;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.scope.ModelPlusImportedScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class ClassifiersScope extends FilteringScope {
  private IScope myModuleScope;
  private boolean myInlcudeAncestors;
  private SNode myClassifier;

  public ClassifiersScope(SModel model, SNode clas, String conceptFqName, boolean includeAncestors) {
    super(new ModelPlusImportedScope(model, false, ((AbstractModule)model.getModule()).getScope(), conceptFqName));
    myModuleScope = ((AbstractModule)model.getModule()).getScope();
    myInlcudeAncestors = includeAncestors;
    myClassifier = clas;
  }

  public ClassifiersScope(SModel model, SNode clas, String conceptFqName, boolean includeAncestors, IScope scope) {
    super(new ModelPlusImportedScope(model, false, scope, conceptFqName));
    myModuleScope = scope;
    myInlcudeAncestors = includeAncestors;
    myClassifier = clas;
  }

  public ClassifiersScope(SModel model, SNode clas, String conceptFqName) {
    this(model, clas, conceptFqName, false);
  }

  @Override
  public boolean isExcluded(SNode node) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.AnonymousClass");
  }

  @Override
  public SNode resolve(SNode contextNode, String refText) {
    // hack for [model]node construction, remove it 
    if (refText.startsWith("[")) {
      return ClassifierResolveUtils.resolveSpecialSyntax(refText, contextNode);
    }
    // end of hack 
    // TODO Must be done through ScopeProvider 
    SNode contextClass = SNodeOperations.getAncestor(contextNode, "jetbrains.mps.baseLanguage.structure.Classifier", true, false);
    return ClassifierResolveUtils.resolve(refText, contextClass, myModuleScope, (ModelPlusImportedScope) wrapped, myInlcudeAncestors);
    // <node> 
  }

  @Override
  public boolean contains(SNode node) {
    if (super.contains(node)) {
      return true;
    }
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.Classifier"))) {
      return false;
    }

    SNode root = Sequence.fromIterable(ClassifierResolveUtils.getPathToRoot(myClassifier)).last();
    if ((root != null) && (AttributeOperations.getAttribute(root, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.JavaImports"))) != null)) {
      return ClassifierResolveUtils.isImportedBy(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.Classifier"), AttributeOperations.getAttribute(root, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.JavaImports"))));
    }

    return false;
  }
}
