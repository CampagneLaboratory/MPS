package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Map;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Set;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Iterator;

public class ClassifierScopeUtils {
  private ClassifierScopeUtils() {
  }

  public static String createMethodParameterTypesString(SNode method, Map<SNode, SNode> typeByTypeVar) {
    StringBuilder result = new StringBuilder();
    for (SNode parm : SLinkOperations.getTargets(method, "parameter", true)) {
      SNode type = SLinkOperations.getTarget(parm, "type", true);
      type = GenericTypesUtil.getTypeWithResolvedTypeVars(type, typeByTypeVar);
      if (result.length() > 0) {
        result.append(',');
      }
      if (type != null) {
        result.append(((String) BehaviorManager.getInstance().invoke(Object.class, type, "virtual_getErasureSignature_1213877337313", new Class[]{SNode.class})));
      } else {
        result.append("");
      }
    }
    return result.toString();
  }

  public static String getMethodSignatureForOverriding(SNode contextClassifier, SNode method) {
    return SPropertyOperations.getString(method, "name") + "(" + createMethodParameterTypesString(method, resolveClassifierTypeVars(contextClassifier)) + ")";
  }

  public static Map<SNode, SNode> resolveClassifierTypeVars(SNode classifier) {
    return getClassifierAndSuperClassifiersData(classifier).typeByTypeVariable;
  }

  public static Set<SNode> getExtendedClassifiers(SNode classifier) {
    return getClassifierAndSuperClassifiersData(classifier).classifiers;
  }

  private static ClassifierScopeUtils.ClassifierAndSuperClassifiersData getClassifierAndSuperClassifiersData(final SNode classifier) {
    if (SNodeOperations.getModel(classifier).isTransient()) {
      return new ClassifierScopeUtils.ClassifierAndSuperClassifiersData(classifier);
    } else {
      return RepositoryStateCacheUtils.getFromCache(ClassifierScopeUtils.class, classifier, new _FunctionTypes._return_P0_E0<ClassifierScopeUtils.ClassifierAndSuperClassifiersData>() {
        public ClassifierScopeUtils.ClassifierAndSuperClassifiersData invoke() {
          return new ClassifierScopeUtils.ClassifierAndSuperClassifiersData(classifier);
        }
      });
    }
  }

  private static class ClassifierAndSuperClassifiersData {
    /*package*/ final Set<SNode> classifiers;
    /*package*/ final Map<SNode, SNode> typeByTypeVariable;

    /*package*/ ClassifierAndSuperClassifiersData(SNode topClassifier) {
      typeByTypeVariable = MapSequence.fromMap(new HashMap<SNode, SNode>());
      classifiers = SetSequence.fromSet(new LinkedHashSet<SNode>());
      collectImplementedAndExtended(topClassifier, null);
    }

    private void collectImplementedAndExtended(SNode classifier, List<SNode> typeParms) {
      if ((classifier == null) || SetSequence.fromSet(classifiers).contains(classifier)) {
        return;
      }
      SetSequence.fromSet(classifiers).addElement(classifier);
      if (ListSequence.fromList(typeParms).isNotEmpty()) {
        Iterator<SNode> typeVars = ListSequence.fromList(SLinkOperations.getTargets(classifier, "typeVariableDeclaration", true)).iterator();
        for (SNode typeParm : typeParms) {
          if (!(typeVars.hasNext())) {
            break;
          }
          SNode typeVar = typeVars.next();
          MapSequence.fromMap(typeByTypeVariable).put(typeVar, typeParm);
        }
      }

      for (SNode superType : ((List<SNode>) BehaviorManager.getInstance().invoke(Object.class, classifier, "virtual_getExtendedClassifierTypes_2201875424516179426", new Class[]{SNode.class}))) {
        collectImplementedAndExtended(SLinkOperations.getTarget(superType, "classifier", false), SLinkOperations.getTargets(superType, "parameter", true));
      }
    }
  }
}
