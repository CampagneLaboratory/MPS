package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.scope.ModelPlusImportedScope;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.dependency.GlobalModuleDependenciesManager;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.generator.TransientModelsModule;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.LanguageID;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.util.Pair;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.StringTokenizer;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.project.AbstractModule;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.behavior.Tokens_Behavior;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.Queue;
import jetbrains.mps.internal.collections.runtime.QueueSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class ClassifierResolveUtils {
  private ClassifierResolveUtils() {
  }
  public static SNode resolveSpecialSyntax(@NotNull String refText, @NotNull SNode contextNode) {
    if (!(refText.startsWith("["))) {
      throw new IllegalArgumentException();
    }
    if (!(refText.contains("]"))) {
      throw new IllegalArgumentException();
    }
    String targetModelName = refText.substring(1, refText.indexOf("]"));
    String targetNodeFqName = targetModelName + "." + refText.substring(refText.indexOf("]") + 1);

    return resolveWithSpecifiedTargetModelName(targetModelName, targetNodeFqName, SNodeOperations.getModel(contextNode));
  }
  public static SNode resolveNonSpecialSyntax(@NotNull String classifierName, @NotNull SNode contextNode, ModelPlusImportedScope modelPlusImported) {
    // try to resolve as nested name in current model 
    Iterable<SNode> result = resolveClassifierByNestedName(SNodeOperations.getModel(contextNode), classifierName);
    if (Sequence.fromIterable(result).isNotEmpty()) {
      return (Sequence.fromIterable(result).count() == 1 ? Sequence.fromIterable(result).first() : null);
    }

    // try to resolve as fq name in current model 
    result = resolveClassifierByFqName(SNodeOperations.getModel(contextNode), classifierName);
    if (Sequence.fromIterable(result).isNotEmpty()) {
      return (Sequence.fromIterable(result).count() == 1 ? Sequence.fromIterable(result).first() : null);
    }

    SModule module = check_8z6r2b_a0i0c(SNodeOperations.getModel(contextNode));
    Iterable<SModule> visibleModules = new GlobalModuleDependenciesManager(module).getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE);

    // try to resolve as nested name in current scope 
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    for (SModel model : Sequence.fromIterable(modelPlusImported.getModels())) {
      ListSequence.fromList(res).addSequence(Sequence.fromIterable(resolveClassifierByNestedName(model, classifierName)));
    }
    if (ListSequence.fromList(res).isNotEmpty()) {
      return (ListSequence.fromList(res).count() == 1 ? ListSequence.fromList(res).first() : null);
    }

    // try to resolve as fq name in current scope 
    result = resolveClassifierByFqNameWithNonStubPriority(Sequence.fromIterable(visibleModules).translate(new ITranslator2<SModule, SModel>() {
      public Iterable<SModel> translate(SModule it) {
        return it.getModels();
      }
    }), classifierName);
    return (Sequence.fromIterable(result).count() == 1 ? Sequence.fromIterable(result).first() : null);
  }
  public static SNode resolveWithSpecifiedTargetModelName(@NotNull String targetModelName, @NotNull String classifierFqName, @Nullable SModel sourceModel) {
    Iterable<SNode> sameModelResult = resolveClassifierByFqName(sourceModel, classifierFqName);
    if (Sequence.fromIterable(sameModelResult).isNotEmpty()) {
      return (Sequence.fromIterable(sameModelResult).count() == 1 ? Sequence.fromIterable(sameModelResult).first() : null);
    }

    SModule module = check_8z6r2b_a0d0d(sourceModel);

    if (module != null) {
      Iterable<SNode> resolved = resolveInScope(targetModelName, classifierFqName, new GlobalModuleDependenciesManager(module).getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE));
      if (Sequence.fromIterable(resolved).isNotEmpty()) {
        return (Sequence.fromIterable(resolved).count() == 1 ? Sequence.fromIterable(resolved).first() : null);
      }
    }

    Iterable<SNode> resolved = resolveInScope(targetModelName, classifierFqName, MPSModuleRepository.getInstance().getModules());
    return (Sequence.fromIterable(resolved).count() == 1 ? Sequence.fromIterable(resolved).first() : null);
  }
  private static Iterable<SNode> resolveInScope(@NotNull final String targetModelName, @NotNull String classifierFqName, Iterable<SModule> modules) {
    // todo: go through all stereotypes and resolve by long name and stereotype 
    List<SModel> models = Sequence.fromIterable(modules).translate(new ITranslator2<SModule, SModel>() {
      public Iterable<SModel> translate(SModule it) {
        return it.getModels();
      }
    }).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return eq_8z6r2b_a0a0a0a0a0a0b0e(jetbrains.mps.util.SNodeOperations.getModelLongName(it), targetModelName);
      }
    }).toListSequence();
    return resolveClassifierByFqNameWithNonStubPriority(models, classifierFqName);
  }
  private static Iterable<SNode> resolveClassifierByFqNameWithNonStubPriority(Iterable<SModel> models, String classifierFqName) {
    models = Sequence.fromIterable(models).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return !((it.getModule() instanceof TransientModelsModule));
      }
    });

    final String stubStereoType = SModelStereotype.getStubStereotypeForId(LanguageID.JAVA);

    // resolve without stubs 
    Iterable<SNode> result = resolveClassifierByFqName(Sequence.fromIterable(models).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return neq_8z6r2b_a0a0a0a0a0a0f0f(SModelStereotype.getStereotype(it), stubStereoType);
      }
    }), classifierFqName);
    if (Sequence.fromIterable(result).isNotEmpty()) {
      return result;
    }

    // resolve with stubs 
    return resolveClassifierByFqName(Sequence.fromIterable(models).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return eq_8z6r2b_a0a0a0a0a0a9a5(SModelStereotype.getStereotype(it), stubStereoType);
      }
    }), classifierFqName);
  }
  private static Iterable<SNode> resolveClassifierByFqName(Iterable<SModel> models, final String classifierFqName) {
    return Sequence.fromIterable(models).translate(new ITranslator2<SModel, SNode>() {
      public Iterable<SNode> translate(SModel it) {
        return resolveClassifierByFqName(it, classifierFqName);
      }
    });
  }
  private static Iterable<SNode> resolveClassifierByFqName(SModel modelDescriptor, String classifierFqName) {
    assert !(classifierFqName.contains("$"));

    if (!(classifierFqName.startsWith(jetbrains.mps.util.SNodeOperations.getModelLongName(modelDescriptor)))) {
      return Collections.<SNode>emptyList();
    }

    String modelName = jetbrains.mps.util.SNodeOperations.getModelLongName(modelDescriptor);
    if (1 + modelName.length() > classifierFqName.length()) {
      return Collections.<SNode>emptyList();
    }

    String classifierNestedName = classifierFqName.substring(modelName.length() + 1);
    return resolveClassifierByNestedName(modelDescriptor, classifierNestedName);
  }
  private static Iterable<SNode> resolveClassifierByNestedName(SModel modelDescriptor, String classifierNestedName) {
    assert !(classifierNestedName.contains("$"));

    SModel model = modelDescriptor;
    if (model == null) {
      // todo: ? 
      return Collections.<SNode>emptyList();
    }

    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode classifier : getClassifiersInModel(model)) {
      if (classifierNestedName.equals(getNestedName(classifier))) {
        ListSequence.fromList(result).addElement(classifier);
      }
    }
    return result;
  }
  private static String getNestedName(SNode classifier) {
    String name = SPropertyOperations.getString(classifier, "name");
    if (name == null) {
      name = "";
    }
    SNode parent = SNodeOperations.getParent(classifier);
    if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.Classifier")) {
      return getNestedName(SNodeOperations.cast(parent, "jetbrains.mps.baseLanguage.structure.Classifier")) + "." + name;
    }
    return name;
  }
  private static Iterable<SNode> getClassifiersInModel(SModel model) {
    return ListSequence.fromList(SModelOperations.getNodes(model, "jetbrains.mps.baseLanguage.structure.Classifier")).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.AnonymousClass"));
      }
    });
  }
  public static SNode resolveAndCache(final String refText, final SNode contextNode, final ModelPlusImportedScope modelPlusImported, final boolean includeAncestors) {

    SNode claz = SNodeOperations.getAncestor(contextNode, "jetbrains.mps.baseLanguage.structure.Classifier", true, false);
    Pair<SNode, String> key = new Pair(claz, refText);
    ResolveResult result = RepositoryStateCacheUtils.getFromCache("Classifiers_scope", key, new _FunctionTypes._return_P0_E0<ResolveResult>() {
      public ResolveResult invoke() {
        return new ResolveResult(resolve(refText, contextNode, modelPlusImported, includeAncestors));
      }
    });

    return SNodeOperations.cast(result.getResult(), "jetbrains.mps.baseLanguage.structure.Classifier");
  }
  public static SNode resolve(@NotNull String refText, @NotNull SNode contextNode, ModelPlusImportedScope modelsPlusImported, boolean includeAncestors) {
    // The algorithm: 
    // - split refText into tokens A.B.C (separated by dot) 
    // - look for the first token A among the following classifiers and models, in this order: 
    // ourselves 
    // our immediate nested classes 
    // nested classes of our enclosing classes (if we're not root) 
    // foreach C in our hierarchy: 1) try C 2) try C's immediaate nested classes 
    // walk up to our root and see if it has java import data attached 
    //   if yes, use it 
    //   if no, only then traverse all appropriate models 

    final SModel contextNodeModel = SNodeOperations.getModel(contextNode);

    SNode ourClass = SNodeOperations.getAncestor(contextNode, "jetbrains.mps.baseLanguage.structure.Classifier", true, false);
    if ((ourClass == null)) {
      // no class outside, just use simple old logic 
      return resolveNonSpecialSyntax(refText, contextNode, modelsPlusImported);
    }

    StringTokenizer tokenizer = new StringTokenizer(refText, ".");
    if (!(tokenizer.hasMoreTokens())) {
      return null;
    }
    String token = tokenizer.nextToken();

    assert token != null;

    if (!(SNodeOperations.isInstanceOf(ourClass, "jetbrains.mps.baseLanguage.structure.AnonymousClass"))) {
      if (token.equals(SPropertyOperations.getString(ourClass, "name"))) {
        return construct(ourClass, tokenizer);
      }
    }
    for (SNode nestedClas : Sequence.fromIterable(getImmediateNestedClassifiers(ourClass))) {
      if (token.equals(SPropertyOperations.getString(nestedClas, "name"))) {
        return construct(nestedClas, tokenizer);
      }
    }

    for (SNode enclosingClass : Sequence.fromIterable(getPathToRoot(ourClass))) {
      if (SNodeOperations.isInstanceOf(enclosingClass, "jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
        continue;
      }
      if (token.equals(SPropertyOperations.getString(enclosingClass, "name"))) {
        return construct(enclosingClass, tokenizer);
      }
      for (SNode nested : Sequence.fromIterable(getImmediateNestedClassifiers(enclosingClass))) {
        if (token.equals(SPropertyOperations.getString(nested, "name"))) {
          return construct(nested, tokenizer);
        }
      }
    }

    if (includeAncestors) {
      for (SNode ancestor : Sequence.fromIterable(getAncestors(ourClass))) {
        for (SNode nested : Sequence.fromIterable(getImmediateNestedClassifiers(ancestor))) {
          if (token.equals(SPropertyOperations.getString(nested, "name"))) {
            return construct(nested, tokenizer);
          }
        }
      }
    }

    SNode root = Sequence.fromIterable(getPathToRoot(ourClass)).last();
    SNode javaImports = AttributeOperations.getAttribute(root, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.baseLanguage.structure.JavaImports"));

    if (javaImports == null) {

      return resolveNonSpecialSyntax(refText, contextNode, modelsPlusImported);

    } else {
      AbstractModule module = (AbstractModule) check_8z6r2b_a0a0a0gb0m(SNodeOperations.getModel(contextNode));
      SearchScope moduleScope = (module == null ? GlobalScope.getInstance() : module.getScope());

      // walk through single-type imports 
      // TODO static imports are not handled yet 
      for (SNode imp : ListSequence.fromList(SLinkOperations.getTargets(javaImports, "entries", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return !(SPropertyOperations.getBoolean(it, "onDemand"));
        }
      })) {
        if (!(token.equals(Tokens_Behavior.call_lastToken_1296023605440030462(imp)))) {
          continue;
        }

        String fqName = SPropertyOperations.getString(imp, "tokens");

        // needed to use nonStubPriority here because: 
        // during java import in idea plugin we can stumble upon a psi stub model (the one being imported 
        // and about to be deleted) before the newly created model (which is the right one) 

        Iterable<SNode> matches = resolveClassifierByFqNameWithNonStubPriority(moduleScope.getModels(), fqName);
        return (Sequence.fromIterable(matches).count() == 1 ? construct(Sequence.fromIterable(matches).first(), tokenizer) : null);
      }

      // not found in single-type impors 

      // putting on-demand imports into model list 
      // element is either SModel or node<Classifier> 
      List<Object> javaImportedThings = ListSequence.fromList(new ArrayList<Object>());

      // models with the same name as contextNodeModel (correspond to the same package in java) 
      ListSequence.fromList(javaImportedThings).addElement(contextNodeModel);

      String ourPkgName = SModelStereotype.withoutStereotype(contextNodeModel.getModelName());
      ListSequence.fromList(javaImportedThings).addSequence(Sequence.fromIterable(getModelsByName(moduleScope, ourPkgName)).where(new IWhereFilter<SModel>() {
        public boolean accept(SModel it) {
          return it != contextNodeModel;
        }
      }));

      ListSequence.fromList(javaImportedThings).addElement(SModelRepository.getInstance().getModelDescriptor(new SModelReference("java.lang", "java_stub")));

      for (SNode imp : ListSequence.fromList(SLinkOperations.getTargets(javaImports, "entries", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getBoolean(it, "onDemand");
        }
      })) {
        String fqName = SPropertyOperations.getString(imp, "tokens");
        Iterable<SModel> models = getModelsByName(moduleScope, fqName);
        if (Sequence.fromIterable(models).isNotEmpty()) {
          ListSequence.fromList(javaImportedThings).addSequence(Sequence.fromIterable(models));
        } else {
          ListSequence.fromList(javaImportedThings).addSequence(Sequence.fromIterable(resolveClassifierByFqNameWithNonStubPriority(moduleScope.getModels(), fqName)));
        }
      }

      // go through models which correspond to java imported packages 
      for (Object thing : javaImportedThings) {
        // FIXME will be unnecessary when transient models live in a separate repository 
        if (!(thing.equals(contextNodeModel)) && thing instanceof SModel && (((SModel) thing).getModule() instanceof TransientModelsModule)) {
          continue;
        }

        SNode theResult = null;
        boolean wasResult = false;

        // TODO try to use some fast find support 
        Iterable<? extends SNode> roots = (thing instanceof SModel ? ((SModel) thing).getRootNodes() : SNodeOperations.ofConcept(SLinkOperations.getTargets(SNodeOperations.cast(((SNode) thing), "jetbrains.mps.baseLanguage.structure.Classifier"), "member", true), "jetbrains.mps.baseLanguage.structure.Classifier"));

        for (SNode r : roots) {
          if (!(SNodeOperations.isInstanceOf(r, "jetbrains.mps.baseLanguage.structure.Classifier"))) {
            continue;
          }
          if (token.equals(SPropertyOperations.getString(SNodeOperations.cast(r, "jetbrains.mps.baseLanguage.structure.Classifier"), "name"))) {
            if (theResult != null) {
              // ambiguity 
              return null;
            }
            theResult = construct(SNodeOperations.cast(r, "jetbrains.mps.baseLanguage.structure.Classifier"), tokenizer);
            wasResult = true;
          }
        }

        // if it was null, we should return anyway 
        if (wasResult) {
          return theResult;
        }
      }
    }

    // try to use old logic 
    return resolveNonSpecialSyntax(refText, contextNode, modelsPlusImported);

  }
  public static Iterable<SNode> getImmediateNestedClassifiers(SNode clas) {
    // TODO are there other deprecated member roles 
    return ListSequence.fromList(SLinkOperations.getTargets(clas, "member", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SConceptOperations.isSubConceptOf(SNodeOperations.getConceptDeclaration(it), "jetbrains.mps.baseLanguage.structure.Classifier");
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.Classifier");
      }
    }).concat(ListSequence.fromList(SLinkOperations.getTargets(clas, "staticInnerClassifiers", true)));
  }
  public static Iterable<SNode> getPathToRoot(SNode clas) {
    // TODO make more precise: take role into consideration 
    return SNodeOperations.getAncestors(clas, "jetbrains.mps.baseLanguage.structure.Classifier", true);
  }
  public static Iterable<SNode> getAncestors(SNode clas) {
    final Queue<SNode> queue = QueueSequence.fromQueue(new LinkedList<SNode>());
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());

    QueueSequence.fromQueue(queue).addLastElement(clas);

    while (QueueSequence.fromQueue(queue).isNotEmpty()) {

      SNode claz = QueueSequence.fromQueue(queue).removeFirstElement();
      ListSequence.fromList(result).addElement(claz);

      if (SNodeOperations.isInstanceOf(claz, "jetbrains.mps.baseLanguage.structure.AnonymousClass")) {
        QueueSequence.fromQueue(queue).addLastElement(SLinkOperations.getTarget(SNodeOperations.cast(claz, "jetbrains.mps.baseLanguage.structure.AnonymousClass"), "classifier", false));

      } else if (SNodeOperations.isInstanceOf(claz, "jetbrains.mps.baseLanguage.structure.ClassConcept")) {
        SNode supr = SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(claz, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "superclass", true), "classifier", false);
        if ((supr != null)) {
          QueueSequence.fromQueue(queue).addLastElement(supr);
        }
        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(claz, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "implementedInterface", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return (SLinkOperations.getTarget(it, "classifier", false) != null);
          }
        }).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SLinkOperations.getTarget(it, "classifier", false);
          }
        }).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            QueueSequence.fromQueue(queue).addLastElement(it);
          }
        });

      } else if (SNodeOperations.isInstanceOf(claz, "jetbrains.mps.baseLanguage.structure.Interface")) {
        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(claz, "jetbrains.mps.baseLanguage.structure.Interface"), "extendedInterface", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return (SLinkOperations.getTarget(it, "classifier", false) != null);
          }
        }).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SLinkOperations.getTarget(it, "classifier", false);
          }
        }).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            QueueSequence.fromQueue(queue).addLastElement(it);
          }
        });
      }

    }
    // or just classes, doesn't really matter 
    return ListSequence.fromList(result).skip(1);
  }
  public static SNode construct(SNode base, StringTokenizer tokenizer) {
    SNode curr = base;
    while ((curr != null) && tokenizer.hasMoreTokens()) {
      final String tok = tokenizer.nextToken();
      curr = Sequence.fromIterable(getImmediateNestedClassifiers(curr)).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return tok.equals(SPropertyOperations.getString(it, "name"));
        }
      });
    }
    return curr;
  }
  public static SNode resolveFqName(String refText, Iterable<SModel> models, SModel contextNodeModel) {
    // FIXME constant 20 
    int[] dotPositions = new int[20];
    int lastDot = -1;
    int k = 0;

    while ((lastDot = refText.indexOf(".", lastDot + 1)) > 0) {
      dotPositions[k] = lastDot;
      k++;
    }

    // try the longest name first, the shortest last 
    // we start with x.y when refText is x.y.z 
    for (int p = k - 1; p >= 0; p--) {

      String pkgName = refText.substring(0, dotPositions[p]);

      for (SModel m : Sequence.fromIterable(models)) {

        if (!(pkgName.equals(SModelStereotype.withoutStereotype(m.getModelName())))) {
          continue;
        }

        // FIXME will be unnecessary when transient models live in a separate repository 
        if (!(m.equals(contextNodeModel)) && m instanceof SModel && (m.getModule() instanceof TransientModelsModule)) {
          continue;
        }

        String refTextWithoutPackage = refText.substring(dotPositions[p] + 1);
        StringTokenizer tokenizer = new StringTokenizer(refTextWithoutPackage, ".");
        assert tokenizer.hasMoreTokens();
        String className = tokenizer.nextToken();
        SNode cls = null;
        for (SNode r : m.getRootNodes()) {
          if (!(SNodeOperations.isInstanceOf(r, "jetbrains.mps.baseLanguage.structure.Classifier"))) {
            continue;
          }
          if (className.equals(SPropertyOperations.getString(SNodeOperations.cast(r, "jetbrains.mps.baseLanguage.structure.Classifier"), "name"))) {
            cls = SNodeOperations.cast(r, "jetbrains.mps.baseLanguage.structure.Classifier");
          }
        }
        if ((cls == null)) {
          continue;
        }
        cls = construct(cls, tokenizer);
        if ((cls == null)) {
          continue;
        }

        return cls;
      }
    }
    return null;
  }
  public static Iterable<SModel> getModelsByName(SearchScope moduleScope, String name) {
    List<SModel> models = ListSequence.fromList(new ArrayList<SModel>());

    for (SModel candidate : Sequence.fromIterable(moduleScope.getModels())) {
      if (SModelStereotype.withoutStereotype(candidate.getReference().getModelName()).equals(name)) {
        // partial order: all models with stereotype after all models without it 
        if ("".equals(SModelStereotype.getStereotype(candidate))) {
          ListSequence.fromList(models).insertElement(0, candidate);
        } else {
          ListSequence.fromList(models).addElement(candidate);
        }
      }
    }

    return models;
  }
  public static Iterable<SNode> staticImportedMethods(SNode imports) {
    return staticImportedThings(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"), imports);
  }
  public static Iterable<SNode> staticImportedFields(SNode imports) {
    return staticImportedThings(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"), imports);
  }
  /**
   * methodsOrFields: true for methods. false for fields
   */
  public static Iterable<SNode> staticImportedThings(final SNode neededConcept, SNode imports) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    SModule module = SNodeOperations.getModel(imports).getModule();
    GlobalModuleDependenciesManager gmdm = new GlobalModuleDependenciesManager(module);
    Iterable<SModule> modules = gmdm.getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE);
    Iterable<SModel> models = Sequence.fromIterable(modules).translate(new ITranslator2<SModule, SModel>() {
      public Iterable<SModel> translate(SModule it) {
        return it.getModels();
      }
    });
    for (SNode imp : ListSequence.fromList(SLinkOperations.getTargets(imports, "entries", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getBoolean(it, "static");
      }
    })) {

      if (SPropertyOperations.getBoolean(imp, "onDemand")) {
        String className = SPropertyOperations.getString(imp, "tokens");
        Iterable<SNode> classes = resolveClassifierByFqNameWithNonStubPriority(models, className);
        SNode containingClas = (Sequence.fromIterable(classes).count() == 1 ? Sequence.fromIterable(classes).first() : null);
        if ((containingClas == null)) {
          continue;
        }

        Iterable<SNode> neededMembers = ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), containingClas, "virtual_getMembers_1213877531970", new Object[]{})).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.getConceptDeclaration(it) == neededConcept;
          }
        });
        ListSequence.fromList(result).addSequence(Sequence.fromIterable(neededMembers));

      } else {

        final String memberName = Tokens_Behavior.call_lastToken_1296023605440030462(imp);
        String className = Tokens_Behavior.call_withoutLastToken_6148840541591441572(imp);

        Iterable<SNode> classes = resolveClassifierByFqNameWithNonStubPriority(models, className);

        SNode containingClas = (Sequence.fromIterable(classes).count() == 1 ? Sequence.fromIterable(classes).first() : null);
        if ((containingClas == null)) {
          continue;
        }

        // or findAll instead of findFirst ? 
        SNode neededMember = ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), containingClas, "virtual_getMembers_1213877531970", new Object[]{})).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.getConceptDeclaration(it) == neededConcept;
          }
        }).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return memberName.equals(it.getName());
          }
        });

        if ((neededMember == null)) {
          continue;
        }

        ListSequence.fromList(result).addElement(neededMember);
      }
    }
    return result;
  }
  public static boolean isImportedBy(SNode node, SNode imports) {
    // TODO on-demand imports and probably inherited classes 
    String name = SPropertyOperations.getString(node, "name");
    for (SNode singleTypeImp : ListSequence.fromList(SLinkOperations.getTargets(imports, "entries", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SPropertyOperations.getBoolean(it, "onDemand"));
      }
    })) {
      if (Tokens_Behavior.call_lastToken_1296023605440030462(singleTypeImp).equals(name)) {
        return true;
      }
    }
    return false;
  }
  private static SModule check_8z6r2b_a0i0c(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }
  private static SModule check_8z6r2b_a0d0d(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }
  private static SModule check_8z6r2b_a0a0a0gb0m(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }
  private static boolean eq_8z6r2b_a0a0a0a0a0a0b0e(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean neq_8z6r2b_a0a0a0a0a0a0f0f(Object a, Object b) {
    return !((a != null ? a.equals(b) : a == b));
  }
  private static boolean eq_8z6r2b_a0a0a0a0a0a9a5(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
