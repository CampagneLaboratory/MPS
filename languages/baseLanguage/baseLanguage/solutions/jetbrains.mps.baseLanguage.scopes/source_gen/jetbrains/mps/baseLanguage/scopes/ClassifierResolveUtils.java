package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.project.GlobalScope;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.LanguageID;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class ClassifierResolveUtils {
  private ClassifierResolveUtils() {
  }

  public static SNode resolveSpecialSyntax(@NotNull String refText, @NotNull SNode contextNode) {
    if (!(refText.startsWith("["))) {
      throw new IllegalArgumentException();
    }
    if (!(refText.contains("]"))) {
      throw new IllegalArgumentException();
    }
    String targetModelName = refText.substring(1, refText.indexOf("]"));
    String targetNodeFqName = targetModelName + "." + refText.substring(refText.indexOf("]") + 1);

    return resolveWithSpecifiedTargetModelName(targetModelName, targetNodeFqName, SNodeOperations.getModel(contextNode));
  }

  public static SNode resolveNonSpecialSyntax(@NotNull String classifierName, @NotNull SNode contextNode) {
    // try to resolve as nested name in current model 
    Iterable<SNode> result = resolveClassifierByNestedName(check_8z6r2b_a0a1a1(SNodeOperations.getModel(contextNode)), classifierName);
    if (Sequence.fromIterable(result).isNotEmpty()) {
      return ((int) Sequence.fromIterable(result).count() == 1 ?
        Sequence.fromIterable(result).first() :
        null
      );
    }

    // try to resolve as fq name in current model 
    result = resolveClassifierByFqName(check_8z6r2b_a0a5a1(SNodeOperations.getModel(contextNode)), classifierName);
    if (Sequence.fromIterable(result).isNotEmpty()) {
      return ((int) Sequence.fromIterable(result).count() == 1 ?
        Sequence.fromIterable(result).first() :
        null
      );
    }

    // try to resolve as fq name in current scope 
    Iterable<IModule> visibleModules = check_8z6r2b_a0a9a1(check_8z6r2b_a0a0j0b(check_8z6r2b_a0a0a9a1(SNodeOperations.getModel(contextNode)))).getVisibleModules();
    result = resolveClassifierByFqNameWithNonStubPriority(Sequence.fromIterable(visibleModules).translate(new ITranslator2<IModule, SModelDescriptor>() {
      public Iterable<SModelDescriptor> translate(IModule it) {
        return it.getOwnModelDescriptors();
      }
    }), classifierName);
    return ((int) Sequence.fromIterable(result).count() == 1 ?
      Sequence.fromIterable(result).first() :
      null
    );
  }

  public static SNode resolveWithSpecifiedTargetModelName(@NotNull String targetModelName, @NotNull String classifierFqName, @Nullable SModel sourceModel) {
    Iterable<SNode> sameModelResult = resolveClassifierByFqName(check_8z6r2b_a0a0a2(sourceModel), classifierFqName);
    if (Sequence.fromIterable(sameModelResult).isNotEmpty()) {
      return ((int) Sequence.fromIterable(sameModelResult).count() == 1 ?
        Sequence.fromIterable(sameModelResult).first() :
        null
      );
    }

    IScope modelScope = check_8z6r2b_a0d0c(check_8z6r2b_a0a3a2(check_8z6r2b_a0a0d0c(sourceModel)));

    if (modelScope != null) {
      Iterable<SNode> result = resolveInScope(targetModelName, classifierFqName, modelScope);
      if (Sequence.fromIterable(result).isNotEmpty()) {
        return ((int) Sequence.fromIterable(result).count() == 1 ?
          Sequence.fromIterable(result).first() :
          null
        );
      }
    }

    Iterable<SNode> result = resolveInScope(targetModelName, classifierFqName, GlobalScope.getInstance());
    return ((int) Sequence.fromIterable(result).count() == 1 ?
      Sequence.fromIterable(result).first() :
      null
    );
  }

  private static Iterable<SNode> resolveInScope(@NotNull String targetModelName, @NotNull String classifierFqName, @NotNull IScope scope) {
    return resolveClassifierByFqNameWithNonStubPriority(getModelsWithNameInScope(scope, targetModelName), classifierFqName);
  }

  private static Iterable<SModelDescriptor> getModelsWithNameInScope(@NotNull IScope scope, @NotNull String modelLongName) {
    // todo: go through all stereotypes and resolve by long name and stereotype 
    List<SModelDescriptor> result = ListSequence.fromList(new ArrayList<SModelDescriptor>());
    for (IModule module : Sequence.fromIterable(scope.getVisibleModules())) {
      for (SModelDescriptor modelDescriptor : ListSequence.fromList(module.getOwnModelDescriptors())) {
        if (eq_8z6r2b_a0a0a0c0e(modelDescriptor.getLongName(), modelLongName)) {
          ListSequence.fromList(result).addElement(modelDescriptor);
        }
      }
    }
    return result;
  }

  private static Iterable<SNode> resolveClassifierByFqNameWithNonStubPriority(Iterable<SModelDescriptor> models, String classifierFqName) {
    final String stubStereoType = SModelStereotype.getStubStereotypeForId(LanguageID.JAVA);

    // resolve without stubs 
    Iterable<SNode> result = resolveClassifierByFqName(Sequence.fromIterable(models).where(new IWhereFilter<SModelDescriptor>() {
      public boolean accept(SModelDescriptor it) {
        return neq_8z6r2b_a0a0a0a0a0a0d0f(it.getStereotype(), stubStereoType);
      }
    }), classifierFqName);
    if (Sequence.fromIterable(result).isNotEmpty()) {
      return result;
    }

    // resolve with stubs 
    return resolveClassifierByFqName(Sequence.fromIterable(models).where(new IWhereFilter<SModelDescriptor>() {
      public boolean accept(SModelDescriptor it) {
        return eq_8z6r2b_a0a0a0a0a0a7a5(it.getStereotype(), stubStereoType);
      }
    }), classifierFqName);
  }

  private static Iterable<SNode> resolveClassifierByFqName(Iterable<SModelDescriptor> models, final String classifierFqName) {
    return Sequence.fromIterable(models).translate(new ITranslator2<SModelDescriptor, SNode>() {
      public Iterable<SNode> translate(SModelDescriptor it) {
        return resolveClassifierByFqName(it, classifierFqName);
      }
    });
  }

  private static Iterable<SNode> resolveClassifierByFqName(SModelDescriptor modelDescriptor, String classifierFqName) {
    assert !(classifierFqName.contains("$"));

    if (!(classifierFqName.startsWith(modelDescriptor.getLongName()))) {
      return Collections.<SNode>emptyList();
    }

    String classifierNestedName = classifierFqName.substring(modelDescriptor.getLongName().length() + 1);
    return resolveClassifierByNestedName(modelDescriptor, classifierNestedName);
  }

  private static Iterable<SNode> resolveClassifierByNestedName(SModelDescriptor modelDescriptor, String classifierNestedName) {
    assert !(classifierNestedName.contains("$"));

    SModel model = modelDescriptor.getSModel();
    if (model == null) {
      // todo: ? 
      return Collections.<SNode>emptyList();
    }

    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode classifier : getClassifiersInModel(model)) {
      if (classifierNestedName.equals(getNestedName(classifier))) {
        ListSequence.fromList(result).addElement(classifier);
      }
    }
    return result;
  }

  private static String getNestedName(SNode classifier) {
    String name = SPropertyOperations.getString(classifier, "name");
    if (name == null) {
      name = "";
    }
    SNode parent = SNodeOperations.getParent(classifier);
    if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.Classifier")) {
      return getNestedName(SNodeOperations.cast(parent, "jetbrains.mps.baseLanguage.structure.Classifier")) + "." + name;
    }
    return name;
  }

  private static Iterable<SNode> getClassifiersInModel(SModel model) {
    Iterable<SNode> classifiers = model.getFastNodeFinder().getNodes("jetbrains.mps.baseLanguage.structure.Classifier", true);
    return (Iterable<SNode>) Sequence.fromIterable(classifiers).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.AnonymousClass"));
      }
    });
  }

  private static SModelDescriptor check_8z6r2b_a0a1a1(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelDescriptor();
    }
    return null;
  }

  private static SModelDescriptor check_8z6r2b_a0a5a1(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelDescriptor();
    }
    return null;
  }

  private static IScope check_8z6r2b_a0a9a1(IModule checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getScope();
    }
    return null;
  }

  private static IModule check_8z6r2b_a0a0j0b(SModelDescriptor checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }

  private static SModelDescriptor check_8z6r2b_a0a0a9a1(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelDescriptor();
    }
    return null;
  }

  private static SModelDescriptor check_8z6r2b_a0a0a2(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelDescriptor();
    }
    return null;
  }

  private static IScope check_8z6r2b_a0d0c(IModule checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getScope();
    }
    return null;
  }

  private static IModule check_8z6r2b_a0a3a2(SModelDescriptor checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }

  private static SModelDescriptor check_8z6r2b_a0a0d0c(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelDescriptor();
    }
    return null;
  }

  private static boolean eq_8z6r2b_a0a0a0c0e(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean neq_8z6r2b_a0a0a0a0a0a0d0f(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  private static boolean eq_8z6r2b_a0a0a0a0a0a7a5(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
