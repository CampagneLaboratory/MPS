package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Map;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class MethodSignature implements Signature {
  private final String singature;

  public MethodSignature(SNode method, Map<SNode, SNode> typeVarToType) {
    this.singature = getStringSignature(method, typeVarToType);
  }

  @Override
  public int hashCode() {
    return MethodSignature.class.hashCode() ^ singature.hashCode();
  }

  @Override
  public boolean equals(Object object) {
    if (!(object instanceof MethodSignature)) {
      return false;
    }
    MethodSignature arg = (MethodSignature) object;
    return eq_1fkaqj_a0c0b(this.singature, arg.singature);
  }

  public static String getStringSignature(SNode method, Map<SNode, SNode> typeVarToType) {
    return SPropertyOperations.getString(method, "name") + "(" + ClassifierScopeUtils.createMethodParameterTypesString(method, typeVarToType) + ")";
  }

  private static boolean eq_1fkaqj_a0c0b(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
