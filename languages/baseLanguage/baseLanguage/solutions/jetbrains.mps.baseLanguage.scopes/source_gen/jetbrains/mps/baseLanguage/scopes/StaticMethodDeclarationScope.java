package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import java.util.Map;

@Deprecated
public class StaticMethodDeclarationScope extends BaseMethodsScope {
  @Deprecated
  public StaticMethodDeclarationScope(SNode classNode, Iterable<SNode> extendedClassifiers) {
    super(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"), classNode, extendedClassifiers);
  }

  public String getSignatureForOverriding(SNode method, SNode contextClassifier) {
    return SPropertyOperations.getString(method, "name") + "(" + BehaviorReflection.invokeNonVirtual(String.class, method, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", "call_getErasureSignature_2830572026628006618", new Object[]{}) + ")";
  }

  @Nullable
  public SNode resolveMethod(SNode contextNode, @NotNull String refText, List<SNode> actualArguments, List<SNode> methods) {
    Map<SNode, SNode> typeByTypeVar = ClassifierScopeUtils.resolveClassifierTypeVars(classifier);
    return MethodResolveUtil.chooseByParameterType(methods, actualArguments, typeByTypeVar);
  }
}
