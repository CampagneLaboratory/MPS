package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import java.util.Set;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import org.jetbrains.annotations.Nullable;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.scope.EmptyScope;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.scopes.runtime.SimpleScope;

public class HidingByNameScope extends Scope {
  private Scope visible;
  private Scope hidden;
  private Set<String> names;
  private boolean onlyHide;

  public HidingByNameScope(@NotNull Scope visible, @NotNull Scope hidden, boolean onlyHide) {
    this.visible = visible;
    this.hidden = hidden;
    // todo: maybe lazy in getAvailableElements? 
    this.names = SetSequence.fromSetWithValues(new HashSet(), ListSequence.fromList(visible.getAvailableElements(null)).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.lang.core.structure.INamedConcept"), "name");
      }
    }));
    this.onlyHide = onlyHide;
  }

  public List<SNode> getAvailableElements(@Nullable String prefix) {
    List<SNode> result = new ArrayList<SNode>();

    if (!(onlyHide)) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(visible.getAvailableElements(prefix)));
    }
    ListSequence.fromList(result).addSequence(ListSequence.fromList(hidden.getAvailableElements(prefix)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (!(SetSequence.fromSet(names).contains(SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.lang.core.structure.INamedConcept"), "name"))));
      }
    }));

    return result;
  }

  @Nullable
  public SNode resolve(SNode contextNode, @NotNull String refText) {
    // todo 
    return null;
  }

  @Nullable
  public String getReferenceText(SNode contextNode, @NotNull SNode node) {
    // todo 
    return null;
  }

  public static Scope create(Scope visible, Scope hidden, boolean onlyHide) {
    if (visible == null || visible instanceof EmptyScope) {
      return hidden;
    }
    if (hidden == null || hidden instanceof EmptyScope) {
      if (onlyHide) {
        return new EmptyScope();
      } else {
        return visible;
      }
    }
    return new HidingByNameScope(visible, hidden, onlyHide);
  }

  public static Scope create(Iterable<SNode> visible, Scope hidden, boolean onlyHide) {
    if (Sequence.fromIterable(visible).isEmpty()) {
      return hidden;
    }
    if (hidden == null || hidden instanceof EmptyScope) {
      if (onlyHide) {
        return new EmptyScope();
      } else {
        return new SimpleScope(visible);
      }
    }
    return new HidingByNameScope(new SimpleScope(visible), hidden, onlyHide);
  }
}
