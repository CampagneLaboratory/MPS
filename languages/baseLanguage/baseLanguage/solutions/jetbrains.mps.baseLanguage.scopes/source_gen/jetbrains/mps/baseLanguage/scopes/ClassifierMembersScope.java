package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import jetbrains.mps.smodel.SNode;
import java.util.Set;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.ISetSequence;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.annotations.Nullable;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.Sequence;

public abstract class ClassifierMembersScope extends Scope {
  protected static Log log = LogFactory.getLog(ClassifierMembersScope.class);

  private final SNode classifier;
  private final SNode kind;
  private Set<SNode> members;
  private Set<String> names;

  public ClassifierMembersScope(final SNode classifier, final SNode kind) {
    // lazy? I need lazy??? =( 
    this.classifier = classifier;
    this.kind = kind;
  }

  private synchronized void checkInit() {
    // simplest version for now 
    if (names == null) {
      members = TransactionCacheUtils.getFromCache(ClassifierMembersScope.class, MultiTuple.<SNode,SNode>from(classifier, kind), new _FunctionTypes._return_P0_E0<ISetSequence<SNode>>() {
        public ISetSequence<SNode> invoke() {
          // <node> 
          return SetSequence.fromSetWithValues(new HashSet<SNode>(), getMembers(null));
        }
      });
      names = SetSequence.fromSetWithValues(new HashSet(), SetSequence.fromSet(members).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.core.structure.INamedConcept");
        }
      }).select(new ISelector<SNode, String>() {
        public String select(SNode it) {
          return SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.lang.core.structure.INamedConcept"), "name");
        }
      }));
    }
  }

  protected abstract Iterable<SNode> getMembers(@Nullable String prefix);

  @Override
  public boolean contains(SNode node) {
    checkInit();
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember") && SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.core.structure.INamedConcept"))) {
      return false;
    }
    if (!(SetSequence.fromSet(names).contains(SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.lang.core.structure.INamedConcept"), "name")))) {
      return false;
    }
    return SetSequence.fromSet(members).contains(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassifierMember"));
  }

  public List<SNode> getAvailableElements(@Nullable String prefix) {
    checkInit();
    if (prefix == null) {
      return ListSequence.fromListWithValues(new ArrayList(), members);
    }

    List<SNode> result = new ArrayList<SNode>();
    for (SNode member : SetSequence.fromSet(members)) {
      if (SNodeOperations.isInstanceOf(member, "jetbrains.mps.lang.core.structure.INamedConcept")) {
        String name = SPropertyOperations.getString(SNodeOperations.cast(member, "jetbrains.mps.lang.core.structure.INamedConcept"), "name");
        if (name != null && name.startsWith(prefix)) {
          ListSequence.fromList(result).addElement(member);
        }
      }
    }
    return result;
  }

  @Nullable
  public SNode resolve(SNode contextNode, @NotNull final String refText) {
    checkInit();
    if (!(SetSequence.fromSet(names).contains(refText))) {
      return null;
    }
    Iterable<SNode> pretenders = SetSequence.fromSet(members).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.core.structure.INamedConcept") && refText.equals(SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.lang.core.structure.INamedConcept"), "name"));
      }
    });
    return (Sequence.fromIterable(pretenders).isNotEmpty() ?
      Sequence.fromIterable(pretenders).first() :
      null
    );
  }

  @Nullable
  public String getReferenceText(SNode contextNode, @NotNull SNode node) {
    return SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.lang.core.structure.INamedConcept"), "name");
  }
}
