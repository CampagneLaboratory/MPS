package jetbrains.mps.gwt.client.stubs;

/*Generated by MPS */

import jetbrains.mps.smodel.persistence.ModelRootManagerBase;
import java.util.Collection;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.SModelRoot;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.stubs.util.StubModelDescriptors;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.descriptor.source.StubModelDataSource;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.stubs.util.PathItem;

public class GWTModuleStubs extends ModelRootManagerBase {
  public GWTModuleStubs() {
  }

  @Override
  public Collection<SModel> load(@NotNull SModelRoot modelRoot) {
    List<SModel> res = ListSequence.fromList(new ArrayList<SModel>());
    ListSequence.fromList(res).addSequence(SetSequence.fromSet(new StubModelDescriptors(SModelStereotype.getStubStereotypeForId("gwt"), modelRoot.getModelRoot().getPath(), modelRoot.getModule()) {
      @Override
      public StubModelDataSource createStubsSource(String loc) {
        return new GWTStubsSource(loc);
      }
    }.getDescriptors(new _FunctionTypes._return_P1_E0<PathItem, String>() {
      public PathItem invoke(String path) {
        return GWTModulePathItem.getPathItem(path);
      }
    })));
    return res;
  }
}
