package jetbrains.mps.baseLanguage.regexp.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

/**
 * will be removed after 3.3
 * need to support the legacy static direct method calls
 */
@Deprecated
public class SymbolClassPart_Behavior {
  public static String call_validateChar_8173814113624732613(SNode __thisNode__, String s) {
    StringBuilder sb = new StringBuilder();
    int i = 0;
    char c = s.charAt(i);
    if (c == '\\') {
      sb.append(c);
      if (++i >= s.length()) {
        return null;
      }
      c = s.charAt(i);
      if (c == 'u') {
        sb.append(c);
        for (int e = 0; e < 4; e++) {
          if (++i >= s.length()) {
            return null;
          }
          c = s.charAt(i);
          if (!(StringLiteralRegexp_BehaviorDescriptor.isHexChar_id7KMCQ$NHaYO.invoke(SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a0992dL, "jetbrains.mps.baseLanguage.regexp.structure.StringLiteralRegexp").getDeclarationNode()), c))) {
            return null;
          }
          sb.append(c);
        }
      } else if (Character.isDigit(c)) {
        sb.append(c);
        for (int e = 0; e < 2; e++) {
          if (++i >= s.length()) {
            return null;
          }
          c = s.charAt(i);
          if (!(Character.isDigit(c))) {
            return null;
          }
          sb.append(c);
        }
      } else if (c == 'n' || c == 't' || c == 'b' || c == 'f' || c == 'r' || c == '"' || c == '\'' || c == '\\') {
        sb.append(c);
      } else {
        return null;
      }
    } else if (c < 32) {
      return null;
    } else if (c < 128) {
      if (c == '-' || c == '(' || c == ')' || c == '[' || c == ']' || c == '{' || c == '}' || c == '+' || c == '*' || c == '?' || c == '|' || c == '^' || c == '.' || c == '$') {
        sb.append('\\');
      }
      sb.append(c);
    } else {
      sb.append("\\u");
      String val = Integer.toString(c, 16);
      sb.append("0000".substring(val.length()) + val);
    }
    i++;
    if (i != s.length()) {
      return null;
    }
    return sb.toString();
  }
  public static String call_escapeChar_8173814113624637238(SNode __thisNode__, String s) {
    String res = SymbolClassPart_BehaviorDescriptor.validateChar_id75Jea4IFjf5.invoke(__thisNode__, s);
    if (res == null) {
      if (s.equals("\\")) {
        return "\\\\";
      }
      return "\\?";
    }
    return res;
  }
}
