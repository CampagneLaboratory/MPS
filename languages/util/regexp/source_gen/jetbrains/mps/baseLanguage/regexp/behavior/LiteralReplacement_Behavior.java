package jetbrains.mps.baseLanguage.regexp.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class LiteralReplacement_Behavior {
  public static void init(SNode thisNode) {
  }

  public static String virtual_toString_3796137614137538905(SNode thisNode, SNode search) {
    return LiteralReplacement_Behavior.call_toRegexp_3796137614137565586(thisNode, SPropertyOperations.getString(thisNode, "text"));
  }

  public static boolean call_isValid_3796137614137567952(SNode thisNode) {
    if (isEmpty_r6ccyf_a0a0c(SPropertyOperations.getString(thisNode, "text"))) {
      return false;
    }
    return LiteralReplacement_Behavior.call_toRegexp_3796137614137565586(thisNode, SPropertyOperations.getString(thisNode, "text")) != null;
  }

  public static String call_toRegexp_3796137614137565586(SNode thisNode, String s) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < s.length(); i++) {
      char c = s.charAt(i);
      if (c == '\\') {
        sb.append(c);
        if (++i >= s.length()) {
          return null;
        }
        c = s.charAt(i);
        if (c == 'u') {
          sb.append(c);
          for (int e = 0; e < 4; e++) {
            if (++i >= s.length()) {
              return null;
            }
            c = s.charAt(i);
            if (!(StringLiteralRegexp_Behavior.call_isHexChar_8949395081772969908(SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.StringLiteralRegexp"))), c))) {
              return null;
            }
            sb.append(c);
          }
        } else if (Character.isDigit(c)) {
          sb.append(c);
          for (int e = 0; e < 2; e++) {
            if (++i >= s.length()) {
              return null;
            }
            c = s.charAt(i);
            if (!(Character.isDigit(c))) {
              return null;
            }
            sb.append(c);
          }
        } else if (c == 'n' || c == 't' || c == 'b' || c == 'f' || c == 'r' || c == '"' || c == '\'') {
          sb.append(c);
        } else if (c == '\\') {
          sb.append("\\\\\\");
        } else {
          return null;
        }
      } else if (c < 32) {
        return null;
      } else if (c < 128) {
        if (c == '$') {
          sb.append('\\');
          sb.append('\\');
        } else if (c == '"') {
          sb.append('\\');
        }
        sb.append(c);
      } else {
        sb.append("\\u");
        String val = Integer.toString(c, 16);
        sb.append("0000".substring(val.length()) + val);
      }
    }
    return sb.toString();
  }

  @Deprecated
  public static String call_toString_3796137614137538916(SNode thisNode, SNode search) {
    return BehaviorReflection.invokeVirtual(String.class, thisNode, "virtual_toString_3796137614137538905", new Object[]{search});
  }

  @Deprecated
  public static String callSuper_toString_3796137614137538916(SNode thisNode, String callerConceptFqName, SNode search) {
    return BehaviorManager.getInstance().invokeSuper(String.class, SNodeOperations.cast(thisNode, "jetbrains.mps.baseLanguage.regexp.structure.LiteralReplacement"), callerConceptFqName, "virtual_toString_3796137614137538905", new Class[]{SNode.class, SNode.class}, new Object[]{search});
  }

  public static boolean isEmpty_r6ccyf_a0a0c(String str) {
    return str == null || str.length() == 0;
  }
}
