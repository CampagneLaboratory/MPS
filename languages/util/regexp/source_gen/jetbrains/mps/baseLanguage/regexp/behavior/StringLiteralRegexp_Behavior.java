package jetbrains.mps.baseLanguage.regexp.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

/**
 * Will be removed after 3.3
 * Need to support the legacy static direct method calls
 */
@Deprecated
public class StringLiteralRegexp_Behavior {
  public static String call_toRegexp_8330008649152995372(SNode __thisNode__, String s) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < s.length(); i++) {
      char c = s.charAt(i);
      if (c == '\\') {
        sb.append(c);
        if (++i >= s.length()) {
          return null;
        }
        c = s.charAt(i);
        if (c == 'u') {
          sb.append(c);
          for (int e = 0; e < 4; e++) {
            if (++i >= s.length()) {
              return null;
            }
            c = s.charAt(i);
            if (!(StringLiteralRegexp__BehaviorDescriptor.isHexChar_id7KMCQ$NHaYO.invoke(SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a0992dL, "jetbrains.mps.baseLanguage.regexp.structure.StringLiteralRegexp").getDeclarationNode()), c))) {
              return null;
            }
            sb.append(c);
          }
        } else if (Character.isDigit(c)) {
          sb.append(c);
          for (int e = 0; e < 2; e++) {
            if (++i >= s.length()) {
              return null;
            }
            c = s.charAt(i);
            if (!(Character.isDigit(c))) {
              return null;
            }
            sb.append(c);
          }
        } else if (c == 'n' || c == 't' || c == 'b' || c == 'f' || c == 'r' || c == '"' || c == '\'' || c == '\\') {
          sb.append(c);
        } else {
          return null;
        }
      } else if (c < 32) {
        return null;
      } else if (c < 128) {
        if (c == '(' || c == ')' || c == '[' || c == ']' || c == '{' || c == '}' || c == '+' || c == '*' || c == '?' || c == '|' || c == '^' || c == '.' || c == '$') {
          sb.append('\\');
        }
        sb.append(c);
      } else {
        sb.append("\\u");
        String val = Integer.toString(c, 16);
        sb.append("0000".substring(val.length()) + val);
      }
    }
    return sb.toString();
  }
  public static boolean call_isHexChar_8949395081772969908(SAbstractConcept __thisConcept__, char c) {
    return Character.isDigit(c) || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
  }
}
