package jetbrains.mps.baseLanguage.regexp.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.EditorContextHint;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  private Collection<EditorContextHint> myHints;

  {
    myHints = Collections.emptyList();
  }

  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0c, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AtLeastNTimesRegexp_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new BinaryRegexp_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new CharacterSymbolClassPart_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new DotRegexp_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new FindMatchExpression_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new FindMatchStatement_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new ForEachMatchStatement_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new FromNToMTimesRegexp_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new InlineRegexpExpression_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new IntersectionSymbolClassPart_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new IntervalSymbolClassPart_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new LineEndRegexp_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new LineStartRegexp_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new LiteralReplacement_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new LookRegexp_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new MatchParensRegexp_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new MatchRegexpExpression_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new MatchRegexpOperation_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new MatchRegexpStatement_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new MatchVariableReference_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new MatchVariableReferenceRegexp_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new MatchVariableReferenceReplacement_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new NTimesRegexp_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new NegativeSymbolClassRegexp_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new OrRegexp_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new ParensRegexp_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new PositiveSymbolClassRegexp_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new PredefinedSymbolClassDeclaration_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new PredefinedSymbolClassRegexp_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new PredefinedSymbolClassSymbolClassPart_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new PredefinedSymbolClasses_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new Regexp_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new RegexpDeclaration_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new RegexpDeclarationReferenceRegexp_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new Regexps_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new ReplaceBlock_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new ReplaceRegexpOperation_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new ReplaceWithRegexpExpression_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new ReplaceWithRegexpOperation_Editor());
      case 39:
        return Collections.<ConceptEditor>singletonList(new SeqRegexp_Editor());
      case 40:
        return Collections.<ConceptEditor>singletonList(new SplitExpression_Editor());
      case 41:
        return Collections.<ConceptEditor>singletonList(new SplitOperation_Editor());
      case 42:
        return Collections.<ConceptEditor>singletonList(new StringLiteralRegexp_Editor());
      case 43:
        return Collections.<ConceptEditor>singletonList(new UnaryRegexp_Editor());
      case 44:
        return Collections.<ConceptEditor>singletonList(new UnicodeCharacterRegexp_Editor());
      default:
    }
    return Collections.emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    return Collections.emptyList();
  }



  public Collection<EditorContextHint> getHints() {
    return myHints;
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0c = new String[]{"jetbrains.mps.baseLanguage.regexp.structure.AtLeastNTimesRegexp", "jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp", "jetbrains.mps.baseLanguage.regexp.structure.CharacterSymbolClassPart", "jetbrains.mps.baseLanguage.regexp.structure.DotRegexp", "jetbrains.mps.baseLanguage.regexp.structure.FindMatchExpression", "jetbrains.mps.baseLanguage.regexp.structure.FindMatchStatement", "jetbrains.mps.baseLanguage.regexp.structure.ForEachMatchStatement", "jetbrains.mps.baseLanguage.regexp.structure.FromNToMTimesRegexp", "jetbrains.mps.baseLanguage.regexp.structure.InlineRegexpExpression", "jetbrains.mps.baseLanguage.regexp.structure.IntersectionSymbolClassPart", "jetbrains.mps.baseLanguage.regexp.structure.IntervalSymbolClassPart", "jetbrains.mps.baseLanguage.regexp.structure.LineEndRegexp", "jetbrains.mps.baseLanguage.regexp.structure.LineStartRegexp", "jetbrains.mps.baseLanguage.regexp.structure.LiteralReplacement", "jetbrains.mps.baseLanguage.regexp.structure.LookRegexp", "jetbrains.mps.baseLanguage.regexp.structure.MatchParensRegexp", "jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpExpression", "jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpOperation", "jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpStatement", "jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReference", "jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp", "jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceReplacement", "jetbrains.mps.baseLanguage.regexp.structure.NTimesRegexp", "jetbrains.mps.baseLanguage.regexp.structure.NegativeSymbolClassRegexp", "jetbrains.mps.baseLanguage.regexp.structure.OrRegexp", "jetbrains.mps.baseLanguage.regexp.structure.ParensRegexp", "jetbrains.mps.baseLanguage.regexp.structure.PositiveSymbolClassRegexp", "jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassDeclaration", "jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp", "jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassSymbolClassPart", "jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClasses", "jetbrains.mps.baseLanguage.regexp.structure.Regexp", "jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclaration", "jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp", "jetbrains.mps.baseLanguage.regexp.structure.Regexps", "jetbrains.mps.baseLanguage.regexp.structure.ReplaceBlock", "jetbrains.mps.baseLanguage.regexp.structure.ReplaceRegexpOperation", "jetbrains.mps.baseLanguage.regexp.structure.ReplaceWithRegexpExpression", "jetbrains.mps.baseLanguage.regexp.structure.ReplaceWithRegexpOperation", "jetbrains.mps.baseLanguage.regexp.structure.SeqRegexp", "jetbrains.mps.baseLanguage.regexp.structure.SplitExpression", "jetbrains.mps.baseLanguage.regexp.structure.SplitOperation", "jetbrains.mps.baseLanguage.regexp.structure.StringLiteralRegexp", "jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp", "jetbrains.mps.baseLanguage.regexp.structure.UnicodeCharacterRegexp"};
}
