package jetbrains.mps.xml.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class MakeElementNotEmpty_Intention extends BaseIntention {
  public MakeElementNotEmpty_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.xml.structure.Element";
  }

  public String getPresentation() {
    return "MakeElementNotEmpty";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.xml.intentions.MakeElementNotEmpty_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:e3b39e93-02e7-442a-b666-c29d949ba179(jetbrains.mps.xml.intentions@1_0)", "1195647386462");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Make Element Not-Empty";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SPropertyOperations.getBoolean(node, "isEmpty");
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SPropertyOperations.set(node, "isEmpty", "" + (false));
  }
}
