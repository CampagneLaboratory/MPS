package jetbrains.mps.xmlSchema.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class MakeTypeExpressionListVertical_Intention extends BaseIntention {
  public MakeTypeExpressionListVertical_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.xmlSchema.structure.TypeExpressionList";
  }

  public String getPresentation() {
    return "MakeTypeExpressionListVertical";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.xmlSchema.intentions.MakeTypeExpressionListVertical_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c89590597(jetbrains.mps.xmlSchema.intentions)", "1195647346726");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return (SPropertyOperations.getBoolean(node, "isVertical") ?
      "Make type expression list horizontal" :
      "Make type expression list vertical"
    );
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SPropertyOperations.set(node, "isVertical", "" + (!(SPropertyOperations.getBoolean(node, "isVertical"))));
  }
}
