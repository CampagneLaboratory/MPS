package jetbrains.mps.baseLanguage.builders.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class ConvertToBeanBuilder_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public ConvertToBeanBuilder_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.ClassCreator";
  }

  public String getPresentation() {
    return "ConvertToBeanBuilder";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.baseLanguage.builders.intentions.ConvertToBeanBuilder_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:7f54566a-e579-4f13-aaf4-b6e2c202aeb2(jetbrains.mps.baseLanguage.builders.intentions)", "5219429592916136228");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ConvertToBeanBuilder_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Convert To Bean Builder";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode creator = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.builders.structure.BuilderCreator", null);
      SNode builder = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.builders.structure.BeanBuilder", null);
      SLinkOperations.setTarget(builder, "baseMethodDeclaration", SLinkOperations.getTarget(node, "baseMethodDeclaration", false), false);
      for (SNode arg : SLinkOperations.getTargets(node, "actualArgument", true)) {
        ListSequence.fromList(SLinkOperations.getTargets(builder, "actualArgument", true)).addElement(arg);
      }
      SLinkOperations.setTarget(creator, "builder", builder, true);
      SNodeOperations.replaceWithAnother(node, creator);

      editorContext.select(SLinkOperations.getTarget(creator, "body", true));
    }

    public IntentionDescriptor getDescriptor() {
      return ConvertToBeanBuilder_Intention.this;
    }
  }
}
