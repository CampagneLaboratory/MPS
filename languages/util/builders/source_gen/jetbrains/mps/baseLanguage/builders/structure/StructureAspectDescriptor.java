package jetbrains.mps.baseLanguage.builders.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAsBuilderStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.AsBuilderStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.IContainsStatementList", "jetbrains.mps.baseLanguage.builders.structure.BuilderContainer").children(new String[]{"expression"}, new boolean[]{false}).alias("as builder", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAsTypeBuilder = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.AsTypeBuilder").super_("jetbrains.mps.baseLanguage.builders.structure.Builder").parents("jetbrains.mps.baseLanguage.builders.structure.Builder", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"type"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptBaseSimpleBuilderDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.BaseSimpleBuilderDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBeanBuilder = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.BeanBuilder").super_("jetbrains.mps.baseLanguage.builders.structure.Builder").parents("jetbrains.mps.baseLanguage.builders.structure.Builder", "jetbrains.mps.baseLanguage.structure.IMethodCall").references("constructor").alias("builder for", "").create();
  /*package*/ final ConceptDescriptor myConceptBeanPropertyBuilder = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.BeanPropertyBuilder").super_("jetbrains.mps.baseLanguage.builders.structure.Builder").parents("jetbrains.mps.baseLanguage.builders.structure.Builder").references("setter").children(new String[]{"value"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptBuilder = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.Builder").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBuilderContainer = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.BuilderContainer").interface_().children(new String[]{"builder", "body"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptBuilderCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.BuilderCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator", "jetbrains.mps.baseLanguage.builders.structure.BuilderContainer", "jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBuilderStatement = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.BuilderStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.builders.structure.BuilderContainer").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptResultExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.ResultExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("result", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSimpleBuilder = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder").super_("jetbrains.mps.baseLanguage.builders.structure.Builder").parents("jetbrains.mps.baseLanguage.builders.structure.Builder").references("declaration").children(new String[]{"argument"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptSimpleBuilderChild = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderChild").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("child").children(new String[]{"attachStatement"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptSimpleBuilderChildExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderChildExpression").super_("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExpression").parents("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExpression").alias("child", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSimpleBuilderDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderDeclaration").super_("jetbrains.mps.baseLanguage.builders.structure.BaseSimpleBuilderDeclaration").parents("jetbrains.mps.baseLanguage.builders.structure.BaseSimpleBuilderDeclaration", "jetbrains.mps.lang.core.structure.INamedConcept").properties("root", "leaf", "isAbstract").references("extends").children(new String[]{"parameter", "type", "creator", "child", "property"}, new boolean[]{true, false, false, true, true}).create();
  /*package*/ final ConceptDescriptor myConceptSimpleBuilderExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSimpleBuilderExtensionDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExtensionDeclaration").super_("jetbrains.mps.baseLanguage.builders.structure.BaseSimpleBuilderDeclaration").parents("jetbrains.mps.baseLanguage.builders.structure.BaseSimpleBuilderDeclaration").references("extended").children(new String[]{"child", "property"}, new boolean[]{true, true}).create();
  /*package*/ final ConceptDescriptor myConceptSimpleBuilderParameter = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParameter").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"type"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptSimpleBuilderParameterReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParameterReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("parameter").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSimpleBuilderParentExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParentExpression").super_("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExpression").parents("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExpression").alias("parent", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSimpleBuilderProperty = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderProperty").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"type", "set"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptSimpleBuilderPropertyBuilder = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyBuilder").super_("jetbrains.mps.baseLanguage.builders.structure.Builder").parents("jetbrains.mps.baseLanguage.builders.structure.Builder").references("declaration").children(new String[]{"value"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptSimpleBuilderPropertyExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSimpleBuilderPropertyParent = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyParent").super_("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyExpression").parents("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyExpression").alias("parent", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSimpleBuilderPropertyValue = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyValue").super_("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyExpression").parents("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyExpression").alias("value", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSimpleBuilders = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilders").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").references("extendsBuilder").children(new String[]{"builder"}, new boolean[]{true}).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAsBuilderStatement, myConceptAsTypeBuilder, myConceptBaseSimpleBuilderDeclaration, myConceptBeanBuilder, myConceptBeanPropertyBuilder, myConceptBuilder, myConceptBuilderContainer, myConceptBuilderCreator, myConceptBuilderStatement, myConceptResultExpression, myConceptSimpleBuilder, myConceptSimpleBuilderChild, myConceptSimpleBuilderChildExpression, myConceptSimpleBuilderDeclaration, myConceptSimpleBuilderExpression, myConceptSimpleBuilderExtensionDeclaration, myConceptSimpleBuilderParameter, myConceptSimpleBuilderParameterReference, myConceptSimpleBuilderParentExpression, myConceptSimpleBuilderProperty, myConceptSimpleBuilderPropertyBuilder, myConceptSimpleBuilderPropertyExpression, myConceptSimpleBuilderPropertyParent, myConceptSimpleBuilderPropertyValue, myConceptSimpleBuilders);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0cb, conceptFqName)) {
      case 0:
        return myConceptAsBuilderStatement;
      case 1:
        return myConceptAsTypeBuilder;
      case 2:
        return myConceptBaseSimpleBuilderDeclaration;
      case 3:
        return myConceptBeanBuilder;
      case 4:
        return myConceptBeanPropertyBuilder;
      case 5:
        return myConceptBuilder;
      case 6:
        return myConceptBuilderContainer;
      case 7:
        return myConceptBuilderCreator;
      case 8:
        return myConceptBuilderStatement;
      case 9:
        return myConceptResultExpression;
      case 10:
        return myConceptSimpleBuilder;
      case 11:
        return myConceptSimpleBuilderChild;
      case 12:
        return myConceptSimpleBuilderChildExpression;
      case 13:
        return myConceptSimpleBuilderDeclaration;
      case 14:
        return myConceptSimpleBuilderExpression;
      case 15:
        return myConceptSimpleBuilderExtensionDeclaration;
      case 16:
        return myConceptSimpleBuilderParameter;
      case 17:
        return myConceptSimpleBuilderParameterReference;
      case 18:
        return myConceptSimpleBuilderParentExpression;
      case 19:
        return myConceptSimpleBuilderProperty;
      case 20:
        return myConceptSimpleBuilderPropertyBuilder;
      case 21:
        return myConceptSimpleBuilderPropertyExpression;
      case 22:
        return myConceptSimpleBuilderPropertyParent;
      case 23:
        return myConceptSimpleBuilderPropertyValue;
      case 24:
        return myConceptSimpleBuilders;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0cb = new String[]{"jetbrains.mps.baseLanguage.builders.structure.AsBuilderStatement", "jetbrains.mps.baseLanguage.builders.structure.AsTypeBuilder", "jetbrains.mps.baseLanguage.builders.structure.BaseSimpleBuilderDeclaration", "jetbrains.mps.baseLanguage.builders.structure.BeanBuilder", "jetbrains.mps.baseLanguage.builders.structure.BeanPropertyBuilder", "jetbrains.mps.baseLanguage.builders.structure.Builder", "jetbrains.mps.baseLanguage.builders.structure.BuilderContainer", "jetbrains.mps.baseLanguage.builders.structure.BuilderCreator", "jetbrains.mps.baseLanguage.builders.structure.BuilderStatement", "jetbrains.mps.baseLanguage.builders.structure.ResultExpression", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderChild", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderChildExpression", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderDeclaration", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExpression", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExtensionDeclaration", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParameter", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParameterReference", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParentExpression", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderProperty", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyBuilder", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyExpression", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyParent", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyValue", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilders"};
}
