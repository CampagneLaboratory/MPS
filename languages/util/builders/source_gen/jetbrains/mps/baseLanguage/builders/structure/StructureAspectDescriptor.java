package jetbrains.mps.baseLanguage.builders.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.AsBuilderStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.AsTypeBuilder", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.BaseSimpleBuilderDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.BeanBuilder", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.BeanPropertyBuilder", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.Builder", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.BuilderContainer", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.BuilderCreator", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.BuilderStatement", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.ResultExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderChild", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderChildExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExtensionDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParameter", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParameterReference", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParentExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderProperty", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyBuilder", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyExpression", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyParent", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyValue", null);
    myFqNameToConcept.put("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilders", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.AsBuilderStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.IContainsStatementList", "jetbrains.mps.baseLanguage.builders.structure.BuilderContainer").children(new String[]{"expression"}, new boolean[]{false}).alias("as builder", "").staticScope(StaticScope.NONE).create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.AsTypeBuilder").super_("jetbrains.mps.baseLanguage.builders.structure.Builder").parents("jetbrains.mps.baseLanguage.builders.structure.Builder", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"type"}, new boolean[]{false}).create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.BaseSimpleBuilderDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.BeanBuilder").super_("jetbrains.mps.baseLanguage.builders.structure.Builder").parents("jetbrains.mps.baseLanguage.builders.structure.Builder", "jetbrains.mps.baseLanguage.structure.IMethodCall").references("constructor").alias("builder for", "").create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.BeanPropertyBuilder").super_("jetbrains.mps.baseLanguage.builders.structure.Builder").parents("jetbrains.mps.baseLanguage.builders.structure.Builder").references("setter").children(new String[]{"value"}, new boolean[]{false}).create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.Builder").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.BuilderContainer").interface_().children(new String[]{"builder", "body"}, new boolean[]{false, false}).create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.BuilderCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator", "jetbrains.mps.baseLanguage.builders.structure.BuilderContainer", "jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter").staticScope(StaticScope.NONE).create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.BuilderStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.builders.structure.BuilderContainer").staticScope(StaticScope.NONE).create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.ResultExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("result", "").staticScope(StaticScope.NONE).create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder").super_("jetbrains.mps.baseLanguage.builders.structure.Builder").parents("jetbrains.mps.baseLanguage.builders.structure.Builder").references("declaration").children(new String[]{"argument"}, new boolean[]{true}).create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderChild").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("child").children(new String[]{"attachStatement"}, new boolean[]{false}).create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderChildExpression").super_("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExpression").parents("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExpression").alias("child", "").staticScope(StaticScope.NONE).create();
        break;
      case 13:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderDeclaration").super_("jetbrains.mps.baseLanguage.builders.structure.BaseSimpleBuilderDeclaration").parents("jetbrains.mps.baseLanguage.builders.structure.BaseSimpleBuilderDeclaration", "jetbrains.mps.lang.core.structure.INamedConcept").properties("root", "leaf", "isAbstract").references("extends").children(new String[]{"parameter", "type", "creator", "child", "property"}, new boolean[]{true, false, false, true, true}).create();
        break;
      case 14:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 15:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExtensionDeclaration").super_("jetbrains.mps.baseLanguage.builders.structure.BaseSimpleBuilderDeclaration").parents("jetbrains.mps.baseLanguage.builders.structure.BaseSimpleBuilderDeclaration").references("extended").children(new String[]{"child", "property"}, new boolean[]{true, true}).create();
        break;
      case 16:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParameter").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"type"}, new boolean[]{false}).create();
        break;
      case 17:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParameterReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("parameter").staticScope(StaticScope.NONE).create();
        break;
      case 18:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParentExpression").super_("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExpression").parents("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExpression").alias("parent", "").staticScope(StaticScope.NONE).create();
        break;
      case 19:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderProperty").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"type", "set"}, new boolean[]{false, false}).create();
        break;
      case 20:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyBuilder").super_("jetbrains.mps.baseLanguage.builders.structure.Builder").parents("jetbrains.mps.baseLanguage.builders.structure.Builder").references("declaration").children(new String[]{"value"}, new boolean[]{false}).create();
        break;
      case 21:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 22:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyParent").super_("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyExpression").parents("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyExpression").alias("parent", "").staticScope(StaticScope.NONE).create();
        break;
      case 23:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyValue").super_("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyExpression").parents("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyExpression").alias("value", "").staticScope(StaticScope.NONE).create();
        break;
      case 24:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.builders.structure.SimpleBuilders").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").references("extendsBuilder").children(new String[]{"builder"}, new boolean[]{true}).create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.baseLanguage.builders.structure.AsBuilderStatement", "jetbrains.mps.baseLanguage.builders.structure.AsTypeBuilder", "jetbrains.mps.baseLanguage.builders.structure.BaseSimpleBuilderDeclaration", "jetbrains.mps.baseLanguage.builders.structure.BeanBuilder", "jetbrains.mps.baseLanguage.builders.structure.BeanPropertyBuilder", "jetbrains.mps.baseLanguage.builders.structure.Builder", "jetbrains.mps.baseLanguage.builders.structure.BuilderContainer", "jetbrains.mps.baseLanguage.builders.structure.BuilderCreator", "jetbrains.mps.baseLanguage.builders.structure.BuilderStatement", "jetbrains.mps.baseLanguage.builders.structure.ResultExpression", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderChild", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderChildExpression", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderDeclaration", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExpression", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExtensionDeclaration", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParameter", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParameterReference", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderParentExpression", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderProperty", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyBuilder", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyExpression", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyParent", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyValue", "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilders"};
}
