package jetbrains.mps.platform.conf.stubs;

/*Generated by MPS */

import jetbrains.mps.smodel.persistence.AbstractModelRootManager;
import java.util.Collection;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.structure.model.ModelRoot;
import jetbrains.mps.project.IModule;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.stubs.util.StubModelDescriptors;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.descriptor.source.StubModelDataSource;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.stubs.util.PathItem;

public class ConfStubs extends AbstractModelRootManager {
  public ConfStubs() {
  }

  public Collection<SModelDescriptor> load(@NotNull ModelRoot root, IModule module) {
    List<SModelDescriptor> res = ListSequence.fromList(new ArrayList<SModelDescriptor>());
    ListSequence.fromList(res).addSequence(SetSequence.fromSet(new StubModelDescriptors(SModelStereotype.getStubStereotypeForId("conf"), root, module) {
      public StubModelDataSource createStubsSource(ModuleReference origin, ModelRoot loc) {
        return new ConfStubSource(origin, loc);
      }
    }.getDescriptors(new _FunctionTypes._return_P1_E0<PathItem, String>() {
      public PathItem invoke(String path) {
        return ConfPathItem.getPathItem(path);
      }
    })));
    return res;
  }
}
