package jetbrains.mps.platform.conf.stubs;

/*Generated by MPS */

import jetbrains.mps.extapi.persistence.FolderSetDataSource;
import jetbrains.mps.stubs.util.MultiRootModelDataSource;
import jetbrains.mps.findUsages.fastfind.FastFindSupportProvider;
import jetbrains.mps.smodel.descriptor.source.StubModelDataSource;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.nodeidmap.ForeignNodeIdMap;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.stubs.util.PathItem;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.model.SNodeId;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.stubs.util.StubModelDescriptors;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.SModelReference;
import java.io.InputStream;
import org.jdom.input.SAXBuilder;
import java.io.IOException;
import org.jdom.JDOMException;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.findUsages.fastfind.FastFindSupport;
import jetbrains.mps.findUsages.fastfind.FastFindSupportRegistry;
import jetbrains.mps.stubs.util.JavaStubModelDataSource;

public class ConfStubSource extends FolderSetDataSource implements MultiRootModelDataSource, FastFindSupportProvider, StubModelDataSource {
  private List<String> roots;

  public ConfStubSource(String path) {
    this.roots = ListSequence.fromList(new ArrayList<String>());
    ListSequence.fromList(this.roots).addElement(path);
  }

  @Override
  public void addRoot(String path) {
    ListSequence.fromList(roots).addElement(path);
  }

  @Override
  public SModel loadSModel(IModule module, org.jetbrains.mps.openapi.model.SModel descriptor) {
    SModel model = new SModel(descriptor.getReference(), new ForeignNodeIdMap());
    ModuleReference lang = MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("32d0a39c-772f-4490-8142-e50f9a9f19d4")).getModuleReference();
    model.addLanguage(lang);

    String pkg = model.getReference().getSModelFqName().getLongName();
    List<Tuples._4<String, String, SNode, PathItem>> doclst = ListSequence.fromList(new ArrayList<Tuples._4<String, String, SNode, PathItem>>());
    SNode sample = SConceptOperations.createNewNode("jetbrains.mps.platform.conf.structure.ConfigurationXmlDocument", null);
    for (String path : roots) {
      PathItem pi = ConfPathItem.getPathItem(path);
      for (String docres : ListSequence.fromList(pi.resources(pkg))) {
        SNodeId id = ConfReader.createForeignId(pi.baseName(docres));
        SNode doc = (SNode) model.getNode(id);
        if ((doc == null)) {
          doc = SConceptOperations.createNewNode(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.platform.conf.structure.ConfigurationXmlDocument")), sample);
          ((jetbrains.mps.smodel.SNode) doc).setId(id);
          SPropertyOperations.set(doc, "name", pi.baseName(docres));
          SModelOperations.addRootNode(((org.jetbrains.mps.openapi.model.SModel) model.getModelDescriptor()), doc);
          ListSequence.fromList(doclst).addElement(MultiTuple.<String,String,SNode,PathItem>from(pkg, docres, doc, pi));
        }
      }
    }
    final StubModelDescriptors descs = new StubModelDescriptors(SModelStereotype.getStubStereotypeForId("conf"), roots, module) {
      @Override
      public StubModelDataSource createStubsSource(String path) {
        return new ConfStubSource(path);
      }
    };
    ConfReader reader = new ConfReader(new ConfReader.Resolver() {
      public SModelReference stubModelReference(String pk) {
        return descs.javaStubRef(pk);
      }
    }, new ConfReader.Resolver() {
      public SModelReference stubModelReference(String pk) {
        return descs.smodelRefWithId(pk);
      }
    });
    for (Tuples._4<String, String, SNode, PathItem> doctuple : ListSequence.fromList(doclst)) {
      InputStream is = null;
      try {
        is = doctuple._3().openResource(doctuple._0(), doctuple._1());
        reader.read(doctuple._2(), new SAXBuilder().build(is));
      } catch (IOException e) {
        e.printStackTrace();
      } catch (JDOMException e) {
        e.printStackTrace();
      }
      if (is != null) {
        try {
          is.close();
        } catch (IOException e) {
        }
      }
    }
    SNodeOperations.deleteNode(sample);
    return model;
  }

  @Override
  public long getTimestamp() {
    return 0;
  }

  @Override
  public FastFindSupport getFastFindSupport() {
    return FastFindSupportRegistry.getInstance().getFastFindSupport(JavaStubModelDataSource.FAST_FIND_ID);
  }

  @Override
  public boolean hasModel(org.jetbrains.mps.openapi.model.SModel md) {
    return !(getPaths().isEmpty());
  }
}
