package jetbrains.mps.platform.conf.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferencePresentationContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.SModel;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class GroupReference_Constraints extends BaseConstraintsDescriptor {
  public GroupReference_Constraints() {
    super("jetbrains.mps.platform.conf.structure.GroupReference");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("group", new BaseReferenceConstraintsDescriptor("group", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public boolean hasPresentation() {
            return true;
          }

          @Override
          public String getPresentation(final IOperationContext operationContext, final ReferencePresentationContext _context) {
            return SPropertyOperations.getString(_context.getParameterNode(), "id");
          }

          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return Sequence.fromIterable(((Iterable<IModule>) operationContext.getScope().getVisibleModules())).translate(new ITranslator2<IModule, SModelDescriptor>() {
              public Iterable<SModelDescriptor> translate(IModule m) {
                return m.getOwnModelDescriptors();
              }
            }).where(new IWhereFilter<SModelDescriptor>() {
              public boolean accept(SModelDescriptor smd) {
                return !("java_stub".equals(smd.getStereotype()));
              }
            }).translate(new ITranslator2<SModelDescriptor, SNode>() {
              public Iterable<SNode> translate(SModelDescriptor smd) {
                return SModelOperations.getNodes(((SModel) smd.getSModel()), "jetbrains.mps.platform.conf.structure.Group");
              }
            });
          }

          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_60vk01_a0a3a0a0a1a0b0a1a1;
          }
        };
      }
    });
    references.put("anchor", new BaseReferenceConstraintsDescriptor("anchor", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public boolean hasPresentation() {
            return true;
          }

          @Override
          public String getPresentation(final IOperationContext operationContext, final ReferencePresentationContext _context) {
            return SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(_context.getParameterNode()), "conceptAlias") + " " + SPropertyOperations.getString(_context.getParameterNode(), "id");
          }

          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return Sequence.fromIterable(((Iterable<IModule>) operationContext.getScope().getVisibleModules())).translate(new ITranslator2<IModule, SModelDescriptor>() {
              public Iterable<SModelDescriptor> translate(IModule m) {
                return m.getOwnModelDescriptors();
              }
            }).where(new IWhereFilter<SModelDescriptor>() {
              public boolean accept(SModelDescriptor smd) {
                return !("java_stub".equals(smd.getStereotype()));
              }
            }).translate(new ITranslator2<SModelDescriptor, SNode>() {
              public Iterable<SNode> translate(SModelDescriptor smd) {
                return SModelOperations.getNodes(((SModel) smd.getSModel()), "jetbrains.mps.platform.conf.structure.AbstractAction");
              }
            });
          }

          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_60vk01_a0a3a0a0a1a0b0a2a1;
          }
        };
      }
    });
    return references;
  }

  private static SNodeReference breakingNode_60vk01_a0a3a0a0a1a0b0a1a1 = new jetbrains.mps.smodel.SNodePointer("r:2fe958f4-f755-4faa-af2a-c5125dc0cfc1(jetbrains.mps.platform.conf.constraints)", "2948583337000056360");
  private static SNodeReference breakingNode_60vk01_a0a3a0a0a1a0b0a2a1 = new jetbrains.mps.smodel.SNodePointer("r:2fe958f4-f755-4faa-af2a-c5125dc0cfc1(jetbrains.mps.platform.conf.constraints)", "2948583337000056409");
}
