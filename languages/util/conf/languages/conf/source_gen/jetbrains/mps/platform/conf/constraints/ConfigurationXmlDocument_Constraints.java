package jetbrains.mps.platform.conf.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.ConstraintsDataHolder;
import java.util.Map;
import jetbrains.mps.smodel.constraints.INodePropertyGetter;
import java.util.HashMap;
import jetbrains.mps.smodel.constraints.BaseNodePropertyGetter;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class ConfigurationXmlDocument_Constraints extends ConstraintsDataHolder {
  public ConfigurationXmlDocument_Constraints() {
  }

  public String getConceptFqName() {
    return "jetbrains.mps.platform.conf.structure.ConfigurationXmlDocument";
  }

  public Map<String, INodePropertyGetter> getNodePropertyGetters() {
    HashMap<String, INodePropertyGetter> result = new HashMap<String, INodePropertyGetter>();
    result.put("name", new BaseNodePropertyGetter() {
      public Object execPropertyGet(SNode node, String propertyName, IScope scope) {
        String name = node.getName();
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "root", true), "jetbrains.mps.lang.core.structure.INamedConcept")) {
          name = name + "(" + SPropertyOperations.getString(SNodeOperations.as(SLinkOperations.getTarget(node, "root", true), "jetbrains.mps.lang.core.structure.INamedConcept"), "name") + ")";
        }
        return name;
      }
    });
    return result;
  }
}
