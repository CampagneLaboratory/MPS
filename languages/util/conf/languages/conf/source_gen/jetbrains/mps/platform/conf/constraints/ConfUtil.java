package jetbrains.mps.platform.conf.constraints;

/*Generated by MPS */

import jetbrains.mps.project.structure.modules.ModuleReference;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class ConfUtil {
  private static ModuleReference CONF_LANG = ModuleReference.fromString("32d0a39c-772f-4490-8142-e50f9a9f19d4(jetbrains.mps.platform.conf)");

  public ConfUtil() {
  }

  public static Iterable<SModel> visibleConfModels(IScope scope) {
    return Sequence.fromIterable(((Iterable<IModule>) scope.getVisibleModules())).translate(new ITranslator2<IModule, SModelDescriptor>() {
      public Iterable<SModelDescriptor> translate(IModule m) {
        return m.getOwnModelDescriptors();
      }
    }).where(new IWhereFilter<SModelDescriptor>() {
      public boolean accept(SModelDescriptor smd) {
        return ((SModelStereotype.isStubModelStereotype(SModelStereotype.getStereotype(smd))) ?
          "conf_stub".equals(SModelStereotype.getStereotype(smd)) :
          Sequence.fromIterable(((Iterable<ModuleReference>) ((jetbrains.mps.smodel.SModel) smd.getSModel()).importedLanguages())).contains(ConfUtil.CONF_LANG)
        );
      }
    }).select(new ISelector<SModelDescriptor, SModel>() {
      public SModel select(SModelDescriptor smd) {
        return (SModel) (smd.getSModel());
      }
    });
  }
}
