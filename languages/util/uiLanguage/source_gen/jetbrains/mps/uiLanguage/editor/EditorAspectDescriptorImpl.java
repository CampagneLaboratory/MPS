package jetbrains.mps.uiLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new ActionHandler_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AfterConstructionBlock_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AttributeDeclaration_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new AttributeReferenceOperation_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new AttributeValue_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new BeanCreator_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new BeanDeclaration_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new BeanType_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new BeforeConstructionBlock_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new BindExpression_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new CellRendererAttribute_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new ComponentController_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new ComponentCreator_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new ComponentDeclaration_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new ComponentInstance_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new ComponentReference_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new ComponentType_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new EventAccessOperation_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new EventDeclaration_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new EventHandlerReference_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new Form_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new FormPart_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new Grid_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new GridRow_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new InlineEventHandler_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new InlineRenderer_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new LayoutConstraint_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new ListElements_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new PngIcon_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new RaiseInternalStatement_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new RaiseOperation_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new RenderingObject_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new Scroller_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new StandardDialog_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new StandardDialogButton_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new StubCellRendererInfo_Editor());
      default:
    }
    return Collections.emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    return Collections.emptyList();
  }



  public Collection<ConceptEditorHint> getHints() {
    return Collections.emptyList();
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.uiLanguage.structure.ActionHandler", "jetbrains.mps.uiLanguage.structure.AfterConstructionBlock", "jetbrains.mps.uiLanguage.structure.AttributeDeclaration", "jetbrains.mps.uiLanguage.structure.AttributeReferenceOperation", "jetbrains.mps.uiLanguage.structure.AttributeValue", "jetbrains.mps.uiLanguage.structure.BeanCreator", "jetbrains.mps.uiLanguage.structure.BeanDeclaration", "jetbrains.mps.uiLanguage.structure.BeanType", "jetbrains.mps.uiLanguage.structure.BeforeConstructionBlock", "jetbrains.mps.uiLanguage.structure.BindExpression", "jetbrains.mps.uiLanguage.structure.CellRendererAttribute", "jetbrains.mps.uiLanguage.structure.ComponentController", "jetbrains.mps.uiLanguage.structure.ComponentCreator", "jetbrains.mps.uiLanguage.structure.ComponentDeclaration", "jetbrains.mps.uiLanguage.structure.ComponentInstance", "jetbrains.mps.uiLanguage.structure.ComponentReference", "jetbrains.mps.uiLanguage.structure.ComponentType", "jetbrains.mps.uiLanguage.structure.EventAccessOperation", "jetbrains.mps.uiLanguage.structure.EventDeclaration", "jetbrains.mps.uiLanguage.structure.EventHandlerReference", "jetbrains.mps.uiLanguage.structure.Form", "jetbrains.mps.uiLanguage.structure.FormPart", "jetbrains.mps.uiLanguage.structure.Grid", "jetbrains.mps.uiLanguage.structure.GridRow", "jetbrains.mps.uiLanguage.structure.InlineEventHandler", "jetbrains.mps.uiLanguage.structure.InlineRenderer", "jetbrains.mps.uiLanguage.structure.LayoutConstraint", "jetbrains.mps.uiLanguage.structure.ListElements", "jetbrains.mps.uiLanguage.structure.PngIcon", "jetbrains.mps.uiLanguage.structure.RaiseInternalStatement", "jetbrains.mps.uiLanguage.structure.RaiseOperation", "jetbrains.mps.uiLanguage.structure.RenderingObject", "jetbrains.mps.uiLanguage.structure.Scroller", "jetbrains.mps.uiLanguage.structure.StandardDialog", "jetbrains.mps.uiLanguage.structure.StandardDialogButton", "jetbrains.mps.uiLanguage.structure.StubCellRendererInfo"};
}
