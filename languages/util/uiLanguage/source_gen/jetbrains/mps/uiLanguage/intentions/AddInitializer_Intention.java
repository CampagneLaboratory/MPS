package jetbrains.mps.uiLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class AddInitializer_Intention extends BaseIntention {
  public AddInitializer_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.uiLanguage.structure.AttributeDeclaration";
  }

  public String getPresentation() {
    return "AddInitializer";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.uiLanguage.intentions.AddInitializer_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c89590551(jetbrains.mps.uiLanguage.intentions)", "1204896171511");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Add Initializer";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SLinkOperations.getTarget(node, "onChange", true) == null;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode expression = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Expression", null);
    SLinkOperations.setTarget(node, "initializer", expression, true);
    editorContext.select(expression);
  }
}
