package jetbrains.mps.baseLanguage.dates.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.node.EditorAspectDescriptor;
import jetbrains.mps.openapi.editor.node.EditorAspect;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public EditorAspect getAspect(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return new AbsDateTimeMinusOperation_Editor();
      case 1:
        return new AllTimeZonesConstant_Editor();
      case 2:
        return new ConditionalFormatToken_Editor();
      case 3:
        return new ConstantTimeZoneRef_Editor();
      case 4:
        return new ConvertToDateTimeOperation_Editor();
      case 5:
        return new ConvertToDurationOperation_Editor();
      case 6:
        return new DateFormat_Editor();
      case 7:
        return new DateFormatsTable_Editor();
      case 8:
        return new DateTimeCompareOperation_Editor();
      case 9:
        return new DateTimeMinusOperation_Editor();
      case 10:
        return new DateTimeMinusPeriodOperation_Editor();
      case 11:
        return new DateTimeOffsetFormatToken_Editor();
      case 12:
        return new DateTimeOperation_Editor();
      case 13:
        return new DateTimePlusPeriodOperation_Editor();
      case 14:
        return new DateTimePropertyFormatToken_Editor();
      case 15:
        return new DateTimePropetyReferenceOperation_Editor();
      case 16:
        return new DateTimeWithPropertyOperation_Editor();
      case 17:
        return new DateTimeZoneCreator_Editor();
      case 18:
        return new DurationTypeReference_Editor();
      case 19:
        return new FixedLocaleFormatToken_Editor();
      case 20:
        return new FormatDateTimeExpression_Editor();
      case 21:
        return new FormatExpression_Editor();
      case 22:
        return new FormatPeriodExpression_Editor();
      case 23:
        return new FormatToken_Editor();
      case 24:
        return new InTimezoneExpression_Editor();
      case 25:
        return new InlineFormatDateTimeExpression_Editor();
      case 26:
        return new InlineFormatExpression_Editor();
      case 27:
        return new LiteralFormatToken_Editor();
      case 28:
        return new MathDateTimeOperation_Editor();
      case 29:
        return new NeverExpression_Editor();
      case 30:
        return new NowExpression_Editor();
      case 31:
        return new ParseDateTimeExpression_Editor();
      case 32:
        return new ParseExpression_Editor();
      case 33:
        return new PeriodConstant_Editor();
      case 34:
        return new PeriodFormat_Editor();
      case 35:
        return new PeriodFormatsTable_Editor();
      case 36:
        return new PeriodInPropertyExpression_Editor();
      case 37:
        return new PeriodInPropertyOperation_Editor();
      case 38:
        return new PeriodLiteralFormatToken_Editor();
      case 39:
        return new PeriodPropertyFormatToken_Editor();
      case 40:
        return new PeriodReferenceFormatToken_Editor();
      case 41:
        return new PeriodSeparatorFormatToken_Editor();
      case 42:
        return new ReferenceFormatToken_Editor();
      case 43:
        return new RoundDateTimeOperation_Editor();
      case 44:
        return new ScheduleLiteral_Editor();
      case 45:
        return new TimeConstant_Editor();
      case 46:
        return new TimeZoneConstant_Editor();
      case 47:
        return new TimeZoneFromString_Editor();
      case 48:
        return new TimeZoneIDExpression_Editor();
      case 49:
        return new TimeZoneIdOperation_Editor();
      case 50:
        return new TimeZoneNameOperation_Editor();
      case 51:
        return new TimeZoneOffsetExpression_Editor();
      case 52:
        return new TokenCondition_Editor();
      case 53:
        return new TokenConditionalPair_Editor();
      case 54:
        return new UnaryDateTimeOperation_Editor();
      case 55:
        return new WithPropertyCompareExpression_Editor();
      default:
    }
    return null;
  }

  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.baseLanguage.dates.structure.AbsDateTimeMinusOperation", "jetbrains.mps.baseLanguage.dates.structure.AllTimeZonesConstant", "jetbrains.mps.baseLanguage.dates.structure.ConditionalFormatToken", "jetbrains.mps.baseLanguage.dates.structure.ConstantTimeZoneRef", "jetbrains.mps.baseLanguage.dates.structure.ConvertToDateTimeOperation", "jetbrains.mps.baseLanguage.dates.structure.ConvertToDurationOperation", "jetbrains.mps.baseLanguage.dates.structure.DateFormat", "jetbrains.mps.baseLanguage.dates.structure.DateFormatsTable", "jetbrains.mps.baseLanguage.dates.structure.DateTimeCompareOperation", "jetbrains.mps.baseLanguage.dates.structure.DateTimeMinusOperation", "jetbrains.mps.baseLanguage.dates.structure.DateTimeMinusPeriodOperation", "jetbrains.mps.baseLanguage.dates.structure.DateTimeOffsetFormatToken", "jetbrains.mps.baseLanguage.dates.structure.DateTimeOperation", "jetbrains.mps.baseLanguage.dates.structure.DateTimePlusPeriodOperation", "jetbrains.mps.baseLanguage.dates.structure.DateTimePropertyFormatToken", "jetbrains.mps.baseLanguage.dates.structure.DateTimePropetyReferenceOperation", "jetbrains.mps.baseLanguage.dates.structure.DateTimeWithPropertyOperation", "jetbrains.mps.baseLanguage.dates.structure.DateTimeZoneCreator", "jetbrains.mps.baseLanguage.dates.structure.DurationTypeReference", "jetbrains.mps.baseLanguage.dates.structure.FixedLocaleFormatToken", "jetbrains.mps.baseLanguage.dates.structure.FormatDateTimeExpression", "jetbrains.mps.baseLanguage.dates.structure.FormatExpression", "jetbrains.mps.baseLanguage.dates.structure.FormatPeriodExpression", "jetbrains.mps.baseLanguage.dates.structure.FormatToken", "jetbrains.mps.baseLanguage.dates.structure.InTimezoneExpression", "jetbrains.mps.baseLanguage.dates.structure.InlineFormatDateTimeExpression", "jetbrains.mps.baseLanguage.dates.structure.InlineFormatExpression", "jetbrains.mps.baseLanguage.dates.structure.LiteralFormatToken", "jetbrains.mps.baseLanguage.dates.structure.MathDateTimeOperation", "jetbrains.mps.baseLanguage.dates.structure.NeverExpression", "jetbrains.mps.baseLanguage.dates.structure.NowExpression", "jetbrains.mps.baseLanguage.dates.structure.ParseDateTimeExpression", "jetbrains.mps.baseLanguage.dates.structure.ParseExpression", "jetbrains.mps.baseLanguage.dates.structure.PeriodConstant", "jetbrains.mps.baseLanguage.dates.structure.PeriodFormat", "jetbrains.mps.baseLanguage.dates.structure.PeriodFormatsTable", "jetbrains.mps.baseLanguage.dates.structure.PeriodInPropertyExpression", "jetbrains.mps.baseLanguage.dates.structure.PeriodInPropertyOperation", "jetbrains.mps.baseLanguage.dates.structure.PeriodLiteralFormatToken", "jetbrains.mps.baseLanguage.dates.structure.PeriodPropertyFormatToken", "jetbrains.mps.baseLanguage.dates.structure.PeriodReferenceFormatToken", "jetbrains.mps.baseLanguage.dates.structure.PeriodSeparatorFormatToken", "jetbrains.mps.baseLanguage.dates.structure.ReferenceFormatToken", "jetbrains.mps.baseLanguage.dates.structure.RoundDateTimeOperation", "jetbrains.mps.baseLanguage.dates.structure.ScheduleLiteral", "jetbrains.mps.baseLanguage.dates.structure.TimeConstant", "jetbrains.mps.baseLanguage.dates.structure.TimeZoneConstant", "jetbrains.mps.baseLanguage.dates.structure.TimeZoneFromString", "jetbrains.mps.baseLanguage.dates.structure.TimeZoneIDExpression", "jetbrains.mps.baseLanguage.dates.structure.TimeZoneIdOperation", "jetbrains.mps.baseLanguage.dates.structure.TimeZoneNameOperation", "jetbrains.mps.baseLanguage.dates.structure.TimeZoneOffsetExpression", "jetbrains.mps.baseLanguage.dates.structure.TokenCondition", "jetbrains.mps.baseLanguage.dates.structure.TokenConditionalPair", "jetbrains.mps.baseLanguage.dates.structure.UnaryDateTimeOperation", "jetbrains.mps.baseLanguage.dates.structure.WithPropertyCompareExpression"};
}
