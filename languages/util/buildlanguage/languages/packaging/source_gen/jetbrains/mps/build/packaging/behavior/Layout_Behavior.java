package jetbrains.mps.build.packaging.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.io.File;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.util.Macros;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Layout_Behavior {
  public static void init(SNode thisNode) {
    Map<String, String> vars = MapSequence.<String,String>fromMap(new HashMap<String, String>());
    MapSequence.<String,String>fromMap(vars).put("basedir", "basedir");
    MapSequence.<String,String>fromMap(vars).put("\\n", "line.separator");
    MapSequence.<String,String>fromMap(vars).put("/", "file.separator");
    MapSequence.<String,String>fromMap(vars).put(":", "path.separator");
    MapSequence.<String,String>fromMap(vars).put("date", "DSTAMP");
    if (ListSequence.<SNode>fromList(SLinkOperations.getTargets(thisNode, "configuration", true)).isEmpty()) {
      SLinkOperations.addChild(thisNode, "configuration", SConceptOperations.createNewNode("jetbrains.mps.build.packaging.structure.Configuration", null));
    }
    SPropertyOperations.set(ListSequence.<SNode>fromList(SLinkOperations.getTargets(thisNode, "configuration", true)).first(), "name", "default");
    for (String s : SetSequence.<String>fromSet(MapSequence.fromMap(vars).keySet())) {
      SNode var = SConceptOperations.createNewNode("jetbrains.mps.build.packaging.structure.Variable", null);
      SPropertyOperations.set(var, "name", s);
      SPropertyOperations.set(var, "antName", MapSequence.<String,String>fromMap(vars).get(s));
      SLinkOperations.addChild(thisNode, "builtInVariable", var);
    }
    SPropertyOperations.set(thisNode, "compile", "" + true);
    SLinkOperations.setTarget(thisNode, "deployDirectory", new Layout_Behavior.QuotationClass_g9j203_a2a01a0().createNode(Layout_Behavior.getBasedirName_1226509010730()), true);
    SLinkOperations.setTarget(thisNode, "scriptsDirectory", new Layout_Behavior.QuotationClass_g9j203_a2a11a0().createNode(Layout_Behavior.getBasedirName_1226509010730()), true);
  }

  public static String call_getFolderToGenerate_1229522949966(SNode thisNode) {
    return IPath_Behavior.call_getFile_1233322718999(SLinkOperations.getTarget(thisNode, "scriptsDirectory", true)).getAbsolutePath();
  }

  public static String virtual_getPath_1234976932856(SNode thisNode) {
    String macro = IMacroHolder_Behavior.call_evaluateMacro_1234975967990(thisNode, SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "baseDirectory", true), "macro", true), "name"));
    String fullPathWithoutMacro = Path_Behavior.call_getFullPathWithoutMacro_1226511495568(SLinkOperations.getTarget(thisNode, "baseDirectory", true));
    if (StringUtils.isEmpty(macro)) {
      if (Sequence.<File>fromIterable(Sequence.fromArray(File.listRoots())).contains(new File("/")) && !(fullPathWithoutMacro.startsWith("/"))) {
        fullPathWithoutMacro = "/" + fullPathWithoutMacro;
      }
      return fullPathWithoutMacro;
    } else {
      return macro + File.separator + fullPathWithoutMacro;
    }
  }

  public static List<SNode> call_getTopologicalSortedComponents_1213877228271(SNode thisNode) {
    List<SNode> result = ListSequence.<SNode>fromList(new ArrayList<SNode>());
    for (SNode component : ListSequence.<SNode>fromList(SLinkOperations.getTargets(thisNode, "component", true))) {
      Layout_Behavior.proceesAbstractProjectComponent_1233317260545(component, result);
    }
    return result;
  }

  public static List<SNode> call_getTopologicalSortedComponents_1213877228296(SNode thisNode, SNode config) {
    List<SNode> result = ListSequence.<SNode>fromList(new ArrayList<SNode>());
    List<SNode> all = Layout_Behavior.call_getTopologicalSortedComponents_1213877228271(thisNode);
    for (SNode component : ListSequence.<SNode>fromList(all)) {
      if (AbstractProjectComponent_Behavior.call_included_1213877333807(component, config)) {
        ListSequence.<SNode>fromList(result).addElement(component);
        ListSequence.<SNode>fromList(result).addSequence(ListSequence.<SNode>fromList(AbstractProjectComponent_Behavior.call_getPostProcessingTasks_1213877333861(component)));
      }
    }
    return result;
  }

  public static List<SNode> call_getModules_1213877228340(SNode thisNode) {
    List<SNode> result = ListSequence.<SNode>fromList(new ArrayList<SNode>());
    for (SNode component : ListSequence.<SNode>fromList(SLinkOperations.getTargets(thisNode, "component", true))) {
      Layout_Behavior.call_getModules_9027273598492143575(thisNode, result, component);
    }
    return result;
  }

  public static void call_getModules_9027273598492143575(SNode thisNode, List<SNode> modules, SNode component) {
    if (SNodeOperations.isInstanceOf(component, "jetbrains.mps.build.packaging.structure.ICompositeComponent")) {
      for (SNode child : ListSequence.<SNode>fromList(SLinkOperations.getTargets(SNodeOperations.cast(component, "jetbrains.mps.build.packaging.structure.ICompositeComponent"), "entry", true))) {
        Layout_Behavior.call_getModules_9027273598492143575(thisNode, modules, child);
      }
    } else
    if (SNodeOperations.isInstanceOf(component, "jetbrains.mps.build.packaging.structure.Module")) {
      ListSequence.<SNode>fromList(modules).addElement(SNodeOperations.cast(component, "jetbrains.mps.build.packaging.structure.Module"));
    } else if (SNodeOperations.isInstanceOf(component, "jetbrains.mps.build.packaging.structure.BlockReference")) {
      for (SNode child : ListSequence.<SNode>fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(component, "jetbrains.mps.build.packaging.structure.BlockReference"), "block", false), "entry", true))) {
        Layout_Behavior.call_getModules_9027273598492143575(thisNode, modules, child);
      }
    }
  }

  public static List<SNode> virtual_getAllVariable_1234864693585(SNode thisNode) {
    List<SNode> vars = ListSequence.<SNode>fromList(new LinkedList<SNode>());
    ListSequence.<SNode>fromList(vars).addSequence(ListSequence.<SNode>fromList(SLinkOperations.getTargets(thisNode, "variable", true)));
    ListSequence.<SNode>fromList(vars).addSequence(ListSequence.<SNode>fromList(SLinkOperations.getTargets(thisNode, "builtInVariable", true)));
    return vars;
  }

  public static String call_getDefaultTargetName_1230209625713(SNode thisNode) {
    return "main";
  }

  public static String getMPSHomeName_1226508944077() {
    return Macros.MPS_HOME.substring("${".length(), Macros.MPS_HOME.lastIndexOf("}"));
  }

  public static String getBasedirName_1226509010730() {
    // ant has standart property basedir, so we use base_dir here to avoid clashing with it 
    // "_" symbol was chosen to look similar to mps_home 
    return "base_dir";
  }

  public static String getDeployDirName_462257719548547196() {
    return "deploy.dir";
  }

  public static String getScriptsDirName_462257719548547202() {
    return "scripts.dir";
  }

  public static void proceesAbstractProjectComponent_1233317260545(SNode component, List<SNode> list) {
    if (SNodeOperations.isInstanceOf(component, "jetbrains.mps.build.packaging.structure.ICompositeComponent")) {
      for (SNode entry : ListSequence.<SNode>fromList(SLinkOperations.getTargets(SNodeOperations.cast(component, "jetbrains.mps.build.packaging.structure.ICompositeComponent"), "entry", true))) {
        Layout_Behavior.proceesAbstractProjectComponent_1233317260545(entry, list);
      }
    } else if (SNodeOperations.isInstanceOf(component, "jetbrains.mps.build.packaging.structure.ITransparentProjectComponent")) {
      List<SNode> childrenToDo = ITransparentProjectComponent_Behavior.call_getChildrenToDo_1240564451382(SNodeOperations.cast(component, "jetbrains.mps.build.packaging.structure.ITransparentProjectComponent"));
      for (SNode child : ListSequence.<SNode>fromList(childrenToDo)) {
        Layout_Behavior.proceesAbstractProjectComponent_1233317260545(child, list);
      }
      return;
    }
    ListSequence.<SNode>fromList(list).addElement(component);
  }

  public static class QuotationClass_g9j203_a2a01a0 {
    public QuotationClass_g9j203_a2a01a0() {
    }

    public SNode createNode(Object parameter_9) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.Path", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_5 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.MacroReference", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_6 = quotedNode_2;
          quotedNode1_6.setProperty("name", (String) parameter_9);
          quotedNode_1.addChild("macro", quotedNode1_6);
        }
        {
          quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.CompositePathComponent", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_7 = quotedNode_3;
          {
            quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.PathComponent", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_8 = quotedNode_4;
            quotedNode1_8.setProperty("path", "artifacts");
            quotedNode_3.addChild("pathComponent", quotedNode1_8);
          }
          quotedNode_1.addChild("compositePathComponent", quotedNode1_7);
        }
        result = quotedNode1_5;
      }
      return result;
    }
  }

  public static class QuotationClass_g9j203_a2a11a0 {
    public QuotationClass_g9j203_a2a11a0() {
    }

    public SNode createNode(Object parameter_9) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.Path", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_5 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.MacroReference", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_6 = quotedNode_2;
          quotedNode1_6.setProperty("name", (String) parameter_9);
          quotedNode_1.addChild("macro", quotedNode1_6);
        }
        {
          quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.CompositePathComponent", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_7 = quotedNode_3;
          {
            quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.PathComponent", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_8 = quotedNode_4;
            quotedNode1_8.setProperty("path", "build");
            quotedNode_3.addChild("pathComponent", quotedNode1_8);
          }
          quotedNode_1.addChild("compositePathComponent", quotedNode1_7);
        }
        result = quotedNode1_5;
      }
      return result;
    }
  }
}
