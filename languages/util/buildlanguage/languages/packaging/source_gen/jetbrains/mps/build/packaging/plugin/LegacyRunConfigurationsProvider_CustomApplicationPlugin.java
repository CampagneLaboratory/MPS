package jetbrains.mps.build.packaging.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.custom.BaseCustomApplicationPlugin;
import jetbrains.mps.logging.Logger;
import java.util.List;
import com.intellij.execution.configurations.ConfigurationType;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.intellij.execution.junit.RuntimeConfigurationProducer;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.extensions.Extensions;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.buildlanguage.plugin.BuildLanguage_ConfigurationType;
import com.intellij.openapi.extensions.ExtensionPoint;

public class LegacyRunConfigurationsProvider_CustomApplicationPlugin extends BaseCustomApplicationPlugin {
  private static Logger LOG = Logger.getLogger(LegacyRunConfigurationsProvider_CustomApplicationPlugin.class);

  private List<ConfigurationType> myConfigurationKinds = ListSequence.fromList(new ArrayList<ConfigurationType>());
  private List<RuntimeConfigurationProducer> myConfigurationCreators = ListSequence.fromList(new ArrayList<RuntimeConfigurationProducer>());

  public LegacyRunConfigurationsProvider_CustomApplicationPlugin() {
  }

  public void doInit() {
    // register kinds 
    // register foreign factories 
    ConfigurationType configurationType_ = ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), new _FunctionTypes._return_P0_E0<Class<ConfigurationType>>() {
      public Class<ConfigurationType> invoke() {
        try {
          return (Class<ConfigurationType>) getClass().getClassLoader().loadClass("jetbrains.mps.buildlanguage.plugin.BuildLanguage_ConfigurationType");
        } catch (ClassNotFoundException cl) {
          LOG.error("Can not find configuration type " + "jetbrains.mps.buildlanguage.plugin.BuildLanguage_ConfigurationType" + ". Check languages dependency.", cl);
          return (Class<ConfigurationType>) null;
        }
      }
    }.invoke());
    if (configurationType_ != null) {
      ((BuildLanguage_ConfigurationType) configurationType_).addForeignFactory(new DefaultPackagingLanguageApplication_Factory(configurationType_));

    }
    // register creators 
    ExtensionPoint<RuntimeConfigurationProducer> creatorsExtensionPoint = Extensions.getArea(null).getExtensionPoint(RuntimeConfigurationProducer.RUNTIME_CONFIGURATION_PRODUCER);
    {
      DefaultPackagingLanguageConfigurationFromMPSLayout configurationCreator = new DefaultPackagingLanguageConfigurationFromMPSLayout();
      ListSequence.fromList(LegacyRunConfigurationsProvider_CustomApplicationPlugin.this.myConfigurationCreators).addElement(configurationCreator);
      creatorsExtensionPoint.registerExtension(configurationCreator);
    }
    {
      DefaultPackagingLanguageConfigurationFromConfiguration configurationCreator = new DefaultPackagingLanguageConfigurationFromConfiguration();
      ListSequence.fromList(LegacyRunConfigurationsProvider_CustomApplicationPlugin.this.myConfigurationCreators).addElement(configurationCreator);
      creatorsExtensionPoint.registerExtension(configurationCreator);
    }
  }

  public void doDispose() {
    ExtensionPoint<RuntimeConfigurationProducer> creatorsExtensionPoint = Extensions.getArea(null).getExtensionPoint(RuntimeConfigurationProducer.RUNTIME_CONFIGURATION_PRODUCER);
    for (RuntimeConfigurationProducer configurationCreator : ListSequence.fromList(LegacyRunConfigurationsProvider_CustomApplicationPlugin.this.myConfigurationCreators).reversedList()) {
      creatorsExtensionPoint.unregisterExtension(configurationCreator);
    }
    ListSequence.fromList(LegacyRunConfigurationsProvider_CustomApplicationPlugin.this.myConfigurationCreators).clear();
    ExtensionPoint<ConfigurationType> kindsExtensionPoint = Extensions.getArea(null).getExtensionPoint(ConfigurationType.CONFIGURATION_TYPE_EP);
    for (ConfigurationType configurationKind : ListSequence.fromList(LegacyRunConfigurationsProvider_CustomApplicationPlugin.this.myConfigurationKinds).reversedList()) {
      kindsExtensionPoint.unregisterExtension(configurationKind);
    }
    ListSequence.fromList(LegacyRunConfigurationsProvider_CustomApplicationPlugin.this.myConfigurationKinds).clear();
  }
}
