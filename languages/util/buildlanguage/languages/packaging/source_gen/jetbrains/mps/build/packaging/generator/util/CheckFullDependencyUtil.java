package jetbrains.mps.build.packaging.generator.util;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedHashMap;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.ArrayList;
import jetbrains.mps.project.DevKit;
import jetbrains.mps.smodel.Generator;

public class CheckFullDependencyUtil {
  public CheckFullDependencyUtil() {
  }

  public static Map<IModule, Iterable<IModule>> checkFullDependency(final Map<IModule, SNode> modules) {
    Map<IModule, Iterable<IModule>> missingDependencyResult = MapSequence.fromMap(new LinkedHashMap<IModule, Iterable<IModule>>(16, (float) 0.75, false));

    Set<IModule> coreModules = SetSequence.fromSet(new HashSet<IModule>());
    SetSequence.fromSet(coreModules).addSequence(SetSequence.fromSet(MapSequence.fromMap(modules).keySet()).where(new IWhereFilter<IModule>() {
      public boolean accept(IModule it) {
        return (getContainingPlugin(MapSequence.fromMap(modules).get(it)) == null);
      }
    }));

    // check core modules dependency 
    for (IModule module : SetSequence.fromSet(coreModules)) {
      List<IModule> dependencyToCheck = CheckFullDependencyUtil.getDependencyToCheck(module);
      Iterable<IModule> missingDependency = ListSequence.fromList(dependencyToCheck).subtract(SetSequence.fromSet(coreModules));
      if (Sequence.fromIterable(missingDependency).isNotEmpty()) {
        MapSequence.fromMap(missingDependencyResult).put(module, missingDependency);
      }
    }

    Set<IModule> pluginModules = SetSequence.fromSet(new HashSet<IModule>());
    SetSequence.fromSet(pluginModules).addSequence(SetSequence.fromSet(MapSequence.fromMap(modules).keySet()).where(new IWhereFilter<IModule>() {
      public boolean accept(IModule it) {
        return (getContainingPlugin(MapSequence.fromMap(modules).get(it)) != null);
      }
    }));

    // check plugin modules dependency 
    for (IModule module : SetSequence.fromSet(pluginModules)) {
      List<IModule> dependencyToCheck = CheckFullDependencyUtil.getDependencyToCheck(module);
      Iterable<IModule> missingDependency = ListSequence.fromList(dependencyToCheck).subtract(SetSequence.fromSet(MapSequence.fromMap(modules).keySet()));
      if (Sequence.fromIterable(missingDependency).isNotEmpty()) {
        MapSequence.fromMap(missingDependencyResult).put(module, missingDependency);
      }
    }

    return missingDependencyResult;
  }

  public static SNode getContainingPlugin(SNode node) {
    return SNodeOperations.getAncestor(node, "jetbrains.mps.build.packaging.structure.IPlugin", false, false);
  }

  private static List<IModule> getDependencyToCheck(IModule module) {
    List<IModule> dependencyToCheck = ListSequence.fromList(new ArrayList<IModule>());
    Set<IModule> dependency = module.getDependenciesManager().getAllVisibleModules();
    if (module instanceof DevKit) {
      dependency.addAll(((DevKit) module).getAllExportedLanguages());
      dependency.addAll(((DevKit) module).getAllExportedSolutions());
      dependency.addAll(((DevKit) module).getAllExtendedDevkits());
    }
    ListSequence.fromList(dependencyToCheck).addSequence(SetSequence.fromSet(dependency));
    return ListSequence.fromList(dependencyToCheck).where(new IWhereFilter<IModule>() {
      public boolean accept(IModule it) {
        return !(it instanceof Generator) && !(it.isPackaged()) && it.getDescriptorFile() != null;
      }
    }).toListSequence();
  }
}
