package jetbrains.mps.build.reduced.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IPropertiesPersistence;
import jetbrains.mps.make.facet.ITargetEx2;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.smodel.resources.GResource;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.resources.IPropertiesAccessor;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.generator.GenerationStatus;
import jetbrains.mps.generator.fileGenerator.FileGenerationUtil;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.generator.impl.dependencies.GenerationRootDependencies;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.io.File;
import jetbrains.mps.make.script.IConfig;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import java.util.Map;
import jetbrains.mps.make.script.IPropertiesPool;

public class CollectHashes_Facet extends IFacet.Stub {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("jetbrains.mps.build.reduced.CollectHashes");

  public CollectHashes_Facet() {
    ListSequence.fromList(targets).addElement(new CollectHashes_Facet.Target_collect());
  }

  public Iterable<ITarget> targets() {
    return targets;
  }

  public Iterable<IFacet.Name> optional() {
    return null;
  }

  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.lang.core.Generate"), new IFacet.Name("jetbrains.mps.lang.core.Make")});
  }

  public Iterable<IFacet.Name> extended() {
    return null;
  }

  public IFacet.Name getName() {
    return this.name;
  }

  public IPropertiesPersistence propertiesPersistence() {
    return new CollectHashes_Facet.TargetProperties();
  }

  public static class Target_collect implements ITargetEx2 {
    private static Class<? extends IResource>[] EXPECTED_INPUT = (Class<? extends IResource>[]) new Class[]{GResource.class};
    private static Class<? extends IResource>[] EXPECTED_OUTPUT = (Class<? extends IResource>[]) new Class[]{};
    private ITarget.Name name = new ITarget.Name("jetbrains.mps.build.reduced.CollectHashes.collect");

    public Target_collect() {
    }

    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          Iterable<IResource> _output_revm5v_a0a = null;
          final Iterable<GResource> input = (Iterable<GResource>) (Iterable) rawInput;
          switch (0) {
            case 0:
              for (GResource gres : Sequence.fromIterable(input)) {
                GenerationStatus status = (gres).status();
                if (status.isOk()) {
                  String outputRoot = gres.module().getOutputFor(gres.model());
                  String outputDir = FileGenerationUtil.getDefaultOutputDir(gres.model(), FileSystem.getInstance().getFileByPath(outputRoot)).getPath();
                  for (GenerationRootDependencies grd : status.getDependencies().getRootDependencies()) {
                    for (String file : grd.getFiles()) {
                      MapSequence.fromMap(pa.global().properties(Target_collect.this.getName(), CollectHashes_Facet.Target_collect.Parameters.class).fileHashes()).put(new File(new File(outputDir), file).getAbsolutePath(), grd.getHash());
                    }
                  }
                }
              }
            default:
              return new IResult.SUCCESS(_output_revm5v_a0a);
          }
        }
      };
    }

    public IConfig createConfig() {
      return null;
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.Generate.generate")});
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.Make.make")});
    }

    public ITarget.Name getName() {
      return name;
    }

    public boolean isOptional() {
      return false;
    }

    public boolean requiresInput() {
      return true;
    }

    public boolean producesOutput() {
      return true;
    }

    public Iterable<Class<? extends IResource>> expectedInput() {
      return Sequence.fromArray(EXPECTED_INPUT);
    }

    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }

    public <T> T createParameters(Class<T> cls) {
      return cls.cast(new Parameters());
    }

    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      if (t != null) {
        ((Tuples._1) t).assign((Tuples._1) copyFrom);
      }
      return t;
    }

    public int workEstimate() {
      return 10;
    }

    public static class Parameters extends MultiTuple._1<Map<String, String>> {
      public Parameters() {
        super();
      }

      public Parameters(Map<String, String> fileHashes) {
        super(fileHashes);
      }

      public Map<String, String> fileHashes(Map<String, String> value) {
        return super._0(value);
      }

      public Map<String, String> fileHashes() {
        return super._0();
      }

      @SuppressWarnings(value = "unchecked")
      public CollectHashes_Facet.Target_collect.Parameters assignFrom(Tuples._1<Map<String, String>> from) {
        return (CollectHashes_Facet.Target_collect.Parameters) super.assign(from);
      }
    }
  }

  public static class TargetProperties implements IPropertiesPersistence {
    public TargetProperties() {
    }

    public void storeValues(Map<String, String> store, IPropertiesPool properties) {
      {
        ITarget.Name name = new ITarget.Name("jetbrains.mps.build.reduced.CollectHashes.collect");
        if (properties.hasProperties(name)) {
          CollectHashes_Facet.Target_collect.Parameters props = properties.properties(name, CollectHashes_Facet.Target_collect.Parameters.class);
          MapSequence.fromMap(store).put("jetbrains.mps.build.reduced.CollectHashes.collect.fileHashes", null);
        }
      }
    }

    public void loadValues(Map<String, String> store, IPropertiesPool properties) {
      try {
        {
          ITarget.Name name = new ITarget.Name("jetbrains.mps.build.reduced.CollectHashes.collect");
          CollectHashes_Facet.Target_collect.Parameters props = properties.properties(name, CollectHashes_Facet.Target_collect.Parameters.class);
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.build.reduced.CollectHashes.collect.fileHashes")) {
            props.fileHashes(null);
          }
        }
      } catch (RuntimeException re) {
      }
    }
  }
}
