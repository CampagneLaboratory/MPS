package jetbrains.mps.build.reduced.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IPropertiesPersistence;
import jetbrains.mps.make.facet.ITargetEx;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.smodel.resources.IDeltaResource;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.resources.IPropertiesAccessor;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.make.runtime.util.DeltaReconciler;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.make.delta.IDelta;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.make.delta.IInternalDelta;
import jetbrains.mps.internal.make.runtime.util.FilesDelta;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.make.script.IConfig;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import java.util.Map;
import jetbrains.mps.make.script.IPropertiesPool;
import jetbrains.mps.internal.collections.runtime.MapSequence;

public class ReportFiles_Facet extends IFacet.Stub {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("jetbrains.mps.build.reduced.ReportFiles");

  public ReportFiles_Facet() {
    ListSequence.fromList(targets).addElement(new ReportFiles_Facet.Target_report());
  }

  public Iterable<ITarget> targets() {
    return targets;
  }

  public Iterable<IFacet.Name> optional() {
    return null;
  }

  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.lang.core.TextGen"), new IFacet.Name("jetbrains.mps.lang.core.Make")});
  }

  public Iterable<IFacet.Name> extended() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.lang.core.Make")});
  }

  public IFacet.Name getName() {
    return this.name;
  }

  public IPropertiesPersistence propertiesPersistence() {
    return new ReportFiles_Facet.TargetProperties();
  }

  public static class Target_report implements ITargetEx {
    private static Class<? extends IResource>[] EXPECTED_INPUT = (Class<? extends IResource>[]) new Class[]{IDeltaResource.class};
    private static Class<? extends IResource>[] EXPECTED_OUTPUT = (Class<? extends IResource>[]) new Class[]{};

    private ITarget.Name name = new ITarget.Name("jetbrains.mps.build.reduced.ReportFiles.report");

    public Target_report() {
    }

    public IJob createJob() {
      return new IJob.Stub() {
        public IResult execute(final Iterable<IResource> input, final IJobMonitor monitor, final IPropertiesAccessor pa) {
          Iterable<IResource> _output_bk4wqp_a0a = null;
          switch (0) {
            case 0:
              ModelAccess.instance().requireWrite(new Runnable() {
                public void run() {
                  new DeltaReconciler(Sequence.fromIterable(input).translate(new ITranslator2<IResource, IDelta>() {
                    public Iterable<IDelta> translate(IResource res) {
                      return ((IDeltaResource) res).delta();
                    }
                  }).where(new IWhereFilter<IDelta>() {
                    public boolean accept(IDelta d) {
                      return !(d instanceof IInternalDelta);
                    }
                  })).visitAll(new FilesDelta.Visitor() {
                    @Override
                    public boolean acceptWritten(IFile file) {
                      ListSequence.fromList(pa.global().properties(Target_report.this.getName(), ReportFiles_Facet.Target_report.Parameters.class).writtenFiles()).addElement(file.getPath());
                      return true;
                    }

                    @Override
                    public boolean acceptDeleted(IFile file) {
                      ListSequence.fromList(pa.global().properties(Target_report.this.getName(), ReportFiles_Facet.Target_report.Parameters.class).deletedFiles()).addElement(file.getPath());
                      return true;
                    }
                  });
                }
              });
              _output_bk4wqp_a0a = Sequence.fromIterable(_output_bk4wqp_a0a).concat(Sequence.fromIterable(input));
            default:
              return new IResult.SUCCESS(_output_bk4wqp_a0a);
          }
        }
      };
    }

    public IConfig createConfig() {
      return null;
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGen")});
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.Make.reconcile")});
    }

    public ITarget.Name getName() {
      return name;
    }

    public boolean isOptional() {
      return false;
    }

    public boolean requiresInput() {
      return true;
    }

    public boolean producesOutput() {
      return true;
    }

    public Iterable<Class<? extends IResource>> expectedInput() {
      return Sequence.fromArray(EXPECTED_INPUT);
    }

    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }

    public <T> T createParameters(Class<T> cls) {
      return cls.cast(new Parameters());
    }

    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      if (t != null) {
        ((Tuples._2) t).assign((Tuples._2) copyFrom);
      }
      return t;
    }

    public static class Parameters extends MultiTuple._2<List<String>, List<String>> {
      public Parameters() {
        super();
      }

      public Parameters(List<String> writtenFiles, List<String> deletedFiles) {
        super(writtenFiles, deletedFiles);
      }

      public List<String> writtenFiles(List<String> value) {
        return super._0(value);
      }

      public List<String> deletedFiles(List<String> value) {
        return super._1(value);
      }

      public List<String> writtenFiles() {
        return super._0();
      }

      public List<String> deletedFiles() {
        return super._1();
      }

      @SuppressWarnings(value = "unchecked")
      public ReportFiles_Facet.Target_report.Parameters assignFrom(Tuples._2<List<String>, List<String>> from) {
        return (ReportFiles_Facet.Target_report.Parameters) super.assign(from);
      }
    }
  }

  public static class TargetProperties implements IPropertiesPersistence {
    public TargetProperties() {
    }

    public void storeValues(Map<String, String> store, IPropertiesPool properties) {
      {
        ITarget.Name name = new ITarget.Name("jetbrains.mps.build.reduced.ReportFiles.report");
        if (properties.hasProperties(name)) {
          ReportFiles_Facet.Target_report.Parameters props = properties.properties(name, ReportFiles_Facet.Target_report.Parameters.class);
          MapSequence.fromMap(store).put("jetbrains.mps.build.reduced.ReportFiles.report.writtenFiles", null);
          MapSequence.fromMap(store).put("jetbrains.mps.build.reduced.ReportFiles.report.deletedFiles", null);
        }
      }
    }

    public void loadValues(Map<String, String> store, IPropertiesPool properties) {
      try {
        {
          ITarget.Name name = new ITarget.Name("jetbrains.mps.build.reduced.ReportFiles.report");
          ReportFiles_Facet.Target_report.Parameters props = properties.properties(name, ReportFiles_Facet.Target_report.Parameters.class);
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.build.reduced.ReportFiles.report.writtenFiles")) {
            props.writtenFiles(null);
          }
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.build.reduced.ReportFiles.report.deletedFiles")) {
            props.deletedFiles(null);
          }
        }
      } catch (RuntimeException re) {
      }
    }
  }
}
