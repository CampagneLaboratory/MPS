package jetbrains.mps.build.gentest.plugin;

/*Generated by MPS */

import jetbrains.mps.project.IModule;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.apache.tools.ant.util.JavaEnvUtils;
import java.io.File;
import jetbrains.mps.util.PathManager;
import jetbrains.mps.build.ant.generation.unittest.UnitTestRunner;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.reloading.RealClassPathItem;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.project.AbstractModule;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class Tester implements ITestResource {
  private IModule module;
  private Iterable<String> testClasses;

  public Tester(IModule module, Iterable<String> testClasses) {
    this.module = module;
    this.testClasses = testClasses;
  }

  public List<String> buildCommandLine() {
    List<String> cmdline = ListSequence.fromList(new ArrayList<String>());
    ListSequence.fromList(cmdline).addElement(JavaEnvUtils.getJreExecutable("java"));

    List<String> prependClasspath = ListSequence.fromList(new ArrayList<String>());
    ListSequence.fromList(prependClasspath).addElement(new File(PathManager.getHomePath() + File.separator + "lib" + File.separator + "junit4" + File.separator + "junit-4.8.2.jar").getAbsolutePath());
    ListSequence.fromList(prependClasspath).addElement(UnitTestRunner.class.getCanonicalName());

    ListSequence.fromList(cmdline).addElement("-classpath");
    ListSequence.fromList(cmdline).addElement(IterableUtils.join(ListSequence.fromList(prependClasspath).concat(Sequence.fromIterable(getModuleClasspath())), System.getProperty("path.separator")));

    for (String tc : testClasses) {
      ListSequence.fromList(cmdline).addElement("-c");
      ListSequence.fromList(cmdline).addElement(tc);
    }
    return cmdline;
  }

  private Iterable<String> getModuleClasspath() {
    final Wrappers._T<List<RealClassPathItem>> cpis = new Wrappers._T<List<RealClassPathItem>>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        cpis.value = AbstractModule.getDependenciesClasspath(Collections.singleton(module), true).flatten();
      }
    });
    return ListSequence.fromList(cpis.value).select(new ISelector<RealClassPathItem, String>() {
      public String select(RealClassPathItem cpi) {
        return cpi.getPath();
      }
    });
  }

  public String describe() {
    return "Testing " + module.getModuleFqName();
  }
}
