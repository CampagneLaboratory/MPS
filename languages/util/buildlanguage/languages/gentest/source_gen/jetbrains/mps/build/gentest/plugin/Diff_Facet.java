package jetbrains.mps.build.gentest.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IPropertiesPersistence;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.smodel.resources.ITResource;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.resources.IPropertiesAccessor;
import jetbrains.mps.smodel.resources.TResource;
import jetbrains.mps.make.script.IFeedback;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.make.script.IConfig;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import java.util.Map;
import jetbrains.mps.make.script.IPropertiesPool;

public class Diff_Facet extends IFacet.Stub {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("jetbrains.mps.build.gentest.Diff");

  public Diff_Facet() {
    ListSequence.fromList(targets).addElement(new Diff_Facet.Target_diff());
  }

  public Iterable<ITarget> targets() {
    return targets;
  }

  public Iterable<IFacet.Name> optional() {
    return null;
  }

  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.lang.core.TextGen"), new IFacet.Name("jetbrains.mps.lang.core.Make")});
  }

  public Iterable<IFacet.Name> extended() {
    return null;
  }

  public IFacet.Name getName() {
    return this.name;
  }

  public IPropertiesPersistence propertiesPersistence() {
    return new Diff_Facet.TargetProperties();
  }

  public static class Target_diff implements ITarget {
    private static Class<? extends IResource>[] EXPECTED_INPUT = (Class<? extends IResource>[]) new Class[]{ITResource.class};
    private static Class<? extends IResource>[] EXPECTED_OUTPUT = (Class<? extends IResource>[]) new Class[]{};

    private ITarget.Name name = new ITarget.Name("jetbrains.mps.build.gentest.Diff.diff");

    public Target_diff() {
    }

    public IJob createJob() {
      return new IJob.Stub() {
        public IResult execute(final Iterable<IResource> input, final IJobMonitor monitor, final IPropertiesAccessor pa) {
          Iterable<IResource> _output_mtqq_a0a = null;
          switch (0) {
            case 0:
              if (pa.global().properties(Target_diff.this.getName(), Diff_Facet.Target_diff.Parameters.class).path2tmp() != null) {
                monitor.currentProgress().beginWork("Diffing", 100 * Sequence.fromIterable(input).count(), monitor.currentProgress().workLeft());
                for (IResource resource : input) {
                  String fqn = ((TResource) resource).module().getModuleFqName();
                  monitor.currentProgress().advanceWork("Diffing", 1, fqn);
                  for (String diff : new Differ(pa.global().properties(Target_diff.this.getName(), Diff_Facet.Target_diff.Parameters.class).path2tmp()).diff()) {
                    monitor.reportFeedback(new IFeedback.ERROR(String.valueOf(diff)));
                  }
                  monitor.currentProgress().advanceWork("Diffing", 99, fqn);
                }
                monitor.currentProgress().finishWork("Diffing");
                MapSequence.fromMap(pa.global().properties(Target_diff.this.getName(), Diff_Facet.Target_diff.Parameters.class).path2tmp()).clear();
              }
            default:
              return new IResult.SUCCESS(_output_mtqq_a0a);
          }
        }
      };
    }

    public IConfig createConfig() {
      return null;
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGen")});
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.Make.reconcile"), new ITarget.Name("jetbrains.mps.lang.core.Make.make")});
    }

    public ITarget.Name getName() {
      return name;
    }

    public boolean requiresInput() {
      return true;
    }

    public boolean producesOutput() {
      return true;
    }

    public Iterable<Class<? extends IResource>> expectedInput() {
      return Sequence.fromArray(EXPECTED_INPUT);
    }

    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }

    public <T> T createParameters(Class<T> cls) {
      return cls.cast(new Parameters());
    }

    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      if (t != null) {
        ((Tuples._1) t).assign((Tuples._1) copyFrom);
      }
      return t;
    }

    public static class Parameters extends MultiTuple._1<Map<String, String>> {
      public Parameters() {
        super();
      }

      public Parameters(Map<String, String> path2tmp) {
        super(path2tmp);
      }

      public Map<String, String> path2tmp(Map<String, String> value) {
        return super._0(value);
      }

      public Map<String, String> path2tmp() {
        return super._0();
      }

      @SuppressWarnings(value = "unchecked")
      public Diff_Facet.Target_diff.Parameters assignFrom(Tuples._1<Map<String, String>> from) {
        return (Diff_Facet.Target_diff.Parameters) super.assign(from);
      }
    }
  }

  public static class TargetProperties implements IPropertiesPersistence {
    public TargetProperties() {
    }

    public void storeValues(Map<String, String> store, IPropertiesPool properties) {
      {
        ITarget.Name name = new ITarget.Name("jetbrains.mps.build.gentest.Diff.diff");
        if (properties.hasProperties(name)) {
          Diff_Facet.Target_diff.Parameters props = properties.properties(name, Diff_Facet.Target_diff.Parameters.class);
          MapSequence.fromMap(store).put("jetbrains.mps.build.gentest.Diff.diff.path2tmp", null);
        }
      }
    }

    public void loadValues(Map<String, String> store, IPropertiesPool properties) {
      try {
        {
          ITarget.Name name = new ITarget.Name("jetbrains.mps.build.gentest.Diff.diff");
          Diff_Facet.Target_diff.Parameters props = properties.properties(name, Diff_Facet.Target_diff.Parameters.class);
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.build.gentest.Diff.diff.path2tmp")) {
            props.path2tmp(null);
          }
        }
      } catch (RuntimeException re) {
      }
    }
  }
}
