package jetbrains.mps.build.gentest.plugin;

/*Generated by MPS */

import java.util.Map;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.io.File;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import difflib.Patch;
import difflib.DiffUtils;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

/*package*/ class Differ {
  private Map<String, String> path2tmp;

  public Differ(Map<String, String> path2tmp) {
    this.path2tmp = path2tmp;
  }

  public List<String> diff() {
    List<String> diffs = ListSequence.fromList(new ArrayList<String>());
    for (IMapping<String, String> p2t : MapSequence.fromMap(path2tmp).mappingsSet()) {
      File orig = new File(p2t.key());
      File revd = new File(p2t.value());
      if (orig.exists() && revd.exists() && orig.isDirectory() && revd.isDirectory()) {
        diffDirs(orig, revd, diffs);
      } else if (!(orig.exists()) && !(revd.exists())) {
        ListSequence.fromList(diffs).addElement("None exists: " + orig + " or " + revd);
      } else if (!(orig.exists())) {
        ListSequence.fromList(diffs).addElement("Created: " + revd);
      } else if (!(revd.exists())) {
        ListSequence.fromList(diffs).addElement("Removed: " + orig);
      } else {
        ListSequence.fromList(diffs).addElement("Something weird here: " + orig + " or here " + revd);
      }
    }
    return diffs;
  }

  private void diffDirs(final File orig, File revd, final List<String> diffs) {
    Iterable<String> onames = Sequence.fromArray(orig.list());
    Iterable<String> rnames = Sequence.fromArray(revd.list());
    if (Sequence.fromIterable(onames).disjunction(Sequence.fromIterable(rnames)).isNotEmpty()) {
      Sequence.fromIterable(onames).subtract(Sequence.fromIterable(rnames)).visitAll(new IVisitor<String>() {
        public void visit(String it) {
          if ("trace.info".equals(it)) {
            return;
          }
          ListSequence.fromList(diffs).addElement("Removed: " + new File(orig, it));
        }
      });
      Sequence.fromIterable(rnames).subtract(Sequence.fromIterable(onames)).visitAll(new IVisitor<String>() {
        public void visit(String it) {
          if ("trace.info".equals(it)) {
            return;
          }
          ListSequence.fromList(diffs).addElement("Created: " + new File(orig, it));
        }
      });
    }
    for (String name : Sequence.fromIterable(onames).intersect(Sequence.fromIterable(rnames))) {
      if ("trace.info".equals(name)) {
        continue;
      }

      File onext = new File(orig, name);
      File rnext = new File(revd, name);
      if (onext.isDirectory() == rnext.isDirectory()) {
        if (!(onext.isDirectory())) {
          List<String> olines = fileToStrings(onext);
          Patch patch = DiffUtils.diff(olines, fileToStrings(rnext));
          if (!(patch.getDeltas().isEmpty())) {
            ListSequence.fromList(diffs).addSequence(ListSequence.fromList(DiffUtils.generateUnifiedDiff(onext.getPath(), rnext.getPath(), olines, patch, 5)));
          }
        } else {
          diffDirs(onext, rnext, diffs);
        }
      } else {
        ListSequence.fromList(diffs).addElement("Something weird here: " + onext + " or here " + rnext);
      }
    }
  }

  private List<String> fileToStrings(File f) {
    List<String> result = ListSequence.fromList(new ArrayList<String>());
    BufferedReader in = null;
    try {
      in = new BufferedReader(new FileReader(f));
      String line;
      while ((line = in.readLine()) != null) {
        ListSequence.fromList(result).addElement(line);
      }
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      if (in != null) {
        try {
          in.close();
        } catch (IOException ignore) {
        }
      }
    }
    return result;
  }
}
