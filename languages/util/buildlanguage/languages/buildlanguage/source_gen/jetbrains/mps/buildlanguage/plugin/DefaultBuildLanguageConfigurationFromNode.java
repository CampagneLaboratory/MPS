package jetbrains.mps.buildlanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.runconfigs.BaseConfigCreator;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.logging.Logger;
import com.intellij.execution.configurations.RunConfiguration;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.extensions.Extensions;
import com.intellij.execution.configurations.ConfigurationType;
import jetbrains.mps.plugins.pluginparts.runconfigs.MPSPsiElement;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.configurations.ConfigurationFactory;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class DefaultBuildLanguageConfigurationFromNode extends BaseConfigCreator<SNode> implements Cloneable {
  private static final Logger LOG = Logger.getLogger(DefaultBuildLanguageConfigurationFromNode.class);

  private RunConfiguration myConfig;

  public DefaultBuildLanguageConfigurationFromNode() {
    super(findFactoryImpl(ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), BuildLanguage_ConfigurationType.class), "DefaultBuildLanguageApplication"));
  }

  protected RunConfiguration doCreateConfiguration(SNode node) {
    this.createConfig(node);
    return this.myConfig;
  }

  private void createConfig(final SNode parameter) {
    DefaultBuildLanguageConfigurationFromNode.this.setSourceElement(new MPSPsiElement(parameter));
    {
      BuildLanguage_ConfigurationType configType = ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), BuildLanguage_ConfigurationType.class);
      DefaultBuildLanguageApplication_Configuration _config = new DefaultBuildLanguageApplication_Configuration(DefaultBuildLanguageConfigurationFromNode.this.getContext().getProject(), findFactory(configType, "DefaultBuildLanguageApplication"), "NewConfig");
      _config.setName(SPropertyOperations.getString(parameter, "name"));
      _config.getStateObject().nodeId = parameter.getId();
      _config.getStateObject().modelId = parameter.getModel().getModelDescriptor().getSModelReference().toString();
      DefaultBuildLanguageConfigurationFromNode.this.myConfig = _config;
    }
  }

  @Override
  public DefaultBuildLanguageConfigurationFromNode clone() {
    return ((DefaultBuildLanguageConfigurationFromNode) super.clone());
  }

  protected boolean isApplicable(final Object element) {
    return element instanceof SNode && SNodeOperations.isInstanceOf(((SNode) element), "jetbrains.mps.buildlanguage.structure.Project");
  }

  @NotNull
  private ConfigurationFactory findFactory(ConfigurationType configurationType, String configurationName) {
    return findFactoryImpl(configurationType, configurationName);
  }

  @NotNull
  private static ConfigurationFactory findFactoryImpl(ConfigurationType configurationType, String configurationName) {
    for (ConfigurationFactory factory : Sequence.fromIterable(Sequence.fromArray(configurationType.getConfigurationFactories()))) {
      if (factory.getClass().getName().contains(configurationName)) {
        return factory;
      }
    }
    LOG.warning("Cound not find configuration factory for " + configurationName + " in type " + configurationType.getDisplayName() + ".");
    return configurationType.getConfigurationFactories()[0];
  }
}
