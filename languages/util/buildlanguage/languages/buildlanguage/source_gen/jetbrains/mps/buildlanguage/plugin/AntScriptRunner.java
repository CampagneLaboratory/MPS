package jetbrains.mps.buildlanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.util.plugin.run.BaseRunner;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.baseLanguage.util.plugin.run.ConfigRunParameters;
import jetbrains.mps.vfs.IFile;
import com.intellij.execution.process.ProcessNotCreatedException;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.vfs.FileSystem;
import java.io.File;
import java.io.IOException;
import com.intellij.openapi.application.PathManager;
import com.intellij.openapi.application.PathMacros;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;

@Deprecated
public class AntScriptRunner extends BaseRunner {
  private static Logger LOG = Logger.getLogger(AntScriptRunner.class);

  private ProcessBuilder myBuilder;

  @Deprecated
  public AntScriptRunner(ConfigRunParameters parameters) {
    super(parameters);
  }

  public Process run(IFile file) throws ProcessNotCreatedException {
    List<String> parameters = ListSequence.fromList(new ArrayList<String>());

    addBasicParameters(parameters, file);
    AntScriptRunner.addMacroValues(parameters);
    addProgramParameters(parameters);

    // create builder 
    this.myBuilder = new ProcessBuilder(ListSequence.fromListWithValues(new ArrayList<String>(), parameters));

    // set woring dir 
    IFile workingDir;
    if (this.myRunParameters.getWorkingDirectory() != null && StringUtils.isNotEmpty(this.myRunParameters.getWorkingDirectory())) {
      workingDir = FileSystem.getInstance().getFileByPath(this.myRunParameters.getWorkingDirectory());
    } else {
      workingDir = file.getParent();
    }
    this.myBuilder.directory(new File(workingDir.getPath()));

    try {
      return this.myBuilder.start();
    } catch (IOException e) {
      LOG.error("Can't run script " + file + ": " + e.getMessage(), e);
      throw new ProcessNotCreatedException(e.getMessage(), e, this.getCommandLine(workingDir.getPath()));
    }
  }

  private void addBasicParameters(List<String> parameters, IFile file) {
    String javaHome = this.getJavaHome();
    ListSequence.fromList(parameters).addElement(AntScriptRunner.getJavaCommand(javaHome));
    addVmOptions(parameters);
    ListSequence.fromList(parameters).addElement("-Djava.home=" + javaHome);
    String antHome = PathManager.getHomePath() + File.separator + "lib" + File.separator + "ant";
    ListSequence.fromList(parameters).addElement("-Dant.home=" + antHome);
    ListSequence.fromList(parameters).addElement("-cp");
    String antLib = antHome + File.separator + "lib" + File.separator;
    String pathSeparator = System.getProperty("path.separator");
    String classpath = antLib + "ant-launcher.jar" + pathSeparator + antLib + "ant.jar" + pathSeparator + antLib + "ant-nodeps.jar";
    classpath += pathSeparator + javaHome + File.separator + "lib" + File.separator + "tools.jar";
    ListSequence.fromList(parameters).addElement(classpath);
    ListSequence.fromList(parameters).addElement("org.apache.tools.ant.launch.Launcher");
    ListSequence.fromList(parameters).addElement("-f");
    ListSequence.fromList(parameters).addElement(file.getPath());
  }

  public String getCommandString() {
    return this.getCommandString(this.myBuilder);
  }

  public static void addMacroValues(List<String> parameters) {
    PathMacros pathMacros = PathMacros.getInstance();
    ListSequence.fromList(parameters).addElement("-D" + "mps_home" + "=" + jetbrains.mps.util.PathManager.getHomePath());
    Set<String> macroNames = pathMacros.getUserMacroNames();
    for (String macro : SetSequence.fromSet(macroNames)) {
      ListSequence.fromList(parameters).addElement("-D" + macro + "=" + pathMacros.getValue(macro));
    }
  }
}
