package jetbrains.mps.buildlanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.ConstraintsDataHolder;
import java.util.Map;
import jetbrains.mps.smodel.constraints.INodePropertyGetter;
import java.util.HashMap;
import jetbrains.mps.smodel.constraints.BaseNodePropertyGetter;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class TargetReferencePropertyValueExpression_Constraints extends ConstraintsDataHolder {
  public TargetReferencePropertyValueExpression_Constraints() {
  }

  public String getConceptFqName() {
    return "jetbrains.mps.buildlanguage.structure.TargetReferencePropertyValueExpression";
  }

  public Map<String, INodePropertyGetter> getNodePropertyGetters() {
    HashMap<String, INodePropertyGetter> result = new HashMap<String, INodePropertyGetter>();
    result.put("fullName", new BaseNodePropertyGetter() {
      public Object execPropertyGet(SNode node, String propertyName, IScope scope) {
        if ((SLinkOperations.getTarget(node, "declaration", false) == null)) {
          return null;
        }
        return SLinkOperations.getTarget(node, "declaration", false) + "@" + SNodeOperations.getAncestor(SLinkOperations.getTarget(node, "declaration", false), "jetbrains.mps.buildlanguage.structure.Project", false, true);
      }
    });
    return result;
  }
}
