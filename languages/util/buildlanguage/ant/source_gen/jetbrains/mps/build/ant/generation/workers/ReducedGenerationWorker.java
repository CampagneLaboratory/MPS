package jetbrains.mps.build.ant.generation.workers;

/*Generated by MPS */

import jetbrains.mps.build.ant.WhatToDo;
import jetbrains.mps.build.ant.MpsWorker;
import jetbrains.mps.project.Project;
import jetbrains.mps.project.ProjectOperationContext;
import jetbrains.mps.smodel.resources.IMResource;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.concurrent.Future;
import jetbrains.mps.make.script.IResult;
import java.util.List;
import java.util.Map;
import jetbrains.mps.build.ant.util.ThreadUtils;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.make.MakeSession;
import jetbrains.mps.make.script.IScript;
import jetbrains.mps.make.script.ScriptBuilder;
import jetbrains.mps.make.facet.IFacet;
import jetbrains.mps.make.script.IScriptController;
import jetbrains.mps.make.script.IPropertiesPool;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.concurrent.ExecutionException;
import java.io.File;

public class ReducedGenerationWorker extends GeneratorWorker {
  public ReducedGenerationWorker(WhatToDo whatToDo) {
    super(whatToDo);
  }

  public ReducedGenerationWorker(WhatToDo whatToDo, MpsWorker.AntLogger logger) {
    super(whatToDo, logger);
  }

  @Override
  protected void generate(final Project project, MpsWorker.ObjectsToProcess go) {
    ProjectOperationContext ctx = new ProjectOperationContext(project);

    final Iterable<IMResource> resources = Sequence.fromIterable(collectResources(ctx, go)).toListSequence();
    ModelAccess.instance().flushEventQueue();
    final Wrappers._T<Future<IResult>> res = new Wrappers._T<Future<IResult>>();
    final Wrappers._T<List<String>> writtenFiles = new Wrappers._T<List<String>>();
    final Wrappers._T<Map<String, String>> fileHashes = new Wrappers._T<Map<String, String>>();
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        IOperationContext context = new ProjectOperationContext(project);
        BuildMakeService bms = new BuildMakeService();
        MakeSession ms = new MakeSession(context, getMyMessageHandler(), true) {
          @Override
          public IScript toScript(ScriptBuilder scriptBuilder) {
            scriptBuilder.withFacetNames(new IFacet.Name("jetbrains.mps.build.reduced.ReportFiles"), new IFacet.Name("jetbrains.mps.build.reduced.CollectHashes"));
            return scriptBuilder.toScript();
          }
        };
        res.value = bms.make(ms, resources, null, new IScriptController.Stub() {
          @Override
          public void setup(IPropertiesPool pp, Iterable<ITarget> toExecute, Iterable<? extends IResource> input) {
            super.setup(pp, toExecute, input);
            Tuples._1<List<String>> report = (Tuples._1<List<String>>) pp.properties(new ITarget.Name("jetbrains.mps.build.reduced.ReportFiles.report"), Object.class);
            report._0(ListSequence.fromList(new ArrayList<String>()));
            writtenFiles.value = report._0();

            Tuples._1<Map<String, String>> hashes = (Tuples._1<Map<String, String>>) pp.properties(new ITarget.Name("jetbrains.mps.build.reduced.CollectHashes.collect"), Object.class);
            hashes._0(MapSequence.fromMap(new HashMap<String, String>()));
            fileHashes.value = hashes._0();
          }
        });
      }
    });

    try {
      if (!(res.value.get().isSucessful())) {
        myErrors.add("Make was not successful");
      }
      if (writtenFiles.value != null) {
        for (String f : writtenFiles.value) {
          System.out.println("##WRITTEN##" + f);
        }
      }
    } catch (InterruptedException e) {
      myErrors.add(e.toString());
    } catch (ExecutionException e) {
      myErrors.add(e.toString());
    }
    ModelAccess.instance().flushEventQueue();
  }

  public static void main(String[] args) {
    MpsWorker mpsWorker = new ReducedGenerationWorker(WhatToDo.fromDumpInFile(new File(args[0])), new MpsWorker.SystemOutLogger());
    mpsWorker.workFromMain();
  }
}
