package jetbrains.mps.build.ant.make;

/*Generated by MPS */

import jetbrains.mps.build.ant.MpsWorker;
import jetbrains.mps.build.ant.WhatToDo;
import org.apache.tools.ant.ProjectComponent;
import jetbrains.mps.build.ant.Environment;
import jetbrains.mps.project.Project;
import java.util.Set;
import jetbrains.mps.project.IModule;
import java.util.LinkedHashSet;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.Computable;
import jetbrains.mps.util.CollectionUtil;
import jetbrains.mps.util.Condition;
import jetbrains.mps.make.MPSCompilationResult;
import jetbrains.mps.make.ModuleMaker;
import jetbrains.mps.progress.EmptyProgressMonitor;
import java.io.File;

public class MakeWorker extends MpsWorker {
  public MakeWorker(WhatToDo whatToDo, ProjectComponent component) {
    super(whatToDo, component, new MakeEnvironment());
  }

  public MakeWorker(WhatToDo whatToDo, MpsWorker.AntLogger logger) {
    super(whatToDo, logger, new MakeEnvironment());
  }

  public MakeWorker(WhatToDo whatToDo, MpsWorker.AntLogger logger, Environment environment) {
    super(whatToDo, logger, environment);
  }

  @Override
  protected void executeTask(Project project, MpsWorker.ObjectsToProcess go) {
    Set<IModule> toCompile = new LinkedHashSet<IModule>();
    toCompile.addAll(go.getModules());
    for (Project p : go.getProjects()) {
      toCompile.addAll(p.getModules());
    }
    for (final SModelDescriptor modelDescriptor : go.getModels()) {
      IModule owningModule = ModelAccess.instance().runReadAction(new Computable<IModule>() {
        public IModule compute() {
          return modelDescriptor.getModule();
        }
      });
      toCompile.add(owningModule);
    }
    final Set<IModule> finalToCompile = CollectionUtil.filter(toCompile, new Condition<IModule>() {
      @Override
      public boolean met(IModule module) {
        return module.isCompileInMPS() && !(module.isPackaged());
      }
    });
    if (finalToCompile.isEmpty()) {
      return;
    }
    info("Starting compilation:");
    StringBuffer sb = new StringBuffer();
    for (IModule m : finalToCompile) {
      sb.append("    ");
      sb.append(m.getModuleFqName());
      sb.append("\n");
    }
    info(sb.toString());
    MPSCompilationResult result = ModelAccess.instance().runReadAction(new Computable<MPSCompilationResult>() {
      public MPSCompilationResult compute() {
        return new ModuleMaker().make(finalToCompile, new EmptyProgressMonitor() {
          @Override
          public void step(String text) {
            info("    " + text);
          }

          @Override
          public void start(String taskName, int work) {
            info(taskName);
          }
        });
      }
    });
    info(result.toString());
  }

  @Override
  protected void showStatistic() {
    failBuild("make");
  }

  public void work() {
    setupEnvironment();
    final Project project = createDummyProject();
    MpsWorker.ObjectsToProcess go = new MpsWorker.ObjectsToProcess();
    collectModelsToGenerate(go);
    if (go.hasAnythingToGenerate()) {
      reload();
      executeTask(project, go);
    } else {
      error("Could not find anything to generate.");
    }
    disposeProjects(go.getProjects());
    dispose();
    showStatistic();
  }

  public static void main(String[] args) {
    MakeWorker generator = new MakeWorker(WhatToDo.fromDumpInFile(new File(args[0])), new MpsWorker.LogLogger());
    generator.workFromMain();
  }
}
