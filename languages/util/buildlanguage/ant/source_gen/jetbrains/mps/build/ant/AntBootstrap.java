package jetbrains.mps.build.ant;

/*Generated by MPS */

import jetbrains.mps.build.ant.util.ClassloaderUtil;
import java.lang.reflect.Method;
import java.util.List;
import java.net.URL;
import java.util.ArrayList;
import jetbrains.mps.build.ant.util.PathManager;
import java.net.MalformedURLException;
import java.io.File;
import java.util.Scanner;
import java.io.FileNotFoundException;

public class AntBootstrap {
  private volatile ClassLoader myClassLoader;

  public AntBootstrap() {
  }

  public void init(ClassLoader parent) throws Throwable {
    System.setProperty("mps.vfs.useIoFile", "true");
    myClassLoader = ClassloaderUtil.initClassloader(getAdditionalMPSClasspath(), parent);
  }

  public Class<?> loadClass(String name) throws ClassNotFoundException {
    if (myClassLoader == null) {
      return null;
    }
    return myClassLoader.loadClass(name);
  }

  public static void main(String[] args) {
    AntBootstrap antBootstrap = new AntBootstrap();
    try {
      antBootstrap.init(null);
      String className = args[0];
      String methodName = args[1];
      String[] passedArgs = new String[args.length - 2];
      System.arraycopy(args, 2, passedArgs, 0, passedArgs.length);
      Class clazz = antBootstrap.myClassLoader.loadClass(className);
      Method mainMethod = clazz.getDeclaredMethod(methodName);
      mainMethod.setAccessible(true);
      mainMethod.invoke(null, (Object) passedArgs);
    } catch (Throwable t) {
      t.printStackTrace(System.err);
    }
    System.exit(1);
  }

  public static List<URL> getAdditionalMPSClasspath() {
    List<URL> result = new ArrayList<URL>();
    String homePath = PathManager.getHomePath();
    try {
      addMPSBootstrapJars(result, homePath);
      if (result.isEmpty()) {
        //  we're probably running from the sources, let's add the class dirs to the classpath 
        addMPSBootstrapClassFolders(result, homePath);
      }
    } catch (MalformedURLException e) {
    }
    return result;
  }

  private static void addMPSBootstrapJars(List<URL> classPath, String homePath) throws MalformedURLException {
    File ideaPatchJar = new File(homePath + File.separator + "lib" + File.separator + "idea-patch.jar");
    if (ideaPatchJar.exists()) {
      classPath.add(ideaPatchJar.toURI().toURL());
    }
    File mpsJar = new File(homePath + File.separator + "lib" + File.separator + "mps.jar");
    if (mpsJar.exists()) {
      classPath.add(mpsJar.toURI().toURL());
    }

    String selfRoot = PathManager.getResourceRoot(ClassloaderUtil.class, "/" + ClassloaderUtil.class.getName().replace('.', '/') + ".class");
    URL selfRootUrl = new File(selfRoot).getAbsoluteFile().toURI().toURL();

    //  WF? 
    File baseLanguageFolder = new File(homePath + File.separator + "core" + File.separator + "baseLanguage");
    ClassloaderUtil.addLibraries(classPath, baseLanguageFolder, selfRootUrl);
    File languageDesignFolder = new File(homePath + File.separator + "core" + File.separator + "languageDesign");
    ClassloaderUtil.addLibraries(classPath, languageDesignFolder, selfRootUrl);
  }

  private static void addMPSBootstrapClassFolders(List<URL> classPath, String homePath) throws MalformedURLException {
    // todo replace with ClassPathReader call, but don't add new module deps 
    File acp = new File(homePath + File.separator + "build" + File.separator + "idea.additional.classpath.txt");
    if (acp.exists()) {
      try {
        Scanner sc = new Scanner(acp, "UTF-8");
        do {
          String nl = sc.nextLine();
          if (nl.startsWith(":")) {
            continue;
          }
          File dir = new File(homePath, nl);
          if (dir.isDirectory()) {
            final URL url = dir.toURI().toURL();
            classPath.add(url);
          }
        } while (sc.hasNextLine());
        sc.close();
      } catch (FileNotFoundException ignore) {
      }
    }
  }
}
