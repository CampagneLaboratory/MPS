package jetbrains.mps.build.ant.util;

/*Generated by MPS */

import org.jetbrains.annotations.NonNls;
import java.io.FilenameFilter;
import java.io.File;
import java.io.IOException;
import org.jetbrains.annotations.Nullable;
import java.net.URL;
import java.io.InputStream;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.util.PropertyResourceBundle;
import java.util.Enumeration;
import java.util.Properties;
import java.util.Set;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class PathManager {
  @NonNls
  private static final String PROPERTIES_FILE = "idea.properties.file";
  @NonNls
  private static final String PROPERTY_SYSTEM_PATH = "idea.system.path";
  @NonNls
  private static final String PROPERTY_CONFIG_PATH = "idea.config.path";
  @NonNls
  private static final String PROPERTY_PLUGINS_PATH = "idea.plugins.path";
  @NonNls
  private static final String PROPERTY_HOME_PATH = "idea.home.path";
  @NonNls
  private static final String PROPERTY_LOG_PATH = "idea.log.path";
  @NonNls
  private static String ourHomePath;
  @NonNls
  private static String ourSystemPath;
  @NonNls
  private static String ourConfigPath;
  @NonNls
  private static String ourPluginsPath;
  @NonNls
  private static String ourLogPath;
  @NonNls
  private static final String FILE = "file";
  @NonNls
  private static final String JAR = "jar";
  @NonNls
  private static final String JAR_DELIMITER = "!";
  @NonNls
  private static final String PROTOCOL_DELIMITER = ":";
  @NonNls
  public static final String DEFAULT_OPTIONS_FILE_NAME = "other";
  @NonNls
  private static final String LIB_FOLDER = "lib";
  @NonNls
  public static final String PLUGINS_DIRECTORY = "plugins";
  @NonNls
  private static final String BIN_FOLDER = "bin";
  @NonNls
  private static final String LOG_DIRECTORY = "log";
  @NonNls
  private static final String OPTIONS_FOLDER = "options";
  private static final String MPS_DASH = "mps-";
  private static final String DOT_JAR = ".jar";
  private static final String MODULES_PREFIX = "!/modules";
  private static final FilenameFilter MPS_JARS = new FilenameFilter() {
    @Override
    public boolean accept(File dir, String name) {
      return name.startsWith(PathManager.MPS_DASH) && name.endsWith(PathManager.DOT_JAR);
    }
  };

  public PathManager() {
  }

  public static String getHomePath() {
    if (ourHomePath != null) {
      return ourHomePath;
    }
    if (System.getProperty(PROPERTY_HOME_PATH) != null) {
      ourHomePath = PathManager.getAbsolutePath(System.getProperty(PROPERTY_HOME_PATH));
    } else {
      final Class aClass = PathManager.class;
      String rootPath = PathManager.getResourceRoot(aClass, "/" + aClass.getName().replace('.', '/') + ".class");
      if (rootPath != null) {
        File root = new File(rootPath).getAbsoluteFile();
        do {
          final String parent = root.getParent();
          if (parent == null) {
            return null;
          }
          assert parent != null : "No parent found for " + root + "; " + BIN_FOLDER + " folder with " + "idea.properties" + " file not found";
          root = new File(parent).getAbsoluteFile();
          //  one step back to get folder 
        } while (root != null && !(PathManager.isIdeaHome(root)));
        ourHomePath = (root != null ?
          root.getAbsolutePath() :
          null
        );
      }
    }
    try {
      if (!(SystemInfo.isFileSystemCaseSensitive)) {
        ourHomePath = (ourHomePath == null ?
          null :
          new File(ourHomePath).getCanonicalPath()
        );
      }
    } catch (IOException e) {
      //  ignore 
    }
    return ourHomePath;
  }

  private static boolean isIdeaHome(final File root) {
    return new File(root, FileUtil.toSystemDependentName("bin/idea.properties")).exists() || new File(root, FileUtil.toSystemDependentName("community/bin/idea.properties")).exists();
  }

  public static String getLibPath() {
    return PathManager.getHomePath() + File.separator + LIB_FOLDER;
  }

  private static String trimPathQuotes(String path) {
    if (!((path != null && !((path.length() < 3))))) {
      return path;
    }
    if (StringUtil.startsWithChar(path, '\"') && StringUtil.endsWithChar(path, '\"')) {
      return path.substring(1, path.length() - 1);
    }
    return path;
  }

  public static String getSystemPath() {
    if (ourSystemPath != null) {
      return ourSystemPath;
    }
    if (System.getProperty(PROPERTY_SYSTEM_PATH) != null) {
      ourSystemPath = PathManager.getAbsolutePath(PathManager.trimPathQuotes(System.getProperty(PROPERTY_SYSTEM_PATH)));
    } else {
      ourSystemPath = PathManager.getHomePath() + File.separator + "system";
    }
    try {
      File file = new File(ourSystemPath);
      file.mkdirs();
    } catch (Exception e) {
      e.printStackTrace();
    }
    return ourSystemPath;
  }

  public static boolean ensureConfigFolderExists(final boolean createIfNotExists) {
    PathManager.getConfigPathWithoutDialog();
    File file = new File(ourConfigPath);
    if (createIfNotExists && !(file.exists())) {
      file.mkdirs();
      return true;
    }
    return false;
  }

  public static String getConfigPath(boolean createIfNotExists) {
    PathManager.ensureConfigFolderExists(createIfNotExists);
    return ourConfigPath;
  }

  public static String getConfigPath() {
    return PathManager.getConfigPath(true);
  }

  private static String getConfigPathWithoutDialog() {
    if (ourConfigPath != null) {
      return ourConfigPath;
    }
    if (System.getProperty(PROPERTY_CONFIG_PATH) != null) {
      ourConfigPath = PathManager.getAbsolutePath(PathManager.trimPathQuotes(System.getProperty(PROPERTY_CONFIG_PATH)));
    } else {
      ourConfigPath = PathManager.getHomePath() + File.separator + "config";
    }
    return ourConfigPath;
  }

  public static String getBinPath() {
    return PathManager.getHomePath() + File.separator + BIN_FOLDER;
  }

  public static String getOptionsPath() {
    return PathManager.getConfigPath() + File.separator + OPTIONS_FOLDER;
  }

  public static String getOptionsPathWithoutDialog() {
    return PathManager.getConfigPathWithoutDialog() + File.separator + OPTIONS_FOLDER;
  }

  public static File getIndexRoot() {
    File file = new File(PathManager.getSystemPath(), "index");
    try {
      file = file.getCanonicalFile();
    } catch (IOException ignored) {
    }
    file.mkdirs();
    return file;
  }

  public static String getPreinstalledPluginsPath() {
    return PathManager.StringHolder.ourPreinstalledPluginsPath;
  }

  public static String getPluginsPath() {
    if (ourPluginsPath == null) {
      if (System.getProperty(PROPERTY_PLUGINS_PATH) != null) {
        ourPluginsPath = PathManager.getAbsolutePath(PathManager.trimPathQuotes(System.getProperty(PROPERTY_PLUGINS_PATH)));
      } else {
        ourPluginsPath = PathManager.getConfigPath() + File.separatorChar + PLUGINS_DIRECTORY;
      }
    }
    return ourPluginsPath;
  }

  public static String getLogPath() {
    if (ourLogPath == null) {
      if (System.getProperty(PROPERTY_LOG_PATH) != null) {
        ourLogPath = PathManager.getAbsolutePath(PathManager.trimPathQuotes(System.getProperty(PROPERTY_LOG_PATH)));
      } else {
        ourLogPath = PathManager.getSystemPath() + File.separatorChar + LOG_DIRECTORY;
      }
    }
    return ourLogPath;
  }

  private static String getAbsolutePath(String path) {
    if (path.startsWith("~/") || path.startsWith("~\\")) {
      path = System.getProperty("user.home") + path.substring(1);
    }
    return new File(path).getAbsolutePath();
  }

  @NonNls
  public static File getOptionsFile(@NonNls String fileName) {
    return new File(PathManager.getOptionsPath() + File.separatorChar + fileName + ".xml");
  }

  /**
   * * Attempts to detect classpath entry which contains given resource
   */
  @Nullable
  public static String getResourceRoot(Class context, @NonNls String path) {
    URL url = context.getResource(path);
    if (url == null) {
      url = ClassLoader.getSystemResource(path.substring(1));
    }
    if (url == null) {
      return null;
    }
    return PathManager.extractRoot(url, path);
  }

  /**
   * * Attempts to extract classpath entry part from passed URL.
   */
  @NonNls
  private static String extractRoot(URL resourceURL, String resourcePath) {
    if (!((StringUtil.startsWithChar(resourcePath, '/') || StringUtil.startsWithChar(resourcePath, '\\')))) {
      // noinspection HardCodedStringLiteral 
      System.err.println("precondition failed: " + resourcePath);
      return null;
    }
    String protocol = resourceURL.getProtocol();
    String resultPath = null;
    if (FILE.equals(protocol)) {
      String path = resourceURL.getFile();
      final String testPath = path.replace('\\', '/');
      final String testResourcePath = resourcePath.replace('\\', '/');
      if (StringUtil.endsWithIgnoreCase(testPath, testResourcePath)) {
        resultPath = path.substring(0, path.length() - resourcePath.length());
      }
    } else
    if (JAR.equals(protocol)) {
      String fullPath = resourceURL.getFile();
      int delimiter = fullPath.indexOf(JAR_DELIMITER);
      if (delimiter >= 0) {
        String archivePath = fullPath.substring(0, delimiter);
        if (StringUtil.startsWithConcatenationOf(archivePath, FILE, PROTOCOL_DELIMITER)) {
          resultPath = archivePath.substring(FILE.length() + PROTOCOL_DELIMITER.length());
        }
      }
    }
    if (resultPath == null) {
      // noinspection HardCodedStringLiteral 
      System.err.println("cannot extract: " + resultPath + " from " + resourceURL);
      return null;
    }
    resultPath = StringUtil.trimEnd(resultPath, File.separator);
    resultPath = URLUtil.unescapePercentSequences(resultPath);
    return resultPath;
  }

  @NonNls
  public static File getDefaultOptionsFile() {
    return new File(PathManager.getOptionsPath(), DEFAULT_OPTIONS_FILE_NAME + ".xml");
  }

  public static void loadProperties() {
    File propFile = FileUtil.findFirstThatExist(System.getProperty(PROPERTIES_FILE), System.getProperty("user.home") + "/idea.properties", PathManager.getHomePath() + "/bin/idea.properties", PathManager.getHomePath() + "/community/bin/idea.properties");
    if (propFile != null) {
      InputStream fis = null;
      try {
        fis = new BufferedInputStream(new FileInputStream(propFile));
        final PropertyResourceBundle bundle = new PropertyResourceBundle(fis);
        final Enumeration keys = bundle.getKeys();
        String home = (String) bundle.handleGetObject("idea.home");
        if (home != null && ourHomePath == null) {
          ourHomePath = PathManager.getAbsolutePath(PathManager.substitueVars(home));
        }
        final Properties sysProperties = System.getProperties();
        while (keys.hasMoreElements()) {
          String key = (String) keys.nextElement();
          if (sysProperties.getProperty(key, null) == null) {
            //  load the property from the property file only if it is not defined yet 
            final String value = PathManager.substitueVars(bundle.getString(key));
            sysProperties.setProperty(key, value);
          }
        }
      } catch (IOException e) {
        // noinspection HardCodedStringLiteral 
        System.err.println("Problem reading from property file: " + propFile.getPath());
      } finally {
        try {
          if (fis != null) {
            fis.close();
          }
        } catch (IOException e) {
        }
      }
    }
  }

  public static String substitueVars(String s) {
    final String ideaHomePath = PathManager.getHomePath();
    return PathManager.substituteVars(s, ideaHomePath);
  }

  public static String substituteVars(String s, final String ideaHomePath) {
    if (s == null) {
      return null;
    }
    if (s.startsWith("..")) {
      s = ideaHomePath + File.separatorChar + BIN_FOLDER + File.separatorChar + s;
    }
    s = StringUtil.replace(s, "${idea.home}", ideaHomePath);
    final Properties props = System.getProperties();
    final Set keys = props.keySet();
    for (final Object key1 : keys) {
      String key = (String) key1;
      String value = props.getProperty(key);
      s = StringUtil.replace(s, "${" + key + "}", value);
    }
    return s;
  }

  public static String getPluginTempPath() {
    String systemPath = PathManager.getSystemPath();
    return systemPath + File.separator + PLUGINS_DIRECTORY;
  }

  public static File findFileInLibDirectory(@NotNull String relativePath) {
    File file = new File(PathManager.getLibPath() + File.separator + relativePath);
    if (file.exists()) {
      return file;
    }
    return new File(PathManager.getHomePath() + File.separator + "community" + File.separator + "lib" + File.separator + relativePath);
  }

  public static Collection<String> getBootstrapPaths() {
    List<String> paths;
    File lib = new File(getHomePath() + File.separator + "lib");
    if (lib.exists() && lib.isDirectory()) {
      paths = new ArrayList<String>();
      for (File jar : lib.listFiles(MPS_JARS)) {
        paths.add(jar.getAbsolutePath() + MODULES_PREFIX);
      }
      if (paths.size() > 0) {
        return Collections.unmodifiableCollection(paths);
      }
    }
    return Collections.singleton(getHomePath() + File.separator + "core");
  }

  public static String getLanguagesPath() {
    return getHomePath() + File.separator + "languages";
  }

  private static class StringHolder {
    private static final String ourPreinstalledPluginsPath = PathManager.getHomePath() + File.separatorChar + PathManager.PLUGINS_DIRECTORY;

    private StringHolder() {
    }
  }
}
