package jetbrains.mps.ui.modeling.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class ChildAspectDefinition_makeOptional_Intention extends BaseIntention {
  public ChildAspectDefinition_makeOptional_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.ui.modeling.structure.ChildAspectDefinition";
  }

  public String getPresentation() {
    return "ChildAspectDefinition_makeOptional";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.ui.modeling.intentions.ChildAspectDefinition_makeOptional_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:c56898e4-f3c9-4089-b188-8644b4a26692(jetbrains.mps.ui.modeling.intentions@1_0)", "6030013275786405059");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Make Optional";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return !(SPropertyOperations.getBoolean(node, "optional"));
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SPropertyOperations.set(node, "optional", "" + (true));
  }
}
