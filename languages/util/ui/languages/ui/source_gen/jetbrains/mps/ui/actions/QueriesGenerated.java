package jetbrains.mps.ui.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSetupContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import java.util.ArrayList;
import jetbrains.mps.util.Computable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.ui.modeling.behavior.UIObject_Behavior;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.smodel.action.DefaultChildNodeSubstituteAction;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.smodel.action.SideTransformPreconditionContext;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class QueriesGenerated {
  public static void nodeFactory_NodeSetup_ValidateBlock_5224413709453691752(final IOperationContext operationContext, final NodeSetupContext _context) {
    SNode fpd = SNodeFactoryOperations.createNewNode("jetbrains.mps.ui.structure.FunctionParameterDeclaration", null);
    SPropertyOperations.set(fpd, "name", "newValue");
    SLinkOperations.addChild(_context.getNewNode(), "parameter", fpd);
  }

  public static void nodeFactory_NodeSetup_EventHandingBlock_5224413709454317395(final IOperationContext operationContext, final NodeSetupContext _context) {
    SNode fpd = SNodeFactoryOperations.createNewNode("jetbrains.mps.ui.structure.FunctionParameterDeclaration", null);
    SPropertyOperations.set(fpd, "name", "event");
    SLinkOperations.addChild(_context.getNewNode(), "parameter", fpd);
  }

  public static void nodeFactory_NodeSetup_UIObjectStatement_1576918603589068320(final IOperationContext operationContext, final NodeSetupContext _context) {
    if ((_context.getSampleNode() != null)) {
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "viewBinding", true)).toListSequence().visitAll(new IVisitor<SNode>() {
        public void visit(SNode vb) {
          ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(), "viewBinding", true)).addElement(SNodeOperations.detachNode(vb));
        }
      });
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "controllerBinding", true)).toListSequence().visitAll(new IVisitor<SNode>() {
        public void visit(SNode cb) {
          ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(), "controllerBinding", true)).addElement(SNodeOperations.detachNode(cb));
        }
      });
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "compartment", true)).toListSequence().visitAll(new IVisitor<SNode>() {
        public void visit(SNode cm) {
          ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(), "compartment", true)).addElement(SNodeOperations.detachNode(cm));
        }
      });
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "aspect", true)).toListSequence().visitAll(new IVisitor<SNode>() {
        public void visit(SNode as) {
          ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(), "aspect", true)).addElement(SNodeOperations.detachNode(as));
        }
      });
      SLinkOperations.setTarget(_context.getNewNode(), "uiObject", SLinkOperations.getTarget(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "uiObject", false), false);
    }
  }

  public static void nodeFactory_NodeSetup_CreateUIObjectStatement_6261739386029037453(final IOperationContext operationContext, final NodeSetupContext _context) {
    if ((_context.getSampleNode() != null)) {
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "viewBinding", true)).toListSequence().visitAll(new IVisitor<SNode>() {
        public void visit(SNode vb) {
          ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(), "viewBinding", true)).addElement(SNodeOperations.detachNode(vb));
        }
      });
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "controllerBinding", true)).toListSequence().visitAll(new IVisitor<SNode>() {
        public void visit(SNode cb) {
          ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(), "controllerBinding", true)).addElement(SNodeOperations.detachNode(cb));
        }
      });
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "compartment", true)).toListSequence().visitAll(new IVisitor<SNode>() {
        public void visit(SNode cm) {
          ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(), "compartment", true)).addElement(SNodeOperations.detachNode(cm));
        }
      });
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "aspect", true)).toListSequence().visitAll(new IVisitor<SNode>() {
        public void visit(SNode as) {
          ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(), "aspect", true)).addElement(SNodeOperations.detachNode(as));
        }
      });
      SLinkOperations.setTarget(_context.getNewNode(), "uiObject", SLinkOperations.getTarget(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "uiObject", false), false);
    }
  }

  public static void nodeFactory_NodeSetup_AppendUIObjectStatement_1576918603589090122(final IOperationContext operationContext, final NodeSetupContext _context) {
    if ((_context.getSampleNode() != null)) {
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "viewBinding", true)).toListSequence().visitAll(new IVisitor<SNode>() {
        public void visit(SNode vb) {
          ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(), "viewBinding", true)).addElement(SNodeOperations.detachNode(vb));
        }
      });
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "controllerBinding", true)).toListSequence().visitAll(new IVisitor<SNode>() {
        public void visit(SNode cb) {
          ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(), "controllerBinding", true)).addElement(SNodeOperations.detachNode(cb));
        }
      });
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "compartment", true)).toListSequence().visitAll(new IVisitor<SNode>() {
        public void visit(SNode cm) {
          ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(), "compartment", true)).addElement(SNodeOperations.detachNode(cm));
        }
      });
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "aspect", true)).toListSequence().visitAll(new IVisitor<SNode>() {
        public void visit(SNode as) {
          ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(), "aspect", true)).addElement(SNodeOperations.detachNode(as));
        }
      });
      SLinkOperations.setTarget(_context.getNewNode(), "uiObject", SLinkOperations.getTarget(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "uiObject", false), false);
    }
  }

  public static void nodeFactory_NodeSetup_InsertUIObjectStatement_3091159734392475680(final IOperationContext operationContext, final NodeSetupContext _context) {
    if ((_context.getSampleNode() != null)) {
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "viewBinding", true)).toListSequence().visitAll(new IVisitor<SNode>() {
        public void visit(SNode vb) {
          ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(), "viewBinding", true)).addElement(SNodeOperations.detachNode(vb));
        }
      });
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "controllerBinding", true)).toListSequence().visitAll(new IVisitor<SNode>() {
        public void visit(SNode cb) {
          ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(), "controllerBinding", true)).addElement(SNodeOperations.detachNode(cb));
        }
      });
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "compartment", true)).toListSequence().visitAll(new IVisitor<SNode>() {
        public void visit(SNode cm) {
          ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(), "compartment", true)).addElement(SNodeOperations.detachNode(cm));
        }
      });
      ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "aspect", true)).toListSequence().visitAll(new IVisitor<SNode>() {
        public void visit(SNode as) {
          ListSequence.fromList(SLinkOperations.getTargets(_context.getNewNode(), "aspect", true)).addElement(SNodeOperations.detachNode(as));
        }
      });
      SLinkOperations.setTarget(_context.getNewNode(), "uiObject", SLinkOperations.getTarget(SNodeOperations.as(_context.getSampleNode(), "jetbrains.mps.ui.structure.UIObjectStatement"), "uiObject", false), false);
    }
  }

  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Statement_8381258131358549267(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    final List<SNode> availableObjects = new Computable<List<SNode>>() {
      public List<SNode> compute() {
        final SNode ctx = SNodeOperations.getAncestorWhereConceptInList(_context.getParentNode(), new String[]{"jetbrains.mps.ui.structure.UIObjectStatement", "jetbrains.mps.baseLanguage.structure.IStatementListContainer"}, true, false);
        if (SNodeOperations.isInstanceOf(ctx, "jetbrains.mps.ui.structure.UIObjectStatement")) {
          return ListSequence.fromList(SModelOperations.getNodesIncludingImported(_context.getModel(), operationContext.getScope(), "jetbrains.mps.ui.modeling.structure.UIObject")).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode uio) {
              return !(SPropertyOperations.getBoolean(uio, "abstract")) && ((UIObject_Behavior.call_actuallyBelongsTo_1719339442171687163(uio) == null) || Sequence.fromIterable(UIObject_Behavior.call_allExtends_8115675450774407592(SLinkOperations.getTarget(SNodeOperations.as(ctx, "jetbrains.mps.ui.structure.UIObjectStatement"), "uiObject", false))).contains(UIObject_Behavior.call_actuallyBelongsTo_1719339442171687163(uio)));
            }
          }).toListSequence();
        } else {
          return ListSequence.fromList(SModelOperations.getNodesIncludingImported(_context.getModel(), operationContext.getScope(), "jetbrains.mps.ui.modeling.structure.UIObject")).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode uio) {
              return !(SPropertyOperations.getBoolean(uio, "abstract"));
            }
          }).toListSequence();
        }
      }
    }.compute();
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.ui.structure.CreateUIObjectStatement");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        Iterable<SNode> queryResult = new Computable<Iterable<SNode>>() {
          public Iterable<SNode> compute() {
            return availableObjects;
          }
        }.compute();
        if (queryResult != null) {
          for (final SNode item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                SNode uios = SNodeFactoryOperations.createNewNode("jetbrains.mps.ui.structure.CreateUIObjectStatement", null);
                SLinkOperations.setTarget(uios, "uiObject", (item), false);
                return uios;
              }

              public String getMatchingText(String pattern) {
                return SPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.ui.structure.CreateUIObjectStatement"), "conceptAlias") + " " + SPropertyOperations.getString((item), "name");
              }

              public String getVisibleMatchingText(String pattern) {
                return getMatchingText(pattern);
              }
            });
          }
        }
      }
    }
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.ui.structure.AppendUIObjectStatement");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        Iterable<SNode> queryResult = new Computable<Iterable<SNode>>() {
          public Iterable<SNode> compute() {
            return availableObjects;
          }
        }.compute();
        if (queryResult != null) {
          for (final SNode item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                SNode auios = SNodeFactoryOperations.createNewNode("jetbrains.mps.ui.structure.AppendUIObjectStatement", null);
                SLinkOperations.setTarget(auios, "uiObject", (item), false);
                return auios;
              }

              public String getMatchingText(String pattern) {
                return SPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.ui.structure.AppendUIObjectStatement"), "conceptAlias") + " " + SPropertyOperations.getString((item), "name");
              }

              public String getVisibleMatchingText(String pattern) {
                return getMatchingText(pattern);
              }
            });
          }
        }
      }
    }
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.ui.structure.InsertUIObjectStatement");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        Iterable<SNode> queryResult = new Computable<Iterable<SNode>>() {
          public Iterable<SNode> compute() {
            return availableObjects;
          }
        }.compute();
        if (queryResult != null) {
          for (final SNode item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                SNode iuios = SNodeFactoryOperations.createNewNode("jetbrains.mps.ui.structure.InsertUIObjectStatement", null);
                SLinkOperations.setTarget(iuios, "uiObject", (item), false);
                return iuios;
              }

              public String getMatchingText(String pattern) {
                return SPropertyOperations.getString(SConceptOperations.findConceptDeclaration("jetbrains.mps.ui.structure.InsertUIObjectStatement"), "conceptAlias") + "... " + SPropertyOperations.getString((item), "name");
              }

              public String getVisibleMatchingText(String pattern) {
                return getMatchingText(pattern);
              }
            });
          }
        }
      }
    }
    return result;
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_Expression_5776545240965874272(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      Iterable<SNode> parameterObjects = new Computable<Iterable<SNode>>() {
        public Iterable<SNode> compute() {
          return Sequence.fromIterable(UIObject_Behavior.call_allExtends_8115675450774407592(SLinkOperations.getTarget(TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.ui.structure.UIObjectType"), true), "uiObject", false))).translate(new ITranslator2<SNode, SNode>() {
            public Iterable<SNode> translate(SNode o) {
              return SLinkOperations.getTargets(o, "compartment", true);
            }
          }).toListSequence();
        }
      }.compute();
      if (parameterObjects != null) {
        for (final SNode item : parameterObjects) {
          ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("jetbrains.mps.ui.structure.CompartmentReferenceExpression"), item, _context.getSourceNode()) {
            public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
              return SNodeOperations.replaceWithAnother(_context.getSourceNode(), _quotation_createNode_8jobl_a0a0a0a0a(_context.getSourceNode(), (item)));
            }

            public String getMatchingText(String pattern) {
              return "/" + SPropertyOperations.getString((item), "name");
            }

            public String getVisibleMatchingText(String pattern) {
              return getMatchingText(pattern);
            }
          });
        }
      }
    }
    return result;
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_Expression_5776545240965874273(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return (TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(_context.getSourceNode()), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.ui.structure.UIObjectType"), true) != null);
  }

  private static SNode _quotation_createNode_8jobl_a0a0a0a0a(Object parameter_1, Object parameter_2) {
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.ui.structure.CompartmentReferenceExpression", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_3, "container", (SNode) parameter_2);
    quotedNode_4 = (SNode) parameter_1;
    if (quotedNode_4 != null) {
      quotedNode_3.addChild("uiObject", HUtil.copyIfNecessary(quotedNode_4));
    }
    return quotedNode_3;
  }
}
