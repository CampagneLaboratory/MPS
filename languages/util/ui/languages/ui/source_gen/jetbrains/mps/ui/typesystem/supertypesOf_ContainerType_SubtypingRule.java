package jetbrains.mps.ui.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class supertypesOf_ContainerType_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  public supertypesOf_ContainerType_SubtypingRule() {
  }

  public List<SNode> getSubOrSuperTypes(SNode ct, TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    List<SNode> res = new ArrayList<SNode>();
    if ((SLinkOperations.getTarget(ct, "container", false) != null)) {
      if ((SLinkOperations.getTarget(SLinkOperations.getTarget(ct, "container", false), "specializes", false) != null)) {
        ListSequence.fromList(res).addElement(_quotation_createNode_d3sbvm_a0a0a0a1a0(SLinkOperations.getTarget(SLinkOperations.getTarget(ct, "container", false), "specializes", false), SNodeOperations.as(SNodeOperations.getParent(SLinkOperations.getTarget(SLinkOperations.getTarget(ct, "container", false), "specializes", false)), "jetbrains.mps.ui.modeling.structure.UIObject")));
      }
      ListSequence.fromList(res).addElement(_quotation_createNode_d3sbvm_a0a1a1a0(SLinkOperations.getTarget(ct, "uiObject", false)));
    }
    if ((SLinkOperations.getTarget(ct, "uiObject", false) != null)) {
      ListSequence.fromList(res).addElement(_quotation_createNode_d3sbvm_a0a0a2a0(SLinkOperations.getTarget(SLinkOperations.getTarget(ct, "uiObject", false), "extends", false)));
    }
    ListSequence.fromList(res).addElement(_quotation_createNode_d3sbvm_a0a3a0(SLinkOperations.getTarget(ct, "uiObject", false)));
    return res;
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.ui.structure.ContainerType";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getId(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean isWeak() {
    return false;
  }

  private static SNode _quotation_createNode_d3sbvm_a0a0a0a1a0(Object parameter_1, Object parameter_2) {
    SNode quotedNode_3 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.ui.structure.ContainerType", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.setReferenceTarget("container", (SNode) parameter_1);
    quotedNode_3.setReferenceTarget("uiObject", (SNode) parameter_2);
    return quotedNode_3;
  }

  private static SNode _quotation_createNode_d3sbvm_a0a1a1a0(Object parameter_1) {
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.ui.structure.ContainerType", null, null, GlobalScope.getInstance(), false);
    quotedNode_2.setReferenceTarget("uiObject", (SNode) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_d3sbvm_a0a0a2a0(Object parameter_1) {
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.ui.structure.ContainerType", null, null, GlobalScope.getInstance(), false);
    quotedNode_2.setReferenceTarget("uiObject", (SNode) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_d3sbvm_a0a3a0(Object parameter_1) {
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.ui.structure.UIObjectType", null, null, GlobalScope.getInstance(), false);
    quotedNode_2.setReferenceTarget("uiObject", (SNode) parameter_1);
    return quotedNode_2;
  }
}
