package jetbrains.mps.ui.generator.template.variants;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.DropRootRuleContext;
import jetbrains.mps.ui.multiplexing.VariantsUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.generator.template.IfMacroContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.baseLanguage.behavior.Classifier_Behavior;
import jetbrains.mps.generator.template.MapSrcMacroContext;
import java.util.List;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class QueriesGenerated {
  public static boolean dropRootRule_Condition_8590671622325733980(final IOperationContext operationContext, final DropRootRuleContext _context) {
    return VariantsUtil.hasGenerateVariants(SNodeOperations.as(_context.getNode(), "jetbrains.mps.baseLanguage.structure.HasAnnotation")) && VariantsUtil.withinVariant(_context.getNode()) == null;
  }

  public static boolean baseMappingRule_Condition_3210848622155026174(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.getModel(_context.getNode()) == SNodeOperations.getModel(SLinkOperations.getTarget(_context.getNode(), "classifier", false));
  }

  public static boolean baseMappingRule_Condition_3210848622155026230(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    String wv = VariantsUtil.withinVariant(_context.getNode());
    return wv != null && VariantsUtil.hasGenerateVariant(SLinkOperations.getTarget(_context.getNode(), "classifier", false), wv);
  }

  public static boolean baseMappingRule_Condition_7346866931625615673(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.getModel(_context.getNode()) == SNodeOperations.getModel(SLinkOperations.getTarget(_context.getNode(), "baseMethodDeclaration", false));
  }

  public static boolean baseMappingRule_Condition_7346866931625605029(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    String wv = VariantsUtil.withinVariant(_context.getNode());
    return wv != null && VariantsUtil.hasGenerateVariant(SNodeOperations.getAncestor(SLinkOperations.getTarget(_context.getNode(), "baseMethodDeclaration", false), "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false), wv);
  }

  public static boolean baseMappingRule_Condition_3210848622155838489(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return VariantsUtil.isGenerateVariantsAnn(_context.getNode());
  }

  public static boolean baseMappingRule_Condition_3210848622155981053(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return VariantsUtil.hasGenerateVariants(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_3210848622155026211(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(_context.getNode(), "classifier", false), "virtual_getFqName_1213877404258", new Object[]{}) + "_" + VariantsUtil.withinVariant(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_3210848622155981147(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String sfx = "_" + VariantsUtil.withinVariant(_context.getNode());
    String res = SPropertyOperations.getString(_context.getNode(), "name");
    if (res.endsWith(sfx)) {
      res = res.substring(0, res.length() - sfx.length());
    }
    return res + "_" + Sequence.fromIterable(VariantsUtil.generateVariants(_context.getNode())).first();
  }

  public static Object propertyMacro_GetPropertyValue_3210848622155981205(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return Sequence.fromIterable(VariantsUtil.generateVariants(_context.getNode())).first();
  }

  public static Object referenceMacro_GetReferent_3210848622155026189(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "classifier", false), "name") + "_" + VariantsUtil.withinVariant(_context.getCopiedOutputNodeForInputNode(_context.getNode()));
  }

  public static Object referenceMacro_GetReferent_7346866931625615692(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.getAncestor(SLinkOperations.getTarget(_context.getNode(), "baseMethodDeclaration", false), "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false), "name") + "_" + VariantsUtil.withinVariant(_context.getCopiedOutputNodeForInputNode(_context.getNode()));
  }

  public static boolean ifMacro_Condition_3210848622155981243(final IOperationContext operationContext, final IfMacroContext _context) {
    return Sequence.fromIterable(VariantsUtil.generateVariants(_context.getNode())).count() > 1;
  }

  public static SNode sourceNodeQuery_3210848622155981195(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "superclass", true);
  }

  public static Iterable sourceNodesQuery_7346866931625615743(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "actualArgument", true);
  }

  public static Iterable sourceNodesQuery_7346866931625615746(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "typeParameter", true);
  }

  public static Iterable sourceNodesQuery_3210848622155981127(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "implementedInterface", true);
  }

  public static Iterable sourceNodesQuery_3210848622155981218(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return Sequence.fromIterable(VariantsUtil.generateVariants(_context.getNode())).skip(1).select(new ISelector<String, SNode>() {
      public SNode select(String it) {
        return _quotation_createNode_x583g4_a0a0a0a0r(it);
      }
    });
  }

  public static Iterable sourceNodesQuery_3210848622155981255(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "annotation", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode ann) {
        return !(VariantsUtil.isGenerateVariantsAnn(ann) || VariantsUtil.isVariantAnn(ann));
      }
    });
  }

  public static Iterable sourceNodesQuery_3210848622155981296(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "typeVariableDeclaration", true);
  }

  public static Iterable sourceNodesQuery_7702003619980677648(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return Classifier_Behavior.call_members_1465982738252129704(_context.getNode());
  }

  public static SNode mapSrcMacro_mapper_3210848622155981238(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    return _context.getNode();
  }

  public static SNode mapSrcMacro_mapper_8586335042091303254(final IOperationContext operationContext, final MapSrcMacroContext _context) {
    SNode copy = SNodeOperations.copyNode(_context.getNode());
    ListSequence.fromList(SLinkOperations.getTargets(copy, "annotation", true)).removeWhere(new IWhereFilter<SNode>() {
      public boolean accept(SNode ann) {
        return VariantsUtil.isGenerateVariantsAnn(ann) || VariantsUtil.isVariantAnn(ann);
      }
    });
    ListSequence.fromList(SLinkOperations.getTargets(copy, "annotation", true)).addElement(_quotation_createNode_x583g4_a0a2a22(Sequence.fromIterable(VariantsUtil.generateVariants(_context.getNode())).first()));
    if (Sequence.fromIterable(VariantsUtil.generateVariants(_context.getNode())).count() > 1) {
      List<SNode> vals = Sequence.fromIterable(VariantsUtil.generateVariants(_context.getNode())).skip(1).select(new ISelector<String, SNode>() {
        public SNode select(String it) {
          return _quotation_createNode_x583g4_a0a0a0a0a0d0w(it);
        }
      }).toListSequence();
      ListSequence.fromList(SLinkOperations.getTargets(copy, "annotation", true)).addElement(_quotation_createNode_x583g4_a0a1a3a22(vals));
    }
    String sfx = "_" + VariantsUtil.withinVariant(_context.getNode());
    String name = SPropertyOperations.getString(_context.getNode(), "name");
    if (name.endsWith(sfx)) {
      name = name.substring(0, name.length() - sfx.length());
    }
    SPropertyOperations.set(copy, "name", name + "_" + Sequence.fromIterable(VariantsUtil.generateVariants(_context.getNode())).first());
    return copy;
  }

  private static SNode _quotation_createNode_x583g4_a0a0a0a0r(Object parameter_1) {
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_2, "value", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_x583g4_a0a2a22(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnnotationInstance", null, null, GlobalScope.getInstance(), false);
    quotedNode_2.setReference("annotation", jetbrains.mps.smodel.SReference.create("annotation", quotedNode_2, SModelReference.fromString("r:36693452-2637-4608-8caa-ab32ee7c1be3(jetbrains.mps.ui.multiplexing)"), SNodeId.fromString("8590671622324574702")));
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.setReference("key", jetbrains.mps.smodel.SReference.create("key", quotedNode_3, SModelReference.fromString("r:36693452-2637-4608-8caa-ab32ee7c1be3(jetbrains.mps.ui.multiplexing)"), SNodeId.fromString("8590671622324574704")));
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_4, "value", (String) parameter_1);
    quotedNode_3.addChild("value", quotedNode_4);
    quotedNode_2.addChild("value", quotedNode_3);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_x583g4_a0a0a0a0a0d0w(Object parameter_1) {
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_2, "value", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_x583g4_a0a1a3a22(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnnotationInstance", null, null, GlobalScope.getInstance(), false);
    quotedNode_2.setReference("annotation", jetbrains.mps.smodel.SReference.create("annotation", quotedNode_2, SModelReference.fromString("r:36693452-2637-4608-8caa-ab32ee7c1be3(jetbrains.mps.ui.multiplexing)"), SNodeId.fromString("8590671622324268192")));
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.setReference("key", jetbrains.mps.smodel.SReference.create("key", quotedNode_3, SModelReference.fromString("r:36693452-2637-4608-8caa-ab32ee7c1be3(jetbrains.mps.ui.multiplexing)"), SNodeId.fromString("8590671622324287920")));
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ArrayLiteral", null, null, GlobalScope.getInstance(), false);
    {
      List<SNode> nodes = (List<SNode>) parameter_1;
      for (SNode child : nodes) {
        quotedNode_4.addChild("item", HUtil.copyIfNecessary(child));
      }
    }
    quotedNode_3.addChild("value", quotedNode_4);
    quotedNode_2.addChild("value", quotedNode_3);
    return quotedNode_2;
  }
}
