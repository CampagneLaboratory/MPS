package jetbrains.mps.ui.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.ConstraintsDataHolder;
import java.util.Map;
import jetbrains.mps.smodel.constraints.INodePropertyGetter;
import java.util.HashMap;
import jetbrains.mps.smodel.constraints.BaseNodePropertyGetter;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.ui.behavior.BeanPropertyView_Behavior;
import java.beans.Introspector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.pattern.util.MatchingUtil;
import jetbrains.mps.smodel.constraints.INodeReferentSearchScopeProvider;
import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.PresentationReferentConstraintContext;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.SNodePointer;

public class BeanPropertyView_Constraints extends ConstraintsDataHolder {
  public BeanPropertyView_Constraints() {
  }

  public String getConceptFqName() {
    return "jetbrains.mps.ui.structure.BeanPropertyView";
  }

  public Map<String, INodePropertyGetter> getNodePropertyGetters() {
    HashMap<String, INodePropertyGetter> result = new HashMap<String, INodePropertyGetter>();
    result.put("propertyName", new BaseNodePropertyGetter() {
      public Object execPropertyGet(SNode node, String propertyName, IScope scope) {
        String gn = BeanPropertyView_Behavior.call_getterName_8381258131358759705(node);
        if (gn == null) {
          return null;
        }
        if (gn.startsWith("is")) {
          return Introspector.decapitalize(gn.substring(2));
        }
        if (gn.startsWith("get")) {
          return Introspector.decapitalize(gn.substring(3));
        }
        return null;
      }
    });
    result.put("canRead", new BaseNodePropertyGetter() {
      public Object execPropertyGet(SNode node, String propertyName, IScope scope) {
        return (SLinkOperations.getTarget(node, "getter", false) != null);
      }
    });
    result.put("canWrite", new BaseNodePropertyGetter() {
      public Object execPropertyGet(SNode node, String propertyName, IScope scope) {
        String gn = BeanPropertyView_Behavior.call_setterName_8381258131358762400(node);
        for (SNode imd : SLinkOperations.getTargets(SNodeOperations.as(SNodeOperations.getParent(SLinkOperations.getTarget(node, "getter", false)), "jetbrains.mps.baseLanguage.structure.Classifier"), "method", true)) {
          if (SPropertyOperations.getString(imd, "name").equals(gn) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(imd, "visibility", true), "jetbrains.mps.baseLanguage.structure.PublicVisibility") && ListSequence.fromList(SLinkOperations.getTargets(imd, "parameter", true)).count() == 1) {
            return MatchingUtil.matchNodes(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(imd, "parameter", true)).first(), "type", true), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "getter", false), "returnType", true));
          }
        }
        return false;
      }
    });
    return result;
  }

  public Map<String, INodeReferentSearchScopeProvider> getNodeNonDefaultSearchScopeProviders() {
    HashMap<String, INodeReferentSearchScopeProvider> result = new HashMap<String, INodeReferentSearchScopeProvider>();
    result.put("getter", new BaseNodeReferenceSearchScopeProvider() {
      public boolean hasPresentation() {
        return true;
      }

      public String getPresentation(final IOperationContext operationContext, final PresentationReferentConstraintContext _context) {
        String gn = SPropertyOperations.getString(_context.getParameterNode(), "name");
        if (gn == null) {
          return null;
        }
        if (gn.startsWith("is")) {
          return Introspector.decapitalize(gn.substring(2));
        }
        if (gn.startsWith("get")) {
          return Introspector.decapitalize(gn.substring(3));
        }
        return null;
      }

      public void registerSelf(ModelConstraintsManager manager) {
      }

      public void unRegisterSelf(ModelConstraintsManager manager) {
      }

      public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
        SNode bt = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.as(_context.getReferenceNode(), "jetbrains.mps.ui.structure.BeanPropertyView"), "bean", true));
        try {
          throw new NullPointerException();
        } catch (NullPointerException e) {
        }
        return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.as(bt, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", false), "method", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode m) {
            if (ListSequence.fromList(SLinkOperations.getTargets(m, "parameter", true)).isNotEmpty()) {
              return false;
            }
            if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(m, "visibility", true), "jetbrains.mps.baseLanguage.structure.PublicVisibility"))) {
              return false;
            }
            String gn = SPropertyOperations.getString(m, "name");
            if (gn != null) {
              if (gn.startsWith("is")) {
                return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(m, "returnType", true), "jetbrains.mps.baseLanguage.structure.BooleanType");
              } else if (gn.startsWith("get")) {
                return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(m, "returnType", true), "jetbrains.mps.baseLanguage.structure.VoidType"));
              }
            }
            return false;
          }
        });
      }

      public SNodePointer getSearchScopeValidatorNodePointer() {
        return new SNodePointer("r:383ba4d2-f4ec-41a6-8e7f-108e84a7c9f9(jetbrains.mps.ui.constraints)", "8381258131358762999");
      }
    });
    return result;
  }
}
