package jetbrains.mps.ui.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ui.behavior.UIObjectStatement_Behavior;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class replace_UIObjectStatement_AppendUIObjectStatement_Intention extends BaseIntention {
  public replace_UIObjectStatement_AppendUIObjectStatement_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.ui.structure.UIObjectStatement";
  }

  public String getPresentation() {
    return "replace_UIObjectStatement_AppendUIObjectStatement";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.ui.intentions.replace_UIObjectStatement_AppendUIObjectStatement_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.ERROR;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:141e0415-489b-4450-b6ec-2c948289a4a3(jetbrains.mps.ui.intentions@2_0)", "1576918603588812821");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Replace with append statement";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(node), "jetbrains.mps.ui.structure.UIObjectStatement") && !(UIObjectStatement_Behavior.call_shouldReturnValue_7109250785404509292(node));
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNodeFactoryOperations.replaceWithNewChild(node, "jetbrains.mps.ui.structure.AppendUIObjectStatement");
  }
}
