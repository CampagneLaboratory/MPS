package jetbrains.mps.ui.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.model.SNodeReference;
import java.util.Collections;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class View_wrap_with_ValidatingView_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public View_wrap_with_ValidatingView_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.ui.structure.View";
  }

  public String getPresentation() {
    return "View_wrap_with_ValidatingView";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.ui.intentions.View_wrap_with_ValidatingView_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return !(SNodeOperations.isInstanceOf(node, "jetbrains.mps.ui.structure.ValidatingView"));
  }

  public SNodeReference getIntentionNodeReference() {
    return new jetbrains.mps.smodel.SNodePointer("r:8cdffe0e-82a6-47c0-9a63-88679c2baa24(jetbrains.mps.ui.intentions)", "8381258131358771407");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new View_wrap_with_ValidatingView_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Replace with validating view";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode vv = SNodeFactoryOperations.createNewNode("jetbrains.mps.ui.structure.ValidatingView", null);
      SLinkOperations.setTarget(vv, "view", SNodeOperations.detachNode(node), true);
      SNode vdr = SLinkOperations.setTarget(vv, "validator", SNodeFactoryOperations.createNewNode("jetbrains.mps.ui.structure.Validator", null), true);
      SNode vb = SLinkOperations.setTarget(vdr, "validateBlock", SNodeFactoryOperations.createNewNode("jetbrains.mps.ui.structure.ValidateBlock", null), true);
      SLinkOperations.addChild(vb, "parameter", SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null));

    }

    public IntentionDescriptor getDescriptor() {
      return View_wrap_with_ValidatingView_Intention.this;
    }
  }
}
