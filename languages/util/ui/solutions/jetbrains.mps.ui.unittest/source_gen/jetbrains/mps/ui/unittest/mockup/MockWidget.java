package jetbrains.mps.ui.unittest.mockup;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.IMapping;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public class MockWidget {
  private Map<String, String> props = MapSequence.<String,String>fromMap(new HashMap<String, String>());
  private Map<String, MockWidget.PropHandlers> propHandlers = MapSequence.<String,MockWidget.PropHandlers>fromMap(new HashMap<String, MockWidget.PropHandlers>());
  private Map<String, MockWidget.EventHandlers> eventHandlers = MapSequence.<String,MockWidget.EventHandlers>fromMap(new HashMap<String, MockWidget.EventHandlers>());

  public MockWidget() {
  }

  public MockWidget(MockPanel parent) {
    parent.addChild(this);
  }

  public StringBuilder appendXML(StringBuilder sb) {
    sb.append("<widget");
    this.appendXMLAttrs(sb);
    return sb.append("/>");
  }

  public void setProp(String key, String val) {
    MapSequence.<String,String>fromMap(this.props).put(key, val);
    MockWidget.PropHandlers hdlrs = MapSequence.<String,MockWidget.PropHandlers>fromMap(this.propHandlers).get(key);
    if (hdlrs != null) {
      hdlrs.fire();
    }
  }

  public String getProp(String key) {
    return MapSequence.<String,String>fromMap(this.props).get(key);
  }

  public void triggerEvent(String eventKey, MockEvent event) {
    MockWidget.EventHandlers hdlrs = MapSequence.<String,MockWidget.EventHandlers>fromMap(this.eventHandlers).get(eventKey);
    if (hdlrs != null) {
      hdlrs.fire(event);
    }
  }

  public void addPropHanler(String key, MockPropChngHandler hdlr) {
    MockWidget.PropHandlers hdlrs = (MapSequence.fromMap(this.propHandlers).containsKey(key) ?
      MapSequence.<String,MockWidget.PropHandlers>fromMap(this.propHandlers).get(key) :
      new MockWidget.PropHandlers(key)
    );
    MapSequence.<String,MockWidget.PropHandlers>fromMap(this.propHandlers).put(key, hdlrs);
    hdlrs.add(hdlr);
  }

  public void removePropHandler(String key, MockPropChngHandler hdlr) {
    MockWidget.PropHandlers hdlrs = MapSequence.<String,MockWidget.PropHandlers>fromMap(this.propHandlers).get(key);
    if (hdlrs != null) {
      hdlrs.remove(hdlr);
    }
  }

  public void addEventHandler(String event, MockEventHandler hdlr) {
    MockWidget.EventHandlers hdlrs = (MapSequence.fromMap(this.eventHandlers).containsKey(event) ?
      MapSequence.<String,MockWidget.EventHandlers>fromMap(this.eventHandlers).get(event) :
      new MockWidget.EventHandlers(event)
    );
    MapSequence.<String,MockWidget.EventHandlers>fromMap(this.eventHandlers).put(event, hdlrs);
    hdlrs.add(hdlr);
  }

  public void removeEventHandler(String event, MockEventHandler hdlr) {
    MockWidget.EventHandlers hdlrs = MapSequence.<String,MockWidget.EventHandlers>fromMap(this.eventHandlers).get(event);
    if (hdlrs != null) {
      hdlrs.remove(hdlr);
    }
  }

  @Override
  public String toString() {
    return this.appendXML(new StringBuilder()).toString();
  }

  protected void appendXMLAttrs(StringBuilder sb) {
    for (IMapping<String, String> m : MapSequence.<String,String>fromMap(this.props)) {
      sb.append(" " + m.key() + "=\"" + m.value() + "\"");
    }
  }

  public class PropHandlers {
    private List<MockPropChngHandler> hdlrs = ListSequence.<MockPropChngHandler>fromList(new ArrayList<MockPropChngHandler>());
    private String propKey;

    public PropHandlers(String key) {
      this.propKey = key;
    }

    public void add(MockPropChngHandler h) {
      ListSequence.<MockPropChngHandler>fromList(this.hdlrs).addElement(h);
    }

    public void remove(MockPropChngHandler h) {
      ListSequence.<MockPropChngHandler>fromList(this.hdlrs).removeElement(h);
    }

    public void fire() {
      for (MockPropChngHandler h : ListSequence.<MockPropChngHandler>fromList(this.hdlrs)) {
        h.handle(MockWidget.this, this.propKey);
      }
    }
  }

  public class EventHandlers {
    private List<MockEventHandler> hdlrs = ListSequence.<MockEventHandler>fromList(new ArrayList<MockEventHandler>());
    private String eventKey;

    public EventHandlers(String key) {
      this.eventKey = key;
    }

    public void add(MockEventHandler h) {
      ListSequence.<MockEventHandler>fromList(this.hdlrs).addElement(h);
    }

    public void remove(MockEventHandler h) {
      ListSequence.<MockEventHandler>fromList(this.hdlrs).removeElement(h);
    }

    public void fire(MockEvent event) {
      for (MockEventHandler h : ListSequence.<MockEventHandler>fromList(this.hdlrs)) {
        h.handle(MockWidget.this, event);
      }
    }
  }
}
