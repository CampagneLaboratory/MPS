package jetbrains.mps.ypath.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.ypath.design.IFeatureDesign;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.classloading.ClassLoaderManager;
import jetbrains.mps.reloading.ReloadAdapter;

public class DesignPartLoader {
  private static final Logger LOG = Logger.getLogger(DesignPartLoader.class);
  private static DesignPartLoader INSTANCE = new DesignPartLoader();
  private boolean alreadyRegistered = false;
  private DesignPartLoader.ReloadHandler reloadHandler = new DesignPartLoader.ReloadHandler();
  private Map<String, Class<?>> classes = new HashMap<String, Class<?>>();

  public DesignPartLoader() {
  }

  public IFeatureDesign getFeatureDesign(String fqClassName, SModel smodel) {
    SModule module = getModuleFor(smodel);
    if (module != null) {
      return getFeatureDesign(fqClassName, module);
    }
    return null;
  }

  @SuppressWarnings("unchecked")
  private IFeatureDesign getFeatureDesign(String fqClassName, SModule module) {
    try {
      Class<?> klass = classes.get(fqClassName);
      if (klass == null) {
        klass = ClassLoaderManager.getInstance().getClass(module, fqClassName);
        classes.put(fqClassName, klass);
      }
      if (klass == null) {
        DesignPartLoader.LOG.error("Unable to load the class \"" + fqClassName + "\" using module <" + module + ">");
        return null;
      }
      return (IFeatureDesign) klass.newInstance();
    } catch (Throwable t) {
      DesignPartLoader.LOG.error(t);
    }
    return null;
  }

  /*package*/ void registerInClassLoadManager() {
    if (!(alreadyRegistered)) {
      ClassLoaderManager.getInstance().addReloadHandler(reloadHandler);
      this.alreadyRegistered = true;
    }
  }

  /*package*/ void unregisterFromClassLoadManager() {
    if (alreadyRegistered) {
      ClassLoaderManager.getInstance().removeReloadHandler(reloadHandler);
      this.alreadyRegistered = false;
    }
  }

  private SModule getModuleFor(SModel smodel) {
    SModel smd = smodel.getModelDescriptor();
    return (smd != null ?
      smd.getModule() :
      null
    );
  }

  private void clearCache() {
    classes.clear();
  }

  public static DesignPartLoader getInstance() {
    return DesignPartLoader.INSTANCE;
  }

  private class ReloadHandler extends ReloadAdapter {
    private ReloadHandler() {
    }

    @Override
    public void unload() {
      clearCache();
    }
  }
}
