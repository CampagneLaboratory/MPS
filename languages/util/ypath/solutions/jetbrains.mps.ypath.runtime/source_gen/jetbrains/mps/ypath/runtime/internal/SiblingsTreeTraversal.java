package jetbrains.mps.ypath.runtime.internal;

/*Generated by MPS */

import jetbrains.mps.ypath.runtime.ITreeTraversal;
import jetbrains.mps.ypath.runtime.ISiblingsFilter;
import jetbrains.mps.ypath.runtime.IFeatureDescriptor;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class SiblingsTreeTraversal<T> extends AbstractChainTreeTraversal<T> implements ITreeTraversal<T> {
  private final ISiblingsFilter<T> siblingsFilter;

  public SiblingsTreeTraversal(ITreeTraversal<T> source, ISiblingsFilter<T> siblingsFilter, IFeatureDescriptor<T> feature) {
    super(source, feature);
    this.siblingsFilter = siblingsFilter;
  }

  private ISiblingsFilter<T> getSiblingFilter() {
    return siblingsFilter;
  }

  @Override
  public Iterator<T> iterator() {
    return new SiblingsTreeTraversal.SiblingsIterator(getSourceTraversal().iterator());
  }

  private class SiblingsIterator implements Iterator<T> {
    private final Iterator<T> sourceIterator;
    private Iterator<T> currentSiblingsIterator = null;
    private T currentSource;
    private boolean hasCurrentSource = false;
    private Iterator<T> currentParentsIterator = null;
    private T nextNode = null;
    private boolean hasNextNode = false;

    private SiblingsIterator(Iterator<T> source) {
      sourceIterator = source;
      moveToNext();
    }

    private void moveToNext() {
      nextNode = null;
      hasNextNode = false;
      do {
        while (!(hasCurrentSource) && sourceIterator.hasNext()) {
          currentSource = sourceIterator.next();
          if (!(getSiblingFilter().accept(currentSource))) {
            continue;
          }
          hasCurrentSource = true;
          currentParentsIterator = null;
          currentSiblingsIterator = null;
          break;
        }
        if (currentParentsIterator == null) {
          currentParentsIterator = getOppositeContents(currentSource).iterator();
        }
        if (currentSiblingsIterator == null || !(currentSiblingsIterator.hasNext())) {
          if (currentParentsIterator.hasNext()) {
            currentSiblingsIterator = getDirectContents(currentParentsIterator.next()).iterator();
          } else {
            currentSiblingsIterator = null;
          }
        }
        while (currentSiblingsIterator != null && currentSiblingsIterator.hasNext()) {
          T sibling = currentSiblingsIterator.next();
          if (!(getSiblingFilter().accept(sibling, currentSource))) {
            continue;
          }
          nextNode = sibling;
          hasNextNode = true;
          return;
        }
        hasCurrentSource = false;
      } while (sourceIterator.hasNext());
    }

    @Override
    public boolean hasNext() {
      return hasNextNode;
    }

    @Override
    public T next() {
      if (!(hasNextNode)) {
        throw new NoSuchElementException();
      }
      T tmp = nextNode;
      moveToNext();
      return tmp;
    }

    @Override
    public void remove() {
      throw new UnsupportedOperationException();
    }
  }
}
