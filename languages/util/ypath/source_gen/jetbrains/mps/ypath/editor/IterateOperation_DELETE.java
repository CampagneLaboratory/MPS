package jetbrains.mps.ypath.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class IterateOperation_DELETE {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new IterateOperation_DELETE.IterateOperation_DELETE_DELETE(node));
  }

  public static class IterateOperation_DELETE_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;

    public IterateOperation_DELETE_DELETE(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode expr = SNodeOperations.getParent(node);
      if (SNodeOperations.isInstanceOf(expr, "jetbrains.mps.ypath.structure.TreePathOperationExpression")) {
        SNode newExpr = SLinkOperations.getTarget(SNodeOperations.cast(expr, "jetbrains.mps.ypath.structure.TreePathOperationExpression"), "operand", true);
        SNodeOperations.replaceWithAnother(expr, newExpr);
        if (SNodeOperations.isInstanceOf(newExpr, "jetbrains.mps.ypath.structure.TreePathAdapterExpression") && (SNodeOperations.getAncestor(newExpr, "jetbrains.mps.ypath.structure.TreePathOperationExpression", false, false) == null)) {
          SNodeOperations.replaceWithAnother(newExpr, SLinkOperations.getTarget(SNodeOperations.cast(newExpr, "jetbrains.mps.ypath.structure.TreePathAdapterExpression"), "expression", true));
        }
      }
    }
  }
}
