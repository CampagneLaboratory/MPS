package jetbrains.mps.ypath.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class replace_whereBlock_with_closure_Intention extends BaseIntention {
  public replace_whereBlock_with_closure_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.ypath.structure.WhereOperation";
  }

  public String getPresentation() {
    return "replace_whereBlock_with_closure";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.ypath.intentions.replace_whereBlock_with_closure_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:69bf3816-9ce1-447e-8b18-160153a26e7b(jetbrains.mps.ypath.intentions@3_0)", "4234084459084260639");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Replace Deprecated Construct";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (SLinkOperations.getTarget(node, "whereBlock", true) != null);
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode cl = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", null);
    SNode parameterType = SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "whereBlock", true), "parameter", true)), "jetbrains.mps.baseLanguage.structure.Type");
    SNode scpd = SNodeFactoryOperations.addNewChild(cl, "parameter", "jetbrains.mps.baseLanguage.structure.ParameterDeclaration");
    SLinkOperations.setTarget(scpd, "type", parameterType, true);
    SNode cp = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "whereBlock", true), "parameter", true);
    SPropertyOperations.set(scpd, "name", SPropertyOperations.getString(cp, "name"));
    SLinkOperations.setTarget(cl, "body", SNodeOperations.detachNode(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "whereBlock", true), "body", true)), true);
    for (SNode dsc : ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(cl, "body", true), "jetbrains.mps.baseLanguage.structure.ClosureParameterReference", false, new String[]{}))) {
      if (SLinkOperations.getTarget(SNodeOperations.cast(dsc, "jetbrains.mps.baseLanguage.structure.ClosureParameterReference"), "closureParameter", false) == cp) {
        SNode pr = SNodeFactoryOperations.replaceWithNewChild(dsc, "jetbrains.mps.baseLanguage.structure.VariableReference");
        SLinkOperations.setTarget(pr, "variableDeclaration", scpd, false);
      }
    }
    SLinkOperations.setTarget(node, "filter", cl, true);
    SLinkOperations.setTarget(node, "whereBlock", null, true);
  }
}
