package jetbrains.mps.ypath.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.model.SNodeReference;
import java.util.Collections;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.intentions.IntentionDescriptor;

public class replace_whereBlock_with_closure_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public replace_whereBlock_with_closure_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.ypath.structure.WhereOperation";
  }

  public String getPresentation() {
    return "replace_whereBlock_with_closure";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.ypath.intentions.replace_whereBlock_with_closure_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (SLinkOperations.getTarget(node, "whereBlock", true) != null);
  }

  public SNodeReference getIntentionNodeReference() {
    return new jetbrains.mps.smodel.SNodePointer("r:00000000-0000-4000-0000-011c895905ab(jetbrains.mps.ypath.intentions)", "4234084459084260639");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new replace_whereBlock_with_closure_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Replace Deprecated Construct";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode cl = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral", null);
      SNode parameterType = SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "whereBlock", true), "parameter", true)), "jetbrains.mps.baseLanguage.structure.Type");
      SNode scpd = SNodeFactoryOperations.addNewChild(cl, "parameter", "jetbrains.mps.baseLanguage.structure.ParameterDeclaration");
      SLinkOperations.setTarget(scpd, "type", parameterType, true);
      SNode cp = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "whereBlock", true), "parameter", true);
      SPropertyOperations.set(scpd, "name", SPropertyOperations.getString(cp, "name"));
      SLinkOperations.setTarget(cl, "body", SNodeOperations.detachNode(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "whereBlock", true), "body", true)), true);
      for (SNode dsc : ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(cl, "body", true), "jetbrains.mps.baseLanguage.structure.ClosureParameterReference", false, new String[]{}))) {
        if (SLinkOperations.getTarget(SNodeOperations.cast(dsc, "jetbrains.mps.baseLanguage.structure.ClosureParameterReference"), "closureParameter", false) == cp) {
          SNode pr = SNodeFactoryOperations.replaceWithNewChild(dsc, "jetbrains.mps.baseLanguage.structure.VariableReference");
          SLinkOperations.setTarget(pr, "variableDeclaration", scpd, false);
        }
      }
      SLinkOperations.setTarget(node, "filter", cl, true);
      SLinkOperations.setTarget(node, "whereBlock", null, true);
    }

    public IntentionDescriptor getDescriptor() {
      return replace_whereBlock_with_closure_Intention.this;
    }
  }
}
