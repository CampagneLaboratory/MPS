package jetbrains.mps.bash.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.StructureDescriptor;
import java.util.Arrays;
import com.google.common.collect.ImmutableList;
import java.util.Set;
import java.util.List;
import java.util.HashSet;
import jetbrains.mps.smodel.structure.ConceptRegistry;
import java.util.Collections;

public class StructureAspectDescriptor extends DescriptorProvider<StructureDescriptor> {
  private static String[] stringSwitchCases_1htk8d_a0a0a = new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.AbstractFollowingCommandList", "jetbrains.mps.bash.structure.AbstractLoopCommand", "jetbrains.mps.bash.structure.AddExpression", "jetbrains.mps.bash.structure.AndAssingmentExpression", "jetbrains.mps.bash.structure.AndCombiningComditionalExpression", "jetbrains.mps.bash.structure.AndOperator", "jetbrains.mps.bash.structure.AppendingOutputErrorRedirection", "jetbrains.mps.bash.structure.AppendingOutputRedirection", "jetbrains.mps.bash.structure.Argument", "jetbrains.mps.bash.structure.ArgumentList", "jetbrains.mps.bash.structure.ArgumentListReference", "jetbrains.mps.bash.structure.ArgumentReference", "jetbrains.mps.bash.structure.ArithmeticCommand", "jetbrains.mps.bash.structure.ArithmeticExpansion", "jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.AssingmentExpression", "jetbrains.mps.bash.structure.AsyncOperator", "jetbrains.mps.bash.structure.AsyncTerminator", "jetbrains.mps.bash.structure.BaseAssingmentExpression", "jetbrains.mps.bash.structure.BaseCommandSubstitution", "jetbrains.mps.bash.structure.BaseVariableAssingment", "jetbrains.mps.bash.structure.BasedIntegerLiteral", "jetbrains.mps.bash.structure.BasicParameterExpansion", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.BinaryConditionalExpression", "jetbrains.mps.bash.structure.BitwiseAndExpression", "jetbrains.mps.bash.structure.BitwiseNegationExpression", "jetbrains.mps.bash.structure.BitwiseOrExpression", "jetbrains.mps.bash.structure.BitwiseXorExpression", "jetbrains.mps.bash.structure.BlockFileConditionalExpression", "jetbrains.mps.bash.structure.BraceGrouping", "jetbrains.mps.bash.structure.BracketConditionalExpression", "jetbrains.mps.bash.structure.BracketExpression", "jetbrains.mps.bash.structure.BracketGrouping", "jetbrains.mps.bash.structure.BuckCommandSubstitution", "jetbrains.mps.bash.structure.CaseClause", "jetbrains.mps.bash.structure.CaseCommand", "jetbrains.mps.bash.structure.CaseTerminator", "jetbrains.mps.bash.structure.CharFileConditionalExpression", "jetbrains.mps.bash.structure.CombiningConditionalExpression", "jetbrains.mps.bash.structure.CommaExpression", "jetbrains.mps.bash.structure.Command", "jetbrains.mps.bash.structure.CommandList", "jetbrains.mps.bash.structure.CommandTerminator", "jetbrains.mps.bash.structure.CommentedCommandList", "jetbrains.mps.bash.structure.CommentedFollowingCommandList", "jetbrains.mps.bash.structure.CommentedText", "jetbrains.mps.bash.structure.ConditionalCommand", "jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.ConditionalOperation", "jetbrains.mps.bash.structure.DecimalConstant", "jetbrains.mps.bash.structure.DirectoryConditionalExpression", "jetbrains.mps.bash.structure.DivAssingmentExpression", "jetbrains.mps.bash.structure.DivExpression", "jetbrains.mps.bash.structure.DoubleQuote", "jetbrains.mps.bash.structure.DoubleSemicolon", "jetbrains.mps.bash.structure.DoubleSemicolonEt", "jetbrains.mps.bash.structure.DuplicateInputFileDiscriptor", "jetbrains.mps.bash.structure.DuplicateOutputFileDiscriptor", "jetbrains.mps.bash.structure.EffectiveGroupIdConditionalExpression", "jetbrains.mps.bash.structure.EffectiveUserIdConditionalExpression", "jetbrains.mps.bash.structure.ElifCommand", "jetbrains.mps.bash.structure.EqualityExpression", "jetbrains.mps.bash.structure.EqualityNumber", "jetbrains.mps.bash.structure.EqualityStrings", "jetbrains.mps.bash.structure.EqualityStrings2", "jetbrains.mps.bash.structure.ExecTestConditionalExpression", "jetbrains.mps.bash.structure.ExistConditionalExpression", "jetbrains.mps.bash.structure.ExpExpression", "jetbrains.mps.bash.structure.ExternalCommandCall", "jetbrains.mps.bash.structure.ExternalCommandDeclaration", "jetbrains.mps.bash.structure.ExternalOptionDeclaration", "jetbrains.mps.bash.structure.ExternalOptionReference", "jetbrains.mps.bash.structure.FollowingCommandList", "jetbrains.mps.bash.structure.FollowingPipeline", "jetbrains.mps.bash.structure.ForCommand", "jetbrains.mps.bash.structure.ForeachCommand", "jetbrains.mps.bash.structure.FreeCommand", "jetbrains.mps.bash.structure.FunctionCallCommand", "jetbrains.mps.bash.structure.FunctionDeclaration", "jetbrains.mps.bash.structure.GeneralizedWord", "jetbrains.mps.bash.structure.GreaterThanExpression", "jetbrains.mps.bash.structure.GreaterThanNumber", "jetbrains.mps.bash.structure.GreaterThanOrEqual", "jetbrains.mps.bash.structure.GreaterThanOrEqualExpression", "jetbrains.mps.bash.structure.GreaterThanString", "jetbrains.mps.bash.structure.GroupIdConditionalExpression", "jetbrains.mps.bash.structure.GroupingCommand", "jetbrains.mps.bash.structure.HeadCommandList", "jetbrains.mps.bash.structure.HeadPipeline", "jetbrains.mps.bash.structure.HereDocumentRedirection", "jetbrains.mps.bash.structure.HereStringRedirection", "jetbrains.mps.bash.structure.HexIntegerLiteral", "jetbrains.mps.bash.structure.IArithmeticHolder", "jetbrains.mps.bash.structure.ICommandParameter", "jetbrains.mps.bash.structure.IComment", "jetbrains.mps.bash.structure.ICompoundCommand", "jetbrains.mps.bash.structure.IConcreteWordUnit", "jetbrains.mps.bash.structure.IDescribedConcept", "jetbrains.mps.bash.structure.IGeneralizedWordUnit", "jetbrains.mps.bash.structure.IORedirection", "jetbrains.mps.bash.structure.IPriorityExpression", "jetbrains.mps.bash.structure.ISymbolConcept", "jetbrains.mps.bash.structure.IToWordRedirection", "jetbrains.mps.bash.structure.IfCommand", "jetbrains.mps.bash.structure.InequalityExpression", "jetbrains.mps.bash.structure.InequalityNumber", "jetbrains.mps.bash.structure.InequalityStrings", "jetbrains.mps.bash.structure.InputLine", "jetbrains.mps.bash.structure.InputLines", "jetbrains.mps.bash.structure.InputRedirection", "jetbrains.mps.bash.structure.IntegerLiteral", "jetbrains.mps.bash.structure.LValue", "jetbrains.mps.bash.structure.LastReadConditionalExpression", "jetbrains.mps.bash.structure.LeftBitwiseShiftExpression", "jetbrains.mps.bash.structure.LeftShiftAssingmentExpression", "jetbrains.mps.bash.structure.LessThanExpression", "jetbrains.mps.bash.structure.LessThanNumber", "jetbrains.mps.bash.structure.LessThanOrEqualExpression", "jetbrains.mps.bash.structure.LessThanOrEqualNumber", "jetbrains.mps.bash.structure.LessThanString", "jetbrains.mps.bash.structure.LogicalAndExpression", "jetbrains.mps.bash.structure.LogicalNegationExpression", "jetbrains.mps.bash.structure.LogicalOrExpression", "jetbrains.mps.bash.structure.MinusAssingmentExpression", "jetbrains.mps.bash.structure.ModAssingmentExpression", "jetbrains.mps.bash.structure.ModExpression", "jetbrains.mps.bash.structure.MulExpression", "jetbrains.mps.bash.structure.MusAssingmentExpression", "jetbrains.mps.bash.structure.NewerThan", "jetbrains.mps.bash.structure.NonZeroStringConditionalExpression", "jetbrains.mps.bash.structure.NotCommand", "jetbrains.mps.bash.structure.OlderThan", "jetbrains.mps.bash.structure.Option", "jetbrains.mps.bash.structure.OptionReference", "jetbrains.mps.bash.structure.OptionSet", "jetbrains.mps.bash.structure.OptionSetReference", "jetbrains.mps.bash.structure.OptionWithParam", "jetbrains.mps.bash.structure.OptionWithParamReference", "jetbrains.mps.bash.structure.OptnameStringConditionalExpression", "jetbrains.mps.bash.structure.OrAssingmentExpression", "jetbrains.mps.bash.structure.OrCombiningConditionalExpression", "jetbrains.mps.bash.structure.OrOperator", "jetbrains.mps.bash.structure.OtherExistConditionalExpression", "jetbrains.mps.bash.structure.OtherSymlinkConditionalExpression", "jetbrains.mps.bash.structure.OutputErrorRedirection", "jetbrains.mps.bash.structure.OutputRedirection", "jetbrains.mps.bash.structure.PipeConditionalExpression", "jetbrains.mps.bash.structure.PipelineOperatorConnection", "jetbrains.mps.bash.structure.PipelineOperatorErrorConnection", "jetbrains.mps.bash.structure.PlusAssingmentExpression", "jetbrains.mps.bash.structure.PostDecExpression", "jetbrains.mps.bash.structure.PostIncExpression", "jetbrains.mps.bash.structure.PostVariableExpression", "jetbrains.mps.bash.structure.PreDecExpression", "jetbrains.mps.bash.structure.PreIncExpression", "jetbrains.mps.bash.structure.PreVariableExpression", "jetbrains.mps.bash.structure.QuotedWord", "jetbrains.mps.bash.structure.QuotesCommandSubstitution", "jetbrains.mps.bash.structure.ReadTestConditionalExpression", "jetbrains.mps.bash.structure.ReadingWritingRedirection", "jetbrains.mps.bash.structure.RedirectedCommand", "jetbrains.mps.bash.structure.Redirection", "jetbrains.mps.bash.structure.RegularFileConditionalExpression", "jetbrains.mps.bash.structure.RightBitwiseShiftExpression", "jetbrains.mps.bash.structure.RightShiftAssingmentExpression", "jetbrains.mps.bash.structure.SameReference", "jetbrains.mps.bash.structure.SelectCommand", "jetbrains.mps.bash.structure.SemicolonEt", "jetbrains.mps.bash.structure.SemicolonOperator", "jetbrains.mps.bash.structure.SemicolonTerminator", "jetbrains.mps.bash.structure.ShellScript", "jetbrains.mps.bash.structure.SimpleCommand", "jetbrains.mps.bash.structure.SimpleWord", "jetbrains.mps.bash.structure.SingleQuote", "jetbrains.mps.bash.structure.SizeConditionalExpression", "jetbrains.mps.bash.structure.SocketConditionalExpression", "jetbrains.mps.bash.structure.StickyBitConditionalExpression", "jetbrains.mps.bash.structure.StringConditionalExpression", "jetbrains.mps.bash.structure.SubExpression", "jetbrains.mps.bash.structure.SymlinkConditionalExpression", "jetbrains.mps.bash.structure.TerminalConditionalExpression", "jetbrains.mps.bash.structure.TildeExpansion", "jetbrains.mps.bash.structure.UnaryArithmeticExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression", "jetbrains.mps.bash.structure.UnaryMinusExpression", "jetbrains.mps.bash.structure.UnaryPlusExpression", "jetbrains.mps.bash.structure.UntilLoopCommand", "jetbrains.mps.bash.structure.UserIdConditionalExpression", "jetbrains.mps.bash.structure.VariableAddAssingment", "jetbrains.mps.bash.structure.VariableAssingment", "jetbrains.mps.bash.structure.VariableNameDeclaration", "jetbrains.mps.bash.structure.VariableReference", "jetbrains.mps.bash.structure.WhileLoopCommand", "jetbrains.mps.bash.structure.WordExpression", "jetbrains.mps.bash.structure.WordList", "jetbrains.mps.bash.structure.WriteTestConditionalExpression", "jetbrains.mps.bash.structure.XorAssingmentExpression", "jetbrains.mps.bash.structure.ZeroStringConditionalExpression"};

  public StructureAspectDescriptor() {
  }

  public StructureDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a, conceptFqName)) {
      case 0:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AbstractCommand", new String[]{"jetbrains.mps.bash.structure.Command"}, new String[]{"jetbrains.mps.bash.structure.Command"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 1:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AbstractFollowingCommandList", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 2:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AbstractLoopCommand", new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.ICompoundCommand"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.Command", "jetbrains.mps.bash.structure.ICompoundCommand"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 3:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AddExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 4:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AndAssingmentExpression", new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 5:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AndCombiningComditionalExpression", new String[]{"jetbrains.mps.bash.structure.CombiningConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.CombiningConditionalExpression", "jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 6:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AndOperator", new String[]{"jetbrains.mps.bash.structure.FollowingCommandList"}, new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList", "jetbrains.mps.bash.structure.FollowingCommandList"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 7:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AppendingOutputErrorRedirection", new String[]{"jetbrains.mps.bash.structure.Redirection", "jetbrains.mps.bash.structure.IToWordRedirection"}, new String[]{"jetbrains.mps.bash.structure.IToWordRedirection", "jetbrains.mps.bash.structure.Redirection"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 8:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AppendingOutputRedirection", new String[]{"jetbrains.mps.bash.structure.IORedirection"}, new String[]{"jetbrains.mps.bash.structure.IORedirection", "jetbrains.mps.bash.structure.IToWordRedirection", "jetbrains.mps.bash.structure.Redirection"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 9:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.Argument", new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.bash.structure.IDescribedConcept"}, new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration", "jetbrains.mps.bash.structure.IDescribedConcept"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"});
      case 10:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ArgumentList", new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration"}, new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 11:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ArgumentListReference", new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"}, new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 12:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ArgumentReference", new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"}, new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 13:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ArithmeticCommand", new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.ICompoundCommand", "jetbrains.mps.bash.structure.IArithmeticHolder"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.Command", "jetbrains.mps.bash.structure.IArithmeticHolder", "jetbrains.mps.bash.structure.ICompoundCommand"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 14:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ArithmeticExpansion", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.bash.structure.IGeneralizedWordUnit", "jetbrains.mps.bash.structure.IConcreteWordUnit", "jetbrains.mps.bash.structure.IArithmeticHolder"}, new String[]{"jetbrains.mps.bash.structure.IArithmeticHolder", "jetbrains.mps.bash.structure.IConcreteWordUnit", "jetbrains.mps.bash.structure.IGeneralizedWordUnit"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 15:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ArithmeticExpression", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 16:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AssingmentExpression", new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 17:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AsyncOperator", new String[]{"jetbrains.mps.bash.structure.FollowingCommandList"}, new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList", "jetbrains.mps.bash.structure.FollowingCommandList"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 18:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.AsyncTerminator", new String[]{"jetbrains.mps.bash.structure.CommandTerminator"}, new String[]{"jetbrains.mps.bash.structure.CommandTerminator"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 19:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BaseAssingmentExpression", new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 20:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BaseCommandSubstitution", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.bash.structure.IGeneralizedWordUnit"}, new String[]{"jetbrains.mps.bash.structure.IGeneralizedWordUnit"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 21:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BaseVariableAssingment", new String[]{"jetbrains.mps.bash.structure.AbstractCommand"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.Command"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 22:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BasedIntegerLiteral", new String[]{"jetbrains.mps.bash.structure.IntegerLiteral"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.IntegerLiteral"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 23:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BasicParameterExpansion", new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.IGeneralizedWordUnit", "jetbrains.mps.bash.structure.IConcreteWordUnit"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.IConcreteWordUnit", "jetbrains.mps.bash.structure.IGeneralizedWordUnit"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 24:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BinaryArithmeticExpression", new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 25:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BinaryConditionalExpression", new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 26:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BitwiseAndExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 27:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BitwiseNegationExpression", new String[]{"jetbrains.mps.bash.structure.UnaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.UnaryArithmeticExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 28:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BitwiseOrExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 29:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BitwiseXorExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 30:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BlockFileConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 31:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BraceGrouping", new String[]{"jetbrains.mps.bash.structure.GroupingCommand"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.Command", "jetbrains.mps.bash.structure.GroupingCommand", "jetbrains.mps.bash.structure.ICompoundCommand"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 32:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BracketConditionalExpression", new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 33:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BracketExpression", new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 34:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BracketGrouping", new String[]{"jetbrains.mps.bash.structure.GroupingCommand"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.Command", "jetbrains.mps.bash.structure.GroupingCommand", "jetbrains.mps.bash.structure.ICompoundCommand"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 35:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.BuckCommandSubstitution", new String[]{"jetbrains.mps.bash.structure.BaseCommandSubstitution"}, new String[]{"jetbrains.mps.bash.structure.BaseCommandSubstitution", "jetbrains.mps.bash.structure.IGeneralizedWordUnit"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 36:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CaseClause", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 37:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CaseCommand", new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.ICompoundCommand"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.Command", "jetbrains.mps.bash.structure.ICompoundCommand"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 38:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CaseTerminator", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 39:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CharFileConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 40:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CombiningConditionalExpression", new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 41:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CommaExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 42:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.Command", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 43:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CommandList", new String[]{"jetbrains.mps.bash.structure.InputLine"}, new String[]{"jetbrains.mps.bash.structure.InputLine"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 44:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CommandTerminator", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 45:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CommentedCommandList", new String[]{"jetbrains.mps.bash.structure.InputLine", "jetbrains.mps.bash.structure.IComment"}, new String[]{"jetbrains.mps.bash.structure.IComment", "jetbrains.mps.bash.structure.InputLine"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 46:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CommentedFollowingCommandList", new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList", "jetbrains.mps.bash.structure.IComment"}, new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList", "jetbrains.mps.bash.structure.IComment"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 47:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.CommentedText", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.bash.structure.IComment"}, new String[]{"jetbrains.mps.bash.structure.IComment"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 48:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ConditionalCommand", new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.ICompoundCommand"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.Command", "jetbrains.mps.bash.structure.ICompoundCommand"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 49:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ConditionalExpression", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 50:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ConditionalOperation", new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 51:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DecimalConstant", new String[]{"jetbrains.mps.bash.structure.IntegerLiteral"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.IntegerLiteral"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 52:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DirectoryConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 53:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DivAssingmentExpression", new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 54:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DivExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 55:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DoubleQuote", new String[]{"jetbrains.mps.bash.structure.QuotedWord"}, new String[]{"jetbrains.mps.bash.structure.IConcreteWordUnit", "jetbrains.mps.bash.structure.IGeneralizedWordUnit", "jetbrains.mps.bash.structure.QuotedWord"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 56:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DoubleSemicolon", new String[]{"jetbrains.mps.bash.structure.CaseTerminator"}, new String[]{"jetbrains.mps.bash.structure.CaseTerminator"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 57:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DoubleSemicolonEt", new String[]{"jetbrains.mps.bash.structure.CaseTerminator"}, new String[]{"jetbrains.mps.bash.structure.CaseTerminator"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 58:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DuplicateInputFileDiscriptor", new String[]{"jetbrains.mps.bash.structure.IORedirection"}, new String[]{"jetbrains.mps.bash.structure.IORedirection", "jetbrains.mps.bash.structure.IToWordRedirection", "jetbrains.mps.bash.structure.Redirection"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 59:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.DuplicateOutputFileDiscriptor", new String[]{"jetbrains.mps.bash.structure.IORedirection"}, new String[]{"jetbrains.mps.bash.structure.IORedirection", "jetbrains.mps.bash.structure.IToWordRedirection", "jetbrains.mps.bash.structure.Redirection"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 60:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.EffectiveGroupIdConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 61:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.EffectiveUserIdConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 62:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ElifCommand", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 63:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.EqualityExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 64:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.EqualityNumber", new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression", "jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 65:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.EqualityStrings", new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression", "jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 66:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.EqualityStrings2", new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression", "jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 67:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExecTestConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 68:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExistConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 69:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExpExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 70:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExternalCommandCall", new String[]{"jetbrains.mps.bash.structure.AbstractCommand"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.Command"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 71:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExternalCommandDeclaration", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"});
      case 72:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExternalOptionDeclaration", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 73:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ExternalOptionReference", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 74:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.FollowingCommandList", new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList"}, new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 75:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.FollowingPipeline", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 76:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ForCommand", new String[]{"jetbrains.mps.bash.structure.AbstractLoopCommand"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.AbstractLoopCommand", "jetbrains.mps.bash.structure.Command", "jetbrains.mps.bash.structure.ICompoundCommand"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 77:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ForeachCommand", new String[]{"jetbrains.mps.bash.structure.AbstractLoopCommand"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.AbstractLoopCommand", "jetbrains.mps.bash.structure.Command", "jetbrains.mps.bash.structure.ICompoundCommand"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 78:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.FreeCommand", new String[]{"jetbrains.mps.bash.structure.AbstractCommand"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.Command"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 79:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.FunctionCallCommand", new String[]{"jetbrains.mps.bash.structure.AbstractCommand"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.Command"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 80:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.FunctionDeclaration", new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.Command"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"});
      case 81:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GeneralizedWord", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 82:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GreaterThanExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 83:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GreaterThanNumber", new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression", "jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 84:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GreaterThanOrEqual", new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression", "jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 85:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GreaterThanOrEqualExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 86:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GreaterThanString", new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression", "jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 87:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GroupIdConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 88:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.GroupingCommand", new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.ICompoundCommand"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.Command", "jetbrains.mps.bash.structure.ICompoundCommand"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 89:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.HeadCommandList", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 90:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.HeadPipeline", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 91:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.HereDocumentRedirection", new String[]{"jetbrains.mps.bash.structure.Redirection"}, new String[]{"jetbrains.mps.bash.structure.Redirection"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 92:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.HereStringRedirection", new String[]{"jetbrains.mps.bash.structure.Redirection", "jetbrains.mps.bash.structure.IToWordRedirection"}, new String[]{"jetbrains.mps.bash.structure.IToWordRedirection", "jetbrains.mps.bash.structure.Redirection"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 93:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.HexIntegerLiteral", new String[]{"jetbrains.mps.bash.structure.IntegerLiteral"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.IntegerLiteral"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 94:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IArithmeticHolder", new String[]{}, new String[]{}, new String[]{});
      case 95:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ICommandParameter", new String[]{}, new String[]{}, new String[]{});
      case 96:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IComment", new String[]{}, new String[]{}, new String[]{});
      case 97:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ICompoundCommand", new String[]{}, new String[]{}, new String[]{});
      case 98:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IConcreteWordUnit", new String[]{}, new String[]{}, new String[]{});
      case 99:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IDescribedConcept", new String[]{}, new String[]{}, new String[]{});
      case 100:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IGeneralizedWordUnit", new String[]{}, new String[]{}, new String[]{});
      case 101:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IORedirection", new String[]{"jetbrains.mps.bash.structure.Redirection", "jetbrains.mps.bash.structure.IToWordRedirection"}, new String[]{"jetbrains.mps.bash.structure.IToWordRedirection", "jetbrains.mps.bash.structure.Redirection"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 102:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IPriorityExpression", new String[]{}, new String[]{}, new String[]{});
      case 103:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ISymbolConcept", new String[]{}, new String[]{}, new String[]{});
      case 104:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IToWordRedirection", new String[]{}, new String[]{}, new String[]{});
      case 105:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IfCommand", new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.ICompoundCommand"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.Command", "jetbrains.mps.bash.structure.ICompoundCommand"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 106:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.InequalityExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 107:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.InequalityNumber", new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression", "jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 108:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.InequalityStrings", new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression", "jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 109:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.InputLine", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 110:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.InputLines", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 111:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.InputRedirection", new String[]{"jetbrains.mps.bash.structure.IORedirection"}, new String[]{"jetbrains.mps.bash.structure.IORedirection", "jetbrains.mps.bash.structure.IToWordRedirection", "jetbrains.mps.bash.structure.Redirection"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 112:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.IntegerLiteral", new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 113:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LValue", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 114:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LastReadConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 115:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LeftBitwiseShiftExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 116:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LeftShiftAssingmentExpression", new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 117:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LessThanExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 118:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LessThanNumber", new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression", "jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 119:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LessThanOrEqualExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 120:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LessThanOrEqualNumber", new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression", "jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 121:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LessThanString", new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression", "jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 122:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LogicalAndExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 123:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LogicalNegationExpression", new String[]{"jetbrains.mps.bash.structure.UnaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.UnaryArithmeticExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 124:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.LogicalOrExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 125:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.MinusAssingmentExpression", new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 126:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ModAssingmentExpression", new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 127:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ModExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 128:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.MulExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 129:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.MusAssingmentExpression", new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 130:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.NewerThan", new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression", "jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 131:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.NonZeroStringConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 132:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.NotCommand", new String[]{"jetbrains.mps.bash.structure.AbstractCommand"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.Command"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 133:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OlderThan", new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression", "jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 134:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.Option", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.bash.structure.ISymbolConcept", "jetbrains.mps.bash.structure.IDescribedConcept"}, new String[]{"jetbrains.mps.bash.structure.IDescribedConcept", "jetbrains.mps.bash.structure.ISymbolConcept"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 135:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OptionReference", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 136:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OptionSet", new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration"}, new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 137:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OptionSetReference", new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"}, new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 138:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OptionWithParam", new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration", "jetbrains.mps.bash.structure.ISymbolConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.bash.structure.IDescribedConcept"}, new String[]{"jetbrains.mps.bash.structure.ExternalOptionDeclaration", "jetbrains.mps.bash.structure.IDescribedConcept", "jetbrains.mps.bash.structure.ISymbolConcept"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"});
      case 139:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OptionWithParamReference", new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"}, new String[]{"jetbrains.mps.bash.structure.ExternalOptionReference"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 140:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OptnameStringConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 141:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OrAssingmentExpression", new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 142:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OrCombiningConditionalExpression", new String[]{"jetbrains.mps.bash.structure.CombiningConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.CombiningConditionalExpression", "jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 143:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OrOperator", new String[]{"jetbrains.mps.bash.structure.FollowingCommandList"}, new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList", "jetbrains.mps.bash.structure.FollowingCommandList"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 144:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OtherExistConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 145:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OtherSymlinkConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 146:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OutputErrorRedirection", new String[]{"jetbrains.mps.bash.structure.Redirection", "jetbrains.mps.bash.structure.IToWordRedirection"}, new String[]{"jetbrains.mps.bash.structure.IToWordRedirection", "jetbrains.mps.bash.structure.Redirection"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 147:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.OutputRedirection", new String[]{"jetbrains.mps.bash.structure.IORedirection"}, new String[]{"jetbrains.mps.bash.structure.IORedirection", "jetbrains.mps.bash.structure.IToWordRedirection", "jetbrains.mps.bash.structure.Redirection"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 148:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PipeConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 149:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PipelineOperatorConnection", new String[]{"jetbrains.mps.bash.structure.FollowingPipeline"}, new String[]{"jetbrains.mps.bash.structure.FollowingPipeline"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 150:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PipelineOperatorErrorConnection", new String[]{"jetbrains.mps.bash.structure.FollowingPipeline"}, new String[]{"jetbrains.mps.bash.structure.FollowingPipeline"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 151:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PlusAssingmentExpression", new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 152:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PostDecExpression", new String[]{"jetbrains.mps.bash.structure.PostVariableExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.PostVariableExpression", "jetbrains.mps.bash.structure.WordExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 153:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PostIncExpression", new String[]{"jetbrains.mps.bash.structure.PostVariableExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.PostVariableExpression", "jetbrains.mps.bash.structure.WordExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 154:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PostVariableExpression", new String[]{"jetbrains.mps.bash.structure.WordExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.WordExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 155:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PreDecExpression", new String[]{"jetbrains.mps.bash.structure.PreVariableExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.PreVariableExpression", "jetbrains.mps.bash.structure.WordExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 156:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PreIncExpression", new String[]{"jetbrains.mps.bash.structure.PreVariableExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.PreVariableExpression", "jetbrains.mps.bash.structure.WordExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 157:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.PreVariableExpression", new String[]{"jetbrains.mps.bash.structure.WordExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.WordExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 158:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.QuotedWord", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.bash.structure.IGeneralizedWordUnit", "jetbrains.mps.bash.structure.IConcreteWordUnit"}, new String[]{"jetbrains.mps.bash.structure.IConcreteWordUnit", "jetbrains.mps.bash.structure.IGeneralizedWordUnit"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 159:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.QuotesCommandSubstitution", new String[]{"jetbrains.mps.bash.structure.BaseCommandSubstitution", "jetbrains.mps.bash.structure.IConcreteWordUnit"}, new String[]{"jetbrains.mps.bash.structure.BaseCommandSubstitution", "jetbrains.mps.bash.structure.IConcreteWordUnit", "jetbrains.mps.bash.structure.IGeneralizedWordUnit"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 160:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ReadTestConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 161:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ReadingWritingRedirection", new String[]{"jetbrains.mps.bash.structure.IORedirection"}, new String[]{"jetbrains.mps.bash.structure.IORedirection", "jetbrains.mps.bash.structure.IToWordRedirection", "jetbrains.mps.bash.structure.Redirection"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 162:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.RedirectedCommand", new String[]{"jetbrains.mps.bash.structure.AbstractCommand"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.Command"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 163:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.Redirection", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 164:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.RegularFileConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 165:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.RightBitwiseShiftExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 166:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.RightShiftAssingmentExpression", new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 167:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SameReference", new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.BinaryConditionalExpression", "jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 168:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SelectCommand", new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.ICompoundCommand"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.Command", "jetbrains.mps.bash.structure.ICompoundCommand"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 169:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SemicolonEt", new String[]{"jetbrains.mps.bash.structure.CaseTerminator"}, new String[]{"jetbrains.mps.bash.structure.CaseTerminator"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 170:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SemicolonOperator", new String[]{"jetbrains.mps.bash.structure.FollowingCommandList"}, new String[]{"jetbrains.mps.bash.structure.AbstractFollowingCommandList", "jetbrains.mps.bash.structure.FollowingCommandList"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 171:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SemicolonTerminator", new String[]{"jetbrains.mps.bash.structure.CommandTerminator"}, new String[]{"jetbrains.mps.bash.structure.CommandTerminator"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 172:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ShellScript", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"});
      case 173:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SimpleCommand", new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.Command"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"});
      case 174:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SimpleWord", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.bash.structure.IGeneralizedWordUnit"}, new String[]{"jetbrains.mps.bash.structure.IGeneralizedWordUnit"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 175:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SingleQuote", new String[]{"jetbrains.mps.bash.structure.QuotedWord"}, new String[]{"jetbrains.mps.bash.structure.IConcreteWordUnit", "jetbrains.mps.bash.structure.IGeneralizedWordUnit", "jetbrains.mps.bash.structure.QuotedWord"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 176:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SizeConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 177:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SocketConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 178:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.StickyBitConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 179:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.StringConditionalExpression", new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 180:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SubExpression", new String[]{"jetbrains.mps.bash.structure.BinaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BinaryArithmeticExpression", "jetbrains.mps.bash.structure.IPriorityExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 181:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.SymlinkConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 182:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.TerminalConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 183:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.TildeExpansion", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.bash.structure.IGeneralizedWordUnit", "jetbrains.mps.bash.structure.IConcreteWordUnit"}, new String[]{"jetbrains.mps.bash.structure.IConcreteWordUnit", "jetbrains.mps.bash.structure.IGeneralizedWordUnit"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 184:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.UnaryArithmeticExpression", new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 185:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.UnaryConditionalExpression", new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 186:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.UnaryMinusExpression", new String[]{"jetbrains.mps.bash.structure.UnaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.UnaryArithmeticExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 187:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.UnaryPlusExpression", new String[]{"jetbrains.mps.bash.structure.UnaryArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.UnaryArithmeticExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 188:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.UntilLoopCommand", new String[]{"jetbrains.mps.bash.structure.AbstractLoopCommand"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.AbstractLoopCommand", "jetbrains.mps.bash.structure.Command", "jetbrains.mps.bash.structure.ICompoundCommand"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 189:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.UserIdConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 190:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.VariableAddAssingment", new String[]{"jetbrains.mps.bash.structure.BaseVariableAssingment"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.BaseVariableAssingment", "jetbrains.mps.bash.structure.Command"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 191:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.VariableAssingment", new String[]{"jetbrains.mps.bash.structure.BaseVariableAssingment"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.BaseVariableAssingment", "jetbrains.mps.bash.structure.Command"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 192:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.VariableNameDeclaration", new String[]{"jetbrains.mps.bash.structure.LValue", "jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{"jetbrains.mps.bash.structure.LValue"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept"});
      case 193:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.VariableReference", new String[]{"jetbrains.mps.bash.structure.LValue", "jetbrains.mps.bash.structure.IGeneralizedWordUnit"}, new String[]{"jetbrains.mps.bash.structure.IGeneralizedWordUnit", "jetbrains.mps.bash.structure.LValue"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 194:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.WhileLoopCommand", new String[]{"jetbrains.mps.bash.structure.AbstractLoopCommand"}, new String[]{"jetbrains.mps.bash.structure.AbstractCommand", "jetbrains.mps.bash.structure.AbstractLoopCommand", "jetbrains.mps.bash.structure.Command", "jetbrains.mps.bash.structure.ICompoundCommand"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 195:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.WordExpression", new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 196:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.WordList", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 197:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.WriteTestConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 198:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.XorAssingmentExpression", new String[]{"jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.bash.structure.ArithmeticExpression", "jetbrains.mps.bash.structure.BaseAssingmentExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 199:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.bash.structure.ZeroStringConditionalExpression", new String[]{"jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.bash.structure.ConditionalExpression", "jetbrains.mps.bash.structure.UnaryConditionalExpression"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      default:
        return null;
    }
  }

  public static class DataBasedStructureDescriptor extends StructureDescriptor {
    private ImmutableList<String> parents;
    private Set<String> ancestors;

    public DataBasedStructureDescriptor(String fqName, String[] parents, String[] ancestorsInLanguage, String[] ancestorsNotInLanguage) {
      this.parents = ImmutableList.copyOf(parents);
      this.ancestors = getAncestors(fqName, ancestorsInLanguage, ancestorsNotInLanguage);
    }

    public Set<String> getAncestorsNames() {
      return ancestors;
    }

    public boolean isAssignableTo(String toConceptFqName) {
      return ancestors.contains(toConceptFqName);
    }

    public List<String> getParentsNames() {
      return parents;
    }

    private static Set<String> getAncestors(String conceptFqName, String[] ancestorsInLanguage, String[] ancestorsNotInLanguage) {
      Set<String> result = new HashSet(ancestorsInLanguage.length + 1);

      result.add(conceptFqName);
      for (String ancestor : ancestorsInLanguage) {
        result.add(ancestor);
      }

      ConceptRegistry registry = ConceptRegistry.getInstance();
      for (String parent : ancestorsNotInLanguage) {
        if (!(result.contains(parent))) {
          result.addAll(registry.getStructureDescriptor(parent).getAncestorsNames());
        }
      }

      return Collections.unmodifiableSet(result);
    }
  }
}
