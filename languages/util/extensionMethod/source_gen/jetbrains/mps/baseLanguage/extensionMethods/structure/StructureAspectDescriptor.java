package jetbrains.mps.baseLanguage.extensionMethods.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBaseExtensionMethodContainer = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.extensionMethods.structure.BaseExtensionMethodContainer").super_("jetbrains.mps.baseLanguage.structure.GenericDeclaration").parents("jetbrains.mps.baseLanguage.structure.GenericDeclaration", "jetbrains.mps.baseLanguage.structure.IVisible", "jetbrains.mps.baseLanguage.structure.IMemberContainer").children(new String[]{"methods", "staticFields"}, new boolean[]{true, true}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptExtensionMethodCall = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionMethodCall").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation", "jetbrains.mps.baseLanguage.structure.IMethodCall").references("extension").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExtensionMethodDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", "jetbrains.mps.baseLanguage.structure.ClassifierMember").children(new String[]{"extendedType"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptExtensionStaticFieldDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionStaticFieldDeclaration").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration").create();
  /*package*/ final ConceptDescriptor myConceptExtensionStaticFieldReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionStaticFieldReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference").references("staticFieldDeclaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLocalExtendedMethodCall = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.extensionMethods.structure.LocalExtendedMethodCall").super_("jetbrains.mps.baseLanguage.structure.BaseMethodCall").parents("jetbrains.mps.baseLanguage.structure.BaseMethodCall").references("instanceMethodDeclaration").alias("", "local extended method call").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSimpleExtensionMethodsContainer = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.extensionMethods.structure.SimpleExtensionMethodsContainer").super_("jetbrains.mps.baseLanguage.extensionMethods.structure.BaseExtensionMethodContainer").parents("jetbrains.mps.baseLanguage.extensionMethods.structure.BaseExtensionMethodContainer").alias("Simple Extension Method Container", "").create();
  /*package*/ final ConceptDescriptor myConceptThisExtensionExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.extensionMethods.structure.ThisExtensionExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("this", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTypeExtension = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.extensionMethods.structure.TypeExtension").super_("jetbrains.mps.baseLanguage.extensionMethods.structure.BaseExtensionMethodContainer").parents("jetbrains.mps.baseLanguage.extensionMethods.structure.BaseExtensionMethodContainer").children(new String[]{"type"}, new boolean[]{false}).alias("type extension", "").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBaseExtensionMethodContainer, myConceptExtensionMethodCall, myConceptExtensionMethodDeclaration, myConceptExtensionStaticFieldDeclaration, myConceptExtensionStaticFieldReference, myConceptLocalExtendedMethodCall, myConceptSimpleExtensionMethodsContainer, myConceptThisExtensionExpression, myConceptTypeExtension);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0m, conceptFqName)) {
      case 0:
        return myConceptBaseExtensionMethodContainer;
      case 1:
        return myConceptExtensionMethodCall;
      case 2:
        return myConceptExtensionMethodDeclaration;
      case 3:
        return myConceptExtensionStaticFieldDeclaration;
      case 4:
        return myConceptExtensionStaticFieldReference;
      case 5:
        return myConceptLocalExtendedMethodCall;
      case 6:
        return myConceptSimpleExtensionMethodsContainer;
      case 7:
        return myConceptThisExtensionExpression;
      case 8:
        return myConceptTypeExtension;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0m = new String[]{"jetbrains.mps.baseLanguage.extensionMethods.structure.BaseExtensionMethodContainer", "jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionMethodCall", "jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionMethodDeclaration", "jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionStaticFieldDeclaration", "jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionStaticFieldReference", "jetbrains.mps.baseLanguage.extensionMethods.structure.LocalExtendedMethodCall", "jetbrains.mps.baseLanguage.extensionMethods.structure.SimpleExtensionMethodsContainer", "jetbrains.mps.baseLanguage.extensionMethods.structure.ThisExtensionExpression", "jetbrains.mps.baseLanguage.extensionMethods.structure.TypeExtension"};
}
