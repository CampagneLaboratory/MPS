package jetbrains.mps.baseLanguage.contracts.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b, conceptFqName)) {
      case 0:
        return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.contracts.structure.Condition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"expression"}, new boolean[]{false}).abstract_().create();
      case 1:
        return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.contracts.structure.ContractThisExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("this", "").create();
      case 2:
        return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.contracts.structure.MethodConditions").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").children(new String[]{"condition"}, new boolean[]{true}).create();
      case 3:
        return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.contracts.structure.Postcondition").super_("jetbrains.mps.baseLanguage.contracts.structure.Condition").parents("jetbrains.mps.baseLanguage.contracts.structure.Condition").alias("postcondition", "").create();
      case 4:
        return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.contracts.structure.Precondition").super_("jetbrains.mps.baseLanguage.contracts.structure.Condition").parents("jetbrains.mps.baseLanguage.contracts.structure.Condition").alias("precondition", "").create();
      case 5:
        return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.contracts.structure.ResultExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("!result", "").create();
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }

  private static String[] stringSwitchCases_1htk8d_a0a0b = new String[]{"jetbrains.mps.baseLanguage.contracts.structure.Condition", "jetbrains.mps.baseLanguage.contracts.structure.ContractThisExpression", "jetbrains.mps.baseLanguage.contracts.structure.MethodConditions", "jetbrains.mps.baseLanguage.contracts.structure.Postcondition", "jetbrains.mps.baseLanguage.contracts.structure.Precondition", "jetbrains.mps.baseLanguage.contracts.structure.ResultExpression"};
}
