package jetbrains.mpslite.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.EditorAspect;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public Collection<EditorAspect> getEditorAspects(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<EditorAspect>singletonList(new AbstractConceptReference_Editor());
      case 1:
        return Collections.<EditorAspect>singletonList(new BinaryOperationConcept_Editor());
      case 2:
        return Collections.<EditorAspect>singletonList(new BlockBodyPart_Editor());
      case 3:
        return Collections.<EditorAspect>singletonList(new BlockConcept_Editor());
      case 4:
        return Collections.<EditorAspect>singletonList(new ConceptContainer_Editor());
      case 5:
        return Collections.<EditorAspect>singletonList(new ConcreteChildPart_Editor());
      case 6:
        return Collections.<EditorAspect>singletonList(new ConcretePropertyPart_Editor());
      case 7:
        return Collections.<EditorAspect>singletonList(new ConcreteReferencePart_Editor());
      case 8:
        return Collections.<EditorAspect>singletonList(new ConstantLinePart_Editor());
      case 9:
        return Collections.<EditorAspect>singletonList(new ExpressionConcept_Editor());
      case 10:
        return Collections.<EditorAspect>singletonList(new IndentLinePart_Editor());
      case 11:
        return Collections.<EditorAspect>singletonList(new Line_Editor());
      case 12:
        return Collections.<EditorAspect>singletonList(new LineList_Editor());
      case 13:
        return Collections.<EditorAspect>singletonList(new MPSLiteConceptDeclaration_Editor());
      case 14:
        return Collections.<EditorAspect>singletonList(new NamePropertyNamePart_Editor());
      case 15:
        return Collections.<EditorAspect>singletonList(new OptionalPart_Editor());
      case 16:
        return Collections.<EditorAspect>singletonList(new StatementConcept_Editor());
      case 17:
        return Collections.<EditorAspect>singletonList(new TypePart_Editor());
      case 18:
        return Collections.<EditorAspect>singletonList(new VariableConcept_Editor());
      default:
    }
    return Collections.emptyList();
  }

  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mpslite.structure.AbstractConceptReference", "jetbrains.mpslite.structure.BinaryOperationConcept", "jetbrains.mpslite.structure.BlockBodyPart", "jetbrains.mpslite.structure.BlockConcept", "jetbrains.mpslite.structure.ConceptContainer", "jetbrains.mpslite.structure.ConcreteChildPart", "jetbrains.mpslite.structure.ConcretePropertyPart", "jetbrains.mpslite.structure.ConcreteReferencePart", "jetbrains.mpslite.structure.ConstantLinePart", "jetbrains.mpslite.structure.ExpressionConcept", "jetbrains.mpslite.structure.IndentLinePart", "jetbrains.mpslite.structure.Line", "jetbrains.mpslite.structure.LineList", "jetbrains.mpslite.structure.MPSLiteConceptDeclaration", "jetbrains.mpslite.structure.NamePropertyNamePart", "jetbrains.mpslite.structure.OptionalPart", "jetbrains.mpslite.structure.StatementConcept", "jetbrains.mpslite.structure.TypePart", "jetbrains.mpslite.structure.VariableConcept"};
}
