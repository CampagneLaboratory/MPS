package jetbrains.mpslite.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.KeyMapImpl;
import jetbrains.mps.openapi.editor.cells.KeyMapAction;
import jetbrains.mps.editor.runtime.cells.KeyMapActionImpl;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class ChildPart_Actions extends KeyMapImpl {
  public ChildPart_Actions() {
    this.setApplicableToEveryModel(false);
    KeyMapAction action;
    action = new ChildPart_Actions.ChildPart_Actions_Action0();
    this.putAction("any", "*", action);
    action = new ChildPart_Actions.ChildPart_Actions_Action1();
    this.putAction("any", "V", action);
  }

  public static class ChildPart_Actions_Action0 extends KeyMapActionImpl {
    public ChildPart_Actions_Action0() {
      this.setShownInPopupMenu(false);
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeUtil.isInstanceOf(contextNode, SConceptRepository.getInstance().getConcept("jetbrains.mpslite.structure.ChildPart")))) {
        return false;
      }
      return true;
    }

    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SPropertyOperations.set(node, "multiple", "" + (true));
    }

    public String getKeyStroke() {
      return " *";
    }
  }

  public static class ChildPart_Actions_Action1 extends KeyMapActionImpl {
    public ChildPart_Actions_Action1() {
      this.setShownInPopupMenu(false);
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeUtil.isInstanceOf(contextNode, SConceptRepository.getInstance().getConcept("jetbrains.mpslite.structure.ChildPart")))) {
        return false;
      }
      return true;
    }

    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      if (SPropertyOperations.getBoolean(node, "multiple")) {
        SPropertyOperations.set(node, "vertical", "" + (true));
      }
    }

    public String getKeyStroke() {
      return " V";
    }
  }
}
