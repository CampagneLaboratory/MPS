package jetbrains.mpslite.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.Map;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class GenerationUtils {
  public GenerationUtils() {
  }

  public static SNode generateEditorCellModel(SNode lineList, SNode concept, Map<SNode, SNode> partsToLinks) {
    List<SNode> lines = SLinkOperations.getTargets(lineList, "line", true);
    if ((int) ListSequence.fromList(lines).count() == 0) {
      if (SPropertyOperations.getBoolean(concept, "abstract")) {
        jetbrains.mps.smodel.SNode errorCell = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Error", null);
        SPropertyOperations.set(errorCell, "text", "abstract " + SPropertyOperations.getString(concept, "name"));
        return errorCell;
      } else {
        return null;
      }
    } else if ((int) ListSequence.fromList(lines).count() == 1) {
      List<SNode> lineParts = SLinkOperations.getTargets(ListSequence.fromList(lines).first(), "linePart", true);
      if ((int) ListSequence.fromList(lineParts).count() == 1) {
        return BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), ListSequence.fromList(lineParts).first(), "virtual_createCellModel_1238614099938", new Object[]{partsToLinks});
      } else {
        jetbrains.mps.smodel.SNode hCollection = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Collection", null);
        SLinkOperations.setTarget(hCollection, "cellLayout", SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Horizontal", null), true);
        for (SNode linePart : lineParts) {
          ListSequence.fromList(SLinkOperations.getTargets(hCollection, "childCellModel", true)).addElement(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), linePart, "virtual_createCellModel_1238614099938", new Object[]{partsToLinks}));
        }
        return hCollection;
      }
    } else {
      jetbrains.mps.smodel.SNode vCollection = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Collection", null);
      SLinkOperations.setTarget(vCollection, "cellLayout", SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Vertical", null), true);
      for (SNode line : lines) {
        jetbrains.mps.smodel.SNode hCollection = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Collection", null);
        SLinkOperations.setTarget(hCollection, "cellLayout", SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellLayout_Horizontal", null), true);
        ListSequence.fromList(SLinkOperations.getTargets(vCollection, "childCellModel", true)).addElement(hCollection);
        for (SNode linePart : SLinkOperations.getTargets(line, "linePart", true)) {
          ListSequence.fromList(SLinkOperations.getTargets(hCollection, "childCellModel", true)).addElement(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), linePart, "virtual_createCellModel_1238614099938", new Object[]{partsToLinks}));
        }
      }
      return vCollection;
    }
  }

  public static void fillBinarySideTransformActions(SNode binaryOperationConcept, SNode actions, Map<SNode, SNode> conceptsToTargets, Map<SNode, SNode> linePartsToLinks) {
    SNode expressionConcept = (SNode) MapSequence.fromMap(conceptsToTargets).get(SLinkOperations.getTarget(SNodeOperations.getAncestor(binaryOperationConcept, "jetbrains.mpslite.structure.ConceptContainer", false, false), "expressionConcept", true));
    if ((expressionConcept != null)) {
      SNode rtBuilder = _quotation_createNode_vxpwrw_a0a0b0c(SNodeOperations.cast(MapSequence.fromMap(linePartsToLinks).get(SLinkOperations.getTarget(binaryOperationConcept, "leftTarget", true)), "jetbrains.mps.lang.structure.structure.LinkDeclaration"), MapSequence.fromMap(conceptsToTargets).get(binaryOperationConcept), expressionConcept);
      SNode ltBuilder = _quotation_createNode_vxpwrw_a0b0b0c(SNodeOperations.cast(MapSequence.fromMap(linePartsToLinks).get(SLinkOperations.getTarget(binaryOperationConcept, "rightTarget", true)), "jetbrains.mps.lang.structure.structure.LinkDeclaration"), MapSequence.fromMap(conceptsToTargets).get(binaryOperationConcept), expressionConcept);
      ListSequence.fromList(SLinkOperations.getTargets(actions, "actionsBuilder", true)).addElement(rtBuilder);
      ListSequence.fromList(SLinkOperations.getTargets(actions, "actionsBuilder", true)).addElement(ltBuilder);
    }
  }

  private static SNode _quotation_createNode_vxpwrw_a0a0b0c(Object parameter_1, Object parameter_2, Object parameter_3) {
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    SNode quotedNode_13 = null;
    SNode quotedNode_14 = null;
    SNode quotedNode_15 = null;
    SNode quotedNode_16 = null;
    SNode quotedNode_17 = null;
    SNode quotedNode_18 = null;
    SNode quotedNode_19 = null;
    SNode quotedNode_20 = null;
    SNode quotedNode_21 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.SideTransformHintSubstituteActionsBuilder", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_4, "applicableConcept", (SNode) parameter_3);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptRightTransformPart", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_5, "concept", (SNode) parameter_2);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.QueryFunction_SideTransform_ConceptHandler", null, null, GlobalScope.getInstance(), false);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, GlobalScope.getInstance(), false);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_ReplaceWithAnotherOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_18 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_result", null, null, GlobalScope.getInstance(), false);
    quotedNode_14.addChild("replacementNode", quotedNode_18);
    quotedNode_11.addChild("operation", quotedNode_14);
    quotedNode_15 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_sourceNode", null, null, GlobalScope.getInstance(), false);
    quotedNode_11.addChild("operand", quotedNode_15);
    quotedNode_8.addChild("expression", quotedNode_11);
    quotedNode_7.addChild("statement", quotedNode_8);
    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_16 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_19 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SLinkAccess", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_19, "link", (SNode) parameter_1);
    quotedNode_16.addChild("operation", quotedNode_19);
    quotedNode_20 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_result", null, null, GlobalScope.getInstance(), false);
    quotedNode_16.addChild("operand", quotedNode_20);
    quotedNode_12.addChild("operand", quotedNode_16);
    quotedNode_17 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Link_SetTargetOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_21 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_sourceNode", null, null, GlobalScope.getInstance(), false);
    quotedNode_17.addChild("linkTarget", quotedNode_21);
    quotedNode_12.addChild("operation", quotedNode_17);
    quotedNode_9.addChild("expression", quotedNode_12);
    quotedNode_7.addChild("statement", quotedNode_9);
    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_result", null, null, GlobalScope.getInstance(), false);
    quotedNode_10.addChild("expression", quotedNode_13);
    quotedNode_7.addChild("statement", quotedNode_10);
    quotedNode_6.addChild("body", quotedNode_7);
    quotedNode_5.addChild("handler", quotedNode_6);
    quotedNode_4.addChild("part", quotedNode_5);
    return quotedNode_4;
  }

  private static SNode _quotation_createNode_vxpwrw_a0b0b0c(Object parameter_1, Object parameter_2, Object parameter_3) {
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    SNode quotedNode_12 = null;
    SNode quotedNode_13 = null;
    SNode quotedNode_14 = null;
    SNode quotedNode_15 = null;
    SNode quotedNode_16 = null;
    SNode quotedNode_17 = null;
    SNode quotedNode_18 = null;
    SNode quotedNode_19 = null;
    SNode quotedNode_20 = null;
    SNode quotedNode_21 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.SideTransformHintSubstituteActionsBuilder", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_4, "side", "left");
    SNodeAccessUtil.setReferenceTarget(quotedNode_4, "applicableConcept", (SNode) parameter_3);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptRightTransformPart", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_5, "concept", (SNode) parameter_2);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.QueryFunction_SideTransform_ConceptHandler", null, null, GlobalScope.getInstance(), false);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, GlobalScope.getInstance(), false);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_ReplaceWithAnotherOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_18 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_result", null, null, GlobalScope.getInstance(), false);
    quotedNode_14.addChild("replacementNode", quotedNode_18);
    quotedNode_11.addChild("operation", quotedNode_14);
    quotedNode_15 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_sourceNode", null, null, GlobalScope.getInstance(), false);
    quotedNode_11.addChild("operand", quotedNode_15);
    quotedNode_8.addChild("expression", quotedNode_11);
    quotedNode_7.addChild("statement", quotedNode_8);
    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_16 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_19 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_result", null, null, GlobalScope.getInstance(), false);
    quotedNode_16.addChild("operand", quotedNode_19);
    quotedNode_20 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SLinkAccess", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_20, "link", (SNode) parameter_1);
    quotedNode_16.addChild("operation", quotedNode_20);
    quotedNode_12.addChild("operand", quotedNode_16);
    quotedNode_17 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Link_SetTargetOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_21 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_sourceNode", null, null, GlobalScope.getInstance(), false);
    quotedNode_17.addChild("linkTarget", quotedNode_21);
    quotedNode_12.addChild("operation", quotedNode_17);
    quotedNode_9.addChild("expression", quotedNode_12);
    quotedNode_7.addChild("statement", quotedNode_9);
    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_result", null, null, GlobalScope.getInstance(), false);
    quotedNode_10.addChild("expression", quotedNode_13);
    quotedNode_7.addChild("statement", quotedNode_10);
    quotedNode_6.addChild("body", quotedNode_7);
    quotedNode_5.addChild("handler", quotedNode_6);
    quotedNode_4.addChild("part", quotedNode_5);
    return quotedNode_4;
  }
}
