package jetbrains.mps.execution.commands.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class ConvertToList_Intention extends BaseIntention implements Intention {
  public ConvertToList_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.execution.commands.structure.ListCommandPart";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Convert Items to Explicit List Creation";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    if (editorContext.getSelectedNode() != node && !(this.isVisibleInChild(node, editorContext.getSelectedNode(), editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return ListSequence.fromList(SLinkOperations.getTargets(node, "items", true)).isNotEmpty();
  }

  public boolean isVisibleInChild(final SNode node, final SNode childNode, final EditorContext editorContext) {
    return eq_63cojg_a0a0h(SNodeOperations.getContainingLinkRole(childNode), "items");
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    List<SNode> items = SLinkOperations.getTargets(node, "items", true);
    ListSequence.fromList(items).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SNodeOperations.detachNode(it);
      }
    });
    SLinkOperations.setTarget(node, "list", new ConvertToList_Intention.QuotationClass_63cojg_a0a0c0i().createNode(items), true);
  }

  public String getLocationString() {
    return "jetbrains.mps.execution.commands.intentions";
  }

  private static boolean eq_63cojg_a0a0h(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  public static class QuotationClass_63cojg_a0a0c0i {
    public QuotationClass_63cojg_a0a0c0i() {
    }

    public SNode createNode(Object parameter_6) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.GenericNewExpression", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_4 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.ListCreatorWithInit", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_5 = quotedNode_2;
          {
            List<SNode> nodes = (List<SNode>) parameter_6;
            for (SNode child : nodes) {
              quotedNode_2.addChild("initValue", HUtil.copyIfNecessary(child));
            }
          }
          quotedNode_1.addChild("creator", quotedNode1_5);
        }
        result = quotedNode1_4;
      }
      return result;
    }
  }
}
