package jetbrains.mps.execution.commands.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class ConvertToItems_Intention extends BaseIntention implements Intention {
  public ConvertToItems_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.execution.commands.structure.ListCommandPart";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Convert Explicit List Creation to Items";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    if (editorContext.getSelectedNode() != node && !(this.isVisibleInChild(node, editorContext.getSelectedNode(), editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    SNode list = SLinkOperations.getTarget(node, "list", true);
    if ((list == null) || !(SNodeOperations.isInstanceOf(list, "jetbrains.mps.baseLanguage.structure.GenericNewExpression"))) {
      return false;
    }
    SNode creator = SLinkOperations.getTarget(SNodeOperations.cast(list, "jetbrains.mps.baseLanguage.structure.GenericNewExpression"), "creator", true);
    return SNodeOperations.isInstanceOf(creator, "jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator") && ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(creator, "jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator"), "initValue", true)).isNotEmpty();
  }

  public boolean isVisibleInChild(final SNode node, final SNode childNode, final EditorContext editorContext) {
    return eq_icoqxr_a0a0h(SNodeOperations.getContainingLinkRole(childNode), "list");
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode list = SLinkOperations.getTarget(node, "list", true);
    SNodeOperations.detachNode(list);
    ListSequence.fromList(SLinkOperations.getTargets(node, "items", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(list, "jetbrains.mps.baseLanguage.structure.GenericNewExpression"), "creator", true), "jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator"), "initValue", true)));
  }

  public String getLocationString() {
    return "jetbrains.mps.execution.commands.intentions";
  }

  private static boolean eq_icoqxr_a0a0h(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
