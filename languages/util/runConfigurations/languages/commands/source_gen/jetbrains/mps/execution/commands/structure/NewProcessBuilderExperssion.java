package jetbrains.mps.execution.commands.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class NewProcessBuilderExperssion extends Expression {
  public static final String concept = "jetbrains.mps.execution.commands.structure.NewProcessBuilderExperssion";
  public static final String WORKING_DIRECTORY = "workingDirectory";
  public static final String COMMAND_PART = "commandPart";

  public NewProcessBuilderExperssion(SNode node) {
    super(node);
  }

  public Expression getWorkingDirectory() {
    return (Expression) this.getChild(Expression.class, NewProcessBuilderExperssion.WORKING_DIRECTORY);
  }

  public void setWorkingDirectory(Expression node) {
    super.setChild(NewProcessBuilderExperssion.WORKING_DIRECTORY, node);
  }

  public int getCommandPartsCount() {
    return this.getChildCount(NewProcessBuilderExperssion.COMMAND_PART);
  }

  public Iterator<Expression> commandParts() {
    return this.children(Expression.class, NewProcessBuilderExperssion.COMMAND_PART);
  }

  public List<Expression> getCommandParts() {
    return this.getChildren(Expression.class, NewProcessBuilderExperssion.COMMAND_PART);
  }

  public void addCommandPart(Expression node) {
    this.addChild(NewProcessBuilderExperssion.COMMAND_PART, node);
  }

  public void insertCommandPart(Expression prev, Expression node) {
    this.insertChild(prev, NewProcessBuilderExperssion.COMMAND_PART, node);
  }

  public static NewProcessBuilderExperssion newInstance(SModel sm, boolean init) {
    return (NewProcessBuilderExperssion) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.execution.commands.structure.NewProcessBuilderExperssion", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static NewProcessBuilderExperssion newInstance(SModel sm) {
    return NewProcessBuilderExperssion.newInstance(sm, false);
  }
}
