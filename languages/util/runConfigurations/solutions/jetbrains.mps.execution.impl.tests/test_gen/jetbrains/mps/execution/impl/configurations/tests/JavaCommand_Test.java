package jetbrains.mps.execution.impl.configurations.tests;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.util.plugin.run.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import com.intellij.execution.process.ProcessEvent;
import java.util.concurrent.CountDownLatch;
import com.intellij.execution.process.ProcessHandler;
import jetbrains.mps.execution.api.commands.OutputRedirector;
import jetbrains.mps.execution.lib.Java_Command;
import com.intellij.execution.process.ProcessAdapter;
import com.intellij.openapi.util.Key;
import com.intellij.execution.process.ProcessOutputTypes;
import junit.framework.Assert;
import com.intellij.execution.ExecutionException;
import java.util.List;
import java.io.File;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.io.IOException;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

@MPSLaunch
public class JavaCommand_Test extends BaseTransformationTest {
  @Test
  public void test_startJava() throws Throwable {
    this.initTest("${mps_home}/languages/util/runConfigurations/runConfigurations.mpr", "r:00c1e1d0-e3c4-4d43-82f5-4c4f80539a57(jetbrains.mps.execution.impl.configurations.tests@tests)");
    this.runTest("jetbrains.mps.execution.impl.configurations.tests.JavaCommand_Test$TestBody", "test_startJava", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_startJava() throws Exception {
      final ProcessEvent[] failed = new ProcessEvent[1];
      final boolean[] printed = new boolean[1];
      try {
        // todo show progress window 
        final CountDownLatch countDown = new CountDownLatch(1);
        ProcessHandler process = OutputRedirector.redirect(new Java_Command().createProcess(Main.class.getName(), this.getClasspath()), new ProcessAdapter() {
          @Override
          public void processTerminated(ProcessEvent event) {
            countDown.countDown();
          }

          @Override
          public void onTextAvailable(ProcessEvent event, Key key) {
            if (ProcessOutputTypes.STDERR.equals(key)) {
              if (neq_849b2c_a0a0a0b0a1a0c0c0a0(event.getText(), (Main.MESSAGE + "\n"))) {
                failed[0] = event;
              } else {
                printed[0] = true;
              }
            } else if (!(ProcessOutputTypes.SYSTEM.equals(key))) {
              failed[0] = event;
            }
          }
        });
        process.startNotify();
        countDown.await();
        if (failed[0] != null) {
          Assert.fail(failed[0].getText());
        }
        if (!(printed[0])) {
          Assert.fail("Did not print required message!");
        }
      } catch (ExecutionException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      } catch (InterruptedException e) {
        e.printStackTrace();
        Assert.fail(e.getMessage());
      }
    }

    public List<File> getClasspath() {
      Iterable<String> currentClassPath = ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<String>(), System.getProperty("java.class.path").split(File.pathSeparator))).select(new ISelector<String, String>() {
        public String select(String it) {
          try {
            return new File(it).getCanonicalPath();
          } catch (IOException e) {
            return it;
          }
        }
      });
      return Sequence.fromIterable(currentClassPath).where(new IWhereFilter<String>() {
        public boolean accept(String it) {
          return !(it.startsWith(System.getProperty("java.home")));
        }
      }).select(new ISelector<String, File>() {
        public File select(String it) {
          return new File(it);
        }
      }).toListSequence();
    }

    private static boolean neq_849b2c_a0a0a0b0a1a0c0c0a0(Object a, Object b) {
      return !((a != null ?
        a.equals(b) :
        a == b
      ));
    }
  }
}
