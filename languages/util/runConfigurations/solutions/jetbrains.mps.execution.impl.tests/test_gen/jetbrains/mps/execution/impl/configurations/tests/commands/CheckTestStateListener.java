package jetbrains.mps.execution.impl.configurations.tests.commands;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.unitTest.execution.client.TestStateListener;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import java.util.List;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.baseLanguage.unitTest.execution.TestEvent;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class CheckTestStateListener implements TestStateListener {
  private final Set<String> mySuccess = SetSequence.fromSet(new HashSet<String>());
  private final Set<String> myFailed = SetSequence.fromSet(new HashSet<String>());
  private final StringBuilder myMessages = new StringBuilder();

  public CheckTestStateListener(List<ITestNodeWrapper> success, List<ITestNodeWrapper> failed) {
    SetSequence.fromSet(mySuccess).addSequence(ListSequence.fromList(success).select(new ISelector<ITestNodeWrapper, String>() {
      public String select(ITestNodeWrapper it) {
        return it.getName();
      }
    }));
    SetSequence.fromSet(myFailed).addSequence(ListSequence.fromList(failed).select(new ISelector<ITestNodeWrapper, String>() {
      public String select(ITestNodeWrapper it) {
        return it.getName();
      }
    }));
  }

  private void check(TestEvent event, Set<String> collection, String message) {
    final String method = event.getTestMethodName();
    if (SetSequence.fromSet(collection).findFirst(new IWhereFilter<String>() {
      public boolean accept(String it) {
        return eq_bojeyd_a0a0a0a0a0a1a0(it, method);
      }
    }) == null) {
      myMessages.append(message).append(event.getTestCaseName()).append(".").append(method).append("\n");
    }
  }

  public void onLooseTest(String className, String methodName) {
    myMessages.append("Lost test: ").append(className).append(".").append(methodName).append("\n");
  }

  public void onTestFailure(TestEvent event) {
    this.check(event, myFailed, "Unexpected failure: ");
  }

  public void onTestError(TestEvent event) {
    this.check(event, myFailed, "Unexpected error: ");
  }

  public void onTestEnd(TestEvent event) {
    this.check(event, mySuccess, "Unexpected success: ");
  }

  public void onTestStart(TestEvent event) {
  }

  public String getMessages() {
    return myMessages.toString();
  }

  private static boolean eq_bojeyd_a0a0a0a0a0a1a0(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
