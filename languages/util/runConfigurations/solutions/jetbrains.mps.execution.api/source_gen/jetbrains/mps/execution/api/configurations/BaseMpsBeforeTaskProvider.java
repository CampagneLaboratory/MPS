package jetbrains.mps.execution.api.configurations;

/*Generated by MPS */

import com.intellij.execution.BeforeRunTaskProvider;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.intellij.execution.configurations.RunConfiguration;
import com.intellij.openapi.actionSystem.DataContext;
import com.intellij.execution.runners.ExecutionEnvironment;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import java.lang.reflect.Method;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.lang.reflect.InvocationTargetException;
import com.intellij.execution.BeforeRunTask;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.util.Key;
import com.intellij.openapi.project.Project;

public abstract class BaseMpsBeforeTaskProvider<T extends BaseMpsBeforeTaskProvider.BaseMpsBeforeRunTask> extends BeforeRunTaskProvider<T> {
  protected static Log log = LogFactory.getLog(BaseMpsBeforeTaskProvider.class);

  private final String myName;
  private final String myAlias;

  public BaseMpsBeforeTaskProvider(String name) {
    this(name, name);
  }

  public BaseMpsBeforeTaskProvider(String name, String alias) {
    myName = name;
    myAlias = alias;
  }

  protected abstract T createTaskImpl();

  public String getName() {
    return myAlias;
  }

  @Override
  public String getDescription(T task) {
    return myAlias;
  }

  @Override
  public T createTask(RunConfiguration runConfiguration) {
    if (hasExecuteMethod(runConfiguration)) {
      return createTaskImpl();
    }
    return null;
  }

  private boolean hasExecuteMethod(RunConfiguration runConfiguration) {
    try {
      if (getMethod(runConfiguration) != null) {
        return true;
      }
    } catch (NoSuchMethodException e) {
    }
    return false;
  }

  @Override
  public boolean executeTask(DataContext context, RunConfiguration configuration, ExecutionEnvironment env, T task) {
    if (!(configure(configuration, task))) {
      return false;
    }
    try {
      return task.execute(PlatformDataKeys.PROJECT.getData(context));
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("Error during executing provider " + (myAlias + "(" + this.getClass().getName() + ")"), t);
      }
    }
    return false;
  }

  private boolean configure(RunConfiguration runConfiguration, T task) {
    try {
      Method method = getMethod(runConfiguration);
      if (method == null) {
        return false;
      }
      Object[] parameters = (Object[]) method.invoke(runConfiguration);
      Method configureMethod = Sequence.fromIterable(Sequence.fromArray(task.getClass().getMethods())).findFirst(new IWhereFilter<Method>() {
        public boolean accept(Method it) {
          return eq_xh6sei_a0a0a0a0a0a3a0a6(it.getName(), getConfigureMethodName());
        }
      });
      return (Boolean) configureMethod.invoke(task, parameters);
    } catch (NoSuchMethodException e) {
    } catch (InvocationTargetException e) {
      if (log.isErrorEnabled()) {
        log.error("", e);
      }
    } catch (IllegalAccessException e) {
      if (log.isErrorEnabled()) {
        log.error("", e);
      }
    } catch (ClassCastException e) {
      if (log.isErrorEnabled()) {
        log.error("", e);
      }
    }
    return false;
  }

  private Method getMethod(RunConfiguration configuration) throws NoSuchMethodException {
    return configuration.getClass().getMethod(getCreateMethodName(myName));
  }

  @Override
  public boolean isConfigurable() {
    return false;
  }

  @Override
  public boolean configureTask(RunConfiguration runConfiguration, T task) {
    return hasExecuteMethod(runConfiguration);
  }

  public boolean canExecuteTask(RunConfiguration configuration, T task) {
    return true;
  }

  public static String getCreateMethodName(String name) {
    return "create" + name.replace(" ", "") + "Task";
  }

  public static String getConfigureMethodName() {
    return "configure";
  }

  private static boolean eq_xh6sei_a0a0a0a0a0a3a0a6(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  public static abstract class BaseMpsBeforeRunTask<T extends BaseMpsBeforeTaskProvider.BaseMpsBeforeRunTask> extends BeforeRunTask<T> {
    public BaseMpsBeforeRunTask(@NotNull Key<T> providerId) {
      super(providerId);
      setEnabled(true);
    }

    public abstract boolean execute(Project project);
  }
}
