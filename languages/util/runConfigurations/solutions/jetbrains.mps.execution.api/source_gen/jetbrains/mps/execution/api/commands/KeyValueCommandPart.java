package jetbrains.mps.execution.api.commands;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.annotations.Nullable;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.io.File;

public class KeyValueCommandPart implements CommandPart {
  private final List<String> myCommand = ListSequence.fromList(new ArrayList<String>());

  public KeyValueCommandPart(@Nullable String key, @Nullable String value) {
    if (StringUtils.isNotEmpty(key) && StringUtils.isNotEmpty(value)) {
      ListSequence.fromList(myCommand).addElement(key);
      ListSequence.fromList(myCommand).addSequence(Sequence.fromIterable(ProcessHandlerBuilder.splitCommandInParts(value)));
    }
  }

  public KeyValueCommandPart(@Nullable String key, @Nullable File value) {
    if (StringUtils.isNotEmpty(key) && (value != null) && (StringUtils.isNotEmpty(value.getAbsolutePath()))) {
      ListSequence.fromList(myCommand).addElement(key);
      ListSequence.fromList(myCommand).addElement(value.getAbsolutePath());
    }
  }

  public KeyValueCommandPart(@Nullable String key, @Nullable CommandPart value) {
    if (StringUtils.isNotEmpty(key) && (value != null)) {
      List<String> commandList = value.getCommandList();
      if (ListSequence.fromList(commandList).isNotEmpty()) {
        ListSequence.fromList(myCommand).addElement(key);
        ListSequence.fromList(myCommand).addSequence(ListSequence.fromList(commandList));
      }
    }
  }

  public List<String> getCommandList() {
    return myCommand;
  }
}
