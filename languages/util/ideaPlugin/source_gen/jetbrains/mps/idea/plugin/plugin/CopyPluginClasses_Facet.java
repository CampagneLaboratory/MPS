package jetbrains.mps.idea.plugin.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import jetbrains.mps.logging.Logger;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IPropertiesPersistence;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.resources.IPropertiesAccessor;
import java.util.Map;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.resources.TResource;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.ide.ThreadUtils;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.util.FileUtil;
import java.io.File;
import jetbrains.mps.make.script.IConfig;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.make.script.IPropertiesPool;

public class CopyPluginClasses_Facet extends IFacet.Stub {
  private static Logger LOG = Logger.getLogger(CopyPluginClasses_Facet.class);

  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("jetbrains.mps.idea.plugin.CopyPluginClasses");

  public CopyPluginClasses_Facet() {
    ListSequence.fromList(targets).addElement(new CopyPluginClasses_Facet.Target_copyClasses());
  }

  public Iterable<ITarget> targets() {
    return targets;
  }

  public Iterable<IFacet.Name> optional() {
    return null;
  }

  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.baseLanguage.JavaCompile"), new IFacet.Name("jetbrains.mps.lang.core.Make")});
  }

  public Iterable<IFacet.Name> extended() {
    return null;
  }

  public IFacet.Name getName() {
    return this.name;
  }

  public IPropertiesPersistence propertiesPersistence() {
    return new CopyPluginClasses_Facet.TargetProperties();
  }

  public static class Target_copyClasses implements ITarget {
    private static Class<? extends IResource>[] EXPECTED_INPUT = (Class<? extends IResource>[]) new Class[]{IResource.class};
    private static Class<? extends IResource>[] EXPECTED_OUTPUT = (Class<? extends IResource>[]) new Class[]{};

    private ITarget.Name name = new ITarget.Name("jetbrains.mps.idea.plugin.CopyPluginClasses.copyClasses");

    public Target_copyClasses() {
    }

    public IJob createJob() {
      return new IJob.Stub() {
        public IResult execute(final Iterable<IResource> input, final IJobMonitor monitor, final IPropertiesAccessor pa) {
          Iterable<IResource> _output_4wv567_a0a = null;
          switch (0) {
            case 0:
              final Map<IFile, IFile> toCopy = MapSequence.fromMap(new HashMap<IFile, IFile>());

              for (IResource resource : input) {
                TResource tres = (TResource) resource;
                final IFile classesGen = tres.module().getClassesGen();

                String pluginRoot = pa.forResource(tres).properties(Target_copyClasses.this.getName(), CopyPluginClasses_Facet.Target_copyClasses.Parameters.class).ideaPluginRoot();
                if (pluginRoot != null) {
                  final IFile pluginClasses = FileSystem.getInstance().getFileByPath(MacrosFactory.moduleDescriptor(tres.module()).expandPath(pluginRoot, tres.module().getDescriptorFile())).getDescendant("classes");
                  MapSequence.fromMap(toCopy).put(classesGen, pluginClasses);
                } else {
                  LOG.warning("Property null for " + tres.module());
                }

                _output_4wv567_a0a = Sequence.fromIterable(_output_4wv567_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(resource)));
              }
              ThreadUtils.runInUIThreadAndWait(new Runnable() {
                public void run() {
                  ModelAccess.instance().requireWrite(new Runnable() {
                    public void run() {
                      MapSequence.fromMap(toCopy).visitAll(new IVisitor<IMapping<IFile, IFile>>() {
                        public void visit(IMapping<IFile, IFile> it) {
                          IFile dest = it.value();
                          if (dest.exists()) {
                            dest.mkdirs();
                          } else {
                            String to = dest.getPath();
                            LOG.info("Cleaning " + to);
                            for (IFile child : ListSequence.fromList(dest.getChildren())) {
                              child.delete();
                            }
                          }
                        }
                      });
                      MapSequence.fromMap(toCopy).visitAll(new IVisitor<IMapping<IFile, IFile>>() {
                        public void visit(IMapping<IFile, IFile> it) {
                          String from = it.key().getPath();
                          String to = it.value().getPath();
                          LOG.info("Copy " + from + " to " + to);
                          FileUtil.copyDir(new File(from), new File(to));
                        }
                      });
                    }
                  });
                }
              });
            default:
              return new IResult.SUCCESS(_output_4wv567_a0a);
          }
        }
      };
    }

    public IConfig createConfig() {
      return null;
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.baseLanguage.JavaCompile.compile")});
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.Make.make")});
    }

    public ITarget.Name getName() {
      return name;
    }

    public boolean requiresInput() {
      return true;
    }

    public boolean producesOutput() {
      return true;
    }

    public Iterable<Class<? extends IResource>> expectedInput() {
      return Sequence.fromArray(EXPECTED_INPUT);
    }

    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }

    public <T> T createParameters(Class<T> cls) {
      return cls.cast(new Parameters());
    }

    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      if (t != null) {
        ((Tuples._1) t).assign((Tuples._1) copyFrom);
      }
      return t;
    }

    public static class Parameters extends MultiTuple._1<String> {
      public Parameters() {
        super();
      }

      public Parameters(String ideaPluginRoot) {
        super(ideaPluginRoot);
      }

      public String ideaPluginRoot(String value) {
        return super._0(value);
      }

      public String ideaPluginRoot() {
        return super._0();
      }

      @SuppressWarnings(value = "unchecked")
      public CopyPluginClasses_Facet.Target_copyClasses.Parameters assignFrom(Tuples._1<String> from) {
        return (CopyPluginClasses_Facet.Target_copyClasses.Parameters) super.assign(from);
      }
    }
  }

  public static class TargetProperties implements IPropertiesPersistence {
    public TargetProperties() {
    }

    public void storeValues(Map<String, String> store, IPropertiesPool properties) {
      {
        ITarget.Name name = new ITarget.Name("jetbrains.mps.idea.plugin.CopyPluginClasses.copyClasses");
        if (properties.hasProperties(name)) {
          CopyPluginClasses_Facet.Target_copyClasses.Parameters props = properties.properties(name, CopyPluginClasses_Facet.Target_copyClasses.Parameters.class);
          MapSequence.fromMap(store).put("jetbrains.mps.idea.plugin.CopyPluginClasses.copyClasses.ideaPluginRoot", String.valueOf(props.ideaPluginRoot()));
        }
      }
    }

    public void loadValues(Map<String, String> store, IPropertiesPool properties) {
      try {
        {
          ITarget.Name name = new ITarget.Name("jetbrains.mps.idea.plugin.CopyPluginClasses.copyClasses");
          CopyPluginClasses_Facet.Target_copyClasses.Parameters props = properties.properties(name, CopyPluginClasses_Facet.Target_copyClasses.Parameters.class);
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.idea.plugin.CopyPluginClasses.copyClasses.ideaPluginRoot")) {
            props.ideaPluginRoot(String.valueOf(MapSequence.fromMap(store).get("jetbrains.mps.idea.plugin.CopyPluginClasses.copyClasses.ideaPluginRoot")));
          }
        }
      } catch (RuntimeException re) {
      }
    }
  }
}
