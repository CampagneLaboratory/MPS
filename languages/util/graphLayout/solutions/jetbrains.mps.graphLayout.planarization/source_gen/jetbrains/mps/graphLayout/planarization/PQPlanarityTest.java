package jetbrains.mps.graphLayout.planarization;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import java.util.List;
import jetbrains.mps.graphLayout.graph.Edge;
import java.util.Set;
import jetbrains.mps.graphLayout.graph.Graph;
import jetbrains.mps.graphLayout.util.NodeMap;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.ArrayList;
import jetbrains.mps.graphLayout.planarGraph.EmbeddedGraph;
import java.util.Arrays;
import jetbrains.mps.graphLayout.planarGraph.Face;
import java.util.Iterator;
import java.util.HashSet;
import jetbrains.mps.graphLayout.planarGraph.Dart;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;

public class PQPlanarityTest {
  private static int SHOW_LOG = 0;

  private PQTree myTree;
  private Map<Node, List<Edge>> myEdgesOrder;

  public PQPlanarityTest() {
  }

  public Set<Edge> removeEdgesToPlanarity(Graph graph, Map<Node, Integer> stNumbering) {
    myEdgesOrder = new NodeMap<List<Edge>>(graph);
    Set<Edge> removed = SetSequence.<Edge>fromSet(new LinkedHashSet<Edge>());
    if (SHOW_LOG > 0) {
      System.out.println("GRAPH!!! " + graph);
      System.out.println(stNumbering);
    }
    Node[] nodeOrder = new Node[graph.getNumNodes()];
    for (Node node : ListSequence.<Node>fromList(graph.getNodes())) {
      nodeOrder[MapSequence.<Node,Integer>fromMap(stNumbering).get(node)] = node;
    }
    myTree = new PQTree();
    PQNode curPQNode = new PNode(nodeOrder[0], null);
    myTree.setRoot(curPQNode);
    for (int i = 0; i < nodeOrder.length - 1; i++) {
      Node curGraphNode = nodeOrder[i];
      for (Edge edge : ListSequence.<Edge>fromList(curGraphNode.getOutEdges())) {
        PNode node = new PNode(edge.getTarget(), edge);
        curPQNode.addLastChild(node);
      }
      Node nextGraphNode = nodeOrder[i + 1];
      if (SHOW_LOG > 0) {
        System.out.println(myTree);
        System.out.println("next node is: " + nextGraphNode);
      }
      curPQNode = myTree.modifyTree(nextGraphNode);
      PQNode parent = curPQNode.getParent();
      List<Edge> remainingEdges;
      if (parent instanceof QNode) {
        remainingEdges = ((QNode) parent).getEdgesOrder().getInEdgesOrder(nextGraphNode);
      } else {
        remainingEdges = ListSequence.<Edge>fromListAndArray(new ArrayList<Edge>(), ((PNode) curPQNode).getEdge());
      }
      Set<Edge> allInEdges = SetSequence.<Edge>fromSet(new LinkedHashSet<Edge>());
      SetSequence.fromSet(allInEdges).addSequence(ListSequence.<Edge>fromList(nextGraphNode.getEdges(Edge.Direction.BACK)));
      SetSequence.fromSet(allInEdges).removeSequence(ListSequence.<Edge>fromList(remainingEdges));
      SetSequence.fromSet(removed).addSequence(SetSequence.<Edge>fromSet(allInEdges));
    }
    EdgesOrder order = ((QNode) ListSequence.<PQNode>fromList(myTree.getRoot().getChildren()).first()).getEdgesOrder();
    for (Node node : ListSequence.<Node>fromList(graph.getNodes())) {
      MapSequence.<Node,List<Edge>>fromMap(myEdgesOrder).put(node, order.getInEdgesOrder(node));
    }
    if (SHOW_LOG > 0) {
      System.out.println(myTree);
      for (int i = nodeOrder.length - 1; i >= 0; i--) {
        Node node = nodeOrder[i];
        System.out.print("node " + node + ":");
        System.out.print(" in edges: " + order.getInEdgesOrder(node));
        System.out.println(" out edges: " + order.getOutEdgesOrder(node));
      }
      System.out.println("removed edges: ");
      System.out.println(removed);
    }
    return removed;
  }

  public EmbeddedGraph getEmbedding(Graph graph, Map<Node, Integer> stNumbering) {
    if (SHOW_LOG > 0) {
      System.out.println("CONSTRUCTING THE EMBEDDING!!!");
    }
    Set<Edge> edges = removeEdgesToPlanarity(graph, stNumbering);
    if (SetSequence.<Edge>fromSet(edges).count() > 0) {
      throw new RuntimeException("trying to get embedding of nonplanar graph!!!" + edges);
    }
    EdgesOrder order = ((QNode) ListSequence.<PQNode>fromList(myTree.getRoot().getChildren()).first()).getEdgesOrder();
    Node[] nodeOrder = new Node[graph.getNumNodes()];
    for (Node node : ListSequence.<Node>fromList(graph.getNodes())) {
      nodeOrder[MapSequence.<Node,Integer>fromMap(stNumbering).get(node)] = node;
    }
    EmbeddedGraph embeddedGraph;
    /*
      embeddedGraph = createEmbeddedGraph(graph, order, Arrays.asList(nodeOrder));
    */
    embeddedGraph = createEmbeddedGraphFromInEdges(graph, Arrays.asList(nodeOrder));
    if (SHOW_LOG > 0) {
      System.out.println(embeddedGraph);
    }
    return embeddedGraph;
  }

  public EmbeddedGraph createEmbeddedGraph(Graph graph, EdgesOrder order, List<Node> nodeOrder) {
    EmbeddedGraph embeddedGraph = new EmbeddedGraph(graph);
    Node last = ListSequence.<Node>fromList(nodeOrder).last();
    Face outerFace = order.findFace(graph, last, ListSequence.<Edge>fromList(order.getInEdgesOrder(last)).first(), false);
    embeddedGraph.addFace(outerFace);
    embeddedGraph.setOuterFace(outerFace);
    for (Node node : ListSequence.<Node>fromList(nodeOrder).reversedList()) {
      Iterator<Edge> edgeItr = ListSequence.<Edge>fromList(order.getInEdgesOrder(node)).iterator();
      // last edge should not be processed 
      while (edgeItr.hasNext()) {
        Edge edge = edgeItr.next();
        if (edgeItr.hasNext()) {
          embeddedGraph.addFace(order.findFace(graph, node, edge, true));
        }
      }
    }
    return embeddedGraph;
  }

  public EmbeddedGraph createEmbeddedGraphFromInEdges(Graph graph, List<Node> nodeOrder) {
    if (SHOW_LOG > 0) {
      System.out.println("-------------------------");
      System.out.println(myEdgesOrder);
    }
    Set<Node> addedNodes = SetSequence.<Node>fromSet(new HashSet<Node>());
    Set<Edge> addedEdges = SetSequence.<Edge>fromSet(new HashSet<Edge>());
    EmbeddedGraph embeddedGraph = new EmbeddedGraph(graph);
    Face outerFace = new Face(graph);
    Face innerFace = new Face(graph);
    Node first = ListSequence.<Node>fromList(nodeOrder).first();
    Node last = ListSequence.<Node>fromList(nodeOrder).last();
    Node cur = last;
    while (cur != first) {
      SetSequence.fromSet(addedNodes).addElement(cur);
      Edge curEdge = ListSequence.<Edge>fromList(MapSequence.<Node,List<Edge>>fromMap(myEdgesOrder).get(cur)).first();
      Node next = curEdge.getOpposite(cur);
      outerFace.addFirst(new Dart(curEdge, next));
      innerFace.addLast(new Dart(curEdge, cur));
      SetSequence.fromSet(addedEdges).addElement(curEdge);
      cur = next;
    }
    SetSequence.fromSet(addedNodes).addElement(first);
    cur = last;
    while (cur != first) {
      SetSequence.fromSet(addedNodes).addElement(cur);
      Edge curEdge = ListSequence.<Edge>fromList(MapSequence.<Node,List<Edge>>fromMap(myEdgesOrder).get(cur)).last();
      Node next = curEdge.getOpposite(cur);
      outerFace.addLast(new Dart(curEdge, cur));
      innerFace.addFirst(new Dart(curEdge, next));
      SetSequence.fromSet(addedEdges).addElement(curEdge);
      cur = next;
    }
    embeddedGraph.addFace(outerFace);
    embeddedGraph.setOuterFace(outerFace);
    embeddedGraph.addFace(innerFace);
    if (SHOW_LOG > 0) {
      System.out.println(embeddedGraph);
    }
    for (Node node : ListSequence.<Node>fromList(nodeOrder).reversedList()) {
      Edge prev = null;
      for (Edge edge : ListSequence.<Edge>fromList(MapSequence.<Node,List<Edge>>fromMap(myEdgesOrder).get(node))) {
        if (SetSequence.<Edge>fromSet(addedEdges).contains(edge)) {
          prev = edge;
          continue;
        }
        List<Edge> path = ListSequence.<Edge>fromList(new LinkedList<Edge>());
        ListSequence.<Edge>fromList(path).addElement(edge);
        cur = edge.getSource();
        while (!(SetSequence.<Node>fromSet(addedNodes).contains(cur))) {
          SetSequence.fromSet(addedNodes).addElement(cur);
          Edge nextEdge = ListSequence.<Edge>fromList(MapSequence.<Node,List<Edge>>fromMap(myEdgesOrder).get(cur)).first();
          ListSequence.<Edge>fromList(path).insertElement(0, nextEdge);
          cur = nextEdge.getSource();
        }
        if (SHOW_LOG > 0) {
          System.out.println("adding path: " + path);
        }
        Face containingFace;
        if (edge == ListSequence.<Edge>fromList(MapSequence.<Node,List<Edge>>fromMap(myEdgesOrder).get(node)).first()) {
          containingFace = embeddedGraph.getFaceToTheLeft(ListSequence.<Edge>fromList(MapSequence.<Node,List<Edge>>fromMap(myEdgesOrder).get(node)).last());
        } else {
          containingFace = embeddedGraph.getFaceToTheRight(prev);
        }
        if (SHOW_LOG > 0) {
          System.out.println("to face: " + containingFace);
        }
        embeddedGraph.splitFace(containingFace, path, ListSequence.<Edge>fromList(path).first().getSource(), node);
        SetSequence.fromSet(addedEdges).addSequence(ListSequence.<Edge>fromList(path));
        prev = edge;
        if (SHOW_LOG > 0) {
          System.out.println(embeddedGraph);
        }
      }
    }
    return embeddedGraph;
  }
}
