package jetbrains.mps.graphLayout.planarization;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graph.Graph;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.graphLayout.planarGraph.EmbeddedGraph;
import jetbrains.mps.graphLayout.algorithms.ConnectivityComponents;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.graphLayout.algorithms.BiconnectedComponent;
import jetbrains.mps.graphLayout.algorithms.GraphOrientation;
import java.util.Set;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashMap;
import jetbrains.mps.graphLayout.planarGraph.Face;
import jetbrains.mps.graphLayout.planarGraph.Dart;
import java.util.ArrayList;

public class PQPlanarizationFinder implements IEmbeddingFinder {
  private static int SHOW_LOG = 0;

  private Graph myGraph;
  private Map<Node, Integer> myNumbering;

  public PQPlanarizationFinder() {
  }

  public EmbeddedGraph find(Graph graph) {
    Map<Node, Integer> components = ConnectivityComponents.getComponents(graph);
    for (Node node : ListSequence.<Node>fromList(graph.getNodes())) {
      if (MapSequence.<Node,Integer>fromMap(components).get(node) != 0) {
        throw new RuntimeException("graph isn't connected!!!");
      }
    }
    myGraph = graph;
    BiconnectedComponent componentsTree = BiconnectedComponent.createTree(graph);
    if (SHOW_LOG > 0) {
      System.out.println(componentsTree.toString(""));
    }
    return createEmbedding(componentsTree);
    /*

      myNumbering = GraphOrientation.orientST(graph);
      PQPlanarityTest pqPlanarityTest = new PQPlanarityTest();
      Set<Edge> removed = pqPlanarityTest.removeEdgesToPlanarity(graph, myNumbering);
      if (SHOW_LOG > 0) {
        System.out.println("removed edges:");
        System.out.println(removed);
      }
      if (SetSequence.<Edge>fromSet(removed).count() == 0) {
        return pqPlanarityTest.getEmbedding(graph, myNumbering);
      } else {
        for (Edge edge : SetSequence.<Edge>fromSet(removed)) {
          edge.removeFromGraph();
        }
        BiconnectedComponent tree = BiconnectedComponent.createTree(graph);
        if (SHOW_LOG > 0) {
          System.out.println(tree.toString(""));
        }
        EmbeddedGraph embeddedGraph = createEmbedding(tree);
        for (Edge edge : SetSequence.<Edge>fromSet(removed)) {
          edge.addToGraph();
        }
        return embeddedGraph;
      }
    */
  }

  private EmbeddedGraph createEmbedding(BiconnectedComponent component) {
    Graph componentGraph = new Graph();
    Set<Node> nodes = component.getNodes();
    EmbeddedGraph graphEmbedding = new EmbeddedGraph(myGraph);
    boolean manyNodeComponent = SetSequence.<Node>fromSet(nodes).count() > 1;
    if (manyNodeComponent) {
      Map<Node, Node> nodeMap = MapSequence.<Node,Node>fromMap(new HashMap<Node, Node>());
      Map<Node, Node> invertedNodeMap = MapSequence.<Node,Node>fromMap(new HashMap<Node, Node>());
      Map<Edge, Edge> invertedEdgeMap = MapSequence.<Edge,Edge>fromMap(new HashMap<Edge, Edge>());
      for (Node node : SetSequence.<Node>fromSet(nodes)) {
        Node componentNode = componentGraph.createNode();
        MapSequence.<Node,Node>fromMap(nodeMap).put(node, componentNode);
        MapSequence.<Node,Node>fromMap(invertedNodeMap).put(componentNode, node);
      }
      for (Node node : SetSequence.<Node>fromSet(component.getNodes())) {
        for (Edge edge : ListSequence.<Edge>fromList(node.getEdges(Edge.Direction.FRONT))) {
          Node target = edge.getTarget();
          if (SetSequence.<Node>fromSet(nodes).contains(target)) {
            Edge newEdge = componentGraph.connect(MapSequence.<Node,Node>fromMap(nodeMap).get(node), MapSequence.<Node,Node>fromMap(nodeMap).get(target));
            MapSequence.<Edge,Edge>fromMap(invertedEdgeMap).put(newEdge, edge);
          }
        }
      }
      if (SHOW_LOG > 0) {
        System.out.println("COMPONENT!!! " + componentGraph.getNumNodes() + "  : " + ListSequence.<Edge>fromList(componentGraph.getEdges()).count());
        System.out.println("map: " + nodeMap);
      }
      PQPlanarityTest pqPlanarityTest = new PQPlanarityTest();
      Set<Edge> removed = pqPlanarityTest.removeEdgesToPlanarity(componentGraph, GraphOrientation.orientST(componentGraph));
      EmbeddedGraph componentEmbedding;
      if (SetSequence.<Edge>fromSet(removed).count() == 0) {
        componentEmbedding = pqPlanarityTest.getEmbedding(componentGraph, GraphOrientation.orientST(componentGraph));
      } else {
        for (Edge edge : SetSequence.<Edge>fromSet(removed)) {
          componentGraph.removeEdge(edge);
        }
        BiconnectedComponent tree = BiconnectedComponent.createTree(componentGraph);
        componentEmbedding = createEmbedding(tree);
        for (Edge edge : SetSequence.<Edge>fromSet(removed)) {
          componentGraph.addEdge(edge);
        }
      }
      for (Face componentFace : ListSequence.<Face>fromList(componentEmbedding.getFaces())) {
        Face graphFace = new Face(myGraph);
        for (Dart dart : ListSequence.<Dart>fromList(componentFace.getDarts())) {
          graphFace.addLast(new Dart(MapSequence.<Edge,Edge>fromMap(invertedEdgeMap).get(dart.getEdge()), MapSequence.<Node,Node>fromMap(invertedNodeMap).get(dart.getSource())));
        }
        graphEmbedding.addFace(graphFace);
        if (componentEmbedding.isOuterFace(componentFace)) {
          graphEmbedding.setOuterFace(graphFace);
        }
      }
    } else {
      Face fakeFace = new Face(myGraph);
      graphEmbedding.addFace(fakeFace);
      graphEmbedding.setOuterFace(fakeFace);
    }
    for (BiconnectedComponent child : ListSequence.<BiconnectedComponent>fromList(component.getChildren())) {
      EmbeddedGraph childEmbedding = createEmbedding(child);
      Object connection = component.getConnection(child);
      Edge bridge = null;
      if (connection instanceof Edge) {
        bridge = ((Edge) connection);
      }
      Node cutpoint = component.getCutpoint(child);
      Node childCutpoint = component.getChildCutpoint(child);
      Face outerChildFace;
      if (ListSequence.<Face>fromList(childEmbedding.getFaces()).count() > 1) {
        outerChildFace = childEmbedding.findContainingFace(ListSequence.<Node>fromListAndArray(new ArrayList<Node>(), childCutpoint));
      } else {
        outerChildFace = childEmbedding.getOuterFace();
      }
      if (bridge != null) {
        // outerChildFace can be fake 
        if (ListSequence.<Dart>fromList(outerChildFace.getDarts()).count() > 0) {
          outerChildFace.makeEndsWith(bridge.getOpposite(cutpoint));
        }
        childEmbedding.addLastDart(outerChildFace, new Dart(bridge, bridge.getOpposite(cutpoint)));
        childEmbedding.addLastDart(outerChildFace, new Dart(bridge, cutpoint));
      }
      if (!(manyNodeComponent)) {
        graphEmbedding = childEmbedding;
        manyNodeComponent = true;
      } else {
        Face face = graphEmbedding.findContainingFace(ListSequence.<Node>fromListAndArray(new ArrayList<Node>(), cutpoint));
        boolean isOuter = graphEmbedding.isOuterFace(face);
        graphEmbedding.removeFace(face);
        childEmbedding.removeFace(outerChildFace);
        Face newFace = new Face(myGraph);
        for (Dart dart : ListSequence.<Dart>fromList(face.makeEndsWith(cutpoint))) {
          newFace.addLast(dart);
        }
        for (Dart dart : ListSequence.<Dart>fromList(outerChildFace.makeEndsWith(cutpoint))) {
          newFace.addLast(dart);
        }
        graphEmbedding.addFace(newFace);
        if (isOuter) {
          graphEmbedding.setOuterFace(newFace);
        }
        for (Face childFace : ListSequence.<Face>fromList(childEmbedding.getFaces())) {
          graphEmbedding.addFace(childFace);
        }
      }
    }
    return graphEmbedding;
  }
}
