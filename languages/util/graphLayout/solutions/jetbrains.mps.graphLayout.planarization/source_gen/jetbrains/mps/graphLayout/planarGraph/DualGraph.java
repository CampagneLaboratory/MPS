package jetbrains.mps.graphLayout.planarGraph;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graph.Graph;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.List;

public class DualGraph extends Graph {
  private EmbeddedGraph myEmbeddedGraph;
  private Map<Node, Face> myFacesMap;
  private Map<Face, Node> myNodesMap;
  private Map<Edge, Edge> myEdgesMap;

  public DualGraph(EmbeddedGraph graph) {
    super();
    myEmbeddedGraph = graph;
    myEdgesMap = MapSequence.<Edge,Edge>fromMap(new HashMap<Edge, Edge>());
    compute();
  }

  private void compute() {
    myNodesMap = MapSequence.<Face,Node>fromMap(new HashMap<Face, Node>());
    myFacesMap = MapSequence.<Node,Face>fromMap(new HashMap<Node, Face>());
    for (Face face : ListSequence.<Face>fromList(myEmbeddedGraph.getFaces())) {
      Node node = createNode();
      MapSequence.<Face,Node>fromMap(myNodesMap).put(face, node);
      MapSequence.<Node,Face>fromMap(myFacesMap).put(node, face);
    }
    for (Edge edge : SetSequence.<Edge>fromSet(myEmbeddedGraph.getEdges())) {
      List<Face> faces = myEmbeddedGraph.getAdjacentFaces(edge);
      Node faceNode1 = MapSequence.<Face,Node>fromMap(myNodesMap).get(ListSequence.<Face>fromList(faces).getElement(0));
      Node faceNode2 = MapSequence.<Face,Node>fromMap(myNodesMap).get(ListSequence.<Face>fromList(faces).getElement(1));
      Edge faceEdge = connect(faceNode1, faceNode2);
      MapSequence.<Edge,Edge>fromMap(myEdgesMap).put(faceEdge, edge);
    }
  }

  public Node addRealNode(Node realNode) {
    Node newNode = this.createDummyNode();
    for (Edge edge : ListSequence.<Edge>fromList(realNode.getEdges())) {
      for (Face face : ListSequence.<Face>fromList(myEmbeddedGraph.getAdjacentFaces(edge))) {
        connect(newNode, MapSequence.<Face,Node>fromMap(getNodesMap()).get(face));
      }
    }
    return newNode;
  }

  public EmbeddedGraph getEmbeddedGraph() {
    return this.myEmbeddedGraph;
  }

  public Map<Node, Face> getFacesMap() {
    return this.myFacesMap;
  }

  public Map<Face, Node> getNodesMap() {
    return this.myNodesMap;
  }

  public Map<Edge, Edge> getEdgesMap() {
    return this.myEdgesMap;
  }

  public void removeFromGraph(Edge edge) {
    removeEdge(edge);
    MapSequence.fromMap(myEdgesMap).removeKey(edge);
  }

  public Edge addEdge(Node source, Node target, Edge realEdge) {
    Edge edge = connect(source, target);
    MapSequence.<Edge,Edge>fromMap(myEdgesMap).put(edge, realEdge);
    return edge;
  }
}
