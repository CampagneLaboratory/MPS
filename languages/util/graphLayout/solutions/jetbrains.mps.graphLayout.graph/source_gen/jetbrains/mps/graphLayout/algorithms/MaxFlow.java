package jetbrains.mps.graphLayout.algorithms;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.graphLayout.graph.Graph;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;

public class MaxFlow {
  public static Map<Edge, Integer> getFlow(Graph graph, Node source, Node target, Map<Edge, Integer> initialCapacity) {
    Map<Edge, Integer> flow = MapSequence.<Edge,Integer>fromMap(new HashMap<Edge, Integer>());
    Map<Edge, Edge> opposite = MapSequence.<Edge,Edge>fromMap(new HashMap<Edge, Edge>());
    final Map<Edge, Integer> capacity = MapSequence.<Edge,Integer>fromMap(new HashMap<Edge, Integer>());
    Set<Edge> dummyEdges = SetSequence.<Edge>fromSet(new HashSet<Edge>());
    for (Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
      MapSequence.<Edge,Integer>fromMap(capacity).put(edge, MapSequence.<Edge,Integer>fromMap(initialCapacity).get(edge));
      MapSequence.<Edge,Integer>fromMap(flow).put(edge, 0);
      Edge oppositeEdge = graph.connect(edge.getTarget(), edge.getSource());
      MapSequence.<Edge,Edge>fromMap(opposite).put(edge, oppositeEdge);
      MapSequence.<Edge,Edge>fromMap(opposite).put(oppositeEdge, edge);
      MapSequence.<Edge,Integer>fromMap(capacity).put(oppositeEdge, 0);
      SetSequence.fromSet(dummyEdges).addElement(oppositeEdge);
    }
    boolean hasPath = true;
    while (hasPath) {
      List<Edge> path = ShortestPath.getPath(graph, source, target, Edge.Direction.FRONT, new _FunctionTypes._return_P1_E0<Boolean, Edge>() {
        public Boolean invoke(Edge edge) {
          return MapSequence.<Edge,Integer>fromMap(capacity).get(edge) > 0;
        }
      });
      if (path == null) {
        hasPath = false;
      } else {
        int minCapacity = Integer.MAX_VALUE;
        for (Edge edge : ListSequence.<Edge>fromList(path)) {
          minCapacity = Math.min(minCapacity, MapSequence.<Edge,Integer>fromMap(capacity).get(edge));
        }
        for (Edge edge : ListSequence.<Edge>fromList(path)) {
          if (SetSequence.<Edge>fromSet(dummyEdges).contains(edge)) {
            Edge realEdge = MapSequence.<Edge,Edge>fromMap(opposite).get(edge);
            MapSequence.<Edge,Integer>fromMap(flow).put(realEdge, MapSequence.<Edge,Integer>fromMap(flow).get(realEdge) - minCapacity);
            MapSequence.<Edge,Integer>fromMap(capacity).put(realEdge, MapSequence.<Edge,Integer>fromMap(capacity).get(realEdge) + minCapacity);
            MapSequence.<Edge,Integer>fromMap(capacity).put(edge, MapSequence.<Edge,Integer>fromMap(flow).get(realEdge));
          } else {
            MapSequence.<Edge,Integer>fromMap(flow).put(edge, MapSequence.<Edge,Integer>fromMap(flow).get(edge) + minCapacity);
            MapSequence.<Edge,Integer>fromMap(capacity).put(edge, MapSequence.<Edge,Integer>fromMap(capacity).get(edge) - minCapacity);
            MapSequence.<Edge,Integer>fromMap(capacity).put(MapSequence.<Edge,Edge>fromMap(opposite).get(edge), MapSequence.<Edge,Integer>fromMap(flow).get(edge));
          }
        }
      }
    }
    for (Edge edge : SetSequence.<Edge>fromSet(dummyEdges)) {
      graph.removeEdge(edge);
    }
    return flow;
  }
}
