package jetbrains.mps.graphLayout.algorithms;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.graphLayout.graph.Graph;
import java.util.List;
import jetbrains.mps.graphLayout.util.NodeMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.graphLayout.graph.Edge;

public class TopologicalNumbering {
  private TopologicalNumbering() {
  }

  public static Map<Node, Integer> number(Graph graph) throws IllegalArgumentException {
    List<Node> sorting = TopologicalSorting.sort(graph);
    if (sorting == null) {
      throw new IllegalArgumentException("input graph must be acyclic");
    }
    Map<Node, Integer> numbering = new NodeMap<Integer>(graph);
    for (Node node : ListSequence.<Node>fromList(graph.getNodes())) {
      MapSequence.<Node,Integer>fromMap(numbering).put(node, 0);
    }
    for (Node node : ListSequence.<Node>fromList(sorting)) {
      for (Edge edge : ListSequence.<Edge>fromList(node.getOutEdges())) {
        Node target = edge.getTarget();
        MapSequence.<Node,Integer>fromMap(numbering).put(target, Math.max(MapSequence.<Node,Integer>fromMap(numbering).get(target), MapSequence.<Node,Integer>fromMap(numbering).get(node) + 1));
      }
    }
    return numbering;
  }
}
