package jetbrains.mps.graphLayout.stOrthogonalLayout;

/*Generated by MPS */

import jetbrains.mps.graphLayout.planarGraph.STPlanarGraph;
import jetbrains.mps.graphLayout.graph.Graph;
import jetbrains.mps.graphLayout.planarGraph.DualGraph;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.graphLayout.intGeom2D.Rectangle;
import jetbrains.mps.graphLayout.intGeom2D.Dimension;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.graphLayout.algorithms.WeightedTopologicalNumbering;
import jetbrains.mps.graphLayout.planarGraph.Face;
import jetbrains.mps.graphLayout.util.NodeMap;

public class ConstraintsSupporter {
  private STPlanarGraph myStPlanarGraph;
  private Graph myModifiedGraph;
  private DualGraph myModifiedDualGraph;
  private Map<Node, Node> myInNode;
  private Map<Node, Node> myOutNode;
  private Map<Node, Edge> myFakeEdges;
  private Map<Node, Edge> myFakeDualEdges;
  private Map<Edge, Edge> myEdgesMap;
  private Map<Node, Integer> myHorNumbering;
  private Map<Node, Integer> myVerNumbering;
  private int myMinEdgeXDistance = 10;
  private int myMinEdgeYDistance = 10;

  public ConstraintsSupporter() {
  }

  public Map<Object, Rectangle> getRepresentation(STPlanarGraph stPlanarGraph, Map<Node, Dimension> nodeConstraints, Map<Edge, Dimension> edgeConstraints) {
    myStPlanarGraph = stPlanarGraph;
    Graph graph = myStPlanarGraph.getGraph();
    myModifiedGraph = splitNodes(graph);
    myModifiedDualGraph = modifyDualGraph(stPlanarGraph);
    Map<Edge, Integer> edgeWeights = MapSequence.<Edge,Integer>fromMap(new HashMap<Edge, Integer>());
    for (Node node : ListSequence.<Node>fromList(graph.getNodes())) {
      MapSequence.<Edge,Integer>fromMap(edgeWeights).put(MapSequence.<Node,Edge>fromMap(myFakeEdges).get(node), MapSequence.<Node,Dimension>fromMap(nodeConstraints).get(node).height);
    }
    for (Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
      MapSequence.<Edge,Integer>fromMap(edgeWeights).put(MapSequence.<Edge,Edge>fromMap(myEdgesMap).get(edge), MapSequence.<Edge,Dimension>fromMap(edgeConstraints).get(edge).height);
    }
    Map<Edge, Integer> dualEdgeWeights = MapSequence.<Edge,Integer>fromMap(new HashMap<Edge, Integer>());
    for (Node node : ListSequence.<Node>fromList(graph.getNodes())) {
      MapSequence.<Edge,Integer>fromMap(dualEdgeWeights).put(MapSequence.<Node,Edge>fromMap(myFakeDualEdges).get(node), MapSequence.<Node,Dimension>fromMap(nodeConstraints).get(node).width);
    }
    for (Edge edge : ListSequence.<Edge>fromList(myModifiedDualGraph.getEdges())) {
      Edge realEdge = MapSequence.<Edge,Edge>fromMap(myModifiedDualGraph.getEdgesMap()).get(edge);
      Dimension dimension = MapSequence.<Edge,Dimension>fromMap(edgeConstraints).get(realEdge);
      // dimension is null only for fake dual edges 
      if (dimension != null) {
        MapSequence.<Edge,Integer>fromMap(dualEdgeWeights).put(edge, dimension.width);
      }
    }
    myVerNumbering = WeightedTopologicalNumbering.number(myModifiedGraph, edgeWeights);
    myHorNumbering = WeightedTopologicalNumbering.number(myModifiedDualGraph, dualEdgeWeights);
    Map<Object, Rectangle> representation = MapSequence.<Object,Rectangle>fromMap(new HashMap<Object, Rectangle>());
    for (Node node : ListSequence.<Node>fromList(graph.getNodes())) {
      MapSequence.<Object,Rectangle>fromMap(representation).put(node, getRectangle(node, MapSequence.<Node,Edge>fromMap(myFakeEdges).get(node)));
    }
    for (Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
      MapSequence.<Object,Rectangle>fromMap(representation).put(edge, getRectangle(edge, MapSequence.<Edge,Edge>fromMap(myEdgesMap).get(edge)));
    }
    return representation;
  }

  private Rectangle getRectangle(Object graphObject, Edge fakeEdge) {
    Face leftFace = myStPlanarGraph.getLeftFace(graphObject);
    int minX = MapSequence.<Node,Integer>fromMap(myHorNumbering).get(MapSequence.<Face,Node>fromMap(myModifiedDualGraph.getNodesMap()).get(leftFace));
    int maxX = this.getMaxX(graphObject);
    int minY = MapSequence.<Node,Integer>fromMap(myVerNumbering).get(fakeEdge.getSource());
    int maxY = MapSequence.<Node,Integer>fromMap(myVerNumbering).get(fakeEdge.getTarget());
    return new Rectangle(minX, minY, maxX - minX, maxY - minY);
  }

  private int getMaxX(Object graphObject) {
    Face rightFace = myStPlanarGraph.getRightFace(graphObject);
    int maxX = MapSequence.<Node,Integer>fromMap(myHorNumbering).get(MapSequence.<Face,Node>fromMap(myModifiedDualGraph.getNodesMap()).get(rightFace));
    Face outerFace = myStPlanarGraph.getEmbeddedGraph().getOuterFace();
    Node dualTarget = myModifiedDualGraph.getNode(myModifiedDualGraph.getNumNodes() - 1);
    if (rightFace == outerFace) {
      maxX = MapSequence.<Node,Integer>fromMap(myHorNumbering).get(dualTarget);
    }
    return maxX;
  }

  private DualGraph modifyDualGraph(STPlanarGraph stPlanarGraph) {
    myFakeDualEdges = MapSequence.<Node,Edge>fromMap(new HashMap<Node, Edge>());
    DualGraph dualGraph = stPlanarGraph.getModifiedDualGraph();
    Face outerFace = stPlanarGraph.getEmbeddedGraph().getOuterFace();
    Node dualSource = MapSequence.<Face,Node>fromMap(dualGraph.getNodesMap()).get(outerFace);
    Node dualTarget = dualGraph.getNode(dualGraph.getNumNodes() - 1);
    for (Node node : ListSequence.<Node>fromList(stPlanarGraph.getGraph().getNodes())) {
      Face leftFace = stPlanarGraph.getLeftFace(node);
      Node dualLeft;
      if (leftFace == outerFace) {
        dualLeft = dualSource;
      } else {
        dualLeft = MapSequence.<Face,Node>fromMap(dualGraph.getNodesMap()).get(leftFace);
      }
      Face rightFace = stPlanarGraph.getRightFace(node);
      Node dualRight;
      if (rightFace == outerFace) {
        dualRight = dualTarget;
      } else {
        dualRight = MapSequence.<Face,Node>fromMap(dualGraph.getNodesMap()).get(rightFace);
      }
      MapSequence.<Node,Edge>fromMap(myFakeDualEdges).put(node, dualGraph.addEdge(dualLeft, dualRight, MapSequence.<Node,Edge>fromMap(myFakeEdges).get(node)));
    }
    return dualGraph;
  }

  private Graph splitNodes(Graph graph) {
    myInNode = new NodeMap<Node>(graph);
    myOutNode = new NodeMap<Node>(graph);
    myFakeEdges = new NodeMap<Edge>(graph);
    myEdgesMap = MapSequence.<Edge,Edge>fromMap(new HashMap<Edge, Edge>());
    Graph modifiedGraph = new Graph();
    for (Node node : ListSequence.<Node>fromList(graph.getNodes())) {
      MapSequence.<Node,Node>fromMap(myInNode).put(node, modifiedGraph.createNode());
      MapSequence.<Node,Node>fromMap(myOutNode).put(node, modifiedGraph.createNode());
      MapSequence.<Node,Edge>fromMap(myFakeEdges).put(node, modifiedGraph.connect(MapSequence.<Node,Node>fromMap(myInNode).get(node), MapSequence.<Node,Node>fromMap(myOutNode).get(node)));
    }
    for (Edge edge : ListSequence.<Edge>fromList(graph.getEdges())) {
      MapSequence.<Edge,Edge>fromMap(myEdgesMap).put(edge, modifiedGraph.connect(MapSequence.<Node,Node>fromMap(myOutNode).get(edge.getSource()), MapSequence.<Node,Node>fromMap(myInNode).get(edge.getTarget())));
    }
    return modifiedGraph;
  }

  public void setMinEdgeDistance(int x, int y) {
    myMinEdgeXDistance = x;
    myMinEdgeYDistance = y;
  }
}
