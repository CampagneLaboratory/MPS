package jetbrains.mps.graphLayout.stOrthogonalLayout;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graphLayout.GraphLayout;
import jetbrains.mps.graphLayout.graph.IEdge;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.graphLayout.graph.Edge;
import java.util.List;
import jetbrains.mps.graphLayout.intGeom2D.Point;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.graphLayout.intGeom2D.Util1D;
import jetbrains.mps.graphLayout.intGeom2D.GeomUtil;
import jetbrains.mps.graphLayout.intGeom2D.Rectangle;
import jetbrains.mps.graphLayout.graph.INode;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class LayoutOptimizer {
  private GraphLayout myLayout;

  private LayoutOptimizer(GraphLayout layout) {
    myLayout = layout;
  }

  private void optimize() {
    boolean foundOptimize = true;
    while (foundOptimize) {
      foundOptimize = false;
      myLayout.refineEdgeLayout();
      for (IEdge edge : SetSequence.<IEdge>fromSet(MapSequence.fromMap(myLayout.getEdgeLayout()).keySet())) {
        Edge myEdge = ((Edge) edge);
        List<Point> path = myLayout.getEdgeLayout(edge);
        for (int i = 0; i < ListSequence.<Point>fromList(path).count() - 3; i++) {
          List<Point> chain = ListSequence.<Point>fromList(new ArrayList<Point>());
          ListSequence.<Point>fromList(chain).addElement(ListSequence.<Point>fromList(path).getElement(i));
          ListSequence.<Point>fromList(chain).addElement(ListSequence.<Point>fromList(path).getElement(i + 1));
          ListSequence.<Point>fromList(chain).addElement(ListSequence.<Point>fromList(path).getElement(i + 2));
          ListSequence.<Point>fromList(chain).addElement(ListSequence.<Point>fromList(path).getElement(i + 3));
          List<Point> newChain = tryChain(chain, myEdge);
          if (newChain != null) {
            foundOptimize = true;
            List<Point> temp = ListSequence.<Point>fromList(new ArrayList<Point>());
            ListSequence.<Point>fromList(temp).addSequence(ListSequence.<Point>fromList(path).subListSequence(0, i));
            ListSequence.<Point>fromList(temp).addSequence(ListSequence.<Point>fromList(newChain));
            ListSequence.<Point>fromList(temp).addSequence(ListSequence.<Point>fromList(path).subListSequence(i + 4, ListSequence.<Point>fromList(path).count()));
            myLayout.setLayoutFor(edge, temp);
            break;
          }
        }
      }
    }
  }

  private List<Point> tryChain(List<Point> chain, Edge edge) {
    boolean verMid = ListSequence.<Point>fromList(chain).getElement(1).x == ListSequence.<Point>fromList(chain).getElement(2).x;
    boolean zLike;
    if (verMid) {
      zLike = Util1D.insideOpenSegment(ListSequence.<Point>fromList(chain).getElement(0).x, ListSequence.<Point>fromList(chain).getElement(3).x, ListSequence.<Point>fromList(chain).getElement(1).x);
    } else {
      zLike = Util1D.insideOpenSegment(ListSequence.<Point>fromList(chain).getElement(0).y, ListSequence.<Point>fromList(chain).getElement(3).y, ListSequence.<Point>fromList(chain).getElement(1).y);
    }
    if (zLike) {
      if (testRect(GeomUtil.getRectangle(ListSequence.<Point>fromList(chain).getElement(0), ListSequence.<Point>fromList(chain).getElement(2)), edge)) {
        return getChain(ListSequence.<Point>fromList(chain).getElement(0), ListSequence.<Point>fromList(chain).getElement(2), ListSequence.<Point>fromList(chain).getElement(3));
      }
      if (testRect(GeomUtil.getRectangle(ListSequence.<Point>fromList(chain).getElement(1), ListSequence.<Point>fromList(chain).getElement(3)), edge)) {
        return ListSequence.<Point>fromList(getChain(ListSequence.<Point>fromList(chain).getElement(3), ListSequence.<Point>fromList(chain).getElement(1), ListSequence.<Point>fromList(chain).getElement(0))).reversedList();
      }
    } else {
      Rectangle first = GeomUtil.getRectangle(ListSequence.<Point>fromList(chain).getElement(0), ListSequence.<Point>fromList(chain).getElement(2));
      Rectangle second = GeomUtil.getRectangle(ListSequence.<Point>fromList(chain).getElement(1), ListSequence.<Point>fromList(chain).getElement(3));
      boolean firstSmaller = first.height <= second.height && first.width <= second.width;
      if (firstSmaller) {
        if (testRect(first, edge)) {
          return getChain(ListSequence.<Point>fromList(chain).getElement(0), ListSequence.<Point>fromList(chain).getElement(2), ListSequence.<Point>fromList(chain).getElement(3));
        }
      } else {
        if (testRect(second, edge)) {
          return ListSequence.<Point>fromList(getChain(ListSequence.<Point>fromList(chain).getElement(3), ListSequence.<Point>fromList(chain).getElement(1), ListSequence.<Point>fromList(chain).getElement(0))).reversedList();
        }
      }
    }
    return null;
  }

  public List<Point> getChain(Point begin, Point mid, Point end) {
    List<Point> chain = ListSequence.<Point>fromList(new ArrayList<Point>());
    ListSequence.<Point>fromList(chain).addElement(begin);
    if (mid.x == end.x) {
      ListSequence.<Point>fromList(chain).addElement(new Point(mid.x, begin.y));
    } else {
      ListSequence.<Point>fromList(chain).addElement(new Point(begin.x, mid.y));
    }
    ListSequence.<Point>fromList(chain).addElement(end);
    return chain;
  }

  private boolean testRect(Rectangle rect, Edge edge) {
    for (INode node : SetSequence.<INode>fromSet(MapSequence.fromMap(myLayout.getNodeLayout()).keySet())) {
      Node myNode = ((Node) node);
      if (ListSequence.<Node>fromList(edge.getAdjacentNodes()).contains(myNode)) {
        continue;
      }
      Rectangle nodeRect = myLayout.getNodeLayout(node);
      if (isInsideAndNotACorner(nodeRect.x, nodeRect.y, rect)) {
        return false;
      }
      if (isInsideAndNotACorner(nodeRect.x, nodeRect.y + nodeRect.height, rect)) {
        return false;
      }
      if (isInsideAndNotACorner(nodeRect.x + nodeRect.width, nodeRect.y, rect)) {
        return false;
      }
      if (isInsideAndNotACorner(nodeRect.x + nodeRect.width, nodeRect.y + nodeRect.height, rect)) {
        return false;
      }
    }
    for (List<Point> path : Sequence.<List<Point>>fromIterable(MapSequence.fromMap(myLayout.getEdgeLayout()).values())) {
      for (Point p : ListSequence.<Point>fromList(path)) {
        if (isInsideAndNotACorner(p.x, p.y, rect)) {
          return false;
        }
      }
    }
    for (Rectangle labelRect : Sequence.<Rectangle>fromIterable(MapSequence.fromMap(myLayout.getLabelLayout()).values())) {
      if (Util1D.intersects(labelRect.x, labelRect.x + labelRect.width, rect.x, rect.x + rect.width) && Util1D.intersects(labelRect.y, labelRect.y + labelRect.height, rect.y, rect.y + rect.height)) {
        return false;
      }
    }
    return true;
  }

  private boolean isInsideAndNotACorner(int x, int y, Rectangle rect) {
    boolean insideX = Util1D.insideClosedSegment(rect.x, rect.x + rect.width, x);
    boolean insideY = Util1D.insideClosedSegment(rect.y, rect.y + rect.height, y);
    if (insideX && insideY) {
      boolean notX = x != rect.x && x != rect.x + rect.width;
      boolean notY = y != rect.y && y != rect.y + rect.height;
      return notX || notY;
    }
    return false;
  }

  public static void optimizeEdges(GraphLayout layout) {
    new LayoutOptimizer(layout).optimize();
  }
}
