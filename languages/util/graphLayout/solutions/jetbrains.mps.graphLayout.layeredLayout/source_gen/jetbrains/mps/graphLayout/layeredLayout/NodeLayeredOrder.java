package jetbrains.mps.graphLayout.layeredLayout;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.graphLayout.graph.Node;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Graph;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.graphLayout.util.NodeMap;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.Iterator;

public class NodeLayeredOrder {
  private List<List<Node>> myLayeredOrder;
  private Map<Node, Integer> myPosInLayer;
  private Graph myGraph;

  public NodeLayeredOrder(Graph graph) {
    myGraph = graph;
    myLayeredOrder = ListSequence.<List<Node>>fromList(new ArrayList<List<Node>>());
    myPosInLayer = new NodeMap<Integer>(graph);
  }

  public void addLast(Node node, int layer) {
    if (ListSequence.<List<Node>>fromList(myLayeredOrder).count() <= layer) {
      for (int i = ListSequence.<List<Node>>fromList(myLayeredOrder).count(); i <= layer; i++) {
        ListSequence.<List<Node>>fromList(myLayeredOrder).addElement(ListSequence.<Node>fromList(new ArrayList<Node>()));
      }
    }
    MapSequence.<Node,Integer>fromMap(myPosInLayer).put(node, ListSequence.<Node>fromList(ListSequence.<List<Node>>fromList(myLayeredOrder).getElement(layer)).count());
    ListSequence.<Node>fromList(ListSequence.<List<Node>>fromList(myLayeredOrder).getElement(layer)).addElement(node);
  }

  public void setLayer(List<Node> nodes, int layer) {
    ListSequence.<List<Node>>fromList(myLayeredOrder).setElement(layer, nodes);
    for (int i = 0; i < ListSequence.<Node>fromList(nodes).count(); i++) {
      MapSequence.<Node,Integer>fromMap(myPosInLayer).put(ListSequence.<Node>fromList(nodes).getElement(i), i);
    }
  }

  public void set(int layer, Node node, int pos) {
    ListSequence.<Node>fromList(ListSequence.<List<Node>>fromList(myLayeredOrder).getElement(layer)).setElement(pos, node);
    MapSequence.<Node,Integer>fromMap(myPosInLayer).put(node, pos);
  }

  public Map<Node, Integer> getPosInLayer() {
    return myPosInLayer;
  }

  public List<Node> getOrder(int layer) {
    return ListSequence.<List<Node>>fromList(myLayeredOrder).getElement(layer);
  }

  public int getNumLayers() {
    return ListSequence.<List<Node>>fromList(myLayeredOrder).count();
  }

  public Graph getGraph() {
    return this.myGraph;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append("Node layered order: \n");
    for (List<Node> layerOrder : ListSequence.<List<Node>>fromList(myLayeredOrder)) {
      for (Node node : ListSequence.<Node>fromList(layerOrder)) {
        builder.append(node.getIndex() + " ");
      }
      builder.append("\n");
    }
    builder.append("end order");
    return builder.toString();
  }

  public Iterator<List<Node>> getTopToBottomIterator() {
    return ListSequence.<List<Node>>fromList(myLayeredOrder).iterator();
  }

  public Iterator<List<Node>> getBottomToTopIterator() {
    return ListSequence.<List<Node>>fromList(myLayeredOrder).reversedList().iterator();
  }
}
