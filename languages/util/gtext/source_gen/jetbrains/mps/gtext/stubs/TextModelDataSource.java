package jetbrains.mps.gtext.stubs;

/*Generated by MPS */

import jetbrains.mps.smodel.descriptor.source.FileBasedModelDataSource;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.project.structure.modules.ModuleReference;
import java.util.Collection;
import java.util.Collections;
import jetbrains.mps.smodel.persistence.def.DescriptorLoadResult;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.smodel.persistence.def.ModelReadException;
import jetbrains.mps.smodel.loading.ModelLoadResult;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.io.InputStream;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.io.IOException;
import java.io.OutputStream;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SModelId;

public class TextModelDataSource extends FileBasedModelDataSource {
  private IFile file;

  public TextModelDataSource(IFile file, ModuleReference ref) {
    super(ref);
    this.file = file;
  }

  public IFile getFile() {
    return file;
  }

  public Collection<String> getFilesToListen() {
    return Collections.singleton(file.getPath());
  }

  public long getTimestamp() {
    return file.lastModified();
  }

  public DescriptorLoadResult loadDescriptor(IModule module, SModelFqName name) throws ModelReadException {
    return new DescriptorLoadResult();
  }

  public ModelLoadResult loadSModel(IModule module, SModelDescriptor descriptor, ModelLoadingState state) {
    SModel m = new SModel(descriptor.getSModelReference());
    SNode root = SModelOperations.createNewRootNode(m, "jetbrains.mps.gtext.structure.GDocument", null);
    SNode text = SLinkOperations.addNewChild(root, "item", "jetbrains.mps.gtext.structure.GText");
    try {
      InputStream is = file.openInputStream();
      byte[] buf = new byte[1000000];
      int len = is.read(buf);
      SPropertyOperations.set(text, "text", new String(buf, 0, len));

    } catch (IOException e) {
      e.printStackTrace();
    }

    return new ModelLoadResult(m, ModelLoadingState.FULLY_LOADED);
  }

  public boolean saveModel(SModelDescriptor descriptor) {
    try {
      OutputStream os = file.openOutputStream();
      SModel model = descriptor.getSModel();
      String text = SPropertyOperations.getString(ListSequence.fromList(SModelOperations.getRoots(model, "jetbrains.mps.gtext.structure.GText")).first(), "text");
      os.write(text.getBytes());
      os.close();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return false;
  }

  public boolean hasModel(SModelDescriptor descriptor) {
    return descriptor.getSModelReference().getSModelId().equals(SModelId.foreign(file.getPath()));
  }
}
