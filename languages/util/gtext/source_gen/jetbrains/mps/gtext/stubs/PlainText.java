package jetbrains.mps.gtext.stubs;

/*Generated by MPS */

import jetbrains.mps.smodel.persistence.AbstractModelRootManager;
import java.util.Collection;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.structure.model.ModelRoot;
import jetbrains.mps.project.IModule;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.vfs.FileSystem;

public class PlainText extends AbstractModelRootManager {
  public PlainText() {
  }

  public Collection<SModelDescriptor> load(@NotNull ModelRoot root, IModule module) {
    List<SModelDescriptor> res = ListSequence.fromList(new ArrayList<SModelDescriptor>());
    for (IFile file : ListSequence.fromList(PlainText.this.getRootDir(root).getChildren())) {
      if (!(file.getName().endsWith(".txt"))) {
        continue;
      }

      ListSequence.fromList(res).addElement(new TextModelDescriptor(module, TextPersistenceUtil.refByFile(file), new TextModelDataSource(file, module.getModuleReference())));
    }
    return res;
  }

  public boolean canCreateModel(IModule module, @NotNull ModelRoot root, @NotNull SModelFqName fqName) {
    return true;
  }

  public SModelDescriptor createModel(IModule module, @NotNull ModelRoot root, @NotNull SModelFqName fqName) {
    IFile dir = PlainText.this.getRootDir(root);
    SModelReference ref = TextPersistenceUtil.refByFile(dir.getDescendant(fqName + ".txt"));
    return new TextModelDescriptor(module, ref, new TextModelDataSource(dir, module.getModuleReference()));
  }

  private IFile getRootDir(ModelRoot root) {
    return FileSystem.getInstance().getFileByPath(root.getPath());
  }
}
