package jetbrains.mps.gtext.stubs;

/*Generated by MPS */

import jetbrains.mps.smodel.BaseSModelDescriptorWithSource;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.smodel.loading.ModelLoadingState;

public class TextModelDescriptor extends BaseSModelDescriptorWithSource implements EditableSModelDescriptor {
  private SModel myModel = null;
  private boolean isChanged = false;
  private IModule myModule;

  public TextModelDescriptor(IModule module, SModelReference ref, TextModelDataSource source) {
    super(ref, source, false);
    this.myModule = module;
  }

  protected void reloadFromDisk() {
    // todo implement 
  }

  public long lastChangeTime() {
    return getSource().getTimestamp();
  }

  public boolean isChanged() {
    return isChanged;
  }

  public void setChanged(boolean b) {
    isChanged = b;
  }

  public void save() {
    ((TextModelDataSource) getSource()).saveModel(this);
  }

  public void rename(SModelFqName name, boolean b) {
    throw new UnsupportedOperationException();
  }

  @Deprecated
  public boolean isReadOnly() {
    return false;
  }

  @Deprecated
  public IFile getModelFile() {
    return null;
  }

  protected SModel getCurrentModelInternal() {
    return myModel;
  }

  public synchronized SModel getSModel() {
    if (myModel == null) {
      myModel = getSource().loadSModel(myModule, this, ModelLoadingState.FULLY_LOADED).getModel();
      myModel.setModelDescriptor(this);
      fireModelStateChanged(ModelLoadingState.NOT_LOADED, ModelLoadingState.FULLY_LOADED);
    }
    return myModel;
  }

  public ModelLoadingState getLoadingState() {
    return (myModel == null ?
      ModelLoadingState.NOT_LOADED :
      ModelLoadingState.FULLY_LOADED
    );
  }
}
