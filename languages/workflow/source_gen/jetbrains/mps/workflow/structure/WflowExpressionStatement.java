package jetbrains.mps.workflow.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.query.structure.MqlExpression;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class WflowExpressionStatement extends WflowStatement {
  public static final String concept = "jetbrains.mps.workflow.structure.WflowExpressionStatement";
  public static final String VARNAME = "varname";
  public static final String EXPRESSION = "expression";

  public WflowExpressionStatement(SNode node) {
    super(node);
  }

  public String getVarname() {
    return this.getProperty(WflowExpressionStatement.VARNAME);
  }

  public void setVarname(String value) {
    this.setProperty(WflowExpressionStatement.VARNAME, value);
  }

  public MqlExpression getExpression() {
    return (MqlExpression) this.getChild(MqlExpression.class, WflowExpressionStatement.EXPRESSION);
  }

  public void setExpression(MqlExpression node) {
    super.setChild(WflowExpressionStatement.EXPRESSION, node);
  }

  public static WflowExpressionStatement newInstance(SModel sm, boolean init) {
    return (WflowExpressionStatement) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.workflow.structure.WflowExpressionStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static WflowExpressionStatement newInstance(SModel sm) {
    return WflowExpressionStatement.newInstance(sm, false);
  }
}
