package jetbrains.mps.workflow.plugin;

/*Generated by MPS */

import jetbrains.mps.messages.IMessageHandler;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.messages.MessageKind;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.query.runtime.EvaluationEnvironment;
import jetbrains.mps.query.runtime.EvaluationContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.query.behavior.MqlExpression_Behavior;
import jetbrains.mps.messages.Message;

public class WorkflowRunner {
  private IMessageHandler handler;
  private IModule contextModule;

  public WorkflowRunner(IMessageHandler handler, IModule contextModule) {
    this.handler = handler;
    this.contextModule = contextModule;
    this.handler.clear();
  }

  public void run(SNode executable) {
    report(MessageKind.INFORMATION, "started: " + SPropertyOperations.getString(executable, "name"));
    EvaluationEnvironment env = new EvaluationEnvironment() {
      @Override
      public void reportError(String message) {
        WorkflowRunner.this.report(MessageKind.ERROR, message);
      }
    };
    EvaluationContext rootContext = new EvaluationContext(null, null);
    for (SNode st : SLinkOperations.getTargets(executable, "statements", true)) {
      if (SNodeOperations.isInstanceOf(st, "jetbrains.mps.workflow.structure.WflowExpressionStatement")) {
        try {
          SNode exprst = SNodeOperations.cast(st, "jetbrains.mps.workflow.structure.WflowExpressionStatement");
          Object result = MqlExpression_Behavior.call_evaluate_1671449901154581105(SLinkOperations.getTarget(exprst, "expression", true), env, rootContext);
          String asString = (result == null ?
            "null" :
            result.toString()
          );
          report(MessageKind.INFORMATION, SPropertyOperations.getString(exprst, "varname") + "=" + asString);

        } catch (Exception ex) {
          report(MessageKind.ERROR, ex.toString());
        }
      }
    }
  }

  public void report(MessageKind kind, String message) {
    handler.handle(new Message(kind, message));
  }
}
