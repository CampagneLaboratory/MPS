package jetbrains.mps.core.workflow.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.core.query.runtime.QueryScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.core.query.runtime.MultipleElementsScope;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class WflowExecutable_Behavior {
  public static void init(SNode thisNode) {
  }

  public static QueryScope virtual_getScope_5433095484313879207(SNode thisNode, SNode kind, SNode child) {
    if (kind == SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlVariable")) {
      if (child == null) {
        child = ListSequence.fromList(SLinkOperations.getTargets(thisNode, "statements", true)).last();
        if (child == null) {
          return null;
        }
      }
      SNode statement = SNodeOperations.getPrevSibling(child);
      List<SNode> res = new ArrayList<SNode>();
      while (statement != null) {
        if (SNodeOperations.isInstanceOf(statement, "jetbrains.mps.core.workflow.structure.WflowExpressionStatement")) {
          ListSequence.fromList(res).addElement(SLinkOperations.getTarget(SNodeOperations.cast(statement, "jetbrains.mps.core.workflow.structure.WflowExpressionStatement"), "var", true));
        }
        statement = SNodeOperations.getPrevSibling(statement);
      }
      return new MultipleElementsScope(res, new _FunctionTypes._return_P1_E0<String, SNode>() {
        public String invoke(SNode n) {
          return SPropertyOperations.getString(SNodeOperations.cast(n, "jetbrains.mps.lang.core.structure.INamedConcept"), "name");
        }
      });
    }
    return null;
  }
}
