package jetbrains.mps.samples.heating.typesystem;

/*Generated by MPS */

import jetbrains.mps.errors.QuickFix_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class MoveItemToTheRightPositionWithinDailyPlan_QuickFix extends QuickFix_Runtime {
  public MoveItemToTheRightPositionWithinDailyPlan_QuickFix() {
  }

  public String getDescription(SNode node) {
    return "Move the item to the correct position within the daily plan";
  }

  public void execute(SNode node) {
    final SNode item = SNodeOperations.cast(node, "jetbrains.mps.samples.heating.structure.PlanItem");
    System.out.println("AAAAAA " + SPropertyOperations.getInteger(item, "start") + ":" + SPropertyOperations.getInteger(item, "temperature"));
    if (SPropertyOperations.getInteger(item, "start") < 0) {
      return;
    }
    SNode dailyPlan = SNodeOperations.cast(SNodeOperations.getParent(item), "jetbrains.mps.samples.heating.structure.DailyPlan");
    SNode nextSibling = ListSequence.fromList(SLinkOperations.getTargets(dailyPlan, "items", true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getInteger(it, "start") > SPropertyOperations.getInteger(item, "start");
      }
    });
    if ((nextSibling != null)) {
      SNodeOperations.insertPrevSiblingChild(nextSibling, item);
    }
  }
}
