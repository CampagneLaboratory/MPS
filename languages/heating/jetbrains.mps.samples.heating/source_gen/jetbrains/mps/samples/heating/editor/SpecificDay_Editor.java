package jetbrains.mps.samples.heating.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.cellMenu.CompositeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteInfoPartExt;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.editor.generator.internal.AbstractCellMenuPart_PropertyValues;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.editor.generator.internal.AbstractCellMenuPart_ReplaceNode_CustomNodeConcept;

public class SpecificDay_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_g4jrcx_a(editorContext, node);
  }

  private EditorCell createCollection_g4jrcx_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_g4jrcx_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_g4jrcx_a0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_g4jrcx_b0(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_g4jrcx_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "on");
    editorCell.setCellId("Constant_g4jrcx_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createProperty_g4jrcx_b0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("day");
    provider.setNoTargetText("<no day>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_day");
    editorCell.setSubstituteInfo(new CompositeSubstituteInfo(editorContext, provider.getCellContext(), new SubstituteInfoPartExt[]{new SpecificDay_Editor.SpecificDay_day_cellMenu_g4jrcx_a0b0(), new SpecificDay_Editor.ReplaceWith_Applicability_cellMenu_g4jrcx_b0b0()}));
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  public static class SpecificDay_day_cellMenu_g4jrcx_a0b0 extends AbstractCellMenuPart_PropertyValues {
    public SpecificDay_day_cellMenu_g4jrcx_a0b0() {
    }

    public List<String> getPropertyValues(SNode node, IOperationContext operationContext, EditorContext editorContext) {
      return ListSequence.fromListAndArray(new ArrayList<String>(), "1", "2", "3", "4", "5", "6", "7");
    }
  }

  public static class ReplaceWith_Applicability_cellMenu_g4jrcx_b0b0 extends AbstractCellMenuPart_ReplaceNode_CustomNodeConcept {
    public ReplaceWith_Applicability_cellMenu_g4jrcx_b0b0() {
    }

    public String getReplacementConceptName() {
      return "jetbrains.mps.samples.heating.structure.Applicability";
    }
  }
}
