package jetbrains.mps.traceInfo.testWeaving.test;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import junit.framework.Assert;
import jetbrains.mps.generator.traceInfo.TraceInfoUtil;
import jetbrains.mps.generator.traceInfo.TraceDown;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.test.matcher.NodesMatcher;
import java.util.ArrayList;

public class TestUtil {
  public TestUtil() {
  }

  public static void testWeave(final SNode root, List<SNode> nodes, int startLine) {
    final Wrappers._int line = new Wrappers._int(startLine);
    final int delta = 4;
    ListSequence.fromList(nodes).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        Assert.assertNull("nodes '" + it + "' and '" + (SNode) TraceInfoUtil.getNode(TraceDown.anyUnitName(root), SPropertyOperations.getString(root, "name") + ".java", line.value) + "' do not match!", NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), it), ListSequence.fromListAndArray(new ArrayList<SNode>(), (SNode) TraceInfoUtil.getNode(TraceDown.anyUnitName(root), SPropertyOperations.getString(root, "name") + ".java", line.value))));
        line.value += delta;
      }
    });
  }

  public static void testWeaveMany(final SNode root, List<SNode> nodes, int startLine) {
    final Wrappers._int line = new Wrappers._int(startLine);
    final int delta = 4;
    final int howMany = 3;
    ListSequence.fromList(nodes).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        for (int i = 0; i < howMany; i++) {
          Assert.assertNull("nodes '" + it + "' and '" + (SNode) TraceInfoUtil.getNode(TraceDown.anyUnitName(root), SPropertyOperations.getString(root, "name") + ".java", line.value) + "' do not match!", NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), it), ListSequence.fromListAndArray(new ArrayList<SNode>(), (SNode) TraceInfoUtil.getNode(TraceDown.anyUnitName(root), SPropertyOperations.getString(root, "name") + ".java", line.value))));
          line.value += delta;
        }
      }
    });
  }
}
