package jetbrains.mps.traceInfo.testWeavingGenerated.data.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.runtime.TemplateMappingConfiguration;
import java.util.Collection;
import jetbrains.mps.generator.runtime.TemplateRootMappingRule;
import jetbrains.mps.generator.runtime.TemplateWeavingRule;
import jetbrains.mps.generator.runtime.TemplateDropRootRule;
import jetbrains.mps.generator.runtime.TemplateModel;
import jetbrains.mps.generator.runtime.TemplateUtil;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.generator.template.ITemplateGenerator;
import jetbrains.mps.generator.runtime.TemplateReductionRule;
import java.util.Collections;
import jetbrains.mps.generator.runtime.TemplateCreateRootRule;
import jetbrains.mps.generator.runtime.TemplateMappingScript;
import jetbrains.mps.generator.runtime.TemplateExecutionEnvironment;
import jetbrains.mps.generator.runtime.TemplateContext;
import jetbrains.mps.generator.runtime.GenerationException;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.WeavingMappingRuleContext;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import jetbrains.mps.generator.GenerationTracerUtil;

@Generated
public class Mappingmain implements TemplateMappingConfiguration {
  private final Collection<TemplateRootMappingRule> rootRules;
  private final Collection<TemplateWeavingRule> weavings;
  private final Collection<TemplateDropRootRule> dropRules;
  private final TemplateModel myModel;

  public Mappingmain(TemplateModel model) {
    this.myModel = model;
    rootRules = TemplateUtil.<TemplateRootMappingRule>asCollection(new Mappingmain.RootMappingRule0());
    weavings = TemplateUtil.<TemplateWeavingRule>asCollection(new Mappingmain.WeavingRule0(), new Mappingmain.WeavingRule1(), new Mappingmain.WeavingRule2(), new Mappingmain.WeavingRule3());
    dropRules = TemplateUtil.<TemplateDropRootRule>asCollection(new Mappingmain.DropRootRule0());
  }

  public String getName() {
    return "main";
  }

  public TemplateModel getModel() {
    return this.myModel;
  }

  public SNodeReference getMappingNode() {
    return new SNodePointer("r:592e27b6-d258-4bf2-9e32-25019862e1f1(jetbrains.mps.traceInfo.testWeavingGenerated.data.generator.template.main@generator)", "6186432342008486850");
  }

  public boolean isApplicable(ITemplateGenerator generator) {
    return true;
  }

  public Collection<TemplateReductionRule> getReductionRules() {
    return Collections.emptySet();
  }

  public Collection<TemplateCreateRootRule> getCreateRules() {
    return Collections.emptySet();
  }

  public Collection<TemplateRootMappingRule> getRootRules() {
    return rootRules;
  }

  public Collection<TemplateWeavingRule> getWeavingRules() {
    return weavings;
  }

  public Collection<TemplateDropRootRule> getDropRules() {
    return dropRules;
  }

  public Collection<TemplateMappingScript> getPostScripts() {
    return Collections.emptySet();
  }

  public Collection<TemplateMappingScript> getPreScripts() {
    return Collections.emptySet();
  }

  public boolean isTopPriority() {
    return false;
  }

  public class RootMappingRule0 implements TemplateRootMappingRule {
    public RootMappingRule0() {
    }

    public SNodeReference getRuleNode() {
      return rootMappingRule_417xrn_a0a1r;
    }

    public boolean applyToInheritors() {
      return false;
    }

    public String getApplicableConcept() {
      return "jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.RootConcept";
    }

    public boolean keepSourceRoot() {
      return true;
    }

    public boolean isApplicable(TemplateExecutionEnvironment environment, TemplateContext context) throws GenerationException {
      return true;
    }

    public Collection<SNode> apply(final TemplateExecutionEnvironment environment, final TemplateContext context) throws GenerationException {
      Collection<SNode> result = new Templatemap__RootConcept().apply(environment, context);
      environment.registerLabel(context.getInput(), result, "map_RootConcept");
      return result;
    }
  }

  public class DropRootRule0 implements TemplateDropRootRule {
    public DropRootRule0() {
    }

    public SNodeReference getRuleNode() {
      return dropRule_417xrn_a0a1s;
    }

    public String getApplicableConcept() {
      return "jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.RootConcept";
    }

    public boolean isApplicable(TemplateExecutionEnvironment environment, TemplateContext context) throws GenerationException {
      return true;
    }
  }

  public class WeavingRule0 implements TemplateWeavingRule {
    public WeavingRule0() {
    }

    public SNodeReference getRuleNode() {
      return weavingRule_417xrn_a0a1t;
    }

    public String getApplicableConcept() {
      return "jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.ChildConceptWeave";
    }

    public boolean applyToInheritors() {
      return false;
    }

    public boolean isApplicable(TemplateExecutionEnvironment environment, TemplateContext context) throws GenerationException {
      return true;
    }

    public SNode getContextNode(TemplateExecutionEnvironment environment, TemplateContext context) {
      return QueriesGenerated.weaving_MappingRule_ContextNodeQuery_6186432342008490339(new WeavingMappingRuleContext(context, getRuleNode(), environment.getGenerator()));
    }

    public boolean apply(final TemplateExecutionEnvironment environment, final TemplateContext context, final SNode outputContextNode) throws GenerationException {
      final List<SNode> tlist1 = new ArrayList<SNode>();
      environment.getTracer().pushRuleConsequence(weavingConseq_417xrn_a0a1a6t);
      Iterable<SNode> weaveEachList1 = QueriesGenerated.sourceNodesQuery_6186432342008490342(new SourceSubstituteMacroNodesContext(context, weavingConseq_417xrn_a0a1a6t, environment.getGenerator()));
      for (SNode itnode1 : weaveEachList1) {
        if (itnode1 == null) {
          continue;
        }
        boolean inputChanged1 = context.getInput() != itnode1;
        try {
          if (inputChanged1) {
            environment.getTracer().pushInputNode(GenerationTracerUtil.getSNodePointer(itnode1));
          }
          TemplateContext context1 = context.subContext(null, itnode1);
          Collection<SNode> innerResult1 = new Templateweave__ChildConceptWeave().weave(environment, context1, outputContextNode);

          if (innerResult1 != null) {
            tlist1.addAll(innerResult1);
          }
        } finally {
          if (inputChanged1) {
            environment.getTracer().closeInputNode(GenerationTracerUtil.getSNodePointer(itnode1));
          }
        }
      }
      return tlist1 != null && !(tlist1.isEmpty());
    }
  }

  public class WeavingRule1 implements TemplateWeavingRule {
    public WeavingRule1() {
    }

    public SNodeReference getRuleNode() {
      return weavingRule_417xrn_a0a1u;
    }

    public String getApplicableConcept() {
      return "jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.RootConcept";
    }

    public boolean applyToInheritors() {
      return false;
    }

    public boolean isApplicable(TemplateExecutionEnvironment environment, TemplateContext context) throws GenerationException {
      return true;
    }

    public SNode getContextNode(TemplateExecutionEnvironment environment, TemplateContext context) {
      return QueriesGenerated.weaving_MappingRule_ContextNodeQuery_6186432342008522529(new WeavingMappingRuleContext(context, getRuleNode(), environment.getGenerator()));
    }

    public boolean apply(final TemplateExecutionEnvironment environment, final TemplateContext context, final SNode outputContextNode) throws GenerationException {
      final List<SNode> tlist1 = new ArrayList<SNode>();
      environment.getTracer().pushRuleConsequence(weavingConseq_417xrn_a0a1a6u);
      Iterable<SNode> weaveEachList1 = QueriesGenerated.sourceNodesQuery_6186432342008522532(new SourceSubstituteMacroNodesContext(context, weavingConseq_417xrn_a0a1a6u, environment.getGenerator()));
      for (SNode itnode1 : weaveEachList1) {
        if (itnode1 == null) {
          continue;
        }
        boolean inputChanged1 = context.getInput() != itnode1;
        try {
          if (inputChanged1) {
            environment.getTracer().pushInputNode(GenerationTracerUtil.getSNodePointer(itnode1));
          }
          TemplateContext context1 = context.subContext(null, itnode1);
          Collection<SNode> innerResult1 = new Templateweave__ChildConceptWeave().weave(environment, context1, outputContextNode);

          if (innerResult1 != null) {
            tlist1.addAll(innerResult1);
          }
        } finally {
          if (inputChanged1) {
            environment.getTracer().closeInputNode(GenerationTracerUtil.getSNodePointer(itnode1));
          }
        }
      }
      return tlist1 != null && !(tlist1.isEmpty());
    }
  }

  public class WeavingRule2 implements TemplateWeavingRule {
    public WeavingRule2() {
    }

    public SNodeReference getRuleNode() {
      return weavingRule_417xrn_a0a1v;
    }

    public String getApplicableConcept() {
      return "jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.ChildConceptWeaveMany";
    }

    public boolean applyToInheritors() {
      return false;
    }

    public boolean isApplicable(TemplateExecutionEnvironment environment, TemplateContext context) throws GenerationException {
      return true;
    }

    public SNode getContextNode(TemplateExecutionEnvironment environment, TemplateContext context) {
      return QueriesGenerated.weaving_MappingRule_ContextNodeQuery_6186432342008533384(new WeavingMappingRuleContext(context, getRuleNode(), environment.getGenerator()));
    }

    public boolean apply(final TemplateExecutionEnvironment environment, final TemplateContext context, final SNode outputContextNode) throws GenerationException {
      final List<SNode> tlist1 = new ArrayList<SNode>();
      environment.getTracer().pushRuleConsequence(weavingConseq_417xrn_a0a1a6v);
      Iterable<SNode> weaveEachList1 = QueriesGenerated.sourceNodesQuery_6186432342008533377(new SourceSubstituteMacroNodesContext(context, weavingConseq_417xrn_a0a1a6v, environment.getGenerator()));
      for (SNode itnode1 : weaveEachList1) {
        if (itnode1 == null) {
          continue;
        }
        boolean inputChanged1 = context.getInput() != itnode1;
        try {
          if (inputChanged1) {
            environment.getTracer().pushInputNode(GenerationTracerUtil.getSNodePointer(itnode1));
          }
          TemplateContext context1 = context.subContext(null, itnode1);
          Collection<SNode> innerResult1 = new Templateweave__ChildConceptWeaveMany().weave(environment, context1, outputContextNode);

          if (innerResult1 != null) {
            tlist1.addAll(innerResult1);
          }
        } finally {
          if (inputChanged1) {
            environment.getTracer().closeInputNode(GenerationTracerUtil.getSNodePointer(itnode1));
          }
        }
      }
      return tlist1 != null && !(tlist1.isEmpty());
    }
  }

  public class WeavingRule3 implements TemplateWeavingRule {
    public WeavingRule3() {
    }

    public SNodeReference getRuleNode() {
      return weavingRule_417xrn_a0a1w;
    }

    public String getApplicableConcept() {
      return "jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.RootConcept";
    }

    public boolean applyToInheritors() {
      return false;
    }

    public boolean isApplicable(TemplateExecutionEnvironment environment, TemplateContext context) throws GenerationException {
      return true;
    }

    public SNode getContextNode(TemplateExecutionEnvironment environment, TemplateContext context) {
      return QueriesGenerated.weaving_MappingRule_ContextNodeQuery_6186432342008533368(new WeavingMappingRuleContext(context, getRuleNode(), environment.getGenerator()));
    }

    public boolean apply(final TemplateExecutionEnvironment environment, final TemplateContext context, final SNode outputContextNode) throws GenerationException {
      final List<SNode> tlist1 = new ArrayList<SNode>();
      environment.getTracer().pushRuleConsequence(weavingConseq_417xrn_a0a1a6w);
      Iterable<SNode> weaveEachList1 = QueriesGenerated.sourceNodesQuery_6186432342008533362(new SourceSubstituteMacroNodesContext(context, weavingConseq_417xrn_a0a1a6w, environment.getGenerator()));
      for (SNode itnode1 : weaveEachList1) {
        if (itnode1 == null) {
          continue;
        }
        boolean inputChanged1 = context.getInput() != itnode1;
        try {
          if (inputChanged1) {
            environment.getTracer().pushInputNode(GenerationTracerUtil.getSNodePointer(itnode1));
          }
          TemplateContext context1 = context.subContext(null, itnode1);
          Collection<SNode> innerResult1 = new Templateweave__ChildConceptWeaveMany().weave(environment, context1, outputContextNode);

          if (innerResult1 != null) {
            tlist1.addAll(innerResult1);
          }
        } finally {
          if (inputChanged1) {
            environment.getTracer().closeInputNode(GenerationTracerUtil.getSNodePointer(itnode1));
          }
        }
      }
      return tlist1 != null && !(tlist1.isEmpty());
    }
  }

  private static SNodePointer rootMappingRule_417xrn_a0a1r = new SNodePointer("r:592e27b6-d258-4bf2-9e32-25019862e1f1(jetbrains.mps.traceInfo.testWeavingGenerated.data.generator.template.main@generator)", "6186432342008486853");
  private static SNodePointer dropRule_417xrn_a0a1s = new SNodePointer("r:592e27b6-d258-4bf2-9e32-25019862e1f1(jetbrains.mps.traceInfo.testWeavingGenerated.data.generator.template.main@generator)", "6186432342008531363");
  private static SNodePointer weavingRule_417xrn_a0a1t = new SNodePointer("r:592e27b6-d258-4bf2-9e32-25019862e1f1(jetbrains.mps.traceInfo.testWeavingGenerated.data.generator.template.main@generator)", "6186432342008490337");
  private static SNodePointer weavingConseq_417xrn_a0a1a6t = new SNodePointer("r:592e27b6-d258-4bf2-9e32-25019862e1f1(jetbrains.mps.traceInfo.testWeavingGenerated.data.generator.template.main@generator)", "6186432342008490341");
  private static SNodePointer weavingRule_417xrn_a0a1u = new SNodePointer("r:592e27b6-d258-4bf2-9e32-25019862e1f1(jetbrains.mps.traceInfo.testWeavingGenerated.data.generator.template.main@generator)", "6186432342008522527");
  private static SNodePointer weavingConseq_417xrn_a0a1a6u = new SNodePointer("r:592e27b6-d258-4bf2-9e32-25019862e1f1(jetbrains.mps.traceInfo.testWeavingGenerated.data.generator.template.main@generator)", "6186432342008522531");
  private static SNodePointer weavingRule_417xrn_a0a1v = new SNodePointer("r:592e27b6-d258-4bf2-9e32-25019862e1f1(jetbrains.mps.traceInfo.testWeavingGenerated.data.generator.template.main@generator)", "6186432342008533375");
  private static SNodePointer weavingConseq_417xrn_a0a1a6v = new SNodePointer("r:592e27b6-d258-4bf2-9e32-25019862e1f1(jetbrains.mps.traceInfo.testWeavingGenerated.data.generator.template.main@generator)", "6186432342008533376");
  private static SNodePointer weavingRule_417xrn_a0a1w = new SNodePointer("r:592e27b6-d258-4bf2-9e32-25019862e1f1(jetbrains.mps.traceInfo.testWeavingGenerated.data.generator.template.main@generator)", "6186432342008533360");
  private static SNodePointer weavingConseq_417xrn_a0a1a6w = new SNodePointer("r:592e27b6-d258-4bf2-9e32-25019862e1f1(jetbrains.mps.traceInfo.testWeavingGenerated.data.generator.template.main@generator)", "6186432342008533361");
}
