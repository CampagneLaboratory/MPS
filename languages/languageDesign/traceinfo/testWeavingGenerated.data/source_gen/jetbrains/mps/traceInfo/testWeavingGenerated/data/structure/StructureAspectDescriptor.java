package jetbrains.mps.traceInfo.testWeavingGenerated.data.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptChildConceptWeave = new ConceptDescriptorBuilder("jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.ChildConceptWeave").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptChildConceptWeaveEach = new ConceptDescriptorBuilder("jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.ChildConceptWeaveEach").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptChildConceptWeaveEachMany = new ConceptDescriptorBuilder("jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.ChildConceptWeaveEachMany").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptChildConceptWeaveMany = new ConceptDescriptorBuilder("jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.ChildConceptWeaveMany").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptRootConcept = new ConceptDescriptorBuilder("jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.RootConcept").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"weave", "weaveEach", "weaveMany", "weaveEachMany"}, new boolean[]{true, true, true, true}).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptChildConceptWeave, myConceptChildConceptWeaveEach, myConceptChildConceptWeaveEachMany, myConceptChildConceptWeaveMany, myConceptRootConcept);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0i, conceptFqName)) {
      case 0:
        return myConceptChildConceptWeave;
      case 1:
        return myConceptChildConceptWeaveEach;
      case 2:
        return myConceptChildConceptWeaveEachMany;
      case 3:
        return myConceptChildConceptWeaveMany;
      case 4:
        return myConceptRootConcept;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0i = new String[]{"jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.ChildConceptWeave", "jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.ChildConceptWeaveEach", "jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.ChildConceptWeaveEachMany", "jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.ChildConceptWeaveMany", "jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.RootConcept"};
}
