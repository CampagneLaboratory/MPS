package jetbrains.mps.traceInfo.testWeavingGenerated.data.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {

  /*package*/ final ConceptDescriptor myConceptChildConceptWeave = new ConceptDescriptorBuilder("jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.ChildConceptWeave", MetaIdFactory.conceptId(0xce517356fc9a4e78L, 0x86066e7a36ff0671L, 0x55da9f701c64f39cL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).create();
  /*package*/ final ConceptDescriptor myConceptChildConceptWeaveEach = new ConceptDescriptorBuilder("jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.ChildConceptWeaveEach", MetaIdFactory.conceptId(0xce517356fc9a4e78L, 0x86066e7a36ff0671L, 0x55da9f701c64f39aL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).create();
  /*package*/ final ConceptDescriptor myConceptChildConceptWeaveEachMany = new ConceptDescriptorBuilder("jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.ChildConceptWeaveEachMany", MetaIdFactory.conceptId(0xce517356fc9a4e78L, 0x86066e7a36ff0671L, 0x55da9f701c681163L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).create();
  /*package*/ final ConceptDescriptor myConceptChildConceptWeaveMany = new ConceptDescriptorBuilder("jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.ChildConceptWeaveMany", MetaIdFactory.conceptId(0xce517356fc9a4e78L, 0x86066e7a36ff0671L, 0x55da9f701c681159L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).create();
  /*package*/ final ConceptDescriptor myConceptRootConcept = new ConceptDescriptorBuilder("jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.RootConcept", MetaIdFactory.conceptId(0xce517356fc9a4e78L, 0x86066e7a36ff0671L, 0x55da9f701c64caccL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).childDescriptors(new ConceptDescriptorBuilder.Link(6186432342008329118L, "weave", MetaIdFactory.conceptId(0xce517356fc9a4e78L, 0x86066e7a36ff0671L, 0x55da9f701c64f39cL), true, true, false), new ConceptDescriptorBuilder.Link(6186432342008329119L, "weaveEach", MetaIdFactory.conceptId(0xce517356fc9a4e78L, 0x86066e7a36ff0671L, 0x55da9f701c64f39aL), true, true, false), new ConceptDescriptorBuilder.Link(6186432342008533358L, "weaveMany", MetaIdFactory.conceptId(0xce517356fc9a4e78L, 0x86066e7a36ff0671L, 0x55da9f701c681159L), true, true, false), new ConceptDescriptorBuilder.Link(6186432342008533359L, "weaveEachMany", MetaIdFactory.conceptId(0xce517356fc9a4e78L, 0x86066e7a36ff0671L, 0x55da9f701c681163L), true, true, false)).children(new String[]{"weave", "weaveEach", "weaveMany", "weaveEachMany"}, new boolean[]{true, true, true, true}).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptChildConceptWeave, myConceptChildConceptWeaveEach, myConceptChildConceptWeaveEachMany, myConceptChildConceptWeaveMany, myConceptRootConcept);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0j, conceptFqName)) {
      case 0:
        return myConceptChildConceptWeave;
      case 1:
        return myConceptChildConceptWeaveEach;
      case 2:
        return myConceptChildConceptWeaveEachMany;
      case 3:
        return myConceptChildConceptWeaveMany;
      case 4:
        return myConceptRootConcept;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0j = new String[]{"jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.ChildConceptWeave", "jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.ChildConceptWeaveEach", "jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.ChildConceptWeaveEachMany", "jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.ChildConceptWeaveMany", "jetbrains.mps.traceInfo.testWeavingGenerated.data.structure.RootConcept"};
}
