package jetbrains.mps.traceInfo.test;

/*Generated by MPS */

import jetbrains.mps.WorkbenchMpsTest;
import org.junit.Test;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.model.SNode;
import junit.framework.Assert;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.generator.traceInfo.TraceInfoUtil;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.debug.api.breakpoints.BreakpointLocation;
import jetbrains.mps.project.Project;
import java.io.File;
import jetbrains.mps.util.PathManager;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.ThreadUtils;
import jetbrains.mps.tool.environment.ActiveEnvironment;
import com.intellij.ide.IdeEventQueue;

public class TraceInfoTest extends WorkbenchMpsTest {
  public TraceInfoTest() {
  }
  @Test
  public void ifTest() {
    invokeTest(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        SNode node = getErrorLocation(new _FunctionTypes._void_P0_E0() {
          public void invoke() {
            TestClass.ifTest();
          }
        });
        Assert.assertTrue("Node " + node.getNodeId().toString() + " is of concept " + SNodeOperations.getConceptDeclaration(node), SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123159l, "jetbrains.mps.baseLanguage.structure.IfStatement")));
      }
    });
  }
  @Test
  public void forTest() {
    invokeTest(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        SNode node = getErrorLocation(new _FunctionTypes._void_P0_E0() {
          public void invoke() {
            TestClass.forTest();
          }
        });
        Assert.assertTrue("Node " + node.getNodeId().toString() + " is of concept " + SNodeOperations.getConceptDeclaration(node), SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1144231330558l, "jetbrains.mps.baseLanguage.structure.ForStatement")));
      }
    });
  }
  @Test
  public void blockStatementTest() {
    invokeTest(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        SNode node = getErrorLocation(new _FunctionTypes._void_P0_E0() {
          public void invoke() {
            TestClass.blockStatementTest();
          }
        });
        Assert.assertTrue("Node " + node.getNodeId().toString() + " is of concept " + SNodeOperations.getConceptDeclaration(node), SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(new UUID(-935030926396207931l, -6610165693999523818l), 1164991038168l, "jetbrains.mps.baseLanguage.structure.ThrowStatement")));
      }
    });
  }
  @Test
  public void foreachTest() {
    invokeTest(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        try {
          TestClass.foreachTest();
        } catch (Throwable t) {
          StackTraceElement stackTraceElement = t.getStackTrace()[0];
          SNode node = TraceInfoUtil.getVar(stackTraceElement.getClassName(), stackTraceElement.getFileName(), stackTraceElement.getLineNumber(), "it");
          Assert.assertTrue("Node " + node + " for variable it.", (node != null) && SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l, -7182180101671965361l), 1153944193378l, "jetbrains.mps.baseLanguage.collections.structure.ForEachVariable")));
        }
      }
    });
  }
  @Test
  public void generatedForeachTest() {
    invokeTest(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        try {
          TestClass.generatedForeachTest();
        } catch (Throwable t) {
          StackTraceElement stackTraceElement = t.getStackTrace()[0];
          SNode node = TraceInfoUtil.getVar(stackTraceElement.getClassName(), stackTraceElement.getFileName(), stackTraceElement.getLineNumber(), "it_gen");
          Assert.assertTrue("Node " + node + " for variable it_gen.", (node != null) && SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(new UUID(-8968771020793164004l, -7182180101671965361l), 1153944193378l, "jetbrains.mps.baseLanguage.collections.structure.ForEachVariable")));
        }
      }
    });
  }
  @Test
  public void internalClassTest() {
    invokeTest(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        SNode statement = Sequence.fromIterable(BehaviorReflection.invokeNonVirtual((Class<Iterable<SNode>>) ((Class) Object.class), SNodeOperations.getNode("r:fc539459-610a-408b-8472-ac3a7316412f(jetbrains.mps.traceInfo.test@tests)", "8529179251482782650"), "jetbrains.mps.baseLanguage.structure.Classifier", "call_methods_5292274854859311639", new Object[]{})).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name")).equals("internalClassTest");
          }
        }).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return (SLinkOperations.getTarget(it, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123132l, 1068580123135l, "body")) != null);
          }
        }).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SLinkOperations.getTarget(it, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123132l, 1068580123135l, "body"));
          }
        }).translate(new ITranslator2<SNode, SNode>() {
          public Iterable<SNode> translate(SNode it) {
            return SLinkOperations.getChildren(it, MetaAdapterFactory.getContainmentLink(new UUID(-935030926396207931l, -6610165693999523818l), 1068580123136l, 1068581517665l, "statement"));
          }
        }).first();
        BreakpointLocation location = new BreakpointLocation(statement);
        Assert.assertEquals("jetbrains.mps.traceInfo.test.TestClass", location.getTargetUnitName());
      }
    });
  }
  private void invokeTest(final _FunctionTypes._void_P0_E0 test) {
    Project project = WorkbenchMpsTest.openProject(new File(PathManager.getHomePath() + "/languages/languageDesign/traceinfo"));
    try {
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          test.invoke();
        }
      });
    } finally {
      cleanup(project);
    }
  }
  private SNode getErrorLocation(_FunctionTypes._void_P0_E0 method) {
    try {
      method.invoke();
    } catch (Throwable t) {
      StackTraceElement stackTraceElement = t.getStackTrace()[0];
      SNode node = TraceInfoUtil.getJavaNode(stackTraceElement.getClassName(), stackTraceElement.getFileName(), stackTraceElement.getLineNumber());
      // <node> 
      return node;
    }
    return null;
  }
  private void cleanup(final Project p) {
    ModelAccess.instance().flushEventQueue();
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      @Override
      public void run() {
        ActiveEnvironment.getInstance().disposeProject(p.getProjectFile());
        IdeEventQueue.getInstance().flushQueue();
        System.gc();
      }
    });
  }
}
