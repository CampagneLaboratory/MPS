package jetbrains.mps.traceInfo.testWeavingInterpreted.data.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.UUID;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {

  /*package*/ final ConceptDescriptor myConceptChildConceptWeave = new ConceptDescriptorBuilder("jetbrains.mps.traceInfo.testWeavingInterpreted.data.structure.ChildConceptWeave", MetaIdFactory.conceptId(new UUID(-22571445583983012L, -7559480957372974393L), 6186432342008329116L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1133920641626L)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1133920641626L), MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1169194658468L)).create();
  /*package*/ final ConceptDescriptor myConceptChildConceptWeaveEach = new ConceptDescriptorBuilder("jetbrains.mps.traceInfo.testWeavingInterpreted.data.structure.ChildConceptWeaveEach", MetaIdFactory.conceptId(new UUID(-22571445583983012L, -7559480957372974393L), 6186432342008329114L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1133920641626L)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1133920641626L), MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1169194658468L)).create();
  /*package*/ final ConceptDescriptor myConceptChildConceptWeaveEachMany = new ConceptDescriptorBuilder("jetbrains.mps.traceInfo.testWeavingInterpreted.data.structure.ChildConceptWeaveEachMany", MetaIdFactory.conceptId(new UUID(-22571445583983012L, -7559480957372974393L), 6186432342008533347L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1133920641626L)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1133920641626L), MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1169194658468L)).create();
  /*package*/ final ConceptDescriptor myConceptChildConceptWeaveMany = new ConceptDescriptorBuilder("jetbrains.mps.traceInfo.testWeavingInterpreted.data.structure.ChildConceptWeaveMany", MetaIdFactory.conceptId(new UUID(-22571445583983012L, -7559480957372974393L), 6186432342008533337L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1133920641626L)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1133920641626L), MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1169194658468L)).create();
  /*package*/ final ConceptDescriptor myConceptRootConcept = new ConceptDescriptorBuilder("jetbrains.mps.traceInfo.testWeavingInterpreted.data.structure.RootConcept", MetaIdFactory.conceptId(new UUID(-22571445583983012L, -7559480957372974393L), 6186432342008318668L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1133920641626L)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1133920641626L), MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1169194658468L)).childDescriptors(new ConceptDescriptorBuilder.Link(6186432342008329118L, "weave", MetaIdFactory.conceptId(new UUID(-22571445583983012L, -7559480957372974393L), 6186432342008329116L), true, true, false), new ConceptDescriptorBuilder.Link(6186432342008329119L, "weaveEach", MetaIdFactory.conceptId(new UUID(-22571445583983012L, -7559480957372974393L), 6186432342008329114L), true, true, false), new ConceptDescriptorBuilder.Link(6186432342008533358L, "weaveMany", MetaIdFactory.conceptId(new UUID(-22571445583983012L, -7559480957372974393L), 6186432342008533337L), true, true, false), new ConceptDescriptorBuilder.Link(6186432342008533359L, "weaveEachMany", MetaIdFactory.conceptId(new UUID(-22571445583983012L, -7559480957372974393L), 6186432342008533347L), true, true, false)).children(new String[]{"weave", "weaveEach", "weaveMany", "weaveEachMany"}, new boolean[]{true, true, true, true}).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptChildConceptWeave, myConceptChildConceptWeaveEach, myConceptChildConceptWeaveEachMany, myConceptChildConceptWeaveMany, myConceptRootConcept);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0j, conceptFqName)) {
      case 0:
        return myConceptChildConceptWeave;
      case 1:
        return myConceptChildConceptWeaveEach;
      case 2:
        return myConceptChildConceptWeaveEachMany;
      case 3:
        return myConceptChildConceptWeaveMany;
      case 4:
        return myConceptRootConcept;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0j = new String[]{"jetbrains.mps.traceInfo.testWeavingInterpreted.data.structure.ChildConceptWeave", "jetbrains.mps.traceInfo.testWeavingInterpreted.data.structure.ChildConceptWeaveEach", "jetbrains.mps.traceInfo.testWeavingInterpreted.data.structure.ChildConceptWeaveEachMany", "jetbrains.mps.traceInfo.testWeavingInterpreted.data.structure.ChildConceptWeaveMany", "jetbrains.mps.traceInfo.testWeavingInterpreted.data.structure.RootConcept"};
}
