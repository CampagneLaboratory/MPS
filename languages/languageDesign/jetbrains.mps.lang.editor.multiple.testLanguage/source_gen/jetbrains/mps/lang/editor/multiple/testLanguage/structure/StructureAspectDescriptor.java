package jetbrains.mps.lang.editor.multiple.testLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptMultipleEditorsTestChild = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestChild").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("defaultProperty", "richProperty", "compactProperty").create();
  /*package*/ final ConceptDescriptor myConceptMultipleEditorsTestEditorComponentChild = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestEditorComponentChild").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("defaultProperty", "compactProperty", "richProperty", "richCompactProperty").create();
  /*package*/ final ConceptDescriptor myConceptMultipleEditorsTestEditorComponentChildSubconcept = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestEditorComponentChildSubconcept").super_("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestEditorComponentChild").parents("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestEditorComponentChild").properties("subconceptProperty").create();
  /*package*/ final ConceptDescriptor myConceptMultipleEditorsTestEditorComponentRoot = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestEditorComponentRoot").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"defaultChildren", "richChildren", "richCompactChildren", "childSubconcepts"}, new boolean[]{true, true, true, true}).create();
  /*package*/ final ConceptDescriptor myConceptMultipleEditorsTestMostSpecificChild = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestMostSpecificChild").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("defaultProperty", "compactProperty", "richProperty", "richCompactProperty").create();
  /*package*/ final ConceptDescriptor myConceptMultipleEditorsTestMostSpecificRoot = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestMostSpecificRoot").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"mostSpecificChildren"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptMultipleEditorsTestRefNodeListRoot = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestRefNodeListRoot").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("projectionType", "projectAsCompact").children(new String[]{"richChildren", "compactChildren", "conditionallyProjectedChildren", "conditionallyRichOrCompactChildren"}, new boolean[]{true, true, true, true}).create();
  /*package*/ final ConceptDescriptor myConceptMultipleEditorsTestRefNodeRoot = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestRefNodeRoot").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("projectionType", "projectAsCompact").children(new String[]{"richChild", "compactChild", "conditionallyProjectedChild", "conditionallyRichOrCompactChild"}, new boolean[]{false, false, false, false}).create();
  /*package*/ final ConceptDescriptor myConceptMultipleEditorsTestRoot = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestRoot").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("projectionType", "projectAsCompact").children(new String[]{"richChild", "compactChild", "defaultChild", "conditionallyProjectedChild", "conditionallyRichOrCompactChild", "notSupportedPresentation"}, new boolean[]{true, true, true, true, true, true}).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptMultipleEditorsTestChild, myConceptMultipleEditorsTestEditorComponentChild, myConceptMultipleEditorsTestEditorComponentChildSubconcept, myConceptMultipleEditorsTestEditorComponentRoot, myConceptMultipleEditorsTestMostSpecificChild, myConceptMultipleEditorsTestMostSpecificRoot, myConceptMultipleEditorsTestRefNodeListRoot, myConceptMultipleEditorsTestRefNodeRoot, myConceptMultipleEditorsTestRoot);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0m, conceptFqName)) {
      case 0:
        return myConceptMultipleEditorsTestChild;
      case 1:
        return myConceptMultipleEditorsTestEditorComponentChild;
      case 2:
        return myConceptMultipleEditorsTestEditorComponentChildSubconcept;
      case 3:
        return myConceptMultipleEditorsTestEditorComponentRoot;
      case 4:
        return myConceptMultipleEditorsTestMostSpecificChild;
      case 5:
        return myConceptMultipleEditorsTestMostSpecificRoot;
      case 6:
        return myConceptMultipleEditorsTestRefNodeListRoot;
      case 7:
        return myConceptMultipleEditorsTestRefNodeRoot;
      case 8:
        return myConceptMultipleEditorsTestRoot;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0m = new String[]{"jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestChild", "jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestEditorComponentChild", "jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestEditorComponentChildSubconcept", "jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestEditorComponentRoot", "jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestMostSpecificChild", "jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestMostSpecificRoot", "jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestRefNodeListRoot", "jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestRefNodeRoot", "jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestRoot"};
}
