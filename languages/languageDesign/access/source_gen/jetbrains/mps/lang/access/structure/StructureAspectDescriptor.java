package jetbrains.mps.lang.access.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.lang.access.structure.BaseExecuteCommandStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.access.structure.BaseExecuteCommandStatementSync", null);
    myFqNameToConcept.put("jetbrains.mps.lang.access.structure.CommandClosureLiteral", null);
    myFqNameToConcept.put("jetbrains.mps.lang.access.structure.ExecuteCommandInEDTStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.access.structure.ExecuteCommandStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.access.structure.ExecuteEDTCommandStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.access.structure.ExecuteLightweightCommandStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.access.structure.ExecuteTransparentCommandStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.access.structure.ExecuteWriteActionStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.access.structure.IExecuteCommandStatementSync", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.access.structure.BaseExecuteCommandStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"commandClosureLiteral"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.access.structure.BaseExecuteCommandStatementSync").super_("jetbrains.mps.lang.access.structure.BaseExecuteCommandStatement").parents("jetbrains.mps.lang.access.structure.BaseExecuteCommandStatement").staticScope(StaticScope.NONE).create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.access.structure.CommandClosureLiteral").super_("jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral").parents("jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral").staticScope(StaticScope.NONE).create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.access.structure.ExecuteCommandInEDTStatement").super_("jetbrains.mps.lang.access.structure.BaseExecuteCommandStatement").parents("jetbrains.mps.lang.access.structure.BaseExecuteCommandStatement").children(new String[]{"project"}, new boolean[]{false}).alias("execute command in EDT", "").staticScope(StaticScope.NONE).create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.access.structure.ExecuteCommandStatement").super_("jetbrains.mps.lang.access.structure.BaseExecuteCommandStatementSync").parents("jetbrains.mps.lang.access.structure.BaseExecuteCommandStatementSync").alias("command", "").staticScope(StaticScope.NONE).create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.access.structure.ExecuteEDTCommandStatement").super_("jetbrains.mps.lang.access.structure.BaseExecuteCommandStatement").parents("jetbrains.mps.lang.access.structure.BaseExecuteCommandStatement").alias("execute in EDT", "").staticScope(StaticScope.NONE).create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.access.structure.ExecuteLightweightCommandStatement").super_("jetbrains.mps.lang.access.structure.BaseExecuteCommandStatementSync").parents("jetbrains.mps.lang.access.structure.BaseExecuteCommandStatementSync").alias("read action", "").staticScope(StaticScope.NONE).create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.access.structure.ExecuteTransparentCommandStatement").super_("jetbrains.mps.lang.access.structure.BaseExecuteCommandStatementSync").parents("jetbrains.mps.lang.access.structure.BaseExecuteCommandStatementSync").alias("undo-transparent command", "").staticScope(StaticScope.NONE).create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.access.structure.ExecuteWriteActionStatement").super_("jetbrains.mps.lang.access.structure.BaseExecuteCommandStatementSync").parents("jetbrains.mps.lang.access.structure.BaseExecuteCommandStatementSync").alias("write action", "").staticScope(StaticScope.NONE).create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.access.structure.IExecuteCommandStatementSync").interface_().create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.lang.access.structure.BaseExecuteCommandStatement", "jetbrains.mps.lang.access.structure.BaseExecuteCommandStatementSync", "jetbrains.mps.lang.access.structure.CommandClosureLiteral", "jetbrains.mps.lang.access.structure.ExecuteCommandInEDTStatement", "jetbrains.mps.lang.access.structure.ExecuteCommandStatement", "jetbrains.mps.lang.access.structure.ExecuteEDTCommandStatement", "jetbrains.mps.lang.access.structure.ExecuteLightweightCommandStatement", "jetbrains.mps.lang.access.structure.ExecuteTransparentCommandStatement", "jetbrains.mps.lang.access.structure.ExecuteWriteActionStatement", "jetbrains.mps.lang.access.structure.IExecuteCommandStatementSync"};
}
