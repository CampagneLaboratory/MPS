package jetbrains.mps.lang.access.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.SurroundWithIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class SurroundWithExecuteLightweightCommandStatement_Intention extends SurroundWithIntention {
  public SurroundWithExecuteLightweightCommandStatement_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.Statement";
  }

  public String getPresentation() {
    return "SurroundWithExecuteLightweightCommandStatement";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.access.intentions.SurroundWithExecuteLightweightCommandStatement_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:93e49088-faf0-4e36-bb0d-3271af9bd425(jetbrains.mps.lang.access.intentions@1_0)", "1616052750811363739");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Read Action";
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode readActionStatement = SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.access.structure.ExecuteLightweightCommandStatement", null);
    List<SNode> selectedNodes = editorContext.getSelectedNodes();
    SNodeOperations.insertNextSiblingChild(node, readActionStatement);
    for (SNode selectedNode : ListSequence.fromList(selectedNodes)) {
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(readActionStatement, "commandClosureLiteral", true), "body", true), "statement", true)).addElement(SNodeOperations.getAncestor(selectedNode, "jetbrains.mps.baseLanguage.structure.Statement", true, false));
    }
    editorContext.select(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(readActionStatement, "commandClosureLiteral", true), "body", true), "statement", true)).first());
  }
}
