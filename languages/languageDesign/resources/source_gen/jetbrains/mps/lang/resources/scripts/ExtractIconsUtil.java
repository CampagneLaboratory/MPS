package jetbrains.mps.lang.resources.scripts;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.IModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import jetbrains.mps.lang.resources.behavior.IconResource_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.extapi.model.EditableSModel;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class ExtractIconsUtil {
  public ExtractIconsUtil() {
  }

  public static void updateIconResourceBundle(SNode cb) {
    IModule module = SNodeOperations.getModel(cb).getModelDescriptor().getModule();
    if (module instanceof Language) {
      SNode irb = getIconResourceBundle((Language) module);
      for (SNode ire : ListSequence.fromList(SNodeOperations.getDescendants(cb, "jetbrains.mps.lang.resources.structure.IconResourceExpression", false, new String[]{})).toListSequence()) {
        {
          Pattern _pattern_0 = REGEXP_st4ewd_a0a0a0b0b0b;
          Matcher _matcher_0 = _pattern_0.matcher(IconResource_Behavior.call_getFilename_8974276187400030131(SLinkOperations.getTarget(ire, "icon", true)));
          if (_matcher_0.find()) {
            final String iconName = _matcher_0.group(1).toUpperCase();
            SNode decl = ListSequence.fromList(SLinkOperations.getTargets(irb, "icons", true)).findFirst(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return iconName.equals(SPropertyOperations.getString(it, "name"));
              }
            });
            if ((decl == null)) {
              decl = SLinkOperations.addNewChild(irb, "icons", "jetbrains.mps.lang.resources.structure.IconResourceDeclaration");
              SLinkOperations.setTarget(decl, "iconExpression", _quotation_createNode_st4ewd_a0b0c0a0b0b0b(SNodeOperations.copyNode(SLinkOperations.getTarget(ire, "icon", true))), true);
              SPropertyOperations.set(decl, "name", iconName);
            }
            SNodeOperations.replaceWithAnother(ire, _quotation_createNode_st4ewd_a0a3a0a1a1a1(decl));
          }
        }
      }
    }
  }

  private static SNode getIconResourceBundle(Language lang) {
    EditableSModel pluginModel = getPluginModel(lang);
    SModel smodel = ((SModelInternal) pluginModel).getSModel();
    SNode irb = ListSequence.fromList(SModelOperations.getRoots(smodel, "jetbrains.mps.lang.resources.structure.IconResourceBundle")).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode irb) {
        return "Behavior".equals(SPropertyOperations.getString(irb, "name"));
      }
    });
    if ((irb == null)) {
      irb = SModelOperations.createNewRootNode(smodel, "jetbrains.mps.lang.resources.structure.IconResourceBundle", null);
      SPropertyOperations.set(irb, "name", "Behavior");
    }
    return irb;
  }

  private static EditableSModel getPluginModel(Language lang) {
    SModel plugin = LanguageAspect.PLUGIN.get(lang);
    LanguageAspect aspectForModel = lang.getAspectForModel(plugin);
    return aspectForModel.getOrCreate(lang);
  }

  private static SNode _quotation_createNode_st4ewd_a0b0c0a0b0b0b(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.resources.structure.IconResourceExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("icon", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_st4ewd_a0a3a0a1a1a1(Object parameter_1) {
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.resources.structure.IconResourceReference", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_2, "declaration", (SNode) parameter_1);
    return quotedNode_2;
  }

  private static Pattern REGEXP_st4ewd_a0a0a0b0b0b = Pattern.compile("([^/]+)\\.([^\\.]+)$", 0);
}
