package jetbrains.mps.lang.resources.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptIconResource = new ConceptDescriptorBuilder("jetbrains.mps.lang.resources.structure.IconResource").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.resources.structure.Resource").children(new String[]{"iconExpression"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptIconResourceBundle = new ConceptDescriptorBuilder("jetbrains.mps.lang.resources.structure.IconResourceBundle").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"icons"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptIconResourceDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.resources.structure.IconResourceDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"iconExpression"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptIconResourceExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.resources.structure.IconResourceExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"icon"}, new boolean[]{false}).alias("icon", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIconResourceReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.resources.structure.IconResourceReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("declaration").alias("icon", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptResource = new ConceptDescriptorBuilder("jetbrains.mps.lang.resources.structure.Resource").interface_().properties("path").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptIconResource, myConceptIconResourceBundle, myConceptIconResourceDeclaration, myConceptIconResourceExpression, myConceptIconResourceReference, myConceptResource);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0j, conceptFqName)) {
      case 0:
        return myConceptIconResource;
      case 1:
        return myConceptIconResourceBundle;
      case 2:
        return myConceptIconResourceDeclaration;
      case 3:
        return myConceptIconResourceExpression;
      case 4:
        return myConceptIconResourceReference;
      case 5:
        return myConceptResource;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0j = new String[]{"jetbrains.mps.lang.resources.structure.IconResource", "jetbrains.mps.lang.resources.structure.IconResourceBundle", "jetbrains.mps.lang.resources.structure.IconResourceDeclaration", "jetbrains.mps.lang.resources.structure.IconResourceExpression", "jetbrains.mps.lang.resources.structure.IconResourceReference", "jetbrains.mps.lang.resources.structure.Resource"};
}
