package jetbrains.mps.lang.resources.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.generator.fileGenerator.FileGenerationUtil;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.vfs.IFileUtils;
import jetbrains.mps.project.IModule;
import javax.swing.ImageIcon;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class IconResource_Behavior {
  public static void init(SNode thisNode) {
  }

  public static void virtual_generate_8974276187400030152(final SNode thisNode) {
    ModelAccess.instance().writeFilesInEDT(new Runnable() {
      public void run() {
        SModel model = SNodeOperations.getModel(thisNode);
        String outputRoot = model.getModule().getOutputFor(model);
        IFile outputRootFile = FileSystem.getInstance().getFileByPath(outputRoot);
        IFile output = FileGenerationUtil.getDefaultOutputDir(model, outputRootFile);

        // copy 
        String source = MacrosFactory.forModuleFile(model.getModule().getDescriptorFile()).expandPath(SPropertyOperations.getString(thisNode, "path"));
        IFile sourceFile = FileSystem.getInstance().getFileByPath(source);

        IFileUtils.copyFileContent(sourceFile, output.getDescendant(sourceFile.getName()));
      }
    });
  }

  public static boolean call_isValid_8974276187400030063(SNode thisNode) {
    IModule module = SNodeOperations.getModel(thisNode).getModule();
    if (module == null) {
      return false;
    }
    String path = MacrosFactory.forModuleFile(module.getDescriptorFile()).expandPath(SPropertyOperations.getString(thisNode, "path"));
    if (path == null) {
      return false;
    }
    IFile file = FileSystem.getInstance().getFileByPath(path);
    if (!(file.exists())) {
      return false;
    }
    try {
      new ImageIcon(path);
      return true;
    } catch (Throwable t) {
      return false;
    }
  }

  public static String call_getFilename_8974276187400030131(SNode thisNode) {
    String fullPath = SPropertyOperations.getString(thisNode, "path");
    return fullPath.substring(fullPath.lastIndexOf("/") + 1);
  }

  @Deprecated
  public static void call_generate_8974276187400029990(SNode thisNode) {
    BehaviorReflection.invokeVirtual(Void.class, thisNode, "virtual_generate_8974276187400030152", new Object[]{});
  }

  @Deprecated
  public static void callSuper_generate_8974276187400029990(SNode thisNode, String callerConceptFqName) {
    BehaviorManager.getInstance().invokeSuper(Void.class, SNodeOperations.cast(thisNode, "jetbrains.mps.lang.resources.structure.IconResource"), callerConceptFqName, "virtual_generate_8974276187400030152", new Class[]{SNode.class}, new Object[]{});
  }
}
