package jetbrains.mps.lang.resources.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.project.SModuleOperations;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.generator.fileGenerator.FileGenerationUtil;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.vfs.IFileUtils;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.util.MacroHelper;
import javax.swing.ImageIcon;

public class IconResource_Behavior {
  public static void init(SNode thisNode) {
  }
  public static void virtual_generate_8974276187400030152(final SNode thisNode) {
    ModelAccess.instance().writeFilesInEDT(new Runnable() {
      public void run() {
        SModel model = SNodeOperations.getModel(thisNode);
        String outputRoot = SModuleOperations.getOutputPathFor(model);
        IFile outputRootFile = FileSystem.getInstance().getFileByPath(outputRoot);
        IFile output = FileGenerationUtil.getDefaultOutputDir(model, outputRootFile);

        // copy 
        String source = MacrosFactory.forModule((AbstractModule) model.getModule()).expandPath(SPropertyOperations.getString(thisNode, MetaAdapterFactory.getProperty(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6caL, 0x7c8b08a50a39c6cbL, "path")));
        IFile sourceFile = FileSystem.getInstance().getFileByPath(source);

        IFileUtils.copyFileContent(sourceFile, output.getDescendant(sourceFile.getName()));
      }
    });
  }
  public static boolean call_isValid_8974276187400030063(SNode thisNode) {
    SModule module = SNodeOperations.getModel(thisNode).getModule();
    if (!(module instanceof AbstractModule)) {
      return false;
    }
    MacroHelper macroHelper = MacrosFactory.forModule((AbstractModule) module);
    if (macroHelper == null) {
      return false;
    }
    String path = macroHelper.expandPath(SPropertyOperations.getString(thisNode, MetaAdapterFactory.getProperty(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6caL, 0x7c8b08a50a39c6cbL, "path")));
    if (path == null) {
      return false;
    }
    IFile file = FileSystem.getInstance().getFileByPath(path);
    if (!(file.exists())) {
      return false;
    }
    try {
      new ImageIcon(path);
      return true;
    } catch (Throwable t) {
      return false;
    }
  }
  public static String call_getFilename_8974276187400030131(SNode thisNode) {
    String fullPath = SPropertyOperations.getString(thisNode, MetaAdapterFactory.getProperty(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6caL, 0x7c8b08a50a39c6cbL, "path"));
    return fullPath.substring(fullPath.lastIndexOf("/") + 1);
  }
}
