package jetbrains.mps.lang.resources.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.CreateRootRuleContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.JavaNameUtil;
import jetbrains.mps.lang.resources.behavior.IconResourceBundle_Behavior;
import jetbrains.mps.lang.resources.behavior.IconResource_Behavior;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.generator.template.IfMacroContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;

@Generated
public class QueriesGenerated {
  public static boolean createRootRule_Condition_6759767305208033198(final IOperationContext operationContext, final CreateRootRuleContext _context) {
    return ListSequence.fromList(SModelOperations.getNodes(_context.getInputModel(), "jetbrains.mps.lang.resources.structure.IconResourceExpression")).isNotEmpty();
  }

  public static Object propertyMacro_GetPropertyValue_2990235398087431176(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "declaration", false), "name");
  }

  public static Object propertyMacro_GetPropertyValue_2990235398087273707(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode irb = SNodeOperations.getAncestor(SLinkOperations.getTarget(_context.getNode(), "declaration", false), "jetbrains.mps.lang.resources.structure.IconResourceBundle", false, false);
    return JavaNameUtil.packageName(SNodeOperations.getModel(irb)) + "." + IconResourceBundle_Behavior.call_getJavaName_8974276187400030159(irb);
  }

  public static Object propertyMacro_GetPropertyValue_7038317550322744907(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return IconResourceBundle_Behavior.call_getJavaName_8974276187400030159(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_2990235398086399637(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_2990235398086953162(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return IconResourceBundle_Behavior.call_getJavaName_8974276187400030159(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1474977673367987868(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return IconResource_Behavior.call_getFilename_8974276187400030131(SLinkOperations.getTarget(_context.getNode(), "icon", true));
  }

  public static Object propertyMacro_GetPropertyValue_6759767305208041200(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return _context.createUniqueName("ICON", null);
  }

  public static Object referenceMacro_GetReferent_6759767305208080925(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getOutputNodeByMappingLabel("map_IconContainer");
  }

  public static Object referenceMacro_GetReferent_6759767305208080928(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "map_IconContainerItem");
  }

  public static Object referenceMacro_GetReferent_2990235398086953122(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return IconResourceBundle_Behavior.call_getJavaName_8974276187400030159(_context.getNode());
  }

  public static Object referenceMacro_GetReferent_2990235398086953146(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return IconResourceBundle_Behavior.call_getJavaName_8974276187400030159(_context.getNode());
  }

  public static Object referenceMacro_GetReferent_2990235398086953187(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return IconResourceBundle_Behavior.call_getJavaName_8974276187400030159(_context.getNode());
  }

  public static boolean ifMacro_Condition_4965310991037828399(final IOperationContext operationContext, final IfMacroContext _context) {
    return isNotEmptyString(SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "icon", true), "path"));
  }

  public static SNode sourceNodeQuery_8814893218132245226(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "iconExpression", true);
  }

  public static SNode sourceNodeQuery_4965310991037946893(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "icon", true), "iconExpression", true);
  }

  public static Iterable sourceNodesQuery_2990235398086399665(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "icons", true);
  }

  public static Iterable sourceNodesQuery_6759767305208041204(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SModelOperations.getNodes(_context.getInputModel(), "jetbrains.mps.lang.resources.structure.IconResourceExpression");
  }

  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
