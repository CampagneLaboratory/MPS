package jetbrains.mps.lang.constraints.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptConceptConstraints = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConceptConstraints").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.structure.structure.IConceptAspect").references("concept", "defaultConcreteConcept").children(new String[]{"property", "referent", "defaultScope", "canBeChild", "canBeRoot", "canBeParent", "canBeAncestor", "alternativeIcon"}, new boolean[]{true, true, false, false, false, false, false, false}).alias("Concept Constraints", "").create();
  /*package*/ final ConceptDescriptor myConceptConceptParameter_ReferentSearchScope_enclosingNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConceptParameter_ReferentSearchScope_enclosingNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("enclosingNode", "parent of the referenceNode, useful when the reference node is not defined yet (null)").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunctionParameter_checkedNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_checkedNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("checkedNode", "node to be validated").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunctionParameter_childConcept = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_childConcept").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("childConcept", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunctionParameter_childNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_childNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("childNode", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunctionParameter_containingLink = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_containingLink").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("containingLink", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunctionParameter_contextNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_contextNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("contextNode", "node with the reference, or closest not-null context node").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunctionParameter_contextRole = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_contextRole").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("contextRole", "target role in contextNode").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunctionParameter_exists = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_exists").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("exists", "false when reference is being created").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunctionParameter_inEditor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_inEditor").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("inEditor", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunctionParameter_link = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_link").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("link", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunctionParameter_linkTarget = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_linkTarget").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("linkTarget", "target concept (useful for specialized links)").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunctionParameter_newReferentNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_newReferentNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("newReferentNode", "new value of the reference").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunctionParameter_oldReferentNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_oldReferentNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("oldReferentNode", "old value of the reference").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunctionParameter_parameterNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_parameterNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("parameterNode", "node to present (target of the referenceNode's reference)").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunctionParameter_parentNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_parentNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("parentNode", "parent node to check").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunctionParameter_position = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_position").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("position", "target index in contextRole").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunctionParameter_referenceNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_referenceNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("referenceNode", "node with the reference").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunctionParameter_smartReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_smartReference").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("smartReference", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunctionParameter_visible = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_visible").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("visible", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunction_CanBeAChild = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAChild").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("", "return false if node cannot be a child of parentNode").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunction_CanBeAParent = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAParent").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("", "return false if node cannot be a parent of given node").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunction_CanBeARoot = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeARoot").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunction_CanBeAnAncestor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAnAncestor").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunction_GetAlternativeIcon = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_GetAlternativeIcon").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunction_PropertyGetter = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertyGetter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("getter", "property getter").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunction_PropertySetter = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertySetter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("setter", "property setter").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunction_PropertyValidator = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertyValidator").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("validator", "property validator").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunction_RefSetHandlerKeepsReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_RefSetHandlerKeepsReference").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("keeps reference", "whether reference set handler keeps original reference").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunction_ReferentSearchScope_AbstractBase = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunction_ReferentSearchScope_Factory = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Factory").super_("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").parents("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase", "jetbrains.mps.lang.constraints.structure.NodeScopeFactory").alias("search scope (deprecated)", "return list of nodes that can be referenced from given node").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunction_ReferentSearchScope_Presentation = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Presentation").super_("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").parents("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").alias("search scope item presentation", "reference presentation in completion list (default - reference name)").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunction_ReferentSearchScope_Scope = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Scope").super_("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").parents("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase", "jetbrains.mps.lang.constraints.structure.NodeScopeFactory").alias("reference scope", "creates scope for the reference (jetbrains.mps.scope.Scope)").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunction_ReferentSearchScope_Validator = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Validator").super_("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").parents("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").alias("reference validity", "return true if the reference is in scope").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintFunction_ReferentSetHandler = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSetHandler").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("'referent set' event handler", "executed on every link assignment").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintsFunctionParameter_node = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintsFunctionParameter_node").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("node", "node in a question").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConstraintsFunctionParameter_propertyValue = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintsFunctionParameter_propertyValue").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("propertyValue", "new value of the node").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInheritedNodeScopeFactory = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.InheritedNodeScopeFactory").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.constraints.structure.NodeScopeFactory").references("kind").alias("inherited", "scope provided by parent elements").create();
  /*package*/ final ConceptDescriptor myConceptNodeDefaultSearchScope = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.NodeDefaultSearchScope").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("description").children(new String[]{"searchScopeFactory", "validator", "presentation"}, new boolean[]{false, false, false}).alias("default search scope", "").create();
  /*package*/ final ConceptDescriptor myConceptNodePropertyConstraint = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.NodePropertyConstraint").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("applicableProperty").children(new String[]{"propertyGetter", "propertySetter", "propertyValidator"}, new boolean[]{false, false, false}).alias("property {<{applicableProperty}>}", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeReferentConstraint = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.NodeReferentConstraint").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("applicableLink").children(new String[]{"searchScopeFactory", "validator", "presentation", "referentSetHandler", "keepsReference"}, new boolean[]{false, false, false, false, false}).alias("link {<{applicableLink}>}", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeScopeFactory = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.NodeScopeFactory").interface_().create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptConceptConstraints, myConceptConceptParameter_ReferentSearchScope_enclosingNode, myConceptConstraintFunctionParameter_checkedNode, myConceptConstraintFunctionParameter_childConcept, myConceptConstraintFunctionParameter_childNode, myConceptConstraintFunctionParameter_containingLink, myConceptConstraintFunctionParameter_contextNode, myConceptConstraintFunctionParameter_contextRole, myConceptConstraintFunctionParameter_exists, myConceptConstraintFunctionParameter_inEditor, myConceptConstraintFunctionParameter_link, myConceptConstraintFunctionParameter_linkTarget, myConceptConstraintFunctionParameter_newReferentNode, myConceptConstraintFunctionParameter_oldReferentNode, myConceptConstraintFunctionParameter_parameterNode, myConceptConstraintFunctionParameter_parentNode, myConceptConstraintFunctionParameter_position, myConceptConstraintFunctionParameter_referenceNode, myConceptConstraintFunctionParameter_smartReference, myConceptConstraintFunctionParameter_visible, myConceptConstraintFunction_CanBeAChild, myConceptConstraintFunction_CanBeAParent, myConceptConstraintFunction_CanBeARoot, myConceptConstraintFunction_CanBeAnAncestor, myConceptConstraintFunction_GetAlternativeIcon, myConceptConstraintFunction_PropertyGetter, myConceptConstraintFunction_PropertySetter, myConceptConstraintFunction_PropertyValidator, myConceptConstraintFunction_RefSetHandlerKeepsReference, myConceptConstraintFunction_ReferentSearchScope_AbstractBase, myConceptConstraintFunction_ReferentSearchScope_Factory, myConceptConstraintFunction_ReferentSearchScope_Presentation, myConceptConstraintFunction_ReferentSearchScope_Scope, myConceptConstraintFunction_ReferentSearchScope_Validator, myConceptConstraintFunction_ReferentSetHandler, myConceptConstraintsFunctionParameter_node, myConceptConstraintsFunctionParameter_propertyValue, myConceptInheritedNodeScopeFactory, myConceptNodeDefaultSearchScope, myConceptNodePropertyConstraint, myConceptNodeReferentConstraint, myConceptNodeScopeFactory);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0tb, conceptFqName)) {
      case 0:
        return myConceptConceptConstraints;
      case 1:
        return myConceptConceptParameter_ReferentSearchScope_enclosingNode;
      case 2:
        return myConceptConstraintFunctionParameter_checkedNode;
      case 3:
        return myConceptConstraintFunctionParameter_childConcept;
      case 4:
        return myConceptConstraintFunctionParameter_childNode;
      case 5:
        return myConceptConstraintFunctionParameter_containingLink;
      case 6:
        return myConceptConstraintFunctionParameter_contextNode;
      case 7:
        return myConceptConstraintFunctionParameter_contextRole;
      case 8:
        return myConceptConstraintFunctionParameter_exists;
      case 9:
        return myConceptConstraintFunctionParameter_inEditor;
      case 10:
        return myConceptConstraintFunctionParameter_link;
      case 11:
        return myConceptConstraintFunctionParameter_linkTarget;
      case 12:
        return myConceptConstraintFunctionParameter_newReferentNode;
      case 13:
        return myConceptConstraintFunctionParameter_oldReferentNode;
      case 14:
        return myConceptConstraintFunctionParameter_parameterNode;
      case 15:
        return myConceptConstraintFunctionParameter_parentNode;
      case 16:
        return myConceptConstraintFunctionParameter_position;
      case 17:
        return myConceptConstraintFunctionParameter_referenceNode;
      case 18:
        return myConceptConstraintFunctionParameter_smartReference;
      case 19:
        return myConceptConstraintFunctionParameter_visible;
      case 20:
        return myConceptConstraintFunction_CanBeAChild;
      case 21:
        return myConceptConstraintFunction_CanBeAParent;
      case 22:
        return myConceptConstraintFunction_CanBeARoot;
      case 23:
        return myConceptConstraintFunction_CanBeAnAncestor;
      case 24:
        return myConceptConstraintFunction_GetAlternativeIcon;
      case 25:
        return myConceptConstraintFunction_PropertyGetter;
      case 26:
        return myConceptConstraintFunction_PropertySetter;
      case 27:
        return myConceptConstraintFunction_PropertyValidator;
      case 28:
        return myConceptConstraintFunction_RefSetHandlerKeepsReference;
      case 29:
        return myConceptConstraintFunction_ReferentSearchScope_AbstractBase;
      case 30:
        return myConceptConstraintFunction_ReferentSearchScope_Factory;
      case 31:
        return myConceptConstraintFunction_ReferentSearchScope_Presentation;
      case 32:
        return myConceptConstraintFunction_ReferentSearchScope_Scope;
      case 33:
        return myConceptConstraintFunction_ReferentSearchScope_Validator;
      case 34:
        return myConceptConstraintFunction_ReferentSetHandler;
      case 35:
        return myConceptConstraintsFunctionParameter_node;
      case 36:
        return myConceptConstraintsFunctionParameter_propertyValue;
      case 37:
        return myConceptInheritedNodeScopeFactory;
      case 38:
        return myConceptNodeDefaultSearchScope;
      case 39:
        return myConceptNodePropertyConstraint;
      case 40:
        return myConceptNodeReferentConstraint;
      case 41:
        return myConceptNodeScopeFactory;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0tb = new String[]{"jetbrains.mps.lang.constraints.structure.ConceptConstraints", "jetbrains.mps.lang.constraints.structure.ConceptParameter_ReferentSearchScope_enclosingNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_checkedNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_childConcept", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_childNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_containingLink", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_contextNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_contextRole", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_exists", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_inEditor", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_link", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_linkTarget", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_newReferentNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_oldReferentNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_parameterNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_parentNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_position", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_referenceNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_smartReference", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_visible", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAChild", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAParent", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeARoot", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAnAncestor", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_GetAlternativeIcon", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertyGetter", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertySetter", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertyValidator", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_RefSetHandlerKeepsReference", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Factory", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Presentation", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Scope", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Validator", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSetHandler", "jetbrains.mps.lang.constraints.structure.ConstraintsFunctionParameter_node", "jetbrains.mps.lang.constraints.structure.ConstraintsFunctionParameter_propertyValue", "jetbrains.mps.lang.constraints.structure.InheritedNodeScopeFactory", "jetbrains.mps.lang.constraints.structure.NodeDefaultSearchScope", "jetbrains.mps.lang.constraints.structure.NodePropertyConstraint", "jetbrains.mps.lang.constraints.structure.NodeReferentConstraint", "jetbrains.mps.lang.constraints.structure.NodeScopeFactory"};
}
