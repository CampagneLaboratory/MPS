package jetbrains.mps.lang.constraints.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConceptConstraints", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConceptParameter_ReferentSearchScope_enclosingNode", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_checkedNode", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_childConcept", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_childNode", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_containingLink", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_contextNode", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_contextRole", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_exists", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_inEditor", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_link", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_linkTarget", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_newReferentNode", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_oldReferentNode", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_parameterNode", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_parentNode", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_position", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_referenceNode", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_smartReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_visible", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAChild", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAParent", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeARoot", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAnAncestor", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunction_GetAlternativeIcon", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertyGetter", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertySetter", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertyValidator", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunction_RefSetHandlerKeepsReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Factory", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Presentation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Scope", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Validator", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSetHandler", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintsFunctionParameter_node", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.ConstraintsFunctionParameter_propertyValue", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.InheritedNodeScopeFactory", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.NodeDefaultSearchScope", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.NodePropertyConstraint", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.NodeReferentConstraint", null);
    myFqNameToConcept.put("jetbrains.mps.lang.constraints.structure.NodeScopeFactory", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConceptConstraints").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.structure.structure.IConceptAspect").references("concept", "defaultConcreteConcept").children(new String[]{"property", "referent", "defaultScope", "canBeChild", "canBeRoot", "canBeParent", "canBeAncestor", "alternativeIcon"}, new boolean[]{true, true, false, false, false, false, false, false}).alias("Concept Constraints", "").create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConceptParameter_ReferentSearchScope_enclosingNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("enclosingNode", "parent of the referenceNode, useful when the reference node is not defined yet (null)").staticScope(StaticScope.NONE).create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_checkedNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("checkedNode", "node to be validated").staticScope(StaticScope.NONE).create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_childConcept").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("childConcept", "").staticScope(StaticScope.NONE).create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_childNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("childNode", "").staticScope(StaticScope.NONE).create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_containingLink").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("containingLink", "").staticScope(StaticScope.NONE).create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_contextNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("contextNode", "node with the reference, or closest not-null context node").staticScope(StaticScope.NONE).create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_contextRole").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("contextRole", "target role in contextNode").staticScope(StaticScope.NONE).create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_exists").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("exists", "false when reference is being created").staticScope(StaticScope.NONE).create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_inEditor").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("inEditor", "").staticScope(StaticScope.NONE).create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_link").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("link", "").staticScope(StaticScope.NONE).create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_linkTarget").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("linkTarget", "target concept (useful for specialized links)").staticScope(StaticScope.NONE).create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_newReferentNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("newReferentNode", "new value of the reference").staticScope(StaticScope.NONE).create();
        break;
      case 13:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_oldReferentNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("oldReferentNode", "old value of the reference").staticScope(StaticScope.NONE).create();
        break;
      case 14:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_parameterNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("parameterNode", "node to present (target of the referenceNode's reference)").staticScope(StaticScope.NONE).create();
        break;
      case 15:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_parentNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("parentNode", "parent node to check").staticScope(StaticScope.NONE).create();
        break;
      case 16:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_position").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("position", "target index in contextRole").staticScope(StaticScope.NONE).create();
        break;
      case 17:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_referenceNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("referenceNode", "node with the reference").staticScope(StaticScope.NONE).create();
        break;
      case 18:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_smartReference").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("smartReference", "").staticScope(StaticScope.NONE).create();
        break;
      case 19:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_visible").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("visible", "").staticScope(StaticScope.NONE).create();
        break;
      case 20:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAChild").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("", "return false if node cannot be a child of parentNode").staticScope(StaticScope.NONE).create();
        break;
      case 21:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAParent").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("", "return false if node cannot be a parent of given node").staticScope(StaticScope.NONE).create();
        break;
      case 22:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeARoot").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
        break;
      case 23:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAnAncestor").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
        break;
      case 24:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_GetAlternativeIcon").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
        break;
      case 25:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertyGetter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("getter", "property getter").staticScope(StaticScope.NONE).create();
        break;
      case 26:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertySetter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("setter", "property setter").staticScope(StaticScope.NONE).create();
        break;
      case 27:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertyValidator").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("validator", "property validator").staticScope(StaticScope.NONE).create();
        break;
      case 28:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_RefSetHandlerKeepsReference").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("keeps reference", "whether reference set handler keeps original reference").staticScope(StaticScope.NONE).create();
        break;
      case 29:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 30:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Factory").super_("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").parents("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase", "jetbrains.mps.lang.constraints.structure.NodeScopeFactory").alias("search scope (deprecated)", "return list of nodes that can be referenced from given node").staticScope(StaticScope.NONE).create();
        break;
      case 31:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Presentation").super_("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").parents("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").alias("search scope item presentation", "reference presentation in completion list (default - reference name)").staticScope(StaticScope.NONE).create();
        break;
      case 32:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Scope").super_("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").parents("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase", "jetbrains.mps.lang.constraints.structure.NodeScopeFactory").alias("reference scope", "creates scope for the reference (jetbrains.mps.scope.Scope)").staticScope(StaticScope.NONE).create();
        break;
      case 33:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Validator").super_("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").parents("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase").alias("reference validity", "return true if the reference is in scope").staticScope(StaticScope.NONE).create();
        break;
      case 34:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSetHandler").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("'referent set' event handler", "executed on every link assignment").staticScope(StaticScope.NONE).create();
        break;
      case 35:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintsFunctionParameter_node").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("node", "node in a question").staticScope(StaticScope.NONE).create();
        break;
      case 36:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.ConstraintsFunctionParameter_propertyValue").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("propertyValue", "new value of the node").staticScope(StaticScope.NONE).create();
        break;
      case 37:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.InheritedNodeScopeFactory").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.constraints.structure.NodeScopeFactory").references("kind").alias("inherited", "scope provided by parent elements").create();
        break;
      case 38:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.NodeDefaultSearchScope").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("description").children(new String[]{"searchScopeFactory", "validator", "presentation"}, new boolean[]{false, false, false}).alias("default search scope", "").create();
        break;
      case 39:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.NodePropertyConstraint").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("applicableProperty").children(new String[]{"propertyGetter", "propertySetter", "propertyValidator"}, new boolean[]{false, false, false}).alias("property {<{applicableProperty}>}", "").create();
        break;
      case 40:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.NodeReferentConstraint").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("applicableLink").children(new String[]{"searchScopeFactory", "validator", "presentation", "referentSetHandler", "keepsReference"}, new boolean[]{false, false, false, false, false}).alias("link {<{applicableLink}>}", "").create();
        break;
      case 41:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.constraints.structure.NodeScopeFactory").interface_().create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.lang.constraints.structure.ConceptConstraints", "jetbrains.mps.lang.constraints.structure.ConceptParameter_ReferentSearchScope_enclosingNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_checkedNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_childConcept", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_childNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_containingLink", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_contextNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_contextRole", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_exists", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_inEditor", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_link", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_linkTarget", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_newReferentNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_oldReferentNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_parameterNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_parentNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_position", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_referenceNode", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_smartReference", "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_visible", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAChild", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAParent", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeARoot", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAnAncestor", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_GetAlternativeIcon", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertyGetter", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertySetter", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertyValidator", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_RefSetHandlerKeepsReference", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Factory", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Presentation", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Scope", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Validator", "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSetHandler", "jetbrains.mps.lang.constraints.structure.ConstraintsFunctionParameter_node", "jetbrains.mps.lang.constraints.structure.ConstraintsFunctionParameter_propertyValue", "jetbrains.mps.lang.constraints.structure.InheritedNodeScopeFactory", "jetbrains.mps.lang.constraints.structure.NodeDefaultSearchScope", "jetbrains.mps.lang.constraints.structure.NodePropertyConstraint", "jetbrains.mps.lang.constraints.structure.NodeReferentConstraint", "jetbrains.mps.lang.constraints.structure.NodeScopeFactory"};
}
