package jetbrains.mps.lang.traceable.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IPropertiesPersistence;
import jetbrains.mps.make.facet.ITargetEx;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.resources.IPropertiesAccessor;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.smodel.resources.TResource;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.make.delta.IDelta;
import jetbrains.mps.internal.make.runtime.util.FilesDelta;
import jetbrains.mps.generator.traceInfo.TraceInfoCache;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.vfs.IFileUtils;
import jetbrains.mps.make.script.IConfig;
import java.util.Map;
import jetbrains.mps.make.script.IPropertiesPool;

public class CopyTraceInfo_Facet extends IFacet.Stub {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("jetbrains.mps.lang.traceable.CopyTraceInfo");

  public CopyTraceInfo_Facet() {
    ListSequence.fromList(targets).addElement(new CopyTraceInfo_Facet.Target_copyTraceInfo());
  }

  public Iterable<ITarget> targets() {
    return targets;
  }

  public Iterable<IFacet.Name> optional() {
    return null;
  }

  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.lang.core.Generate"), new IFacet.Name("jetbrains.mps.lang.core.TextGen")});
  }

  public Iterable<IFacet.Name> extended() {
    return null;
  }

  public IFacet.Name getName() {
    return this.name;
  }

  public IPropertiesPersistence propertiesPersistence() {
    return new CopyTraceInfo_Facet.TargetProperties();
  }

  public static class Target_copyTraceInfo implements ITargetEx {
    private static Class<? extends IResource>[] EXPECTED_INPUT = (Class<? extends IResource>[]) new Class[]{IResource.class};
    private static Class<? extends IResource>[] EXPECTED_OUTPUT = (Class<? extends IResource>[]) new Class[]{};

    private ITarget.Name name = new ITarget.Name("jetbrains.mps.lang.traceable.CopyTraceInfo.copyTraceInfo");

    public Target_copyTraceInfo() {
    }

    public IJob createJob() {
      return new IJob.Stub() {
        public IResult execute(final Iterable<IResource> input, final IJobMonitor monitor, final IPropertiesAccessor pa) {
          Iterable<IResource> _output_zgz0lb_a0a = null;
          switch (0) {
            case 0:
              final List<IFile> toCreate = ListSequence.fromList(new ArrayList<IFile>());
              final List<Tuples._2<IFile, IFile>> toCopy = ListSequence.fromList(new ArrayList<Tuples._2<IFile, IFile>>());
              for (IResource resource : input) {
                TResource tres = (TResource) resource;
                final IFile destination = tres.module().getClassesGen().getDescendant(tres.modelDescriptor().getLongName().replace(".", "/"));
                if (!(destination.exists())) {
                  ListSequence.fromList(toCreate).addElement(destination);
                }
                Sequence.fromIterable(tres.delta()).visitAll(new IVisitor<IDelta>() {
                  public void visit(IDelta it) {
                    it.acceptVisitor(new FilesDelta.Visitor() {
                      @Override
                      public boolean acceptWritten(IFile file) {
                        if (file.getName().equals(TraceInfoCache.TRACE_FILE_NAME)) {
                          IFile copy = destination.getDescendant(file.getName());
                          ListSequence.fromList(toCopy).addElement(MultiTuple.<IFile,IFile>from(file, copy));
                        }
                        return true;
                      }
                    });
                  }
                });

                _output_zgz0lb_a0a = Sequence.fromIterable(_output_zgz0lb_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(resource)));
              }
              FileSystem.getInstance().runWriteTransaction(new Runnable() {
                public void run() {
                  ListSequence.fromList(toCreate).visitAll(new IVisitor<IFile>() {
                    public void visit(IFile it) {
                      it.mkdirs();
                    }
                  });
                  ListSequence.fromList(toCopy).visitAll(new IVisitor<Tuples._2<IFile, IFile>>() {
                    public void visit(Tuples._2<IFile, IFile> ftc) {
                      IFileUtils.copyFileContent(ftc._0(), ftc._1());
                    }
                  });
                }
              });
            default:
              return new IResult.SUCCESS(_output_zgz0lb_a0a);
          }
        }
      };
    }

    public IConfig createConfig() {
      return null;
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGen")});
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.Make.reconcile")});
    }

    public ITarget.Name getName() {
      return name;
    }

    public boolean isOptional() {
      return false;
    }

    public boolean requiresInput() {
      return true;
    }

    public boolean producesOutput() {
      return true;
    }

    public Iterable<Class<? extends IResource>> expectedInput() {
      return Sequence.fromArray(EXPECTED_INPUT);
    }

    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }

    public <T> T createParameters(Class<T> cls) {
      return null;
    }

    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      return t;
    }
  }

  public static class TargetProperties implements IPropertiesPersistence {
    public TargetProperties() {
    }

    public void storeValues(Map<String, String> store, IPropertiesPool properties) {
    }

    public void loadValues(Map<String, String> store, IPropertiesPool properties) {
      try {
      } catch (RuntimeException re) {
      }
    }
  }
}
