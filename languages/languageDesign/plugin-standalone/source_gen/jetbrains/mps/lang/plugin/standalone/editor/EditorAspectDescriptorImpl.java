package jetbrains.mps.lang.plugin.standalone.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.EditorAspect;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public Collection<EditorAspect> getEditorAspects(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<EditorAspect>singletonList(new ApplicationPluginDeclaration_Editor());
      case 1:
        return Collections.<EditorAspect>singletonList(new ApplicationPluginType_Editor());
      case 2:
        return Collections.<EditorAspect>singletonList(new GetPreferencesComponentInProjectOperation_Editor());
      case 3:
        return Collections.<EditorAspect>singletonList(new GetToolInProjectOperation_Editor());
      case 4:
        return Collections.<EditorAspect>singletonList(new ProjectPluginDeclaration_Editor());
      case 5:
        return Collections.<EditorAspect>singletonList(new ProjectPluginType_Editor());
      case 6:
        return Collections.<EditorAspect>singletonList(new StandalonePluginDescriptor_Editor());
      default:
    }
    return Collections.emptyList();
  }

  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.lang.plugin.standalone.structure.ApplicationPluginDeclaration", "jetbrains.mps.lang.plugin.standalone.structure.ApplicationPluginType", "jetbrains.mps.lang.plugin.standalone.structure.GetPreferencesComponentInProjectOperation", "jetbrains.mps.lang.plugin.standalone.structure.GetToolInProjectOperation", "jetbrains.mps.lang.plugin.standalone.structure.ProjectPluginDeclaration", "jetbrains.mps.lang.plugin.standalone.structure.ProjectPluginType", "jetbrains.mps.lang.plugin.standalone.structure.StandalonePluginDescriptor"};
}
