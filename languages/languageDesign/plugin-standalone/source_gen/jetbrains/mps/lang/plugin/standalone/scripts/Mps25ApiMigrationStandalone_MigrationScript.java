package jetbrains.mps.lang.plugin.standalone.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.IterableUtil;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.lang.script.runtime.StubRefUtil;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class Mps25ApiMigrationStandalone_MigrationScript extends BaseMigrationScript {
  public Mps25ApiMigrationStandalone_MigrationScript(IOperationContext operationContext) {
    super("API Migration Standalone");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "GetToolOperation";
      }

      public String getAdditionalInfo() {
        return "GetToolOperation";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.baseLanguage.structure.DotExpression";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        SNode operation = SLinkOperations.getTarget(node, "operation", true);
        return SNodeOperations.getConceptDeclaration(operation) == null && "jetbrains.mps.lang.plugin.structure.GetToolOperation".equals(operation.getConcept().getQualifiedName());
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode operation = SLinkOperations.getTarget(node, "operation", true);
        SNode tool = null;
        if (IterableUtil.asCollection(operation.getReferences()).size() > 0) {
          SReference sref = operation.getReferences().iterator().next();
          tool = sref.getTargetNode();
        }
        StubRefUtil.replaceNode(node, _quotation_createNode_rdc33q_b0d0a0(tool, SLinkOperations.getTarget(node, "operand", true)));
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }

  private static SNode _quotation_createNode_rdc33q_b0d0a0(Object parameter_1, Object parameter_2) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.plugin.standalone.structure.GetToolInProjectOperation", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_4, "tool", (SNode) parameter_1);
    quotedNode_3.addChild("operation", quotedNode_4);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_6 = (SNode) parameter_2;
    if (quotedNode_6 != null) {
      quotedNode_5.addChild("operand", HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_7.setReference("baseMethodDeclaration", jetbrains.mps.smodel.SReference.create("baseMethodDeclaration", quotedNode_7, facade.createModelReference("f:java_stub#742f6602-5a2f-4313-aa6e-ae1cd4ffdc61#jetbrains.mps.project(MPS.Platform/jetbrains.mps.project@java_stub)"), facade.createNodeId("~MPSProject.getProject():com.intellij.openapi.project.Project")));
    quotedNode_5.addChild("operation", quotedNode_7);
    quotedNode_3.addChild("operand", quotedNode_5);
    return quotedNode_3;
  }
}
