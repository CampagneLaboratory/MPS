package jetbrains.mps.lang.findUsages.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractFinderDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.AbstractFinderDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("forConcept").children(new String[]{"isApplicableFunction", "findFunction", "searchedNodesBlock", "categorizeBlock"}, new boolean[]{false, false, false, false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptCategorizeBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.CategorizeBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("getCategory", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCheckCancelledStatusStatement = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.CheckCancelledStatusStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").alias("check cancelled status", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_node = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.ConceptFunctionParameter_node").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("node", "function parameter").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExecuteFinderExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.ExecuteFinderExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("finder").children(new String[]{"queryNode", "queryScope", "monitor"}, new boolean[]{false, false, false}).alias("execute", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExecuteFindersGetSearchResults = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.ExecuteFindersGetSearchResults").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"queryNode", "scope", "progress", "finder"}, new boolean[]{false, false, false, true}).alias("execute finders", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptFindBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.FindBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("find", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptFinderDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.FinderDeclaration").super_("jetbrains.mps.lang.findUsages.structure.AbstractFinderDeclaration").parents("jetbrains.mps.lang.findUsages.structure.AbstractFinderDeclaration", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.checkedName.structure.ICheckedNamePolicy", "jetbrains.mps.lang.structure.structure.IConceptAspect").properties("description", "longDescription").children(new String[]{"isVisibleBlock", "isUsedByDefault"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptFinderReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.FinderReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("finder").create();
  /*package*/ final ConceptDescriptor myConceptIsApplicableBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.IsApplicableBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("isApplicable", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIsUsedByDefault = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.IsUsedByDefault").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("isUsedByDefault", "").create();
  /*package*/ final ConceptDescriptor myConceptIsVisibleBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.IsVisibleBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("isVisible", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMakeResultProvider = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.MakeResultProvider").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"finder"}, new boolean[]{true}).alias("make result provider", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNodeStatement = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.NodeStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"foundNode"}, new boolean[]{false}).alias("add node", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptResultStatement = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.ResultStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"foundNode"}, new boolean[]{false}).alias("add result", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSearchedNodesBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.SearchedNodesBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("getSearchedNodes", "").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractFinderDeclaration, myConceptCategorizeBlock, myConceptCheckCancelledStatusStatement, myConceptConceptFunctionParameter_node, myConceptExecuteFinderExpression, myConceptExecuteFindersGetSearchResults, myConceptFindBlock, myConceptFinderDeclaration, myConceptFinderReference, myConceptIsApplicableBlock, myConceptIsUsedByDefault, myConceptIsVisibleBlock, myConceptMakeResultProvider, myConceptNodeStatement, myConceptResultStatement, myConceptSearchedNodesBlock);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0t, conceptFqName)) {
      case 0:
        return myConceptAbstractFinderDeclaration;
      case 1:
        return myConceptCategorizeBlock;
      case 2:
        return myConceptCheckCancelledStatusStatement;
      case 3:
        return myConceptConceptFunctionParameter_node;
      case 4:
        return myConceptExecuteFinderExpression;
      case 5:
        return myConceptExecuteFindersGetSearchResults;
      case 6:
        return myConceptFindBlock;
      case 7:
        return myConceptFinderDeclaration;
      case 8:
        return myConceptFinderReference;
      case 9:
        return myConceptIsApplicableBlock;
      case 10:
        return myConceptIsUsedByDefault;
      case 11:
        return myConceptIsVisibleBlock;
      case 12:
        return myConceptMakeResultProvider;
      case 13:
        return myConceptNodeStatement;
      case 14:
        return myConceptResultStatement;
      case 15:
        return myConceptSearchedNodesBlock;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0t = new String[]{"jetbrains.mps.lang.findUsages.structure.AbstractFinderDeclaration", "jetbrains.mps.lang.findUsages.structure.CategorizeBlock", "jetbrains.mps.lang.findUsages.structure.CheckCancelledStatusStatement", "jetbrains.mps.lang.findUsages.structure.ConceptFunctionParameter_node", "jetbrains.mps.lang.findUsages.structure.ExecuteFinderExpression", "jetbrains.mps.lang.findUsages.structure.ExecuteFindersGetSearchResults", "jetbrains.mps.lang.findUsages.structure.FindBlock", "jetbrains.mps.lang.findUsages.structure.FinderDeclaration", "jetbrains.mps.lang.findUsages.structure.FinderReference", "jetbrains.mps.lang.findUsages.structure.IsApplicableBlock", "jetbrains.mps.lang.findUsages.structure.IsUsedByDefault", "jetbrains.mps.lang.findUsages.structure.IsVisibleBlock", "jetbrains.mps.lang.findUsages.structure.MakeResultProvider", "jetbrains.mps.lang.findUsages.structure.NodeStatement", "jetbrains.mps.lang.findUsages.structure.ResultStatement", "jetbrains.mps.lang.findUsages.structure.SearchedNodesBlock"};
}
