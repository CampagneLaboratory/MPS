package jetbrains.mps.lang.findUsages.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myFindBlock_BehaviorDescriptor = new FindBlock_BehaviorDescriptor();
  private final BHDescriptor myFinderDeclaration_BehaviorDescriptor = new FinderDeclaration_BehaviorDescriptor();
  private final BHDescriptor myIsApplicableBlock_BehaviorDescriptor = new IsApplicableBlock_BehaviorDescriptor();
  private final BHDescriptor myResultStatement_BehaviorDescriptor = new ResultStatement_BehaviorDescriptor();
  private final BHDescriptor myNodeStatement_BehaviorDescriptor = new NodeStatement_BehaviorDescriptor();
  private final BHDescriptor myExecuteFinderExpression_BehaviorDescriptor = new ExecuteFinderExpression_BehaviorDescriptor();
  private final BHDescriptor myCategorizeBlock_BehaviorDescriptor = new CategorizeBlock_BehaviorDescriptor();
  private final BHDescriptor mySearchedNodesBlock_BehaviorDescriptor = new SearchedNodesBlock_BehaviorDescriptor();
  private final BHDescriptor myCheckCancelledStatusStatement_BehaviorDescriptor = new CheckCancelledStatusStatement_BehaviorDescriptor();
  private final BHDescriptor myIsVisibleBlock_BehaviorDescriptor = new IsVisibleBlock_BehaviorDescriptor();
  private final BHDescriptor myIsUsedByDefault_BehaviorDescriptor = new IsUsedByDefault_BehaviorDescriptor();

  private final long[] myConceptBehaviorIds;

  public BehaviorAspectDescriptor() {
    myConceptBehaviorIds = new long[11];
    myConceptBehaviorIds[0] = 0x116b5695a88L;
    myConceptBehaviorIds[1] = 0x116b5695a8dL;
    myConceptBehaviorIds[2] = 0x116b5695a94L;
    myConceptBehaviorIds[3] = 0x1177404a3f4L;
    myConceptBehaviorIds[4] = 0x1177408145aL;
    myConceptBehaviorIds[5] = 0x118d6fce801L;
    myConceptBehaviorIds[6] = 0x118e6b14c36L;
    myConceptBehaviorIds[7] = 0x118e6b5cc19L;
    myConceptBehaviorIds[8] = 0x1190f427b83L;
    myConceptBehaviorIds[9] = 0x11b36e60151L;
    myConceptBehaviorIds[10] = 0x1660f4e85a04a8fL;
  }

  @Deprecated
  @Override
  public BehaviorDescriptor getDescriptor(String fqName) {
    return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
  }

  @Nullable
  @Override
  public BHDescriptor getDescriptor(@NotNull SConceptId conceptId) {
    int behaviorIndex = Arrays.binarySearch(myConceptBehaviorIds, conceptId.getIdValue());
    switch (behaviorIndex) {
      case 0:
        return myFindBlock_BehaviorDescriptor;
      case 1:
        return myFinderDeclaration_BehaviorDescriptor;
      case 2:
        return myIsApplicableBlock_BehaviorDescriptor;
      case 3:
        return myResultStatement_BehaviorDescriptor;
      case 4:
        return myNodeStatement_BehaviorDescriptor;
      case 5:
        return myExecuteFinderExpression_BehaviorDescriptor;
      case 6:
        return myCategorizeBlock_BehaviorDescriptor;
      case 7:
        return mySearchedNodesBlock_BehaviorDescriptor;
      case 8:
        return myCheckCancelledStatusStatement_BehaviorDescriptor;
      case 9:
        return myIsVisibleBlock_BehaviorDescriptor;
      case 10:
        return myIsUsedByDefault_BehaviorDescriptor;
      default:
        return null;
    }
  }
}
