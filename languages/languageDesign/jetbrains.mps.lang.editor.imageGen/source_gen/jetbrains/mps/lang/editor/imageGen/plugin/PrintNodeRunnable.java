package jetbrains.mps.lang.editor.imageGen.plugin;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.module.SRepository;
import java.io.ByteArrayOutputStream;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.editor.runtime.HeadlessEditorComponent;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.IOException;

public class PrintNodeRunnable implements Runnable {
  private boolean myExecuted;
  private SNodeReference myNodeReference;
  private SRepository myRepository;
  private ByteArrayOutputStream myResult;
  private String myErrorMessage = null;

  public PrintNodeRunnable(SNodeReference nodeReference, SRepository repository) {
    myNodeReference = nodeReference;
    myRepository = repository;
  }

  public void run() {
    try {
      doPrintNode();
    } finally {
      synchronized (this) {
        myExecuted = true;
        notifyAll();
      }
    }
  }

  public boolean waitForExecution() {
    try {
      synchronized (this) {
        while (!(myExecuted)) {
          wait();
        }
      }
    } catch (InterruptedException e) {
    }
    return myResult != null;
  }

  public String getErrorMessage() {
    return myErrorMessage;
  }

  public byte[] getResult() {
    return myResult.toByteArray();
  }

  private void doPrintNode() {
    SNode node = myNodeReference.resolve(myRepository);
    if (node == null) {
      myErrorMessage = "Can't find node " + myNodeReference + " inside repository: " + myRepository;
      return;
    }

    HeadlessEditorComponent editorComponent = new HeadlessEditorComponent(node, myRepository);
    try {
      EditorCell rootCell = editorComponent.getRootCell();
      BufferedImage image = new BufferedImage(rootCell.getWidth(), rootCell.getHeight(), BufferedImage.TYPE_INT_ARGB);
      rootCell.paint(image.getGraphics());
      try {
        myResult = new ByteArrayOutputStream();
        ImageIO.write(image, "png", myResult);
      } catch (IOException ioex) {
        myResult = null;
        myErrorMessage = "Exception while writing image: " + ioex.toString();
      }
    } finally {
      editorComponent.dispose();
    }
  }
}
