package jetbrains.mps.lang.editor.diagram.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.style.ParametersInformation;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.editor.runtime.style.StyledTextPrinter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class DiagramNodeParameters implements ParametersInformation<SNode> {
  public DiagramNodeParameters() {
  }

  public Iterable<SNode> getMethods(SNode node, EditorContext editorContext) {
    return Collections.singletonList(SLinkOperations.getTarget(node, "figure", true));
  }

  public void getStyledMethodPresentation(SNode node, EditorContext editorContext, SNode parameterObject, StyledTextPrinter styledText) {
    if (SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(node, "figure", true)) == SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.diagram.structure.AbstractFigureReference")) {
      styledText.append("null()");
      return;
    }
    styledText.append(SLinkOperations.getTarget(node, "figure", true).getPresentation());
    styledText.append("(");
    SNode selectedNode = editorContext.getSelectedNode();
    Set<String> definedParameters = SetSequence.fromSetWithValues(new HashSet<String>(), BehaviorReflection.invokeVirtual((Class<List<String>>) ((Class) Object.class), parameterObject, "virtual_getFigureParameterNames_1491555030356445722", new Object[]{}));
    Set<String> specifiedParameters = SetSequence.fromSet(new HashSet<String>());
    boolean isEmpty = true;
    for (SNode nextExistingParameter : ListSequence.fromList(SLinkOperations.getTargets(node, "parameter", true))) {
      if (SetSequence.fromSet(definedParameters).contains(SPropertyOperations.getString(nextExistingParameter, "name")) && !(SetSequence.fromSet(specifiedParameters).contains(SPropertyOperations.getString(nextExistingParameter, "name")))) {
        if (nextExistingParameter == selectedNode) {
          styledText.setBold(true);
        }
        this.appendParameter(SPropertyOperations.getString(nextExistingParameter, "name"), styledText, isEmpty);
        styledText.setBold(false);
        SetSequence.fromSet(specifiedParameters).addElement(SPropertyOperations.getString(nextExistingParameter, "name"));
        isEmpty = false;
      }
    }
    for (String nextFigureParameter : ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<String>>) ((Class) Object.class), parameterObject, "virtual_getFigureParameterNames_1491555030356445722", new Object[]{}))) {
      if (!(SetSequence.fromSet(specifiedParameters).contains(nextFigureParameter))) {
        this.appendParameter(nextFigureParameter, styledText, isEmpty);
        isEmpty = false;
      }
    }
    styledText.append(")");
  }

  public boolean isMethodCurrent(SNode node, EditorContext editorContext, SNode parameterObject) {
    return SLinkOperations.getTarget(node, "figure", true) == parameterObject;
  }

  private void appendParameter(String parameterName, StyledTextPrinter styledText, boolean isEmpty) {
    if (!(isEmpty)) {
      styledText.append(", ");
    }
    styledText.append(parameterName);
  }
}
