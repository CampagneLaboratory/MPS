package jetbrains.mps.lang.checkedName.typesystem;

/*Generated by MPS */

import jetbrains.mps.errors.QuickFix_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.checkedName.PropertyReference;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class FixNamingPolicy_QuickFix extends QuickFix_Runtime {
  public FixNamingPolicy_QuickFix() {
  }
  public String getDescription(SNode node) {
    return "Fix Naming Issues";
  }
  public void execute(SNode node) {
    for (SNode s : BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), ((SNode) FixNamingPolicy_QuickFix.this.getField("nodeToFix")[0]), "virtual_getDescendantsToCheck_4844813484172611413", new Object[]{})) {
      SPropertyOperations.set(s, "value", NameUtil.captionPartWithNamingPolicy(SPropertyOperations.getString(s, "value")));
    }
    for (PropertyReference p : BehaviorReflection.invokeVirtual((Class<List<PropertyReference>>) ((Class) Object.class), ((SNode) FixNamingPolicy_QuickFix.this.getField("nodeToFix")[0]), "virtual_getPropertiesToCheck_4844813484172611445", new Object[]{})) {
      String value = SNodeAccessUtil.getProperty(p.getNode(), p.getProperty());
      String newValue = NameUtil.captionWithNamingPolicy(value);
      SNodeAccessUtil.setProperty(p.getNode(), p.getProperty(), newValue);
    }
  }
}
