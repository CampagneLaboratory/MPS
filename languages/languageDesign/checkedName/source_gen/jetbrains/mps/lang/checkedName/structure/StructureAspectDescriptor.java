package jetbrains.mps.lang.checkedName.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptICheckedNamePolicy = new ConceptDescriptorBuilder("jetbrains.mps.lang.checkedName.structure.ICheckedNamePolicy").interface_().create();
  /*package*/ final ConceptDescriptor myConceptPropertyRefExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.checkedName.structure.PropertyRefExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("propertyDeclaration").children(new String[]{"nodeExpr"}, new boolean[]{false}).alias("property/<node>,<role>/", "property reference").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPropertyRefType = new ConceptDescriptorBuilder("jetbrains.mps.lang.checkedName.structure.PropertyRefType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("propRef", "").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptICheckedNamePolicy, myConceptPropertyRefExpression, myConceptPropertyRefType);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0g, conceptFqName)) {
      case 0:
        return myConceptICheckedNamePolicy;
      case 1:
        return myConceptPropertyRefExpression;
      case 2:
        return myConceptPropertyRefType;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0g = new String[]{"jetbrains.mps.lang.checkedName.structure.ICheckedNamePolicy", "jetbrains.mps.lang.checkedName.structure.PropertyRefExpression", "jetbrains.mps.lang.checkedName.structure.PropertyRefType"};
}
