package jetbrains.mps.lang.checkedName.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.UUID;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {

  /*package*/ final ConceptDescriptor myConceptICheckedNamePolicy = new ConceptDescriptorBuilder("jetbrains.mps.lang.checkedName.structure.ICheckedNamePolicy", MetaIdFactory.conceptId(new UUID(-99792949465233975L, -5897283353115830529L), 4844813484172611384L)).interface_().create();
  /*package*/ final ConceptDescriptor myConceptPropertyRefExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.checkedName.structure.PropertyRefExpression", MetaIdFactory.conceptId(new UUID(-99792949465233975L, -5897283353115830529L), 4844813484172611385L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(4844813484172611387L, "propertyDeclaration", MetaIdFactory.conceptId(new UUID(-4094437568663370681L, -8968368868337559369L), 1071489288299L), false)).references("propertyDeclaration").childDescriptors(new ConceptDescriptorBuilder.Link(4844813484172611386L, "nodeExpr", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false)).children(new String[]{"nodeExpr"}, new boolean[]{false}).alias("property/<node>,<role>/", "property reference").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPropertyRefType = new ConceptDescriptorBuilder("jetbrains.mps.lang.checkedName.structure.PropertyRefType", MetaIdFactory.conceptId(new UUID(-99792949465233975L, -5897283353115830529L), 4844813484172611390L)).super_("jetbrains.mps.baseLanguage.structure.Type").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790189L)).parents("jetbrains.mps.baseLanguage.structure.Type").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790189L)).alias("propRef", "").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptICheckedNamePolicy, myConceptPropertyRefExpression, myConceptPropertyRefType);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0h, conceptFqName)) {
      case 0:
        return myConceptICheckedNamePolicy;
      case 1:
        return myConceptPropertyRefExpression;
      case 2:
        return myConceptPropertyRefType;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0h = new String[]{"jetbrains.mps.lang.checkedName.structure.ICheckedNamePolicy", "jetbrains.mps.lang.checkedName.structure.PropertyRefExpression", "jetbrains.mps.lang.checkedName.structure.PropertyRefType"};
}
