package jetbrains.mps.lang.classLike.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptClassLikeAnnotation = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.ClassLikeAnnotation").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").references("descriptor").create();
  /*package*/ final ConceptDescriptor myConceptClassLikeBooleanProperty = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.ClassLikeBooleanProperty").super_("jetbrains.mps.lang.classLike.structure.ClassLikeProperty").parents("jetbrains.mps.lang.classLike.structure.ClassLikeProperty").properties("value").create();
  /*package*/ final ConceptDescriptor myConceptClassLikeDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.ClassLikeDescriptor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").references("preferredConcept").children(new String[]{"initializer", "member"}, new boolean[]{false, true}).create();
  /*package*/ final ConceptDescriptor myConceptClassLikeIntegerProperty = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.ClassLikeIntegerProperty").super_("jetbrains.mps.lang.classLike.structure.ClassLikeProperty").parents("jetbrains.mps.lang.classLike.structure.ClassLikeProperty").properties("value").create();
  /*package*/ final ConceptDescriptor myConceptClassLikeMember = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.ClassLikeMember").interface_().children(new String[]{"modifier"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptClassLikeMemberInstance = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.ClassLikeMemberInstance").interface_().create();
  /*package*/ final ConceptDescriptor myConceptClassLikeMemberPlaceholder = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.ClassLikeMemberPlaceholder").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.classLike.structure.ClassLikeMemberInstance", "jetbrains.mps.baseLanguage.structure.ClassifierMember", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("caption").references("decl").create();
  /*package*/ final ConceptDescriptor myConceptClassLikeMethod = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.ClassLikeMethod").super_("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", "jetbrains.mps.lang.classLike.structure.ClassLikeMemberInstance", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("decl").create();
  /*package*/ final ConceptDescriptor myConceptClassLikeProperty = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.ClassLikeProperty").super_("jetbrains.mps.baseLanguage.structure.FieldDeclaration").parents("jetbrains.mps.baseLanguage.structure.FieldDeclaration", "jetbrains.mps.lang.classLike.structure.ClassLikeMemberInstance", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("decl").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptClassLikeStringProperty = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.ClassLikeStringProperty").super_("jetbrains.mps.lang.classLike.structure.ClassLikeProperty").parents("jetbrains.mps.lang.classLike.structure.ClassLikeProperty").properties("value").create();
  /*package*/ final ConceptDescriptor myConceptCustomMemberDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.CustomMemberDescriptor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.classLike.structure.ClassLikeMember").references("cncpt").alias("custom member", "").create();
  /*package*/ final ConceptDescriptor myConceptDependentTypeDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.DependentTypeDeclaration").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").children(new String[]{"getter"}, new boolean[]{false}).alias("deptype", "").create();
  /*package*/ final ConceptDescriptor myConceptDependentTypeInstance = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.DependentTypeInstance").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("decl", "point").create();
  /*package*/ final ConceptDescriptor myConceptEmptyMember = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.EmptyMember").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.classLike.structure.ClassLikeMember").alias("empty line", "").create();
  /*package*/ final ConceptDescriptor myConceptGenerateModifier = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.GenerateModifier").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.classLike.structure.MemberModifier").properties("name").alias("generate", "").create();
  /*package*/ final ConceptDescriptor myConceptMemberModifier = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.MemberModifier").interface_().create();
  /*package*/ final ConceptDescriptor myConceptMethodDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.MethodDescriptor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.classLike.structure.ClassLikeMember").children(new String[]{"param", "retType"}, new boolean[]{true, false}).alias("method", "").create();
  /*package*/ final ConceptDescriptor myConceptParameterDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.ParameterDescriptor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"type"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptPlaceholderModifier = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.PlaceholderModifier").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.classLike.structure.MemberModifier").properties("caption").alias("placeholder", "").create();
  /*package*/ final ConceptDescriptor myConceptPropertyDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.PropertyDescriptor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.classLike.structure.ClassLikeMember").references("type").alias("property", "").create();
  /*package*/ final ConceptDescriptor myConceptRequiredModifier = new ConceptDescriptorBuilder("jetbrains.mps.lang.classLike.structure.RequiredModifier").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.classLike.structure.MemberModifier").alias("required", "").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptClassLikeAnnotation, myConceptClassLikeBooleanProperty, myConceptClassLikeDescriptor, myConceptClassLikeIntegerProperty, myConceptClassLikeMember, myConceptClassLikeMemberInstance, myConceptClassLikeMemberPlaceholder, myConceptClassLikeMethod, myConceptClassLikeProperty, myConceptClassLikeStringProperty, myConceptCustomMemberDescriptor, myConceptDependentTypeDeclaration, myConceptDependentTypeInstance, myConceptEmptyMember, myConceptGenerateModifier, myConceptMemberModifier, myConceptMethodDescriptor, myConceptParameterDescriptor, myConceptPlaceholderModifier, myConceptPropertyDescriptor, myConceptRequiredModifier);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0y, conceptFqName)) {
      case 0:
        return myConceptClassLikeAnnotation;
      case 1:
        return myConceptClassLikeBooleanProperty;
      case 2:
        return myConceptClassLikeDescriptor;
      case 3:
        return myConceptClassLikeIntegerProperty;
      case 4:
        return myConceptClassLikeMember;
      case 5:
        return myConceptClassLikeMemberInstance;
      case 6:
        return myConceptClassLikeMemberPlaceholder;
      case 7:
        return myConceptClassLikeMethod;
      case 8:
        return myConceptClassLikeProperty;
      case 9:
        return myConceptClassLikeStringProperty;
      case 10:
        return myConceptCustomMemberDescriptor;
      case 11:
        return myConceptDependentTypeDeclaration;
      case 12:
        return myConceptDependentTypeInstance;
      case 13:
        return myConceptEmptyMember;
      case 14:
        return myConceptGenerateModifier;
      case 15:
        return myConceptMemberModifier;
      case 16:
        return myConceptMethodDescriptor;
      case 17:
        return myConceptParameterDescriptor;
      case 18:
        return myConceptPlaceholderModifier;
      case 19:
        return myConceptPropertyDescriptor;
      case 20:
        return myConceptRequiredModifier;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0y = new String[]{"jetbrains.mps.lang.classLike.structure.ClassLikeAnnotation", "jetbrains.mps.lang.classLike.structure.ClassLikeBooleanProperty", "jetbrains.mps.lang.classLike.structure.ClassLikeDescriptor", "jetbrains.mps.lang.classLike.structure.ClassLikeIntegerProperty", "jetbrains.mps.lang.classLike.structure.ClassLikeMember", "jetbrains.mps.lang.classLike.structure.ClassLikeMemberInstance", "jetbrains.mps.lang.classLike.structure.ClassLikeMemberPlaceholder", "jetbrains.mps.lang.classLike.structure.ClassLikeMethod", "jetbrains.mps.lang.classLike.structure.ClassLikeProperty", "jetbrains.mps.lang.classLike.structure.ClassLikeStringProperty", "jetbrains.mps.lang.classLike.structure.CustomMemberDescriptor", "jetbrains.mps.lang.classLike.structure.DependentTypeDeclaration", "jetbrains.mps.lang.classLike.structure.DependentTypeInstance", "jetbrains.mps.lang.classLike.structure.EmptyMember", "jetbrains.mps.lang.classLike.structure.GenerateModifier", "jetbrains.mps.lang.classLike.structure.MemberModifier", "jetbrains.mps.lang.classLike.structure.MethodDescriptor", "jetbrains.mps.lang.classLike.structure.ParameterDescriptor", "jetbrains.mps.lang.classLike.structure.PlaceholderModifier", "jetbrains.mps.lang.classLike.structure.PropertyDescriptor", "jetbrains.mps.lang.classLike.structure.RequiredModifier"};
}
