package jetbrains.mps.lang.classLike.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.Map;
import jetbrains.mps.lang.classLike.structure.ConceptFuncInfo;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.classLike.structure.ParameterInfo;

public class ConceptFuncContainter_Behavior {
  public static void init(SNode thisNode) {
  }
  public static Map<String, ConceptFuncInfo> virtual_getConceptFuncs_3751132065236798156(final SNode thisNode) {
    final Map<String, ConceptFuncInfo> res = MapSequence.fromMap(new HashMap<String, ConceptFuncInfo>());
    ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(SNodeOperations.getConceptDeclaration(thisNode)), "jetbrains.mps.lang.classLike.structure.ObligatoryMethodsDescriptor")).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "conceptDecl", false) == SNodeOperations.getConceptDeclaration(thisNode);
      }
    }).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SLinkOperations.getTargets(it, "method", true);
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        MapSequence.fromMap(res).put(SPropertyOperations.getString(it, "name"), new ConceptFuncInfo(ListSequence.fromList(SLinkOperations.getTargets(it, "param", true)).select(new ISelector<SNode, ParameterInfo>() {
          public ParameterInfo select(SNode it) {
            return new ParameterInfo(SPropertyOperations.getString(it, "name"), SLinkOperations.getTarget(it, "type", true));
          }
        }).toListSequence(), null, SLinkOperations.getTarget(it, "retType", true)));
      }
    });
    return res;
  }
}
