package jetbrains.mps.lang.classLike.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.util.Computable;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.Map;
import jetbrains.mps.lang.classLike.structure.ConceptFuncInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.DefaultChildNodeSubstituteAction;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.classLike.behavior.ConceptFunc_Behavior;

public class QueriesGenerated {
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_ConceptFunc_3751132065236797750(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.classLike.structure.ConceptFunc");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        Iterable<String> queryResult = new Computable<Iterable<String>>() {
          public Iterable<String> compute() {
            return MapSequence.fromMap(BehaviorReflection.invokeVirtual((Class<Map<String, ConceptFuncInfo>>) ((Class) Object.class), SNodeOperations.as(_context.getParentNode(), "jetbrains.mps.lang.classLike.structure.ConceptFuncContainter"), "virtual_getConceptFuncs_3751132065236798156", new Object[]{})).keySet();
          }
        }.compute();
        if (queryResult != null) {
          for (final String item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                SNode result = SConceptOperations.createNewNode("jetbrains.mps.lang.classLike.structure.ConceptFunc", null);
                SLinkOperations.setTarget(result, "body", SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StatementList", null), true);
                SPropertyOperations.set(result, "name", (item));
                ConceptFunc_Behavior.call_fillFromInfo_3751132065236798394(result, MapSequence.fromMap(BehaviorReflection.invokeVirtual((Class<Map<String, ConceptFuncInfo>>) ((Class) Object.class), SNodeOperations.as(_context.getParentNode(), "jetbrains.mps.lang.classLike.structure.ConceptFuncContainter"), "virtual_getConceptFuncs_3751132065236798156", new Object[]{})).get((item)));
                return result;
              }
              public String getDescriptionText(String pattern) {
                return "concept function";
              }
            });
          }
        }
      }
    }
    return result;
  }
}
