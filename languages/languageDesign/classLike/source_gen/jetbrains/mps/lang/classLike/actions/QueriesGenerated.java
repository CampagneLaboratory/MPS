package jetbrains.mps.lang.classLike.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.util.Computable;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.action.DefaultChildNodeSubstituteAction;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.classLike.behavior.MethodDescriptor_Behavior;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class QueriesGenerated {
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_ClassLikeMethod_3751132065236797750(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.classLike.structure.ClassLikeMethod");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        Iterable<String> queryResult = new Computable<Iterable<String>>() {
          public Iterable<String> compute() {
            return Sequence.fromIterable(Util.getMethodDescriptors(_context.getParentNode())).select(new ISelector<SNode, String>() {
              public String select(SNode it) {
                return SPropertyOperations.getString(it, "name");
              }
            });
          }
        }.compute();
        if (queryResult != null) {
          for (final String item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                return MethodDescriptor_Behavior.call_create_3384419124890991826(Sequence.fromIterable(Util.getMethodDescriptors(_context.getParentNode())).findFirst(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return eq_x583g4_a0a0a0a0a0a0a0a0a0a0a0a1a2a0a1a0(SPropertyOperations.getString(it, "name"), (item));
                  }
                }));
              }
              public String getDescriptionText(String pattern) {
                return "concept function";
              }
            });
          }
        }
      }
    }
    return result;
  }
  private static boolean eq_x583g4_a0a0a0a0a0a0a0a0a0a0a0a1a2a0a1a0(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
