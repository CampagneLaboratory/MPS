package jetbrains.mps.lang.classLike.actions;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.classLike.behavior.ClassLikeDescriptor_Behavior;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.classLike.behavior.ClassLikeMember_Behavior;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class SubstituteUtil {
  public static Iterable<SNode> getMembers2Substitute(SAbstractConcept memberConcept, SNode node) {
    if (!(SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept")))) {
      return Collections.emptyList();
    }

    final SNode classNode = SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"));
    SNode descr = SLinkOperations.getTarget(AttributeOperations.getAttribute(classNode, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x3190d3f9f1cab0caL, "jetbrains.mps.lang.classLike.structure.ClassLikeAnnotation"))), MetaAdapterFactory.getReferenceLink(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x3190d3f9f1cab0caL, 0x3190d3f9f1cac277L, "descriptor"));
    if (descr == null) {
      return Collections.emptyList();
    }

    return Sequence.fromIterable(SNodeOperations.ofConcept(ClassLikeDescriptor_Behavior.call_getClassLikeMembers_2641476927088039443(descr), SNodeOperations.asSConcept(memberConcept))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode md) {
        if (ClassLikeMember_Behavior.call_isMultiple_2141245758541890151(md)) {
          return true;
        }
        return Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), md, "virtual_find_2603987804376013077", new Object[]{classNode})).isEmpty() && Sequence.fromIterable(BehaviorReflection.invokeVirtual((Class<Iterable<SNode>>) ((Class) Object.class), md, "virtual_findPlaceholders_6909536935410952255", new Object[]{classNode})).isEmpty();
      }
    });
  }

  public static Iterable<SNode> getAllMembers(SAbstractConcept memberConcept, SNode node) {
    if (!(SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept")))) {
      return Collections.emptyList();
    }

    SNode classNode = SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"));
    SNode descr = SLinkOperations.getTarget(AttributeOperations.getAttribute(classNode, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x3190d3f9f1cab0caL, "jetbrains.mps.lang.classLike.structure.ClassLikeAnnotation"))), MetaAdapterFactory.getReferenceLink(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x3190d3f9f1cab0caL, 0x3190d3f9f1cac277L, "descriptor"));
    if (descr == null) {
      return Collections.emptyList();
    }

    return SNodeOperations.ofConcept(ClassLikeDescriptor_Behavior.call_getClassLikeMembers_2641476927088039443(descr), SNodeOperations.asSConcept(memberConcept));
  }
}
