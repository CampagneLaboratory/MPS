package jetbrains.mps.lang.classLike.actions;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;

public class Util {
  public static Iterable<SNode> getMethodDescriptors(SNode node) {
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
      return Sequence.fromIterable(Collections.<SNode>emptyList());
    }

    SNode descr = SLinkOperations.getTarget(AttributeOperations.getAttribute(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept"), new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.classLike.structure.ClassLikeAnnotation")), "descriptor", false);
    if (descr == null) {
      return Sequence.fromIterable(Collections.<SNode>emptyList());
    }

    return SNodeOperations.ofConcept(SLinkOperations.getTargets(descr, "member", true), "jetbrains.mps.lang.classLike.structure.MethodDescriptor");
  }

  public static Iterable<SNode> getPropertyDescriptors(SNode node) {
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
      return Sequence.fromIterable(Collections.<SNode>emptyList());
    }

    SNode descr = SLinkOperations.getTarget(AttributeOperations.getAttribute(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept"), new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.classLike.structure.ClassLikeAnnotation")), "descriptor", false);
    if (descr == null) {
      return Sequence.fromIterable(Collections.<SNode>emptyList());
    }

    return SNodeOperations.ofConcept(SLinkOperations.getTargets(descr, "member", true), "jetbrains.mps.lang.classLike.structure.PropertyDescriptor");
  }
  public static Iterable<SNode> getCustomDescriptors(SNode node) {
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
      return Sequence.fromIterable(Collections.<SNode>emptyList());
    }

    SNode descr = SLinkOperations.getTarget(AttributeOperations.getAttribute(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept"), new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.classLike.structure.ClassLikeAnnotation")), "descriptor", false);
    if (descr == null) {
      return Sequence.fromIterable(Collections.<SNode>emptyList());
    }

    return SNodeOperations.ofConcept(SLinkOperations.getTargets(descr, "member", true), "jetbrains.mps.lang.classLike.structure.CustomMemberDescriptor");
  }
}
