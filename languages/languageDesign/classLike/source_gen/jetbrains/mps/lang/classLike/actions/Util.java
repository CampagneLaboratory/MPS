package jetbrains.mps.lang.classLike.actions;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;

public class Util {
  public static SNode createConceptFunctionForDescriptor(SNode dsc) {
    SNode result = SConceptOperations.createNewNode("jetbrains.mps.lang.classLike.structure.ClassLikeMethod", null);
    SPropertyOperations.set(result, "name", SPropertyOperations.getString(dsc, "name"));
    fillFromDescriptor(result, dsc);
    return result;
  }

  public static void fillFromDescriptor(SNode method, SNode dsc) {
    ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(dsc, "param", true)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, "type", true), "jetbrains.mps.lang.classLike.structure.DependentTypeDeclaration")) {
          SNode node = SConceptOperations.createNewNode("jetbrains.mps.lang.classLike.structure.DependentTypeInstance", null);
          SLinkOperations.setTarget(node, "decl", SNodeOperations.cast(SLinkOperations.getTarget(it, "type", true), "jetbrains.mps.lang.classLike.structure.DependentTypeDeclaration"), false);
          return createParameterDeclaration_sd8x_a2a0a0a0a0a0c(SPropertyOperations.getString(it, "name"), SNodeOperations.cast(HUtil.copyIfNecessary(node), "jetbrains.mps.baseLanguage.structure.Type"));
        } else {
          return createParameterDeclaration_sd8x_a0a0a0a0a0a0a2(SPropertyOperations.getString(it, "name"), SNodeOperations.cast(HUtil.copyIfNecessary(SLinkOperations.getTarget(it, "type", true)), "jetbrains.mps.baseLanguage.structure.Type"));
        }
      }
    }));

    SLinkOperations.setTarget(method, "returnType", SNodeOperations.copyNode(SLinkOperations.getTarget(dsc, "retType", true)), true);
  }

  public static Iterable<SNode> getMethodDescriptors(SNode node) {
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
      return Sequence.fromIterable(Collections.<SNode>emptyList());
    }

    SNode descr = SLinkOperations.getTarget(AttributeOperations.getAttribute(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ClassConcept"), new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.classLike.structure.ClassLikeAnnotation")), "descriptor", false);
    if (descr == null) {
      return Sequence.fromIterable(Collections.<SNode>emptyList());
    }

    return SLinkOperations.getTargets(descr, "method", true);
  }
  private static SNode createParameterDeclaration_sd8x_a2a0a0a0a0a0c(Object p0, Object p1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null, false);
    n1.setProperty("name", String.valueOf(p0));
    n1.addChild("type", (SNode) p1);
    return n1;
  }
  private static SNode createParameterDeclaration_sd8x_a0a0a0a0a0a0a2(Object p0, Object p1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", null, false);
    n1.setProperty("name", String.valueOf(p0));
    n1.addChild("type", (SNode) p1);
    return n1;
  }
}
