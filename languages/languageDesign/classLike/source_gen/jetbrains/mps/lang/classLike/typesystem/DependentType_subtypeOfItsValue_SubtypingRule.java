package jetbrains.mps.lang.classLike.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.classLike.behavior.DependentTypeInstance_Behavior;
import jetbrains.mps.smodel.SModelUtil_new;

public class DependentType_subtypeOfItsValue_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  public DependentType_subtypeOfItsValue_SubtypingRule() {
  }
  public SNode getSubOrSuperType(SNode dependentTypeInstance, TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    return DependentTypeInstance_Behavior.call_getMyType_9097849371504546165(dependentTypeInstance);
  }
  public String getApplicableConceptFQName() {
    return "jetbrains.mps.lang.classLike.structure.DependentTypeInstance";
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }
  public boolean isWeak() {
    return false;
  }
  public boolean surelyKeepsConcept() {
    return true;
  }
}
