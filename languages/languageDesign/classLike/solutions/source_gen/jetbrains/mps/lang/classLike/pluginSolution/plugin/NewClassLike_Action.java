package jetbrains.mps.lang.classLike.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.apache.log4j.Level;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.classLike.behavior.MethodDescriptor_Behavior;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.classLike.actions.Util;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class NewClassLike_Action extends BaseAction {
  private static final Icon ICON = null;
  private SNode descr;
  public NewClassLike_Action(SNode descr_par) {
    super("New <something>", "", ICON);
    this.descr = descr_par;
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      event.getPresentation().setText(SPropertyOperations.getString(NewClassLike_Action.this.descr, "name") + " class");
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "NewClassLike", t);
      }
      this.disable(event.getPresentation());
    }
  }
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("model", event.getData(MPSCommonDataKeys.MODEL));
    if (MapSequence.fromMap(_params).get("model") == null) {
      return false;
    }
    return true;
  }
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final SNode newClass = SModelOperations.createNewRootNode(((SModel) ((SModel) MapSequence.fromMap(_params).get("model"))), "jetbrains.mps.baseLanguage.structure.ClassConcept", null);
      AttributeOperations.setAttribute(newClass, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.classLike.structure.ClassLikeAnnotation"), SConceptOperations.createNewNode("jetbrains.mps.lang.classLike.structure.ClassLikeAnnotation", null));
      SLinkOperations.setTarget(AttributeOperations.getAttribute(newClass, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.classLike.structure.ClassLikeAnnotation")), "descriptor", NewClassLike_Action.this.descr, false);
      ListSequence.fromList(SLinkOperations.getTargets(NewClassLike_Action.this.descr, "method", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return MethodDescriptor_Behavior.call_isRequired_3402736933911994098(it);
        }
      }).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          SNode method = Util.createConceptFunctionForDescriptor(it);
          ListSequence.fromList(SLinkOperations.getTargets(newClass, "member", true)).addElement(method);
        }
      });
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "NewClassLike", t);
      }
    }
  }
  @NotNull
  public String getActionId() {
    StringBuilder res = new StringBuilder();
    res.append(super.getActionId());
    res.append("#");
    res.append(descr_State((SNode) this.descr));
    res.append("!");
    return res.toString();
  }
  public static String descr_State(SNode object) {
    return object.getNodeId().toString();
  }
  protected static Logger LOG = LogManager.getLogger(NewClassLike_Action.class);
}
