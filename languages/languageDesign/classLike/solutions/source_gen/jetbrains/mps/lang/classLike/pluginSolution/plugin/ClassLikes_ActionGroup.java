package jetbrains.mps.lang.classLike.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.actions.GeneratedActionGroup;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.Set;
import com.intellij.openapi.util.Pair;
import jetbrains.mps.workbench.ActionPlace;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.workbench.action.BaseAction;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import com.intellij.openapi.actionSystem.AnActionEvent;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.smodel.DefaultSModelDescriptor;
import java.util.List;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import com.intellij.openapi.extensions.PluginId;
import org.jetbrains.annotations.Nullable;

public class ClassLikes_ActionGroup extends GeneratedActionGroup {
  private static Logger LOG = LogManager.getLogger(ClassLikes_ActionGroup.class);
  public static final String ID = "jetbrains.mps.lang.classLike.pluginSolution.plugin.ClassLikes_ActionGroup";
  private Set<Pair<ActionPlace, Condition<BaseAction>>> myPlaces = SetSequence.fromSet(new HashSet<Pair<ActionPlace, Condition<BaseAction>>>());
  public ClassLikes_ActionGroup() {
    super("ClassLikes", ID);
    this.setIsInternal(false);
    this.setPopup(false);
    try {
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }
  public void doUpdate(AnActionEvent event) {
    try {
      SModel model = MPSCommonDataKeys.MODEL.getData(event.getDataContext());
      if (!(model instanceof DefaultSModelDescriptor)) {
        return;
      }

      List<SModuleReference> langs = ((DefaultSModelDescriptor) model).importedLanguages();
      Iterable<SNode> descrs = ListSequence.fromList(langs).select(new ISelector<SModuleReference, Language>() {
        public Language select(SModuleReference it) {
          return ((Language) it.resolve(MPSModuleRepository.getInstance()));
        }
      }).where(new IWhereFilter<Language>() {
        public boolean accept(Language it) {
          return it != null;
        }
      }).translate(new ITranslator2<Language, SModel>() {
        public Iterable<SModel> translate(Language it) {
          return it.getAccessoryModels();
        }
      }).translate(new ITranslator2<SModel, SNode>() {
        public Iterable<SNode> translate(SModel it) {
          return SModelOperations.getRoots(((SModel) it), "jetbrains.mps.lang.classLike.structure.ClassLikeDescriptor");
        }
      });

      ClassLikes_ActionGroup.this.removeAll();
      for (SNode descr : Sequence.fromIterable(descrs)) {
        ClassLikes_ActionGroup.this.addParameterizedAction(new NewClassLike_Action(descr), PluginId.getId("jetbrains.mps.lang.classLike.pluginSolution"), descr);
      }
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {
      this.addPlace(p.first, p.second);
    }
  }
  public void addPlace(ActionPlace place, @Nullable Condition<BaseAction> cond) {
    SetSequence.fromSet(this.myPlaces).addElement(new Pair<ActionPlace, Condition<BaseAction>>(place, cond));
  }
  public boolean isStrict() {
    return false;
  }
}
