package jetbrains.mps.lang.extension.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptExtensionDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.extension.structure.ExtensionDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").references("extensionPoint").children(new String[]{"objectGetter", "activator", "deactivator", "fieldDeclaration"}, new boolean[]{false, false, false, true}).create();
  /*package*/ final ConceptDescriptor myConceptExtensionFieldDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.extension.structure.ExtensionFieldDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"fieldType"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptExtensionFieldReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.extension.structure.ExtensionFieldReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("declaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExtensionFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.extension.structure.ExtensionFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExtensionObjectGetter = new ConceptDescriptorBuilder("jetbrains.mps.lang.extension.structure.ExtensionObjectGetter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExtensionPointDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.extension.structure.ExtensionPointDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("extensionName").children(new String[]{"objectType"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptExtensionPointExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.extension.structure.ExtensionPointExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("extensionPoint").alias("extensionPoint", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExtensionPointType = new ConceptDescriptorBuilder("jetbrains.mps.lang.extension.structure.ExtensionPointType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").references("extensionPoint").alias("extensionPoint", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetExtensionObjectsOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.extension.structure.GetExtensionObjectsOperation").super_("jetbrains.mps.baseLanguage.structure.AbstractOperation").parents("jetbrains.mps.baseLanguage.structure.AbstractOperation").alias("objects", "").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptExtensionDeclaration, myConceptExtensionFieldDeclaration, myConceptExtensionFieldReference, myConceptExtensionFunction, myConceptExtensionObjectGetter, myConceptExtensionPointDeclaration, myConceptExtensionPointExpression, myConceptExtensionPointType, myConceptGetExtensionObjectsOperation);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0m, conceptFqName)) {
      case 0:
        return myConceptExtensionDeclaration;
      case 1:
        return myConceptExtensionFieldDeclaration;
      case 2:
        return myConceptExtensionFieldReference;
      case 3:
        return myConceptExtensionFunction;
      case 4:
        return myConceptExtensionObjectGetter;
      case 5:
        return myConceptExtensionPointDeclaration;
      case 6:
        return myConceptExtensionPointExpression;
      case 7:
        return myConceptExtensionPointType;
      case 8:
        return myConceptGetExtensionObjectsOperation;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0m = new String[]{"jetbrains.mps.lang.extension.structure.ExtensionDeclaration", "jetbrains.mps.lang.extension.structure.ExtensionFieldDeclaration", "jetbrains.mps.lang.extension.structure.ExtensionFieldReference", "jetbrains.mps.lang.extension.structure.ExtensionFunction", "jetbrains.mps.lang.extension.structure.ExtensionObjectGetter", "jetbrains.mps.lang.extension.structure.ExtensionPointDeclaration", "jetbrains.mps.lang.extension.structure.ExtensionPointExpression", "jetbrains.mps.lang.extension.structure.ExtensionPointType", "jetbrains.mps.lang.extension.structure.GetExtensionObjectsOperation"};
}
