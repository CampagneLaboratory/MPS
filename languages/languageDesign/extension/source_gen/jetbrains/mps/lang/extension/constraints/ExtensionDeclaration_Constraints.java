package jetbrains.mps.lang.extension.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class ExtensionDeclaration_Constraints extends BaseConstraintsDescriptor {
  public ExtensionDeclaration_Constraints() {
    super("jetbrains.mps.lang.extension.structure.ExtensionDeclaration");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("name", new BasePropertyConstraintsDescriptor("name", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node, IScope scope) {
        String propertyName = "name";
        {
          SNode extensionPoint = SLinkOperations.getTarget(node, "extensionPoint", false);
          return ((extensionPoint != null ? SPropertyOperations.getString(extensionPoint, "extensionName") : "<unknown>")) + "_extension";
        }
      }
    });
    return properties;
  }
}
