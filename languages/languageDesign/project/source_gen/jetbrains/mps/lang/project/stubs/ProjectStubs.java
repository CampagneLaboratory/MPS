package jetbrains.mps.lang.project.stubs;

/*Generated by MPS */

import jetbrains.mps.smodel.persistence.ModelRootManagerBase;
import java.util.Collection;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.SModelRoot;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.stubs.BaseStubModelDescriptor;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.library.ModulesMiner;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.stubs.util.FileStubSource;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.smodel.SModelId;

public class ProjectStubs extends ModelRootManagerBase {
  public ProjectStubs() {
  }

  @Override
  public Collection<SModelDescriptor> load(@NotNull SModelRoot modelRoot) {
    List<SModelDescriptor> models = ListSequence.fromList(new ArrayList<SModelDescriptor>());
    ListSequence.fromList(models).addSequence(Sequence.fromIterable(ProjectStubs.this.findModules(modelRoot.getPath(), modelRoot.getModule())));
    return models;
  }

  /*package*/ Iterable<BaseStubModelDescriptor> findModules(String path, final SModule module) {
    IFile folder = FileSystem.getInstance().getFileByPath(path);
    Iterable<ModulesMiner.ModuleHandle> descriptors = ModulesMiner.getInstance().collectModules(folder, false);
    final String stereotype = SModelStereotype.getStubStereotypeForId("project");
    return Sequence.fromIterable(descriptors).select(new ISelector<ModulesMiner.ModuleHandle, BaseStubModelDescriptor>() {
      public BaseStubModelDescriptor select(ModulesMiner.ModuleHandle it) {
        SModelReference modelRef = ProjectStubs.this.createModelReference(it, module, stereotype);
        BaseStubModelDescriptor descriptor = new BaseStubModelDescriptor(modelRef, new FileStubSource(module.getModuleReference(), it.getFile(), modelRef), module);
        return descriptor;
      }
    });
  }

  /*package*/ SModelReference createModelReference(ModulesMiner.ModuleHandle module, SModule moduleWithModel, String stereotype) {
    String longName = module.getDescriptor().getModuleReference().getModuleFqName();
    SModelFqName fqname = new SModelFqName(moduleWithModel.getModuleName(), longName, stereotype);
    SModelId modelId = SModelId.foreign(stereotype, moduleWithModel.getModuleReference().getModuleId().toString(), longName);
    return new SModelReference(fqname, modelId);
  }
}
