package jetbrains.mps.lang.project.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptDevKit = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.DevKit").super_("jetbrains.mps.lang.project.structure.Module").parents("jetbrains.mps.lang.project.structure.Module").properties("plugin", "devkitPath").children(new String[]{"exportedLanguages", "exportedSolutions", "extendedDevkits"}, new boolean[]{true, true, true}).create();
  /*package*/ final ConceptDescriptor myConceptGenerator = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.Generator").super_("jetbrains.mps.lang.project.structure.Module").parents("jetbrains.mps.lang.project.structure.Module").properties("generatorUID", "generateTemplates", "reflectiveQueries", "needOperationContext").children(new String[]{"priorityRules", "depGenerators"}, new boolean[]{true, true}).create();
  /*package*/ final ConceptDescriptor myConceptLanguage = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.Language").super_("jetbrains.mps.lang.project.structure.Module").parents("jetbrains.mps.lang.project.structure.Module").properties("genPath", "languagePath").children(new String[]{"generator", "accessoryModels", "extendedLanguages", "runtimeModules", "runtimeStubModels", "stubSolutions"}, new boolean[]{true, true, true, true, true, true}).create();
  /*package*/ final ConceptDescriptor myConceptMappingConfigExternalRef = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingConfigExternalRef").super_("jetbrains.mps.lang.project.structure.MappingConfigRefBase").parents("jetbrains.mps.lang.project.structure.MappingConfigRefBase").children(new String[]{"generator", "innerRef"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptMappingConfigNormalRef = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingConfigNormalRef").super_("jetbrains.mps.lang.project.structure.MappingConfigRefBase").parents("jetbrains.mps.lang.project.structure.MappingConfigRefBase").properties("modelUID", "nodeID").alias("ref", "").create();
  /*package*/ final ConceptDescriptor myConceptMappingConfigRefAllGlobal = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingConfigRefAllGlobal").super_("jetbrains.mps.lang.project.structure.MappingConfigRefBase").parents("jetbrains.mps.lang.project.structure.MappingConfigRefBase").alias("all global", "").create();
  /*package*/ final ConceptDescriptor myConceptMappingConfigRefAllLocal = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingConfigRefAllLocal").super_("jetbrains.mps.lang.project.structure.MappingConfigRefBase").parents("jetbrains.mps.lang.project.structure.MappingConfigRefBase").alias("all local", "").create();
  /*package*/ final ConceptDescriptor myConceptMappingConfigRefBase = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingConfigRefBase").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptMappingConfigRefSet = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingConfigRefSet").super_("jetbrains.mps.lang.project.structure.MappingConfigRefBase").parents("jetbrains.mps.lang.project.structure.MappingConfigRefBase").children(new String[]{"refs"}, new boolean[]{true}).alias("set", "").create();
  /*package*/ final ConceptDescriptor myConceptMappingPriorityRule = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingPriorityRule").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("type").children(new String[]{"left", "right"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptModelReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.ModelReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("uuid", "qualifiedName", "stereotype").create();
  /*package*/ final ConceptDescriptor myConceptModelRoot = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.ModelRoot").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("type", "path").create();
  /*package*/ final ConceptDescriptor myConceptModule = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.Module").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("uuid", "namespace", "compileInMPS", "enableJavaStubs").children(new String[]{"model", "modelRoots", "dependencies", "usedLanguages", "usedDevkits", "stubModels", "sourcePaths"}, new boolean[]{true, true, true, true, true, true, true}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptModuleDependency = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.ModuleDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("reexport").children(new String[]{"moduleRef"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptModuleReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.ModuleReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("uuid", "qualifiedName").create();
  /*package*/ final ConceptDescriptor myConceptSolution = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.Solution").super_("jetbrains.mps.lang.project.structure.Module").parents("jetbrains.mps.lang.project.structure.Module").properties("outputPath", "dontLoadClasses", "solutionPath").create();
  /*package*/ final ConceptDescriptor myConceptSourcePath = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.SourcePath").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("value").create();
  /*package*/ final ConceptDescriptor myConceptStubEntry = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.StubEntry").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("path").create();
  /*package*/ final ConceptDescriptor myConceptStubSolution = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.StubSolution").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("uuid", "name").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptDevKit, myConceptGenerator, myConceptLanguage, myConceptMappingConfigExternalRef, myConceptMappingConfigNormalRef, myConceptMappingConfigRefAllGlobal, myConceptMappingConfigRefAllLocal, myConceptMappingConfigRefBase, myConceptMappingConfigRefSet, myConceptMappingPriorityRule, myConceptModelReference, myConceptModelRoot, myConceptModule, myConceptModuleDependency, myConceptModuleReference, myConceptSolution, myConceptSourcePath, myConceptStubEntry, myConceptStubSolution);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0w, conceptFqName)) {
      case 0:
        return myConceptDevKit;
      case 1:
        return myConceptGenerator;
      case 2:
        return myConceptLanguage;
      case 3:
        return myConceptMappingConfigExternalRef;
      case 4:
        return myConceptMappingConfigNormalRef;
      case 5:
        return myConceptMappingConfigRefAllGlobal;
      case 6:
        return myConceptMappingConfigRefAllLocal;
      case 7:
        return myConceptMappingConfigRefBase;
      case 8:
        return myConceptMappingConfigRefSet;
      case 9:
        return myConceptMappingPriorityRule;
      case 10:
        return myConceptModelReference;
      case 11:
        return myConceptModelRoot;
      case 12:
        return myConceptModule;
      case 13:
        return myConceptModuleDependency;
      case 14:
        return myConceptModuleReference;
      case 15:
        return myConceptSolution;
      case 16:
        return myConceptSourcePath;
      case 17:
        return myConceptStubEntry;
      case 18:
        return myConceptStubSolution;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0w = new String[]{"jetbrains.mps.lang.project.structure.DevKit", "jetbrains.mps.lang.project.structure.Generator", "jetbrains.mps.lang.project.structure.Language", "jetbrains.mps.lang.project.structure.MappingConfigExternalRef", "jetbrains.mps.lang.project.structure.MappingConfigNormalRef", "jetbrains.mps.lang.project.structure.MappingConfigRefAllGlobal", "jetbrains.mps.lang.project.structure.MappingConfigRefAllLocal", "jetbrains.mps.lang.project.structure.MappingConfigRefBase", "jetbrains.mps.lang.project.structure.MappingConfigRefSet", "jetbrains.mps.lang.project.structure.MappingPriorityRule", "jetbrains.mps.lang.project.structure.ModelReference", "jetbrains.mps.lang.project.structure.ModelRoot", "jetbrains.mps.lang.project.structure.Module", "jetbrains.mps.lang.project.structure.ModuleDependency", "jetbrains.mps.lang.project.structure.ModuleReference", "jetbrains.mps.lang.project.structure.Solution", "jetbrains.mps.lang.project.structure.SourcePath", "jetbrains.mps.lang.project.structure.StubEntry", "jetbrains.mps.lang.project.structure.StubSolution"};
}
