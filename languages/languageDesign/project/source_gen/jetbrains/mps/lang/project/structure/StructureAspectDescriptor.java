package jetbrains.mps.lang.project.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.lang.project.structure.DevKit", null);
    myFqNameToConcept.put("jetbrains.mps.lang.project.structure.Generator", null);
    myFqNameToConcept.put("jetbrains.mps.lang.project.structure.Language", null);
    myFqNameToConcept.put("jetbrains.mps.lang.project.structure.MappingConfigExternalRef", null);
    myFqNameToConcept.put("jetbrains.mps.lang.project.structure.MappingConfigNormalRef", null);
    myFqNameToConcept.put("jetbrains.mps.lang.project.structure.MappingConfigRefAllGlobal", null);
    myFqNameToConcept.put("jetbrains.mps.lang.project.structure.MappingConfigRefAllLocal", null);
    myFqNameToConcept.put("jetbrains.mps.lang.project.structure.MappingConfigRefBase", null);
    myFqNameToConcept.put("jetbrains.mps.lang.project.structure.MappingConfigRefSet", null);
    myFqNameToConcept.put("jetbrains.mps.lang.project.structure.MappingPriorityRule", null);
    myFqNameToConcept.put("jetbrains.mps.lang.project.structure.ModelReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.project.structure.ModelRoot", null);
    myFqNameToConcept.put("jetbrains.mps.lang.project.structure.Module", null);
    myFqNameToConcept.put("jetbrains.mps.lang.project.structure.ModuleDependency", null);
    myFqNameToConcept.put("jetbrains.mps.lang.project.structure.ModuleReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.project.structure.Solution", null);
    myFqNameToConcept.put("jetbrains.mps.lang.project.structure.SourcePath", null);
    myFqNameToConcept.put("jetbrains.mps.lang.project.structure.StubEntry", null);
    myFqNameToConcept.put("jetbrains.mps.lang.project.structure.StubSolution", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.DevKit").super_("jetbrains.mps.lang.project.structure.Module").parents("jetbrains.mps.lang.project.structure.Module").properties("plugin", "devkitPath").children(new String[]{"exportedLanguages", "exportedSolutions", "extendedDevkits"}, new boolean[]{true, true, true}).create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.Generator").super_("jetbrains.mps.lang.project.structure.Module").parents("jetbrains.mps.lang.project.structure.Module").properties("generatorUID", "generateTemplates", "reflectiveQueries", "needOperationContext").children(new String[]{"priorityRules", "depGenerators"}, new boolean[]{true, true}).create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.Language").super_("jetbrains.mps.lang.project.structure.Module").parents("jetbrains.mps.lang.project.structure.Module").properties("genPath", "languagePath").children(new String[]{"generator", "accessoryModels", "extendedLanguages", "runtimeModules", "runtimeStubModels", "stubSolutions"}, new boolean[]{true, true, true, true, true, true}).create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingConfigExternalRef").super_("jetbrains.mps.lang.project.structure.MappingConfigRefBase").parents("jetbrains.mps.lang.project.structure.MappingConfigRefBase").children(new String[]{"generator", "innerRef"}, new boolean[]{false, false}).create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingConfigNormalRef").super_("jetbrains.mps.lang.project.structure.MappingConfigRefBase").parents("jetbrains.mps.lang.project.structure.MappingConfigRefBase").properties("modelUID", "nodeID").alias("ref", "").create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingConfigRefAllGlobal").super_("jetbrains.mps.lang.project.structure.MappingConfigRefBase").parents("jetbrains.mps.lang.project.structure.MappingConfigRefBase").alias("all global", "").create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingConfigRefAllLocal").super_("jetbrains.mps.lang.project.structure.MappingConfigRefBase").parents("jetbrains.mps.lang.project.structure.MappingConfigRefBase").alias("all local", "").create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingConfigRefBase").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingConfigRefSet").super_("jetbrains.mps.lang.project.structure.MappingConfigRefBase").parents("jetbrains.mps.lang.project.structure.MappingConfigRefBase").children(new String[]{"refs"}, new boolean[]{true}).alias("set", "").create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.MappingPriorityRule").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("type").children(new String[]{"left", "right"}, new boolean[]{false, false}).create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.ModelReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("uuid", "qualifiedName", "stereotype").create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.ModelRoot").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("type", "path").create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.Module").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("uuid", "namespace", "compileInMPS", "enableJavaStubs").children(new String[]{"model", "modelRoots", "dependencies", "usedLanguages", "usedDevkits", "stubModels", "sourcePaths"}, new boolean[]{true, true, true, true, true, true, true}).abstract_().create();
        break;
      case 13:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.ModuleDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("reexport").children(new String[]{"moduleRef"}, new boolean[]{false}).create();
        break;
      case 14:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.ModuleReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("uuid", "qualifiedName").create();
        break;
      case 15:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.Solution").super_("jetbrains.mps.lang.project.structure.Module").parents("jetbrains.mps.lang.project.structure.Module").properties("outputPath", "dontLoadClasses", "solutionPath").create();
        break;
      case 16:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.SourcePath").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("value").create();
        break;
      case 17:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.StubEntry").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("path").create();
        break;
      case 18:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.project.structure.StubSolution").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("uuid", "name").create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.lang.project.structure.DevKit", "jetbrains.mps.lang.project.structure.Generator", "jetbrains.mps.lang.project.structure.Language", "jetbrains.mps.lang.project.structure.MappingConfigExternalRef", "jetbrains.mps.lang.project.structure.MappingConfigNormalRef", "jetbrains.mps.lang.project.structure.MappingConfigRefAllGlobal", "jetbrains.mps.lang.project.structure.MappingConfigRefAllLocal", "jetbrains.mps.lang.project.structure.MappingConfigRefBase", "jetbrains.mps.lang.project.structure.MappingConfigRefSet", "jetbrains.mps.lang.project.structure.MappingPriorityRule", "jetbrains.mps.lang.project.structure.ModelReference", "jetbrains.mps.lang.project.structure.ModelRoot", "jetbrains.mps.lang.project.structure.Module", "jetbrains.mps.lang.project.structure.ModuleDependency", "jetbrains.mps.lang.project.structure.ModuleReference", "jetbrains.mps.lang.project.structure.Solution", "jetbrains.mps.lang.project.structure.SourcePath", "jetbrains.mps.lang.project.structure.StubEntry", "jetbrains.mps.lang.project.structure.StubSolution"};
}
