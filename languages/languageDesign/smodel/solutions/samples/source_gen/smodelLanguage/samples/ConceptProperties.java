package smodelLanguage.samples;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class ConceptProperties {
  public void stringConceptProperty(SNode node) {
    boolean hasAlias = SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(node), "conceptAlias") != null;
    String alias = SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(node), "conceptAlias");
    String text = "alias is " + SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(node), "conceptAlias");
    int length = SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(node), "conceptAlias").length();
    SPropertyOperations.set(SNodeOperations.getConceptDeclaration(node), "conceptAlias", "foo");
    SPropertyOperations.set(SNodeOperations.getConceptDeclaration(node), "conceptAlias", "bar");
  }
  public void booleanConceptProperty(SNode node) {
    boolean isAbstract = false;
    if (SPropertyOperations.getBoolean(SNodeOperations.getConceptDeclaration(node), "abstract")) {
      isAbstract = true;
    }
    boolean isAbstract2 = SPropertyOperations.getBoolean(SNodeOperations.getConceptDeclaration(node), "abstract");
    SPropertyOperations.set(SNodeOperations.getConceptDeclaration(node), "abstract", "" + (true));
    SPropertyOperations.set(SNodeOperations.getConceptDeclaration(node), "abstract", "" + (false));
  }
  public void m1(SNode node) {
    SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(node, "baseMethodDeclaration", false)), "conceptAlias");
  }
}
