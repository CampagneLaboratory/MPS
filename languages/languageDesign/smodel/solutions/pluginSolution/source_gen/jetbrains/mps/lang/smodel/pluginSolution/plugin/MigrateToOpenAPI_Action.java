package jetbrains.mps.lang.smodel.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import java.util.Set;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.findUsages.FindUsagesManager;
import jetbrains.mps.findUsages.SearchType;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.ide.findusages.model.SearchResults;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.ide.findusages.model.SearchResult;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.refactoring.RefactoringView;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewAction;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewItem;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;

public class MigrateToOpenAPI_Action extends BaseAction {
  private static final Icon ICON = null;
  protected static Log log = LogFactory.getLog(MigrateToOpenAPI_Action.class);

  public MigrateToOpenAPI_Action() {
    super("Migrate to node/model/module OpenAPI", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action doUpdate method failed. Action:" + "MigrateToOpenAPI", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("project", event.getData(MPSCommonDataKeys.MPS_PROJECT));
    if (MapSequence.fromMap(_params).get("project") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("iproject", event.getData(PlatformDataKeys.PROJECT));
    if (MapSequence.fromMap(_params).get("iproject") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      Set<SNode> changed = SetSequence.fromSet(new HashSet<SNode>());
      SNode oldSnodeNode = SNodeOperations.cast(SLinkOperations.getTarget(new MigrateToOpenAPI_Action.QuotationClass_mo9yth_a0a0a1a0a3().createNode(), "classifier", false), "jetbrains.mps.baseLanguage.structure.ClassConcept");
      SNode newSnodeNode = SNodeOperations.cast(SLinkOperations.getTarget(new MigrateToOpenAPI_Action.QuotationClass_mo9yth_a0a0a2a0a3().createNode(), "classifier", false), "jetbrains.mps.baseLanguage.structure.Interface");

      Set<SNode> nodes = SetSequence.fromSet(new HashSet<SNode>());
      SetSequence.fromSet(nodes).addElement(oldSnodeNode);
      SetSequence.fromSet(nodes).addSequence(ListSequence.fromList(SLinkOperations.getTargets(oldSnodeNode, "method", true)));

      Set<SReference> usages = FindUsagesManager.getInstance().findUsages(nodes, SearchType.USAGES, ((MPSProject) MapSequence.fromMap(_params).get("project")).getScope(), new EmptyProgressMonitor());

      for (SReference ref : SetSequence.fromSet(usages)) {
        SNode rNode = ref.getTargetNode();
        if (ref.getSourceNode().getModel().isNotEditable()) {
          continue;
        }

        SetSequence.fromSet(changed).addElement(rNode);
        // <node> 
      }

      SearchResults res = new SearchResults(Collections.singleton(oldSnodeNode), SetSequence.fromSet(changed).select(new ISelector<SNode, SearchResult<SNode>>() {
        public SearchResult<SNode> select(SNode it) {
          return new SearchResult<SNode>(it, "usage");
        }
      }).toListSequence());

      ((Project) MapSequence.fromMap(_params).get("iproject")).getComponent(RefactoringView.class).showRefactoringView(((Project) MapSequence.fromMap(_params).get("iproject")), new RefactoringViewAction() {
        public void performAction(RefactoringViewItem refactoringViewItem) {
        }
      }, res, false, "usages");
    } catch (Throwable t) {
      if (log.isErrorEnabled()) {
        log.error("User's action execute method failed. Action:" + "MigrateToOpenAPI", t);
      }
    }
  }

  public static class QuotationClass_mo9yth_a0a0a1a0a3 {
    public QuotationClass_mo9yth_a0a0a1a0a3() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("classifier", quotedNode1_2, SModelReference.fromString("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)"), SNodeId.fromString("~SNode")));
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_mo9yth_a0a0a2a0a3 {
    public QuotationClass_mo9yth_a0a0a2a0a3() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("classifier", quotedNode1_2, SModelReference.fromString("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#org.jetbrains.mps.openapi.model(MPS.Core/org.jetbrains.mps.openapi.model@java_stub)"), SNodeId.fromString("~SNode")));
        result = quotedNode1_2;
      }
      return result;
    }
  }
}
