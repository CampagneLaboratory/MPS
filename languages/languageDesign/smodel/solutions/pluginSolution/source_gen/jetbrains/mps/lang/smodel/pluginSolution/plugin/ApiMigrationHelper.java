package jetbrains.mps.lang.smodel.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.findUsages.FindUsagesManager;
import jetbrains.mps.findUsages.SearchType;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.smodel.StaticReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.ide.refactoring.RefactoringView;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewAction;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewItem;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.baseLanguage.behavior.BaseMethodDeclaration_Behavior;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class ApiMigrationHelper {
  public ApiMigrationHelper() {
  }

  public void migrate(MPSProject p, Project ip, IScope scope) {
    SNode oldSnodeNode = SNodeOperations.cast(SLinkOperations.getTarget(new ApiMigrationHelper.QuotationClass_yke5lt_a0a0a0a0().createNode(), "classifier", false), "jetbrains.mps.baseLanguage.structure.ClassConcept");
    final SNode newSnodeNode = SNodeOperations.cast(SLinkOperations.getTarget(new ApiMigrationHelper.QuotationClass_yke5lt_a0a0a1a0().createNode(), "classifier", false), "jetbrains.mps.baseLanguage.structure.Interface");

    Set<SNode> unknownUsages = SetSequence.fromSet(new HashSet<SNode>());

    // replace old SNode with a new interface 
    Set<SNode> nodes = SetSequence.fromSet(new HashSet<SNode>());
    SetSequence.fromSet(nodes).addElement(oldSnodeNode);

    Set<SReference> usages = FindUsagesManager.getInstance().findUsages(nodes, SearchType.USAGES, scope, new EmptyProgressMonitor());

    final Set<SNode> changedClassUsages = SetSequence.fromSet(new HashSet<SNode>());
    final Set<Tuples._3<SNode, SReference, SReference>> changedClassUsagesInTemplates = SetSequence.fromSet(new HashSet<Tuples._3<SNode, SReference, SReference>>());
    for (SReference ref : SetSequence.fromSet(usages)) {
      SNode rNode = ref.getSourceNode();
      if (rNode.getModel().isNotEditable()) {
        continue;
      }

      SNode n = (SNode) rNode;
      if (SNodeOperations.getContainingLinkDeclaration(n) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", "classifier")) {
        SetSequence.fromSet(changedClassUsages).addElement(rNode);
        continue;
      }

      if (SNodeOperations.getContainingLinkDeclaration(n) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassCreator", "typeParameter")) {
        SetSequence.fromSet(changedClassUsagesInTemplates).addElement(MultiTuple.<SNode,SReference,SReference>from(rNode, ref, ((SReference) new StaticReference(ref.getRole(), rNode, newSnodeNode))));
        continue;
      }

      SetSequence.fromSet(unknownUsages).addElement(rNode);
    }

    // replace method calls 
    Set<SNode> methods = SetSequence.fromSet(new HashSet<SNode>());
    SetSequence.fromSet(methods).addSequence(ListSequence.fromList(SLinkOperations.getTargets(oldSnodeNode, "method", true)));

    Set<SReference> musages = FindUsagesManager.getInstance().findUsages(methods, SearchType.USAGES, p.getScope(), new EmptyProgressMonitor());

    final Set<Tuples._3<SNode, SReference, SReference>> changedMethodCalls = SetSequence.fromSet(new HashSet<Tuples._3<SNode, SReference, SReference>>());
    final Set<SNode> castedMethodCalls = SetSequence.fromSet(new HashSet<SNode>());

    for (SReference ref : SetSequence.fromSet(musages)) {
      SNode rNode = ref.getSourceNode();
      if (rNode.getModel().isNotEditable()) {
        continue;
      }

      SNode newMethod = getNewMethod((SNode) ref.getTargetNode());
      if (newMethod != null) {
        SetSequence.fromSet(changedMethodCalls).addElement(MultiTuple.<SNode,SReference,SReference>from(rNode, ref, ((SReference) new StaticReference(ref.getRole(), rNode, newMethod))));
        continue;
      }

      SNode n = (SNode) rNode;
      if (SNodeOperations.getContainingLinkDeclaration(n) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", "operation")) {
        SetSequence.fromSet(castedMethodCalls).addElement(rNode);
        continue;
      }

      SetSequence.fromSet(unknownUsages).addElement(rNode);
    }

    // static method calls 
    Set<SNode> smethods = SetSequence.fromSet(new HashSet<SNode>());
    SetSequence.fromSet(smethods).addSequence(ListSequence.fromList(SLinkOperations.getTargets(oldSnodeNode, "staticMethod", true)));

    Set<SReference> smusages = FindUsagesManager.getInstance().findUsages(smethods, SearchType.USAGES, p.getScope(), new EmptyProgressMonitor());

    for (SReference ref : SetSequence.fromSet(musages)) {
      SNode rNode = ref.getSourceNode();
      if (rNode.getModel().isNotEditable()) {
        continue;
      }
      SetSequence.fromSet(unknownUsages).addElement(rNode);
    }

    Iterable<SearchResult<SNode>> results = SetSequence.fromSet(changedClassUsages).select(new ISelector<SNode, SearchResult<SNode>>() {
      public SearchResult<SNode> select(SNode it) {
        return new SearchResult<SNode>(it, "replaced SNode occurences");
      }
    }).union(SetSequence.fromSet(changedClassUsagesInTemplates).select(new ISelector<Tuples._3<SNode, SReference, SReference>, SearchResult<SNode>>() {
      public SearchResult<SNode> select(Tuples._3<SNode, SReference, SReference> it) {
        return new SearchResult<SNode>(it._0(), "replaced SNode in new XYZ<SNode,...>");
      }
    })).union(SetSequence.fromSet(changedMethodCalls).select(new ISelector<Tuples._3<SNode, SReference, SReference>, SearchResult<SNode>>() {
      public SearchResult<SNode> select(Tuples._3<SNode, SReference, SReference> it) {
        return new SearchResult<SNode>(it._0(), "replaced method call");
      }
    })).union(SetSequence.fromSet(castedMethodCalls).select(new ISelector<SNode, SearchResult<SNode>>() {
      public SearchResult<SNode> select(SNode it) {
        return new SearchResult<SNode>(it, "casted method call");
      }
    })).union(SetSequence.fromSet(unknownUsages).select(new ISelector<SNode, SearchResult<SNode>>() {
      public SearchResult<SNode> select(SNode it) {
        return new SearchResult<SNode>(it, "not migrated usages");
      }
    }));

    ip.getComponent(RefactoringView.class).showRefactoringView(ip, new RefactoringViewAction() {
      public void performAction(RefactoringViewItem refactoringViewItem) {
        refactoringViewItem.close();

        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            for (SNode cls : SetSequence.fromSet(changedClassUsages)) {
              SLinkOperations.setTarget(SNodeOperations.cast(cls, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", newSnodeNode, false);
            }
            for (Tuples._3<SNode, SReference, SReference> tmplCls : SetSequence.fromSet(changedClassUsagesInTemplates)) {
              tmplCls._0().replaceReference(tmplCls._1(), tmplCls._2());
            }
            for (Tuples._3<SNode, SReference, SReference> change : SetSequence.fromSet(changedMethodCalls)) {
              change._0().replaceReference(change._1(), change._2());
            }
            for (SNode occ : SetSequence.fromSet(castedMethodCalls)) {
              SNode operand = SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(occ), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operand", true);
              SNodeOperations.replaceWithAnother(operand, new ApiMigrationHelper.QuotationClass_yke5lt_a0a0b0d0a0a2a0a0b0a63a0().createNode(operand));
            }
          }
        });
      }
    }, new SearchResults(nodes, Sequence.fromIterable(results).where(new IWhereFilter<SearchResult<SNode>>() {
      public boolean accept(SearchResult<SNode> it) {
        return !(it.getObject().isDetached());
      }
    }).toListSequence()), false, "usages");

  }

  public SNode getNewMethod(SNode old) {
    SNode newSnodeNode = SNodeOperations.cast(SLinkOperations.getTarget(new ApiMigrationHelper.QuotationClass_yke5lt_a0a0a0a1().createNode(), "classifier", false), "jetbrains.mps.baseLanguage.structure.Interface");
    for (SNode method : ListSequence.fromList(SLinkOperations.getTargets(newSnodeNode, "method", true))) {
      if (BaseMethodDeclaration_Behavior.call_hasSameSignature_1213877350435(method, old)) {
        return method;
      }
    }
    return null;
  }

  public static class QuotationClass_yke5lt_a0a0a0a0 {
    public QuotationClass_yke5lt_a0a0a0a0() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("classifier", quotedNode1_2, SModelReference.fromString("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)"), SNodeId.fromString("~SNode")));
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_yke5lt_a0a0a1a0 {
    public QuotationClass_yke5lt_a0a0a1a0() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("classifier", quotedNode1_2, SModelReference.fromString("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#org.jetbrains.mps.openapi.model(MPS.Core/org.jetbrains.mps.openapi.model@java_stub)"), SNodeId.fromString("~SNode")));
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_yke5lt_a0a0b0d0a0a2a0a0b0a63a0 {
    public QuotationClass_yke5lt_a0a0b0d0a0a2a0a0b0a63a0() {
    }

    public SNode createNode(Object parameter_7) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_4 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_5 = quotedNode_2;
          quotedNode1_5.addReference(SReference.create("classifier", quotedNode1_5, SModelReference.fromString("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)"), SNodeId.fromString("~SNode")));
          quotedNode_1.addChild("type", quotedNode1_5);
        }
        {
          quotedNode_3 = (SNode) parameter_7;
          SNode quotedNode1_6;
          if (_parameterValues_129834374.contains(quotedNode_3)) {
            quotedNode1_6 = HUtil.copyIfNecessary(quotedNode_3);
          } else {
            _parameterValues_129834374.add(quotedNode_3);
            quotedNode1_6 = quotedNode_3;
          }
          if (quotedNode1_6 != null) {
            quotedNode_1.addChild("expression", HUtil.copyIfNecessary(quotedNode1_6));
          }
        }
        result = quotedNode1_4;
      }
      return result;
    }
  }

  public static class QuotationClass_yke5lt_a0a0a0a1 {
    public QuotationClass_yke5lt_a0a0a0a1() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("classifier", quotedNode1_2, SModelReference.fromString("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#org.jetbrains.mps.openapi.model(MPS.Core/org.jetbrains.mps.openapi.model@java_stub)"), SNodeId.fromString("~SNode")));
        result = quotedNode1_2;
      }
      return result;
    }
  }
}
