package jetbrains.mps.lang.smodel.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.findUsages.FindUsagesManager;
import jetbrains.mps.findUsages.SearchType;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.smodel.StaticReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.ide.refactoring.RefactoringView;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewAction;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewItem;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.ide.refactoring.RefactoringViewItemImpl;
import jetbrains.mps.baseLanguage.behavior.BaseMethodDeclaration_Behavior;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class ApiMigrationHelper {
  private MPSProject p;
  private Project ip;
  private IScope scope;

  public ApiMigrationHelper(MPSProject p, Project ip, IScope scope) {
    this.p = p;
    this.ip = ip;
    this.scope = scope;
  }

  public void migrate() {
    SNode oldSnodeNode = SNodeOperations.cast(SLinkOperations.getTarget(new ApiMigrationHelper.QuotationClass_yke5lt_a0a0a0a0().createNode(), "classifier", false), "jetbrains.mps.baseLanguage.structure.ClassConcept");
    final SNode newSnodeNode = SNodeOperations.cast(SLinkOperations.getTarget(new ApiMigrationHelper.QuotationClass_yke5lt_a0a0a1a0().createNode(), "classifier", false), "jetbrains.mps.baseLanguage.structure.Interface");

    Set<SNode> unknownUsages = SetSequence.fromSet(new HashSet<SNode>());

    // replace old SNode with a new interface 
    Set<SNode> nodes = SetSequence.fromSet(new HashSet<SNode>());
    SetSequence.fromSet(nodes).addElement(oldSnodeNode);

    Set<SReference> usages = FindUsagesManager.getInstance().findUsages(nodes, SearchType.USAGES, scope, new EmptyProgressMonitor());

    final Set<SNode> changedClassUsages = SetSequence.fromSet(new HashSet<SNode>());
    final Set<Tuples._2<SNode, SReference>> changedClassUsagesInTemplates = SetSequence.fromSet(new HashSet<Tuples._2<SNode, SReference>>());
    final Set<Tuples._2<SNode, SReference>> changedClassUsagesInTypes = SetSequence.fromSet(new HashSet<Tuples._2<SNode, SReference>>());
    for (SReference ref : SetSequence.fromSet(usages)) {
      SNode rNode = ref.getSourceNode();
      if (rNode.getModel().isNotEditable()) {
        continue;
      }

      SNode n = (SNode) rNode;
      if (SNodeOperations.isInstanceOf(n, "jetbrains.mps.baseLanguage.structure.ClassifierType")) {
        SetSequence.fromSet(changedClassUsages).addElement(rNode);
        continue;
      }

      if (SNodeOperations.getContainingLinkDeclaration(n) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassCreator", "typeParameter")) {
        SetSequence.fromSet(changedClassUsagesInTemplates).addElement(MultiTuple.<SNode,SReference>from(rNode, ((SReference) new StaticReference(ref.getRole(), rNode, newSnodeNode))));
        continue;
      }

      if (SNodeOperations.getContainingLinkDeclaration(n) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", "parameter")) {
        SetSequence.fromSet(changedClassUsagesInTypes).addElement(MultiTuple.<SNode,SReference>from(rNode, ((SReference) new StaticReference(ref.getRole(), rNode, newSnodeNode))));
        continue;
      }

      SetSequence.fromSet(unknownUsages).addElement(rNode);
    }

    // replace method calls 
    Set<SNode> methods = SetSequence.fromSet(new HashSet<SNode>());
    SetSequence.fromSet(methods).addSequence(ListSequence.fromList(SLinkOperations.getTargets(oldSnodeNode, "method", true)));

    Set<SReference> musages = FindUsagesManager.getInstance().findUsages(methods, SearchType.USAGES, scope, new EmptyProgressMonitor());

    final Set<Tuples._2<SNode, SReference>> changedMethodCalls = SetSequence.fromSet(new HashSet<Tuples._2<SNode, SReference>>());
    final Set<SNode> castedMethodCalls = SetSequence.fromSet(new HashSet<SNode>());

    for (SReference ref : SetSequence.fromSet(musages)) {
      SNode rNode = ref.getSourceNode();
      if (!(needMigration(rNode))) {
        continue;
      }

      SNode newMethod = getNewMethod((SNode) ref.getTargetNode());
      if (newMethod != null) {
        SetSequence.fromSet(changedMethodCalls).addElement(MultiTuple.<SNode,SReference>from(rNode, ((SReference) new StaticReference(ref.getRole(), rNode, newMethod))));
        continue;
      }

      if (SNodeOperations.getContainingLinkDeclaration(((SNode) rNode)) == SLinkOperations.findLinkDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", "operation")) {
        SetSequence.fromSet(castedMethodCalls).addElement(rNode);
        continue;
      }

      SetSequence.fromSet(unknownUsages).addElement(rNode);
    }

    // static method calls 
    Set<SNode> smethods = SetSequence.fromSet(new HashSet<SNode>());
    SetSequence.fromSet(smethods).addSequence(ListSequence.fromList(SLinkOperations.getTargets(oldSnodeNode, "staticMethod", true)));

    Set<SReference> smusages = FindUsagesManager.getInstance().findUsages(smethods, SearchType.USAGES, scope, new EmptyProgressMonitor());

    for (SReference ref : SetSequence.fromSet(smusages)) {
      SNode rNode = ref.getSourceNode();
      if (rNode.getModel().isNotEditable()) {
        continue;
      }
      SetSequence.fromSet(unknownUsages).addElement(rNode);
    }

    Iterable<SearchResult<SNode>> results = SetSequence.fromSet(changedClassUsages).select(new ISelector<SNode, SearchResult<SNode>>() {
      public SearchResult<SNode> select(SNode it) {
        return new SearchResult<SNode>(it, "replaced SNode occurences");
      }
    }).union(SetSequence.fromSet(changedClassUsagesInTemplates).select(new ISelector<Tuples._2<SNode, SReference>, SearchResult<SNode>>() {
      public SearchResult<SNode> select(Tuples._2<SNode, SReference> it) {
        return new SearchResult<SNode>(it._0(), "replaced SNode in new XYZ<SNode,...>");
      }
    })).union(SetSequence.fromSet(changedClassUsagesInTypes).select(new ISelector<Tuples._2<SNode, SReference>, SearchResult<SNode>>() {
      public SearchResult<SNode> select(Tuples._2<SNode, SReference> it) {
        return new SearchResult<SNode>(it._0(), "replaced SNode in Type<SNode,...>");
      }
    })).union(SetSequence.fromSet(changedMethodCalls).select(new ISelector<Tuples._2<SNode, SReference>, SearchResult<SNode>>() {
      public SearchResult<SNode> select(Tuples._2<SNode, SReference> it) {
        return new SearchResult<SNode>(it._0(), "replaced method call");
      }
    })).union(SetSequence.fromSet(castedMethodCalls).select(new ISelector<SNode, SearchResult<SNode>>() {
      public SearchResult<SNode> select(SNode it) {
        return new SearchResult<SNode>(it, "casted method call " + SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"), "baseMethodDeclaration", false), "name"));
      }
    })).union(SetSequence.fromSet(unknownUsages).select(new ISelector<SNode, SearchResult<SNode>>() {
      public SearchResult<SNode> select(SNode it) {
        return new SearchResult<SNode>(it, "not migrated usages");
      }
    }));

    ip.getComponent(RefactoringView.class).showRefactoringView(ip, new RefactoringViewAction() {
      public void performAction(RefactoringViewItem refactoringViewItem) {
        refactoringViewItem.close();

        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            for (SNode cls : SetSequence.fromSet(changedClassUsages)) {
              SLinkOperations.setTarget(SNodeOperations.cast(cls, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "classifier", newSnodeNode, false);
            }
            for (Tuples._2<SNode, SReference> tmplCls : SetSequence.fromSet(changedClassUsagesInTypes)) {
              tmplCls._0().setReference(tmplCls._1().getRole(), tmplCls._1());
            }
            for (Tuples._2<SNode, SReference> tmplCls : SetSequence.fromSet(changedClassUsagesInTemplates)) {
              tmplCls._0().setReference(tmplCls._1().getRole(), tmplCls._1());
            }
            for (Tuples._2<SNode, SReference> change : SetSequence.fromSet(changedMethodCalls)) {
              change._0().setReference(change._1().getRole(), change._1());
            }
            for (SNode occ : SetSequence.fromSet(castedMethodCalls)) {
              SNode operand = SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(occ), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operand", true);
              if (TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(operand), new ApiMigrationHelper.QuotationClass_yke5lt_a1a0b0e0a0a0a0c0a0a1a0lb0a().createNode())) {
                continue;
              }
              SNodeOperations.replaceWithAnother(operand, new ApiMigrationHelper.QuotationClass_yke5lt_a0a0c0e0a0a0a0c0a0a1a0lb0a().createNode(operand));
            }
          }
        });
      }
    }, new SearchResults(nodes, Sequence.fromIterable(results).where(new IWhereFilter<SearchResult<SNode>>() {
      public boolean accept(SearchResult<SNode> it) {
        return it.getObject().getModel() != null;
      }
    }).toListSequence()), false, "usages");
  }

  public void replaceSNodeMethods() {
    migrateMethods(new ApiTransformations().getTransformations());
  }

  private boolean needMigration(SNode n) {
    if (n.getModel().isNotEditable()) {
      return false;
    }
    if (eq_yke5lt_a0b0c(SModelOperations.getModelName(SNodeOperations.getModel(n)), SModelOperations.getModelName(SModelRepository.getInstance().getModelDescriptor(new SModelReference("jetbrains.mps.lang.smodel.pluginSolution.plugin", "")).getSModel()))) {
      return false;
    }
    if (eq_yke5lt_a0c0c(SModelOperations.getModelName(SNodeOperations.getModel(n)), SModelOperations.getModelName(SModelRepository.getInstance().getModelDescriptor(new SModelReference("jetbrains.mps.lang.smodel.generator.smodelAdapter", "")).getSModel()))) {
      return false;
    }
    SNode root = SNodeOperations.getContainingRoot(n);
    if (SNodeOperations.isInstanceOf(root, "jetbrains.mps.baseLanguage.structure.ClassConcept") && BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(root, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "virtual_getFqName_1213877404258", new Object[]{}).equals(jetbrains.mps.util.SNodeOperations.class.getName())) {
      return false;
    }
    return true;
  }

  private void migrateMethods(final List<Tuples._3<String, SNode, _FunctionTypes._void_P1_E0<? super SNode>>> transformations) {
    final List<Tuples._2<Set<SNode>, Set<SNode>>> usages = ListSequence.fromList(new ArrayList<Tuples._2<Set<SNode>, Set<SNode>>>());

    for (Tuples._3<String, SNode, _FunctionTypes._void_P1_E0<? super SNode>> transformation : ListSequence.fromList(transformations)) {
      Set<SNode> method = SetSequence.fromSetAndArray(new HashSet<SNode>(), transformation._1());

      Set<SReference> musages = FindUsagesManager.getInstance().findUsages(method, SearchType.USAGES, scope, new EmptyProgressMonitor());

      Set<SNode> unknown = SetSequence.fromSet(new HashSet<SNode>());
      Set<SNode> known = SetSequence.fromSet(new HashSet<SNode>());

      for (SReference usage : SetSequence.fromSet(musages)) {
        SNode n = usage.getSourceNode();
        if (!(needMigration(n))) {
          continue;
        }
        boolean isCorrectConcept = SNodeOperations.isInstanceOf(n, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation") && SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(SNodeOperations.getParent(n)), "jetbrains.mps.baseLanguage.structure.DotExpression") || SNodeOperations.isInstanceOf(n, "jetbrains.mps.baseLanguage.structure.ClassCreator");
        if (!(isCorrectConcept) || (SNodeOperations.getAncestor(n, "jetbrains.mps.lang.quotation.structure.Quotation", false, false) != null)) {
          SetSequence.fromSet(unknown).addElement(n);
          continue;
        }
        SetSequence.fromSet(known).addElement(n);
      }

      ListSequence.fromList(usages).addElement(MultiTuple.<Set<SNode>,Set<SNode>>from(known, unknown));
    }

    List<SearchResult<SNode>> results = ListSequence.fromList(new ArrayList<SearchResult<SNode>>());
    for (int i = 0; i < ListSequence.fromList(usages).count(); i++) {
      final String cat = ListSequence.fromList(transformations).getElement(i)._0();
      ListSequence.fromList(results).addSequence(SetSequence.fromSet(ListSequence.fromList(usages).getElement(i)._0()).select(new ISelector<SNode, SearchResult<SNode>>() {
        public SearchResult<SNode> select(SNode it) {
          return new SearchResult<SNode>(it, cat);
        }
      }));
      ListSequence.fromList(results).addSequence(SetSequence.fromSet(ListSequence.fromList(usages).getElement(i)._1()).select(new ISelector<SNode, SearchResult<SNode>>() {
        public SearchResult<SNode> select(SNode it) {
          return new SearchResult<SNode>(it, "unknown");
        }
      }));
    }

    ip.getComponent(RefactoringView.class).showRefactoringView(ip, new RefactoringViewAction() {
      public void performAction(RefactoringViewItem refactoringViewItem) {
        final List<SNodePointer> included = ((RefactoringViewItemImpl) refactoringViewItem).getUsagesView().getIncludedResultNodes();
        refactoringViewItem.close();
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            for (int i = 0; i < ListSequence.fromList(usages).count(); i++) {
              _FunctionTypes._void_P1_E0<? super SNode> transformer = ListSequence.fromList(transformations).getElement(i)._2();
              for (SNode known : SetSequence.fromSet(ListSequence.fromList(usages).getElement(i)._0())) {
                SNodePointer np = new SNodePointer(known);
                if (ListSequence.fromList(included).contains(np)) {
                  transformer.invoke(known);
                }
              }
            }
          }
        });
      }
    }, new SearchResults(SetSequence.fromSetWithValues(new HashSet<SNode>(), ListSequence.fromList(transformations).select(new ISelector<Tuples._3<String, SNode, _FunctionTypes._void_P1_E0<? super SNode>>, SNode>() {
      public SNode select(Tuples._3<String, SNode, _FunctionTypes._void_P1_E0<? super SNode>> it) {
        return it._1();
      }
    })), ListSequence.fromList(results).where(new IWhereFilter<SearchResult<SNode>>() {
      public boolean accept(SearchResult<SNode> it) {
        return it.getObject().getModel() != null;
      }
    }).toListSequence()), false, "usages");
  }

  private SNode getNewMethod(SNode old) {
    SNode newSnodeNode = SNodeOperations.cast(SLinkOperations.getTarget(new ApiMigrationHelper.QuotationClass_yke5lt_a0a0a0a4().createNode(), "classifier", false), "jetbrains.mps.baseLanguage.structure.Interface");
    for (SNode method : ListSequence.fromList(SLinkOperations.getTargets(newSnodeNode, "method", true))) {
      if (BaseMethodDeclaration_Behavior.call_hasSameSignature_1213877350435(method, old)) {
        return method;
      }
    }
    return null;
  }

  private static boolean eq_yke5lt_a0b0c(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_yke5lt_a0c0c(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  public static class QuotationClass_yke5lt_a0a0a0a0 {
    public QuotationClass_yke5lt_a0a0a0a0() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setReference("classifier", SReference.create("classifier", quotedNode1_2, SModelReference.fromString("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)"), SNodeId.fromString("~SNode")));
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_yke5lt_a0a0a1a0 {
    public QuotationClass_yke5lt_a0a0a1a0() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setReference("classifier", SReference.create("classifier", quotedNode1_2, SModelReference.fromString("f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)"), SNodeId.fromString("~SNode")));
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_yke5lt_a1a0b0e0a0a0a0c0a0a1a0lb0a {
    public QuotationClass_yke5lt_a1a0b0e0a0a0a0c0a0a1a0lb0a() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setReference("classifier", SReference.create("classifier", quotedNode1_2, SModelReference.fromString("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)"), SNodeId.fromString("~SNode")));
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_yke5lt_a0a0c0e0a0a0a0c0a0a1a0lb0a {
    public QuotationClass_yke5lt_a0a0c0e0a0a0a0c0a0a1a0lb0a() {
    }

    public SNode createNode(Object parameter_7) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, null, GlobalScope.getInstance(), false);
        SNode quotedNode1_4 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
          SNode quotedNode1_5 = quotedNode_2;
          quotedNode1_5.setReference("classifier", SReference.create("classifier", quotedNode1_5, SModelReference.fromString("f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)"), SNodeId.fromString("~SNode")));
          quotedNode_1.addChild("type", quotedNode1_5);
        }
        {
          quotedNode_3 = (SNode) parameter_7;
          SNode quotedNode1_6;
          if (_parameterValues_129834374.contains(quotedNode_3)) {
            quotedNode1_6 = HUtil.copyIfNecessary(quotedNode_3);
          } else {
            _parameterValues_129834374.add(quotedNode_3);
            quotedNode1_6 = quotedNode_3;
          }
          if (quotedNode1_6 != null) {
            quotedNode_1.addChild("expression", HUtil.copyIfNecessary(quotedNode1_6));
          }
        }
        result = quotedNode1_4;
      }
      return result;
    }
  }

  public static class QuotationClass_yke5lt_a0a0a0a4 {
    public QuotationClass_yke5lt_a0a0a0a4() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setReference("classifier", SReference.create("classifier", quotedNode1_2, SModelReference.fromString("f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)"), SNodeId.fromString("~SNode")));
        result = quotedNode1_2;
      }
      return result;
    }
  }
}
