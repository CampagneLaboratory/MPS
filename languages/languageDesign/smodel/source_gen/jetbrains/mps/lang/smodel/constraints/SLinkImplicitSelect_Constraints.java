package jetbrains.mps.lang.smodel.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.pattern.GeneratedMatchingPattern;
import jetbrains.mps.lang.pattern.IMatchingPattern;
import jetbrains.mps.lang.pattern.runtime.PatternUtil;
import jetbrains.mps.util.IterableUtil;

public class SLinkImplicitSelect_Constraints extends BaseConstraintsDescriptor {
  public SLinkImplicitSelect_Constraints() {
    super("jetbrains.mps.lang.smodel.structure.SLinkImplicitSelect");
  }

  @Override
  public boolean hasOwnCanBeChildMethod() {
    return true;
  }

  @Override
  public boolean canBeChild(@Nullable SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext, @Nullable final CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAChild(node, parentNode, link, childConcept, operationContext);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
    }

    return result;
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("link", new BaseReferenceConstraintsDescriptor("link", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.as(_context.getEnclosingNode(), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operand", true)), new SLinkImplicitSelect_Constraints.Pattern_f4oi2a_a1a0a0a0a0a0a0a0b0a1a0b0d(), true), "elementType", true), "jetbrains.mps.lang.smodel.structure.SNodeType"), "concept", false));
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_f4oi2a_a0a1a0a0a1a0b0a1a3;
          }
        };
      }
    });
    return references;
  }

  public static boolean static_canBeAChild(SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext) {
    return (TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.as(parentNode, "jetbrains.mps.baseLanguage.structure.DotExpression"), "operand", true)), new SLinkImplicitSelect_Constraints.Pattern_f4oi2a_a1a0a0a4(), true) != null);
  }

  public static class Pattern_f4oi2a_a1a0a0a0a0a0a0a0b0a1a0b0d extends GeneratedMatchingPattern implements IMatchingPattern {
    /*package*/ SNode patternVar_nodeType;

    public Pattern_f4oi2a_a1a0a0a0a0a0a0a0b0a1a0b0d() {
    }

    public boolean match(SNode nodeToMatch) {
      {
        SNode nodeToMatch_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0a0a0;
        nodeToMatch_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0a0a0 = nodeToMatch;
        if (!("jetbrains.mps.baseLanguage.collections.structure.SequenceType".equals(nodeToMatch_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0a0a0.getConcept().getConceptId()))) {
          return false;
        }
        {
          String childRole_SLinkImplicitSelect_Constraints_f4oi2a_ = "elementType";
          if (!(PatternUtil.hasNChildren(nodeToMatch_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0a0a0, childRole_SLinkImplicitSelect_Constraints_f4oi2a_, 1))) {
            return false;
          }
          {
            SNode childVar_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0a0a0a = IterableUtil.get(nodeToMatch_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0a0a0.getChildren(childRole_SLinkImplicitSelect_Constraints_f4oi2a_), 0);
            {
              SNode nodeToMatch_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0a0a0a;
              nodeToMatch_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0a0a0a = childVar_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0a0a0a;
              if (!("jetbrains.mps.lang.smodel.structure.SNodeType".equals(nodeToMatch_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0a0a0a.getConcept().getConceptId()))) {
                return false;
              }
              patternVar_nodeType = nodeToMatch_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0a0a0a.getReferenceTarget("concept");
            }
          }
        }
      }
      return true;
    }

    public boolean hasAntiquotations() {
      return false;
    }

    public void fillFieldValuesFrom(GeneratedMatchingPattern pattern) {
      if (pattern != null && pattern.getClass() == this.getClass()) {
        patternVar_nodeType = (SNode) pattern.getFieldValue("patternVar_nodeType");
      }
    }

    public Object getFieldValue(String fieldName) {
      if ("patternVar_nodeType".equals(fieldName)) {
        return patternVar_nodeType;
      }
      return null;
    }

    public void performActions(Object o) {
    }
  }

  public static class Pattern_f4oi2a_a1a0a0a4 extends GeneratedMatchingPattern implements IMatchingPattern {
    /*package*/ SNode patternVar_nodeType;

    public Pattern_f4oi2a_a1a0a0a4() {
    }

    public boolean match(SNode nodeToMatch) {
      {
        SNode nodeToMatch_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0;
        nodeToMatch_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0 = nodeToMatch;
        if (!("jetbrains.mps.baseLanguage.collections.structure.SequenceType".equals(nodeToMatch_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0.getConcept().getConceptId()))) {
          return false;
        }
        {
          String childRole_SLinkImplicitSelect_Constraints_f4oi2a__0 = "elementType";
          if (!(PatternUtil.hasNChildren(nodeToMatch_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0, childRole_SLinkImplicitSelect_Constraints_f4oi2a__0, 1))) {
            return false;
          }
          {
            SNode childVar_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0a = IterableUtil.get(nodeToMatch_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0.getChildren(childRole_SLinkImplicitSelect_Constraints_f4oi2a__0), 0);
            {
              SNode nodeToMatch_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0a;
              nodeToMatch_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0a = childVar_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0a;
              if (!("jetbrains.mps.lang.smodel.structure.SNodeType".equals(nodeToMatch_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0a.getConcept().getConceptId()))) {
                return false;
              }
              patternVar_nodeType = nodeToMatch_SLinkImplicitSelect_Constraints_f4oi2a_a0a0a0a0a.getReferenceTarget("concept");
            }
          }
        }
      }
      return true;
    }

    public boolean hasAntiquotations() {
      return false;
    }

    public void fillFieldValuesFrom(GeneratedMatchingPattern pattern) {
      if (pattern != null && pattern.getClass() == this.getClass()) {
        patternVar_nodeType = (SNode) pattern.getFieldValue("patternVar_nodeType");
      }
    }

    public Object getFieldValue(String fieldName) {
      if ("patternVar_nodeType".equals(fieldName)) {
        return patternVar_nodeType;
      }
      return null;
    }

    public void performActions(Object o) {
    }
  }

  private static SNodePointer canBeChildBreakingPoint = new SNodePointer("r:00000000-0000-4000-0000-011c895902fb(jetbrains.mps.lang.smodel.constraints)", "8405512791876074476");
  private static SNodePointer breakingNode_f4oi2a_a0a1a0a0a1a0b0a1a3 = new SNodePointer("r:00000000-0000-4000-0000-011c895902fb(jetbrains.mps.lang.smodel.constraints)", "8405512791876074490");
}
