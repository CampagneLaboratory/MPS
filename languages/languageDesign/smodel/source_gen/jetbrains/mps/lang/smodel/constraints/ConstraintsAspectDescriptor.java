package jetbrains.mps.lang.smodel.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.SConceptId;

public class ConstraintsAspectDescriptor implements jetbrains.mps.smodel.runtime.ConstraintsAspectDescriptor {
  public ConstraintsAspectDescriptor() {
  }
  public ConstraintsDescriptor getDescriptor(String fqName) {
    switch (Arrays.binarySearch(stringSwitchCases_2qnle6_a0a0b, fqName)) {
      case 32:
        return new SPropertyAccess_Constraints();
      case 18:
        return new Node_ConceptMethodCall_Constraints();
      case 29:
        return new SLinkAccess_Constraints();
      case 20:
        return new Node_IsRoleOperation_Constraints();
      case 31:
        return new SLinkListAccess_Constraints();
      case 3:
        return new EnumMemberReference_Constraints();
      case 12:
        return new LinkRefQualifier_Constraints();
      case 17:
        return new NodeRefExpression_Constraints();
      case 19:
        return new Node_GetReferentSearchScopeOperation_Constraints();
      case 33:
        return new SearchScope_ContainsOperation_Constraints();
      case 11:
        return new LinkRefExpression_Constraints();
      case 28:
        return new SEnum_MemberOperation_Constraints();
      case 27:
        return new SEnumOperationInvocation_Constraints();
      case 26:
        return new SEnumOperation_Constraints();
      case 25:
        return new SEnumMemberOperation_Constraints();
      case 30:
        return new SLinkImplicitSelect_Constraints();
      case 5:
        return new IReferenceOperation_Constraints();
      case 1:
        return new CheckedModuleReference_Constraints();
      case 6:
        return new IfInstanceOfVarReference_Constraints();
      case 9:
        return new LinkNameRefExpression_Constraints();
      case 23:
        return new PropertyNameRefExpression_Constraints();
      case 15:
        return new NodeAttributeQualifier_Constraints();
      case 7:
        return new LinkAttributeQualifier_Constraints();
      case 21:
        return new PropertyAttributeQualifier_Constraints();
      case 24:
        return new PropertyQualifier_Constraints();
      case 10:
        return new LinkQualifier_Constraints();
      case 14:
        return new ModuleReferenceExpression_Constraints();
      case 13:
        return new ModelReferenceExpression_Constraints();
      case 16:
        return new NodePointerExpression_Constraints();
      case 4:
        return new EnumMemberValueRefExpression_Constraints();
      case 2:
        return new ChildNodeRefExpression_Constraints();
      case 0:
        return new CheckedModuleQualifiedName_Constraints();
      case 8:
        return new LinkIdRefExpression_Constraints();
      case 22:
        return new PropertyIdRefExpression_Constraints();
      default:
        return new BaseConstraintsDescriptor(fqName);
    }
  }
  public ConstraintsDescriptor getDescriptor(SConceptId conceptId) {
    long id = conceptId.getIdValue();
    if (id == 0x108f96cca6fL) {
      return new SPropertyAccess_Constraints();
    }
    if (id == 0x1129a43046bL) {
      return new Node_ConceptMethodCall_Constraints();
    }
    if (id == 0x108f96ea2caL) {
      return new SLinkAccess_Constraints();
    }
    if (id == 0x10a67578ddeL) {
      return new Node_IsRoleOperation_Constraints();
    }
    if (id == 0x108f970c119L) {
      return new SLinkListAccess_Constraints();
    }
    if (id == 0x1091e6212fdL) {
      return new EnumMemberReference_Constraints();
    }
    if (id == 0x11886c4bac0L) {
      return new LinkRefQualifier_Constraints();
    }
    if (id == 0x11be716563cL) {
      return new NodeRefExpression_Constraints();
    }
    if (id == 0x11c530706b2L) {
      return new Node_GetReferentSearchScopeOperation_Constraints();
    }
    if (id == 0x11c536d2503L) {
      return new SearchScope_ContainsOperation_Constraints();
    }
    if (id == 0x11d88b27d15L) {
      return new LinkRefExpression_Constraints();
    }
    if (id == 0x120ed37e691L) {
      return new SEnum_MemberOperation_Constraints();
    }
    if (id == 0x120ed32e98bL) {
      return new SEnumOperationInvocation_Constraints();
    }
    if (id == 0x120ed37273dL) {
      return new SEnumOperation_Constraints();
    }
    if (id == 0x120f244ef53L) {
      return new SEnumMemberOperation_Constraints();
    }
    if (id == 0x316f884c72a4157dL) {
      return new SLinkImplicitSelect_Constraints();
    }
    if (id == 0x157abf675bd53df2L) {
      return new IReferenceOperation_Constraints();
    }
    if (id == 0x3c7a9d8c8d63d4f3L) {
      return new CheckedModuleReference_Constraints();
    }
    if (id == 0x1a228da1357fca73L) {
      return new IfInstanceOfVarReference_Constraints();
    }
    if (id == 0x48e6e2695189e59aL) {
      return new LinkNameRefExpression_Constraints();
    }
    if (id == 0x48e6e269518c89f7L) {
      return new PropertyNameRefExpression_Constraints();
    }
    if (id == 0x58ea5217b045b9b5L) {
      return new NodeAttributeQualifier_Constraints();
    }
    if (id == 0x58ea5217b045b9b7L) {
      return new LinkAttributeQualifier_Constraints();
    }
    if (id == 0x58ea5217b045c9b9L) {
      return new PropertyAttributeQualifier_Constraints();
    }
    if (id == 0x26b292a5afc7ccadL) {
      return new PropertyQualifier_Constraints();
    }
    if (id == 0x26b292a5afc7ccacL) {
      return new LinkQualifier_Constraints();
    }
    if (id == 0x38130dc4e3db5af1L) {
      return new ModuleReferenceExpression_Constraints();
    }
    if (id == 0x7c3f2da20e92b62L) {
      return new ModelReferenceExpression_Constraints();
    }
    if (id == 0x195fd0576ac9bb49L) {
      return new NodePointerExpression_Constraints();
    }
    if (id == 0x60c7f83bafd83b5bL) {
      return new EnumMemberValueRefExpression_Constraints();
    }
    if (id == 0x84baf20c71f8a79L) {
      return new ChildNodeRefExpression_Constraints();
    }
    if (id == 0x6085898237feae86L) {
      return new CheckedModuleQualifiedName_Constraints();
    }
    if (id == 0x24b2bf7ce1957615L) {
      return new LinkIdRefExpression_Constraints();
    }
    if (id == 0x24b2bf7ce1a42fa0L) {
      return new PropertyIdRefExpression_Constraints();
    }
    return new BaseConstraintsDescriptor(conceptId);
  }
  private static String[] stringSwitchCases_2qnle6_a0a0b = new String[]{"jetbrains.mps.lang.smodel.structure.CheckedModuleQualifiedName", "jetbrains.mps.lang.smodel.structure.CheckedModuleReference", "jetbrains.mps.lang.smodel.structure.ChildNodeRefExpression", "jetbrains.mps.lang.smodel.structure.EnumMemberReference", "jetbrains.mps.lang.smodel.structure.EnumMemberValueRefExpression", "jetbrains.mps.lang.smodel.structure.IReferenceOperation", "jetbrains.mps.lang.smodel.structure.IfInstanceOfVarReference", "jetbrains.mps.lang.smodel.structure.LinkAttributeQualifier", "jetbrains.mps.lang.smodel.structure.LinkIdRefExpression", "jetbrains.mps.lang.smodel.structure.LinkNameRefExpression", "jetbrains.mps.lang.smodel.structure.LinkQualifier", "jetbrains.mps.lang.smodel.structure.LinkRefExpression", "jetbrains.mps.lang.smodel.structure.LinkRefQualifier", "jetbrains.mps.lang.smodel.structure.ModelReferenceExpression", "jetbrains.mps.lang.smodel.structure.ModuleReferenceExpression", "jetbrains.mps.lang.smodel.structure.NodeAttributeQualifier", "jetbrains.mps.lang.smodel.structure.NodePointerExpression", "jetbrains.mps.lang.smodel.structure.NodeRefExpression", "jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall", "jetbrains.mps.lang.smodel.structure.Node_GetReferentSearchScopeOperation", "jetbrains.mps.lang.smodel.structure.Node_IsRoleOperation", "jetbrains.mps.lang.smodel.structure.PropertyAttributeQualifier", "jetbrains.mps.lang.smodel.structure.PropertyIdRefExpression", "jetbrains.mps.lang.smodel.structure.PropertyNameRefExpression", "jetbrains.mps.lang.smodel.structure.PropertyQualifier", "jetbrains.mps.lang.smodel.structure.SEnumMemberOperation", "jetbrains.mps.lang.smodel.structure.SEnumOperation", "jetbrains.mps.lang.smodel.structure.SEnumOperationInvocation", "jetbrains.mps.lang.smodel.structure.SEnum_MemberOperation", "jetbrains.mps.lang.smodel.structure.SLinkAccess", "jetbrains.mps.lang.smodel.structure.SLinkImplicitSelect", "jetbrains.mps.lang.smodel.structure.SLinkListAccess", "jetbrains.mps.lang.smodel.structure.SPropertyAccess", "jetbrains.mps.lang.smodel.structure.SearchScope_ContainsOperation"};
}
