package jetbrains.mps.lang.smodel.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.baseLanguage.behavior.IOperation_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class ConvertConceptPropertySetToAssignment_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public ConvertConceptPropertySetToAssignment_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.smodel.structure.ConceptProperty_SetOperation";
  }

  public String getPresentation() {
    return "ConvertConceptPropertySetToAssignment";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.smodel.intentions.ConvertConceptPropertySetToAssignment_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902ff(jetbrains.mps.lang.smodel.intentions)", "4726561250374329612");
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ConvertConceptPropertySetToAssignment_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Convert to assignment";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode lValue = IOperation_Behavior.call_getOperand_1213877410070(node);
      SNode rValue = SLinkOperations.getTarget(node, "value", true);
      SNodeOperations.detachNode(SLinkOperations.getTarget(node, "value", true));
      SNode dotExpr = IOperation_Behavior.call_getDotExpression_1224687669172(node);
      SNodeOperations.detachNode(SLinkOperations.getTarget(dotExpr, "operand", true));
      SNode assignment = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.AssignmentExpression", null);
      SLinkOperations.setTarget(assignment, "lValue", lValue, true);
      SLinkOperations.setTarget(assignment, "rValue", rValue, true);
      SNodeOperations.replaceWithAnother(dotExpr, assignment);
    }

    public IntentionDescriptor getDescriptor() {
      return ConvertConceptPropertySetToAssignment_Intention.this;
    }
  }
}
