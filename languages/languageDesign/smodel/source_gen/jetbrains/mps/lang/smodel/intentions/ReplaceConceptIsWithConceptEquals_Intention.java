package jetbrains.mps.lang.smodel.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class ReplaceConceptIsWithConceptEquals_Intention extends BaseIntention {
  public ReplaceConceptIsWithConceptEquals_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.smodel.structure.OperationParm_Concept";
  }

  public String getPresentation() {
    return "ReplaceConceptIsWithConceptEquals";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.smodel.intentions.ReplaceConceptIsWithConceptEquals_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:b457e00d-8ebc-46ca-aafa-d2681bbfa794(jetbrains.mps.lang.smodel.intentions@3_0)", "1203704393457");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Replace 'concept=' with Concept List";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "conceptArgument", true), "jetbrains.mps.lang.smodel.structure.RefConcept_Reference");
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode conceptList = SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.smodel.structure.OperationParm_ConceptList", null);
    SLinkOperations.setTarget(ListSequence.fromList(SLinkOperations.getTargets(conceptList, "concept", true)).first(), "concept", SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(node, "conceptArgument", true), "jetbrains.mps.lang.smodel.structure.RefConcept_Reference"), "conceptDeclaration", false), false);
    SNodeOperations.replaceWithAnother(node, conceptList);
  }
}
