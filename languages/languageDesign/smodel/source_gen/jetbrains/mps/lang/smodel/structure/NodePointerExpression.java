package jetbrains.mps.lang.smodel.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class NodePointerExpression extends Expression {
  public static final String concept = "jetbrains.mps.lang.smodel.structure.NodePointerExpression";
  public static final String REFERENT_NODE = "referentNode";

  public NodePointerExpression(SNode node) {
    super(node);
  }

  public INamedConcept getReferentNode() {
    return (INamedConcept) this.getReferent(INamedConcept.class, NodePointerExpression.REFERENT_NODE);
  }

  public void setReferentNode(INamedConcept node) {
    super.setReferent(NodePointerExpression.REFERENT_NODE, node);
  }

  public static NodePointerExpression newInstance(SModel sm, boolean init) {
    return (NodePointerExpression) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.NodePointerExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static NodePointerExpression newInstance(SModel sm) {
    return NodePointerExpression.newInstance(sm, false);
  }
}
