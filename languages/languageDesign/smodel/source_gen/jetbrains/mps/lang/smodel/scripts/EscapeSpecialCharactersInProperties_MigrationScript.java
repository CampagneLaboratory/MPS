package jetbrains.mps.lang.smodel.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.util.SNodeOperations;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class EscapeSpecialCharactersInProperties_MigrationScript extends BaseMigrationScript {
  public EscapeSpecialCharactersInProperties_MigrationScript(IOperationContext operationContext) {
    super("Escape special characters in property values");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Escape special characters in property values";
      }

      public String getAdditionalInfo() {
        return "Escape special characters in property values";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.core.structure.BaseConcept";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        for (IMapping<String, String> property : MapSequence.fromMap(SNodeOperations.getProperties(node))) {
          if (property.value() != null && !(property.value().equals(NameUtil.escapeInvisibleCharacters(property.value())))) {
            return true;
          }
        }
        return false;
      }

      public void doUpdateInstanceNode(SNode node) {
        for (IMapping<String, String> property : MapSequence.fromMap(SNodeOperations.getProperties(node))) {
          if (property.value() == null) {
            continue;
          }
          String escapedValue = NameUtil.escapeInvisibleCharacters(property.value());
          if (!(property.value().equals(escapedValue))) {
            SNodeAccessUtil.setProperty(node, property.key(), escapedValue);
          }
        }
      }

      public boolean isShowAsIntention() {
        return true;
      }
    });
  }
}
