package jetbrains.mps.lang.smodel.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.lang.structure.editor.structure_StyleSheet;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.editor.runtime.style.Padding;
import jetbrains.mps.editor.runtime.style.Measure;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.baseLanguage.editor.BaseLanguageStyle_StyleSheet;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.cellMenu.CompositeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteInfoPartExt;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.editor.generator.internal.AbstractCellMenuPart_Generic_Group;
import java.util.List;
import jetbrains.mps.smodel.IOperationContext;
import java.util.Collection;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.smodel.language.LanguageRegistry;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.behavior.LanguageRefExpression_Behavior;
import jetbrains.mps.lang.project.editor.ProjectStructure_StyleSheet;

public class LanguageRefExpression_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_9pn6lo_a(editorContext, node);
  }
  public EditorCell createInspectedCell(EditorContext editorContext, SNode node) {
    return this.createCollection_9pn6lo_a_0(editorContext, node);
  }
  private EditorCell createCollection_9pn6lo_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_9pn6lo_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createComponent_9pn6lo_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_9pn6lo_b0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_9pn6lo_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_9pn6lo_d0(editorContext, node));
    return editorCell;
  }
  private EditorCell createComponent_9pn6lo_a0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = editorContext.getCellFactory().createEditorComponentCell(node, "jetbrains.mps.lang.core.editor.alias");
    Style style = new StyleImpl();
    structure_StyleSheet.apply_Keyword(style, editorCell);
    style.set(StyleAttributes.PADDING_RIGHT, 0, new Padding(0, Measure.SPACES));
    editorCell.getStyle().putAll(style);
    return editorCell;
  }
  private EditorCell createConstant_9pn6lo_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "/");
    editorCell.setCellId("Constant_9pn6lo_b0");
    Style style = new StyleImpl();
    BaseLanguageStyle_StyleSheet.apply_LeftParenAfterName(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_9pn6lo_c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("namespace");
    provider.setNoTargetText("<no namespace>");
    provider.setReadOnly(true);
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_namespace");
    editorCell.setSubstituteInfo(new CompositeSubstituteInfo(editorContext, provider.getCellContext(), new SubstituteInfoPartExt[]{new LanguageRefExpression_Editor.LanguageRefExpression_generic_cellMenu_9pn6lo_a0c0()}));
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  public static class LanguageRefExpression_generic_cellMenu_9pn6lo_a0c0 extends AbstractCellMenuPart_Generic_Group {
    public LanguageRefExpression_generic_cellMenu_9pn6lo_a0c0() {
    }
    public List<?> createParameterObjects(SNode node, IOperationContext operationContext, EditorContext editorContext) {
      Collection<SLanguage> allLanguages = LanguageRegistry.getInstance().getAllLanguages();
      return new ArrayList<SLanguage>(allLanguages);
    }
    protected void handleAction(Object parameterObject, SNode node, SModel model, IOperationContext operationContext, EditorContext editorContext) {
      this.handleAction_impl((SLanguage) parameterObject, node, model, operationContext, editorContext);
    }
    public void handleAction_impl(SLanguage parameterObject, SNode node, SModel model, IOperationContext operationContext, EditorContext editorContext) {
      LanguageRefExpression_Behavior.call_setLanguage_4497478346160391203(node, parameterObject);
    }
    public boolean isReferentPresentation() {
      return false;
    }
  }
  private EditorCell createConstant_9pn6lo_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "/");
    editorCell.setCellId("Constant_9pn6lo_d0");
    Style style = new StyleImpl();
    BaseLanguageStyle_StyleSheet.apply_RightParen(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_9pn6lo_a_0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_9pn6lo_a_0");
    editorCell.setBig(true);
    editorCell.setGridLayout(true);
    editorCell.addEditorCell(this.createCollection_9pn6lo_a0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_9pn6lo_b0(editorContext, node));
    return editorCell;
  }
  private EditorCell createCollection_9pn6lo_a0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_9pn6lo_a0");
    editorCell.addEditorCell(this.createConstant_9pn6lo_a0a(editorContext, node));
    editorCell.addEditorCell(this.createProperty_9pn6lo_b0a(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_9pn6lo_a0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "module uid");
    editorCell.setCellId("Constant_9pn6lo_a0a");
    Style style = new StyleImpl();
    ProjectStructure_StyleSheet.apply_KeyWord(style, editorCell);
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_9pn6lo_b0a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("languageId");
    provider.setNoTargetText("<no languageId>");
    provider.setReadOnly(true);
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_languageId");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createCollection_9pn6lo_b0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_9pn6lo_b0");
    editorCell.addEditorCell(this.createConstant_9pn6lo_a1a(editorContext, node));
    editorCell.addEditorCell(this.createProperty_9pn6lo_b1a(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_9pn6lo_a1a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "version");
    editorCell.setCellId("Constant_9pn6lo_a1a");
    Style style = new StyleImpl();
    ProjectStructure_StyleSheet.apply_KeyWord(style, editorCell);
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_9pn6lo_b1a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("version");
    provider.setNoTargetText("<no version>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_version");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
}
