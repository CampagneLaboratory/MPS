package jetbrains.mps.lang.smodel.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.AbstractNodeRefExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.AbstractOperationParameter", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.AllAttributeQualifier", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.AsNodeOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.AttributeAccess", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.AttributeQualifier", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.CheckedModuleQualifiedName", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.CheckedModuleReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.ChildNodeRefExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.ConceptFqNameRefExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.ConceptRefExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.ConceptReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.ConceptSwitchStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.ConceptSwitchStatementCase", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Concept_GetAllSubConcepts", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Concept_GetAllSuperConcepts", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Concept_GetDirectSuperConcepts", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Concept_GetHierarchy", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Concept_IsExactlyOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Concept_IsSubConceptOfOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Concept_IsSuperConceptOfOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Concept_NewInstance", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.EnumMemberReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.EnumMemberValueRefExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.EnumMember_NameOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.EnumMember_ValueOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.EqualsStructurallyExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.ILinkAccess", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.ILinkAccessQualifier", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.ILinkAccessQualifierContainer", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.ILinkQualifier", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.IPropertyAccessQualifier", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.IPropertyQualifier", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.IRefConceptArg", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.IReferenceOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.IfInstanceOfStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.IfInstanceOfVarReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.IfInstanceOfVariable", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.LanguageReferenceExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.LinkAttributeQualifier", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.LinkList_AddNewChildOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.LinkNameRefExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.LinkQualifier", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.LinkRefExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.LinkRefQualifier", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Link_SetNewChildOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Link_SetTargetOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.ModelReferenceExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Model_AddRootOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Model_CreateNewNodeOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Model_CreateNewRootNodeOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Model_GetLongNameOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Model_GetModule", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Model_NodesIncludingImportedOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Model_NodesOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Model_RootsIncludingImportedOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Model_RootsOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.ModuleReferenceExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.NodeAttributeQualifier", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.NodePointerExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.NodeRefExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_CopyOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_DeleteOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_DetachOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_GetAllSiblingsOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_GetAncestorOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_GetAncestorsOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_GetChildrenOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_GetConceptOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_GetContainingLinkOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_GetContainingRoleOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_GetContainingRootOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_GetDescendantsOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_GetIndexInParentOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_GetModelOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_GetNextSiblingOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_GetNextSiblingsOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_GetParentOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_GetPrevSiblingOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_GetPrevSiblingsOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_GetReferenceOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_GetReferencesOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_GetReferentSearchScopeOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_InsertNewNextSiblingOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_InsertNewPrevSiblingOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_InsertNextSiblingOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_InsertPrevSiblingOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_IsAttributeOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_IsInstanceOfOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_IsNotNullOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_IsNullOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_IsRoleOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_ReplaceWithAnotherOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Node_ReplaceWithNewOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.OfConceptOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.OperationParm_Concept", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.OperationParm_ConceptList", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.OperationParm_Inclusion", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.OperationParm_LinkQualifier", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.OperationParm_Root", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.OperationParm_SameMetaLevel", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.OperationParm_StopConceptList", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.PoundExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.PropertyAttributeQualifier", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.PropertyNameRefExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.PropertyQualifier", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Property_HasValue_Enum", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Property_HasValue_Simple", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Property_RemoveOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Property_SetOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.RefConcept_Reference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Reference_GetLinkDeclarationOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Reference_GetResolveInfo", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Reference_GetRoleOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.Reference_GetTargetOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SConceptType", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SEnumMemberOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SEnumMemberType", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SEnumOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SEnumOperationInvocation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SEnum_MemberForNameOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SEnum_MemberForValueOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SEnum_MemberOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SEnum_MembersOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SLinkAccess", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SLinkImplicitSelect", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SLinkListAccess", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SModelType", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SNodeCreator", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SNodeListCreator", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SNodeListType", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SNodeOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SNodeType", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SPropertyAccess", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SReferenceType", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SearchScopeType", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SearchScope_ContainsOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.smodel.structure.SemanticDowncastExpression", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.AbstractNodeRefExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").abstract_().alias("", "abstract node reference expression").staticScope(StaticScope.NONE).create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.AbstractOperationParameter").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.AllAttributeQualifier").super_("jetbrains.mps.lang.smodel.structure.AttributeQualifier").parents("jetbrains.mps.lang.smodel.structure.AttributeQualifier").alias("<all>", "all attributes").create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.AsNodeOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("asNode", "").staticScope(StaticScope.NONE).create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.AttributeAccess").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation", "jetbrains.mps.lang.smodel.structure.ILinkAccess").children(new String[]{"qualifier"}, new boolean[]{false}).alias("@", "attribute access").staticScope(StaticScope.NONE).create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.AttributeQualifier").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.CheckedModuleQualifiedName").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("moduleId").alias("module qualified name", "").staticScope(StaticScope.NONE).create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.CheckedModuleReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("moduleId").alias("module reference", "").staticScope(StaticScope.NONE).create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.ChildNodeRefExpression").super_("jetbrains.mps.lang.smodel.structure.AbstractNodeRefExpression").parents("jetbrains.mps.lang.smodel.structure.AbstractNodeRefExpression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("targetNode").children(new String[]{"parent"}, new boolean[]{false}).alias("childNode", "").staticScope(StaticScope.NONE).create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.ConceptFqNameRefExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("conceptDeclaration").alias("concept qualified name/<name>/", "").staticScope(StaticScope.NONE).create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.ConceptRefExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("conceptDeclaration").alias("concept/<name>/", "concept reference").staticScope(StaticScope.NONE).create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.ConceptReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("concept").create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.ConceptSwitchStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"expression", "case"}, new boolean[]{false, true}).alias("concept switch", "").staticScope(StaticScope.NONE).create();
        break;
      case 13:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.ConceptSwitchStatementCase").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"concept", "body"}, new boolean[]{false, false}).create();
        break;
      case 14:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Concept_GetAllSubConcepts").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").children(new String[]{"smodel", "scope"}, new boolean[]{false, false}).alias("sub-concepts", "").staticScope(StaticScope.NONE).create();
        break;
      case 15:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Concept_GetAllSuperConcepts").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("super-concepts/all", "").staticScope(StaticScope.NONE).create();
        break;
      case 16:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Concept_GetDirectSuperConcepts").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("super-concepts/direct", "").staticScope(StaticScope.NONE).create();
        break;
      case 17:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Concept_GetHierarchy").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("hierarchy", "").staticScope(StaticScope.NONE).create();
        break;
      case 18:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Concept_IsExactlyOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").children(new String[]{"conceptArgument"}, new boolean[]{false}).alias("isExactly", "concept declaration is exactly the same").staticScope(StaticScope.NONE).create();
        break;
      case 19:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Concept_IsSubConceptOfOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").children(new String[]{"conceptArgument"}, new boolean[]{false}).alias("isSubConceptOf", "").staticScope(StaticScope.NONE).create();
        break;
      case 20:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Concept_IsSuperConceptOfOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").children(new String[]{"conceptArgument"}, new boolean[]{false}).alias("isSuperConceptOf", "").staticScope(StaticScope.NONE).create();
        break;
      case 21:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Concept_NewInstance").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").children(new String[]{"prototypeNode"}, new boolean[]{false}).alias("new instance", "create new node").staticScope(StaticScope.NONE).create();
        break;
      case 22:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.EnumMemberReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("enumMember").alias("<<{enumMember}>>", "").staticScope(StaticScope.NONE).create();
        break;
      case 23:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.EnumMemberValueRefExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("enum", "member").alias("enum member value/<name>/", "value").staticScope(StaticScope.NONE).create();
        break;
      case 24:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.EnumMember_NameOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.smodel.structure.SEnumMemberOperation", "jetbrains.mps.lang.core.structure.BaseConcept").alias("name", "enum member name").staticScope(StaticScope.NONE).create();
        break;
      case 25:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.EnumMember_ValueOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.smodel.structure.SEnumMemberOperation", "jetbrains.mps.lang.core.structure.BaseConcept").alias("value", "enum member value").staticScope(StaticScope.NONE).create();
        break;
      case 26:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.EqualsStructurallyExpression").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("matches", "nodes structural equality operation").staticScope(StaticScope.NONE).create();
        break;
      case 27:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.ILinkAccess").interface_().create();
        break;
      case 28:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.ILinkAccessQualifier").interface_().create();
        break;
      case 29:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.ILinkAccessQualifierContainer").interface_().create();
        break;
      case 30:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.ILinkQualifier").interface_().create();
        break;
      case 31:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.IPropertyAccessQualifier").interface_().create();
        break;
      case 32:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.IPropertyQualifier").interface_().create();
        break;
      case 33:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.IRefConceptArg").interface_().create();
        break;
      case 34:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.IReferenceOperation").interface_().parents("jetbrains.mps.baseLanguage.structure.IOperation").create();
        break;
      case 35:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.IfInstanceOfStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").references("nodeConcept").children(new String[]{"nodeExpression", "body", "variable"}, new boolean[]{false, false, false}).alias("ifInstanceOf", "if a node is instance of concept").staticScope(StaticScope.NONE).create();
        break;
      case 36:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.IfInstanceOfVarReference").super_("jetbrains.mps.baseLanguage.structure.BaseVariableReference").parents("jetbrains.mps.baseLanguage.structure.BaseVariableReference").references("instanceOfVariable").staticScope(StaticScope.NONE).create();
        break;
      case 37:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.IfInstanceOfVariable").super_("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration").create();
        break;
      case 38:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.LanguageReferenceExpression").super_("jetbrains.mps.lang.smodel.structure.ModuleReferenceExpression").parents("jetbrains.mps.lang.smodel.structure.ModuleReferenceExpression").alias("language", "").staticScope(StaticScope.NONE).create();
        break;
      case 39:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.LinkAttributeQualifier").super_("jetbrains.mps.lang.smodel.structure.AttributeQualifier").parents("jetbrains.mps.lang.smodel.structure.AttributeQualifier").references("attributeConcept").children(new String[]{"linkQualifier"}, new boolean[]{false}).create();
        break;
      case 40:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.LinkList_AddNewChildOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").references("concept").alias("add new", "add new child").staticScope(StaticScope.NONE).create();
        break;
      case 41:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.LinkNameRefExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("conceptDeclaration", "linkDeclaration").alias("link name/<role>/", "name").staticScope(StaticScope.NONE).create();
        break;
      case 42:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.LinkQualifier").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.smodel.structure.ILinkQualifier").references("link").create();
        break;
      case 43:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.LinkRefExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("conceptDeclaration", "linkDeclaration").alias("link/<role>/", "link reference").staticScope(StaticScope.NONE).create();
        break;
      case 44:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.LinkRefQualifier").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.smodel.structure.ILinkAccessQualifier").references("link").create();
        break;
      case 45:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Link_SetNewChildOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").references("concept").alias("set new", "set new child").staticScope(StaticScope.NONE).create();
        break;
      case 46:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Link_SetTargetOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").children(new String[]{"linkTarget"}, new boolean[]{false}).alias("set", "set child or referent").staticScope(StaticScope.NONE).create();
        break;
      case 47:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.ModelReferenceExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("name", "stereotype", "fqName").alias("model", "").staticScope(StaticScope.NONE).create();
        break;
      case 48:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Model_AddRootOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").children(new String[]{"nodeArgument"}, new boolean[]{false}).alias("add root", "").staticScope(StaticScope.NONE).create();
        break;
      case 49:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Model_CreateNewNodeOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").references("concept").children(new String[]{"nodeId", "prototypeNode"}, new boolean[]{false, false}).alias("new node", "").staticScope(StaticScope.NONE).create();
        break;
      case 50:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Model_CreateNewRootNodeOperation").super_("jetbrains.mps.lang.smodel.structure.Model_CreateNewNodeOperation").parents("jetbrains.mps.lang.smodel.structure.Model_CreateNewNodeOperation").alias("new root node", "").staticScope(StaticScope.NONE).create();
        break;
      case 51:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Model_GetLongNameOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("name", "").staticScope(StaticScope.NONE).create();
        break;
      case 52:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Model_GetModule").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("module", "").staticScope(StaticScope.NONE).create();
        break;
      case 53:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Model_NodesIncludingImportedOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").references("concept").children(new String[]{"scope"}, new boolean[]{false}).alias("nodesIncludingImported", "").staticScope(StaticScope.NONE).create();
        break;
      case 54:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Model_NodesOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").references("concept").alias("nodes", "").staticScope(StaticScope.NONE).create();
        break;
      case 55:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Model_RootsIncludingImportedOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").references("concept").children(new String[]{"scope"}, new boolean[]{false}).alias("rootsIncludingImported", "").staticScope(StaticScope.NONE).create();
        break;
      case 56:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Model_RootsOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").references("concept").alias("roots", "").staticScope(StaticScope.NONE).create();
        break;
      case 57:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.ModuleReferenceExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("name", "moduleId").alias("module", "").staticScope(StaticScope.NONE).create();
        break;
      case 58:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.NodeAttributeQualifier").super_("jetbrains.mps.lang.smodel.structure.AttributeQualifier").parents("jetbrains.mps.lang.smodel.structure.AttributeQualifier").references("attributeConcept").create();
        break;
      case 59:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.NodePointerExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("referentNode").alias("nodePointer/<name>/", "named node pointer").staticScope(StaticScope.NONE).create();
        break;
      case 60:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.NodeRefExpression").super_("jetbrains.mps.lang.smodel.structure.AbstractNodeRefExpression").parents("jetbrains.mps.lang.smodel.structure.AbstractNodeRefExpression").references("referentNode").alias("node/<name>/", "named node reference").staticScope(StaticScope.NONE).create();
        break;
      case 61:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation", "jetbrains.mps.baseLanguage.structure.IMethodCall").properties("directCall").references("conceptMethodDeclaration").staticScope(StaticScope.NONE).create();
        break;
      case 62:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_CopyOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("copy", "creates copy of this node").staticScope(StaticScope.NONE).create();
        break;
      case 63:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_DeleteOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("delete", "delete this node").staticScope(StaticScope.NONE).create();
        break;
      case 64:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_DetachOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("detach", "removes from container").staticScope(StaticScope.NONE).create();
        break;
      case 65:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_GetAllSiblingsOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("siblings", "").staticScope(StaticScope.NONE).create();
        break;
      case 66:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_GetAncestorOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("ancestor", "").staticScope(StaticScope.NONE).create();
        break;
      case 67:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_GetAncestorsOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("ancestors", "").staticScope(StaticScope.NONE).create();
        break;
      case 68:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_GetChildrenOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("children", "").staticScope(StaticScope.NONE).create();
        break;
      case 69:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_GetConceptOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("concept", "get node's concept declaration").staticScope(StaticScope.NONE).create();
        break;
      case 70:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_GetContainingLinkOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("containingLink", "").staticScope(StaticScope.NONE).create();
        break;
      case 71:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_GetContainingRoleOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("containingRole", "").staticScope(StaticScope.NONE).create();
        break;
      case 72:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_GetContainingRootOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("containing root", "").staticScope(StaticScope.NONE).create();
        break;
      case 73:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_GetDescendantsOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("descendants", "").staticScope(StaticScope.NONE).create();
        break;
      case 74:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_GetIndexInParentOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("index", "gets node's index in parent's collection").staticScope(StaticScope.NONE).create();
        break;
      case 75:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_GetModelOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("model", "").staticScope(StaticScope.NONE).create();
        break;
      case 76:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_GetNextSiblingOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("next-sibling", "").staticScope(StaticScope.NONE).create();
        break;
      case 77:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_GetNextSiblingsOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("next-siblings", "").staticScope(StaticScope.NONE).create();
        break;
      case 78:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_GetParentOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("parent", "").staticScope(StaticScope.NONE).create();
        break;
      case 79:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_GetPrevSiblingOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("prev-sibling", "").staticScope(StaticScope.NONE).create();
        break;
      case 80:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_GetPrevSiblingsOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("prev-siblings", "").staticScope(StaticScope.NONE).create();
        break;
      case 81:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_GetReferenceOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").children(new String[]{"linkQualifier"}, new boolean[]{false}).alias("reference", "").staticScope(StaticScope.NONE).create();
        break;
      case 82:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_GetReferencesOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("references", "").staticScope(StaticScope.NONE).create();
        break;
      case 83:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_GetReferentSearchScopeOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").references("referenceLink").children(new String[]{"operationContext"}, new boolean[]{false}).alias("search scope", "obtain referent search scope").staticScope(StaticScope.NONE).create();
        break;
      case 84:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_InsertNewNextSiblingOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").references("concept").alias("new next-sibling", "").staticScope(StaticScope.NONE).create();
        break;
      case 85:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_InsertNewPrevSiblingOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").references("concept").alias("new prev-sibling", "").staticScope(StaticScope.NONE).create();
        break;
      case 86:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_InsertNextSiblingOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").children(new String[]{"insertedNode"}, new boolean[]{false}).alias("add next-sibling", "").staticScope(StaticScope.NONE).create();
        break;
      case 87:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_InsertPrevSiblingOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").children(new String[]{"insertedNode"}, new boolean[]{false}).alias("add prev-sibling", "").staticScope(StaticScope.NONE).create();
        break;
      case 88:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_IsAttributeOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("isAttribute", "").staticScope(StaticScope.NONE).create();
        break;
      case 89:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_IsInstanceOfOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").children(new String[]{"conceptArgument"}, new boolean[]{false}).alias("isInstanceOf", "").staticScope(StaticScope.NONE).create();
        break;
      case 90:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_IsNotNullOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("isNotNull", "").staticScope(StaticScope.NONE).create();
        break;
      case 91:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_IsNullOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("isNull", "").staticScope(StaticScope.NONE).create();
        break;
      case 92:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_IsRoleOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").references("conceptOfParent", "linkInParent").alias("hasRole", "test role of the node").staticScope(StaticScope.NONE).create();
        break;
      case 93:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_ReplaceWithAnotherOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").children(new String[]{"replacementNode"}, new boolean[]{false}).alias("replace with", "").staticScope(StaticScope.NONE).create();
        break;
      case 94:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Node_ReplaceWithNewOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").references("concept").alias("replace with new", "").staticScope(StaticScope.NONE).create();
        break;
      case 95:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.OfConceptOperation").super_("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").parents("jetbrains.mps.baseLanguage.collections.structure.SequenceOperation").children(new String[]{"requestedConcept"}, new boolean[]{false}).alias("ofConcept", "select elements of the specified concept").create();
        break;
      case 96:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.OperationParm_Concept").super_("jetbrains.mps.lang.smodel.structure.AbstractOperationParameter").parents("jetbrains.mps.lang.smodel.structure.AbstractOperationParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"conceptArgument"}, new boolean[]{false}).alias("concept", "").create();
        break;
      case 97:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.OperationParm_ConceptList").super_("jetbrains.mps.lang.smodel.structure.AbstractOperationParameter").parents("jetbrains.mps.lang.smodel.structure.AbstractOperationParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"concept"}, new boolean[]{true}).alias("concept in", "").create();
        break;
      case 98:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.OperationParm_Inclusion").super_("jetbrains.mps.lang.smodel.structure.AbstractOperationParameter").parents("jetbrains.mps.lang.smodel.structure.AbstractOperationParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("+", "inclusion").create();
        break;
      case 99:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.OperationParm_LinkQualifier").super_("jetbrains.mps.lang.smodel.structure.AbstractOperationParameter").parents("jetbrains.mps.lang.smodel.structure.AbstractOperationParameter", "jetbrains.mps.lang.smodel.structure.ILinkAccessQualifierContainer").children(new String[]{"linkQualifier"}, new boolean[]{false}).alias("linkQualifier", "").create();
        break;
      case 100:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.OperationParm_Root").super_("jetbrains.mps.lang.smodel.structure.AbstractOperationParameter").parents("jetbrains.mps.lang.smodel.structure.AbstractOperationParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("root", "").create();
        break;
      case 101:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.OperationParm_SameMetaLevel").super_("jetbrains.mps.lang.smodel.structure.AbstractOperationParameter").parents("jetbrains.mps.lang.smodel.structure.AbstractOperationParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("M", "same metalevel").create();
        break;
      case 102:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.OperationParm_StopConceptList").super_("jetbrains.mps.lang.smodel.structure.AbstractOperationParameter").parents("jetbrains.mps.lang.smodel.structure.AbstractOperationParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"concept"}, new boolean[]{true}).alias("stop concepts are", "").create();
        break;
      case 103:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.PoundExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.smodel.structure.IPropertyAccessQualifier", "jetbrains.mps.lang.smodel.structure.IPropertyQualifier", "jetbrains.mps.lang.smodel.structure.ILinkAccessQualifier", "jetbrains.mps.lang.smodel.structure.ILinkQualifier", "jetbrains.mps.lang.smodel.structure.IRefConceptArg").children(new String[]{"expression"}, new boolean[]{false}).alias("# <expr>", "expression").create();
        break;
      case 104:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.PropertyAttributeQualifier").super_("jetbrains.mps.lang.smodel.structure.AttributeQualifier").parents("jetbrains.mps.lang.smodel.structure.AttributeQualifier").references("attributeConcept").children(new String[]{"propertyQualifier"}, new boolean[]{false}).create();
        break;
      case 105:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.PropertyNameRefExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("conceptDeclaration", "propertyDeclaration").alias("property name/<role>/", "name").staticScope(StaticScope.NONE).create();
        break;
      case 106:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.PropertyQualifier").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.smodel.structure.IPropertyQualifier").references("property").create();
        break;
      case 107:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Property_HasValue_Enum").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").children(new String[]{"value"}, new boolean[]{false}).alias("is", "check value of enum property").staticScope(StaticScope.NONE).create();
        break;
      case 108:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Property_HasValue_Simple").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").children(new String[]{"value"}, new boolean[]{false}).alias("is", "check value of property").staticScope(StaticScope.NONE).create();
        break;
      case 109:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Property_RemoveOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").alias("remove", "").staticScope(StaticScope.NONE).create();
        break;
      case 110:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Property_SetOperation").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").children(new String[]{"value"}, new boolean[]{false}).alias("set", "").staticScope(StaticScope.NONE).create();
        break;
      case 111:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.RefConcept_Reference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.smodel.structure.IRefConceptArg").references("conceptDeclaration").staticScope(StaticScope.NONE).create();
        break;
      case 112:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Reference_GetLinkDeclarationOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.smodel.structure.IReferenceOperation").alias("linkDeclaration", "").staticScope(StaticScope.NONE).create();
        break;
      case 113:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Reference_GetResolveInfo").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.smodel.structure.IReferenceOperation").alias("resolveInfo", "").staticScope(StaticScope.NONE).create();
        break;
      case 114:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Reference_GetRoleOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.smodel.structure.IReferenceOperation").alias("role", "").staticScope(StaticScope.NONE).create();
        break;
      case 115:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.Reference_GetTargetOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.smodel.structure.IReferenceOperation").alias("target", "").staticScope(StaticScope.NONE).create();
        break;
      case 116:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SConceptType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").references("conceptDeclaraton").alias("concept< >", "concept type").staticScope(StaticScope.NONE).create();
        break;
      case 117:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SEnumMemberOperation").interface_().parents("jetbrains.mps.baseLanguage.structure.IOperation").create();
        break;
      case 118:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SEnumMemberType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").references("enum").alias("enummember< >", "enum member type").staticScope(StaticScope.NONE).create();
        break;
      case 119:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SEnumOperation").interface_().create();
        break;
      case 120:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SEnumOperationInvocation").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("enumDeclaration").children(new String[]{"operation"}, new boolean[]{false}).alias("enum/<name>/.operation", "enum operation").staticScope(StaticScope.NONE).create();
        break;
      case 121:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SEnum_MemberForNameOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.smodel.structure.SEnumOperation").children(new String[]{"nameExpression"}, new boolean[]{false}).alias("memberForName()", "parse enum name").create();
        break;
      case 122:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SEnum_MemberForValueOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.smodel.structure.SEnumOperation").children(new String[]{"valueExpression"}, new boolean[]{false}).alias("memberForValue()", "parse enum value").create();
        break;
      case 123:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SEnum_MemberOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.smodel.structure.SEnumOperation").references("member").alias("<{member}>", "enum member access").create();
        break;
      case 124:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SEnum_MembersOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.smodel.structure.SEnumOperation").alias("members", "members list").create();
        break;
      case 125:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SLinkAccess").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation", "jetbrains.mps.lang.smodel.structure.ILinkAccess").references("link").staticScope(StaticScope.NONE).create();
        break;
      case 126:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SLinkImplicitSelect").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").references("link").staticScope(StaticScope.NONE).create();
        break;
      case 127:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SLinkListAccess").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation", "jetbrains.mps.lang.smodel.structure.ILinkAccess").references("link").staticScope(StaticScope.NONE).create();
        break;
      case 128:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SModelType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("model", "model type").staticScope(StaticScope.NONE).create();
        break;
      case 129:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SNodeCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"createdType", "prototypeNode"}, new boolean[]{false, false}).alias("node<>", "create new node").staticScope(StaticScope.NONE).create();
        break;
      case 130:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SNodeListCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"createdType"}, new boolean[]{false}).alias("nlist", "list of (s)nodes").staticScope(StaticScope.NONE).create();
        break;
      case 131:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SNodeListType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IGenericType").references("elementConcept").alias("nlist<>", "list of nodes").staticScope(StaticScope.NONE).create();
        break;
      case 132:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SNodeOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").children(new String[]{"parameter"}, new boolean[]{true}).abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 133:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SNodeType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").references("concept").alias("node<>", "node type").staticScope(StaticScope.NONE).create();
        break;
      case 134:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("asCast").references("concept").children(new String[]{"leftExpression"}, new boolean[]{false}).alias(":", "").staticScope(StaticScope.NONE).create();
        break;
      case 135:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SPropertyAccess").super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").parents("jetbrains.mps.lang.smodel.structure.SNodeOperation").references("property").staticScope(StaticScope.NONE).create();
        break;
      case 136:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SReferenceType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("reference", "reference type").staticScope(StaticScope.NONE).create();
        break;
      case 137:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SearchScopeType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("search scope", "search scope type").staticScope(StaticScope.NONE).create();
        break;
      case 138:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SearchScope_ContainsOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").children(new String[]{"nodeToCheck"}, new boolean[]{false}).alias("contains", "test node visibility in scope").staticScope(StaticScope.NONE).create();
        break;
      case 139:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.smodel.structure.SemanticDowncastExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"leftExpression"}, new boolean[]{false}).alias("/", "downcast to lower semantic level").staticScope(StaticScope.NONE).create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.lang.smodel.structure.AbstractNodeRefExpression", "jetbrains.mps.lang.smodel.structure.AbstractOperationParameter", "jetbrains.mps.lang.smodel.structure.AllAttributeQualifier", "jetbrains.mps.lang.smodel.structure.AsNodeOperation", "jetbrains.mps.lang.smodel.structure.AttributeAccess", "jetbrains.mps.lang.smodel.structure.AttributeQualifier", "jetbrains.mps.lang.smodel.structure.CheckedModuleQualifiedName", "jetbrains.mps.lang.smodel.structure.CheckedModuleReference", "jetbrains.mps.lang.smodel.structure.ChildNodeRefExpression", "jetbrains.mps.lang.smodel.structure.ConceptFqNameRefExpression", "jetbrains.mps.lang.smodel.structure.ConceptRefExpression", "jetbrains.mps.lang.smodel.structure.ConceptReference", "jetbrains.mps.lang.smodel.structure.ConceptSwitchStatement", "jetbrains.mps.lang.smodel.structure.ConceptSwitchStatementCase", "jetbrains.mps.lang.smodel.structure.Concept_GetAllSubConcepts", "jetbrains.mps.lang.smodel.structure.Concept_GetAllSuperConcepts", "jetbrains.mps.lang.smodel.structure.Concept_GetDirectSuperConcepts", "jetbrains.mps.lang.smodel.structure.Concept_GetHierarchy", "jetbrains.mps.lang.smodel.structure.Concept_IsExactlyOperation", "jetbrains.mps.lang.smodel.structure.Concept_IsSubConceptOfOperation", "jetbrains.mps.lang.smodel.structure.Concept_IsSuperConceptOfOperation", "jetbrains.mps.lang.smodel.structure.Concept_NewInstance", "jetbrains.mps.lang.smodel.structure.EnumMemberReference", "jetbrains.mps.lang.smodel.structure.EnumMemberValueRefExpression", "jetbrains.mps.lang.smodel.structure.EnumMember_NameOperation", "jetbrains.mps.lang.smodel.structure.EnumMember_ValueOperation", "jetbrains.mps.lang.smodel.structure.EqualsStructurallyExpression", "jetbrains.mps.lang.smodel.structure.ILinkAccess", "jetbrains.mps.lang.smodel.structure.ILinkAccessQualifier", "jetbrains.mps.lang.smodel.structure.ILinkAccessQualifierContainer", "jetbrains.mps.lang.smodel.structure.ILinkQualifier", "jetbrains.mps.lang.smodel.structure.IPropertyAccessQualifier", "jetbrains.mps.lang.smodel.structure.IPropertyQualifier", "jetbrains.mps.lang.smodel.structure.IRefConceptArg", "jetbrains.mps.lang.smodel.structure.IReferenceOperation", "jetbrains.mps.lang.smodel.structure.IfInstanceOfStatement", "jetbrains.mps.lang.smodel.structure.IfInstanceOfVarReference", "jetbrains.mps.lang.smodel.structure.IfInstanceOfVariable", "jetbrains.mps.lang.smodel.structure.LanguageReferenceExpression", "jetbrains.mps.lang.smodel.structure.LinkAttributeQualifier", "jetbrains.mps.lang.smodel.structure.LinkList_AddNewChildOperation", "jetbrains.mps.lang.smodel.structure.LinkNameRefExpression", "jetbrains.mps.lang.smodel.structure.LinkQualifier", "jetbrains.mps.lang.smodel.structure.LinkRefExpression", "jetbrains.mps.lang.smodel.structure.LinkRefQualifier", "jetbrains.mps.lang.smodel.structure.Link_SetNewChildOperation", "jetbrains.mps.lang.smodel.structure.Link_SetTargetOperation", "jetbrains.mps.lang.smodel.structure.ModelReferenceExpression", "jetbrains.mps.lang.smodel.structure.Model_AddRootOperation", "jetbrains.mps.lang.smodel.structure.Model_CreateNewNodeOperation", "jetbrains.mps.lang.smodel.structure.Model_CreateNewRootNodeOperation", "jetbrains.mps.lang.smodel.structure.Model_GetLongNameOperation", "jetbrains.mps.lang.smodel.structure.Model_GetModule", "jetbrains.mps.lang.smodel.structure.Model_NodesIncludingImportedOperation", "jetbrains.mps.lang.smodel.structure.Model_NodesOperation", "jetbrains.mps.lang.smodel.structure.Model_RootsIncludingImportedOperation", "jetbrains.mps.lang.smodel.structure.Model_RootsOperation", "jetbrains.mps.lang.smodel.structure.ModuleReferenceExpression", "jetbrains.mps.lang.smodel.structure.NodeAttributeQualifier", "jetbrains.mps.lang.smodel.structure.NodePointerExpression", "jetbrains.mps.lang.smodel.structure.NodeRefExpression", "jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall", "jetbrains.mps.lang.smodel.structure.Node_CopyOperation", "jetbrains.mps.lang.smodel.structure.Node_DeleteOperation", "jetbrains.mps.lang.smodel.structure.Node_DetachOperation", "jetbrains.mps.lang.smodel.structure.Node_GetAllSiblingsOperation", "jetbrains.mps.lang.smodel.structure.Node_GetAncestorOperation", "jetbrains.mps.lang.smodel.structure.Node_GetAncestorsOperation", "jetbrains.mps.lang.smodel.structure.Node_GetChildrenOperation", "jetbrains.mps.lang.smodel.structure.Node_GetConceptOperation", "jetbrains.mps.lang.smodel.structure.Node_GetContainingLinkOperation", "jetbrains.mps.lang.smodel.structure.Node_GetContainingRoleOperation", "jetbrains.mps.lang.smodel.structure.Node_GetContainingRootOperation", "jetbrains.mps.lang.smodel.structure.Node_GetDescendantsOperation", "jetbrains.mps.lang.smodel.structure.Node_GetIndexInParentOperation", "jetbrains.mps.lang.smodel.structure.Node_GetModelOperation", "jetbrains.mps.lang.smodel.structure.Node_GetNextSiblingOperation", "jetbrains.mps.lang.smodel.structure.Node_GetNextSiblingsOperation", "jetbrains.mps.lang.smodel.structure.Node_GetParentOperation", "jetbrains.mps.lang.smodel.structure.Node_GetPrevSiblingOperation", "jetbrains.mps.lang.smodel.structure.Node_GetPrevSiblingsOperation", "jetbrains.mps.lang.smodel.structure.Node_GetReferenceOperation", "jetbrains.mps.lang.smodel.structure.Node_GetReferencesOperation", "jetbrains.mps.lang.smodel.structure.Node_GetReferentSearchScopeOperation", "jetbrains.mps.lang.smodel.structure.Node_InsertNewNextSiblingOperation", "jetbrains.mps.lang.smodel.structure.Node_InsertNewPrevSiblingOperation", "jetbrains.mps.lang.smodel.structure.Node_InsertNextSiblingOperation", "jetbrains.mps.lang.smodel.structure.Node_InsertPrevSiblingOperation", "jetbrains.mps.lang.smodel.structure.Node_IsAttributeOperation", "jetbrains.mps.lang.smodel.structure.Node_IsInstanceOfOperation", "jetbrains.mps.lang.smodel.structure.Node_IsNotNullOperation", "jetbrains.mps.lang.smodel.structure.Node_IsNullOperation", "jetbrains.mps.lang.smodel.structure.Node_IsRoleOperation", "jetbrains.mps.lang.smodel.structure.Node_ReplaceWithAnotherOperation", "jetbrains.mps.lang.smodel.structure.Node_ReplaceWithNewOperation", "jetbrains.mps.lang.smodel.structure.OfConceptOperation", "jetbrains.mps.lang.smodel.structure.OperationParm_Concept", "jetbrains.mps.lang.smodel.structure.OperationParm_ConceptList", "jetbrains.mps.lang.smodel.structure.OperationParm_Inclusion", "jetbrains.mps.lang.smodel.structure.OperationParm_LinkQualifier", "jetbrains.mps.lang.smodel.structure.OperationParm_Root", "jetbrains.mps.lang.smodel.structure.OperationParm_SameMetaLevel", "jetbrains.mps.lang.smodel.structure.OperationParm_StopConceptList", "jetbrains.mps.lang.smodel.structure.PoundExpression", "jetbrains.mps.lang.smodel.structure.PropertyAttributeQualifier", "jetbrains.mps.lang.smodel.structure.PropertyNameRefExpression", "jetbrains.mps.lang.smodel.structure.PropertyQualifier", "jetbrains.mps.lang.smodel.structure.Property_HasValue_Enum", "jetbrains.mps.lang.smodel.structure.Property_HasValue_Simple", "jetbrains.mps.lang.smodel.structure.Property_RemoveOperation", "jetbrains.mps.lang.smodel.structure.Property_SetOperation", "jetbrains.mps.lang.smodel.structure.RefConcept_Reference", "jetbrains.mps.lang.smodel.structure.Reference_GetLinkDeclarationOperation", "jetbrains.mps.lang.smodel.structure.Reference_GetResolveInfo", "jetbrains.mps.lang.smodel.structure.Reference_GetRoleOperation", "jetbrains.mps.lang.smodel.structure.Reference_GetTargetOperation", "jetbrains.mps.lang.smodel.structure.SConceptType", "jetbrains.mps.lang.smodel.structure.SEnumMemberOperation", "jetbrains.mps.lang.smodel.structure.SEnumMemberType", "jetbrains.mps.lang.smodel.structure.SEnumOperation", "jetbrains.mps.lang.smodel.structure.SEnumOperationInvocation", "jetbrains.mps.lang.smodel.structure.SEnum_MemberForNameOperation", "jetbrains.mps.lang.smodel.structure.SEnum_MemberForValueOperation", "jetbrains.mps.lang.smodel.structure.SEnum_MemberOperation", "jetbrains.mps.lang.smodel.structure.SEnum_MembersOperation", "jetbrains.mps.lang.smodel.structure.SLinkAccess", "jetbrains.mps.lang.smodel.structure.SLinkImplicitSelect", "jetbrains.mps.lang.smodel.structure.SLinkListAccess", "jetbrains.mps.lang.smodel.structure.SModelType", "jetbrains.mps.lang.smodel.structure.SNodeCreator", "jetbrains.mps.lang.smodel.structure.SNodeListCreator", "jetbrains.mps.lang.smodel.structure.SNodeListType", "jetbrains.mps.lang.smodel.structure.SNodeOperation", "jetbrains.mps.lang.smodel.structure.SNodeType", "jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression", "jetbrains.mps.lang.smodel.structure.SPropertyAccess", "jetbrains.mps.lang.smodel.structure.SReferenceType", "jetbrains.mps.lang.smodel.structure.SearchScopeType", "jetbrains.mps.lang.smodel.structure.SearchScope_ContainsOperation", "jetbrains.mps.lang.smodel.structure.SemanticDowncastExpression"};
}
