package jetbrains.mps.lang.smodel.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.TypeContextManager;
import jetbrains.mps.util.Computable;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.behavior.SNodeOperation_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class MigrateAbstractConceptDeclarationMethodOnConceptVariable_MigrationScript extends BaseMigrationScript {
  public MigrateAbstractConceptDeclarationMethodOnConceptVariable_MigrationScript(IOperationContext operationContext) {
    super("Migration abstract concept declaration methods on concept<>");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Migration abstract concept declaration methods on concept<>";
      }

      public String getAdditionalInfo() {
        return "Migration abstract concept declaration methods on concept<>";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall";
      }

      public boolean isApplicableInstanceNode(final SNode node) {
        if (SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "baseMethodDeclaration", false), "isStatic")) {
          return false;
        }
        SNode type = TypeContextManager.getInstance().runResolveAction(new Computable<SNode>() {
          public SNode compute() {
            return TypeChecker.getInstance().getTypeOf(SNodeOperation_Behavior.call_getLeftExpression_1213877508894(node));
          }
        });
        return SNodeOperations.isInstanceOf(type, "jetbrains.mps.lang.smodel.structure.SConceptType");
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode operand = SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operand", true);
        SNode newOperand = _quotation_createNode_dt2z82_a0b0a0(operand);
        SNodeOperations.replaceWithAnother(SNodeOperations.getParent(node), _quotation_createNode_dt2z82_a0a2a0a(newOperand, SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true)));
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }

  private static SNode _quotation_createNode_dt2z82_a0b0a0(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.AsNodeOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_2.addChild("operation", quotedNode_3);
    quotedNode_4 = (SNode) parameter_1;
    if (quotedNode_4 != null) {
      quotedNode_2.addChild("operand", HUtil.copyIfNecessary(quotedNode_4));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_dt2z82_a0a2a0a(Object parameter_1, Object parameter_2) {
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_4 = (SNode) parameter_1;
    if (quotedNode_4 != null) {
      quotedNode_3.addChild("operand", HUtil.copyIfNecessary(quotedNode_4));
    }
    quotedNode_5 = (SNode) parameter_2;
    if (quotedNode_5 != null) {
      quotedNode_3.addChild("operation", HUtil.copyIfNecessary(quotedNode_5));
    }
    return quotedNode_3;
  }
}
