package jetbrains.mps.lang.smodel.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.TypeContextManager;
import jetbrains.mps.util.Computable;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.behavior.SNodeOperation_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class MigrateAbstractConceptDeclarationMethodOnConceptVariable_MigrationScript extends BaseMigrationScript {
  public MigrateAbstractConceptDeclarationMethodOnConceptVariable_MigrationScript(IOperationContext operationContext) {
    super("Migration abstract concept declaration methods on concept<>");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Migration abstract concept declaration methods on concept<>";
      }

      public String getAdditionalInfo() {
        return "Migration abstract concept declaration methods on concept<>";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall";
      }

      public boolean isApplicableInstanceNode(final SNode node) {
        if (SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "baseMethodDeclaration", false), "isStatic")) {
          return false;
        }
        SNode type = TypeContextManager.getInstance().runResolveAction(new Computable<SNode>() {
          public SNode compute() {
            return TypeChecker.getInstance().getTypeOf(SNodeOperation_Behavior.call_getLeftExpression_1213877508894(node));
          }
        });
        if (!(SNodeOperations.isInstanceOf(type, "jetbrains.mps.lang.smodel.structure.SConceptType"))) {
          return false;
        }

        // <node> 

        // <node> 
        // <node> 
        // <node> 

        // <node> 

        return true;
      }

      public void doUpdateInstanceNode(SNode node) {
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
}
