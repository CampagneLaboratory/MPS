package jetbrains.mps.lang.smodel.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AbstractOperationParameter_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AllAttributeQualifier_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AttributeAccess_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new CheckedModuleReference_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new ChildNodeRefExpression_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new ConceptFqNameRefExpression_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new ConceptPropertyNameRefExpression_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new ConceptProperty_SetOperation_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new ConceptRefExpression_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new ConceptReference_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new ConceptSwitchStatement_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new ConceptSwitchStatementCase_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new Concept_FindInstances_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new Concept_GetAllSubConcepts_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new Concept_GetAllSuperConcepts_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new Concept_GetDirectSuperConcepts_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new Concept_GetHierarchy_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new Concept_IsExactlyOperation_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new Concept_IsSubConceptOfOperation_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new Concept_IsSuperConceptOfOperation_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new Concept_NewInstance_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new EnumMemberReference_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new EnumMemberValueRefExpression_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new EnumMember_NameOperation_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new EnumMember_ValueOperation_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new EqualsStructurallyExpression_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new IfInstanceOfStatement_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new IfInstanceOfVariable_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new LinkAttributeQualifier_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new LinkList_AddAllOperation_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new LinkList_AddChildOperation_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new LinkList_AddNewChildOperation_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new LinkList_InsertChildFirstOperation_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new LinkList_RemoveAllChildrenOperation_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new LinkNameRefExpression_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new LinkQualifier_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new LinkRefExpression_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new LinkRefQualifier_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new Link_DeleteChildOperation_Editor());
      case 39:
        return Collections.<ConceptEditor>singletonList(new Link_SetNewChildOperation_Editor());
      case 40:
        return Collections.<ConceptEditor>singletonList(new Link_SetTargetOperation_Editor());
      case 41:
        return Collections.<ConceptEditor>singletonList(new ModelReferenceExpression_Editor());
      case 42:
        return Collections.<ConceptEditor>singletonList(new Model_AddRootOperation_Editor());
      case 43:
        return Collections.<ConceptEditor>singletonList(new Model_CreateNewNodeOperation_Editor());
      case 44:
        return Collections.<ConceptEditor>singletonList(new Model_CreateNewRootNodeOperation_Editor());
      case 45:
        return Collections.<ConceptEditor>singletonList(new Model_GetModule_Editor());
      case 46:
        return Collections.<ConceptEditor>singletonList(new Model_NodesIncludingImportedOperation_Editor());
      case 47:
        return Collections.<ConceptEditor>singletonList(new Model_NodesOperation_Editor());
      case 48:
        return Collections.<ConceptEditor>singletonList(new Model_RootsIncludingImportedOperation_Editor());
      case 49:
        return Collections.<ConceptEditor>singletonList(new Model_RootsOperation_Editor());
      case 50:
        return Collections.<ConceptEditor>singletonList(new ModuleReferenceExpression_Editor());
      case 51:
        return Collections.<ConceptEditor>singletonList(new NodeAttributeQualifier_Editor());
      case 52:
        return Collections.<ConceptEditor>singletonList(new NodePointerExpression_Editor());
      case 53:
        return Collections.<ConceptEditor>singletonList(new NodeRefExpression_Editor());
      case 54:
        return Collections.<ConceptEditor>singletonList(new Node_ConceptMethodCall_Editor());
      case 55:
        return Collections.<ConceptEditor>singletonList(new Node_CopyOperation_Editor());
      case 56:
        return Collections.<ConceptEditor>singletonList(new Node_DeleteOperation_Editor());
      case 57:
        return Collections.<ConceptEditor>singletonList(new Node_DetachOperation_Editor());
      case 58:
        return Collections.<ConceptEditor>singletonList(new Node_GetAllSiblingsOperation_Editor());
      case 59:
        return Collections.<ConceptEditor>singletonList(new Node_GetAncestorOperation_Editor());
      case 60:
        return Collections.<ConceptEditor>singletonList(new Node_GetAncestorsOperation_Editor());
      case 61:
        return Collections.<ConceptEditor>singletonList(new Node_GetChildrenOperation_Editor());
      case 62:
        return Collections.<ConceptEditor>singletonList(new Node_GetConceptOperation_Editor());
      case 63:
        return Collections.<ConceptEditor>singletonList(new Node_GetContainingLinkOperation_Editor());
      case 64:
        return Collections.<ConceptEditor>singletonList(new Node_GetContainingRoleOperation_Editor());
      case 65:
        return Collections.<ConceptEditor>singletonList(new Node_GetContainingRootOperation_Editor());
      case 66:
        return Collections.<ConceptEditor>singletonList(new Node_GetDescendantsOperation_Editor());
      case 67:
        return Collections.<ConceptEditor>singletonList(new Node_GetIndexInParentOperation_Editor());
      case 68:
        return Collections.<ConceptEditor>singletonList(new Node_GetModelOperation_Editor());
      case 69:
        return Collections.<ConceptEditor>singletonList(new Node_GetNextSiblingOperation_Editor());
      case 70:
        return Collections.<ConceptEditor>singletonList(new Node_GetNextSiblingsOperation_Editor());
      case 71:
        return Collections.<ConceptEditor>singletonList(new Node_GetParentOperation_Editor());
      case 72:
        return Collections.<ConceptEditor>singletonList(new Node_GetPrevSiblingOperation_Editor());
      case 73:
        return Collections.<ConceptEditor>singletonList(new Node_GetPrevSiblingsOperation_Editor());
      case 74:
        return Collections.<ConceptEditor>singletonList(new Node_GetReferenceOperation_Editor());
      case 75:
        return Collections.<ConceptEditor>singletonList(new Node_GetReferencesOperation_Editor());
      case 76:
        return Collections.<ConceptEditor>singletonList(new Node_GetReferentSearchScopeOperation_Editor());
      case 77:
        return Collections.<ConceptEditor>singletonList(new Node_InsertNewNextSiblingOperation_Editor());
      case 78:
        return Collections.<ConceptEditor>singletonList(new Node_InsertNewPrevSiblingOperation_Editor());
      case 79:
        return Collections.<ConceptEditor>singletonList(new Node_InsertNextSiblingOperation_Editor());
      case 80:
        return Collections.<ConceptEditor>singletonList(new Node_InsertPrevSiblingOperation_Editor());
      case 81:
        return Collections.<ConceptEditor>singletonList(new Node_IsAttributeOperation_Editor());
      case 82:
        return Collections.<ConceptEditor>singletonList(new Node_IsInstanceOfOperation_Editor());
      case 83:
        return Collections.<ConceptEditor>singletonList(new Node_IsNotNullOperation_Editor());
      case 84:
        return Collections.<ConceptEditor>singletonList(new Node_IsNullOperation_Editor());
      case 85:
        return Collections.<ConceptEditor>singletonList(new Node_IsRoleOperation_Editor());
      case 86:
        return Collections.<ConceptEditor>singletonList(new Node_ReplaceWithAnotherOperation_Editor());
      case 87:
        return Collections.<ConceptEditor>singletonList(new Node_ReplaceWithNewOperation_Editor());
      case 88:
        return Collections.<ConceptEditor>singletonList(new OperationParm_Concept_Editor());
      case 89:
        return Collections.<ConceptEditor>singletonList(new OperationParm_ConceptList_Editor());
      case 90:
        return Collections.<ConceptEditor>singletonList(new OperationParm_LinkQualifier_Editor());
      case 91:
        return Collections.<ConceptEditor>singletonList(new OperationParm_StopConceptList_Editor());
      case 92:
        return Collections.<ConceptEditor>singletonList(new PoundExpression_Editor());
      case 93:
        return Collections.<ConceptEditor>singletonList(new PropertyAttributeQualifier_Editor());
      case 94:
        return Collections.<ConceptEditor>singletonList(new PropertyNameRefExpression_Editor());
      case 95:
        return Collections.<ConceptEditor>singletonList(new PropertyQualifier_Editor());
      case 96:
        return Collections.<ConceptEditor>singletonList(new Property_HasValue_Enum_Editor());
      case 97:
        return Collections.<ConceptEditor>singletonList(new Property_HasValue_Simple_Editor());
      case 98:
        return Collections.<ConceptEditor>singletonList(new Property_SetOperation_Editor());
      case 99:
        return Collections.<ConceptEditor>singletonList(new ReadConceptReferenceExpression_Editor());
      case 100:
        return Collections.<ConceptEditor>singletonList(new RefConcept_Reference_Editor());
      case 101:
        return Collections.<ConceptEditor>singletonList(new Reference_GetLinkDeclarationOperation_Editor());
      case 102:
        return Collections.<ConceptEditor>singletonList(new Reference_GetResolveInfo_Editor());
      case 103:
        return Collections.<ConceptEditor>singletonList(new Reference_GetRoleOperation_Editor());
      case 104:
        return Collections.<ConceptEditor>singletonList(new Reference_GetTargetOperation_Editor());
      case 105:
        return Collections.<ConceptEditor>singletonList(new SConceptLinkAccess_Editor());
      case 106:
        return Collections.<ConceptEditor>singletonList(new SConceptPropertyAccess_Editor());
      case 107:
        return Collections.<ConceptEditor>singletonList(new SConceptType_Editor());
      case 108:
        return Collections.<ConceptEditor>singletonList(new SEnumMemberType_Editor());
      case 109:
        return Collections.<ConceptEditor>singletonList(new SEnumOperationInvocation_Editor());
      case 110:
        return Collections.<ConceptEditor>singletonList(new SEnum_MemberForNameOperation_Editor());
      case 111:
        return Collections.<ConceptEditor>singletonList(new SEnum_MemberForValueOperation_Editor());
      case 112:
        return Collections.<ConceptEditor>singletonList(new SEnum_MemberOperation_Editor());
      case 113:
        return Collections.<ConceptEditor>singletonList(new SEnum_MembersOperation_Editor());
      case 114:
        return Collections.<ConceptEditor>singletonList(new SLinkAccess_Editor());
      case 115:
        return Collections.<ConceptEditor>singletonList(new SLinkImplicitSelect_Editor());
      case 116:
        return Collections.<ConceptEditor>singletonList(new SLinkListAccess_Editor());
      case 117:
        return Collections.<ConceptEditor>singletonList(new SModelType_Editor());
      case 118:
        return Collections.<ConceptEditor>singletonList(new SNodeCreator_Editor());
      case 119:
        return Collections.<ConceptEditor>singletonList(new SNodeListCreator_Editor());
      case 120:
        return Collections.<ConceptEditor>singletonList(new SNodeListType_Editor());
      case 121:
        return Collections.<ConceptEditor>singletonList(new SNodeOperation_Editor());
      case 122:
        return Collections.<ConceptEditor>singletonList(new SNodeType_Editor());
      case 123:
        return Collections.<ConceptEditor>singletonList(new SNodeTypeCastExpression_Editor());
      case 124:
        return Collections.<ConceptEditor>singletonList(new SPropertyAccess_Editor());
      case 125:
        return Collections.<ConceptEditor>singletonList(new SReferenceType_Editor());
      case 126:
        return Collections.<ConceptEditor>singletonList(new SearchScopeType_Editor());
      case 127:
        return Collections.<ConceptEditor>singletonList(new SearchScope_ContainsOperation_Editor());
      case 128:
        return Collections.<ConceptEditor>singletonList(new SemanticDowncastExpression_Editor());
      case 129:
        return Collections.<ConceptEditor>singletonList(new StaticConceptMethodCall_Editor());
      case 130:
        return Collections.<ConceptEditor>singletonList(new _LinkAccessT_Editor());
      default:
    }
    return Collections.emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0b, descriptor.getConceptFqName())) {
      case 0:
        if ("jetbrains.mps.lang.smodel.editor.AliasComponent".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new AliasComponent(null));
        }
        break;
      case 1:
        switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0b0a1, editorComponentId)) {
          case 0:
            return Collections.<ConceptEditorComponent>singletonList(new ReplaceableAliasAndParms_Comp(null));
          case 1:
            return Collections.<ConceptEditorComponent>singletonList(new ReplaceableAlias_Comp(null));
          default:
        }
        break;
      default:
    }
    return Collections.emptyList();
  }

  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.lang.smodel.structure.AbstractOperationParameter", "jetbrains.mps.lang.smodel.structure.AllAttributeQualifier", "jetbrains.mps.lang.smodel.structure.AttributeAccess", "jetbrains.mps.lang.smodel.structure.CheckedModuleReference", "jetbrains.mps.lang.smodel.structure.ChildNodeRefExpression", "jetbrains.mps.lang.smodel.structure.ConceptFqNameRefExpression", "jetbrains.mps.lang.smodel.structure.ConceptPropertyNameRefExpression", "jetbrains.mps.lang.smodel.structure.ConceptProperty_SetOperation", "jetbrains.mps.lang.smodel.structure.ConceptRefExpression", "jetbrains.mps.lang.smodel.structure.ConceptReference", "jetbrains.mps.lang.smodel.structure.ConceptSwitchStatement", "jetbrains.mps.lang.smodel.structure.ConceptSwitchStatementCase", "jetbrains.mps.lang.smodel.structure.Concept_FindInstances", "jetbrains.mps.lang.smodel.structure.Concept_GetAllSubConcepts", "jetbrains.mps.lang.smodel.structure.Concept_GetAllSuperConcepts", "jetbrains.mps.lang.smodel.structure.Concept_GetDirectSuperConcepts", "jetbrains.mps.lang.smodel.structure.Concept_GetHierarchy", "jetbrains.mps.lang.smodel.structure.Concept_IsExactlyOperation", "jetbrains.mps.lang.smodel.structure.Concept_IsSubConceptOfOperation", "jetbrains.mps.lang.smodel.structure.Concept_IsSuperConceptOfOperation", "jetbrains.mps.lang.smodel.structure.Concept_NewInstance", "jetbrains.mps.lang.smodel.structure.EnumMemberReference", "jetbrains.mps.lang.smodel.structure.EnumMemberValueRefExpression", "jetbrains.mps.lang.smodel.structure.EnumMember_NameOperation", "jetbrains.mps.lang.smodel.structure.EnumMember_ValueOperation", "jetbrains.mps.lang.smodel.structure.EqualsStructurallyExpression", "jetbrains.mps.lang.smodel.structure.IfInstanceOfStatement", "jetbrains.mps.lang.smodel.structure.IfInstanceOfVariable", "jetbrains.mps.lang.smodel.structure.LinkAttributeQualifier", "jetbrains.mps.lang.smodel.structure.LinkList_AddAllOperation", "jetbrains.mps.lang.smodel.structure.LinkList_AddChildOperation", "jetbrains.mps.lang.smodel.structure.LinkList_AddNewChildOperation", "jetbrains.mps.lang.smodel.structure.LinkList_InsertChildFirstOperation", "jetbrains.mps.lang.smodel.structure.LinkList_RemoveAllChildrenOperation", "jetbrains.mps.lang.smodel.structure.LinkNameRefExpression", "jetbrains.mps.lang.smodel.structure.LinkQualifier", "jetbrains.mps.lang.smodel.structure.LinkRefExpression", "jetbrains.mps.lang.smodel.structure.LinkRefQualifier", "jetbrains.mps.lang.smodel.structure.Link_DeleteChildOperation", "jetbrains.mps.lang.smodel.structure.Link_SetNewChildOperation", "jetbrains.mps.lang.smodel.structure.Link_SetTargetOperation", "jetbrains.mps.lang.smodel.structure.ModelReferenceExpression", "jetbrains.mps.lang.smodel.structure.Model_AddRootOperation", "jetbrains.mps.lang.smodel.structure.Model_CreateNewNodeOperation", "jetbrains.mps.lang.smodel.structure.Model_CreateNewRootNodeOperation", "jetbrains.mps.lang.smodel.structure.Model_GetModule", "jetbrains.mps.lang.smodel.structure.Model_NodesIncludingImportedOperation", "jetbrains.mps.lang.smodel.structure.Model_NodesOperation", "jetbrains.mps.lang.smodel.structure.Model_RootsIncludingImportedOperation", "jetbrains.mps.lang.smodel.structure.Model_RootsOperation", "jetbrains.mps.lang.smodel.structure.ModuleReferenceExpression", "jetbrains.mps.lang.smodel.structure.NodeAttributeQualifier", "jetbrains.mps.lang.smodel.structure.NodePointerExpression", "jetbrains.mps.lang.smodel.structure.NodeRefExpression", "jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall", "jetbrains.mps.lang.smodel.structure.Node_CopyOperation", "jetbrains.mps.lang.smodel.structure.Node_DeleteOperation", "jetbrains.mps.lang.smodel.structure.Node_DetachOperation", "jetbrains.mps.lang.smodel.structure.Node_GetAllSiblingsOperation", "jetbrains.mps.lang.smodel.structure.Node_GetAncestorOperation", "jetbrains.mps.lang.smodel.structure.Node_GetAncestorsOperation", "jetbrains.mps.lang.smodel.structure.Node_GetChildrenOperation", "jetbrains.mps.lang.smodel.structure.Node_GetConceptOperation", "jetbrains.mps.lang.smodel.structure.Node_GetContainingLinkOperation", "jetbrains.mps.lang.smodel.structure.Node_GetContainingRoleOperation", "jetbrains.mps.lang.smodel.structure.Node_GetContainingRootOperation", "jetbrains.mps.lang.smodel.structure.Node_GetDescendantsOperation", "jetbrains.mps.lang.smodel.structure.Node_GetIndexInParentOperation", "jetbrains.mps.lang.smodel.structure.Node_GetModelOperation", "jetbrains.mps.lang.smodel.structure.Node_GetNextSiblingOperation", "jetbrains.mps.lang.smodel.structure.Node_GetNextSiblingsOperation", "jetbrains.mps.lang.smodel.structure.Node_GetParentOperation", "jetbrains.mps.lang.smodel.structure.Node_GetPrevSiblingOperation", "jetbrains.mps.lang.smodel.structure.Node_GetPrevSiblingsOperation", "jetbrains.mps.lang.smodel.structure.Node_GetReferenceOperation", "jetbrains.mps.lang.smodel.structure.Node_GetReferencesOperation", "jetbrains.mps.lang.smodel.structure.Node_GetReferentSearchScopeOperation", "jetbrains.mps.lang.smodel.structure.Node_InsertNewNextSiblingOperation", "jetbrains.mps.lang.smodel.structure.Node_InsertNewPrevSiblingOperation", "jetbrains.mps.lang.smodel.structure.Node_InsertNextSiblingOperation", "jetbrains.mps.lang.smodel.structure.Node_InsertPrevSiblingOperation", "jetbrains.mps.lang.smodel.structure.Node_IsAttributeOperation", "jetbrains.mps.lang.smodel.structure.Node_IsInstanceOfOperation", "jetbrains.mps.lang.smodel.structure.Node_IsNotNullOperation", "jetbrains.mps.lang.smodel.structure.Node_IsNullOperation", "jetbrains.mps.lang.smodel.structure.Node_IsRoleOperation", "jetbrains.mps.lang.smodel.structure.Node_ReplaceWithAnotherOperation", "jetbrains.mps.lang.smodel.structure.Node_ReplaceWithNewOperation", "jetbrains.mps.lang.smodel.structure.OperationParm_Concept", "jetbrains.mps.lang.smodel.structure.OperationParm_ConceptList", "jetbrains.mps.lang.smodel.structure.OperationParm_LinkQualifier", "jetbrains.mps.lang.smodel.structure.OperationParm_StopConceptList", "jetbrains.mps.lang.smodel.structure.PoundExpression", "jetbrains.mps.lang.smodel.structure.PropertyAttributeQualifier", "jetbrains.mps.lang.smodel.structure.PropertyNameRefExpression", "jetbrains.mps.lang.smodel.structure.PropertyQualifier", "jetbrains.mps.lang.smodel.structure.Property_HasValue_Enum", "jetbrains.mps.lang.smodel.structure.Property_HasValue_Simple", "jetbrains.mps.lang.smodel.structure.Property_SetOperation", "jetbrains.mps.lang.smodel.structure.ReadConceptReferenceExpression", "jetbrains.mps.lang.smodel.structure.RefConcept_Reference", "jetbrains.mps.lang.smodel.structure.Reference_GetLinkDeclarationOperation", "jetbrains.mps.lang.smodel.structure.Reference_GetResolveInfo", "jetbrains.mps.lang.smodel.structure.Reference_GetRoleOperation", "jetbrains.mps.lang.smodel.structure.Reference_GetTargetOperation", "jetbrains.mps.lang.smodel.structure.SConceptLinkAccess", "jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess", "jetbrains.mps.lang.smodel.structure.SConceptType", "jetbrains.mps.lang.smodel.structure.SEnumMemberType", "jetbrains.mps.lang.smodel.structure.SEnumOperationInvocation", "jetbrains.mps.lang.smodel.structure.SEnum_MemberForNameOperation", "jetbrains.mps.lang.smodel.structure.SEnum_MemberForValueOperation", "jetbrains.mps.lang.smodel.structure.SEnum_MemberOperation", "jetbrains.mps.lang.smodel.structure.SEnum_MembersOperation", "jetbrains.mps.lang.smodel.structure.SLinkAccess", "jetbrains.mps.lang.smodel.structure.SLinkImplicitSelect", "jetbrains.mps.lang.smodel.structure.SLinkListAccess", "jetbrains.mps.lang.smodel.structure.SModelType", "jetbrains.mps.lang.smodel.structure.SNodeCreator", "jetbrains.mps.lang.smodel.structure.SNodeListCreator", "jetbrains.mps.lang.smodel.structure.SNodeListType", "jetbrains.mps.lang.smodel.structure.SNodeOperation", "jetbrains.mps.lang.smodel.structure.SNodeType", "jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression", "jetbrains.mps.lang.smodel.structure.SPropertyAccess", "jetbrains.mps.lang.smodel.structure.SReferenceType", "jetbrains.mps.lang.smodel.structure.SearchScopeType", "jetbrains.mps.lang.smodel.structure.SearchScope_ContainsOperation", "jetbrains.mps.lang.smodel.structure.SemanticDowncastExpression", "jetbrains.mps.lang.smodel.structure.StaticConceptMethodCall", "jetbrains.mps.lang.smodel.structure._LinkAccessT"};
  private static String[] stringSwitchCases_xbvbvu_a0a0b0a1 = new String[]{"jetbrains.mps.lang.smodel.editor.ReplaceableAliasAndParms_Comp", "jetbrains.mps.lang.smodel.editor.ReplaceableAlias_Comp"};
  private static String[] stringSwitchCases_xbvbvu_a0a0b = new String[]{"jetbrains.mps.lang.smodel.structure.IReferenceOperation", "jetbrains.mps.lang.smodel.structure.SNodeOperation"};
}
