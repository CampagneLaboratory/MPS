package jetbrains.mps.lang.smodel.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import java.util.List;

public class MigrateStaticConceptMethods_MigrationScript extends BaseMigrationScript {
  public MigrateStaticConceptMethods_MigrationScript(IOperationContext operationContext) {
    super("Migrate Static ConceptMethods");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "migrate static concept methods";
      }

      public String getAdditionalInfo() {
        return "migrate static concept methods";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.behavior.structure.StaticConceptMethodDeclaration";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return true;
      }

      public void doUpdateInstanceNode(SNode node) {
        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.lang.behavior.structure.ConceptBehavior"), "method", true)).addElement(_quotation_createNode_df5nox_a0a0a0a(SLinkOperations.getTarget(node, "returnType", true), SLinkOperations.getTargets(SLinkOperations.getTarget(node, "body", true), "statement", true), SLinkOperations.getTarget(node, "visibility", true), SLinkOperations.getTargets(node, "parameter", true), SPropertyOperations.getString(node, "name")));
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "migrate static concept methods calls";
      }

      public String getAdditionalInfo() {
        return "migrate static concept methods calls";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.smodel.structure.StaticConceptMethodCall";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return true;
      }

      public void doUpdateInstanceNode(final SNode node) {
        SNodeOperations.replaceWithAnother(node, _quotation_createNode_df5nox_a0a0a0b(SLinkOperations.getTarget(node, "concept", false), SLinkOperations.getTargets(node, "actualArgument", true), Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(node, "baseMethodDeclaration", false)), "jetbrains.mps.lang.behavior.structure.ConceptBehavior"), "method", true), "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration")).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SPropertyOperations.getString(it, "name").equals(SPropertyOperations.getString(SLinkOperations.getTarget(node, "baseMethodDeclaration", false), "name"));
          }
        })));
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "remove old static concept methods";
      }

      public String getAdditionalInfo() {
        return "remove old static concept methods";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.behavior.structure.StaticConceptMethodDeclaration";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return true;
      }

      public void doUpdateInstanceNode(SNode node) {
        SNodeOperations.deleteNode(node);
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }

  private static SNode _quotation_createNode_df5nox_a0a0a0a(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4, Object parameter_5) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration", null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_6, "name", (String) parameter_5);
    quotedNode_7 = (SNode) parameter_1;
    if (quotedNode_7 != null) {
      quotedNode_6.addChild("returnType", HUtil.copyIfNecessary(quotedNode_7));
    }
    {
      List<SNode> nodes = (List<SNode>) parameter_2;
      for (SNode child : nodes) {
        quotedNode_6.addChild("body", HUtil.copyIfNecessary(child));
      }
    }
    quotedNode_9 = (SNode) parameter_3;
    if (quotedNode_9 != null) {
      quotedNode_6.addChild("visibility", HUtil.copyIfNecessary(quotedNode_9));
    }
    {
      List<SNode> nodes = (List<SNode>) parameter_4;
      for (SNode child : nodes) {
        quotedNode_6.addChild("parameter", HUtil.copyIfNecessary(child));
      }
    }
    return quotedNode_6;
  }

  private static SNode _quotation_createNode_df5nox_a0a0a0b(Object parameter_1, Object parameter_2, Object parameter_3) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.ConceptRefExpression", null, null, false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_5, "conceptDeclaration", (SNode) parameter_1);
    quotedNode_4.addChild("operand", quotedNode_5);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall", null, null, false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_6, "baseMethodDeclaration", (SNode) parameter_3);
    {
      List<SNode> nodes = (List<SNode>) parameter_2;
      for (SNode child : nodes) {
        quotedNode_6.addChild("actualArgument", HUtil.copyIfNecessary(child));
      }
    }
    quotedNode_4.addChild("operation", quotedNode_6);
    return quotedNode_4;
  }
}
