package jetbrains.mps.lang.smodel.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.UUID;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SPropertyId;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.smodel.MPSModuleRepository;

public class CheckedModuleReference_Constraints extends BaseConstraintsDescriptor {
  public CheckedModuleReference_Constraints() {
    super(MetaIdFactory.conceptId(new UUID(8675788371017092295l, -9098312342032910879l), 4357968816427488499l));
  }
  @Override
  protected Map<SPropertyId, PropertyConstraintsDescriptor> getNotDefaultSProperties() {
    Map<SPropertyId, PropertyConstraintsDescriptor> properties = new HashMap<SPropertyId, PropertyConstraintsDescriptor>();
    properties.put(MetaIdFactory.propId(new UUID(8675788371017092295l, -9098312342032910879l), 4357968816427488499l, 4357968816427488500l), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(new UUID(8675788371017092295l, -9098312342032910879l), 4357968816427488499l, 4357968816427488500l), this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }
      @Override
      public Object getValue(SNode node) {
        String propertyName = "moduleId";
        {
          String original = SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(new UUID(8675788371017092295l, -9098312342032910879l), 4357968816427488499l, 4357968816427488500l, "moduleId"));
          if ((original == null || original.length() == 0)) {
            return original;
          }
          SModuleReference moduleReference = PersistenceFacade.getInstance().createModuleReference(original);
          SModule module = ModuleRepositoryFacade.getInstance().getModule(moduleReference);
          return (module != null ? module.getModuleName() : moduleReference.getModuleName());
        }
      }
      @Override
      public boolean hasOwnSetter() {
        return true;
      }
      @Override
      public void setValue(SNode node, String propertyValue) {
        String propertyName = "moduleId";
        {
          SModule module = MPSModuleRepository.getInstance().getModuleByFqName((SPropertyOperations.getString(propertyValue)));
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(new UUID(8675788371017092295l, -9098312342032910879l), 4357968816427488499l, 4357968816427488500l, "moduleId"), module.getModuleReference().toString());
        }
      }
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "moduleId";
        {
          SModule module = MPSModuleRepository.getInstance().getModuleByFqName((SPropertyOperations.getString(propertyValue)));
          return module != null;
        }
      }
    });
    return properties;
  }
}
