package jetbrains.mps.lang.smodel.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleId;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.smodel.IScope;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class ModuleReferenceExpression_Behavior {
  public static void init(SNode thisNode) {
  }

  @Nullable
  public static SModule call_getModule_4040588429969043137(SNode thisNode) {
    if (SPropertyOperations.getString(thisNode, "moduleId") == null) {
      return null;
    }
    return MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString(SPropertyOperations.getString(thisNode, "moduleId")));
  }

  @NotNull
  public static List<SModule> virtual_getVisibleModules_4040588429969394404(SNode thisNode, IScope scope) {
    return ModuleReferenceExpression_Behavior.call_getVisibleModules_4040588429969394431(SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.smodel.structure.ModuleReferenceExpression"))), scope);
  }

  @NotNull
  public static List<SModule> call_getVisibleModules_4040588429969394431(SAbstractConcept thisConcept, IScope scope) {
    List<SModule> result = ListSequence.fromList(new ArrayList<SModule>());
    ListSequence.fromList(result).addSequence(SetSequence.fromSet(MPSModuleRepository.getInstance().getAllModules()));
    return result;
  }

  @Deprecated
  public static List<SModule> call_getVisibleModules_4040588429969394404(SNode thisNode, IScope scope) {
    return BehaviorReflection.invokeVirtual((Class<List<SModule>>) ((Class) (Object.class)), thisNode, "virtual_getVisibleModules_4040588429969394404", new Object[]{scope});
  }

  @Deprecated
  public static List<SModule> callSuper_getVisibleModules_4040588429969394404(SNode thisNode, String callerConceptFqName, IScope scope) {
    return BehaviorManager.getInstance().invokeSuper((Class<List<SModule>>) ((Class) (Object.class)), SNodeOperations.cast(thisNode, "jetbrains.mps.lang.smodel.structure.ModuleReferenceExpression"), callerConceptFqName, "virtual_getVisibleModules_4040588429969394404", new Class[]{SNode.class, IScope.class}, new Object[]{scope});
  }
}
