package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.Project;
import jetbrains.mps.kernel.model.TemporaryModelOwner;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.idea.LoggerFactory;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.smodel.ProjectModels;
import jetbrains.mps.generator.impl.CloneUtil;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.smodel.SModelRepository;
import java.lang.reflect.InvocationTargetException;

public abstract class BaseTransformationTest extends TestCase {
  public static final String PATH_MACRO_PREFIX = "path.macro.";

  private TransformationTestRunner myRunner;
  private SModelDescriptor myMyModel;
  private SModelDescriptor myMyTransidentModel;
  private Project myMyProject;
  private TemporaryModelOwner myMyModelOwner;

  public BaseTransformationTest() {
    Logger.setFactory(LoggerFactory.getInstance());
  }

  public BaseTransformationTest(com.intellij.openapi.project.Project project, SModelDescriptor modelDescriptor) {
    this();
    setProject(project);
    setModelDescriptor(modelDescriptor);
  }

  public void setTestRunner(TransformationTestRunner ttr) {
    this.myRunner = ttr;
  }

  public TransformationTestRunner getTestRunner() {
    return myRunner;
  }

  public void initTest(@NotNull String projectName, final String model) throws Exception {
    myRunner.initTest(this, projectName, model);
  }

  private final void setProject(com.intellij.openapi.project.Project project) {
    this.setMyProject(project.getComponent(MPSProject.class));
  }

  /*package*/ final void setModelDescriptor(SModelDescriptor modelDescriptor) {
    this.setMyModel(modelDescriptor);
    this.setMyModelOwner(new TemporaryModelOwner());
    this.setMyTransidentModel(ProjectModels.createDescriptorFor(true));
    CloneUtil.cloneModel(this.getMyModel().getSModel(), this.getMyTransidentModel().getSModel(), false);
    SModelOperations.validateLanguagesAndImports(this.getMyTransidentModel().getSModel(), false, false);
    SModelRepository.getInstance().registerModelDescriptor(this.getMyTransidentModel(), this.getMyModelOwner());
  }

  public void runTest(String className, final String methodName, final boolean runInCommand) throws Throwable {
    myRunner.runTest(this, className, methodName, runInCommand);
  }

  private Throwable tryToRunTest(Class clazz, String methodName, Object obj) {
    Throwable exception = null;
    try {
      clazz.getMethod(methodName).invoke(obj);
    } catch (NoSuchMethodException e) {
      e.printStackTrace();
    } catch (IllegalAccessException e) {
      e.printStackTrace();
    } catch (InvocationTargetException e) {
      exception = e.getTargetException();
    }
    return exception;
  }

  public SModelDescriptor getMyModel() {
    return this.myMyModel;
  }

  public void setMyModel(SModelDescriptor value) {
    this.myMyModel = value;
  }

  public SModelDescriptor getMyTransidentModel() {
    return this.myMyTransidentModel;
  }

  public void setMyTransidentModel(SModelDescriptor value) {
    this.myMyTransidentModel = value;
  }

  public Project getMyProject() {
    return this.myMyProject;
  }

  public void setMyProject(Project value) {
    this.myMyProject = value;
  }

  public TemporaryModelOwner getMyModelOwner() {
    return this.myMyModelOwner;
  }

  public void setMyModelOwner(TemporaryModelOwner value) {
    this.myMyModelOwner = value;
  }
}
