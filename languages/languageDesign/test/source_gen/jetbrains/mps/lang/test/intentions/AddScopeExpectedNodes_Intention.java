package jetbrains.mps.lang.test.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.constraints.ModelConstraints;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class AddScopeExpectedNodes_Intention extends BaseIntention implements Intention {
  public AddScopeExpectedNodes_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.test.structure.ScopesTest";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Add Scope Expected Nodes";
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    Scope scope = ModelConstraints.getScope(((SNode) SNodeOperations.getParent(node)).getReferences().get(0));
    for (SNode avaliable : scope.getAvailableElements(null)) {
      SNode expectedNode = SConceptOperations.createNewNode("jetbrains.mps.lang.test.structure.ScopesExpectedNode", null);
      SLinkOperations.setTarget(expectedNode, "ref", avaliable, false);
      ListSequence.fromList(SLinkOperations.getTargets(node, "nodes", true)).addElement(expectedNode);
    }
  }

  public String getLocationString() {
    return "jetbrains.mps.lang.test.intentions";
  }
}
