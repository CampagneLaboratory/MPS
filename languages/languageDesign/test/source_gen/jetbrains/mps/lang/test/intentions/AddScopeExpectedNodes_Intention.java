package jetbrains.mps.lang.test.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.constraints.ModelConstraints;
import jetbrains.mps.lang.test.behavior.ScopesTest_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class AddScopeExpectedNodes_Intention extends BaseIntention {
  public AddScopeExpectedNodes_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.test.structure.ScopesTest";
  }

  public String getPresentation() {
    return "AddScopeExpectedNodes";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.test.intentions.AddScopeExpectedNodes_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:34d3c480-4ffc-4871-8831-0e9894b87500(jetbrains.mps.lang.test.intentions@1_0)", "3100207102209325314");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Add Scope Expected Nodes";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SLinkOperations.getTarget(node, "checkingReference", false) != null;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    Scope scope = ModelConstraints.getScope(ScopesTest_Behavior.call_getCheckingReference_5449224527592367549(node));
    for (SNode avaliable : scope.getAvailableElements(null)) {
      SNode expectedNode = SConceptOperations.createNewNode("jetbrains.mps.lang.test.structure.ScopesExpectedNode", null);
      SLinkOperations.setTarget(expectedNode, "ref", avaliable, false);
      ListSequence.fromList(SLinkOperations.getTargets(node, "nodes", true)).addElement(expectedNode);
    }
  }
}
