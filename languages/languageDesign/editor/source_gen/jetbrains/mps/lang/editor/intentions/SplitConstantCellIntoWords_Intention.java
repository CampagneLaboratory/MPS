package jetbrains.mps.lang.editor.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.intentions.IntentionDescriptor;

public class SplitConstantCellIntoWords_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public SplitConstantCellIntoWords_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.editor.structure.CellModel_Constant";
  }

  public String getPresentation() {
    return "SplitConstantCellIntoWords";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.editor.intentions.SplitConstantCellIntoWords_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    if ((SNodeOperations.getParent(node) == null)) {
      return false;
    }
    String text = SPropertyOperations.getString(node, "text");
    if (text == null || text.length() == 0) {
      return false;
    }
    if (text.trim().contains(" ")) {
      return true;
    }
    return false;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c8959029b(jetbrains.mps.lang.editor.intentions)", "1224529494087");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new SplitConstantCellIntoWords_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Split Constant Cell into Words";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      String text = SPropertyOperations.getString(node, "text").trim();
      SNode collection = SNodeFactoryOperations.createNewNode(SNodeOperations.getModel(node), "jetbrains.mps.lang.editor.structure.CellModel_Collection", null);
      SNodeFactoryOperations.setNewChild(collection, "cellLayout", "jetbrains.mps.lang.editor.structure.CellLayout_Flow");
      SNodeOperations.replaceWithAnother(node, collection);
      String[] strings = text.split(" ");
      int i = 0;
      for (String word : strings) {
        SNode constantCell = SNodeOperations.copyNode(node);
        SPropertyOperations.set(constantCell, "text", word);
        boolean leftPaddingSet = false;
        boolean rightPaddingSet = false;
        for (SNode styleClassItem : SLinkOperations.getTargets(constantCell, "styleItem", true)) {
          if (SNodeOperations.isInstanceOf(styleClassItem, "jetbrains.mps.lang.editor.structure.PaddingLeftStyleClassItem")) {
            leftPaddingSet = true;
            if (i != 0) {
              SPropertyOperations.set(SNodeOperations.cast(styleClassItem, "jetbrains.mps.lang.editor.structure.PaddingLeftStyleClassItem"), "value", "0.5");
            }
          }
          if (SNodeOperations.isInstanceOf(styleClassItem, "jetbrains.mps.lang.editor.structure.PaddingRightStyleClassItem")) {
            rightPaddingSet = true;
            if (i != strings.length - 1) {
              SPropertyOperations.set(SNodeOperations.cast(styleClassItem, "jetbrains.mps.lang.editor.structure.PaddingRightStyleClassItem"), "value", "0.5");
            }
          }
        }
        if (!(leftPaddingSet)) {
          SNode paddingLeftStyleClassItem = SNodeFactoryOperations.addNewChild(constantCell, "styleItem", "jetbrains.mps.lang.editor.structure.PaddingLeftStyleClassItem");
          SPropertyOperations.set(paddingLeftStyleClassItem, "value", "0.5");
        }
        if (!(rightPaddingSet)) {
          SNode paddingRightStyleClassItem = SNodeFactoryOperations.addNewChild(constantCell, "styleItem", "jetbrains.mps.lang.editor.structure.PaddingRightStyleClassItem");
          SPropertyOperations.set(paddingRightStyleClassItem, "value", "0.5");
        }
        ListSequence.fromList(SLinkOperations.getTargets(collection, "childCellModel", true)).addElement(constantCell);
        i++;
      }
    }

    public IntentionDescriptor getDescriptor() {
      return SplitConstantCellIntoWords_Intention.this;
    }
  }
}
