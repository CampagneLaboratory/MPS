package jetbrains.mps.lang.editor.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.project.AbstractModule;
import java.util.Set;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.project.dependency.GlobalModuleDependenciesManager;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;

public class IStyleSheetMember_Constraints extends BaseConstraintsDescriptor {
  public IStyleSheetMember_Constraints() {
    super("jetbrains.mps.lang.editor.structure.IStyleSheetMember");
  }

  @Override
  public boolean hasOwnDefaultScopeProvider() {
    return true;
  }

  @Override
  public ReferenceScopeProvider getDefaultScopeProvider() {
    return new BaseReferenceScopeProvider() {
      @Override
      public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
        AbstractModule contextModule = (AbstractModule) _context.getModel().getModule();

        Set<Language> contextLanguages = SetSequence.fromSet(new HashSet<Language>());
        for (SModule module : CollectionSequence.fromCollection(new GlobalModuleDependenciesManager(contextModule).getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE))) {
          if (module instanceof Language) {
            SetSequence.fromSet(contextLanguages).addElement((Language) module);
          }
        }

        Iterable<SNode> styleSheets = SetSequence.fromSet(contextLanguages).select(new ISelector<Language, EditableSModelDescriptor>() {
          public EditableSModelDescriptor select(Language it) {
            return LanguageAspect.EDITOR.get(it);
          }
        }).where(new IWhereFilter<EditableSModelDescriptor>() {
          public boolean accept(EditableSModelDescriptor it) {
            return it != null;
          }
        }).translate(new ITranslator2<EditableSModelDescriptor, SNode>() {
          public Iterable<SNode> translate(EditableSModelDescriptor it) {
            return SModelOperations.getNodes(((SModel) it), "jetbrains.mps.lang.editor.structure.IStyleSheetMember");
          }
        });

        return Sequence.fromIterable(styleSheets).toListSequence();
      }

      @Override
      public SNodeReference getSearchScopeValidatorNode() {
        return breakingNode_pz2bx0_a0a1a0a0a2;
      }
    };
  }

  private static SNodePointer breakingNode_pz2bx0_a0a1a0a0a2 = new SNodePointer("r:00000000-0000-4000-0000-011c89590298(jetbrains.mps.lang.editor.constraints)", "1873972548978322667");
}
