package jetbrains.mps.lang.editor.behavior;

/*Generated by MPS */

import jetbrains.mps.scope.FilteringScope;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.scope.ModelPlusImportedScope;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class EditorCellIdScope extends FilteringScope {
  private SNode myConceptDeclaration;

  public EditorCellIdScope(SModel model, SNode conceptDeclaration) {
    super(new ModelPlusImportedScope(model, false, ((AbstractModule) model.getModule()).getScope(), "jetbrains.mps.lang.editor.structure.EditorCellId"));
    myConceptDeclaration = conceptDeclaration;
  }

  @Override
  public String getReferenceText(SNode contextNode, SNode node) {
    if (isExcluded(node)) {
      return null;
    }
    return SPropertyOperations.getString(SNodeOperations.as(node, "jetbrains.mps.lang.editor.structure.EditorCellId"), "name");
  }

  @Override
  public boolean isExcluded(SNode node) {
    SNode editorCellId = SNodeOperations.as(node, "jetbrains.mps.lang.editor.structure.EditorCellId");
    if (editorCellId == null) {
      return true;
    }
    SNode conceptAspect = SNodeOperations.getAncestor(editorCellId, "jetbrains.mps.lang.structure.structure.IConceptAspect", false, false);
    return conceptAspect == null || !(SConceptOperations.isSubConceptOf(myConceptDeclaration, NameUtil.nodeFQName(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), conceptAspect, "virtual_getBaseConcept_2621449412040133768", new Object[]{}))));
  }
}
