package jetbrains.mps.lang.editor.behavior;

/*Generated by MPS */

import jetbrains.mps.scope.FilteringScope;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.scope.ModelsScope;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.dependency.GlobalModuleDependenciesManager;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.module.SRepository;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class EditorCellIdScope extends FilteringScope {
  private SNode myConceptDeclaration;
  public EditorCellIdScope(SModel model, SNode conceptDeclaration) {
    super(new ModelsScope(getModels(model), false, "jetbrains.mps.lang.editor.structure.EditorCellId"));
    myConceptDeclaration = conceptDeclaration;
  }

  private static Iterable<SModel> getModels(SModel model) {
    Iterable<Language> depLanguages = Sequence.fromIterable(((Iterable<SModule>) new GlobalModuleDependenciesManager(model.getModule()).getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE))).ofType(Language.class);
    return Sequence.fromIterable(withExtendedLanguages(depLanguages, model.getRepository())).select(new ISelector<Language, SModel>() {
      public SModel select(Language it) {
        return ((SModel) LanguageAspect.EDITOR.get(it));
      }
    }).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return it != null;
      }
    });
  }
  private static Iterable<Language> withExtendedLanguages(Iterable<Language> languages, SRepository repository) {
    Set<Language> result = SetSequence.fromSet(new HashSet<Language>());
    for (Language language : Sequence.fromIterable(languages)) {
      SetSequence.fromSet(result).addElement(language);
      for (SModuleReference extendedLangRef : SetSequence.fromSet(language.getExtendedLanguageRefs())) {
        SModule extendedLang = extendedLangRef.resolve(repository);
        if (extendedLang instanceof Language) {
          SetSequence.fromSet(result).addElement(((Language) extendedLang));
        }
      }
    }
    return result;
  }
  @Override
  public String getReferenceText(SNode contextNode, SNode node) {
    if (isExcluded(node)) {
      return null;
    }
    return SPropertyOperations.getString(SNodeOperations.as(node, MetaAdapterFactory.getConcept(new UUID(1782411230332735017l, -6324602048325217350l), 4323500428121233431l, "jetbrains.mps.lang.editor.structure.EditorCellId")), MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name"));
  }
  @Override
  public boolean isExcluded(SNode node) {
    SNode editorCellId = SNodeOperations.as(node, MetaAdapterFactory.getConcept(new UUID(1782411230332735017l, -6324602048325217350l), 4323500428121233431l, "jetbrains.mps.lang.editor.structure.EditorCellId"));
    if (editorCellId == null) {
      return true;
    }
    SNode conceptAspect = SNodeOperations.getNodeAncestor(editorCellId, MetaAdapterFactory.getConcept(new UUID(-4094437568663370681l, -8968368868337559369l), 2621449412040133764l, "jetbrains.mps.lang.structure.structure.IConceptAspect"), false, false);
    return conceptAspect == null || !(SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(myConceptDeclaration), SNodeOperations.asSConcept(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), conceptAspect, "virtual_getBaseConcept_2621449412040133768", new Object[]{}))));
  }
}
