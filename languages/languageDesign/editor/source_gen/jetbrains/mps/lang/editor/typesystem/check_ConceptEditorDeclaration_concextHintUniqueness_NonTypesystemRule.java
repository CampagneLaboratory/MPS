package jetbrains.mps.lang.editor.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.messageTargets.ReferenceMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.Collection;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.backports.Deque;
import jetbrains.mps.internal.collections.runtime.DequeSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ILeftCombinator;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_ConceptEditorDeclaration_concextHintUniqueness_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_ConceptEditorDeclaration_concextHintUniqueness_NonTypesystemRule() {
  }

  public void applyRule(final SNode editorDeclaration, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    Language containingLanguage = as_e0tm27_a0a0a1(SNodeOperations.getModel(editorDeclaration).getModule(), Language.class);
    if (containingLanguage == null || SLinkOperations.getTarget(editorDeclaration, "conceptDeclaration", false) == null) {
      return;
    }

    if (ListSequence.fromList(SLinkOperations.getTargets(editorDeclaration, "contextHints", true)).isEmpty() && containingLanguage != SNodeOperations.getModel(SLinkOperations.getTarget(editorDeclaration, "conceptDeclaration", false)).getModule()) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        errorTarget = new ReferenceMessageTarget("conceptDeclaration");
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(editorDeclaration, "Default editor for the concept cannot be defined in the editor aspect of the language extending concept's language", "r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.typesystem)", "6246554009627050246", null, errorTarget);
      }
      return;
    }

    final Set<SNode> editorHintsSet = SetSequence.fromSetWithValues(new HashSet<SNode>(), ListSequence.fromList(SLinkOperations.getTargets(editorDeclaration, "contextHints", true)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "hint", false);
      }
    }));
    Collection<SNode> duplicatingEditorDeclarations = CollectionSequence.fromCollection(new ArrayList<SNode>());
    Deque<Language> languagesToVisit = DequeSequence.fromDeque(new LinkedList<Language>());
    Set<String> visitedLanguages = SetSequence.fromSet(new HashSet<String>());
    DequeSequence.fromDeque(languagesToVisit).addLastElement(containingLanguage);
    SetSequence.fromSet(visitedLanguages).addElement(containingLanguage.getModuleName());

    while (DequeSequence.fromDeque(languagesToVisit).isNotEmpty()) {
      Language nextLanguage = DequeSequence.fromDeque(languagesToVisit).removeFirstElement();
      // TODO: check extending languages as well 
      for (SModuleReference extendedLanguageRef : SetSequence.fromSet(nextLanguage.getExtendedLanguageRefs())) {
        SModule module = extendedLanguageRef.resolve(nextLanguage.getRepository());
        if (module instanceof Language && !(SetSequence.fromSet(visitedLanguages).contains(module.getModuleName()))) {
          DequeSequence.fromDeque(languagesToVisit).addLastElement((Language) module);
          SetSequence.fromSet(visitedLanguages).addElement(module.getModuleName());
        }
      }
      SModel editorModel = LanguageAspect.EDITOR.get(nextLanguage);
      if (editorModel != null) {
        CollectionSequence.fromCollection(duplicatingEditorDeclarations).addSequence(ListSequence.fromList(SModelOperations.getRoots(editorModel, "jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration")).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SLinkOperations.getTarget(it, "conceptDeclaration", false) == SLinkOperations.getTarget(editorDeclaration, "conceptDeclaration", false) && it != editorDeclaration;
          }
        }).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return (int) SetSequence.fromSet(editorHintsSet).count() == (int) ListSequence.fromList(SLinkOperations.getTargets(it, "contextHints", true)).distinct().count() && SetSequence.fromSet(editorHintsSet).containsSequence(ListSequence.fromList(SLinkOperations.getTargets(it, "contextHints", true)).select(new ISelector<SNode, SNode>() {
              public SNode select(SNode it) {
                return SLinkOperations.getTarget(it, "hint", false);
              }
            }));
          }
        }));
      }
    }

    if (CollectionSequence.fromCollection(duplicatingEditorDeclarations).isNotEmpty()) {
      for (SNode duplicatingEditorDecl : CollectionSequence.fromCollection(duplicatingEditorDeclarations)) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          errorTarget = new ReferenceMessageTarget("conceptDeclaration");
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(editorDeclaration, "Duplicate editor declaration. Editor for same set of context hints (" + ((ListSequence.fromList(SLinkOperations.getTargets(editorDeclaration, "contextHints", true)).isEmpty() ?
            "<default>" :
            ListSequence.fromList(SLinkOperations.getTargets(editorDeclaration, "contextHints", true)).select(new ISelector<SNode, String>() {
              public String select(SNode it) {
                return SPropertyOperations.getString(SLinkOperations.getTarget(it, "hint", false), "name");
              }
            }).reduceLeft(new ILeftCombinator<String, String>() {
              public String combine(String a, String b) {
                return a + " & " + b;
              }
            })
          )) + ") was already defined in: " + BehaviorReflection.invokeVirtual(String.class, duplicatingEditorDecl, "virtual_getFqName_1213877404258", new Object[]{}), "r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.typesystem)", "6246554009626560906", null, errorTarget);
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }

  private static <T> T as_e0tm27_a0a0a1(Object o, Class<T> type) {
    return (type.isInstance(o) ?
      (T) o :
      null
    );
  }
}
