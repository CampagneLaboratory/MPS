package jetbrains.mps.lang.editor.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class StylePriorityGroup_Behavior {
  public static void init(SNode thisNode) {
  }

  public static boolean call_hasCycles_7417001528577667349(SNode thisNode) {
    return StylePriorityGroup_Behavior.call_getPriority_1938068300780663696(thisNode) == -1;
  }

  public static int call_getPriority_1938068300780663696(SNode thisNode) {
    Map<SNode, Integer> priorities = MapSequence.fromMap(new HashMap<SNode, Integer>());

    List<SNode> extendsTree = ListSequence.fromListAndArray(new LinkedList<SNode>(), thisNode);
    boolean down = true;

    List<Integer> childNums = ListSequence.fromList(new LinkedList<Integer>());

    while (ListSequence.fromList(extendsTree).isNotEmpty()) {
      assert ListSequence.fromList(childNums).count() + 1 == ListSequence.fromList(extendsTree).count();
      if (ListSequence.fromList(extendsTree).tail(ListSequence.fromList(extendsTree).count() - 1).contains(ListSequence.fromList(extendsTree).first())) {
        return -1;
      } else if (down) {
        if ((SLinkOperations.getTarget(ListSequence.fromList(extendsTree).first(), "extendedGroup", true) != null) && ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(ListSequence.fromList(extendsTree).first(), "extendedGroup", true), "element", true)).isNotEmpty()) {
          MapSequence.fromMap(priorities).put(ListSequence.fromList(extendsTree).first(), -1);
          ListSequence.fromList(extendsTree).insertElement(0, SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(ListSequence.fromList(extendsTree).first(), "extendedGroup", true), "element", true)).getElement(0), "stylePriorityGroup", false));
          ListSequence.fromList(childNums).insertElement(0, 0);
        } else if ((SLinkOperations.getTarget(ListSequence.fromList(extendsTree).first(), "extendedGroup", true) != null)) {
          MapSequence.fromMap(priorities).put(ListSequence.fromList(extendsTree).first(), 1);
          down = false;
        } else {
          MapSequence.fromMap(priorities).put(ListSequence.fromList(extendsTree).first(), 0);
          down = false;
        }
      } else {
        if (ListSequence.fromList(extendsTree).count() == 1) {
          break;
        }
        int newIndex = ListSequence.fromList(childNums).first() + 1;
        assert newIndex <= ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(ListSequence.fromList(extendsTree).getElement(1), "extendedGroup", true), "element", true)).count();
        MapSequence.fromMap(priorities).put(ListSequence.fromList(extendsTree).getElement(1), Math.max(MapSequence.fromMap(priorities).get(ListSequence.fromList(extendsTree).first()) + 1, MapSequence.fromMap(priorities).get(ListSequence.fromList(extendsTree).getElement(1))));
        ListSequence.fromList(extendsTree).removeElementAt(0);
        ListSequence.fromList(childNums).removeElementAt(0);
        if (newIndex < ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(ListSequence.fromList(extendsTree).first(), "extendedGroup", true), "element", true)).count()) {
          ListSequence.fromList(extendsTree).insertElement(0, SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(ListSequence.fromList(extendsTree).first(), "extendedGroup", true), "element", true)).getElement(newIndex), "stylePriorityGroup", false));
          ListSequence.fromList(childNums).insertElement(0, newIndex);
          down = true;
        } else {
          assert newIndex == ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(ListSequence.fromList(extendsTree).first(), "extendedGroup", true), "element", true)).count();
        }
      }
    }
    return MapSequence.fromMap(priorities).get(thisNode);
  }
}
