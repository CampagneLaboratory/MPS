package jetbrains.mps.lang.editor.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.editor.behavior.ConceptEditorDeclaration_Behavior;
import jetbrains.mps.intentions.IntentionDescriptor;

public class GenerateSingleLineDefaultEditor_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public GenerateSingleLineDefaultEditor_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration";
  }

  public String getPresentation() {
    return "GenerateSingleLineDefaultEditor";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.editor.intentions.GenerateSingleLineDefaultEditor_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c8959029b(jetbrains.mps.lang.editor.intentions)", "5469351333089013987");
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new GenerateSingleLineDefaultEditor_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Generate Default (Expression-like)";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      ConceptEditorDeclaration_Behavior.call_createDefaultEditor_2970389781192937380(node, false);
    }

    public IntentionDescriptor getDescriptor() {
      return GenerateSingleLineDefaultEditor_Intention.this;
    }
  }
}
