package jetbrains.mps.lang.editor.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.intentions.IntentionDescriptor;

public class ChangeTransactionalProperty_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public ChangeTransactionalProperty_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.editor.structure.CellModel_TransactionalProperty";
  }

  public String getPresentation() {
    return "ChangeTransactionalProperty";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.editor.intentions.ChangeTransactionalProperty_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c8959029b(jetbrains.mps.lang.editor.intentions)", "1235490923121");
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ChangeTransactionalProperty_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Replace Transactional Property by Concept Property";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode transactional = SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_Property", null);
      SLinkOperations.setTarget(transactional, "relationDeclaration", SLinkOperations.getTarget(node, "property", false), false);
      SLinkOperations.setTarget(node, "property", null, false);
      SNodeOperations.detachNode(SLinkOperations.getTarget(node, "handlerBlock", true));
      for (SNode child : ListSequence.fromList(jetbrains.mps.util.SNodeOperations.getChildren(node))) {
        String role = child.getRole();
        node.removeChild(child);
        transactional.addChild(role, child);
      }
      for (Map.Entry<String, String> propertyEntry : SetSequence.fromSet(jetbrains.mps.util.SNodeOperations.getProperties(node).entrySet())) {
        transactional.setProperty(propertyEntry.getKey(), propertyEntry.getValue());
      }
      for (SReference reference : ListSequence.fromList(node.getReferences())) {
        transactional.setReference(reference.getRole(), reference);
      }
      SNodeOperations.replaceWithAnother(node, transactional);
    }

    public IntentionDescriptor getDescriptor() {
      return ChangeTransactionalProperty_Intention.this;
    }
  }
}
