package jetbrains.mps.lang.editor.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.util.SNodeOperations;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.smodel.SReference;

public class ChangeProperty_Intention extends BaseIntention {
  public ChangeProperty_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.editor.structure.CellModel_Property";
  }

  public String getPresentation() {
    return "ChangeProperty";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.editor.intentions.ChangeProperty_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:49ddab87-c30a-4978-8da2-7d7dc16830c4(jetbrains.mps.lang.editor.intentions@1_0)", "1235489867936");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Replace Concept Property by Transactional Property";
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode transactional = SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_TransactionalProperty", node);
    SLinkOperations.setTarget(transactional, "property", SLinkOperations.getTarget(node, "relationDeclaration", false), false);
    SLinkOperations.setTarget(node, "relationDeclaration", null, false);
    for (SNode child : ListSequence.fromList(SNodeOperations.getChildren(node))) {
      String role = child.getRole();
      node.removeChild(child);
      transactional.addChild(role, child);
    }
    for (Map.Entry<String, String> propertyEntry : SetSequence.fromSet(SNodeOperations.getProperties(node).entrySet())) {
      transactional.setProperty(propertyEntry.getKey(), propertyEntry.getValue());
    }
    for (SReference reference : ListSequence.fromList(node.getReferences())) {
      transactional.setReference(reference.getRole(), reference);
    }
    jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.replaceWithAnother(node, transactional);
  }
}
