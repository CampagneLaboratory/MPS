package jetbrains.mps.lang.editor.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class TrimConstantCell_Intention extends BaseIntention {
  public TrimConstantCell_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.editor.structure.CellModel_Constant";
  }

  public String getPresentation() {
    return "TrimConstantCell";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.editor.intentions.TrimConstantCell_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:49ddab87-c30a-4978-8da2-7d7dc16830c4(jetbrains.mps.lang.editor.intentions@1_0)", "1224530037892");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Trim Constant Cell";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    String text = SPropertyOperations.getString(node, "text");
    if (text == null || text.length() == 0) {
      return false;
    }
    if (text.charAt(0) == ' ' || text.charAt(text.length() - 1) == ' ') {
      return true;
    }
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SPropertyOperations.set(node, "text", SPropertyOperations.getString(node, "text").trim());
  }
}
