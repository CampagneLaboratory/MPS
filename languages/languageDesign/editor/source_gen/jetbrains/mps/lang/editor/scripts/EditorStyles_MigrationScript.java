package jetbrains.mps.lang.editor.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;

public class EditorStyles_MigrationScript extends BaseMigrationScript {
  public EditorStyles_MigrationScript(IOperationContext operationContext) {
    super("Editor styles");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "pre-defined-style to apply and apply-condition";
      }

      public String getAdditionalInfo() {
        return "pre-defined-style to apply and apply-condition";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.editor.structure.PreDefinedStyleClassItem";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return true;
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode replacement;
        if ((SLinkOperations.getTarget(node, "query", true) != null)) {
          replacement = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.ApplyStyleClassCondition", null);
          SLinkOperations.setTarget(SNodeOperations.cast(replacement, "jetbrains.mps.lang.editor.structure.ApplyStyleClassCondition"), "query", SLinkOperations.getTarget(node, "query", true), true);
        } else {
          replacement = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.ApplyStyleClass", null);
        }
        SLinkOperations.setTarget(replacement, "target", createStyleReference_s4lgfb_a0c0a0(SLinkOperations.getTarget(node, "key", false)), true);
        SNodeOperations.replaceWithAnother(node, replacement);
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
    // whitespace 
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "StyleSheetClass to StyleClass";
      }

      public String getAdditionalInfo() {
        return "StyleSheetClass to StyleClass";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.editor.structure.StyleSheetClass";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return true;
      }

      public void doUpdateInstanceNode(SNode node) {
        as_n8en9w_a0a0a4a0a0a0a4a0(node, jetbrains.mps.smodel.SNode.class).setConceptFqName(NameUtil.nodeFQName(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.StyleClass")));
        if ((SLinkOperations.getTarget(node, "extendedClass", true) != null)) {
          ListSequence.fromList(SLinkOperations.getTargets(node, "styleItem", true)).insertElement(0, createApplyStyleClass_s4lgfb_a0a0a1a0d(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "extendedClass", true), "styleSheetClass", false)));
          SLinkOperations.setTarget(node, "extendedClass", null, true);
        }
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }

  private static SNode createStyleReference_s4lgfb_a0c0a0(Object p0) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.editor.structure.StyleReference", null, false);
    n1.setReferenceTarget("style", (SNode) p0);
    return n1;
  }

  private static SNode createApplyStyleClass_s4lgfb_a0a0a1a0d(Object p0) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.editor.structure.ApplyStyleClass", null, false);
    {
      SNode n2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.editor.structure.StyleReference", null, false);
      n2.setReferenceTarget("style", (SNode) p0);
      n1.addChild("target", n2);
    }
    return n1;
  }

  private static <T> T as_n8en9w_a0a0a4a0a0a0a4a0(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
