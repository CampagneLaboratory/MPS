package jetbrains.mps.lang.editor.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class StyleClass_Behavior {
  public static void init(SNode thisNode) {
  }

  public static boolean call_hasCycles_7417001528577667349(SNode thisNode) {
    return StyleClass_Behavior.call_getPriority_1938068300780663696(thisNode) == -1;
  }

  public static int call_getPriority_1938068300780663696(SNode thisNode) {
    Map<SNode, Integer> priorities = MapSequence.fromMap(new HashMap<SNode, Integer>());

    List<SNode> extendsTree = ListSequence.fromListAndArray(new LinkedList<SNode>(), thisNode);
    boolean down = true;

    List<Integer> childNums = ListSequence.fromList(new LinkedList<Integer>());

    while (ListSequence.fromList(extendsTree).isNotEmpty()) {
      assert ListSequence.fromList(childNums).count() + 1 == ListSequence.fromList(extendsTree).count();
      if (ListSequence.fromList(extendsTree).tail(ListSequence.fromList(extendsTree).count() - 1).contains(ListSequence.fromList(extendsTree).first())) {
        return -1;
      } else if (down) {
        if ((SLinkOperations.getTarget(ListSequence.fromList(extendsTree).first(), "dominates", true) != null)) {
          if (ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(ListSequence.fromList(extendsTree).first(), "dominates", true), "dominatesStyleClassList", true), "element", true)).isEmpty()) {
            MapSequence.fromMap(priorities).put(ListSequence.fromList(extendsTree).first(), 1);
            down = false;
          } else {
            MapSequence.fromMap(priorities).put(ListSequence.fromList(extendsTree).first(), -1);
            ListSequence.fromList(extendsTree).insertElement(0, SLinkOperations.getTarget(Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(ListSequence.fromList(extendsTree).first(), "dominates", true), "dominatesStyleClassList", true), "element", true), "jetbrains.mps.lang.editor.structure.StyleClassReference")).first(), "styleClass", false));
            ListSequence.fromList(childNums).insertElement(0, 0);
          }
        } else {
          MapSequence.fromMap(priorities).put(ListSequence.fromList(extendsTree).first(), 0);
          down = false;
        }
      } else {
        if (ListSequence.fromList(extendsTree).count() == 1) {
          break;
        }
        int newIndex = ListSequence.fromList(childNums).first() + 1;
        assert newIndex <= ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(ListSequence.fromList(extendsTree).getElement(1), "dominates", true), "dominatesStyleClassList", true), "element", true)).count();
        MapSequence.fromMap(priorities).put(ListSequence.fromList(extendsTree).getElement(1), Math.max(MapSequence.fromMap(priorities).get(ListSequence.fromList(extendsTree).first()) + 1, MapSequence.fromMap(priorities).get(ListSequence.fromList(extendsTree).getElement(1))));
        ListSequence.fromList(extendsTree).removeElementAt(0);
        ListSequence.fromList(childNums).removeElementAt(0);
        if (newIndex < ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(ListSequence.fromList(extendsTree).first(), "dominates", true), "dominatesStyleClassList", true), "element", true)).count()) {
          ListSequence.fromList(extendsTree).insertElement(0, SLinkOperations.getTarget(SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(ListSequence.fromList(extendsTree).first(), "dominates", true), "dominatesStyleClassList", true), "element", true)).getElement(newIndex), "jetbrains.mps.lang.editor.structure.StyleClassReference"), "styleClass", false));
          ListSequence.fromList(childNums).insertElement(0, newIndex);
          down = true;
        }
      }
    }
    return MapSequence.fromMap(priorities).get(thisNode);
  }

  public static boolean call_hasApplyCycles_2491174914184428685(SNode thisNode) {
    List<SNode> dependencies = ListSequence.fromList(new ArrayList<SNode>());
    List<SNode> adding = ListSequence.fromListAndArray(new ArrayList<SNode>(), thisNode);
    while (ListSequence.fromList(adding).isNotEmpty()) {
      if (ListSequence.fromList(dependencies).intersect(ListSequence.fromList(adding)).isNotEmpty()) {
        return true;
      }
      ListSequence.fromList(dependencies).addSequence(ListSequence.fromList(adding));
      adding = ListSequence.fromListWithValues(new ArrayList<SNode>(), SNodeOperations.ofConcept(Sequence.fromIterable(SNodeOperations.ofConcept(ListSequence.fromList(adding).translate(new ITranslator2<SNode, SNode>() {
        public Iterable<SNode> translate(SNode it) {
          return SLinkOperations.getTargets(it, "styleItem", true);
        }
      }), "jetbrains.mps.lang.editor.structure.ApplyStyleClass")).select(new ISelector<SNode, SNode>() {
        public SNode select(SNode it) {
          return SLinkOperations.getTarget(SLinkOperations.getTarget(it, "target", true), "style", false);
        }
      }), "jetbrains.mps.lang.editor.structure.StyleClass"));
    }
    return false;
  }
}
