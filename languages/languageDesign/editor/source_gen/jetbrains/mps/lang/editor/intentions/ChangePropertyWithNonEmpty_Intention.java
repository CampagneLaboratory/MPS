package jetbrains.mps.lang.editor.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.intentions.IntentionDescriptor;

public class ChangePropertyWithNonEmpty_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public ChangePropertyWithNonEmpty_Intention() {
  }
  public String getConcept() {
    return "jetbrains.mps.lang.editor.structure.CellModel_Property";
  }
  public String getPresentation() {
    return "ChangePropertyWithNonEmpty";
  }
  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.editor.intentions.ChangePropertyWithNonEmpty_Intention";
  }
  public String getLanguageFqName() {
    return "jetbrains.mps.lang.editor";
  }
  public IntentionType getType() {
    return IntentionType.NORMAL;
  }
  public boolean isAvailableInChildNodes() {
    return false;
  }
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.getConceptDeclaration(node) == SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.CellModel_Property");
  }
  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c8959029b(jetbrains.mps.lang.editor.intentions)", "5137527105084909325");
  }
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ChangePropertyWithNonEmpty_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Replace Property by Non Empty Property";
    }
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode nonEmpty = SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.editor.structure.CellModel_NonEmptyProperty", node);
      SLinkOperations.setTarget(nonEmpty, "relationDeclaration", SLinkOperations.getTarget(node, "relationDeclaration", false), false);
      SLinkOperations.setTarget(node, "relationDeclaration", null, false);
      for (SNode child : ListSequence.fromList(jetbrains.mps.util.SNodeOperations.getChildren(node))) {
        String role = child.getRoleInParent();
        node.removeChild(child);
        nonEmpty.addChild(role, child);
      }
      for (Map.Entry<String, String> propertyEntry : SetSequence.fromSet(jetbrains.mps.util.SNodeOperations.getProperties(node).entrySet())) {
        SNodeAccessUtil.setProperty(nonEmpty, propertyEntry.getKey(), propertyEntry.getValue());
      }
      for (SReference reference : Sequence.fromIterable(node.getReferences())) {
        nonEmpty.setReference(reference.getRole(), reference);
      }
      SNodeOperations.replaceWithAnother(node, nonEmpty);
    }
    public IntentionDescriptor getDescriptor() {
      return ChangePropertyWithNonEmpty_Intention.this;
    }
  }
}
