package jetbrains.mps.lang.editor.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNodePointer;

public class CellModel_ReferencePresentation_Constraints extends BaseConstraintsDescriptor {
  public CellModel_ReferencePresentation_Constraints() {
    super("jetbrains.mps.lang.editor.structure.CellModel_ReferencePresentation");
  }

  @Override
  public boolean hasOwnCanBeChildMethod() {
    return true;
  }

  @Override
  public boolean canBeChild(@Nullable SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext, @Nullable final CheckingNodeContext checkingNodeContext) {
    boolean result = static_canBeAChild(node, parentNode, link, childConcept, operationContext);

    if (!(result) && checkingNodeContext != null) {
      checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
    }

    return result;
  }

  public static boolean static_canBeAChild(SNode node, SNode parentNode, SNode link, SNode childConcept, final IOperationContext operationContext) {
    SNode ancestorRef = SNodeOperations.getAncestor(parentNode, "jetbrains.mps.lang.editor.structure.CellModel_RefCell", true, false);
    SNode ancestorList = SNodeOperations.getAncestor(parentNode, "jetbrains.mps.lang.editor.structure.CellModel_ListWithRole", true, false);
    if ((ancestorRef == null)) {
      return false;
    }
    if ((ancestorList == null)) {
      return true;
    }
    return jetbrains.mps.util.SNodeOperations.isAncestor(ancestorList, ancestorRef);
  }

  private static SNodePointer canBeChildBreakingPoint = new SNodePointer("r:00000000-0000-4000-0000-011c89590298(jetbrains.mps.lang.editor.constraints)", "625126330682991630");
}
