package jetbrains.mps.lang.editor.tableTests.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.lang.editor.tableTests.structure.AbstractStateMachineElement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.editor.tableTests.structure.ContentElement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.editor.tableTests.structure.DataCell", null);
    myFqNameToConcept.put("jetbrains.mps.lang.editor.tableTests.structure.Event", null);
    myFqNameToConcept.put("jetbrains.mps.lang.editor.tableTests.structure.EventReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.editor.tableTests.structure.HierarchycalTable", null);
    myFqNameToConcept.put("jetbrains.mps.lang.editor.tableTests.structure.LightWeightDecisionTable", null);
    myFqNameToConcept.put("jetbrains.mps.lang.editor.tableTests.structure.Matrix", null);
    myFqNameToConcept.put("jetbrains.mps.lang.editor.tableTests.structure.Row", null);
    myFqNameToConcept.put("jetbrains.mps.lang.editor.tableTests.structure.State", null);
    myFqNameToConcept.put("jetbrains.mps.lang.editor.tableTests.structure.StateMachine", null);
    myFqNameToConcept.put("jetbrains.mps.lang.editor.tableTests.structure.StateReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.editor.tableTests.structure.Table", null);
    myFqNameToConcept.put("jetbrains.mps.lang.editor.tableTests.structure.Transition", null);
    myFqNameToConcept.put("jetbrains.mps.lang.editor.tableTests.structure.UltimateContainer", null);
    myFqNameToConcept.put("jetbrains.mps.lang.editor.tableTests.structure.XElement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.editor.tableTests.structure.YElement", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.tableTests.structure.AbstractStateMachineElement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.tableTests.structure.ContentElement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.tableTests.structure.DataCell").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("value").create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.tableTests.structure.Event").super_("jetbrains.mps.lang.editor.tableTests.structure.AbstractStateMachineElement").parents("jetbrains.mps.lang.editor.tableTests.structure.AbstractStateMachineElement", "jetbrains.mps.lang.core.structure.INamedConcept").create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.tableTests.structure.EventReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("event").create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.tableTests.structure.HierarchycalTable").super_("jetbrains.mps.lang.editor.tableTests.structure.Table").parents("jetbrains.mps.lang.editor.tableTests.structure.Table").children(new String[]{"headers"}, new boolean[]{true}).create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.tableTests.structure.LightWeightDecisionTable").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"column", "row", "body"}, new boolean[]{true, true, true}).alias("decTable", "").staticScope(StaticScope.NONE).create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.tableTests.structure.Matrix").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"xs", "ys", "contents"}, new boolean[]{true, true, true}).create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.tableTests.structure.Row").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"cells"}, new boolean[]{true}).create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.tableTests.structure.State").super_("jetbrains.mps.lang.editor.tableTests.structure.AbstractStateMachineElement").parents("jetbrains.mps.lang.editor.tableTests.structure.AbstractStateMachineElement", "jetbrains.mps.lang.core.structure.INamedConcept").create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.tableTests.structure.StateMachine").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"events", "transitions", "states"}, new boolean[]{true, true, true}).create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.tableTests.structure.StateReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("state").create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.tableTests.structure.Table").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("initialRowCount", "initialColumnCount").children(new String[]{"rows"}, new boolean[]{true}).create();
        break;
      case 13:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.tableTests.structure.Transition").super_("jetbrains.mps.lang.editor.tableTests.structure.AbstractStateMachineElement").parents("jetbrains.mps.lang.editor.tableTests.structure.AbstractStateMachineElement").properties("condition").children(new String[]{"fromState", "toState", "trigger"}, new boolean[]{false, false, false}).create();
        break;
      case 14:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.tableTests.structure.UltimateContainer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"stateMachines", "tables", "matrixes"}, new boolean[]{true, true, true}).create();
        break;
      case 15:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.tableTests.structure.XElement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();
        break;
      case 16:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.tableTests.structure.YElement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.lang.editor.tableTests.structure.AbstractStateMachineElement", "jetbrains.mps.lang.editor.tableTests.structure.ContentElement", "jetbrains.mps.lang.editor.tableTests.structure.DataCell", "jetbrains.mps.lang.editor.tableTests.structure.Event", "jetbrains.mps.lang.editor.tableTests.structure.EventReference", "jetbrains.mps.lang.editor.tableTests.structure.HierarchycalTable", "jetbrains.mps.lang.editor.tableTests.structure.LightWeightDecisionTable", "jetbrains.mps.lang.editor.tableTests.structure.Matrix", "jetbrains.mps.lang.editor.tableTests.structure.Row", "jetbrains.mps.lang.editor.tableTests.structure.State", "jetbrains.mps.lang.editor.tableTests.structure.StateMachine", "jetbrains.mps.lang.editor.tableTests.structure.StateReference", "jetbrains.mps.lang.editor.tableTests.structure.Table", "jetbrains.mps.lang.editor.tableTests.structure.Transition", "jetbrains.mps.lang.editor.tableTests.structure.UltimateContainer", "jetbrains.mps.lang.editor.tableTests.structure.XElement", "jetbrains.mps.lang.editor.tableTests.structure.YElement"};
}
