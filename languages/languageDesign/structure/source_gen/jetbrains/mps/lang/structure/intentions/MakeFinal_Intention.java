package jetbrains.mps.lang.structure.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class MakeFinal_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public MakeFinal_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.structure.structure.ConceptDeclaration";
  }

  public String getPresentation() {
    return "MakeFinal";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.structure.intentions.MakeFinal_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:e5a8b5c7-85b5-4d59-9e4e-850a142e2560(jetbrains.mps.lang.structure.intentions)", "4672725010143787708");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new MakeFinal_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return (SPropertyOperations.getBoolean(node, "final") ?
        "Make Not Final" :
        "Make Final"
      );
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SPropertyOperations.set(node, "final", "" + (!(SPropertyOperations.getBoolean(node, "final"))));
      if (SPropertyOperations.getBoolean(node, "final")) {
        SPropertyOperations.set(node, "abstract", "" + (false));
      }
    }

    public IntentionDescriptor getDescriptor() {
      return MakeFinal_Intention.this;
    }
  }
}
