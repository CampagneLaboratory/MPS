package jetbrains.mps.lang.structure.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import jetbrains.mps.logging.Logger;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IScope;
import java.util.List;
import jetbrains.mps.progress.ProgressMonitor;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.SReference;

public class LinkInstances_Finder extends GeneratedFinder {
  private static Logger LOG = Logger.getLogger("jetbrains.mps.lang.structure.findUsages.LinkInstances_Finder");

  public LinkInstances_Finder() {
  }

  public String getDescription() {
    return "Link Instances";
  }

  public String getLongDescription() {
    return "";
  }

  public String getConcept() {
    return "jetbrains.mps.lang.structure.structure.LinkDeclaration";
  }

  protected void doFind(SNode node, IScope scope, List<SNode> _results, ProgressMonitor monitor) {
    monitor.start(getDescription(), 1);
    try {
      // collect roles 
      Set<String> roles = SetSequence.fromSet(new HashSet<String>());
      SNode curNode = node;
      do {
        SetSequence.fromSet(roles).addElement(SPropertyOperations.getString(curNode, "role"));
        curNode = SLinkOperations.getTarget(curNode, "specializedLink", false);
      } while (curNode != null);
      // find concept 
      SNode conceptDeclaration = SNodeOperations.getAncestor(node, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", false, false);
      if ((conceptDeclaration == null)) {
        return;
      }
      boolean isChild = SPropertyOperations.hasValue(node, "metaClass", "aggregation", "reference");
      // find instances and link examples 
      for (SNode instance : ListSequence.fromList(FindUtils.executeFinder("jetbrains.mps.lang.structure.findUsages.ConceptInstances_Finder", conceptDeclaration, scope, monitor.subTask(1)))) {
        for (String role : SetSequence.fromSet(roles)) {
          if (isChild) {
            for (SNode child : Sequence.fromIterable(instance.getChildren(role))) {
              ListSequence.fromList(_results).addElement(child);
            }
          } else {
            SReference reference = instance.getReference(role);
            if (reference != null) {
              ListSequence.fromList(_results).addElement(reference.getSourceNode());
            }
          }
        }
      }
    } finally {
      monitor.done();
    }
  }

  public String getNodeCategory(SNode node) {
    return "Link Instances";
  }
}
