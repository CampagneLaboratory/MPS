package jetbrains.mps.lang.structure.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.kernel.model.SModelUtil;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.search.SModelSearchUtil;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.util.NameUtil;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.util.Pair;
import java.util.HashSet;

public class AbstractConceptDeclaration_Behavior {
  public static void init(SNode thisNode) {
  }

  public static SModel call_getAspectModel_8360039740498072707(SNode thisNode, LanguageAspect aspect) {
    Language language = SModelUtil.getDeclaringLanguage(thisNode);
    if (language == null) {
      return null;
    }
    SModel md = aspect.get(language);
    if (md == null) {
      return null;
    }
    return md;
  }

  public static List<SNode> call_findConceptAspectCollection_1567570417158062208(SNode thisNode, LanguageAspect aspect) {
    List<SNode> result = new ArrayList<SNode>();
    SModel model = AbstractConceptDeclaration_Behavior.call_getAspectModel_8360039740498072707(thisNode, aspect);
    AbstractConceptDeclaration_Behavior.call_findConceptAspectCollection_8360039740498071686(thisNode, model, result);
    return result;
  }

  public static SNode call_findConceptAspect_8360039740498068384(SNode thisNode, LanguageAspect aspect) {
    SModel model = AbstractConceptDeclaration_Behavior.call_getAspectModel_8360039740498072707(thisNode, aspect);
    return AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498069412(thisNode, model);
  }

  public static SNode call_findConceptAspect_8360039740498069412(SNode thisNode, SModel model) {
    if (model == null) {
      return null;
    }
    for (SNode aspectConcept : SModelOperations.getRoots(model, "jetbrains.mps.lang.structure.structure.IConceptAspect")) {
      if ((BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), aspectConcept, "virtual_getBaseConcept_2621449412040133768", new Object[]{}) != null) && BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), aspectConcept, "virtual_getBaseConcept_2621449412040133768", new Object[]{}) == thisNode) {
        return aspectConcept;
      }
    }
    return null;
  }

  public static void call_findConceptAspectCollection_8360039740498071686(SNode thisNode, SModel model, List<SNode> collection) {
    if (model == null) {
      return;
    }
    for (SNode aspectConcept : SModelOperations.getRoots(model, "jetbrains.mps.lang.structure.structure.IConceptAspect")) {
      if (ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), aspectConcept, "virtual_getBaseConceptCollection_5270353093116013036", new Object[]{})).contains(thisNode)) {
        ListSequence.fromList(collection).addElement(aspectConcept);
      }
    }
  }

  public static List<SNode> call_findGeneratorFragments_6409339300305625383(SNode thisNode) {
    Language language = SModelUtil.getDeclaringLanguage(thisNode);
    List<SNode> result = new ArrayList<SNode>();
    if (language == null) {
      return result;
    }
    for (Generator g : language.getGenerators()) {
      for (SModel sd : g.getOwnTemplateModels()) {
        SModel m = sd;
        for (SNode node : ListSequence.fromList(SModelOperations.getRoots(m, null))) {
          if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.TemplateDeclaration") && SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.TemplateDeclaration"), "applicableConcept", false) == thisNode || SLinkOperations.getTarget(AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.generator.structure.RootTemplateAnnotation")), "applicableConcept", false) == thisNode) {
            ListSequence.fromList(result).addElement(node);
          } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.MappingConfiguration") || SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.generator.structure.TemplateSwitch")) {
            // generator rules 
            for (SNode r : ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.lang.generator.structure.BaseMappingRule", false, new String[]{}))) {
              if (SLinkOperations.getTarget(r, "applicableConcept", false) == thisNode || (SPropertyOperations.getBoolean(r, "applyToConceptInheritors") && Sequence.fromIterable(AbstractConceptDeclaration_Behavior.call_getAllSuperConcepts_2992811758677902956(thisNode, false)).contains(SLinkOperations.getTarget(r, "applicableConcept", false)))) {
                ListSequence.fromList(result).addElement(r);
              }
            }
            for (SNode r : ListSequence.fromList(SNodeOperations.getDescendants(node, "jetbrains.mps.lang.generator.structure.DropRootRule", false, new String[]{}))) {
              if (Sequence.fromIterable(AbstractConceptDeclaration_Behavior.call_getAllSuperConcepts_2992811758677902956(thisNode, true)).contains(SLinkOperations.getTarget(r, "applicableConcept", false))) {
                ListSequence.fromList(result).addElement(r);
              }
            }
          }
        }
      }
    }
    return result;
  }

  public static List<SNode> call_findAllAspects_7754459869734028917(SNode thisNode) {
    List<SNode> result = new ArrayList<SNode>();
    for (LanguageAspect aspect : LanguageAspect.values()) {
      ListSequence.fromList(result).addElement(AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(thisNode, aspect));
    }
    ListSequence.fromList(result).addSequence(ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_findGeneratorFragments_6409339300305625383(thisNode)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.getContainingRoot(it);
      }
    }).distinct());

    while (ListSequence.fromList(result).contains(null)) {
      ListSequence.fromList(result).removeElement(null);
    }

    return result;
  }

  public static String call_getPresentation_2450081617266859256(SNode thisNode) {
    return (SPropertyOperations.getString(thisNode, "conceptAlias") != null ? SPropertyOperations.getString(thisNode, "conceptAlias") : SPropertyOperations.getString(thisNode, "name"));
  }

  public static List<SNode> call_getAvailableConceptMethods_1213877394200(SNode thisNode, SNode context) {
    List<SNode> methods = new ArrayList<SNode>();
    if (thisNode == null) {
      return methods;
    }
    SNode contextBehaviour = SNodeOperations.getAncestor(context, "jetbrains.mps.lang.behavior.structure.ConceptBehavior", true, false);
    for (SNode concept : SConceptOperations.getConceptHierarchy(thisNode)) {
      SNode behaviour = SNodeOperations.cast(AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(concept, LanguageAspect.BEHAVIOR), "jetbrains.mps.lang.behavior.structure.ConceptBehavior");
      if (behaviour != null) {
        for (SNode method : SLinkOperations.getTargets(behaviour, "method", true)) {
          if (SLinkOperations.getTarget(method, "overriddenMethod", false) != null) {
            continue;
          }
          if (SLinkOperations.getTarget(method, "visibility", true) == null) {
            if (SNodeOperations.getModel(contextBehaviour) == SNodeOperations.getModel(method)) {
              ListSequence.fromList(methods).addElement(method);
            }
          }
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method, "visibility", true), "jetbrains.mps.baseLanguage.structure.PrivateVisibility")) {
            if (SNodeOperations.getAncestor(method, "jetbrains.mps.lang.behavior.structure.ConceptBehavior", true, false) == contextBehaviour) {
              ListSequence.fromList(methods).addElement(method);
            }
          }
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method, "visibility", true), "jetbrains.mps.baseLanguage.structure.PublicVisibility")) {
            ListSequence.fromList(methods).addElement(method);
          }
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(method, "visibility", true), "jetbrains.mps.baseLanguage.structure.ProtectedVisibility")) {
            if (ListSequence.fromList(SConceptOperations.getAllSuperConcepts(SLinkOperations.getTarget(contextBehaviour, "concept", false), true)).contains(SLinkOperations.getTarget(SNodeOperations.getAncestor(method, "jetbrains.mps.lang.behavior.structure.ConceptBehavior", true, false), "concept", false))) {
              ListSequence.fromList(methods).addElement(method);
            }
          }
        }
      }
    }
    return methods;
  }

  public static List<SNode> call_getVirtualConceptMethods_1213877394290(SNode thisNode) {
    List<SNode> methods = new ArrayList<SNode>();
    for (SNode concept : SConceptOperations.getAllSuperConcepts(thisNode, false)) {
      SNode behaviour = SNodeOperations.cast(AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(concept, LanguageAspect.BEHAVIOR), "jetbrains.mps.lang.behavior.structure.ConceptBehavior");
      if (behaviour != null) {
        for (SNode method : SLinkOperations.getTargets(behaviour, "method", true)) {
          if (SPropertyOperations.getBoolean(method, "isVirtual")) {
            ListSequence.fromList(methods).addElement(method);
          }
        }
      }
    }
    return methods;
  }

  public static List<SNode> call_getNotImplementedConceptMethods_1213877394339(SNode thisNode) {
    List<SNode> abstractMethods = new ArrayList<SNode>();
    List<SNode> implementedMethods = new ArrayList<SNode>();
    List<SNode> concepts = SConceptOperations.getAllSuperConcepts(thisNode, false);
    ListSequence.fromList(concepts).addElement(thisNode);
    for (SNode concept : concepts) {
      SNode behavior = SNodeOperations.cast(AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(concept, LanguageAspect.BEHAVIOR), "jetbrains.mps.lang.behavior.structure.ConceptBehavior");
      for (SNode method : SLinkOperations.getTargets(behavior, "method", true)) {
        if (SPropertyOperations.getBoolean(method, "isAbstract")) {
          ListSequence.fromList(abstractMethods).addElement(method);
        }
        if (SLinkOperations.getTarget(method, "overriddenMethod", false) != null && !(SPropertyOperations.getBoolean(method, "isAbstract"))) {
          ListSequence.fromList(implementedMethods).addElement(SLinkOperations.getTarget(method, "overriddenMethod", false));
        }
      }
    }
    ListSequence.fromList(abstractMethods).removeSequence(ListSequence.fromList(implementedMethods));
    return abstractMethods;
  }

  public static SNode call_findLinkDeclaration_1213877394467(SNode thisNode, String role) {
    return SNodeOperations.cast(SModelSearchUtil.findLinkDeclaration(thisNode, role), "jetbrains.mps.lang.structure.structure.LinkDeclaration");
  }

  public static List<SNode> call_getLinkDeclarations_1213877394480(SNode thisNode) {
    return (List<SNode>) SModelSearchUtil.getLinkDeclarations(thisNode);
  }

  public static List<SNode> call_getReferenceLinkDeclarations_1213877394496(SNode thisNode) {
    List<SNode> links = AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(thisNode);
    return ListSequence.fromList(links).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.hasValue(it, "metaClass", "reference", "reference");
      }
    }).toListSequence();
  }

  public static List<SNode> call_getAggregationLinkDeclarations_1213877394521(SNode thisNode) {
    List<SNode> links = AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(thisNode);
    return ListSequence.fromList(links).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.hasValue(it, "metaClass", "aggregation", "reference");
      }
    }).toListSequence();
  }

  public static List<SNode> call_getPropertyDeclarations_1213877394546(SNode thisNode) {
    List<SNode> properties = SModelSearchUtil.getPropertyDeclarations(thisNode);
    return (List<SNode>) properties;
  }

  public static SNode call_findPropertyDeclaration_1219835742593(SNode thisNode, String name) {
    SNode p = SModelSearchUtil.findPropertyDeclaration(thisNode, name);
    return SNodeOperations.cast(p, "jetbrains.mps.lang.structure.structure.PropertyDeclaration");
  }

  public static List<SNode> call_getConceptLinkDeclarations_1213877394578(SNode thisNode) {
    return (List<SNode>) IterableUtil.asList(SModelSearchUtil.getConceptLinkDeclarations(thisNode));
  }

  public static SNode call_specializeLink_4304720797559012132(SNode thisNode, SNode link, SNode targetConcept) {
    if (ListSequence.fromList(AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(thisNode)).contains(link) && !(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "linkDeclaration", true)).contains(link))) {
      for (SNode linkDeclarationOfMine : SLinkOperations.getTargets(thisNode, "linkDeclaration", true)) {
        if (SLinkOperations.getTarget(linkDeclarationOfMine, "specializedLink", false) == link) {
          return null;
        }
      }
      if (SConceptOperations.isSuperConceptOf(SLinkOperations.getTarget(link, "target", false), NameUtil.nodeFQName(targetConcept))) {
        SNode result = SLinkOperations.addNewChild(thisNode, "linkDeclaration", "jetbrains.mps.lang.structure.structure.LinkDeclaration");
        SLinkOperations.setTarget(result, "target", targetConcept, false);
        SLinkOperations.setTarget(result, "specializedLink", link, false);
        SPropertyOperations.set(result, "metaClass", SPropertyOperations.getString_def(link, "metaClass", "reference"));
        SPropertyOperations.set(result, "role", SPropertyOperations.getString(link, "role"));
        return result;
      }
    }
    return null;
  }

  public static boolean call_isDefaultSubstitutable_7429110134803670673(SNode thisNode) {
    return !(SPropertyOperations.getBoolean(thisNode, "abstract")) && !(SConceptOperations.isSubConceptOf(((SNode) thisNode), "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"));
  }

  public static boolean call_isDefaultSubstitutableConcept_1213877394594(SNode thisNode, SNode expectedConcept) {
    if (AbstractConceptDeclaration_Behavior.call_isDefaultSubstitutable_7429110134803670673(thisNode)) {
      return SConceptOperations.isSuperConceptOf(expectedConcept, NameUtil.nodeFQName(thisNode));
    }
    return false;
  }

  public static Iterable<SNode> call_getAllSuperConcepts_2992811758677902956(SNode thisNode, boolean includeSelf) {
    Set<SNode> concepts = SetSequence.fromSet(new LinkedHashSet<SNode>());
    AbstractConceptDeclaration_Behavior.call_collectSuperConcepts_2992811758677933293(thisNode, thisNode, concepts);
    if (!(includeSelf)) {
      SetSequence.fromSet(concepts).removeElement(thisNode);
    }
    return concepts;
  }

  public static void call_collectSuperConcepts_2992811758677933293(SNode thisNode, SNode concept, Set<SNode> result) {
    if (SetSequence.fromSet(result).contains(concept) || (concept == null)) {
      return;
    }
    SetSequence.fromSet(result).addElement(concept);
    for (SNode superConcept : ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), concept, "virtual_getImmediateSuperconcepts_1222430305282", new Object[]{}))) {
      AbstractConceptDeclaration_Behavior.call_collectSuperConcepts_2992811758677933293(thisNode, superConcept, result);
    }
  }

  public static SNode call_computeInHierarchy_4184580446578561998(SNode thisNode, _FunctionTypes._return_P1_E0<? extends SNode, ? super SNode> predicate) {
    // todo: comment method!, use generics 
    SNode result = predicate.invoke(thisNode);
    if (result != null) {
      return result;
    }

    for (SNode superconcept : ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), thisNode, "virtual_getImmediateSuperconcepts_1222430305282", new Object[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (it != null);
      }
    })) {
      SNode superconceptResult = AbstractConceptDeclaration_Behavior.call_computeInHierarchy_4184580446578561998(superconcept, predicate);
      if (superconceptResult != null) {
        return superconceptResult;
      }
    }

    return null;
  }

  public static Pair<Set<SNode>, Set<SNode>> call_getInLanguageAndNotInLanguageAncestors_5846203010383875248(SNode thisNode) {
    // todo: use tuple 
    Set<SNode> inLanguageAncestors = SetSequence.fromSet(new HashSet<SNode>());
    Set<SNode> notInLanguageAncestors = SetSequence.fromSet(new HashSet<SNode>());

    for (SNode superconcept : BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), thisNode, "virtual_getImmediateSuperconcepts_1222430305282", new Object[]{})) {
      if ((superconcept != null)) {
        if (SNodeOperations.getModel(superconcept) == SNodeOperations.getModel(thisNode)) {
          Pair<Set<SNode>, Set<SNode>> superconceptResult = AbstractConceptDeclaration_Behavior.call_getInLanguageAndNotInLanguageAncestors_5846203010383875248(superconcept);
          SetSequence.fromSet(inLanguageAncestors).addElement(superconcept);

          SetSequence.fromSet(inLanguageAncestors).addSequence(SetSequence.fromSet(superconceptResult.o1));
          SetSequence.fromSet(notInLanguageAncestors).addSequence(SetSequence.fromSet(superconceptResult.o2));
        } else {
          // other language 
          SetSequence.fromSet(notInLanguageAncestors).addElement(superconcept);
        }
      }
    }

    return new Pair(inLanguageAncestors, notInLanguageAncestors);
  }
}
