package jetbrains.mps.lang.structure.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import jetbrains.mps.logging.Logger;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IScope;
import java.util.List;
import jetbrains.mps.progress.ProgressMonitor;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.findUsages.FindUsagesManager;
import jetbrains.mps.findUsages.SearchType;

public class NodeAndDescendantsUsages_Finder extends GeneratedFinder {
  private static Logger LOG = Logger.getLogger("jetbrains.mps.lang.structure.findUsages.NodeAndDescendantsUsages_Finder");

  public NodeAndDescendantsUsages_Finder() {
  }

  public String getDescription() {
    return "Node & Descendants Usages";
  }

  public String getLongDescription() {
    return "";
  }

  public String getConcept() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }

  protected void doFind(SNode node, IScope scope, List<SNode> _results, ProgressMonitor monitor) {
    monitor.start(getDescription(), 0);
    try {
      Set<org.jetbrains.mps.openapi.model.SNode> nodes = SetSequence.fromSet(new HashSet<org.jetbrains.mps.openapi.model.SNode>());
      SetSequence.fromSet(nodes).addElement(node);
      for (SNode child : ListSequence.fromList(SNodeOperations.getDescendants(node, null, false, new String[]{}))) {
        SetSequence.fromSet(nodes).addElement(child);
      }
      // 
      Set<SReference> resRefs = FindUsagesManager.getInstance().findUsages(nodes, SearchType.USAGES, scope, monitor);
      for (SReference reference : resRefs) {
        SNode snode = ((SNode) reference.getSourceNode());
        if (!(SetSequence.fromSet(nodes).contains(snode))) {
          ListSequence.fromList(_results).addElement(snode);
        }
      }
    } finally {
      monitor.done();
    }
  }

  public void getSearchedNodes(SNode node, IScope scope, List<SNode> _results) {
    ListSequence.fromList(_results).addElement(node);
  }

  public String getNodeCategory(SNode node) {
    return "Node Descendants Usages";
  }
}
