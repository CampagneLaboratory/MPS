package jetbrains.mps.lang.structure.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SearchScope;
import java.util.List;
import jetbrains.mps.progress.ProgressMonitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.findusages.view.FindUtils;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class PropertyInstances_Finder extends GeneratedFinder {
  private static Logger LOG = LogManager.getLogger("jetbrains.mps.lang.structure.findUsages.PropertyInstances_Finder");

  public PropertyInstances_Finder() {
  }

  @Override
  public String getDescription() {
    return "Property Instances";
  }

  @Override
  public String getLongDescription() {
    return "";
  }

  @Override
  public String getConcept() {
    return "jetbrains.mps.lang.structure.structure.PropertyDeclaration";
  }

  @Override
  protected void doFind(SNode node, SearchScope scope, List<SNode> _results, ProgressMonitor monitor) {
    try {
      String role = SPropertyOperations.getString(node, "name");
      SNode conceptDeclaration = SNodeOperations.getAncestor(node, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", false, false);
      if (!((conceptDeclaration == null))) {
        for (SNode instance : FindUtils.executeFinder("jetbrains.mps.lang.structure.findUsages.ConceptInstances_Finder", conceptDeclaration, scope, monitor)) {
          String property = SNodeAccessUtil.getProperty(instance, role);
          if (property != null && !(property.equals(""))) {
            ListSequence.fromList(_results).addElement(instance);
          }
        }
      }
    } finally {
      monitor.done();
    }
  }

  @Override
  public String getNodeCategory(SNode node) {
    return "Property Instances";
  }
}
