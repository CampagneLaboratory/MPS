package jetbrains.mps.lang.structure.scripts;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.baseLanguage.behavior.BaseMethodDeclaration_Behavior;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MigratedToBehaviorMethodsAttributeUtil {
  public static SNode extractInfo(SNode attributeDeclaration) {
    SNode info = SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.AttributeInfo", null);
    SPropertyOperations.set(info, "role", "");

    SNode behavior = SNodeOperations.as(AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(attributeDeclaration, LanguageAspect.BEHAVIOR), "jetbrains.mps.lang.behavior.structure.ConceptBehavior");
    if ((behavior == null)) {
      return info;
    }

    SNode multipleImpl = findImplementation(behavior, SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590282(jetbrains.mps.lang.core.behavior)", "1262430001741497972"));
    if (ListSequence.fromList(SNodeOperations.getDescendants(multipleImpl, "jetbrains.mps.baseLanguage.structure.BooleanConstant", false, new String[]{})).isNotEmpty()) {
      SLinkOperations.setTarget(info, "multiple", SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.AttributeInfo_IsMultiple", null), true);
      SPropertyOperations.set(SLinkOperations.getTarget(info, "multiple", true), "value", "" + (SPropertyOperations.getBoolean(ListSequence.fromList(SNodeOperations.getDescendants(multipleImpl, "jetbrains.mps.baseLanguage.structure.BooleanConstant", false, new String[]{})).first(), "value")));
    }

    SNode roleImpl = findImplementation(behavior, SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590282(jetbrains.mps.lang.core.behavior)", "1262430001741497900"));
    if (ListSequence.fromList(SNodeOperations.getDescendants(roleImpl, "jetbrains.mps.baseLanguage.structure.StringLiteral", false, new String[]{})).isNotEmpty()) {
      SPropertyOperations.set(info, "role", SPropertyOperations.getString(ListSequence.fromList(SNodeOperations.getDescendants(roleImpl, "jetbrains.mps.baseLanguage.structure.StringLiteral", false, new String[]{})).first(), "value"));
    }

    SNode attributedImpl = findImplementation(behavior, SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590282(jetbrains.mps.lang.core.behavior)", "3044950653914717013"));
    for (SNode conceptDecl : ListSequence.fromList(SNodeOperations.getDescendants(attributedImpl, "jetbrains.mps.lang.smodel.structure.NodeRefExpression", false, new String[]{})).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(SLinkOperations.getTarget(it, "referentNode", false), "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration");
      }
    })) {
      ListSequence.fromList(SLinkOperations.getTargets(info, "attributed", true)).addElement(createConceptReference_1yrhux_a0a0a31a0(conceptDecl));
    }

    return info;
  }



  public static void removeOldBehaviorMethods(SNode attributeDeclaration) {
    SNode behavior = SNodeOperations.as(AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(attributeDeclaration, LanguageAspect.BEHAVIOR), "jetbrains.mps.lang.behavior.structure.ConceptBehavior");
    if ((behavior == null)) {
      return;
    }

    SNodeOperations.deleteNode(findImplementation(behavior, SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590282(jetbrains.mps.lang.core.behavior)", "1262430001741497972")));
    SNodeOperations.deleteNode(findImplementation(behavior, SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590282(jetbrains.mps.lang.core.behavior)", "1262430001741497900")));
    SNodeOperations.deleteNode(findImplementation(behavior, SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590282(jetbrains.mps.lang.core.behavior)", "3044950653914717013")));
  }



  private static SNode findImplementation(SNode attributeBehavior, SNode baseMethod) {
    for (SNode method : ListSequence.fromList(SLinkOperations.getTargets(attributeBehavior, "method", true))) {
      if (BaseMethodDeclaration_Behavior.call_getBaseMethod_5014346297260519893(method) == baseMethod || method == baseMethod) {
        return method;
      }
    }
    return null;
  }

  private static SNode createConceptReference_1yrhux_a0a0a31a0(Object p0) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.ConceptReference", null, GlobalScope.getInstance(), false);
    n1.setReferenceTarget("concept", (SNode) p0);
    return n1;
  }
}
