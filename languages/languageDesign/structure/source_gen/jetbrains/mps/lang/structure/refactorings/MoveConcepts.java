package jetbrains.mps.lang.structure.refactorings;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.BaseLoggableRefactoring;
import jetbrains.mps.refactoring.framework.IRefactoringTarget;
import jetbrains.mps.lang.core.refactorings.MoveNodes;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.SModelRepository;
import org.jetbrains.mps.openapi.model.SModelReference;
import java.util.Map;
import jetbrains.mps.smodel.LanguageAspect;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.ArrayList;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.refactoring.framework.RefactoringUtil;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.project.GlobalScope;

public class MoveConcepts extends BaseLoggableRefactoring {
  public MoveConcepts() {
    this.addTransientParameter("targetModel");
    this.addTransientParameter("sourceModel");
    this.addTransientParameter("sourceLanguage");
  }
  public IRefactoringTarget getRefactoringTarget() {
    return new MoveConcepts_Target();
  }
  public String getUserFriendlyName() {
    return "Move Concepts";
  }
  public Class getOverridenRefactoringClass() {
    return MoveNodes.class;
  }
  public boolean init(final RefactoringContext refactoringContext) {
    refactoringContext.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        SModel model = SNodeOperations.getModel(ListSequence.fromList(refactoringContext.getSelectedNodes()).first());
        refactoringContext.setParameter("sourceModel", model);
        refactoringContext.setParameter("sourceLanguage", Language.getLanguageFor(((SModel) refactoringContext.getParameter("sourceModel"))));
      }
    });
    return true;
  }
  public void refactor(final RefactoringContext refactoringContext) {
    Language targetLanguage = Language.getLanguageFor(SModelRepository.getInstance().getModelDescriptor(((SModelReference) refactoringContext.getParameter("targetModel"))));

    // collect aspects: 
    Map<LanguageAspect, List<SNode>> aspectNodes = ConceptMoveUtil.getAspectNodes(((Language) refactoringContext.getParameter("sourceLanguage")), refactoringContext.getSelectedNodes());

    // calculate new "extends" dependencies 
    Iterable<SNode> targExtends = ListSequence.fromList(refactoringContext.getSelectedNodes()).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SConceptOperations.getDirectSuperConcepts(it, false);
      }
    }).subtract(ListSequence.fromList(refactoringContext.getSelectedNodes()));
    List<SModuleReference> targetExtends = Sequence.fromIterable(targExtends).select(new ISelector<SNode, SModel>() {
      public SModel select(SNode it) {
        return SNodeOperations.getModel(it);
      }
    }).distinct().select(new ISelector<SModel, SModuleReference>() {
      public SModuleReference select(SModel it) {
        return check_u6ijv2_a0a0a0a0a7a0(Language.getLanguageFor(it));
      }
    }).where(new IWhereFilter<SModuleReference>() {
      public boolean accept(SModuleReference it) {
        return it != null;
      }
    }).toListSequence();
    SModel srcModel = ((SModel) refactoringContext.getParameter("sourceModel"));
    boolean isSourceExtends = ListSequence.fromList(SModelOperations.getRoots(srcModel, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")).subtract(ListSequence.fromList(refactoringContext.getSelectedNodes())).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SConceptOperations.getDirectSuperConcepts(it, false);
      }
    }).intersect(ListSequence.fromList(refactoringContext.getSelectedNodes())).isNotEmpty();

    // refactoring itself 
    for (SNode node : refactoringContext.getSelectedNodes()) {
      refactoringContext.changeFeatureName(node, ((SModelReference) refactoringContext.getParameter("targetModel")).getModelName() + "." + SPropertyOperations.getString(node, "name"), SPropertyOperations.getString(node, "name"));
    }
    refactoringContext.moveNodesToModel(refactoringContext.getSelectedNodes(), SModelRepository.getInstance().getModelDescriptor(((SModelReference) refactoringContext.getParameter("targetModel"))));
    // move aspects 
    for (LanguageAspect aspect : SetSequence.fromSet(MapSequence.fromMap(aspectNodes).keySet())) {
      SModel fromModel = aspect.get(((Language) refactoringContext.getParameter("sourceLanguage")));
      SModel toModel = aspect.getOrCreate(targetLanguage);
      refactoringContext.updateByDefault(fromModel);
      refactoringContext.moveNodesToModel(MapSequence.fromMap(aspectNodes).get(aspect), toModel);
      refactoringContext.updateByDefault(toModel);
    }
    // set new "extends" dependencies for languages if necessary 
    if (isSourceExtends) {
      ((Language) refactoringContext.getParameter("sourceLanguage")).addExtendedLanguage(targetLanguage.getModuleReference());
    }
    for (SModuleReference ext : ListSequence.fromList(targetExtends)) {
      targetLanguage.addExtendedLanguage(ext);
    }
  }
  public List<SModel> getModelsToGenerate(final RefactoringContext refactoringContext) {
    List<SModel> result = ListSequence.fromList(new ArrayList<SModel>());

    Project project = refactoringContext.getSelectedProject();
    if (((Language) refactoringContext.getParameter("sourceLanguage")) != null) {
      Map<SModule, List<SModel>> models = RefactoringUtil.getLanguageAndItsExtendingLanguageModels(project, ((Language) refactoringContext.getParameter("sourceLanguage")));
      for (List<SModel> list : CollectionSequence.fromCollection(models.values())) {
        ListSequence.fromList(result).addSequence(ListSequence.fromList((List<SModel>) list));
      }
    }
    Language targetLanguage = Language.getLanguageFor(SModelRepository.getInstance().getModelDescriptor(((SModelReference) refactoringContext.getParameter("targetModel"))));
    if (targetLanguage != null) {
      Map<SModule, List<SModel>> models = RefactoringUtil.getLanguageAndItsExtendingLanguageModels(project, targetLanguage);
      for (List<SModel> list : CollectionSequence.fromCollection(models.values())) {
        ListSequence.fromList(result).addSequence(ListSequence.fromList((List<SModel>) list));
      }
    }
    return result;
  }
  public SearchResults getAffectedNodes(final RefactoringContext refactoringContext) {
    SearchResults searchResults = new SearchResults();
    for (SNode selNode : ListSequence.fromList(refactoringContext.getSelectedNodes())) {
      searchResults.addAll(FindUtils.getSearchResults(new EmptyProgressMonitor(), selNode, GlobalScope.getInstance(), "jetbrains.mps.lang.structure.findUsages.ConceptInstances_Finder", "jetbrains.mps.lang.structure.findUsages.NodeAndDescendantsUsages_Finder"));
    }
    Map<LanguageAspect, List<SNode>> aspectNodes = ConceptMoveUtil.getAspectNodes(((Language) refactoringContext.getParameter("sourceLanguage")), refactoringContext.getSelectedNodes());
    for (SNode node : Sequence.fromIterable(MapSequence.fromMap(aspectNodes).values()).translate(new ITranslator2<List<SNode>, SNode>() {
      public Iterable<SNode> translate(List<SNode> it) {
        return it;
      }
    })) {
      searchResults.addAll(FindUtils.getSearchResults(new EmptyProgressMonitor(), node, GlobalScope.getInstance(), "jetbrains.mps.lang.structure.findUsages.NodeAndDescendantsUsages_Finder"));
    }
    return searchResults;
  }
  public void updateModel(final SModel model, final RefactoringContext refactoringContext) {
    refactoringContext.updateByDefault(model);
  }
  private static SModuleReference check_u6ijv2_a0a0a0a0a7a0(Language checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModuleReference();
    }
    return null;
  }
}
