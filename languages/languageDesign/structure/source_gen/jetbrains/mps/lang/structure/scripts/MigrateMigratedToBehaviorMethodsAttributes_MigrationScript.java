package jetbrains.mps.lang.structure.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.structure.typesystem.AttributeUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class MigrateMigratedToBehaviorMethodsAttributes_MigrationScript extends BaseMigrationScript {
  public MigrateMigratedToBehaviorMethodsAttributes_MigrationScript(IOperationContext operationContext) {
    super("Migrate already migrated to behavior methods attributes");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Migrate attribute concept declarations";
      }

      public String getAdditionalInfo() {
        return "Migrate attribute concept declarations";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.structure.structure.ConceptDeclaration";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return AttributeUtils.isApplicableAttribute(node) && (AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AttributeInfo"))) == null);
      }

      public void doUpdateInstanceNode(SNode node) {
        AttributeOperations.setAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AttributeInfo")), MigratedToBehaviorMethodsAttributeUtil.extractInfo(node));
        // todo: enable 
        if (false) {
          MigratedToBehaviorMethodsAttributeUtil.removeOldBehaviorMethods(node);
        }
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
}
