package jetbrains.mps.lang.structure.plugin;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.core.behavior.PropertyAttribute_Behavior;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.lang.core.behavior.LinkAttribute_Behavior;

public class RefactoringRuntime {

  public static void refactorPropertyInstance(SNode node, final SProperty oldProp, final SProperty newProp) {
    Iterable<SNode> children = (Iterable<SNode>) node.getChildren(MetaAdapterFactory.getContainmentLink(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x47bf8397520e5942L, "smodelAttribute"));
    Sequence.fromIterable(SNodeOperations.ofConcept(children, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da56L, "jetbrains.mps.lang.core.structure.PropertyAttribute"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return PropertyAttribute_Behavior.call_getProperty_1341860900488756504(it).equals(oldProp);
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        PropertyAttribute_Behavior.call_setProperty_7714691473529670203(it, newProp);
      }
    });

    String value = node.getProperty(oldProp);
    node.setProperty(newProp, value);
    node.setProperty(oldProp, null);
  }

  public static void refactorContainmentLinkInstance(SNode node, SContainmentLink oldLink, SContainmentLink newLink) {
    List<SNode> children = ListSequence.fromListWithValues(new ArrayList<SNode>(), (Iterable<SNode>) node.getChildren(oldLink));
    for (SNode child : ListSequence.fromList(children)) {
      node.removeChild(child);
      node.addChild(newLink, child);
    }
  }

  public static void refactorReferenceLinkInstances(SNode node, final SReferenceLink oldLink, final SReferenceLink newLink) {
    Iterable<SNode> children = (Iterable<SNode>) node.getChildren(MetaAdapterFactory.getContainmentLink(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x47bf8397520e5942L, "smodelAttribute"));
    Sequence.fromIterable(SNodeOperations.ofConcept(children, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da51L, "jetbrains.mps.lang.core.structure.LinkAttribute"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return LinkAttribute_Behavior.call_getLink_1341860900489573894(it).equals(oldLink);
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        LinkAttribute_Behavior.call_setLink_7714691473529772139(it, newLink);
      }
    });

    SNode referenceTarget = node.getReferenceTarget(oldLink);
    node.setReferenceTarget(newLink, referenceTarget);
    node.setReferenceTarget(oldLink, null);
  }



}
