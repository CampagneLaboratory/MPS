package jetbrains.mps.lang.structure.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SearchScope;
import java.util.List;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import java.util.Set;
import org.jetbrains.mps.openapi.model.SReference;
import org.jetbrains.mps.openapi.module.FindUsagesFacade;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class NodeUsages_Finder extends GeneratedFinder {
  private static Logger LOG = LogManager.getLogger("jetbrains.mps.lang.structure.findUsages.NodeUsages_Finder");

  public NodeUsages_Finder() {
  }

  @Override
  public boolean isUsedByDefault(SNode node) {
    return true;
  }

  @Override
  public String getDescription() {
    return "Node Usages";
  }

  @Override
  public String getLongDescription() {
    return "";
  }

  @Override
  public String getConcept() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }

  @Override
  protected void doFind(SNode node, SearchScope scope, List<SNode> _results, ProgressMonitor monitor) {
    try {
      Set<SReference> resRefs = FindUsagesFacade.getInstance().findUsages(scope, Collections.<SNode>singleton(node), monitor);
      for (SReference reference : resRefs) {
        ListSequence.fromList(_results).addElement(((SNode) reference.getSourceNode()));
      }
    } finally {
      monitor.done();
    }
  }

  @Override
  public String getNodeCategory(SNode node) {
    return "Node Usages";
  }
}
