package jetbrains.mps.lang.structure.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;

public class AttributeDesignTimeOperations {
  public static boolean isAttributeDeclaration(SNode conceptDeclaration) {
    return Sequence.fromIterable(AbstractConceptDeclaration_Behavior.call_getAllSuperConcepts_2992811758677902956(conceptDeclaration, true)).contains(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "5169995583184591161"));
  }

  public static boolean isMultipleAttribute(SNode attributeDeclaration) {
    if (!(isAttributeDeclaration(attributeDeclaration))) {
      return false;
    }
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(AttributeOperations.getAttribute(Sequence.fromIterable(getSuperAttributes(attributeDeclaration)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AttributeInfo"))), "multiple", true) != null);
      }
    }), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AttributeInfo"))), "multiple", true), "value");
  }

  @Nullable
  public static String getAttributeRole(SNode attributeDeclaration) {
    if (!(isAttributeDeclaration(attributeDeclaration))) {
      return null;
    }
    return SPropertyOperations.getString(AttributeOperations.getAttribute(Sequence.fromIterable(getSuperAttributes(attributeDeclaration)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return isNotEmpty_ripaa1_a0a0a0a0a0a0b0c(SPropertyOperations.getString(AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AttributeInfo"))), "role"));
      }
    }), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AttributeInfo"))), "role");
  }

  public static Iterable<SNode> getApplicableConcepts(SNode attributeDeclaration) {
    if (!(isAttributeDeclaration(attributeDeclaration))) {
      return null;
    }
    return Sequence.fromIterable(getSuperAttributes(attributeDeclaration)).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return ListSequence.fromList(SLinkOperations.getTargets(AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AttributeInfo"))), "attributed", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return (SLinkOperations.getTarget(it, "concept", false) != null);
          }
        }).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SLinkOperations.getTarget(it, "concept", false);
          }
        });
      }
    }).distinct().where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (it != null);
      }
    });
  }

  private static Iterable<SNode> getSuperAttributes(SNode attributeDeclaration) {
    Set<SNode> attributes = SetSequence.fromSet(new LinkedHashSet<SNode>());
    while (!(SetSequence.fromSet(attributes).contains(attributeDeclaration))) {
      SetSequence.fromSet(attributes).addElement(attributeDeclaration);
      attributeDeclaration = SLinkOperations.getTarget(attributeDeclaration, "extends", false);
    }
    // ??? 
    SetSequence.fromSet(attributes).addElement(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "5169995583184591161"));
    return attributes;
  }

  public static boolean isNotEmpty_ripaa1_a0a0a0a0a0a0b0c(String str) {
    return str != null && str.length() > 0;
  }
}
