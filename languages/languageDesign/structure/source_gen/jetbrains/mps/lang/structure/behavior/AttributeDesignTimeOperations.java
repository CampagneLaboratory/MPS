package jetbrains.mps.lang.structure.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.behavior.AttributeAccess_Behavior;
import jetbrains.mps.lang.structure.constraints.ConceptsScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Set;
import java.util.LinkedHashSet;

public class AttributeDesignTimeOperations {
  public static Iterable<SNode> getApplicableAttributes(SNode accessNode, final SNode attributeType) {
    // todo: should be node<ACD> 
    final SNode nodeConcept = SLinkOperations.getTarget(AttributeAccess_Behavior.call_getAttributeContainerType_6960953357954139822(accessNode), "concept", false);
    if ((nodeConcept == null)) {
      return null;
    }
    ConceptsScope conceptsScope = new ConceptsScope(accessNode, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.ConceptDeclaration"));
    return Sequence.fromIterable(conceptsScope.getAvailableElements(null)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(it, "jetbrains.mps.lang.structure.structure.ConceptDeclaration");
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SetSequence.fromSet(getSuperConcepts(it)).contains(attributeType);
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        // todo: why not getAttributeRole? 
        return isNotEmpty_ripaa1_a0a1a0a0a0a4a0(SPropertyOperations.getString(AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.structure.structure.AttributeInfo")), "role")) && Sequence.fromIterable(getApplicableConcepts(it)).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SConceptOperations.isSubConceptOf(nodeConcept, NameUtil.nodeFQName(it));
          }
        });
      }
    });
  }

  public static boolean isAttributeDeclaration(SNode conceptDeclaration) {
    return SetSequence.fromSet(getSuperConcepts(conceptDeclaration)).contains(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "5169995583184591161"));
  }

  public static boolean isMultipleAttribute(SNode attributeDeclaration) {
    if (!(isAttributeDeclaration(attributeDeclaration))) {
      return false;
    }
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(AttributeOperations.getAttribute(SetSequence.fromSet(getSuperConcepts(attributeDeclaration)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.structure.structure.AttributeInfo")), "multiple", true) != null);
      }
    }), new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.structure.structure.AttributeInfo")), "multiple", true), "value");
  }

  @Nullable
  public static String getAttributeRole(SNode attributeDeclaration) {
    if (!(isAttributeDeclaration(attributeDeclaration))) {
      return null;
    }
    return SPropertyOperations.getString(AttributeOperations.getAttribute(SetSequence.fromSet(getSuperConcepts(attributeDeclaration)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return isNotEmpty_ripaa1_a0a0a0a0a0a0b0d(SPropertyOperations.getString(AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.structure.structure.AttributeInfo")), "role"));
      }
    }), new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.structure.structure.AttributeInfo")), "role");
  }

  public static Iterable<SNode> getApplicableConcepts(SNode attributeDeclaration) {
    if (!(isAttributeDeclaration(attributeDeclaration))) {
      return null;
    }
    return SetSequence.fromSet(getSuperConcepts(attributeDeclaration)).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return ListSequence.fromList(SLinkOperations.getTargets(AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.structure.structure.AttributeInfo")), "attributed", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return (SLinkOperations.getTarget(it, "concept", false) != null);
          }
        }).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SLinkOperations.getTarget(it, "concept", false);
          }
        });
      }
    }).distinct().where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (it != null);
      }
    });
  }



  private static Set<SNode> getSuperConcepts(SNode conceptDeclaration) {
    Set<SNode> concepts = SetSequence.fromSet(new LinkedHashSet<SNode>());
    while ((conceptDeclaration != null) && !(SetSequence.fromSet(concepts).contains(conceptDeclaration))) {
      SetSequence.fromSet(concepts).addElement(conceptDeclaration);
      conceptDeclaration = SLinkOperations.getTarget(conceptDeclaration, "extends", false);
    }
    return concepts;
  }

  public static boolean isNotEmpty_ripaa1_a0a1a0a0a0a4a0(String str) {
    return str != null && str.length() > 0;
  }

  public static boolean isNotEmpty_ripaa1_a0a0a0a0a0a0b0d(String str) {
    return str != null && str.length() > 0;
  }
}
