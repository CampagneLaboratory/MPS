package jetbrains.mps.lang.structure.constraints;

/*Generated by MPS */

import jetbrains.mps.lang.scopes.runtime.SimpleScope;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SModule;
import java.util.Set;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.project.dependency.GlobalModuleDependenciesManager;
import java.util.Collection;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.NameUtil;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class ConceptsScope extends SimpleScope {
  public ConceptsScope(SNode contextNode, SNode metaConcept) {
    // todo: make better name for this scope 
    super(getAvailableConcepts(contextNode, metaConcept));
  }
  public static Iterable<SNode> getAvailableConcepts(SNode contextNode, final SNode metaConcept) {
    SModule contextModule = contextNode.getModel().getModule();

    Set<Language> contextLanguages = SetSequence.fromSet(new HashSet<Language>());
    for (SModule module : CollectionSequence.fromCollection(new GlobalModuleDependenciesManager(contextModule).getModules(GlobalModuleDependenciesManager.Deptype.VISIBLE))) {
      if (module instanceof Language) {
        SetSequence.fromSet(contextLanguages).addElement((Language) module);
      }
    }
    Collection<Language> usedLanguages = new GlobalModuleDependenciesManager(contextModule).getUsedLanguages();

    Iterable<SModel> strucModels = SetSequence.fromSet(contextLanguages).select(new ISelector<Language, SModel>() {
      public SModel select(Language it) {
        return it.getStructureModelDescriptor();
      }
    }).union(CollectionSequence.fromCollection(usedLanguages).translate(new ITranslator2<Language, SModel>() {
      public Iterable<SModel> translate(Language it) {
        return it.getAccessoryModels();
      }
    }).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return LanguageAspect.STRUCTURE.is(it);
      }
    })).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return it != null;
      }
    });

    return Sequence.fromIterable(strucModels).translate(new ITranslator2<SModel, SNode>() {
      public Iterable<SNode> translate(SModel it) {
        return (Iterable<SNode>) it.getRootNodes();
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, NameUtil.nodeFQName(metaConcept));
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(it, "jetbrains.mps.lang.core.structure.INamedConcept");
      }
    });
  }
  @Nullable
  @Override
  public String getReferenceText(@NotNull SNode target) {
    return BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(target, "jetbrains.mps.lang.core.structure.INamedConcept"), "virtual_getFqName_1213877404258", new Object[]{});
  }
}
