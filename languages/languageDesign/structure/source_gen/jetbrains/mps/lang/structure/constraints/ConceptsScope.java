package jetbrains.mps.lang.structure.constraints;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import java.util.Set;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class ConceptsScope extends Scope {
  private SModule contextModule;
  private SNode metaConcept;

  public ConceptsScope(SNode contextNode, SNode metaConcept) {
    contextModule = contextNode.getModel().getModelDescriptor().getModule();
    this.metaConcept = metaConcept;
  }

  public Iterable<SNode> getAvailableElements(@Nullable final String prefix) {
    Set<Language> contextLanguages = SetSequence.fromSet(new HashSet<Language>());
    for (SModule module : Sequence.fromIterable(contextModule.getModuleScope().getModules())) {
      if (module instanceof Language) {
        SetSequence.fromSet(contextLanguages).addElement((Language) module);
      }
    }
    Iterable<SNode> concepts = SetSequence.fromSet(contextLanguages).select(new ISelector<Language, SModelDescriptor>() {
      public SModelDescriptor select(Language it) {
        return it.getStructureModelDescriptor();
      }
    }).where(new IWhereFilter<SModelDescriptor>() {
      public boolean accept(SModelDescriptor it) {
        return it != null;
      }
    }).translate(new ITranslator2<SModelDescriptor, SNode>() {
      public Iterable<SNode> translate(SModelDescriptor it) {
        return (Iterable<SNode>) it.getRootNodes();
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, NameUtil.nodeFQName(metaConcept));
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(it, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration");
      }
    });
    if (prefix != null) {
      return Sequence.fromIterable(concepts).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getString(it, "name").startsWith(prefix);
        }
      });
    } else {
      return concepts;
    }
  }

  @Nullable
  public SNode resolve(SNode contextNode, @NotNull final String refText) {
    return Sequence.fromIterable(getAvailableElements(refText.substring(refText.lastIndexOf("." + 1)))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return refText.equals(BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(it, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"), "virtual_getFqName_1213877404258", new Object[]{}));
      }
    }).first();
  }

  @Nullable
  public String getReferenceText(SNode contextNode, @NotNull SNode node) {
    return BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(node, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"), "virtual_getFqName_1213877404258", new Object[]{});
  }
}
