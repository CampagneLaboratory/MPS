package jetbrains.mps.lang.structure.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.model.SNodeId;

public class ConceptIdUtil {
  public static int generate(SNode c, SModel m) {
    Set<Integer> existingIds = SetSequence.fromSetWithValues(new HashSet<Integer>(), ListSequence.fromList(SModelOperations.roots(m, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))).select(new ISelector<SNode, Integer>() {
      public Integer select(SNode it) {
        return SPropertyOperations.getInteger(it, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x16096a174f259419L, "conceptId"));
      }
    }));
    int generated = ConceptIdUtil.getNewId(c);
    while (true) {
      if (generated != 0 && !(SetSequence.fromSet(existingIds).contains(generated))) {
        return generated;
      }
      generated = ((int) (Math.random() * Integer.MAX_VALUE));
    }
  }

  public static int getNewId(SNode c) {
    int generated = 0;
    if (c instanceof jetbrains.mps.smodel.SNode) {
      SNodeId id = ((jetbrains.mps.smodel.SNode) c).getNodeId();
      if (id instanceof jetbrains.mps.smodel.SNodeId.Regular) {
        long longId = ((jetbrains.mps.smodel.SNodeId.Regular) id).getId();
        generated = ConceptIdUtil.getNewIdByOldId(longId);
      }
    }
    return generated;
  }

  public static int getNewIdByOldId(long longId) {
    return Math.abs(((int) longId) + ((int) (longId / (((long) Integer.MAX_VALUE) + 1))));
  }
}
