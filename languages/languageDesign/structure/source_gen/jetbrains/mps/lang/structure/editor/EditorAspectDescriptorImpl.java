package jetbrains.mps.lang.structure.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {


  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0b, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AggregationConceptLink_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AggregationConceptLinkDeclaration_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AttributeInfo_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new AttributeInfo_AttributedConcept_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new AttributeInfo_IsMultiple_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new ConceptDeclaration_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new ConceptLink_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new ConceptLinkDeclaration_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new ConstrainedDataTypeDeclaration_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new DeprecatedNodeAnnotation_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new EnumerationDataTypeDeclaration_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new EnumerationMemberDeclaration_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new InterfaceConceptDeclaration_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new InterfaceConceptReference_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new LinkDeclaration_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new PrimitiveDataTypeDeclaration_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new PropertyDeclaration_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    return Collections.<ConceptEditorComponent>emptyList();
  }



  private static String[] stringSwitchCases_xbvbvu_a0a0b = new String[]{"jetbrains.mps.lang.structure.structure.AggregationConceptLink", "jetbrains.mps.lang.structure.structure.AggregationConceptLinkDeclaration", "jetbrains.mps.lang.structure.structure.AttributeInfo", "jetbrains.mps.lang.structure.structure.AttributeInfo_AttributedConcept", "jetbrains.mps.lang.structure.structure.AttributeInfo_IsMultiple", "jetbrains.mps.lang.structure.structure.ConceptDeclaration", "jetbrains.mps.lang.structure.structure.ConceptLink", "jetbrains.mps.lang.structure.structure.ConceptLinkDeclaration", "jetbrains.mps.lang.structure.structure.ConstrainedDataTypeDeclaration", "jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation", "jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration", "jetbrains.mps.lang.structure.structure.EnumerationMemberDeclaration", "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration", "jetbrains.mps.lang.structure.structure.InterfaceConceptReference", "jetbrains.mps.lang.structure.structure.LinkDeclaration", "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration", "jetbrains.mps.lang.structure.structure.PropertyDeclaration"};
}
