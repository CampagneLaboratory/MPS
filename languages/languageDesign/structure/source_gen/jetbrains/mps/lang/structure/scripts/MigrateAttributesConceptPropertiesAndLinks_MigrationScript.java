package jetbrains.mps.lang.structure.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.structure.behavior.AttributeDesignTimeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MigrateAttributesConceptPropertiesAndLinks_MigrationScript extends BaseMigrationScript {
  public MigrateAttributesConceptPropertiesAndLinks_MigrationScript(IOperationContext operationContext) {
    super("Migrate attributes concept properties and links");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Migrate attribute declarations";
      }

      public String getAdditionalInfo() {
        return "Migrate attribute declarations";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.structure.structure.ConceptDeclaration";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return AttributeDesignTimeOperations.isAttributeDeclaration(node) && (AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AttributeInfo"))) == null);
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode info = SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.AttributeInfo", null);
        SPropertyOperations.set(info, "role", "");

        SNode multiple = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getTargets(node, "conceptProperty", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SLinkOperations.getTarget(it, "conceptPropertyDeclaration", false) == SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "5169995583184591167");
          }
        }).first(), "jetbrains.mps.lang.structure.structure.BooleanConceptProperty");
        if ((multiple != null)) {
          SLinkOperations.setTarget(info, "multiple", SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.AttributeInfo_IsMultiple", null), true);
          SPropertyOperations.set(SLinkOperations.getTarget(info, "multiple", true), "value", "" + (true));
        }

        SNode role = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getTargets(node, "conceptProperty", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SLinkOperations.getTarget(it, "conceptPropertyDeclaration", false) == SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "5169995583184591164");
          }
        }).first(), "jetbrains.mps.lang.structure.structure.StringConceptProperty");
        if ((role != null)) {
          SPropertyOperations.set(info, "role", SPropertyOperations.getString(role, "value"));
        }

        Iterable<SNode> attributed = ListSequence.fromList(SLinkOperations.getTargets(node, "conceptLink", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SLinkOperations.getTarget(it, "conceptLinkDeclaration", false) == SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "5169995583184591169") && SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.structure.structure.ReferenceConceptLink");
          }
        }).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SNodeOperations.as(SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.lang.structure.structure.ReferenceConceptLink"), "target", false), "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration");
          }
        }).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return (it != null);
          }
        });
        for (SNode concept : Sequence.fromIterable(attributed)) {
          ListSequence.fromList(SLinkOperations.getTargets(info, "attributed", true)).addElement(createAttributeInfo_AttributedConcept_91cv71_a0a0a01a0a(concept));
        }

        AttributeOperations.setAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.AttributeInfo")), info);
        ListSequence.fromList(SLinkOperations.getTargets(node, "conceptProperty", true)).removeWhere(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "5169995583184591161"), "conceptPropertyDeclaration", true)).contains(SLinkOperations.getTarget(it, "conceptPropertyDeclaration", false));
          }
        });
        ListSequence.fromList(SLinkOperations.getTargets(node, "conceptLink", true)).removeWhere(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "5169995583184591161"), "conceptLinkDeclaration", true)).contains(SLinkOperations.getTarget(it, "conceptLinkDeclaration", false));
          }
        });
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }

  private static SNode createAttributeInfo_AttributedConcept_91cv71_a0a0a01a0a(Object p0) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.structure.structure.AttributeInfo_AttributedConcept", null, GlobalScope.getInstance(), false);
    n1.setReferenceTarget("concept", (SNode) p0);
    return n1;
  }
}
