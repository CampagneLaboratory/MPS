package jetbrains.mps.lang.structure.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractConceptDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.InterfacePart", "jetbrains.mps.lang.structure.structure.IStructureDeprecatable").properties("helpURL", "conceptAlias", "conceptShortDescription", "abstract", "final").children(new String[]{"linkDeclaration", "propertyDeclaration"}, new boolean[]{true, true}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptAggregationLinkDeclarationScopeKind = new ConceptDescriptorBuilder("jetbrains.mps.lang.structure.structure.AggregationLinkDeclarationScopeKind").interface_().create();
  /*package*/ final ConceptDescriptor myConceptAttributeInfo = new ConceptDescriptorBuilder("jetbrains.mps.lang.structure.structure.AttributeInfo").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").properties("role").children(new String[]{"multiple", "attributed"}, new boolean[]{false, true}).alias("@attribute info", "").create();
  /*package*/ final ConceptDescriptor myConceptAttributeInfo_AttributedConcept = new ConceptDescriptorBuilder("jetbrains.mps.lang.structure.structure.AttributeInfo_AttributedConcept").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("concept").create();
  /*package*/ final ConceptDescriptor myConceptAttributeInfo_IsMultiple = new ConceptDescriptorBuilder("jetbrains.mps.lang.structure.structure.AttributeInfo_IsMultiple").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").create();
  /*package*/ final ConceptDescriptor myConceptConceptDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.structure.structure.ConceptDeclaration").super_("jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration").parents("jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration").properties("rootable", "iconPath", "staticScope").references("extends").children(new String[]{"implements"}, new boolean[]{true}).final_().alias("Concept", "").create();
  /*package*/ final ConceptDescriptor myConceptConstrainedDataTypeDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.structure.structure.ConstrainedDataTypeDeclaration").super_("jetbrains.mps.lang.structure.structure.DataTypeDeclaration").parents("jetbrains.mps.lang.structure.structure.DataTypeDeclaration").properties("constraint").alias("Constrained Data Type", "").create();
  /*package*/ final ConceptDescriptor myConceptDataTypeDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.structure.structure.DataTypeDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.BaseConcept").create();
  /*package*/ final ConceptDescriptor myConceptDeprecatedNodeAnnotation = new ConceptDescriptorBuilder("jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.InterfacePart").properties("build", "comment").create();
  /*package*/ final ConceptDescriptor myConceptEnumerationDataTypeDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration").super_("jetbrains.mps.lang.structure.structure.DataTypeDeclaration").parents("jetbrains.mps.lang.structure.structure.DataTypeDeclaration").properties("memberIdentifierPolicy", "hasNoDefaultMember", "noValueText").references("memberDataType", "defaultMember").children(new String[]{"member"}, new boolean[]{true}).alias("Enum Data Type", "").create();
  /*package*/ final ConceptDescriptor myConceptEnumerationMemberDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.structure.structure.EnumerationMemberDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.InterfacePart", "jetbrains.mps.lang.core.structure.BaseConcept").properties("internalValue", "externalValue", "javaIdentifier").create();
  /*package*/ final ConceptDescriptor myConceptIConceptAspect = new ConceptDescriptorBuilder("jetbrains.mps.lang.structure.structure.IConceptAspect").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIStructureDeprecatable = new ConceptDescriptorBuilder("jetbrains.mps.lang.structure.structure.IStructureDeprecatable").interface_().parents("jetbrains.mps.lang.core.structure.IDeprecatable").create();
  /*package*/ final ConceptDescriptor myConceptInterfaceConceptDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration").super_("jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration").parents("jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration").children(new String[]{"extends"}, new boolean[]{true}).final_().alias("Interface Concept", "").create();
  /*package*/ final ConceptDescriptor myConceptInterfaceConceptReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.structure.structure.InterfaceConceptReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.InterfacePart").references("intfc").create();
  /*package*/ final ConceptDescriptor myConceptLinkDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.structure.structure.LinkDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.InterfacePart", "jetbrains.mps.lang.structure.structure.IStructureDeprecatable", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("role", "metaClass", "sourceCardinality", "unordered", "doNotGenerate").references("specializedLink", "target").final_().create();
  /*package*/ final ConceptDescriptor myConceptPrimitiveDataTypeDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration").super_("jetbrains.mps.lang.structure.structure.DataTypeDeclaration").parents("jetbrains.mps.lang.structure.structure.DataTypeDeclaration").final_().create();
  /*package*/ final ConceptDescriptor myConceptPropertyDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.structure.structure.PropertyDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.InterfacePart", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.structure.structure.IStructureDeprecatable").properties("doNotGenerate").references("dataType").final_().create();
  /*package*/ final ConceptDescriptor myConceptReferenceLinkDeclartionScopeKind = new ConceptDescriptorBuilder("jetbrains.mps.lang.structure.structure.ReferenceLinkDeclartionScopeKind").interface_().create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractConceptDeclaration, myConceptAggregationLinkDeclarationScopeKind, myConceptAttributeInfo, myConceptAttributeInfo_AttributedConcept, myConceptAttributeInfo_IsMultiple, myConceptConceptDeclaration, myConceptConstrainedDataTypeDeclaration, myConceptDataTypeDeclaration, myConceptDeprecatedNodeAnnotation, myConceptEnumerationDataTypeDeclaration, myConceptEnumerationMemberDeclaration, myConceptIConceptAspect, myConceptIStructureDeprecatable, myConceptInterfaceConceptDeclaration, myConceptInterfaceConceptReference, myConceptLinkDeclaration, myConceptPrimitiveDataTypeDeclaration, myConceptPropertyDeclaration, myConceptReferenceLinkDeclartionScopeKind);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0w, conceptFqName)) {
      case 0:
        return myConceptAbstractConceptDeclaration;
      case 1:
        return myConceptAggregationLinkDeclarationScopeKind;
      case 2:
        return myConceptAttributeInfo;
      case 3:
        return myConceptAttributeInfo_AttributedConcept;
      case 4:
        return myConceptAttributeInfo_IsMultiple;
      case 5:
        return myConceptConceptDeclaration;
      case 6:
        return myConceptConstrainedDataTypeDeclaration;
      case 7:
        return myConceptDataTypeDeclaration;
      case 8:
        return myConceptDeprecatedNodeAnnotation;
      case 9:
        return myConceptEnumerationDataTypeDeclaration;
      case 10:
        return myConceptEnumerationMemberDeclaration;
      case 11:
        return myConceptIConceptAspect;
      case 12:
        return myConceptIStructureDeprecatable;
      case 13:
        return myConceptInterfaceConceptDeclaration;
      case 14:
        return myConceptInterfaceConceptReference;
      case 15:
        return myConceptLinkDeclaration;
      case 16:
        return myConceptPrimitiveDataTypeDeclaration;
      case 17:
        return myConceptPropertyDeclaration;
      case 18:
        return myConceptReferenceLinkDeclartionScopeKind;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0w = new String[]{"jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", "jetbrains.mps.lang.structure.structure.AggregationLinkDeclarationScopeKind", "jetbrains.mps.lang.structure.structure.AttributeInfo", "jetbrains.mps.lang.structure.structure.AttributeInfo_AttributedConcept", "jetbrains.mps.lang.structure.structure.AttributeInfo_IsMultiple", "jetbrains.mps.lang.structure.structure.ConceptDeclaration", "jetbrains.mps.lang.structure.structure.ConstrainedDataTypeDeclaration", "jetbrains.mps.lang.structure.structure.DataTypeDeclaration", "jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation", "jetbrains.mps.lang.structure.structure.EnumerationDataTypeDeclaration", "jetbrains.mps.lang.structure.structure.EnumerationMemberDeclaration", "jetbrains.mps.lang.structure.structure.IConceptAspect", "jetbrains.mps.lang.structure.structure.IStructureDeprecatable", "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration", "jetbrains.mps.lang.structure.structure.InterfaceConceptReference", "jetbrains.mps.lang.structure.structure.LinkDeclaration", "jetbrains.mps.lang.structure.structure.PrimitiveDataTypeDeclaration", "jetbrains.mps.lang.structure.structure.PropertyDeclaration", "jetbrains.mps.lang.structure.structure.ReferenceLinkDeclartionScopeKind"};
}
