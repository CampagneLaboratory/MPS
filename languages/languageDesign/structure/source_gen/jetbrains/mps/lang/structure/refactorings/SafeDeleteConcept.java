package jetbrains.mps.lang.structure.refactorings;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.BaseLoggableRefactoring;
import jetbrains.mps.lang.core.refactorings.SafeDelete;
import jetbrains.mps.refactoring.framework.IRefactoringTarget;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.refactoring.framework.RefactoringUtil;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.ide.findusages.model.SearchResult;
import java.util.ArrayList;

public class SafeDeleteConcept extends BaseLoggableRefactoring {
  public SafeDeleteConcept() {
    this.addTransientParameter("nodeAspects");
  }

  public String getUserFriendlyName() {
    return "Safe Delete Concept";
  }

  public String getKeyStroke() {
    return getKeyStroke_static();
  }

  public Class getOverridenRefactoringClass() {
    return SafeDelete.class;
  }

  public IRefactoringTarget getRefactoringTarget() {
    return new SafeDeleteConcept_Target();
  }

  public void refactor(final RefactoringContext refactoringContext) {
    for (SNode aspectNode : (((List<SNode>) refactoringContext.getParameter("nodeAspects")))) {
      SNodeOperations.deleteNode(aspectNode);
    }
    SNodeOperations.deleteNode(refactoringContext.getSelectedNode());
  }

  public List<SModel> getModelsToGenerate(final RefactoringContext refactoringContext) {
    List<SModel> result = ListSequence.fromList(new LinkedList<SModel>());
    Language sourceLanguage = Language.getLanguageFor(SNodeOperations.getModel(refactoringContext.getSelectedNode()).getModelDescriptor());
    if (sourceLanguage != null) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(RefactoringUtil.getLanguageModelsList(refactoringContext.getSelectedProject(), sourceLanguage)));
    }
    return result;

  }

  public SearchResults getAffectedNodes(final RefactoringContext refactoringContext) {
    // all usages excluding concept's aspects 
    refactoringContext.setParameter("nodeAspects", AbstractConceptDeclaration_Behavior.call_findAllAspects_7754459869734028917(refactoringContext.getSelectedNode()));

    SearchResults searchResults = new SearchResults();
    searchResults.addAll(FindUtils.getSearchResults(new EmptyProgressMonitor(), refactoringContext.getSelectedNode(), GlobalScope.getInstance(), "jetbrains.mps.lang.structure.findUsages.ConceptInstances_Finder", "jetbrains.mps.lang.structure.findUsages.NodeAndDescendantsUsages_Finder"));
    for (SNode aspect : ListSequence.fromList((((List<SNode>) refactoringContext.getParameter("nodeAspects"))))) {
      searchResults.addAll(FindUtils.getSearchResults(new EmptyProgressMonitor(), aspect, GlobalScope.getInstance(), "jetbrains.mps.lang.structure.findUsages.NodeAndDescendantsUsages_Finder"));
    }

    List<SearchResult<SNode>> searchResultsList = searchResults.getSearchResults();
    List<SearchResult<SNode>> searchResultsCopy = ListSequence.fromListWithValues(new ArrayList<SearchResult<SNode>>(), searchResultsList);

    for (SearchResult<SNode> searchResult : searchResultsCopy) {
      SNode containingRoot = searchResult.getObject().getContainingRoot();
      if (ListSequence.fromList(((List<SNode>) refactoringContext.getParameter("nodeAspects"))).contains(containingRoot)) {
        searchResults.remove(searchResult);
      }
    }

    return searchResults;
  }

  public void updateModel(final SModel model, final RefactoringContext refactoringContext) {
    refactoringContext.updateByDefault(model);
  }

  public static String getKeyStroke_static() {
    return SafeDelete.getKeyStroke_static();
  }
}
