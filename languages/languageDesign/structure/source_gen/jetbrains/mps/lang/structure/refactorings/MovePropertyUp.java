package jetbrains.mps.lang.structure.refactorings;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.BaseLoggableRefactoring;
import jetbrains.mps.refactoring.framework.IRefactoringTarget;
import jetbrains.mps.lang.core.refactorings.MoveNodes;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.structure.scripts.RefUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.project.Project;
import jetbrains.mps.smodel.Language;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.refactoring.framework.RefactoringUtil;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.project.GlobalScope;

public class MovePropertyUp extends BaseLoggableRefactoring {
  public MovePropertyUp() {
    this.addTransientParameter("targetConcept");
  }
  public IRefactoringTarget getRefactoringTarget() {
    return new MovePropertyUp_Target();
  }
  public String getUserFriendlyName() {
    return "Move Property Up";
  }
  public Class getOverridenRefactoringClass() {
    return MoveNodes.class;
  }
  public void refactor(final RefactoringContext refactoringContext) {
    SNode node = refactoringContext.getSelectedNode();
    /*
      SNode linkToReplace = RefUtil.findPropertyToMerge(((SNode) refactoringContext.getParameter("targetConcept")), node);
      if ((linkToReplace != null)) {
        refactoringContext.replaceRefsToNodeWithNode(node, linkToReplace);
      } else {
        refactoringContext.moveNodeToNode(node, node.getRoleInParent(), ((SNode) refactoringContext.getParameter("targetConcept")));
      }
    */
    refactoringContext.moveNodeToNode(node, node.getRoleInParent(), ((SNode) refactoringContext.getParameter("targetConcept")));
    refactoringContext.changeFeatureName(node, SNodeOperations.getModel(((SNode) refactoringContext.getParameter("targetConcept"))).getReference().getModelName() + "." + SPropertyOperations.getString(((SNode) refactoringContext.getParameter("targetConcept")), MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name")), SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name")));
  }
  public List<SModel> getModelsToGenerate(final RefactoringContext refactoringContext) {
    List<SModel> result = ListSequence.fromList(new ArrayList<SModel>());

    Project project = refactoringContext.getSelectedProject();
    Language sourceLanguage = Language.getLanguageFor(SNodeOperations.getModel(refactoringContext.getSelectedNode()));
    if (sourceLanguage != null) {
      Map<SModule, List<SModel>> models = RefactoringUtil.getLanguageAndItsExtendingLanguageModels(project, sourceLanguage);
      for (List<SModel> list : CollectionSequence.fromCollection(models.values())) {
        ListSequence.fromList(result).addSequence(ListSequence.fromList((List<SModel>) list));
      }
    }
    Language targetLanguage = Language.getLanguageFor(SNodeOperations.getModel(((SNode) refactoringContext.getParameter("targetConcept"))));
    if (targetLanguage != null) {
      Map<SModule, List<SModel>> models = RefactoringUtil.getLanguageAndItsExtendingLanguageModels(project, targetLanguage);
      for (List<SModel> list : CollectionSequence.fromCollection(models.values())) {
        ListSequence.fromList(result).addSequence(ListSequence.fromList((List<SModel>) list));
      }
    }

    return result;
  }
  public SearchResults getAffectedNodes(final RefactoringContext refactoringContext) {
    return FindUtils.getSearchResults(new EmptyProgressMonitor(), refactoringContext.getSelectedNode(), GlobalScope.getInstance(), "jetbrains.mps.lang.structure.findUsages.NodeAndDescendantsUsages_Finder");
  }
  public void updateModel(final SModel model, final RefactoringContext refactoringContext) {
    refactoringContext.updateByDefault(model);
  }
}
