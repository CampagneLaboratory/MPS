package jetbrains.mps.lang.structure.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IScope;
import java.util.List;
import jetbrains.mps.progress.ProgressMonitor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.util.NameUtil;
import java.util.Set;
import org.jetbrains.mps.openapi.module.FindUsagesFacade;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class ExactConceptInstances_Finder extends GeneratedFinder {
  private static Logger LOG = LogManager.getLogger("jetbrains.mps.lang.structure.findUsages.ExactConceptInstances_Finder");

  public ExactConceptInstances_Finder() {
  }

  @Override
  public String getDescription() {
    return "Exact Concept Instances";
  }

  @Override
  public String getLongDescription() {
    return "only instances of the specified concept, not including instances of it's subconcepts";
  }

  @Override
  public String getConcept() {
    return "jetbrains.mps.lang.structure.structure.ConceptDeclaration";
  }

  @Override
  protected void doFind(SNode node, IScope scope, List<SNode> _results, ProgressMonitor monitor) {
    try {
      SAbstractConcept concept = SConceptRepository.getInstance().getConcept(NameUtil.nodeFQName(node));
      Set<SNode> nodes = FindUsagesFacade.getInstance().findInstances(scope, Collections.singleton(concept), true, monitor);
      for (SNode resNode : nodes) {
        ListSequence.fromList(_results).addElement(((SNode) resNode));
      }
    } finally {
      monitor.done();
    }
  }

  @Override
  public String getNodeCategory(SNode node) {
    return "Concept Instances";
  }
}
