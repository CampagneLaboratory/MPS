package jetbrains.mps.lang.structure.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.util.NameUtil;

public class CheckRootNodesNamingInternalPolicy_MigrationScript extends BaseMigrationScript {
  public CheckRootNodesNamingInternalPolicy_MigrationScript(IOperationContext operationContext) {
    super("Check Root Concepts' Internal Naming Policy");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Fix Root Concepts' Aliases";
      }
      public String getAdditionalInfo() {
        return "Fix Root Concepts' Aliases";
      }
      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.structure.structure.ConceptDeclaration";
      }
      public boolean isApplicableInstanceNode(SNode node) {
        if (SPropertyOperations.getBoolean(node, "abstract")) {
          return false;
        }
        if (!(SPropertyOperations.getBoolean(node, "rootable"))) {
          return false;
        }
        if (isEmptyString(SPropertyOperations.getString(node, "conceptAlias"))) {
          return false;
        }
        return !(SPropertyOperations.getString(node, "conceptAlias").equals(NameUtil.multiWordDecapitalize(SPropertyOperations.getString(node, "conceptAlias"))));
      }
      public void doUpdateInstanceNode(SNode node) {
        SPropertyOperations.set(node, "conceptAlias", NameUtil.multiWordDecapitalize(SPropertyOperations.getString(node, "conceptAlias")));
      }
      public boolean isShowAsIntention() {
        return false;
      }
    });
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Add Alias to Root Concepts";
      }
      public String getAdditionalInfo() {
        return "Add Alias to Root Concepts";
      }
      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.structure.structure.ConceptDeclaration";
      }
      public boolean isApplicableInstanceNode(SNode node) {
        if (SPropertyOperations.getBoolean(node, "abstract")) {
          return false;
        }
        if (!(SPropertyOperations.getBoolean(node, "rootable"))) {
          return false;
        }
        return isEmptyString(SPropertyOperations.getString(node, "conceptAlias"));
      }
      public void doUpdateInstanceNode(SNode node) {
        StringBuilder sb = new StringBuilder();
        for (String word : NameUtil.splitByCamels(SPropertyOperations.getString(node, "name"))) {
          sb.append(NameUtil.decapitalize(word)).append(" ");
        }
        SPropertyOperations.set(node, "conceptAlias", sb.toString().trim());
      }
      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}
