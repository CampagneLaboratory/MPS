package jetbrains.mps.lang.structure.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class CheckRootNodesNamingInternalPolicy_MigrationScript extends BaseMigrationScript {
  public CheckRootNodesNamingInternalPolicy_MigrationScript(IOperationContext operationContext) {
    super("Check Root Concepts' Internal Naming Policy");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Fix Root Concepts' Aliases";
      }

      public String getAdditionalInfo() {
        return "Fix Root Concepts' Aliases";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.structure.structure.ConceptDeclaration";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        if (SConceptPropertyOperations.getBoolean(node, "abstract")) {
          return false;
        }
        if (!(SPropertyOperations.getBoolean(node, "rootable"))) {
          return false;
        }
        if (isEmpty_rkab70_a0c0d0a0a0b0a(SConceptPropertyOperations.getString(node, "alias"))) {
          return false;
        }
        return !(SConceptPropertyOperations.getString(node, "alias").equals(NameUtil.multiWordDecapitalize(SConceptPropertyOperations.getString(node, "alias"))));
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode aliasProperty = SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(node, "conceptProperty", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.structure.structure.StringConceptProperty") && SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.lang.structure.structure.StringConceptProperty"), "conceptPropertyDeclaration", false), "name").equals("alias");
          }
        }).first(), "jetbrains.mps.lang.structure.structure.StringConceptProperty");
        SPropertyOperations.set(aliasProperty, "value", NameUtil.multiWordDecapitalize(SConceptPropertyOperations.getString(node, "alias")));
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Add Alias to Root Concepts";
      }

      public String getAdditionalInfo() {
        return "Add Alias to Root Concepts";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.structure.structure.ConceptDeclaration";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        if (SConceptPropertyOperations.getBoolean(node, "abstract")) {
          return false;
        }
        if (!(SPropertyOperations.getBoolean(node, "rootable"))) {
          return false;
        }
        return isEmpty_rkab70_a0c0d0a0a0c0a(SConceptPropertyOperations.getString(node, "alias"));
      }

      public void doUpdateInstanceNode(SNode node) {
        StringBuilder sb = new StringBuilder();
        for (String word : ListSequence.fromList(NameUtil.splitByCamels(SPropertyOperations.getString(node, "name")))) {
          sb.append(NameUtil.decapitalize(word)).append(" ");
        }
        SNode aliasProperty = SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getTargets(node, "conceptProperty", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.structure.structure.StringConceptProperty") && SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.lang.structure.structure.StringConceptProperty"), "conceptPropertyDeclaration", false), "name").equals("alias");
          }
        }).first(), "jetbrains.mps.lang.structure.structure.StringConceptProperty");
        SPropertyOperations.set(aliasProperty, "value", sb.toString().trim());
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }

  public static boolean isEmpty_rkab70_a0c0d0a0a0b0a(String str) {
    return str == null || str.length() == 0;
  }

  public static boolean isEmpty_rkab70_a0c0d0a0a0c0a(String str) {
    return str == null || str.length() == 0;
  }
}
