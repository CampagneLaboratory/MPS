package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.IScope;
import java.util.Set;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import javax.swing.SwingUtilities;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.ide.findusages.model.SearchResult;
import java.util.Collection;
import jetbrains.mps.findUsages.FindUsagesManager;
import jetbrains.mps.findUsages.SearchType;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModel;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import jetbrains.mps.project.IModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.project.ProjectOperationContext;
import jetbrains.mps.make.MakeSession;
import jetbrains.mps.make.IMakeService;
import java.util.concurrent.Future;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.smodel.resources.ModelsToResources;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptPropertyOperations;
import jetbrains.mps.lang.editor.scripts.MigrationUtil;
import jetbrains.mps.baseLanguage.behavior.DotExpression_Behavior;
import java.util.Iterator;
import jetbrains.mps.ide.platform.refactoring.RefactoringAccess;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewAction;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewItem;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;

public class ConceptPropertiesHelper {
  private static final String abstractName = "abstract";
  private static final String aliasName = "alias";
  private static final String dontSubstituteName = "dontSubstituteByDefault";
  private static final String finalName = "final";
  private static final String shortDescriptionName = "shortDescription";
  private MPSProject project;
  private Project ideaProject;
  private IScope scope;
  private int step;
  private final int stepsNumber = 2;
  private Set<Language> languages;


  public ConceptPropertiesHelper(MPSProject project) {
    step = 1;
    this.project = project;
    this.ideaProject = ProjectHelper.toIdeaProject(project);
    this.scope = project.getScope();
  }



  public int getStep() {
    return step;
  }



  public void migrateNextStep() {
    if (step > stepsNumber) {
      return;
    }
    final ConceptPropertiesMigrationDialog dialog = new ConceptPropertiesMigrationDialog(ideaProject, project);
    dialog.setNextAction(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        step++;
        migrateNextStep();
      }
    });
    switch (step) {
      case 1:
        dialog.setAction(new _FunctionTypes._void_P0_E0() {
          public void invoke() {
            migrateConceptPropertiesAndLiks();
          }
        });
        break;
      case 2:
        dialog.setAction(new _FunctionTypes._void_P0_E0() {
          public void invoke() {
            removeConceptProperties();
          }
        });
        break;
      default:
        return;
    }
    dialog.setText(getTitle());
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        dialog.show();
      }
    });
  }

  private void migrateConceptPropertiesAndLiks() {
    final Set<SNode> conceptPropertyUsages = SetSequence.fromSet(new HashSet<SNode>());
    final Set<SNode> conceptPropertyDeclarationUsages = SetSequence.fromSet(new HashSet<SNode>());
    final Set<SNode> accessUsages = SetSequence.fromSet(new HashSet<SNode>());
    final Set<SNode> cellUsages = SetSequence.fromSet(new HashSet<SNode>());
    final Set<SNode> conceptLinkUsages = SetSequence.fromSet(new HashSet<SNode>());
    final Set<SNode> conceptLinkDeclarationUsages = SetSequence.fromSet(new HashSet<SNode>());
    final Set<SNode> linkAccessUsages = SetSequence.fromSet(new HashSet<SNode>());
    final Set<SearchResult<SNode>> allUsages = SetSequence.fromSet(new HashSet<SearchResult<SNode>>());
    Collection<SNode> usages = ((Collection) FindUsagesManager.getInstance().findUsages(nodesToFind(), SearchType.INSTANCES, scope, new EmptyProgressMonitor()));

    boolean usageIsFound;
    for (SNode usage : CollectionSequence.fromCollection(usages)) {
      usageIsFound = true;
      if (SNodeOperations.isInstanceOf(usage, "jetbrains.mps.lang.structure.structure.ConceptProperty")) {
        SetSequence.fromSet(conceptPropertyUsages).addElement(SNodeOperations.cast(usage, "jetbrains.mps.lang.structure.structure.ConceptProperty"));
      } else if (SNodeOperations.isInstanceOf(usage, "jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess") && needToMigrate(usage)) {
        SetSequence.fromSet(accessUsages).addElement(SNodeOperations.cast(usage, "jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess"));
      } else if (SNodeOperations.isInstanceOf(usage, "jetbrains.mps.lang.editor.structure.CellModel_ConceptProperty")) {
        SetSequence.fromSet(cellUsages).addElement(SNodeOperations.cast(usage, "jetbrains.mps.lang.editor.structure.CellModel_ConceptProperty"));
      } else if (SNodeOperations.isInstanceOf(usage, "jetbrains.mps.lang.structure.structure.ReferenceConceptLink")) {
        SetSequence.fromSet(conceptLinkUsages).addElement(SNodeOperations.cast(usage, "jetbrains.mps.lang.structure.structure.ReferenceConceptLink"));
      } else if (SNodeOperations.isInstanceOf(usage, "jetbrains.mps.lang.smodel.structure.SConceptLinkAccess") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(usage, "jetbrains.mps.lang.smodel.structure.SConceptLinkAccess"), "conceptLinkDeclaration", false), "jetbrains.mps.lang.structure.structure.ReferenceConceptLinkDeclaration")) {
        SetSequence.fromSet(linkAccessUsages).addElement(SNodeOperations.cast(usage, "jetbrains.mps.lang.smodel.structure.SConceptLinkAccess"));
      } else if (SNodeOperations.isInstanceOf(usage, "jetbrains.mps.lang.structure.structure.ConceptPropertyDeclaration") && (AttributeOperations.getAttribute(SNodeOperations.cast(usage, "jetbrains.mps.lang.structure.structure.ConceptPropertyDeclaration"), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.MigratedToMethodAnnotation"))) == null) && neq_azpnkk_a0a4b0l0r(SNodeOperations.getAncestor(usage, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", false, false), SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept"))) {
        SetSequence.fromSet(conceptPropertyDeclarationUsages).addElement(SNodeOperations.cast(usage, "jetbrains.mps.lang.structure.structure.ConceptPropertyDeclaration"));
      } else if (SNodeOperations.isInstanceOf(usage, "jetbrains.mps.lang.structure.structure.ReferenceConceptLinkDeclaration") && (AttributeOperations.getAttribute(SNodeOperations.cast(usage, "jetbrains.mps.lang.structure.structure.ReferenceConceptLinkDeclaration"), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.MigratedToMethodAnnotation"))) == null)) {
        SetSequence.fromSet(conceptLinkDeclarationUsages).addElement(SNodeOperations.cast(usage, "jetbrains.mps.lang.structure.structure.ReferenceConceptLinkDeclaration"));
      } else {
        usageIsFound = false;
      }
      if (usageIsFound) {
        SetSequence.fromSet(allUsages).addElement(new SearchResult<SNode>(usage, ""));
      }
    }
    Set<SNode> searchedNodes = SetSequence.fromSet(new HashSet<SNode>());
    SetSequence.fromSet(searchedNodes).addSequence(SetSequence.fromSet(conceptPropertyDeclarationUsages));
    SetSequence.fromSet(searchedNodes).addSequence(SetSequence.fromSet(conceptLinkDeclarationUsages));


    final SearchResults searchResults = new SearchResults<SNode>(searchedNodes, SetSequence.fromSet(allUsages).toListSequence());
    showRefactoringView(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        doMigrate(conceptPropertyDeclarationUsages, conceptLinkDeclarationUsages, cellUsages, accessUsages, conceptPropertyUsages, linkAccessUsages, conceptLinkUsages);
      }
    }, searchResults);
    final Set<SModelDescriptor> sourceModels = new HashSet<SModelDescriptor>();
    for (SModel model : ((Set<SModel>) searchResults.getAffectedModels())) {
      sourceModels.add(model.getModelDescriptor());
    }
  }

  private Set<SConcept> nodesToFind() {
    Set<String> result = SetSequence.fromSet(new HashSet<String>());
    SetSequence.fromSet(result).addElement("jetbrains.mps.lang.structure.structure.ConceptPropertyDeclaration");
    SetSequence.fromSet(result).addElement("jetbrains.mps.lang.structure.structure.ConceptProperty");
    SetSequence.fromSet(result).addElement("jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess");
    SetSequence.fromSet(result).addElement("jetbrains.mps.lang.editor.structure.CellModel_ConceptProperty");
    SetSequence.fromSet(result).addElement("jetbrains.mps.lang.structure.structure.ReferenceConceptLinkDeclaration");
    SetSequence.fromSet(result).addElement("jetbrains.mps.lang.structure.structure.ReferenceConceptLink");
    SetSequence.fromSet(result).addElement("jetbrains.mps.lang.smodel.structure.SConceptLinkAccess");
    return SetSequence.fromSetWithValues(new HashSet<SConcept>(), SetSequence.fromSet(result).select(new ISelector<String, SConcept>() {
      public SConcept select(String it) {
        return SConceptRepository.getInstance().getConcept(it);
      }
    }));
  }

  private Set<Language> getProjectLanguages() {
    if (languages != null) {
      return languages;
    }
    languages = SetSequence.fromSet(new HashSet<Language>());
    for (IModule module : ListSequence.fromList(project.getModules())) {
      ModuleDescriptor descriptor = module.getModuleDescriptor();
      if (descriptor == null) {
        continue;
      }
      if (module instanceof Language) {
        SetSequence.fromSet(languages).addElement(((Language) module));
      }
    }
    return languages;
  }

  private void makeAllAndContinue(final Set<SModelDescriptor> sourceModels) {
    if (SetSequence.fromSet(sourceModels).isEmpty()) {
      return;
    }
    final List<org.jetbrains.mps.openapi.model.SModel> descriptors = new ArrayList<org.jetbrains.mps.openapi.model.SModel>();
    SModelRepository.getInstance().saveAll();
    //  save all before launching make 
    Iterable<SModelDescriptor> allModels = SModelRepository.getInstance().getModelDescriptors();
    ListSequence.fromList(descriptors).addSequence(Sequence.fromIterable(allModels).where(new IWhereFilter<SModelDescriptor>() {
      public boolean accept(SModelDescriptor it) {
        return it.isGeneratable() && LanguageAspect.BEHAVIOR.is(it);
      }
    }));
    ListSequence.fromList(descriptors).addSequence(SetSequence.fromSet(sourceModels).where(new IWhereFilter<SModelDescriptor>() {
      public boolean accept(SModelDescriptor it) {
        return it != null && !(it.getSModel().isDisposed()) && it.isGeneratable();
      }
    }));
    final IOperationContext operationContext = new ProjectOperationContext(project);
    new Thread() {
      public void run() {
        MakeSession sess = new MakeSession(operationContext);
        if (IMakeService.INSTANCE.get().openNewSession(sess)) {
          Future<IResult> result = IMakeService.INSTANCE.get().make(sess, new ModelsToResources(operationContext, descriptors).resources(false));
          try {
            result.get();
          } catch (InterruptedException e) {
          } catch (CancellationException ignore) {
          } catch (ExecutionException e) {
            e.printStackTrace();
          } finally {
            step++;
            migrateNextStep();
          }
        }
      }
    }.start();
  }

  private boolean needToMigrate(SNode node) {
    SNode root = SNodeOperations.getContainingRoot(node);
    if (SNodeOperations.isInstanceOf(root, "jetbrains.mps.baseLanguage.structure.ClassConcept") && BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(root, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "virtual_getFqName_1213877404258", new Object[]{}).equals(ConceptPropertiesHelper.class.getName())) {
      return false;
    }
    return true;
  }

  private void doMigrate(final Set<SNode> conceptPropertyDeclarations, final Set<SNode> conceptLinkDeclarations, final Set<SNode> cellUsages, final Set<SNode> accessUsages, final Set<SNode> conceptPropertyUsages, final Set<SNode> accessLinkUsages, final Set<SNode> conceptLinkUsages) {

    Map<SNode, SNode> cplToMethodMap = MapSequence.fromMap(new HashMap<SNode, SNode>());
    for (SNode conceptPropertyDecl : SetSequence.fromSet(conceptPropertyDeclarations)) {
      SNode migratedToMethodAnnotation = SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.MigratedToMethodAnnotation", null);
      SNode deprecatedNodeAnnotation = SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation", null);
      SNode method = replaceConceptPropertyDeclarations(conceptPropertyDecl, conceptPropertyUsages);
      MapSequence.fromMap(cplToMethodMap).put(conceptPropertyDecl, method);
      SLinkOperations.setTarget(migratedToMethodAnnotation, "method", method, false);
      if (method != null) {
        AttributeOperations.setAttribute(SNodeOperations.cast(conceptPropertyDecl, "jetbrains.mps.lang.structure.structure.ConceptPropertyDeclaration"), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation")), deprecatedNodeAnnotation);
        AttributeOperations.setAttribute(SNodeOperations.cast(conceptPropertyDecl, "jetbrains.mps.lang.structure.structure.ConceptPropertyDeclaration"), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.MigratedToMethodAnnotation")), migratedToMethodAnnotation);
      }
    }

    Map<SNode, List<SNode>> completedConceptsByDeclaration = MapSequence.fromMap(new HashMap<SNode, List<SNode>>());

    for (SNode conceptLinkDecl : SetSequence.fromSet(conceptLinkDeclarations)) {
      SNode migratedToMethodAnnotation = SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.MigratedToMethodAnnotation", null);
      SNode deprecatedNodeAnnotation = SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation", null);
      SNode method = replaceConceptLinkDeclaration(SNodeOperations.cast(conceptLinkDecl, "jetbrains.mps.lang.structure.structure.ConceptLinkDeclaration"), conceptLinkUsages);
      MapSequence.fromMap(cplToMethodMap).put(SNodeOperations.cast(conceptLinkDecl, "jetbrains.mps.lang.structure.structure.ConceptLinkDeclaration"), method);
      MapSequence.fromMap(completedConceptsByDeclaration).put(SNodeOperations.cast(conceptLinkDecl, "jetbrains.mps.lang.structure.structure.ConceptLinkDeclaration"), ListSequence.fromList(new ArrayList<SNode>()));
      SLinkOperations.setTarget(migratedToMethodAnnotation, "method", method, false);
      if (method != null) {
        AttributeOperations.setAttribute(SNodeOperations.cast(conceptLinkDecl, "jetbrains.mps.lang.structure.structure.ConceptLinkDeclaration"), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.DeprecatedNodeAnnotation")), deprecatedNodeAnnotation);
        AttributeOperations.setAttribute(SNodeOperations.cast(conceptLinkDecl, "jetbrains.mps.lang.structure.structure.ConceptLinkDeclaration"), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.MigratedToMethodAnnotation")), migratedToMethodAnnotation);
      }
    }
    for (SNode conceptProperty : SetSequence.fromSet(conceptPropertyUsages)) {
      replaceConceptPropertyUsages(conceptProperty, getMethodFromMapOrFromAnnotation(cplToMethodMap, SLinkOperations.getTarget(conceptProperty, "conceptPropertyDeclaration", false)));
    }
    for (SNode access : SetSequence.fromSet(accessUsages)) {
      replaceAccessUsages(access, getMethodFromMapOrFromAnnotation(cplToMethodMap, SLinkOperations.getTarget(access, "conceptProperty", false)));
    }
    for (SNode cell : SetSequence.fromSet(cellUsages)) {
      replaceCellUsages(cell, getMethodFromMapOrFromAnnotation(cplToMethodMap, SLinkOperations.getTarget(cell, "relationDeclaration", false)));
    }
    for (SNode conceptLink : SetSequence.fromSet(conceptLinkUsages)) {
      replaceConceptLinkUsages(conceptLink, getMethodFromMapOrFromAnnotation(cplToMethodMap, SLinkOperations.getTarget(conceptLink, "conceptLinkDeclaration", false)), completedConceptsByDeclaration);
    }
    for (SNode access : SetSequence.fromSet(accessLinkUsages)) {
      replaceAccessLinkUsages(access, getMethodFromMapOrFromAnnotation(cplToMethodMap, SLinkOperations.getTarget(access, "conceptLinkDeclaration", false)));
    }
  }

  private SNode getMethodFromMapOrFromAnnotation(Map<SNode, SNode> map, SNode declaration) {
    SNode result = MapSequence.fromMap(map).get(declaration);
    if (result != null) {
      return result;
    }
    if (SNodeOperations.isInstanceOf(declaration, "jetbrains.mps.lang.structure.structure.ConceptPropertyDeclaration")) {
      return SLinkOperations.getTarget(AttributeOperations.getAttribute(SNodeOperations.cast(declaration, "jetbrains.mps.lang.structure.structure.ConceptPropertyDeclaration"), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.MigratedToMethodAnnotation"))), "method", false);
    } else if (SNodeOperations.isInstanceOf(declaration, "jetbrains.mps.lang.structure.structure.ConceptLinkDeclaration")) {
      return SLinkOperations.getTarget(AttributeOperations.getAttribute(SNodeOperations.cast(declaration, "jetbrains.mps.lang.structure.structure.ConceptLinkDeclaration"), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.MigratedToMethodAnnotation"))), "method", false);
    }
    return null;
  }

  public SNode replaceConceptLinkDeclaration(SNode conceptLinkDeclaration, Set<SNode> conceptLinks) {
    if (!(SConceptOperations.isSubConceptOf(SLinkOperations.getTarget(conceptLinkDeclaration, "targetType", false), "jetbrains.mps.lang.core.structure.INamedConcept"))) {
      return null;
    }
    SNode conceptNode = SNodeOperations.getAncestor(conceptLinkDeclaration, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", false, false);
    boolean valueIsDefault = true;
    List<SNode> sameConceptLink = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode conceptLink : ListSequence.fromList(SLinkOperations.getTargets(conceptNode, "conceptLink", true))) {
      if (SLinkOperations.getTarget(conceptLink, "conceptLinkDeclaration", false) == conceptLinkDeclaration) {
        valueIsDefault = false;
        ListSequence.fromList(sameConceptLink).addElement(conceptLink);
      }
    }
    SNode returnType = _quotation_createNode_azpnkk_a0f0y(SLinkOperations.getTarget(conceptLinkDeclaration, "targetType", false));
    String name = "get" + NameUtil.capitalize(SPropertyOperations.getString(conceptLinkDeclaration, "name"));
    SNode method = createMethod(name, true, null, returnType);
    if (valueIsDefault) {
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method, "body", true), "statement", true)).addElement(_quotation_createNode_azpnkk_a0a0a8a42(SLinkOperations.getTarget(conceptLinkDeclaration, "targetType", false)));
      addMethodToBehavior(conceptNode, method);
      return method;
    }
    SNode declaration = _quotation_createNode_azpnkk_a0j0y(SLinkOperations.getTarget(conceptLinkDeclaration, "targetType", false), SLinkOperations.getTarget(conceptLinkDeclaration, "targetType", false));
    SNode reference = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference", null);
    SLinkOperations.setTarget(reference, "variableDeclaration", SLinkOperations.getTarget(declaration, "localVariableDeclaration", true), false);
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method, "body", true), "statement", true)).addElement(declaration);
    for (SNode link : ListSequence.fromList(sameConceptLink)) {
      SNode refExpression = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.NodeRefExpression", null);
      SLinkOperations.setTarget(refExpression, "referentNode", SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(link, "jetbrains.mps.lang.structure.structure.ReferenceConceptLink"), "target", false), "jetbrains.mps.lang.core.structure.INamedConcept"), false);
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method, "body", true), "statement", true)).addElement(_quotation_createNode_azpnkk_a0a2a31a42(reference, refExpression));
      SetSequence.fromSet(conceptLinks).removeElement(link);
    }
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method, "body", true), "statement", true)).addElement(_quotation_createNode_azpnkk_a0a41a42(reference));
    return (addMethodToBehavior(conceptNode, method) ?
      method :
      null
    );

  }

  private SNode replaceConceptPropertyDeclarations(SNode conceptPropertyDeclaration, Set<SNode> conceptProperties) {
    SNode conceptNode = SNodeOperations.getAncestor(conceptPropertyDeclaration, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", false, false);
    String conceptName = SPropertyOperations.getString(conceptPropertyDeclaration, "name");
    if (SConceptOperations.isExactly(((SNode) conceptNode), "jetbrains.mps.lang.core.structure.BaseConcept") && (eq_azpnkk_a0a0a0a0c0z_0(conceptName, abstractName) || eq_azpnkk_a0a0a0a0c0z(conceptName, finalName) || eq_azpnkk_a0a0a0a2a52(conceptName, shortDescriptionName) || eq_azpnkk_a0a0a0c0z(conceptName, aliasName) || eq_azpnkk_a0a0a2a52(conceptName, dontSubstituteName))) {
      return null;
    }
    boolean valueIsDefault = true;
    SNode sameConceptProperty = null;
    for (SNode conceptProperty : ListSequence.fromList(SLinkOperations.getTargets(conceptNode, "conceptProperty", true))) {
      if (SLinkOperations.getTarget(conceptProperty, "conceptPropertyDeclaration", false) == conceptPropertyDeclaration) {
        valueIsDefault = false;
        sameConceptProperty = conceptProperty;
        break;
      }
    }

    String name;
    SNode returnType;
    SNode returnStatement;
    if (SNodeOperations.isInstanceOf(conceptPropertyDeclaration, "jetbrains.mps.lang.structure.structure.IntegerConceptPropertyDeclaration")) {
      returnType = _quotation_createNode_azpnkk_a0a0k0z();
      name = "get" + NameUtil.capitalize(conceptName);
      SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IntegerConstant", null);
      if (!(valueIsDefault)) {
        SPropertyOperations.set(result, "value", "" + (SPropertyOperations.getInteger(SNodeOperations.cast(sameConceptProperty, "jetbrains.mps.lang.structure.structure.IntegerConceptProperty"), "value")));
      } else {
        SPropertyOperations.set(result, "value", "" + (0));
      }
      returnStatement = _quotation_createNode_azpnkk_a0e0k0z(result);
    } else if (SNodeOperations.isInstanceOf(conceptPropertyDeclaration, "jetbrains.mps.lang.structure.structure.StringConceptPropertyDeclaration")) {
      returnType = _quotation_createNode_azpnkk_a0a0a01a52();
      name = "get" + NameUtil.capitalize(conceptName);
      SNode result;
      if (!(valueIsDefault)) {
        result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StringLiteral", null);
        SPropertyOperations.set(SNodeOperations.cast(result, "jetbrains.mps.baseLanguage.structure.StringLiteral"), "value", SPropertyOperations.getString(SNodeOperations.cast(sameConceptProperty, "jetbrains.mps.lang.structure.structure.StringConceptProperty"), "value"));
      } else {
        result = _quotation_createNode_azpnkk_a0a0a3a0k0z();
      }
      returnStatement = _quotation_createNode_azpnkk_a0e0a01a52(result);
    } else if (SNodeOperations.isInstanceOf(conceptPropertyDeclaration, "jetbrains.mps.lang.structure.structure.BooleanConceptPropertyDeclaration")) {
      returnType = _quotation_createNode_azpnkk_a0a0b01a52();
      SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.BooleanConstant", null);
      SPropertyOperations.set(result, "value", "" + (!(valueIsDefault)));
      returnStatement = _quotation_createNode_azpnkk_a0d0b01a52(result);
      name = conceptName;
    } else {
      return null;
    }
    SNode method = createMethod(name, true, null, returnType);
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method, "body", true), "statement", true)).addElement(returnStatement);
    if (!(valueIsDefault)) {
      SetSequence.fromSet(conceptProperties).removeElement(sameConceptProperty);
    }

    if (!(addMethodToBehavior(conceptNode, method))) {
      return null;
    }
    if (SNodeOperations.isInstanceOf(conceptPropertyDeclaration, "jetbrains.mps.lang.structure.structure.BooleanConceptPropertyDeclaration") && !(SPropertyOperations.getBoolean(conceptPropertyDeclaration, "inheritable")) && !(valueIsDefault)) {
      createBooleanMethodForChilds(conceptNode, conceptPropertyDeclaration, method);
    }

    return method;
  }

  private void replaceConceptLinkUsages(SNode conceptLink, SNode overridenMethod, Map<SNode, List<SNode>> completedConceptsByLinkDeclaration) {
    if (overridenMethod == null) {
      return;
    }
    SNode conceptNode = SNodeOperations.getAncestor(conceptLink, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", false, false);
    List<SNode> completed = MapSequence.fromMap(completedConceptsByLinkDeclaration).get(SLinkOperations.getTarget(conceptLink, "conceptLinkDeclaration", false));
    if (ListSequence.fromList(completed).contains(conceptNode)) {
      return;
    }
    Set<SNode> allLinks = SetSequence.fromSet(new HashSet<SNode>());
    for (SNode link : ListSequence.fromList(SLinkOperations.getTargets(conceptNode, "conceptLink", true))) {
      if (SLinkOperations.getTarget(link, "conceptLinkDeclaration", false) == SLinkOperations.getTarget(conceptLink, "conceptLinkDeclaration", false)) {
        SetSequence.fromSet(allLinks).addElement(link);
      }
    }

    SNode method = createMethod(SPropertyOperations.getString(overridenMethod, "name"), false, overridenMethod, SNodeOperations.copyNode(SLinkOperations.getTarget(overridenMethod, "returnType", true)));
    SNode ldConcept = SNodeOperations.getAncestor(SLinkOperations.getTarget(conceptLink, "conceptLinkDeclaration", false), "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", false, false);
    Set<SNode> superNodes = SetSequence.fromSet(new HashSet<SNode>());
    if (SNodeOperations.isInstanceOf(conceptNode, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration")) {
      for (SNode impl : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(conceptNode, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration"), "extends", true))) {
        if (SConceptOperations.isSubConceptOf(SLinkOperations.getTarget(impl, "intfc", false), NameUtil.nodeFQName(ldConcept))) {
          SetSequence.fromSet(superNodes).addElement(SLinkOperations.getTarget(impl, "intfc", false));
        }
      }
    } else if (SNodeOperations.isInstanceOf(conceptNode, "jetbrains.mps.lang.structure.structure.ConceptDeclaration")) {
      if ((SLinkOperations.getTarget(SNodeOperations.cast(conceptNode, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"), "extends", false) != null)) {
        if (SConceptOperations.isSubConceptOf(SLinkOperations.getTarget(SNodeOperations.cast(conceptNode, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"), "extends", false), NameUtil.nodeFQName(ldConcept))) {
          SetSequence.fromSet(superNodes).addElement(SLinkOperations.getTarget(SNodeOperations.cast(conceptNode, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"), "extends", false));
        }
      }
      for (SNode impl : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(conceptNode, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"), "implements", true))) {
        if (SConceptOperations.isSubConceptOf(SLinkOperations.getTarget(impl, "intfc", false), NameUtil.nodeFQName(ldConcept))) {
          SetSequence.fromSet(superNodes).addElement(SLinkOperations.getTarget(impl, "intfc", false));
        }
      }
    }
    SNode declaration;
    SNode reference = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference", null);

    if (SetSequence.fromSet(superNodes).isEmpty()) {
      declaration = _quotation_createNode_azpnkk_a0a0o0ab(SLinkOperations.getTarget(SLinkOperations.getTarget(conceptLink, "conceptLinkDeclaration", false), "targetType", false), SLinkOperations.getTarget(SLinkOperations.getTarget(conceptLink, "conceptLinkDeclaration", false), "targetType", false));
      SLinkOperations.setTarget(reference, "variableDeclaration", SLinkOperations.getTarget(declaration, "localVariableDeclaration", true), false);
    } else {

      SNode methodCall = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall", null);
      SLinkOperations.setTarget(methodCall, "baseMethodDeclaration", overridenMethod, false);
      SNode firstNodeExpression = SConceptOperations.createNewNode("jetbrains.mps.lang.behavior.structure.SuperNodeExpression", null);
      SLinkOperations.setTarget(firstNodeExpression, "superConcept", SetSequence.fromSet(superNodes).first(), false);
      declaration = _quotation_createNode_azpnkk_a0f0a41a62(SLinkOperations.getTarget(SLinkOperations.getTarget(conceptLink, "conceptLinkDeclaration", false), "targetType", false), firstNodeExpression, methodCall);
      SLinkOperations.setTarget(reference, "variableDeclaration", SLinkOperations.getTarget(declaration, "localVariableDeclaration", true), false);

      for (SNode superNode : SetSequence.fromSet(superNodes)) {
        if (superNode == SetSequence.fromSet(superNodes).first()) {
          continue;
        }

        SNode superMethodCall = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall", null);
        SLinkOperations.setTarget(superMethodCall, "baseMethodDeclaration", overridenMethod, false);
        SNode superNodeExpression = SConceptOperations.createNewNode("jetbrains.mps.lang.behavior.structure.SuperNodeExpression", null);
        SLinkOperations.setTarget(superNodeExpression, "superConcept", superNode, false);
        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method, "body", true), "statement", true)).addElement(_quotation_createNode_azpnkk_a0a6a8a0o0ab(superNodeExpression, superMethodCall, reference));
      }

    }

    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method, "body", true), "statement", true)).addElement(declaration);

    for (SNode link : SetSequence.fromSet(allLinks)) {
      SNode refExpression = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.NodeRefExpression", null);
      SLinkOperations.setTarget(refExpression, "referentNode", SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(link, "jetbrains.mps.lang.structure.structure.ReferenceConceptLink"), "target", false), "jetbrains.mps.lang.core.structure.INamedConcept"), false);
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method, "body", true), "statement", true)).addElement(_quotation_createNode_azpnkk_a0a2a81a62(reference, refExpression));
    }

    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method, "body", true), "statement", true)).addElement(_quotation_createNode_azpnkk_a0a02a62(reference));

    if (MapSequence.fromMap(completedConceptsByLinkDeclaration).get(SLinkOperations.getTarget(conceptLink, "conceptLinkDeclaration", false)) == null) {
      MapSequence.fromMap(completedConceptsByLinkDeclaration).put(SLinkOperations.getTarget(conceptLink, "conceptLinkDeclaration", false), ListSequence.fromList(new ArrayList<SNode>()));
    }
    ListSequence.fromList(MapSequence.fromMap(completedConceptsByLinkDeclaration).get(SLinkOperations.getTarget(conceptLink, "conceptLinkDeclaration", false))).addElement(conceptNode);
    addMethodToBehavior(conceptNode, method);
  }

  private void replaceConceptPropertyUsages(SNode conceptProperty, SNode overridenMethod) {
    if (SNodeOperations.getAncestor(SLinkOperations.getTarget(conceptProperty, "conceptPropertyDeclaration", false), "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", false, false) == SNodeOperations.getAncestor(conceptProperty, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", false, false)) {
      return;
    }


    SNode conceptNode = SNodeOperations.getAncestor(conceptProperty, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", false, false);
    if (SNodeOperations.getAncestor(SLinkOperations.getTarget(conceptProperty, "conceptPropertyDeclaration", false), "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", false, false) == SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept")) {
      String name = SPropertyOperations.getString(SLinkOperations.getTarget(conceptProperty, "conceptPropertyDeclaration", false), "name");
      if (eq_azpnkk_a0b0e0bb(name, aliasName)) {
        SPropertyOperations.set(conceptNode, "conceptAlias", SConceptPropertyOperations.getString(conceptNode, "alias"));
        return;
      } else if (eq_azpnkk_a0a1a4a72(name, shortDescriptionName)) {
        SPropertyOperations.set(conceptNode, "conceptShortDescription", SConceptPropertyOperations.getString(conceptNode, "shortDescription"));
        return;
      } else if (eq_azpnkk_a0b1a4a72(name, abstractName)) {
        SPropertyOperations.set(conceptNode, "abstract", "" + (SConceptPropertyOperations.getBoolean(conceptNode, "abstract")));
        return;
      } else if (eq_azpnkk_a0c1a4a72(name, finalName)) {
        SPropertyOperations.set(conceptNode, "final", "" + (SConceptPropertyOperations.getBoolean(conceptNode, "final")));
        return;
      } else if (eq_azpnkk_a0d1a4a72(name, dontSubstituteName)) {
        SNode reference = SConceptOperations.createNewNode("jetbrains.mps.lang.structure.structure.InterfaceConceptReference", null);
        SLinkOperations.setTarget(reference, "intfc", SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "1835621062190663819"), false);
        if (SNodeOperations.isInstanceOf(conceptNode, "jetbrains.mps.lang.structure.structure.ConceptDeclaration")) {
          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(conceptNode, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"), "implements", true)).addElement(reference);
        } else if (SNodeOperations.isInstanceOf(conceptNode, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration")) {
          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(conceptNode, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration"), "extends", true)).addElement(reference);
        }
        return;
      }
    }
    if (overridenMethod == null) {
      return;
    }
    SNode method = createMethod(SPropertyOperations.getString(overridenMethod, "name"), false, overridenMethod, SNodeOperations.copyNode(SLinkOperations.getTarget(overridenMethod, "returnType", true)));
    SNode returnStatement;
    if (SNodeOperations.isInstanceOf(conceptProperty, "jetbrains.mps.lang.structure.structure.IntegerConceptProperty")) {
      SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IntegerConstant", null);
      SPropertyOperations.set(result, "value", "" + (SPropertyOperations.getInteger(SNodeOperations.cast(conceptProperty, "jetbrains.mps.lang.structure.structure.IntegerConceptProperty"), "value")));
      returnStatement = _quotation_createNode_azpnkk_a0c0i0bb(result);
    } else if (SNodeOperations.isInstanceOf(conceptProperty, "jetbrains.mps.lang.structure.structure.StringConceptProperty")) {
      SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StringLiteral", null);
      SPropertyOperations.set(result, "value", SPropertyOperations.getString(SNodeOperations.cast(conceptProperty, "jetbrains.mps.lang.structure.structure.StringConceptProperty"), "value"));
      returnStatement = _quotation_createNode_azpnkk_a0c0a8a72(result);
    } else if (SNodeOperations.isInstanceOf(conceptProperty, "jetbrains.mps.lang.structure.structure.BooleanConceptProperty")) {
      returnStatement = _quotation_createNode_azpnkk_a0a0b8a72();
    } else {
      return;
    }
    ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(method, "body", true), "statement", true)).addElement(returnStatement);
    addMethodToBehavior(conceptNode, method);
    if (SNodeOperations.isInstanceOf(conceptProperty, "jetbrains.mps.lang.structure.structure.BooleanConceptProperty") && !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(conceptProperty, "conceptPropertyDeclaration", false), "inheritable"))) {
      createBooleanMethodForChilds(conceptNode, SLinkOperations.getTarget(conceptProperty, "conceptPropertyDeclaration", false), overridenMethod);
    }
  }

  private void createBooleanMethodForChilds(SNode conceptNode, final SNode conceptPropertyDeclaration, SNode method) {
    for (SNode child : ListSequence.fromList(SConceptOperations.getAllSubConcepts(conceptNode, getProjectLanguages()))) {
      if (SLinkOperations.getTarget(((SNode) child), "extends", false) == conceptNode && ListSequence.fromList(SLinkOperations.getTargets(((SNode) child), "conceptProperty", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SLinkOperations.getTarget(it, "conceptPropertyDeclaration", false) == conceptPropertyDeclaration;
        }
      }).isEmpty()) {
        SNode childMethod = createMethod(SPropertyOperations.getString(method, "name"), false, method, SNodeOperations.copyNode(SLinkOperations.getTarget(method, "returnType", true)));
        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(childMethod, "body", true), "statement", true)).addElement(_quotation_createNode_azpnkk_a0a1a0a0a82());
        addMethodToBehavior(((SNode) child), childMethod);
      }
    }
  }

  private boolean addMethodToBehavior(SNode concept, SNode method) {
    SNode childConceptBehavior = SNodeOperations.cast(MigrationUtil.getOrCreateConceptAspectInstance(LanguageAspect.BEHAVIOR, concept, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.behavior.structure.ConceptBehavior")), "jetbrains.mps.lang.behavior.structure.ConceptBehavior");
    if (childConceptBehavior == null) {
      return false;
    } else {
      ListSequence.fromList(SLinkOperations.getTargets(childConceptBehavior, "method", true)).addElement(method);
      return true;
    }
  }

  public SNode createMethod(String name, boolean isVirtual, SNode overridenMethod, SNode returnType) {
    SNode method = SConceptOperations.createNewNode("jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration", null);
    SPropertyOperations.set(method, "name", name);
    SPropertyOperations.set(method, "isStatic", "" + (true));
    SPropertyOperations.set(method, "isVirtual", "" + (isVirtual));
    SPropertyOperations.set(method, "isPrivate", "" + (false));
    SLinkOperations.setTarget(method, "visibility", SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.PublicVisibility", null), true);
    SLinkOperations.setTarget(method, "overriddenMethod", overridenMethod, false);
    SLinkOperations.setTarget(method, "returnType", returnType, true);
    SLinkOperations.setTarget(method, "body", SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StatementList", null), true);
    return method;
  }

  private void replaceAccessUsages(SNode accessOperation, SNode method) {
    SNode source = SNodeOperations.cast(SNodeOperations.getParent(accessOperation), "jetbrains.mps.baseLanguage.structure.DotExpression");
    SNode operand = SLinkOperations.getTarget(source, "operand", true);
    SNode parent = SNodeOperations.getParent(source);
    String accessName = SPropertyOperations.getString(SLinkOperations.getTarget(accessOperation, "conceptProperty", false), "name");
    if (SNodeOperations.getAncestor(SLinkOperations.getTarget(accessOperation, "conceptProperty", false), "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", false, false) == SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept")) {
      if (eq_azpnkk_a0a0e0fb(accessName, aliasName)) {
        migrateAccess(source, _quotation_createNode_azpnkk_b0a0a0e0fb(operand), _quotation_createNode_azpnkk_c0a0a0e0fb(operand));
        if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.DotExpression") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(parent, "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true), "jetbrains.mps.lang.smodel.structure.ConceptProperty_SetOperation")) {
          SNode setOperation = SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(parent, "jetbrains.mps.baseLanguage.structure.DotExpression"), "operation", true), "jetbrains.mps.lang.smodel.structure.ConceptProperty_SetOperation");
          SNodeOperations.replaceWithAnother(setOperation, SLinkOperations.getTarget(_quotation_createNode_azpnkk_a0a0b0b0a0e0fb(SLinkOperations.getTarget(setOperation, "value", true)), "operation", true));
        }
        return;
      } else if (eq_azpnkk_a0a0a4a13(accessName, shortDescriptionName)) {
        migrateAccess(source, _quotation_createNode_azpnkk_b0a0a0a4a13(operand), _quotation_createNode_azpnkk_c0a0a0a4a13(operand));
        return;
      } else if (eq_azpnkk_a0b0a4a13(accessName, finalName)) {
        migrateAccess(source, _quotation_createNode_azpnkk_b0a0b0a4a13(operand), _quotation_createNode_azpnkk_c0a0b0a4a13(operand));
        return;
      } else if (eq_azpnkk_a0c0a4a13(accessName, abstractName)) {
        migrateAccess(source, _quotation_createNode_azpnkk_b0a0c0a4a13(operand), _quotation_createNode_azpnkk_c0a0c0a4a13(operand));
        return;
      } else if (eq_azpnkk_a0d0a4a13(accessName, dontSubstituteName)) {
        migrateAccess(source, _quotation_createNode_azpnkk_b0a0d0a4a13(operand), _quotation_createNode_azpnkk_c0a0d0a4a13(operand));
        return;
      }
    }
    if (method == null) {
      return;
    }
    createMethodCallAndMigrate(method, source, operand);

  }

  private void replaceAccessLinkUsages(SNode accessOperation, SNode method) {
    if (method == null) {
      return;
    }
    SNode source = SNodeOperations.cast(SNodeOperations.getParent(accessOperation), "jetbrains.mps.baseLanguage.structure.DotExpression");
    createMethodCallAndMigrate(method, source, SLinkOperations.getTarget(source, "operand", true));
  }

  private void createMethodCallAndMigrate(SNode method, SNode source, SNode operand) {
    SNode methodCall = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall", null);
    SLinkOperations.setTarget(methodCall, "baseMethodDeclaration", method, false);
    migrateAccess(source, _quotation_createNode_azpnkk_b0c0hb(operand, methodCall), _quotation_createNode_azpnkk_c0c0hb(operand, methodCall));
  }

  private void migrateAccess(SNode source, SNode conceptExpression, SNode expression) {
    SNode type = DotExpression_Behavior.call_getOperandType_8871623299328377715(source);
    if (SNodeOperations.isInstanceOf(type, "jetbrains.mps.lang.smodel.structure.SConceptType") || (SNodeOperations.isInstanceOf(type, "jetbrains.mps.lang.smodel.structure.SNodeType") && SConceptOperations.isSubConceptOf(SLinkOperations.getTarget(SNodeOperations.cast(type, "jetbrains.mps.lang.smodel.structure.SNodeType"), "concept", false), "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))) {
      SNodeOperations.replaceWithAnother(source, conceptExpression);
    } else {
      SNodeOperations.replaceWithAnother(source, expression);
    }
  }

  private void replaceCellUsages(SNode cell, SNode method) {
    SNode modelComponent = null;
    SNode conceptNode = SNodeOperations.getAncestor(SLinkOperations.getTarget(cell, "relationDeclaration", false), "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration", false, false);
    if (conceptNode == SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept")) {
      if (eq_azpnkk_a0a0c0jb(SPropertyOperations.getString(SLinkOperations.getTarget(cell, "relationDeclaration", false), "name"), aliasName)) {
        modelComponent = _quotation_createNode_azpnkk_a0a0a0c0jb(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590284(jetbrains.mps.lang.core.editor)", "2900100530630621651"));
      } else if (eq_azpnkk_a0a0a2a53(SPropertyOperations.getString(SLinkOperations.getTarget(cell, "relationDeclaration", false), "name"), shortDescriptionName)) {
        modelComponent = _quotation_createNode_azpnkk_a0a0a0a2a53(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590284(jetbrains.mps.lang.core.editor)", "6639471181490591356"));
      }
    }
    if (method == null) {
      return;
    }
    if (modelComponent == null) {
      SNode methodCall = SConceptOperations.createNewNode("jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall", null);
      SLinkOperations.setTarget(methodCall, "baseMethodDeclaration", method, false);

      SNode cellModel_ReadOnlyModelAccessor = _quotation_createNode_azpnkk_a0d0e0jb();
      SNode conceptFunctionParameter_node = SConceptOperations.createNewNode("jetbrains.mps.lang.editor.structure.ConceptFunctionParameter_node", null);
      SNode returnStatement;
      if (conceptNode == SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.core.structure.BaseConcept") && eq_azpnkk_a0a6a4a53(SPropertyOperations.getString(SLinkOperations.getTarget(cell, "relationDeclaration", false), "name"), dontSubstituteName)) {
        returnStatement = _quotation_createNode_azpnkk_a0a0g0e0jb(conceptFunctionParameter_node);
      } else {
        returnStatement = _quotation_createNode_azpnkk_a0a0a6a4a53(methodCall, conceptFunctionParameter_node);
      }
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(cellModel_ReadOnlyModelAccessor, "modelAccessor", true), "getter", true), "body", true), "statement", true)).addElement(returnStatement);
      modelComponent = cellModel_ReadOnlyModelAccessor;

    }
    SLinkOperations.setTarget(modelComponent, "renderingCondition", SNodeOperations.copyNode(SLinkOperations.getTarget(cell, "renderingCondition", true)), true);
    SLinkOperations.setTarget(modelComponent, "menuDescriptor", SNodeOperations.copyNode(SLinkOperations.getTarget(cell, "menuDescriptor", true)), true);
    SLinkOperations.setTarget(modelComponent, "cellBackgroundFunction", SNodeOperations.copyNode(SLinkOperations.getTarget(cell, "cellBackgroundFunction", true)), true);
    SLinkOperations.setTarget(modelComponent, "focusPolicyApplicable", SNodeOperations.copyNode(SLinkOperations.getTarget(cell, "focusPolicyApplicable", true)), true);
    SLinkOperations.setTarget(modelComponent, "actionMap", SLinkOperations.getTarget(cell, "actionMap", false), false);
    SLinkOperations.setTarget(modelComponent, "keyMap", SLinkOperations.getTarget(cell, "keyMap", false), false);
    SLinkOperations.setTarget(modelComponent, "styleClass", SLinkOperations.getTarget(cell, "styleClass", false), false);
    {
      Iterator<SNode> nodeChild_it = ListSequence.fromList(SLinkOperations.getTargets(cell, "styleItem", true)).iterator();
      SNode nodeChild_var;
      while (nodeChild_it.hasNext()) {
        nodeChild_var = nodeChild_it.next();
        ListSequence.fromList(SLinkOperations.getTargets(modelComponent, "styleItem", true)).addElement(SNodeOperations.copyNode(nodeChild_var));
      }
    }
    SPropertyOperations.set(modelComponent, "attractsFocus", "" + (SPropertyOperations.getInteger_def(cell, "attractsFocus", "0")));
    SNodeOperations.replaceWithAnother(cell, modelComponent);
  }

  public void removeConceptProperties() {
    final Set<SNode> conceptPropertiesAndLinks = SetSequence.fromSet(new HashSet<SNode>());
    Set<SNode> usages = ((Set) FindUsagesManager.getInstance().findUsages(nodesToFind(), SearchType.INSTANCES, scope, new EmptyProgressMonitor()));


    final Set<SearchResult<SNode>> allUsages = SetSequence.fromSet(new HashSet<SearchResult<SNode>>());
    for (SNode usage : SetSequence.fromSet(usages)) {
      if ((SNodeOperations.isInstanceOf(usage, "jetbrains.mps.lang.structure.structure.ConceptProperty") || SNodeOperations.isInstanceOf(usage, "jetbrains.mps.lang.structure.structure.ConceptLink")) && (SNodeOperations.getAncestor(usage, "jetbrains.mps.lang.structure.structure.ConceptDeclaration", false, false) != null)) {
        SetSequence.fromSet(conceptPropertiesAndLinks).addElement(usage);
        SetSequence.fromSet(allUsages).addElement(new SearchResult<SNode>(usage, ""));
      }
    }
    Set<SNode> searchedNodes = SetSequence.fromSet(new HashSet<SNode>());
    SetSequence.fromSet(searchedNodes).addElement(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.ConceptProperty"));
    SetSequence.fromSet(searchedNodes).addElement(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.ConceptLink"));

    final SearchResults searchResults = new SearchResults<SNode>(((Set<SNode>) searchedNodes), SetSequence.fromSet(allUsages).toListSequence());
    showRefactoringView(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        for (SNode conceptProperty : SetSequence.fromSet(conceptPropertiesAndLinks)) {
          SNodeOperations.deleteNode(conceptProperty);
        }
      }
    }, searchResults);
  }

  private void showRefactoringView(final _FunctionTypes._void_P0_E0 refactor, SearchResults searchResults) {
    final Set<SModelDescriptor> sourceModels = new HashSet<SModelDescriptor>();
    for (SModel model : ((Set<SModel>) searchResults.getAffectedModels())) {
      sourceModels.add(model.getModelDescriptor());
    }
    RefactoringAccess.getInstance().showRefactoringView(ideaProject, new RefactoringViewAction() {
      public void performAction(RefactoringViewItem refactoringViewItem) {
        refactoringViewItem.close();
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            refactor.invoke();
            makeAllAndContinue(sourceModels);
          }
        });
      }
    }, searchResults, false, getTitle());
  }

  private String getTitle() {
    switch (step) {
      case 1:
        return "Migration step 1: migrate concept properties";
      case 2:
        return "Migration step 2: remove concept properties";
      default:
        return "";
    }
  }

  private static SNode _quotation_createNode_azpnkk_a0f0y(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.ListType", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_3, "concept", (SNode) parameter_1);
    quotedNode_2.addChild("elementType", quotedNode_3);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_a0a0a8a42(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.GenericNewExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.ListCreatorWithInit", null, null, GlobalScope.getInstance(), false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_5, "concept", (SNode) parameter_1);
    quotedNode_4.addChild("elementType", quotedNode_5);
    quotedNode_3.addChild("creator", quotedNode_4);
    quotedNode_2.addChild("expression", quotedNode_3);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_a0j0y(Object parameter_1, Object parameter_2) {
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_4, "name", "result");
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.GenericNewExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.ListCreatorWithInit", null, null, GlobalScope.getInstance(), false);
    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_9, "concept", (SNode) parameter_1);
    quotedNode_7.addChild("elementType", quotedNode_9);
    quotedNode_5.addChild("creator", quotedNode_7);
    quotedNode_4.addChild("initializer", quotedNode_5);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.ListType", null, null, GlobalScope.getInstance(), false);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_8, "concept", (SNode) parameter_2);
    quotedNode_6.addChild("elementType", quotedNode_8);
    quotedNode_4.addChild("type", quotedNode_6);
    quotedNode_3.addChild("localVariableDeclaration", quotedNode_4);
    return quotedNode_3;
  }

  private static SNode _quotation_createNode_azpnkk_a0a2a31a42(Object parameter_1, Object parameter_2) {
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_5 = (SNode) parameter_1;
    if (quotedNode_5 != null) {
      quotedNode_4.addChild("operand", HUtil.copyIfNecessary(quotedNode_5));
    }
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.AddElementOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_8 = (SNode) parameter_2;
    if (quotedNode_8 != null) {
      quotedNode_6.addChild("argument", HUtil.copyIfNecessary(quotedNode_8));
    }
    quotedNode_4.addChild("operation", quotedNode_6);
    quotedNode_3.addChild("expression", quotedNode_4);
    return quotedNode_3;
  }

  private static SNode _quotation_createNode_azpnkk_a0a41a42(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("expression", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_a0a0k0z() {
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerType", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_azpnkk_a0e0k0z(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("expression", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_a0a0a01a52() {
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringType", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_azpnkk_a0a0a3a0k0z() {
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.NullLiteral", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_azpnkk_a0e0a01a52(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("expression", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_a0a0b01a52() {
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanType", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_azpnkk_a0d0b01a52(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("expression", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_a0a0o0ab(Object parameter_1, Object parameter_2) {
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_4, "name", "result");
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.GenericNewExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.ListCreatorWithInit", null, null, GlobalScope.getInstance(), false);
    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_9, "concept", (SNode) parameter_1);
    quotedNode_7.addChild("elementType", quotedNode_9);
    quotedNode_5.addChild("creator", quotedNode_7);
    quotedNode_4.addChild("initializer", quotedNode_5);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.ListType", null, null, GlobalScope.getInstance(), false);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_8, "concept", (SNode) parameter_2);
    quotedNode_6.addChild("elementType", quotedNode_8);
    quotedNode_4.addChild("type", quotedNode_6);
    quotedNode_3.addChild("localVariableDeclaration", quotedNode_4);
    return quotedNode_3;
  }

  private static SNode _quotation_createNode_azpnkk_a0f0a41a62(Object parameter_1, Object parameter_2, Object parameter_3) {
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_5, "name", "result");
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.ListType", null, null, GlobalScope.getInstance(), false);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_8, "concept", (SNode) parameter_1);
    quotedNode_6.addChild("elementType", quotedNode_8);
    quotedNode_5.addChild("type", quotedNode_6);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_9 = (SNode) parameter_2;
    if (quotedNode_9 != null) {
      quotedNode_7.addChild("operand", HUtil.copyIfNecessary(quotedNode_9));
    }
    quotedNode_10 = (SNode) parameter_3;
    if (quotedNode_10 != null) {
      quotedNode_7.addChild("operation", HUtil.copyIfNecessary(quotedNode_10));
    }
    quotedNode_5.addChild("initializer", quotedNode_7);
    quotedNode_4.addChild("localVariableDeclaration", quotedNode_5);
    return quotedNode_4;
  }

  private static SNode _quotation_createNode_azpnkk_a0a6a8a0o0ab(Object parameter_1, Object parameter_2, Object parameter_3) {
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.AddAllElementsOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_10 = (SNode) parameter_1;
    if (quotedNode_10 != null) {
      quotedNode_8.addChild("operand", HUtil.copyIfNecessary(quotedNode_10));
    }
    quotedNode_11 = (SNode) parameter_2;
    if (quotedNode_11 != null) {
      quotedNode_8.addChild("operation", HUtil.copyIfNecessary(quotedNode_11));
    }
    quotedNode_6.addChild("argument", quotedNode_8);
    quotedNode_5.addChild("operation", quotedNode_6);
    quotedNode_7 = (SNode) parameter_3;
    if (quotedNode_7 != null) {
      quotedNode_5.addChild("operand", HUtil.copyIfNecessary(quotedNode_7));
    }
    quotedNode_4.addChild("expression", quotedNode_5);
    return quotedNode_4;
  }

  private static SNode _quotation_createNode_azpnkk_a0a2a81a62(Object parameter_1, Object parameter_2) {
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_5 = (SNode) parameter_1;
    if (quotedNode_5 != null) {
      quotedNode_4.addChild("operand", HUtil.copyIfNecessary(quotedNode_5));
    }
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.AddElementOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_8 = (SNode) parameter_2;
    if (quotedNode_8 != null) {
      quotedNode_6.addChild("argument", HUtil.copyIfNecessary(quotedNode_8));
    }
    quotedNode_4.addChild("operation", quotedNode_6);
    quotedNode_3.addChild("expression", quotedNode_4);
    return quotedNode_3;
  }

  private static SNode _quotation_createNode_azpnkk_a0a02a62(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("expression", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_a0c0i0bb(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("expression", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_a0c0a8a72(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("expression", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_a0a0b8a72() {
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_2, "value", "true");
    quotedNode_1.addChild("expression", quotedNode_2);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_azpnkk_a0a1a0a0a82() {
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ReturnStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.addChild("expression", quotedNode_2);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_azpnkk_b0a0a0e0fb(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SPropertyAccess", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.setReference("property", jetbrains.mps.smodel.SReference.create("property", quotedNode_3, SModelReference.fromString("r:00000000-0000-4000-0000-011c89590292(jetbrains.mps.lang.structure.structure)"), SNodeId.fromString("5092175715804935370")));
    quotedNode_2.addChild("operation", quotedNode_3);
    quotedNode_4 = (SNode) parameter_1;
    if (quotedNode_4 != null) {
      quotedNode_2.addChild("operand", HUtil.copyIfNecessary(quotedNode_4));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_c0a0a0e0fb(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SPropertyAccess", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.setReference("property", jetbrains.mps.smodel.SReference.create("property", quotedNode_3, SModelReference.fromString("r:00000000-0000-4000-0000-011c89590292(jetbrains.mps.lang.structure.structure)"), SNodeId.fromString("5092175715804935370")));
    quotedNode_2.addChild("operation", quotedNode_3);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_GetConceptOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_4.addChild("operation", quotedNode_5);
    quotedNode_6 = (SNode) parameter_1;
    if (quotedNode_6 != null) {
      quotedNode_4.addChild("operand", HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_2.addChild("operand", quotedNode_4);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_a0a0b0b0a0e0fb(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    SNode quotedNode_11 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.GenericNewExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeCreator", null, null, GlobalScope.getInstance(), false);
    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, null, GlobalScope.getInstance(), false);
    quotedNode_11.setReference("concept", jetbrains.mps.smodel.SReference.create("concept", quotedNode_11, SModelReference.fromString("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)"), SNodeId.fromString("1133920641626")));
    quotedNode_10.addChild("createdType", quotedNode_11);
    quotedNode_8.addChild("creator", quotedNode_10);
    quotedNode_5.addChild("operand", quotedNode_8);
    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_GetConceptOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_5.addChild("operation", quotedNode_9);
    quotedNode_3.addChild("operand", quotedNode_5);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SPropertyAccess", null, null, GlobalScope.getInstance(), false);
    quotedNode_6.setReference("property", jetbrains.mps.smodel.SReference.create("property", quotedNode_6, SModelReference.fromString("r:00000000-0000-4000-0000-011c89590292(jetbrains.mps.lang.structure.structure)"), SNodeId.fromString("5092175715804935370")));
    quotedNode_3.addChild("operation", quotedNode_6);
    quotedNode_2.addChild("operand", quotedNode_3);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Property_SetOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_7 = (SNode) parameter_1;
    if (quotedNode_7 != null) {
      quotedNode_4.addChild("value", HUtil.copyIfNecessary(quotedNode_7));
    }
    quotedNode_2.addChild("operation", quotedNode_4);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_b0a0a0a4a13(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SPropertyAccess", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.setReference("property", jetbrains.mps.smodel.SReference.create("property", quotedNode_3, SModelReference.fromString("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)"), SNodeId.fromString("1156234966388")));
    quotedNode_2.addChild("operation", quotedNode_3);
    quotedNode_4 = (SNode) parameter_1;
    if (quotedNode_4 != null) {
      quotedNode_2.addChild("operand", HUtil.copyIfNecessary(quotedNode_4));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_c0a0a0a4a13(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SPropertyAccess", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.setReference("property", jetbrains.mps.smodel.SReference.create("property", quotedNode_3, SModelReference.fromString("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)"), SNodeId.fromString("1156234966388")));
    quotedNode_2.addChild("operation", quotedNode_3);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_GetConceptOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_4.addChild("operation", quotedNode_5);
    quotedNode_6 = (SNode) parameter_1;
    if (quotedNode_6 != null) {
      quotedNode_4.addChild("operand", HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_2.addChild("operand", quotedNode_4);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_b0a0b0a4a13(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SPropertyAccess", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.setReference("property", jetbrains.mps.smodel.SReference.create("property", quotedNode_3, SModelReference.fromString("r:00000000-0000-4000-0000-011c89590292(jetbrains.mps.lang.structure.structure)"), SNodeId.fromString("4628067390765956807")));
    quotedNode_2.addChild("operation", quotedNode_3);
    quotedNode_4 = (SNode) parameter_1;
    if (quotedNode_4 != null) {
      quotedNode_2.addChild("operand", HUtil.copyIfNecessary(quotedNode_4));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_c0a0b0a4a13(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SPropertyAccess", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.setReference("property", jetbrains.mps.smodel.SReference.create("property", quotedNode_3, SModelReference.fromString("r:00000000-0000-4000-0000-011c89590292(jetbrains.mps.lang.structure.structure)"), SNodeId.fromString("4628067390765956807")));
    quotedNode_2.addChild("operation", quotedNode_3);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_GetConceptOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_4.addChild("operation", quotedNode_5);
    quotedNode_6 = (SNode) parameter_1;
    if (quotedNode_6 != null) {
      quotedNode_4.addChild("operand", HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_2.addChild("operand", quotedNode_4);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_b0a0c0a4a13(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SPropertyAccess", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.setReference("property", jetbrains.mps.smodel.SReference.create("property", quotedNode_3, SModelReference.fromString("r:00000000-0000-4000-0000-011c89590292(jetbrains.mps.lang.structure.structure)"), SNodeId.fromString("4628067390765956802")));
    quotedNode_2.addChild("operation", quotedNode_3);
    quotedNode_4 = (SNode) parameter_1;
    if (quotedNode_4 != null) {
      quotedNode_2.addChild("operand", HUtil.copyIfNecessary(quotedNode_4));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_c0a0c0a4a13(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SPropertyAccess", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.setReference("property", jetbrains.mps.smodel.SReference.create("property", quotedNode_3, SModelReference.fromString("r:00000000-0000-4000-0000-011c89590292(jetbrains.mps.lang.structure.structure)"), SNodeId.fromString("4628067390765956802")));
    quotedNode_2.addChild("operation", quotedNode_3);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_GetConceptOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_4.addChild("operation", quotedNode_5);
    quotedNode_6 = (SNode) parameter_1;
    if (quotedNode_6 != null) {
      quotedNode_4.addChild("operand", HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_2.addChild("operand", quotedNode_4);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_b0a0d0a4a13(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Concept_IsSubConceptOfOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.RefConcept_Reference", null, null, GlobalScope.getInstance(), false);
    quotedNode_5.setReference("conceptDeclaration", jetbrains.mps.smodel.SReference.create("conceptDeclaration", quotedNode_5, SModelReference.fromString("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)"), SNodeId.fromString("1835621062190663819")));
    quotedNode_3.addChild("conceptArgument", quotedNode_5);
    quotedNode_2.addChild("operation", quotedNode_3);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_7 = (SNode) parameter_1;
    if (quotedNode_7 != null) {
      quotedNode_6.addChild("expression", HUtil.copyIfNecessary(quotedNode_7));
    }
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SConceptType", null, null, GlobalScope.getInstance(), false);
    quotedNode_6.addChild("type", quotedNode_8);
    quotedNode_4.addChild("expression", quotedNode_6);
    quotedNode_2.addChild("operand", quotedNode_4);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_c0a0d0a4a13(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("operand", HUtil.copyIfNecessary(quotedNode_3));
    }
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_IsInstanceOfOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.RefConcept_Reference", null, null, GlobalScope.getInstance(), false);
    quotedNode_5.setReference("conceptDeclaration", jetbrains.mps.smodel.SReference.create("conceptDeclaration", quotedNode_5, SModelReference.fromString("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)"), SNodeId.fromString("1835621062190663819")));
    quotedNode_4.addChild("conceptArgument", quotedNode_5);
    quotedNode_2.addChild("operation", quotedNode_4);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_b0c0hb(Object parameter_1, Object parameter_2) {
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_4 = (SNode) parameter_1;
    if (quotedNode_4 != null) {
      quotedNode_3.addChild("operand", HUtil.copyIfNecessary(quotedNode_4));
    }
    quotedNode_5 = (SNode) parameter_2;
    if (quotedNode_5 != null) {
      quotedNode_3.addChild("operation", HUtil.copyIfNecessary(quotedNode_5));
    }
    return quotedNode_3;
  }

  private static SNode _quotation_createNode_azpnkk_c0c0hb(Object parameter_1, Object parameter_2) {
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_6 = (SNode) parameter_1;
    if (quotedNode_6 != null) {
      quotedNode_4.addChild("operand", HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_GetConceptOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_4.addChild("operation", quotedNode_7);
    quotedNode_3.addChild("operand", quotedNode_4);
    quotedNode_5 = (SNode) parameter_2;
    if (quotedNode_5 != null) {
      quotedNode_3.addChild("operation", HUtil.copyIfNecessary(quotedNode_5));
    }
    return quotedNode_3;
  }

  private static SNode _quotation_createNode_azpnkk_a0a0a0c0jb(Object parameter_1) {
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.editor.structure.CellModel_Component", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_2, "editorComponent", (SNode) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_a0a0a0a2a53(Object parameter_1) {
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.editor.structure.CellModel_Component", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_2, "editorComponent", (SNode) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_a0d0e0jb() {
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.editor.structure.CellModel_ReadOnlyModelAccessor", null, null, GlobalScope.getInstance(), false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.editor.structure.ReadOnlyModelAccessor", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.editor.structure.QueryFunction_ModelAccess_Getter", null, null, GlobalScope.getInstance(), false);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, GlobalScope.getInstance(), false);
    quotedNode_3.addChild("body", quotedNode_4);
    quotedNode_2.addChild("getter", quotedNode_3);
    quotedNode_1.addChild("modelAccessor", quotedNode_2);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_azpnkk_a0a0g0e0jb(Object parameter_1) {
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_4 = (SNode) parameter_1;
    if (quotedNode_4 != null) {
      quotedNode_3.addChild("operand", HUtil.copyIfNecessary(quotedNode_4));
    }
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_IsInstanceOfOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.RefConcept_Reference", null, null, GlobalScope.getInstance(), false);
    quotedNode_7.setReference("conceptDeclaration", jetbrains.mps.smodel.SReference.create("conceptDeclaration", quotedNode_7, SModelReference.fromString("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)"), SNodeId.fromString("1835621062190663819")));
    quotedNode_5.addChild("conceptArgument", quotedNode_7);
    quotedNode_3.addChild("operation", quotedNode_5);
    quotedNode_2.addChild("expression", quotedNode_3);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_azpnkk_a0a0a6a4a53(Object parameter_1, Object parameter_2) {
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    SNode quotedNode_9 = null;
    SNode quotedNode_10 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, GlobalScope.getInstance(), false);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_5 = (SNode) parameter_1;
    if (quotedNode_5 != null) {
      quotedNode_4.addChild("operation", HUtil.copyIfNecessary(quotedNode_5));
    }
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_GetConceptOperation", null, null, GlobalScope.getInstance(), false);
    quotedNode_6.addChild("operation", quotedNode_7);
    quotedNode_8 = (SNode) parameter_2;
    if (quotedNode_8 != null) {
      quotedNode_6.addChild("operand", HUtil.copyIfNecessary(quotedNode_8));
    }
    quotedNode_4.addChild("operand", quotedNode_6);
    quotedNode_3.addChild("expression", quotedNode_4);
    return quotedNode_3;
  }

  private static boolean neq_azpnkk_a0a4b0l0r(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  private static boolean eq_azpnkk_a0a0a2a52(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_azpnkk_a0a0a0c0z(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_azpnkk_a0a0a0a2a52(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_azpnkk_a0a0a0a0c0z(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_azpnkk_a0a0a0a0c0z_0(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_azpnkk_a0b0e0bb(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_azpnkk_a0a1a4a72(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_azpnkk_a0b1a4a72(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_azpnkk_a0c1a4a72(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_azpnkk_a0d1a4a72(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_azpnkk_a0a0e0fb(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_azpnkk_a0a0a4a13(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_azpnkk_a0b0a4a13(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_azpnkk_a0c0a4a13(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_azpnkk_a0d0a4a13(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_azpnkk_a0a0c0jb(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_azpnkk_a0a0a2a53(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_azpnkk_a0a6a4a53(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
