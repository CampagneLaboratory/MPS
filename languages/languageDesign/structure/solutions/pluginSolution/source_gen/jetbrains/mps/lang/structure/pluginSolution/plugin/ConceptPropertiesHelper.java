package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.project.Project;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.ide.project.ProjectHelper;
import java.util.Set;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.findUsages.FindUsagesManager;
import jetbrains.mps.findUsages.SearchType;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.ide.platform.refactoring.RefactoringAccess;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewAction;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewItem;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptPropertyOperations;
import jetbrains.mps.ide.findusages.model.SearchResults;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;

public class ConceptPropertiesHelper {
  private MPSProject project;
  private Project ideaProject;
  private IScope scope;

  public ConceptPropertiesHelper() {
  }

  public void migrate(MPSProject project) {
    this.project = project;
    this.ideaProject = ProjectHelper.toIdeaProject(project);
    this.scope = project.getScope();
    migrate();
  }

  public void migrate() {
    final Set<SNode> conceptUsages = SetSequence.fromSet(new HashSet<SNode>());
    final Set<SNode> accessUsages = SetSequence.fromSet(new HashSet<SNode>());
    final Set<SearchResult<SNode>> allUsages = SetSequence.fromSet(new HashSet<SearchResult<SNode>>());
    SNode aliasDecl = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(new ConceptPropertiesHelper.QuotationClass_azpnkk_a0a0a0d0b().createNode(), "operation", true), "jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess"), "conceptProperty", false);
    final Set<SNode> searchedNodes = SetSequence.fromSet(new HashSet<SNode>());
    SetSequence.fromSet(searchedNodes).addElement(aliasDecl);
    Set<SReference> usages = FindUsagesManager.getInstance().findUsages(searchedNodes, SearchType.USAGES, scope, new EmptyProgressMonitor());
    for (SReference usage : SetSequence.fromSet(usages)) {
      SNode node = usage.getSourceNode();
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.structure.structure.StringConceptProperty")) {
        SetSequence.fromSet(conceptUsages).addElement(SNodeOperations.getAncestor(SNodeOperations.cast(node, "jetbrains.mps.lang.structure.structure.StringConceptProperty"), "jetbrains.mps.lang.structure.structure.ConceptDeclaration", false, false));
      } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess")) {
        SetSequence.fromSet(accessUsages).addElement(SNodeOperations.cast(node, "jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess"));
      }
      SetSequence.fromSet(allUsages).addElement(new SearchResult<SNode>(node, ""));
    }

    RefactoringAccess.getInstance().showRefactoringView(ideaProject, new RefactoringViewAction() {
      public void performAction(RefactoringViewItem refactoringViewItem) {
        for (SNode concept : SetSequence.fromSet(conceptUsages)) {
          SPropertyOperations.set(concept, "conceptAlias", SConceptPropertyOperations.getString(concept, "alias"));
        }
        for (SNode node : SetSequence.fromSet(accessUsages)) {
          SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(new ConceptPropertiesHelper.QuotationClass_azpnkk_a0a0a0a1a0a0b0a9a1().createNode(), "operation", true));
        }
        refactoringViewItem.close();
      }
    }, new SearchResults<SNode>(searchedNodes, SetSequence.fromSet(allUsages).toListSequence()), false, "remove alias");






  }

  private void migrateAlias(List<SNode> affectedNodes) {
    Set<SearchResult<SNode>> results = SetSequence.fromSet(new HashSet<SearchResult<SNode>>());
    List<SModel> modelsToGenerate = ListSequence.fromList(new LinkedList<SModel>());
    for (SNode node : ListSequence.fromList(affectedNodes)) {
      SetSequence.fromSet(results).addElement(new SearchResult<SNode>(node, ""));
      ListSequence.fromList(modelsToGenerate).addElement(node.getModel());
    }
    SearchResults searchResults = new SearchResults(SetSequence.fromSet(new HashSet()), SetSequence.fromSet(results).toListSequence());
    RefactoringViewAction okAction = new RefactoringViewAction() {
      public void performAction(final RefactoringViewItem refactoringViewItem) {
        ModelAccess.instance().runWriteInEDT(new Runnable() {
          public void run() {

            refactoringViewItem.close();
          }
        });
      }
    };
    RefactoringAccess.getInstance().showRefactoringView(ProjectHelper.toIdeaProject(project), okAction, searchResults, false, "Remove Alias");

  }

  public Set<SNode> affectedNodes() {
    Set<SNode> results = SetSequence.fromSet(new HashSet<SNode>());
    for (IModule module : ListSequence.fromList(project.getModules())) {
      if (!(module instanceof Language)) {
        continue;
      }
      ModuleDescriptor descriptor = module.getModuleDescriptor();
      if (descriptor == null) {
        continue;
      }

      for (SModelDescriptor modelDescriptor : ListSequence.fromList(module.getOwnModelDescriptors())) {
        SModel model = modelDescriptor.getSModel();
        for (SNode node : ListSequence.fromList(SModelOperations.getRoots(model, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
          if (node.findConceptProperty("alias") != null) {
            SetSequence.fromSet(results).addElement(node);
          }
        }
      }
    }
    return results;
  }

  public static class QuotationClass_azpnkk_a0a0a0d0b {
    public QuotationClass_azpnkk_a0a0a0d0b() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      SNode quotedNode_5 = null;
      SNode quotedNode_6 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_7 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_8 = quotedNode_2;
          {
            quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.GenericNewExpression", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_9 = quotedNode_4;
            {
              quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeCreator", null, GlobalScope.getInstance(), false);
              SNode quotedNode1_10 = quotedNode_5;
              {
                quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, GlobalScope.getInstance(), false);
                SNode quotedNode1_11 = quotedNode_6;
                quotedNode1_11.setReference("concept", SReference.create("concept", quotedNode1_11, SModelReference.fromString("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)"), SNodeId.fromString("1133920641626")));
                quotedNode_5.addChild("createdType", quotedNode1_11);
              }
              quotedNode_4.addChild("creator", quotedNode1_10);
            }
            quotedNode_2.addChild("expression", quotedNode1_9);
          }
          quotedNode_1.addChild("operand", quotedNode1_8);
        }
        {
          quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SConceptPropertyAccess", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_12 = quotedNode_3;
          quotedNode1_12.setReference("conceptProperty", SReference.create("conceptProperty", quotedNode1_12, SModelReference.fromString("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)"), SNodeId.fromString("1137473891462")));
          quotedNode_1.addChild("operation", quotedNode1_12);
        }
        result = quotedNode1_7;
      }
      return result;
    }
  }

  public static class QuotationClass_azpnkk_a0a0a0a1a0a0b0a9a1 {
    public QuotationClass_azpnkk_a0a0a0a1a0a0b0a9a1() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      SNode quotedNode_5 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_6 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.GenericNewExpression", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_7 = quotedNode_2;
          {
            quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeCreator", null, GlobalScope.getInstance(), false);
            SNode quotedNode1_8 = quotedNode_4;
            {
              quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", null, GlobalScope.getInstance(), false);
              SNode quotedNode1_9 = quotedNode_5;
              quotedNode1_9.setReference("concept", SReference.create("concept", quotedNode1_9, SModelReference.fromString("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)"), SNodeId.fromString("1133920641626")));
              quotedNode_4.addChild("createdType", quotedNode1_9);
            }
            quotedNode_2.addChild("creator", quotedNode1_8);
          }
          quotedNode_1.addChild("operand", quotedNode1_7);
        }
        {
          quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SPropertyAccess", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_10 = quotedNode_3;
          quotedNode1_10.setReference("property", SReference.create("property", quotedNode1_10, SModelReference.fromString("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)"), SNodeId.fromString("5092175715804935370")));
          quotedNode_1.addChild("operation", quotedNode1_10);
        }
        result = quotedNode1_6;
      }
      return result;
    }
  }
}
