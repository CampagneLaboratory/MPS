package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.module.ModelAccess;
import jetbrains.mps.refactoring.framework.IRefactoring;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.refactoring.framework.RefactoringUtil;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.ide.platform.refactoring.RefactoringAccess;
import jetbrains.mps.openapi.editor.EditorContext;
import javax.swing.JOptionPane;
import jetbrains.mps.ide.project.ProjectHelper;

public class CommitUtil {
  public static void refactorRenameNode(final IOperationContext context, final SNode node, final String newName) {
    final Project project = context.getProject();
    final SRepository repository = project.getRepository();
    ModelAccess modelAccess = repository.getModelAccess();

    modelAccess.executeCommand(new Runnable() {
      public void run() {
        repository.saveAll();
      }
    });

    modelAccess.runReadInEDT(new Runnable() {
      public void run() {
        IRefactoring refactoring;
        SNode refactoringNode = (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration") ?
          SNodeOperations.getNode("r:de5b7214-45ee-4f6d-89bf-acde59cdb050(jetbrains.mps.lang.structure.refactorings)", "1347577327951781517") :
          (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.structure.structure.PropertyDeclaration") ?
            SNodeOperations.getNode("r:de5b7214-45ee-4f6d-89bf-acde59cdb050(jetbrains.mps.lang.structure.refactorings)", "1347577327951781764") :
            (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.structure.structure.LinkDeclaration") ?
              SNodeOperations.getNode("r:de5b7214-45ee-4f6d-89bf-acde59cdb050(jetbrains.mps.lang.structure.refactorings)", "1347577327951781638") :
              null
            )
          )
        );
        refactoring = (refactoringNode != null ?
          RefactoringUtil.getRefactoringByClassName(BehaviorReflection.invokeVirtual(String.class, refactoringNode, "virtual_getFqName_1213877404258", new Object[]{})) :
          null
        );
        if (refactoring == null) {
          return;
        }

        final RefactoringContext refactoringContext = new RefactoringContext(project, refactoring);
        refactoringContext.setCurrentOperationContext(context);
        refactoringContext.setSelectedNode(node);
        refactoringContext.setSelectedModel(SNodeOperations.getModel(node));
        refactoringContext.setSelectedModule(context.getModule());

        // set new name parameter for refactoring to skip initial dialog 
        refactoringContext.setParameter("newName", newName);
        final IRefactoring fRefactoring = refactoring;
        refactoringContext.setRefactoring(fRefactoring);
        RefactoringAccess.getInstance().getRefactoringFacade().execute(refactoringContext);
      }
    });
  }

  public static boolean commitRename(EditorContext editorContext, SNode node, String oldValue, String newValue) {
    if (oldValue == null) {
      return false;
    }
    if (oldValue.equals(newValue)) {
      return true;
    }
    int res = JOptionPane.showConfirmDialog(ProjectHelper.toMainFrame(editorContext.getOperationContext().getProject()), "Renaming " + "this element" + " can break your model. It is advised to use refactoring for this. Execute refactoring?", "Rename " + "element", JOptionPane.YES_NO_CANCEL_OPTION);
    if (res == JOptionPane.YES_OPTION) {
      refactorRenameNode(editorContext.getOperationContext(), node, newValue);
    }
    return (res != JOptionPane.NO_OPTION && res != JOptionPane.CLOSED_OPTION);
  }
}
