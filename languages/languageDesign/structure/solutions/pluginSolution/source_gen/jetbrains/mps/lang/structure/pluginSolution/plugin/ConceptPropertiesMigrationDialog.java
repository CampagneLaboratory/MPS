package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import com.intellij.openapi.ui.DialogWrapper;
import jetbrains.mps.project.MPSProject;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.Action;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.intellij.openapi.project.Project;
import javax.swing.AbstractAction;
import java.awt.event.ActionEvent;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.annotations.Nullable;
import javax.swing.JComponent;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public class ConceptPropertiesMigrationDialog extends DialogWrapper {
  private MPSProject mpsProject;
  private JPanel myPanel;
  protected JLabel myLabel = new JLabel();
  private Action myMigrateAction;
  private Action myNextAction;
  private _FunctionTypes._void_P0_E0 action;
  private _FunctionTypes._void_P0_E0 nextAction;

  public ConceptPropertiesMigrationDialog(Project project, MPSProject mpsProject) {
    super(project);
    this.mpsProject = mpsProject;
    myNextAction = new AbstractAction() {
      public void actionPerformed(ActionEvent p0) {
        ConceptPropertiesMigrationDialog.this.close(OK_EXIT_CODE);
        ModelAccess.instance().runReadInEDT(new Runnable() {
          public void run() {
            ConceptPropertiesMigrationDialog.this.nextAction.invoke();
          }
        });
      }
    };
    myNextAction.putValue(Action.NAME, "Next Step");

    init();
    setResizable(false);
    setTitle("Get rid of concept properties");
  }

  @Nullable
  protected JComponent createCenterPanel() {
    myPanel = new JPanel(new GridBagLayout());
    GridBagConstraints c = new GridBagConstraints();
    c.gridx = 0;
    c.gridy = 0;
    c.weightx = 0;
    c.anchor = GridBagConstraints.FIRST_LINE_START;
    c.insets = new Insets(4, 8, 8, 8);
    myPanel.add(myLabel, c);
    return myPanel;
  }

  public void setAction(_FunctionTypes._void_P0_E0 action) {
    this.action = action;
  }

  public void setNextAction(_FunctionTypes._void_P0_E0 action) {
    this.nextAction = action;
  }

  public void setText(String labelText) {
    myLabel.setText(labelText);
  }

  protected Action[] createActions() {
    List<Action> actions = ListSequence.fromList(new ArrayList<Action>());
    ListSequence.fromList(actions).addElement(getCancelAction());
    ListSequence.fromList(actions).addElement(myMigrateAction);
    ListSequence.fromList(actions).addElement(myNextAction);
    return ListSequence.fromList(actions).toGenericArray(Action.class);
  }

  @Override
  protected void createDefaultActions() {
    super.createDefaultActions();
    myMigrateAction = new ConceptPropertiesMigrationDialog.MigrateAction();
  }

  private void doMigrate() {
    this.close(OK_EXIT_CODE);
    ModelAccess.instance().runReadInEDT(new Runnable() {
      public void run() {
        action.invoke();
      }
    });
  }

  private class MigrateAction extends AbstractAction {
    public MigrateAction() {
      putValue(NAME, "Migrate");
      putValue(DEFAULT_ACTION, Boolean.TRUE);
    }

    public void actionPerformed(ActionEvent event) {
      doMigrate();
    }
  }
}
