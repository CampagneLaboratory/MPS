package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import com.intellij.openapi.ui.DialogWrapper;
import javax.swing.JPanel;
import javax.swing.JLabel;
import com.intellij.openapi.progress.util.ProgressBar;
import javax.swing.Action;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.Nullable;
import javax.swing.JComponent;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.Dimension;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import java.awt.event.ActionEvent;

public class ConceptPropertiesMigrationDialog extends DialogWrapper {
  private JPanel myPanel;
  protected JLabel myLabel = new JLabel();
  protected ProgressBar myProgressBar = new ProgressBar();
  private Action myMigrateAction;
  private int step;

  public ConceptPropertiesMigrationDialog(Project project) {
    super(project);
    step = 1;
    init();
    setResizable(false);
  }

  @Nullable
  protected JComponent createCenterPanel() {
    myPanel = new JPanel(new GridBagLayout());
    GridBagConstraints c = new GridBagConstraints();
    c.gridx = 0;
    c.gridy = 0;
    c.weightx = 0;
    c.anchor = GridBagConstraints.FIRST_LINE_START;
    c.insets = new Insets(4, 8, 8, 8);
    myLabel.setText("Hello");
    myPanel.add(myLabel, c);

    c = new GridBagConstraints();

    c.fill = GridBagConstraints.HORIZONTAL;
    c.gridx = 0;
    c.gridy = 1;
    c.weightx = 1;
    c.weighty = 1;
    c.insets = new Insets(4, 8, 4, 8);

    c.anchor = GridBagConstraints.FIRST_LINE_START;
    myPanel.add(myProgressBar, c);
    myPanel.setPreferredSize(new Dimension(500, 200));
    return myPanel;


  }

  protected Action[] createActions() {
    List<Action> actions = ListSequence.fromList(new ArrayList<Action>());
    ListSequence.fromList(actions).addElement(getCancelAction());
    ListSequence.fromList(actions).addElement(myMigrateAction);
    return ListSequence.fromList(actions).toGenericArray(Action.class);
  }

  @Override
  protected void createDefaultActions() {
    super.createDefaultActions();
    myMigrateAction = new ConceptPropertiesMigrationDialog.MigrateAction();
  }

  private void doMigrate() {
    for (int i = 0; i != 100; ++i) {
      myProgressBar.setFraction(((double) i) / 100);
      try {
        Thread.sleep(1000);

      } catch (Exception e) {
      }
    }
  }

  private class MigrateAction extends AbstractAction {
    public MigrateAction() {
      putValue(NAME, "Migrate");
      putValue(DEFAULT_ACTION, Boolean.TRUE);
    }

    public void actionPerformed(ActionEvent event) {
      doMigrate();
    }
  }
}
