package jetbrains.mps.lang.refactoring.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.node.EditorAspectDescriptor;
import jetbrains.mps.openapi.editor.node.EditorAspect;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public EditorAspect getAspect(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return new AbstractMoveExpression_Editor();
      case 1:
        return new AbstractUIArgumentExpression_Editor();
      case 2:
        return new ChangeFeatureNameExpression_Editor();
      case 3:
        return new ChangeFeatureNameOperation_Editor();
      case 4:
        return new ContextMemberOperation_Editor();
      case 5:
        return new ContextType_Editor();
      case 6:
        return new CreateRefactoringContext_Editor();
      case 7:
        return new DeleteFeatureExpression_Editor();
      case 8:
        return new DeleteFeatureOperation_Editor();
      case 9:
        return new ExecuteFindersExpression_Editor();
      case 10:
        return new ExecuteRefactoringStatement_Editor();
      case 11:
        return new FinderReference_Editor();
      case 12:
        return new IsRefactoringApplicable_Editor();
      case 13:
        return new MergeNodeWithAnotherNodeExpression_Editor();
      case 14:
        return new ModelTarget_Editor();
      case 15:
        return new ModelsToGenerateByDefault_Editor();
      case 16:
        return new ModuleTarget_Editor();
      case 17:
        return new MoveNodeToNodeExpression_Editor();
      case 18:
        return new MoveNodesToNodeExpression_Editor();
      case 19:
        return new NodeTarget_Editor();
      case 20:
        return new OldRefactoring_Editor();
      case 21:
        return new Refactoring_Editor();
      case 22:
        return new RefactoringParameter_Editor();
      case 23:
        return new RefactoringParameterReference_Editor();
      case 24:
        return new RequiredAdditionalArgument_Editor();
      case 25:
        return new RequiredAdditionalArgumentReference_Editor();
      case 26:
        return new RequiredUserEnteredArgument_Editor();
      case 27:
        return new UpdateModelByDefaultOperation_Editor();
      case 28:
        return new UpdateModelProcedure_Editor();
      default:
    }
    return null;
  }

  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression", "jetbrains.mps.lang.refactoring.structure.AbstractUIArgumentExpression", "jetbrains.mps.lang.refactoring.structure.ChangeFeatureNameExpression", "jetbrains.mps.lang.refactoring.structure.ChangeFeatureNameOperation", "jetbrains.mps.lang.refactoring.structure.ContextMemberOperation", "jetbrains.mps.lang.refactoring.structure.ContextType", "jetbrains.mps.lang.refactoring.structure.CreateRefactoringContext", "jetbrains.mps.lang.refactoring.structure.DeleteFeatureExpression", "jetbrains.mps.lang.refactoring.structure.DeleteFeatureOperation", "jetbrains.mps.lang.refactoring.structure.ExecuteFindersExpression", "jetbrains.mps.lang.refactoring.structure.ExecuteRefactoringStatement", "jetbrains.mps.lang.refactoring.structure.FinderReference", "jetbrains.mps.lang.refactoring.structure.IsRefactoringApplicable", "jetbrains.mps.lang.refactoring.structure.MergeNodeWithAnotherNodeExpression", "jetbrains.mps.lang.refactoring.structure.ModelTarget", "jetbrains.mps.lang.refactoring.structure.ModelsToGenerateByDefault", "jetbrains.mps.lang.refactoring.structure.ModuleTarget", "jetbrains.mps.lang.refactoring.structure.MoveNodeToNodeExpression", "jetbrains.mps.lang.refactoring.structure.MoveNodesToNodeExpression", "jetbrains.mps.lang.refactoring.structure.NodeTarget", "jetbrains.mps.lang.refactoring.structure.OldRefactoring", "jetbrains.mps.lang.refactoring.structure.Refactoring", "jetbrains.mps.lang.refactoring.structure.RefactoringParameter", "jetbrains.mps.lang.refactoring.structure.RefactoringParameterReference", "jetbrains.mps.lang.refactoring.structure.RequiredAdditionalArgument", "jetbrains.mps.lang.refactoring.structure.RequiredAdditionalArgumentReference", "jetbrains.mps.lang.refactoring.structure.RequiredUserEnteredArgument", "jetbrains.mps.lang.refactoring.structure.UpdateModelByDefaultOperation", "jetbrains.mps.lang.refactoring.structure.UpdateModelProcedure"};
}
