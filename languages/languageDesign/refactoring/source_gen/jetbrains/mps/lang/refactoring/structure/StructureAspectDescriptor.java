package jetbrains.mps.lang.refactoring.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractMoveExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.refactoring.structure.RefactoringAction").children(new String[]{"whatToMove", "destination"}, new boolean[]{false, false}).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAbstractMoveNodeExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAbstractMoveNodesExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAffectedNodesClause = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.AffectedNodesClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("affected nodes", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptChangeFeatureNameExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ChangeFeatureNameExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.refactoring.structure.RefactoringAction").children(new String[]{"feature", "newConceptFQName", "newFeatureName"}, new boolean[]{false, false, false}).alias("changeFeatureName", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_Model = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_Model").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("model", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_Module = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_Module").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("module", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_SModel = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_SModel").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("model", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_SNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_SNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("node", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptContextMemberOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptContextType = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ContextType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("refcontext", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCreateRefactoringContext = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.CreateRefactoringContext").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("refactoring").children(new String[]{"target", "parameters", "project"}, new boolean[]{false, true, false}).alias("create refcontext", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDeleteFeatureExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.DeleteFeatureExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.refactoring.structure.RefactoringAction").children(new String[]{"feature"}, new boolean[]{false}).alias("deleteFeature", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDoRefactorClause = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.DoRefactorClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("refactor", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDoWhenDoneClause = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.DoWhenDoneClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("doWhenDone", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExecuteRefactoringStatement = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ExecuteRefactoringStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").references("refactoring").children(new String[]{"target", "parameters", "project"}, new boolean[]{false, true, false}).alias("execute refactoring", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetModelsToUpdateClause = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.GetModelsToUpdateClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("additional models to update", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInitClause = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.InitClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("init", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIsApplicableToModelClause = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.IsApplicableToModelClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("isApplicableToModel", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIsApplicableToModuleClause = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.IsApplicableToModuleClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("isApplicableToModule", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIsApplicableToNodeClause = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.IsApplicableToNodeClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("isApplicableToNode", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIsRefactoringApplicable = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.IsRefactoringApplicable").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("refactoring").children(new String[]{"target"}, new boolean[]{false}).alias("is applicable refactoring", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMainProjectOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.MainProjectOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("project", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMergeNodeWithAnotherNodeExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.MergeNodeWithAnotherNodeExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").alias("mergeNode", "merge node with another node").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptModelDescriptorOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModelDescriptorOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("modelDescriptor", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptModelTarget = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModelTarget").super_("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").parents("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").children(new String[]{"isApplicableBlock"}, new boolean[]{false}).alias("model", "").create();
  /*package*/ final ConceptDescriptor myConceptModelsToGenerateByDefault = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModelsToGenerateByDefault").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("models from usages", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptModelsToGenerateClause = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModelsToGenerateClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("models to generate", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptModuleOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModuleOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("module", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptModuleTarget = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModuleTarget").super_("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").parents("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").children(new String[]{"moduleType", "isApplicableBlock"}, new boolean[]{false, false}).alias("module", "").create();
  /*package*/ final ConceptDescriptor myConceptMoveNodeToModelExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.MoveNodeToModelExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").alias("moveNode", "move node to model").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMoveNodeToNodeExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.MoveNodeToNodeExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").children(new String[]{"roleInTarget"}, new boolean[]{false}).alias("moveNode", "move node to another node").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMoveNodesToModelExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.MoveNodesToModelExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression").alias("moveNodes", "move nodes to model").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMoveNodesToNodeExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.MoveNodesToNodeExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression").children(new String[]{"roleInTarget"}, new boolean[]{false}).alias("moveNodes", "move nodes to another node").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNodeOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.NodeOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("node", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNodeTarget = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.NodeTarget").super_("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").parents("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").references("concept").children(new String[]{"isApplicableBlock"}, new boolean[]{false}).alias("node", "").create();
  /*package*/ final ConceptDescriptor myConceptNodesOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.NodesOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("nodes", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptOperationContextOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.OperationContextOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("operationContext", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptProjectOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ProjectOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("mpsProject", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRefactoring = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.Refactoring").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.structure.structure.IConceptAspect").properties("userFriendlyName").references("overrides").children(new String[]{"target", "parameter", "field", "initBlock", "doRefactorBlock", "modelsToGenerateBlock", "doWhenDoneBlock", "affectedNodesBlock", "updateModelBlock"}, new boolean[]{false, true, true, false, false, false, false, false, false}).create();
  /*package*/ final ConceptDescriptor myConceptRefactoringAction = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringAction").interface_().create();
  /*package*/ final ConceptDescriptor myConceptRefactoringArgument = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringArgument").interface_().create();
  /*package*/ final ConceptDescriptor myConceptRefactoringArgumentReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringArgumentReference").interface_().create();
  /*package*/ final ConceptDescriptor myConceptRefactoringContext_ConceptFunctionParameter = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringContext_ConceptFunctionParameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("refactoringContext", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRefactoringField = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringField").super_("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration", "jetbrains.mps.lang.refactoring.structure.RefactoringArgument").create();
  /*package*/ final ConceptDescriptor myConceptRefactoringFieldReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringFieldReference").super_("jetbrains.mps.baseLanguage.structure.BaseVariableReference").parents("jetbrains.mps.baseLanguage.structure.BaseVariableReference", "jetbrains.mps.lang.refactoring.structure.RefactoringArgumentReference").references("refactoringField").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRefactoringParameter = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringParameter").super_("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration", "jetbrains.mps.lang.refactoring.structure.RefactoringArgument").create();
  /*package*/ final ConceptDescriptor myConceptRefactoringParameterReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringParameterReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.refactoring.structure.RefactoringArgumentReference").references("refactoringParameter").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRefactoringTarget = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("allowMultiple").children(new String[]{"isApplicableBlock"}, new boolean[]{false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptRepositoryOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RepositoryOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("repository", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptScopeOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ScopeOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("scope", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptUpdateModelByDefaultOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.UpdateModelByDefaultOperation").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").alias("updateModelByDefault", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptUpdateModelClause = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.UpdateModelClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("updateModel", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptUpdateModelProcedure = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.UpdateModelProcedure").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"argument"}, new boolean[]{false}).alias("updateModel(...)", "").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractMoveExpression, myConceptAbstractMoveNodeExpression, myConceptAbstractMoveNodesExpression, myConceptAffectedNodesClause, myConceptChangeFeatureNameExpression, myConceptConceptFunctionParameter_Model, myConceptConceptFunctionParameter_Module, myConceptConceptFunctionParameter_SModel, myConceptConceptFunctionParameter_SNode, myConceptContextMemberOperation, myConceptContextType, myConceptCreateRefactoringContext, myConceptDeleteFeatureExpression, myConceptDoRefactorClause, myConceptDoWhenDoneClause, myConceptExecuteRefactoringStatement, myConceptGetModelsToUpdateClause, myConceptInitClause, myConceptIsApplicableToModelClause, myConceptIsApplicableToModuleClause, myConceptIsApplicableToNodeClause, myConceptIsRefactoringApplicable, myConceptMainProjectOperation, myConceptMergeNodeWithAnotherNodeExpression, myConceptModelDescriptorOperation, myConceptModelTarget, myConceptModelsToGenerateByDefault, myConceptModelsToGenerateClause, myConceptModuleOperation, myConceptModuleTarget, myConceptMoveNodeToModelExpression, myConceptMoveNodeToNodeExpression, myConceptMoveNodesToModelExpression, myConceptMoveNodesToNodeExpression, myConceptNodeOperation, myConceptNodeTarget, myConceptNodesOperation, myConceptOperationContextOperation, myConceptProjectOperation, myConceptRefactoring, myConceptRefactoringAction, myConceptRefactoringArgument, myConceptRefactoringArgumentReference, myConceptRefactoringContext_ConceptFunctionParameter, myConceptRefactoringField, myConceptRefactoringFieldReference, myConceptRefactoringParameter, myConceptRefactoringParameterReference, myConceptRefactoringTarget, myConceptRepositoryOperation, myConceptScopeOperation, myConceptUpdateModelByDefaultOperation, myConceptUpdateModelClause, myConceptUpdateModelProcedure);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0fc, conceptFqName)) {
      case 0:
        return myConceptAbstractMoveExpression;
      case 1:
        return myConceptAbstractMoveNodeExpression;
      case 2:
        return myConceptAbstractMoveNodesExpression;
      case 3:
        return myConceptAffectedNodesClause;
      case 4:
        return myConceptChangeFeatureNameExpression;
      case 5:
        return myConceptConceptFunctionParameter_Model;
      case 6:
        return myConceptConceptFunctionParameter_Module;
      case 7:
        return myConceptConceptFunctionParameter_SModel;
      case 8:
        return myConceptConceptFunctionParameter_SNode;
      case 9:
        return myConceptContextMemberOperation;
      case 10:
        return myConceptContextType;
      case 11:
        return myConceptCreateRefactoringContext;
      case 12:
        return myConceptDeleteFeatureExpression;
      case 13:
        return myConceptDoRefactorClause;
      case 14:
        return myConceptDoWhenDoneClause;
      case 15:
        return myConceptExecuteRefactoringStatement;
      case 16:
        return myConceptGetModelsToUpdateClause;
      case 17:
        return myConceptInitClause;
      case 18:
        return myConceptIsApplicableToModelClause;
      case 19:
        return myConceptIsApplicableToModuleClause;
      case 20:
        return myConceptIsApplicableToNodeClause;
      case 21:
        return myConceptIsRefactoringApplicable;
      case 22:
        return myConceptMainProjectOperation;
      case 23:
        return myConceptMergeNodeWithAnotherNodeExpression;
      case 24:
        return myConceptModelDescriptorOperation;
      case 25:
        return myConceptModelTarget;
      case 26:
        return myConceptModelsToGenerateByDefault;
      case 27:
        return myConceptModelsToGenerateClause;
      case 28:
        return myConceptModuleOperation;
      case 29:
        return myConceptModuleTarget;
      case 30:
        return myConceptMoveNodeToModelExpression;
      case 31:
        return myConceptMoveNodeToNodeExpression;
      case 32:
        return myConceptMoveNodesToModelExpression;
      case 33:
        return myConceptMoveNodesToNodeExpression;
      case 34:
        return myConceptNodeOperation;
      case 35:
        return myConceptNodeTarget;
      case 36:
        return myConceptNodesOperation;
      case 37:
        return myConceptOperationContextOperation;
      case 38:
        return myConceptProjectOperation;
      case 39:
        return myConceptRefactoring;
      case 40:
        return myConceptRefactoringAction;
      case 41:
        return myConceptRefactoringArgument;
      case 42:
        return myConceptRefactoringArgumentReference;
      case 43:
        return myConceptRefactoringContext_ConceptFunctionParameter;
      case 44:
        return myConceptRefactoringField;
      case 45:
        return myConceptRefactoringFieldReference;
      case 46:
        return myConceptRefactoringParameter;
      case 47:
        return myConceptRefactoringParameterReference;
      case 48:
        return myConceptRefactoringTarget;
      case 49:
        return myConceptRepositoryOperation;
      case 50:
        return myConceptScopeOperation;
      case 51:
        return myConceptUpdateModelByDefaultOperation;
      case 52:
        return myConceptUpdateModelClause;
      case 53:
        return myConceptUpdateModelProcedure;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0fc = new String[]{"jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression", "jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression", "jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression", "jetbrains.mps.lang.refactoring.structure.AffectedNodesClause", "jetbrains.mps.lang.refactoring.structure.ChangeFeatureNameExpression", "jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_Model", "jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_Module", "jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_SModel", "jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_SNode", "jetbrains.mps.lang.refactoring.structure.ContextMemberOperation", "jetbrains.mps.lang.refactoring.structure.ContextType", "jetbrains.mps.lang.refactoring.structure.CreateRefactoringContext", "jetbrains.mps.lang.refactoring.structure.DeleteFeatureExpression", "jetbrains.mps.lang.refactoring.structure.DoRefactorClause", "jetbrains.mps.lang.refactoring.structure.DoWhenDoneClause", "jetbrains.mps.lang.refactoring.structure.ExecuteRefactoringStatement", "jetbrains.mps.lang.refactoring.structure.GetModelsToUpdateClause", "jetbrains.mps.lang.refactoring.structure.InitClause", "jetbrains.mps.lang.refactoring.structure.IsApplicableToModelClause", "jetbrains.mps.lang.refactoring.structure.IsApplicableToModuleClause", "jetbrains.mps.lang.refactoring.structure.IsApplicableToNodeClause", "jetbrains.mps.lang.refactoring.structure.IsRefactoringApplicable", "jetbrains.mps.lang.refactoring.structure.MainProjectOperation", "jetbrains.mps.lang.refactoring.structure.MergeNodeWithAnotherNodeExpression", "jetbrains.mps.lang.refactoring.structure.ModelDescriptorOperation", "jetbrains.mps.lang.refactoring.structure.ModelTarget", "jetbrains.mps.lang.refactoring.structure.ModelsToGenerateByDefault", "jetbrains.mps.lang.refactoring.structure.ModelsToGenerateClause", "jetbrains.mps.lang.refactoring.structure.ModuleOperation", "jetbrains.mps.lang.refactoring.structure.ModuleTarget", "jetbrains.mps.lang.refactoring.structure.MoveNodeToModelExpression", "jetbrains.mps.lang.refactoring.structure.MoveNodeToNodeExpression", "jetbrains.mps.lang.refactoring.structure.MoveNodesToModelExpression", "jetbrains.mps.lang.refactoring.structure.MoveNodesToNodeExpression", "jetbrains.mps.lang.refactoring.structure.NodeOperation", "jetbrains.mps.lang.refactoring.structure.NodeTarget", "jetbrains.mps.lang.refactoring.structure.NodesOperation", "jetbrains.mps.lang.refactoring.structure.OperationContextOperation", "jetbrains.mps.lang.refactoring.structure.ProjectOperation", "jetbrains.mps.lang.refactoring.structure.Refactoring", "jetbrains.mps.lang.refactoring.structure.RefactoringAction", "jetbrains.mps.lang.refactoring.structure.RefactoringArgument", "jetbrains.mps.lang.refactoring.structure.RefactoringArgumentReference", "jetbrains.mps.lang.refactoring.structure.RefactoringContext_ConceptFunctionParameter", "jetbrains.mps.lang.refactoring.structure.RefactoringField", "jetbrains.mps.lang.refactoring.structure.RefactoringFieldReference", "jetbrains.mps.lang.refactoring.structure.RefactoringParameter", "jetbrains.mps.lang.refactoring.structure.RefactoringParameterReference", "jetbrains.mps.lang.refactoring.structure.RefactoringTarget", "jetbrains.mps.lang.refactoring.structure.RepositoryOperation", "jetbrains.mps.lang.refactoring.structure.ScopeOperation", "jetbrains.mps.lang.refactoring.structure.UpdateModelByDefaultOperation", "jetbrains.mps.lang.refactoring.structure.UpdateModelClause", "jetbrains.mps.lang.refactoring.structure.UpdateModelProcedure"};
}
