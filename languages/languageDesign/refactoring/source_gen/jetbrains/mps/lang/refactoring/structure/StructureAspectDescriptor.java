package jetbrains.mps.lang.refactoring.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.AffectedNodesClause", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.ChangeFeatureNameExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_Model", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_Module", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_SModel", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_SNode", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.ContextType", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.CreateRefactoringContext", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.DeleteFeatureExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.DoRefactorClause", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.DoWhenDoneClause", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.ExecuteRefactoringStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.GetModelsToUpdateClause", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.InitClause", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.IsApplicableToModelClause", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.IsApplicableToModuleClause", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.IsApplicableToNodeClause", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.IsRefactoringApplicable", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.MainProjectOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.MergeNodeWithAnotherNodeExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.ModelDescriptorOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.ModelTarget", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.ModelsToGenerateByDefault", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.ModelsToGenerateClause", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.ModuleOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.ModuleTarget", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.MoveNodeToModelExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.MoveNodeToNodeExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.MoveNodesToModelExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.MoveNodesToNodeExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.NodeOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.NodeTarget", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.NodesOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.OperationContextOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.ProjectOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.Refactoring", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.RefactoringAction", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.RefactoringArgument", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.RefactoringArgumentReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.RefactoringContext_ConceptFunctionParameter", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.RefactoringField", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.RefactoringFieldReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.RefactoringParameter", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.RefactoringParameterReference", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.RefactoringTarget", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.RepositoryOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.ScopeOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.UpdateModelByDefaultOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.UpdateModelClause", null);
    myFqNameToConcept.put("jetbrains.mps.lang.refactoring.structure.UpdateModelProcedure", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.refactoring.structure.RefactoringAction").children(new String[]{"whatToMove", "destination"}, new boolean[]{false, false}).abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression").staticScope(StaticScope.NONE).create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.AffectedNodesClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("affected nodes", "").staticScope(StaticScope.NONE).create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ChangeFeatureNameExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.refactoring.structure.RefactoringAction").children(new String[]{"feature", "newConceptFQName", "newFeatureName"}, new boolean[]{false, false, false}).alias("changeFeatureName", "").staticScope(StaticScope.NONE).create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_Model").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("model", "").staticScope(StaticScope.NONE).create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_Module").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("module", "").staticScope(StaticScope.NONE).create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_SModel").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("model", "").staticScope(StaticScope.NONE).create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_SNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("node", "").staticScope(StaticScope.NONE).create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ContextType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("refcontext", "").staticScope(StaticScope.NONE).create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.CreateRefactoringContext").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("refactoring").children(new String[]{"target", "parameters", "project"}, new boolean[]{false, true, false}).alias("create refcontext", "").staticScope(StaticScope.NONE).create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.DeleteFeatureExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.refactoring.structure.RefactoringAction").children(new String[]{"feature"}, new boolean[]{false}).alias("deleteFeature", "").staticScope(StaticScope.NONE).create();
        break;
      case 13:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.DoRefactorClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("refactor", "").staticScope(StaticScope.NONE).create();
        break;
      case 14:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.DoWhenDoneClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("doWhenDone", "").staticScope(StaticScope.NONE).create();
        break;
      case 15:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ExecuteRefactoringStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").references("refactoring").children(new String[]{"target", "parameters", "project"}, new boolean[]{false, true, false}).alias("execute refactoring", "").staticScope(StaticScope.NONE).create();
        break;
      case 16:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.GetModelsToUpdateClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("additional models to update", "").staticScope(StaticScope.NONE).create();
        break;
      case 17:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.InitClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("init", "").staticScope(StaticScope.NONE).create();
        break;
      case 18:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.IsApplicableToModelClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("isApplicableToModel", "").staticScope(StaticScope.NONE).create();
        break;
      case 19:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.IsApplicableToModuleClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("isApplicableToModule", "").staticScope(StaticScope.NONE).create();
        break;
      case 20:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.IsApplicableToNodeClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("isApplicableToNode", "").staticScope(StaticScope.NONE).create();
        break;
      case 21:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.IsRefactoringApplicable").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("refactoring").children(new String[]{"target"}, new boolean[]{false}).alias("is applicable refactoring", "").staticScope(StaticScope.NONE).create();
        break;
      case 22:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.MainProjectOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("project", "").staticScope(StaticScope.NONE).create();
        break;
      case 23:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.MergeNodeWithAnotherNodeExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").alias("mergeNode", "merge node with another node").staticScope(StaticScope.NONE).create();
        break;
      case 24:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModelDescriptorOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("modelDescriptor", "").staticScope(StaticScope.NONE).create();
        break;
      case 25:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModelTarget").super_("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").parents("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").children(new String[]{"isApplicableBlock"}, new boolean[]{false}).alias("model", "").create();
        break;
      case 26:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModelsToGenerateByDefault").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("models from usages", "").staticScope(StaticScope.NONE).create();
        break;
      case 27:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModelsToGenerateClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("models to generate", "").staticScope(StaticScope.NONE).create();
        break;
      case 28:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModuleOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("module", "").staticScope(StaticScope.NONE).create();
        break;
      case 29:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ModuleTarget").super_("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").parents("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").children(new String[]{"moduleType", "isApplicableBlock"}, new boolean[]{false, false}).alias("module", "").create();
        break;
      case 30:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.MoveNodeToModelExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").alias("moveNode", "move node to model").staticScope(StaticScope.NONE).create();
        break;
      case 31:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.MoveNodeToNodeExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression").children(new String[]{"roleInTarget"}, new boolean[]{false}).alias("moveNode", "move node to another node").staticScope(StaticScope.NONE).create();
        break;
      case 32:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.MoveNodesToModelExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression").alias("moveNodes", "move nodes to model").staticScope(StaticScope.NONE).create();
        break;
      case 33:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.MoveNodesToNodeExpression").super_("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression").parents("jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression").children(new String[]{"roleInTarget"}, new boolean[]{false}).alias("moveNodes", "move nodes to another node").staticScope(StaticScope.NONE).create();
        break;
      case 34:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.NodeOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("node", "").staticScope(StaticScope.NONE).create();
        break;
      case 35:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.NodeTarget").super_("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").parents("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").references("concept").children(new String[]{"isApplicableBlock"}, new boolean[]{false}).alias("node", "").create();
        break;
      case 36:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.NodesOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("nodes", "").staticScope(StaticScope.NONE).create();
        break;
      case 37:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.OperationContextOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("operationContext", "").staticScope(StaticScope.NONE).create();
        break;
      case 38:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ProjectOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("mpsProject", "").staticScope(StaticScope.NONE).create();
        break;
      case 39:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.Refactoring").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.structure.structure.IConceptAspect").properties("userFriendlyName").references("overrides").children(new String[]{"target", "parameter", "field", "initBlock", "doRefactorBlock", "modelsToGenerateBlock", "doWhenDoneBlock", "affectedNodesBlock", "updateModelBlock"}, new boolean[]{false, true, true, false, false, false, false, false, false}).create();
        break;
      case 40:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringAction").interface_().create();
        break;
      case 41:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringArgument").interface_().create();
        break;
      case 42:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringArgumentReference").interface_().create();
        break;
      case 43:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringContext_ConceptFunctionParameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("refactoringContext", "").staticScope(StaticScope.NONE).create();
        break;
      case 44:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringField").super_("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration", "jetbrains.mps.lang.refactoring.structure.RefactoringArgument").create();
        break;
      case 45:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringFieldReference").super_("jetbrains.mps.baseLanguage.structure.BaseVariableReference").parents("jetbrains.mps.baseLanguage.structure.BaseVariableReference", "jetbrains.mps.lang.refactoring.structure.RefactoringArgumentReference").references("refactoringField").staticScope(StaticScope.NONE).create();
        break;
      case 46:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringParameter").super_("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseVariableDeclaration", "jetbrains.mps.lang.refactoring.structure.RefactoringArgument").create();
        break;
      case 47:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringParameterReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.refactoring.structure.RefactoringArgumentReference").references("refactoringParameter").staticScope(StaticScope.NONE).create();
        break;
      case 48:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RefactoringTarget").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("allowMultiple").children(new String[]{"isApplicableBlock"}, new boolean[]{false}).abstract_().create();
        break;
      case 49:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.RepositoryOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("repository", "").staticScope(StaticScope.NONE).create();
        break;
      case 50:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.ScopeOperation").super_("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").parents("jetbrains.mps.lang.refactoring.structure.ContextMemberOperation").alias("scope", "").staticScope(StaticScope.NONE).create();
        break;
      case 51:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.UpdateModelByDefaultOperation").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").alias("updateModelByDefault", "").staticScope(StaticScope.NONE).create();
        break;
      case 52:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.UpdateModelClause").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("updateModel", "").staticScope(StaticScope.NONE).create();
        break;
      case 53:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.refactoring.structure.UpdateModelProcedure").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"argument"}, new boolean[]{false}).alias("updateModel(...)", "").staticScope(StaticScope.NONE).create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.lang.refactoring.structure.AbstractMoveExpression", "jetbrains.mps.lang.refactoring.structure.AbstractMoveNodeExpression", "jetbrains.mps.lang.refactoring.structure.AbstractMoveNodesExpression", "jetbrains.mps.lang.refactoring.structure.AffectedNodesClause", "jetbrains.mps.lang.refactoring.structure.ChangeFeatureNameExpression", "jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_Model", "jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_Module", "jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_SModel", "jetbrains.mps.lang.refactoring.structure.ConceptFunctionParameter_SNode", "jetbrains.mps.lang.refactoring.structure.ContextMemberOperation", "jetbrains.mps.lang.refactoring.structure.ContextType", "jetbrains.mps.lang.refactoring.structure.CreateRefactoringContext", "jetbrains.mps.lang.refactoring.structure.DeleteFeatureExpression", "jetbrains.mps.lang.refactoring.structure.DoRefactorClause", "jetbrains.mps.lang.refactoring.structure.DoWhenDoneClause", "jetbrains.mps.lang.refactoring.structure.ExecuteRefactoringStatement", "jetbrains.mps.lang.refactoring.structure.GetModelsToUpdateClause", "jetbrains.mps.lang.refactoring.structure.InitClause", "jetbrains.mps.lang.refactoring.structure.IsApplicableToModelClause", "jetbrains.mps.lang.refactoring.structure.IsApplicableToModuleClause", "jetbrains.mps.lang.refactoring.structure.IsApplicableToNodeClause", "jetbrains.mps.lang.refactoring.structure.IsRefactoringApplicable", "jetbrains.mps.lang.refactoring.structure.MainProjectOperation", "jetbrains.mps.lang.refactoring.structure.MergeNodeWithAnotherNodeExpression", "jetbrains.mps.lang.refactoring.structure.ModelDescriptorOperation", "jetbrains.mps.lang.refactoring.structure.ModelTarget", "jetbrains.mps.lang.refactoring.structure.ModelsToGenerateByDefault", "jetbrains.mps.lang.refactoring.structure.ModelsToGenerateClause", "jetbrains.mps.lang.refactoring.structure.ModuleOperation", "jetbrains.mps.lang.refactoring.structure.ModuleTarget", "jetbrains.mps.lang.refactoring.structure.MoveNodeToModelExpression", "jetbrains.mps.lang.refactoring.structure.MoveNodeToNodeExpression", "jetbrains.mps.lang.refactoring.structure.MoveNodesToModelExpression", "jetbrains.mps.lang.refactoring.structure.MoveNodesToNodeExpression", "jetbrains.mps.lang.refactoring.structure.NodeOperation", "jetbrains.mps.lang.refactoring.structure.NodeTarget", "jetbrains.mps.lang.refactoring.structure.NodesOperation", "jetbrains.mps.lang.refactoring.structure.OperationContextOperation", "jetbrains.mps.lang.refactoring.structure.ProjectOperation", "jetbrains.mps.lang.refactoring.structure.Refactoring", "jetbrains.mps.lang.refactoring.structure.RefactoringAction", "jetbrains.mps.lang.refactoring.structure.RefactoringArgument", "jetbrains.mps.lang.refactoring.structure.RefactoringArgumentReference", "jetbrains.mps.lang.refactoring.structure.RefactoringContext_ConceptFunctionParameter", "jetbrains.mps.lang.refactoring.structure.RefactoringField", "jetbrains.mps.lang.refactoring.structure.RefactoringFieldReference", "jetbrains.mps.lang.refactoring.structure.RefactoringParameter", "jetbrains.mps.lang.refactoring.structure.RefactoringParameterReference", "jetbrains.mps.lang.refactoring.structure.RefactoringTarget", "jetbrains.mps.lang.refactoring.structure.RepositoryOperation", "jetbrains.mps.lang.refactoring.structure.ScopeOperation", "jetbrains.mps.lang.refactoring.structure.UpdateModelByDefaultOperation", "jetbrains.mps.lang.refactoring.structure.UpdateModelClause", "jetbrains.mps.lang.refactoring.structure.UpdateModelProcedure"};
}
