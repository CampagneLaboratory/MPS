package jetbrains.mps.lang.dataFlow.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.AfterPosition", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.BaseEmitJumpStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.BaseEmitVariableStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.BaseInstructionOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.BeforePosition", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.BooleanInstructionOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.BuilderBlock", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.DataFlowBuilderDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.EmitCodeForStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.EmitIfJumpStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.EmitJumpStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.EmitLabelStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.EmitMayBeUnreachable", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.EmitNopStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.EmitReadStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.EmitRetStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.EmitStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.EmitTryFinallyStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.EmitWriteStatement", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.GetCodeForExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.InsertAfter", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.InsertBefore", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.InsertPosition", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.InstructionGetSourceOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.InstructionIsJump", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.InstructionIsNop", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.InstructionIsRet", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.InstructionType", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.LabelPosition", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.NodeParameter", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.Position", null);
    myFqNameToConcept.put("jetbrains.mps.lang.dataFlow.structure.RelativePosition", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.AfterPosition").super_("jetbrains.mps.lang.dataFlow.structure.RelativePosition").parents("jetbrains.mps.lang.dataFlow.structure.RelativePosition").alias("after", "").create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.BaseEmitJumpStatement").super_("jetbrains.mps.lang.dataFlow.structure.EmitStatement").parents("jetbrains.mps.lang.dataFlow.structure.EmitStatement").children(new String[]{"jumpTo"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.BaseEmitVariableStatement").super_("jetbrains.mps.lang.dataFlow.structure.EmitStatement").parents("jetbrains.mps.lang.dataFlow.structure.EmitStatement").children(new String[]{"variable"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.BaseInstructionOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.BeforePosition").super_("jetbrains.mps.lang.dataFlow.structure.RelativePosition").parents("jetbrains.mps.lang.dataFlow.structure.RelativePosition").alias("before", "").create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.BooleanInstructionOperation").super_("jetbrains.mps.lang.dataFlow.structure.BaseInstructionOperation").parents("jetbrains.mps.lang.dataFlow.structure.BaseInstructionOperation").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.BuilderBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.DataFlowBuilderDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.structure.structure.IConceptAspect").references("conceptDeclaration").children(new String[]{"builderBlock"}, new boolean[]{false}).alias("Data Flow Builder", "").create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.EmitCodeForStatement").super_("jetbrains.mps.lang.dataFlow.structure.EmitStatement").parents("jetbrains.mps.lang.dataFlow.structure.EmitStatement").children(new String[]{"codeFor"}, new boolean[]{false}).alias("code for", "").staticScope(StaticScope.NONE).create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.EmitIfJumpStatement").super_("jetbrains.mps.lang.dataFlow.structure.BaseEmitJumpStatement").parents("jetbrains.mps.lang.dataFlow.structure.BaseEmitJumpStatement").alias("ifjump", "").staticScope(StaticScope.NONE).create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.EmitJumpStatement").super_("jetbrains.mps.lang.dataFlow.structure.BaseEmitJumpStatement").parents("jetbrains.mps.lang.dataFlow.structure.BaseEmitJumpStatement").alias("jump", "").staticScope(StaticScope.NONE).create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.EmitLabelStatement").super_("jetbrains.mps.lang.dataFlow.structure.EmitStatement").parents("jetbrains.mps.lang.dataFlow.structure.EmitStatement", "jetbrains.mps.lang.core.structure.INamedConcept").alias("label", "").create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.EmitMayBeUnreachable").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.Closureoid").children(new String[]{"emitStatement"}, new boolean[]{false}).alias("{ <emit> }", "emit maybe unreachable command").staticScope(StaticScope.NONE).create();
        break;
      case 13:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.EmitNopStatement").super_("jetbrains.mps.lang.dataFlow.structure.EmitStatement").parents("jetbrains.mps.lang.dataFlow.structure.EmitStatement").alias("nop", "").staticScope(StaticScope.NONE).create();
        break;
      case 14:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.EmitReadStatement").super_("jetbrains.mps.lang.dataFlow.structure.BaseEmitVariableStatement").parents("jetbrains.mps.lang.dataFlow.structure.BaseEmitVariableStatement").alias("read", "").staticScope(StaticScope.NONE).create();
        break;
      case 15:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.EmitRetStatement").super_("jetbrains.mps.lang.dataFlow.structure.EmitStatement").parents("jetbrains.mps.lang.dataFlow.structure.EmitStatement").alias("ret", "").staticScope(StaticScope.NONE).create();
        break;
      case 16:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.EmitStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"position"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 17:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.EmitTryFinallyStatement").super_("jetbrains.mps.lang.dataFlow.structure.EmitStatement").parents("jetbrains.mps.lang.dataFlow.structure.EmitStatement").children(new String[]{"tryPart", "finallyPart"}, new boolean[]{false, false}).alias("try", "").staticScope(StaticScope.NONE).create();
        break;
      case 18:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.EmitWriteStatement").super_("jetbrains.mps.lang.dataFlow.structure.BaseEmitVariableStatement").parents("jetbrains.mps.lang.dataFlow.structure.BaseEmitVariableStatement").children(new String[]{"value"}, new boolean[]{false}).alias("write", "").staticScope(StaticScope.NONE).create();
        break;
      case 19:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.GetCodeForExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"expression"}, new boolean[]{false}).alias("get code for", "").staticScope(StaticScope.NONE).create();
        break;
      case 20:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.InsertAfter").super_("jetbrains.mps.lang.dataFlow.structure.InsertPosition").parents("jetbrains.mps.lang.dataFlow.structure.InsertPosition").alias("after", "").create();
        break;
      case 21:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.InsertBefore").super_("jetbrains.mps.lang.dataFlow.structure.InsertPosition").parents("jetbrains.mps.lang.dataFlow.structure.InsertPosition").alias("before", "").create();
        break;
      case 22:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.InsertPosition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"instruction"}, new boolean[]{false}).abstract_().create();
        break;
      case 23:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.InstructionGetSourceOperation").super_("jetbrains.mps.lang.dataFlow.structure.BaseInstructionOperation").parents("jetbrains.mps.lang.dataFlow.structure.BaseInstructionOperation").alias("getSource", "").staticScope(StaticScope.NONE).create();
        break;
      case 24:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.InstructionIsJump").super_("jetbrains.mps.lang.dataFlow.structure.BooleanInstructionOperation").parents("jetbrains.mps.lang.dataFlow.structure.BooleanInstructionOperation").alias("isJump", "").staticScope(StaticScope.NONE).create();
        break;
      case 25:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.InstructionIsNop").super_("jetbrains.mps.lang.dataFlow.structure.BooleanInstructionOperation").parents("jetbrains.mps.lang.dataFlow.structure.BooleanInstructionOperation").alias("isNop", "").staticScope(StaticScope.NONE).create();
        break;
      case 26:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.InstructionIsRet").super_("jetbrains.mps.lang.dataFlow.structure.BooleanInstructionOperation").parents("jetbrains.mps.lang.dataFlow.structure.BooleanInstructionOperation").alias("isRet", "").staticScope(StaticScope.NONE).create();
        break;
      case 27:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.InstructionType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("instruction", "").staticScope(StaticScope.NONE).create();
        break;
      case 28:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.LabelPosition").super_("jetbrains.mps.lang.dataFlow.structure.Position").parents("jetbrains.mps.lang.dataFlow.structure.Position").references("label").alias("after label", "").create();
        break;
      case 29:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.NodeParameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("node", "node to build DFA for").staticScope(StaticScope.NONE).create();
        break;
      case 30:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.Position").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 31:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.structure.RelativePosition").super_("jetbrains.mps.lang.dataFlow.structure.Position").parents("jetbrains.mps.lang.dataFlow.structure.Position").children(new String[]{"relativeTo"}, new boolean[]{false}).abstract_().create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.lang.dataFlow.structure.AfterPosition", "jetbrains.mps.lang.dataFlow.structure.BaseEmitJumpStatement", "jetbrains.mps.lang.dataFlow.structure.BaseEmitVariableStatement", "jetbrains.mps.lang.dataFlow.structure.BaseInstructionOperation", "jetbrains.mps.lang.dataFlow.structure.BeforePosition", "jetbrains.mps.lang.dataFlow.structure.BooleanInstructionOperation", "jetbrains.mps.lang.dataFlow.structure.BuilderBlock", "jetbrains.mps.lang.dataFlow.structure.DataFlowBuilderDeclaration", "jetbrains.mps.lang.dataFlow.structure.EmitCodeForStatement", "jetbrains.mps.lang.dataFlow.structure.EmitIfJumpStatement", "jetbrains.mps.lang.dataFlow.structure.EmitJumpStatement", "jetbrains.mps.lang.dataFlow.structure.EmitLabelStatement", "jetbrains.mps.lang.dataFlow.structure.EmitMayBeUnreachable", "jetbrains.mps.lang.dataFlow.structure.EmitNopStatement", "jetbrains.mps.lang.dataFlow.structure.EmitReadStatement", "jetbrains.mps.lang.dataFlow.structure.EmitRetStatement", "jetbrains.mps.lang.dataFlow.structure.EmitStatement", "jetbrains.mps.lang.dataFlow.structure.EmitTryFinallyStatement", "jetbrains.mps.lang.dataFlow.structure.EmitWriteStatement", "jetbrains.mps.lang.dataFlow.structure.GetCodeForExpression", "jetbrains.mps.lang.dataFlow.structure.InsertAfter", "jetbrains.mps.lang.dataFlow.structure.InsertBefore", "jetbrains.mps.lang.dataFlow.structure.InsertPosition", "jetbrains.mps.lang.dataFlow.structure.InstructionGetSourceOperation", "jetbrains.mps.lang.dataFlow.structure.InstructionIsJump", "jetbrains.mps.lang.dataFlow.structure.InstructionIsNop", "jetbrains.mps.lang.dataFlow.structure.InstructionIsRet", "jetbrains.mps.lang.dataFlow.structure.InstructionType", "jetbrains.mps.lang.dataFlow.structure.LabelPosition", "jetbrains.mps.lang.dataFlow.structure.NodeParameter", "jetbrains.mps.lang.dataFlow.structure.Position", "jetbrains.mps.lang.dataFlow.structure.RelativePosition"};
}
