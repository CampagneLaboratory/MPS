package jetbrains.mps.lang.dataFlow.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new BaseEmitJumpStatement_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new BaseEmitVariableStatement_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new BaseInstructionOperation_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new DataFlowBuilderDeclaration_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new EmitCodeForStatement_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new EmitLabelStatement_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new EmitMayBeUnreachable_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new EmitNopStatement_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new EmitRetStatement_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new EmitTryFinallyStatement_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new EmitWriteStatement_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new GetCodeForExpression_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new InsertAfter_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new InsertBefore_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new LabelPosition_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new RelativePosition_Editor());
      default:
    }
    return Collections.emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    return Collections.emptyList();
  }

  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.lang.dataFlow.structure.BaseEmitJumpStatement", "jetbrains.mps.lang.dataFlow.structure.BaseEmitVariableStatement", "jetbrains.mps.lang.dataFlow.structure.BaseInstructionOperation", "jetbrains.mps.lang.dataFlow.structure.DataFlowBuilderDeclaration", "jetbrains.mps.lang.dataFlow.structure.EmitCodeForStatement", "jetbrains.mps.lang.dataFlow.structure.EmitLabelStatement", "jetbrains.mps.lang.dataFlow.structure.EmitMayBeUnreachable", "jetbrains.mps.lang.dataFlow.structure.EmitNopStatement", "jetbrains.mps.lang.dataFlow.structure.EmitRetStatement", "jetbrains.mps.lang.dataFlow.structure.EmitTryFinallyStatement", "jetbrains.mps.lang.dataFlow.structure.EmitWriteStatement", "jetbrains.mps.lang.dataFlow.structure.GetCodeForExpression", "jetbrains.mps.lang.dataFlow.structure.InsertAfter", "jetbrains.mps.lang.dataFlow.structure.InsertBefore", "jetbrains.mps.lang.dataFlow.structure.LabelPosition", "jetbrains.mps.lang.dataFlow.structure.RelativePosition"};
}
