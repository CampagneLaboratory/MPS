package jetbrains.mps.lang.dataFlow.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.node.EditorAspectDescriptor;
import jetbrains.mps.openapi.editor.node.EditorAspect;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public EditorAspect getAspect(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return new BaseEmitJumpStatement_Editor();
      case 1:
        return new BaseEmitVariableStatement_Editor();
      case 2:
        return new BaseInstructionOperation_Editor();
      case 3:
        return new DataFlowBuilderDeclaration_Editor();
      case 4:
        return new EmitCodeForStatement_Editor();
      case 5:
        return new EmitLabelStatement_Editor();
      case 6:
        return new EmitMayBeUnreachable_Editor();
      case 7:
        return new EmitNopStatement_Editor();
      case 8:
        return new EmitRetStatement_Editor();
      case 9:
        return new EmitTryFinallyStatement_Editor();
      case 10:
        return new EmitWriteStatement_Editor();
      case 11:
        return new GetCodeForExpression_Editor();
      case 12:
        return new InsertAfter_Editor();
      case 13:
        return new InsertBefore_Editor();
      case 14:
        return new LabelPosition_Editor();
      case 15:
        return new RelativePosition_Editor();
      default:
    }
    return null;
  }

  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.lang.dataFlow.structure.BaseEmitJumpStatement", "jetbrains.mps.lang.dataFlow.structure.BaseEmitVariableStatement", "jetbrains.mps.lang.dataFlow.structure.BaseInstructionOperation", "jetbrains.mps.lang.dataFlow.structure.DataFlowBuilderDeclaration", "jetbrains.mps.lang.dataFlow.structure.EmitCodeForStatement", "jetbrains.mps.lang.dataFlow.structure.EmitLabelStatement", "jetbrains.mps.lang.dataFlow.structure.EmitMayBeUnreachable", "jetbrains.mps.lang.dataFlow.structure.EmitNopStatement", "jetbrains.mps.lang.dataFlow.structure.EmitRetStatement", "jetbrains.mps.lang.dataFlow.structure.EmitTryFinallyStatement", "jetbrains.mps.lang.dataFlow.structure.EmitWriteStatement", "jetbrains.mps.lang.dataFlow.structure.GetCodeForExpression", "jetbrains.mps.lang.dataFlow.structure.InsertAfter", "jetbrains.mps.lang.dataFlow.structure.InsertBefore", "jetbrains.mps.lang.dataFlow.structure.LabelPosition", "jetbrains.mps.lang.dataFlow.structure.RelativePosition"};
}
