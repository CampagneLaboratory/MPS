package jetbrains.mps.lang.migration.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.LinkedList;
import jetbrains.mps.lang.migration.behavior.MigrationScript__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Map;
import java.util.Collection;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.Language;
import java.util.Collections;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.ArrayList;

public class MigrationsCheckUtil {
  public static boolean hasCycles(SNode migrationScript, final List<SNode> parentScripts) {
    if (ListSequence.fromList(parentScripts).contains(migrationScript)) {
      return true;
    }
    ListSequence.fromList(parentScripts).insertElement(0, migrationScript);
    if (Sequence.fromIterable(allScriptDependencies(migrationScript)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return hasCycles(it, parentScripts);
      }
    })) {
      return true;
    }
    ListSequence.fromList(parentScripts).removeElementAt(0);
    return false;
  }
  public static boolean hasCycles(SNode migrationScript) {
    return hasCycles(migrationScript, ListSequence.fromList(new LinkedList<SNode>()));
  }
  private static Iterable<SNode> allScriptDependencies(final SNode script) {
    Iterable<SNode> result = Sequence.fromIterable(MigrationScript__BehaviorDescriptor.getRequiredData_id7s$_UJMVosT.invoke(script)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x44b28148e401c891L, 0x4f6b4ac0cd6d4af5L, "script")) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x44b28148e401c891L, 0x4f6b4ac0cd6d4af5L, "script"));
      }
    }).concat(Sequence.fromIterable(MigrationScript__BehaviorDescriptor.getExecuteAfter_id2bWK$jI6RRp.invoke(script)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x398343344f099b7aL, 0x398343344f099b7bL, "script")) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x398343344f099b7aL, 0x398343344f099b7bL, "script"));
      }
    }));
    return result = Sequence.fromIterable(result).concat(ListSequence.fromList(SModelOperations.roots(SNodeOperations.getModel(script), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x73e8a2c68b62c6a3L, "jetbrains.mps.lang.migration.structure.MigrationScript"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getInteger(it, MetaAdapterFactory.getProperty(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x73e8a2c68b62c6a3L, 0x50c63f9f4a0dac17L, "fromVersion")) < SPropertyOperations.getInteger(script, MetaAdapterFactory.getProperty(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x73e8a2c68b62c6a3L, 0x50c63f9f4a0dac17L, "fromVersion"));
      }
    }));
  }
  public static Map<SNode, Collection<String>> checkMigrationsVersions(SModule module) {
    // check whether scripts are really migrations for some language 
    if (!(module instanceof Language)) {
      return Collections.emptyMap();
    }
    SModel migModel = LanguageAspect.MIGRATION.get(((Language) module));
    if (migModel == null) {
      return Collections.emptyMap();
    }
    if (!(migModel.isLoaded())) {
      return Collections.emptyMap();
    }

    List<SNode> allScripts = SModelOperations.roots(migModel, MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x73e8a2c68b62c6a3L, "jetbrains.mps.lang.migration.structure.MigrationScript"));

    // scripts with no versions set 
    final Map<SNode, Collection<String>> result = MapSequence.fromMap(new HashMap<SNode, Collection<String>>());
    Iterable<SNode> noVersionScripts = ListSequence.fromList(allScripts).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(MigrationsCheckUtil.isVersionSet(it));
      }
    });
    Sequence.fromIterable(noVersionScripts).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        MigrationsCheckUtil.ensureInitialized(result, it);
        CollectionSequence.fromCollection(MapSequence.fromMap(result).get(it)).addElement("Script does not have version");
      }
    });

    // no scripts with versions? 
    if (Sequence.fromIterable(noVersionScripts).count() == ListSequence.fromList(allScripts).count()) {
      return result;
    }

    Iterable<SNode> scriptsWithVersions = ListSequence.fromList(allScripts).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return MigrationsCheckUtil.isVersionSet(it);
      }
    });

    final Map<Integer, Integer> versions = MapSequence.fromMap(new HashMap<Integer, Integer>());
    Sequence.fromIterable(scriptsWithVersions).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        if (MapSequence.fromMap(versions).get(SPropertyOperations.getInteger(it, MetaAdapterFactory.getProperty(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x73e8a2c68b62c6a3L, 0x50c63f9f4a0dac17L, "fromVersion"))) == null) {
          MapSequence.fromMap(versions).put(SPropertyOperations.getInteger(it, MetaAdapterFactory.getProperty(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x73e8a2c68b62c6a3L, 0x50c63f9f4a0dac17L, "fromVersion")), 0);
        }
        MapSequence.fromMap(versions).put(SPropertyOperations.getInteger(it, MetaAdapterFactory.getProperty(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x73e8a2c68b62c6a3L, 0x50c63f9f4a0dac17L, "fromVersion")), MapSequence.fromMap(versions).get(SPropertyOperations.getInteger(it, MetaAdapterFactory.getProperty(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x73e8a2c68b62c6a3L, 0x50c63f9f4a0dac17L, "fromVersion"))) + 1);
      }
    });

    final int minVersion = SetSequence.fromSet(MapSequence.fromMap(versions).keySet()).sort(new ISelector<Integer, Integer>() {
      public Integer select(Integer it) {
        return it;
      }
    }, true).first();
    final int maxVersion = SetSequence.fromSet(MapSequence.fromMap(versions).keySet()).sort(new ISelector<Integer, Integer>() {
      public Integer select(Integer it) {
        return it;
      }
    }, false).first();
    final int langVersion = ((Language) module).getLanguageVersion();

    // last version+1 == version of a language? 
    if (maxVersion != langVersion - 1) {
      Sequence.fromIterable(scriptsWithVersions).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getInteger(it, MetaAdapterFactory.getProperty(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x73e8a2c68b62c6a3L, 0x50c63f9f4a0dac17L, "fromVersion")) == maxVersion;
        }
      }).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          ensureInitialized(result, it);
          CollectionSequence.fromCollection(MapSequence.fromMap(result).get(it)).addElement("Language version (" + langVersion + ") is greater than the target version of last migration script (" + maxVersion + ")");
        }
      });
    }

    Sequence.fromIterable(scriptsWithVersions).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        // multiple scripts for one version? 
        if (MapSequence.fromMap(versions).get(SPropertyOperations.getInteger(it, MetaAdapterFactory.getProperty(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x73e8a2c68b62c6a3L, 0x50c63f9f4a0dac17L, "fromVersion"))) > 1) {
          ensureInitialized(result, it);
          CollectionSequence.fromCollection(MapSequence.fromMap(result).get(it)).addElement("Multiple scripts for version " + SPropertyOperations.getInteger(it, MetaAdapterFactory.getProperty(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x73e8a2c68b62c6a3L, 0x50c63f9f4a0dac17L, "fromVersion")) + " found");
        }

        // version with no scripts for it? 
        if (SPropertyOperations.getInteger(it, MetaAdapterFactory.getProperty(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x73e8a2c68b62c6a3L, 0x50c63f9f4a0dac17L, "fromVersion")) != minVersion && MapSequence.fromMap(versions).get(SPropertyOperations.getInteger(it, MetaAdapterFactory.getProperty(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x73e8a2c68b62c6a3L, 0x50c63f9f4a0dac17L, "fromVersion")) - 1) == null) {
          ensureInitialized(result, it);
          CollectionSequence.fromCollection(MapSequence.fromMap(result).get(it)).addElement("Missing script for version " + (SPropertyOperations.getInteger(it, MetaAdapterFactory.getProperty(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x73e8a2c68b62c6a3L, 0x50c63f9f4a0dac17L, "fromVersion")) - 1));
        }
      }
    });

    return result;
  }
  private static void ensureInitialized(Map<SNode, Collection<String>> coll, SNode index) {
    if (MapSequence.fromMap(coll).get(index) == null) {
      MapSequence.fromMap(coll).put(index, CollectionSequence.fromCollection(new ArrayList<String>()));
    }
  }

  private static boolean isVersionSet(SNode it) {
    return it.getProperty(MetaAdapterFactory.getProperty(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x73e8a2c68b62c6a3L, 0x50c63f9f4a0dac17L, "fromVersion")) != null;
  }
}
