package jetbrains.mps.lang.migration.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.RefNodeCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;

public class TransformStatement_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_pt4ick_a(editorContext, node);
  }
  public EditorCell createInspectedCell(EditorContext editorContext, SNode node) {
    return this.createCollection_pt4ick_a_0(editorContext, node);
  }
  private EditorCell createCollection_pt4ick_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_pt4ick_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_pt4ick_a0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_pt4ick_b0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_pt4ick_c0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_pt4ick_d0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_pt4ick_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "transform");
    editorCell.setCellId("Constant_pt4ick_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_pt4ick_b0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);
    provider.setRole("pattern");
    provider.setNoTargetText("<no pattern>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setRole("pattern");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_pt4ick_c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "=>");
    editorCell.setCellId("Constant_pt4ick_c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_pt4ick_d0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);
    provider.setRole("consequence");
    provider.setNoTargetText("<no consequence>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setRole("consequence");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createCollection_pt4ick_a_0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_pt4ick_a_0");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_pt4ick_a0_0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_pt4ick_b0_0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_pt4ick_c0_0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_pt4ick_d0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_pt4ick_e0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_pt4ick_a0_0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "precondition:");
    editorCell.setCellId("Constant_pt4ick_a0_0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_pt4ick_b0_0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);
    provider.setRole("precondition");
    provider.setNoTargetText("<no precondition>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setRole("precondition");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_pt4ick_c0_0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_pt4ick_c0_0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_pt4ick_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "postprocess:");
    editorCell.setCellId("Constant_pt4ick_d0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_pt4ick_e0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, editorContext);
    provider.setRole("postprocess");
    provider.setNoTargetText("<no postprocess>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setRole("postprocess");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
}
