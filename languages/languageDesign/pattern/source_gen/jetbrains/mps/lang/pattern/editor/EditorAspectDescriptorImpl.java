package jetbrains.mps.lang.pattern.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new ActionAsPattern_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AsPattern_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new GeneratorInternal_ChildDescriptor_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new GeneratorInternal_PropertyDescriptor_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new GeneratorInternal_ReferenceDescriptor_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new InsertAfterPosition_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new InsertBeforePosition_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new LinkPatternVariableDeclaration_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new ListPattern_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new OrPattern_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new OrPatternClause_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new OrPatternVariableReference_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new Pattern_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new PatternExpression_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new PatternVariableDeclaration_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new PatternVariableReference_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new PropertyPatternVariableDeclaration_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new WildcardPattern_Editor());
      default:
    }
    return Collections.emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    return Collections.emptyList();
  }



  public Collection<ConceptEditorHint> getHints() {
    return Collections.emptyList();
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.lang.pattern.structure.ActionAsPattern", "jetbrains.mps.lang.pattern.structure.AsPattern", "jetbrains.mps.lang.pattern.structure.GeneratorInternal_ChildDescriptor", "jetbrains.mps.lang.pattern.structure.GeneratorInternal_PropertyDescriptor", "jetbrains.mps.lang.pattern.structure.GeneratorInternal_ReferenceDescriptor", "jetbrains.mps.lang.pattern.structure.InsertAfterPosition", "jetbrains.mps.lang.pattern.structure.InsertBeforePosition", "jetbrains.mps.lang.pattern.structure.LinkPatternVariableDeclaration", "jetbrains.mps.lang.pattern.structure.ListPattern", "jetbrains.mps.lang.pattern.structure.OrPattern", "jetbrains.mps.lang.pattern.structure.OrPatternClause", "jetbrains.mps.lang.pattern.structure.OrPatternVariableReference", "jetbrains.mps.lang.pattern.structure.Pattern", "jetbrains.mps.lang.pattern.structure.PatternExpression", "jetbrains.mps.lang.pattern.structure.PatternVariableDeclaration", "jetbrains.mps.lang.pattern.structure.PatternVariableReference", "jetbrains.mps.lang.pattern.structure.PropertyPatternVariableDeclaration", "jetbrains.mps.lang.pattern.structure.WildcardPattern"};
}
