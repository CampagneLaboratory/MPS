package jetbrains.mps.lang.pattern.test;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import junit.framework.TestCase;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.pattern.GeneratedMatchingPattern;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import junit.framework.Assert;
import jetbrains.mps.lang.test.matcher.NodesMatcher;
import jetbrains.mps.lang.pattern.IMatchingPattern;
import jetbrains.mps.lang.pattern.runtime.PatternUtil;
import jetbrains.mps.util.IterableUtil;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.SReference;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

@MPSLaunch
public class PatternListPattern_Test extends BaseTransformationTest {
  public PatternListPattern_Test() {
  }

  @Test
  public void testMethod() throws Throwable {
    this.initTest("${mps_home}", "r:ef0e231b-e6bd-436f-9003-b53de4081716(jetbrains.mps.lang.pattern.test)");
    this.runTest("jetbrains.mps.lang.pattern.test.PatternListPattern_Test$TestBody", "testListPattern", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public TestBody() {
    }

    public void testListPattern() {
      TestCase.assertTrue(match());
    }

    public boolean match() {
      SNode nodeToMatch = _quotation_createNode_i79cpz_a0a0c2();
      GeneratedMatchingPattern pattern = new PatternListPattern_Test.TestBody.Pattern_i79cpz_a0a1a2c();
      boolean matchNeeded = true;
      boolean matches = pattern.match(nodeToMatch);
      if (matchNeeded != matches) {
        return false;
      }
      if (!(matchNeeded)) {
        return true;
      }
      {
        List<SNode> list = (List<SNode>) pattern.getFieldValue("patternVar_list");
        int i = 0;
        {
          List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), list.get(i));
          List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), _quotation_createNode_i79cpz_a0a2a6a2c());
          Assert.assertNull("nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", NodesMatcher.matchNodes(nodesBefore, nodesAfter));
        }
        i++;
        {
          List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), list.get(i));
          List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), _quotation_createNode_i79cpz_a0a3a6a2c());
          Assert.assertNull("nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", NodesMatcher.matchNodes(nodesBefore, nodesAfter));
        }
        i++;
      }
      return true;
    }

    public static class Pattern_i79cpz_a0a1a2c extends GeneratedMatchingPattern implements IMatchingPattern {
      /*package*/ List<SNode> patternVar_list;
      /*package*/ SNode patternVar_ignore;
      /*package*/ SNode patternVar_field;
      /*package*/ SNode patternVar_className;
      /*package*/ SNode patternVar_method;

      public Pattern_i79cpz_a0a1a2c() {
      }

      public boolean match(SNode nodeToMatch) {
        {
          SNode nodeToMatch_9twfax_a0 = nodeToMatch;
          if (!("jetbrains.mps.baseLanguage.structure.DotExpression".equals(nodeToMatch_9twfax_a0.getConcept().getQualifiedName()))) {
            return false;
          }
          {
            String childRole_9twfax_ = "operand";
            if (!(PatternUtil.hasNChildren(nodeToMatch_9twfax_a0, childRole_9twfax_, 1))) {
              return false;
            }
            {
              SNode childVar_9twfax_a0a = IterableUtil.get(nodeToMatch_9twfax_a0.getChildren(childRole_9twfax_), 0);
              {
                SNode nodeToMatch_9twfax_a0a = childVar_9twfax_a0a;
                if (!("jetbrains.mps.baseLanguage.structure.StaticFieldReference".equals(nodeToMatch_9twfax_a0a.getConcept().getQualifiedName()))) {
                  return false;
                }
                patternVar_className = nodeToMatch_9twfax_a0a.getReferenceTarget("classifier");
                patternVar_field = nodeToMatch_9twfax_a0a.getReferenceTarget("variableDeclaration");
              }
            }
          }
          {
            String childRole_9twfax__0 = "operation";
            if (!(PatternUtil.hasNChildren(nodeToMatch_9twfax_a0, childRole_9twfax__0, 1))) {
              return false;
            }
            {
              SNode childVar_9twfax_a0a_0 = IterableUtil.get(nodeToMatch_9twfax_a0.getChildren(childRole_9twfax__0), 0);
              {
                SNode nodeToMatch_9twfax_a0a_0 = childVar_9twfax_a0a_0;
                if (!("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation".equals(nodeToMatch_9twfax_a0a_0.getConcept().getQualifiedName()))) {
                  return false;
                }
                patternVar_method = nodeToMatch_9twfax_a0a_0.getReferenceTarget("baseMethodDeclaration");
                {
                  String childRole_9twfax__1 = "actualArgument";
                  this.patternVar_list = ListSequence.fromList(new ArrayList<SNode>());
                  patternVar_ignore = null;
                  for (SNode childVar : nodeToMatch_9twfax_a0a_0.getChildren(childRole_9twfax__1)) {
                    patternVar_ignore = childVar;
                    ListSequence.fromList(this.patternVar_list).addElement(childVar);
                  }
                }
              }
            }
          }
        }
        return true;
      }

      public boolean hasAntiquotations() {
        return false;
      }

      public void fillFieldValuesFrom(GeneratedMatchingPattern pattern) {
        if (pattern != null && pattern.getClass() == this.getClass()) {
          patternVar_list = (List<SNode>) pattern.getFieldValue("patternVar_list");
          patternVar_ignore = (SNode) pattern.getFieldValue("patternVar_ignore");
          patternVar_field = (SNode) pattern.getFieldValue("patternVar_field");
          patternVar_className = (SNode) pattern.getFieldValue("patternVar_className");
          patternVar_method = (SNode) pattern.getFieldValue("patternVar_method");
        }
      }

      public Object getFieldValue(String fieldName) {
        if ("patternVar_list".equals(fieldName)) {
          return patternVar_list;
        }
        if ("patternVar_ignore".equals(fieldName)) {
          return patternVar_ignore;
        }
        if ("patternVar_field".equals(fieldName)) {
          return patternVar_field;
        }
        if ("patternVar_className".equals(fieldName)) {
          return patternVar_className;
        }
        if ("patternVar_method".equals(fieldName)) {
          return patternVar_method;
        }
        return null;
      }

      public void performActions(Object o) {
      }
    }

    private static SNode _quotation_createNode_i79cpz_a0a0c2() {
      PersistenceFacade facade = PersistenceFacade.getInstance();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      SNode quotedNode_5 = null;
      quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, false);
      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StaticFieldReference", null, null, false);
      quotedNode_2.setReference("classifier", SReference.create("classifier", quotedNode_2, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~System")));
      quotedNode_2.setReference("variableDeclaration", SReference.create("variableDeclaration", quotedNode_2, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~System.out")));
      quotedNode_1.addChild("operand", quotedNode_2);
      quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation", null, null, false);
      quotedNode_3.setReference("baseMethodDeclaration", SReference.create("baseMethodDeclaration", quotedNode_3, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object.wait(long,int):void")));
      quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, false);
      SNodeAccessUtil.setProperty(quotedNode_4, "value", "10");
      quotedNode_3.addChild("actualArgument", quotedNode_4);
      quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, false);
      SNodeAccessUtil.setProperty(quotedNode_5, "value", "10");
      quotedNode_3.addChild("actualArgument", quotedNode_5);
      quotedNode_1.addChild("operation", quotedNode_3);
      return quotedNode_1;
    }

    private static SNode _quotation_createNode_i79cpz_a0a2a6a2c() {
      PersistenceFacade facade = PersistenceFacade.getInstance();
      SNode quotedNode_1 = null;
      quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, false);
      SNodeAccessUtil.setProperty(quotedNode_1, "value", "10");
      return quotedNode_1;
    }

    private static SNode _quotation_createNode_i79cpz_a0a3a6a2c() {
      PersistenceFacade facade = PersistenceFacade.getInstance();
      SNode quotedNode_1 = null;
      quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, false);
      SNodeAccessUtil.setProperty(quotedNode_1, "value", "10");
      return quotedNode_1;
    }
  }
}
