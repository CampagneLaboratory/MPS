package jetbrains.mps.lang.actions.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAddMenuPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.AddMenuPart").super_("jetbrains.mps.lang.actions.structure.ConceptPart").parents("jetbrains.mps.lang.actions.structure.ConceptPart", "jetbrains.mps.lang.actions.structure.NodeSubstituteMenuBuilderPart", "jetbrains.mps.lang.actions.structure.SideTransformMenuBuilderPart").alias("add custom items", "").create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_EditorCell = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_EditorCell").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("selectedCell", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_OperationContext = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_OperationContext").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("operationContext", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_childConcept = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_childConcept").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("childConcept", "substitution node<> should be instance of this concept or one of it's subconcepts").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_childSetter = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_childSetter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("childSetter", "IChildNodeSetter instance which should be used to set new child for this parent node").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_concept = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_concept").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("concept", "outputConcept of substitute action").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_createdNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_createdNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("createdNode", "node<> returned from create child node block").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_currentTargetNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_currentTargetNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("currentTargetNode", "node<> to substitute").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_link = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_link").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("link", "containment LinkDeclaration for where result of this substitution will be saved or null if LinkDeclaration was not determined").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_nodeToCopyPreProcess = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_nodeToCopyPreProcess").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("copy", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_nodeToCopyPreProcessOriginal = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_nodeToCopyPreProcessOriginal").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("original", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_nodeToPastePostProcess = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_nodeToPastePostProcess").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("pastedNode", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_nodeToPasteWrap = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_nodeToPasteWrap").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("sourceNode", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_nodeToWrap = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_nodeToWrap").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("nodeToWrap", "instance of wrapped concept created by another substitute action").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_parameterObject = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_parameterObject").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("parameterObject", "one of parameters returned from the parameters query").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_parentNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_parentNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("parentNode", "the parent node<> of the node<> to substitute").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_pattern = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_pattern").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("pattern", "string entered by user inside competion pop-up, used to hide those actions which matching text was not matched with the pattern").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_result = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_result").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("result", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_sourceNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_sourceNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("sourceNode", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_strictly = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_strictly").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("strictly", "true if matching text should match specified pattern completely, false if only beggining of matching text should match this pattern").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_targetNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_targetNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("targetNode", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_wrapped = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_wrapped").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("wrapped", "boolean property specifying if the result of this substite action will be wrapped into another concept instance before injecting it into the model").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("concept").children(new String[]{"part"}, new boolean[]{true}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptConceptRightTransformPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptRightTransformPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.actions.structure.SideTransformMenuBuilderPart", "jetbrains.mps.lang.core.structure.BaseConcept").references("concept").children(new String[]{"nodeQuery", "handler"}, new boolean[]{false, false}).alias("add concept", "").create();
  /*package*/ final ConceptDescriptor myConceptConceptSubstitutePart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptSubstitutePart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.actions.structure.NodeSubstituteMenuBuilderPart", "jetbrains.mps.lang.core.structure.BaseConcept").references("concept").alias("add concept", "").create();
  /*package*/ final ConceptDescriptor myConceptConceptsSubstituteMenuPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ConceptsSubstituteMenuPart").super_("jetbrains.mps.lang.actions.structure.SubstituteMenuPart").parents("jetbrains.mps.lang.actions.structure.SubstituteMenuPart").children(new String[]{"query"}, new boolean[]{false}).alias("concepts menu", "").create();
  /*package*/ final ConceptDescriptor myConceptCopyPasteHandlers = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.CopyPasteHandlers").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.structure.structure.IConceptAspect").children(new String[]{"postProcessor", "preProcessor"}, new boolean[]{true, true}).alias("Copy/Paste Handlers", "").create();
  /*package*/ final ConceptDescriptor myConceptCopyPreProcessFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.CopyPreProcessFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("paste pre process function", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCopyPreProcessor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.CopyPreProcessor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("concept").children(new String[]{"preProcessFunction"}, new boolean[]{false}).alias("paste pre processor", "").create();
  /*package*/ final ConceptDescriptor myConceptExecuteSmartActionFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ExecuteSmartActionFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGenerateCodeAction = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.GenerateCodeAction").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("description").children(new String[]{"isApplicable", "getActionUI", "executeSmartAction", "smartActionParameter"}, new boolean[]{false, false, false, true}).create();
  /*package*/ final ConceptDescriptor myConceptGenericSubstituteMenuPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.GenericSubstituteMenuPart").super_("jetbrains.mps.lang.actions.structure.SubstituteMenuPart").parents("jetbrains.mps.lang.actions.structure.SubstituteMenuPart").children(new String[]{"query"}, new boolean[]{false}).alias("generic query", "").create();
  /*package*/ final ConceptDescriptor myConceptGetActionUIFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.GetActionUIFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptISideTransform_String = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ISideTransform_String").interface_().create();
  /*package*/ final ConceptDescriptor myConceptISubstitute_String = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ISubstitute_String").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIncludeRightTransformForNodePart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.IncludeRightTransformForNodePart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.actions.structure.SideTransformMenuBuilderPart", "jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"nodeBlock"}, new boolean[]{false}).alias("include transform for", "").create();
  /*package*/ final ConceptDescriptor myConceptIsSmartActionApplicableFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.IsSmartActionApplicableFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMenuPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.MenuPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"actionType"}, new boolean[]{false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptNF_Concept_NewInstance = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.NF_Concept_NewInstance").super_("jetbrains.mps.lang.smodel.structure.Concept_NewInstance").parents("jetbrains.mps.lang.smodel.structure.Concept_NewInstance").children(new String[]{"prototype"}, new boolean[]{false}).alias("new initialized instance", "create new initialized node").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNF_LinkList_AddNewChildOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.NF_LinkList_AddNewChildOperation").super_("jetbrains.mps.lang.smodel.structure.LinkList_AddNewChildOperation").parents("jetbrains.mps.lang.smodel.structure.LinkList_AddNewChildOperation").alias("add new initialized", "add new initialized child").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNF_Link_SetNewChildOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.NF_Link_SetNewChildOperation").super_("jetbrains.mps.lang.smodel.structure.Link_SetNewChildOperation").parents("jetbrains.mps.lang.smodel.structure.Link_SetNewChildOperation").alias("set new initialized", "set new initialized child").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNF_Model_CreateNewNodeOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.NF_Model_CreateNewNodeOperation").super_("jetbrains.mps.lang.smodel.structure.Model_CreateNewNodeOperation").parents("jetbrains.mps.lang.smodel.structure.Model_CreateNewNodeOperation").children(new String[]{"prototype"}, new boolean[]{false}).alias("new initialized node", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNF_Model_CreateNewRootNodeOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.NF_Model_CreateNewRootNodeOperation").super_("jetbrains.mps.lang.smodel.structure.Model_CreateNewRootNodeOperation").parents("jetbrains.mps.lang.smodel.structure.Model_CreateNewRootNodeOperation").children(new String[]{"prototype"}, new boolean[]{false}).alias("new initialized root node", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNF_Node_InsertNewNextSiblingOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.NF_Node_InsertNewNextSiblingOperation").super_("jetbrains.mps.lang.smodel.structure.Node_InsertNewNextSiblingOperation").parents("jetbrains.mps.lang.smodel.structure.Node_InsertNewNextSiblingOperation").alias("new initialized next-sibling", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNF_Node_InsertNewPrevSiblingOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.NF_Node_InsertNewPrevSiblingOperation").super_("jetbrains.mps.lang.smodel.structure.Node_InsertNewPrevSiblingOperation").parents("jetbrains.mps.lang.smodel.structure.Node_InsertNewPrevSiblingOperation").alias("new initialized prev-sibling", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNF_Node_ReplaceWithNewOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.NF_Node_ReplaceWithNewOperation").super_("jetbrains.mps.lang.smodel.structure.Node_ReplaceWithNewOperation").parents("jetbrains.mps.lang.smodel.structure.Node_ReplaceWithNewOperation").alias("replace with new initialized", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNodeFactories = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.NodeFactories").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.structure.structure.IConceptAspect", "jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"nodeFactory"}, new boolean[]{true}).alias("Node Factories", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeFactory = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.NodeFactory").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("description").references("applicableConcept").children(new String[]{"setupFunction"}, new boolean[]{false}).alias("node factory", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeSetupFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.NodeSetupFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("node setup function", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNodeSetupFunction_EnclosingNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.NodeSetupFunction_EnclosingNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("enclosingNode", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNodeSetupFunction_NewNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.NodeSetupFunction_NewNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("newNode", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNodeSetupFunction_SampleNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.NodeSetupFunction_SampleNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("sampleNode", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNodeSubstituteActions = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.NodeSubstituteActions").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.structure.structure.IConceptAspect").children(new String[]{"actionsBuilder"}, new boolean[]{true}).alias("Node Substitute Actions", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeSubstituteActionsBuilder = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.NodeSubstituteActionsBuilder").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.ScopeProvider", "jetbrains.mps.lang.core.structure.BaseConcept").properties("description").references("applicableConcept").children(new String[]{"precondition", "part", "variable", "commonInitializer"}, new boolean[]{false, true, true, false}).create();
  /*package*/ final ConceptDescriptor myConceptNodeSubstituteMenuBuilderPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.NodeSubstituteMenuBuilderPart").interface_().create();
  /*package*/ final ConceptDescriptor myConceptNodeSubstitutePreconditionFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.NodeSubstitutePreconditionFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("precondition", "return true if this substitute actions builder should be used to build substitute menu").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptParameterizedSideTransformMenuPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ParameterizedSideTransformMenuPart").super_("jetbrains.mps.lang.actions.structure.SideTransformMenuPart").parents("jetbrains.mps.lang.actions.structure.SideTransformMenuPart").children(new String[]{"type", "query", "matchingText", "descriptionText", "icon", "iconNode", "handler"}, new boolean[]{false, false, false, false, false, false, false}).alias("parameterized item", "").create();
  /*package*/ final ConceptDescriptor myConceptParameterizedSubstituteMenuPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.ParameterizedSubstituteMenuPart").super_("jetbrains.mps.lang.actions.structure.SubstituteMenuPart").parents("jetbrains.mps.lang.actions.structure.SubstituteMenuPart").children(new String[]{"type", "query", "matchingText", "descriptionText", "icon", "iconNode", "handler", "selectionHandler"}, new boolean[]{false, false, false, false, false, false, false, false}).alias("parameterized item", "").create();
  /*package*/ final ConceptDescriptor myConceptPastePostProcessFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.PastePostProcessFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("paste post process function", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPastePostProcessor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.PastePostProcessor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("concept").children(new String[]{"postProcessFunction"}, new boolean[]{false}).alias("paste post processor", "").create();
  /*package*/ final ConceptDescriptor myConceptPasteWrapper = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.PasteWrapper").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("sourceConcept", "targetConcept").children(new String[]{"wrapperFunction"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptPasteWrappers = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.PasteWrappers").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.structure.structure.IConceptAspect").children(new String[]{"wrapper"}, new boolean[]{true}).alias("Paste Wrappers", "").create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_ActionType = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_ActionType").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("", "return result type for this action, used for smart completion").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_CanSubstitute = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_CanSubstitute").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("", "return false if this action should be excluded from the substitute menu").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_GenericSubstituteMenuPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_GenericSubstituteMenuPart").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("", "return collection of custom SubstituteActions").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_IconNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_IconNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("", "return concept<> or node<>. Icon associated with this concept<> or a concept of this node<> will be used for this menu item.").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_ParameterizedSideTransform_Handler = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_ParameterizedSideTransform_Handler").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_ParameterizedSideTransform_Query = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_ParameterizedSideTransform_Query").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_ParameterizedSubstitute_Handler = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_ParameterizedSubstitute_Handler").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("", "return node<> to substitute currentTargetNode with").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_ParameterizedSubstitute_Icon = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_ParameterizedSubstitute_Icon").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_ParameterizedSubstitute_Query = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_ParameterizedSubstitute_Query").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("", "return collection of substitute menu part parameters").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_ParameterizedSubstitute_String = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_ParameterizedSubstitute_String").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("", "return text string").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_PasteWrapper = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_PasteWrapper").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_RemoveBy_Condition = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_RemoveBy_Condition").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("", "return true if corresponding substitute action should be removed from the completion menu").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_ReturnSmallPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_ReturnSmallPart").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("", "return true if wrapped node should be used to setup selection in editor").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_STVariableInitializer = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_STVariableInitializer").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_ST_CommonInitializer = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_ST_CommonInitializer").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_ST_RemoveBy_Condition = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_ST_RemoveBy_Condition").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_SideTransform_ConceptHandler = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_SideTransform_ConceptHandler").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_SideTransform_Handler = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_SideTransform_Handler").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_SideTransform_Icon = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_SideTransform_Icon").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("icon", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_SideTransform_NodeQuery = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_SideTransform_NodeQuery").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_SideTransform_String = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_SideTransform_String").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction", "jetbrains.mps.lang.actions.structure.ISideTransform_String").alias("get text", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_SubstituteIcon = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_SubstituteIcon").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_SubstituteString = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_SubstituteString").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction", "jetbrains.mps.lang.actions.structure.ISubstitute_String").alias("", "return text string").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_SubstituteVariableInitializer = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_SubstituteVariableInitializer").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("", "return initial value of the variable").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_SubstituteWrapper = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_SubstituteWrapper").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("", "create new instance of output concept wrapping (containing) passed nodeToWrap").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_Substitute_CommonInitializer = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_Substitute_CommonInitializer").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("", "common init block").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_Substitute_Handler = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_Substitute_Handler").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("", "return node<> to substitute currentTargetNode with").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_Substitute_SelectionHandler = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.QueryFunction_Substitute_SelectionHandler").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("", "return node to select or null if selection API was directly called from the query").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRemoveByConditionPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.RemoveByConditionPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.actions.structure.NodeSubstituteMenuBuilderPart", "jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"condition"}, new boolean[]{false}).alias("remove by condition", "").create();
  /*package*/ final ConceptDescriptor myConceptRemoveDefaultsPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.RemoveDefaultsPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.actions.structure.NodeSubstituteMenuBuilderPart", "jetbrains.mps.lang.core.structure.BaseConcept").alias("remove defaults", "").create();
  /*package*/ final ConceptDescriptor myConceptRemovePart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.RemovePart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.actions.structure.NodeSubstituteMenuBuilderPart", "jetbrains.mps.lang.actions.structure.SideTransformMenuBuilderPart", "jetbrains.mps.lang.core.structure.BaseConcept").references("conceptToRemove").alias("remove concept", "").create();
  /*package*/ final ConceptDescriptor myConceptRemoveSTByConditionPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.RemoveSTByConditionPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.actions.structure.SideTransformMenuBuilderPart", "jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"condition"}, new boolean[]{false}).alias("remove by condition", "").create();
  /*package*/ final ConceptDescriptor myConceptSNodeCreatorAndInitializer = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.SNodeCreatorAndInitializer").super_("jetbrains.mps.lang.smodel.structure.SNodeCreator").parents("jetbrains.mps.lang.smodel.structure.SNodeCreator").children(new String[]{"prototype"}, new boolean[]{false}).alias("initialized node<>", "create new initialized node").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSideTransformHintSubstituteActions = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.SideTransformHintSubstituteActions").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.structure.structure.IConceptAspect").children(new String[]{"actionsBuilder"}, new boolean[]{true}).alias("Transform Menu Actions", "").create();
  /*package*/ final ConceptDescriptor myConceptSideTransformHintSubstituteActionsBuilder = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.SideTransformHintSubstituteActionsBuilder").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.ScopeProvider", "jetbrains.mps.lang.core.structure.BaseConcept").properties("description", "transformTag", "side").references("applicableConcept").children(new String[]{"precondition", "part", "variable", "commonInitializer"}, new boolean[]{false, true, true, false}).create();
  /*package*/ final ConceptDescriptor myConceptSideTransformHintSubstitutePreconditionFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.SideTransformHintSubstitutePreconditionFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("precondition", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSideTransformMenuBuilderPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.SideTransformMenuBuilderPart").interface_().create();
  /*package*/ final ConceptDescriptor myConceptSideTransformMenuPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.SideTransformMenuPart").super_("jetbrains.mps.lang.actions.structure.MenuPart").parents("jetbrains.mps.lang.actions.structure.MenuPart").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptSideTransformVariableDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.SideTransformVariableDeclaration").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"initializerBlock"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptSideTransformVariableReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.SideTransformVariableReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference").references("rightTransformVariableDeclaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSideTransform_SimpleString = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.SideTransform_SimpleString").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.actions.structure.ISideTransform_String").properties("text").alias("simple string", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSimpleItemSubstitutePart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.SimpleItemSubstitutePart").super_("jetbrains.mps.lang.actions.structure.SubstituteMenuPart").parents("jetbrains.mps.lang.actions.structure.SubstituteMenuPart").children(new String[]{"matchingText", "descriptionText", "icon", "iconNode", "canSubstitute", "handler", "selectionHandler"}, new boolean[]{false, false, false, false, false, false, false}).alias("simple", "").create();
  /*package*/ final ConceptDescriptor myConceptSimpleSideTransformMenuPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.SimpleSideTransformMenuPart").super_("jetbrains.mps.lang.actions.structure.SideTransformMenuPart").parents("jetbrains.mps.lang.actions.structure.SideTransformMenuPart").children(new String[]{"matchingText", "descriptionText", "icon", "iconNode", "handler"}, new boolean[]{false, false, false, false, false}).alias("simple item", "").create();
  /*package*/ final ConceptDescriptor myConceptSmartActionParameter = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.SmartActionParameter").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"type"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptSmartActionParameterReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.SmartActionParameterReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("smartActionParameter").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSmartEditorActions = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.SmartEditorActions").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"surroundWith", "generateCode"}, new boolean[]{true, true}).alias("Smart Editor Actions", "").create();
  /*package*/ final ConceptDescriptor myConceptSubstituteMenuPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.SubstituteMenuPart").super_("jetbrains.mps.lang.actions.structure.MenuPart").parents("jetbrains.mps.lang.actions.structure.MenuPart").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptSubstituteNodeBuilderVariableDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.SubstituteNodeBuilderVariableDeclaration").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"initializerBlock"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptSubstituteNodeBuilderVariableReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.SubstituteNodeBuilderVariableReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference").references("nodeBuilderVariableDeclaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSubstitute_SimpleString = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.Substitute_SimpleString").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.actions.structure.ISubstitute_String", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("text").create();
  /*package*/ final ConceptDescriptor myConceptSurroundWithAction = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.SurroundWithAction").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptWrapperSubstituteMenuPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.structure.WrapperSubstituteMenuPart").super_("jetbrains.mps.lang.actions.structure.SubstituteMenuPart").parents("jetbrains.mps.lang.actions.structure.SubstituteMenuPart").references("wrappedConcept").children(new String[]{"wrapperBlock", "returnSmallPart", "selectionHandler"}, new boolean[]{false, false, false}).alias("wrapper", "").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAddMenuPart, myConceptConceptFunctionParameter_EditorCell, myConceptConceptFunctionParameter_OperationContext, myConceptConceptFunctionParameter_childConcept, myConceptConceptFunctionParameter_childSetter, myConceptConceptFunctionParameter_concept, myConceptConceptFunctionParameter_createdNode, myConceptConceptFunctionParameter_currentTargetNode, myConceptConceptFunctionParameter_link, myConceptConceptFunctionParameter_nodeToCopyPreProcess, myConceptConceptFunctionParameter_nodeToCopyPreProcessOriginal, myConceptConceptFunctionParameter_nodeToPastePostProcess, myConceptConceptFunctionParameter_nodeToPasteWrap, myConceptConceptFunctionParameter_nodeToWrap, myConceptConceptFunctionParameter_parameterObject, myConceptConceptFunctionParameter_parentNode, myConceptConceptFunctionParameter_pattern, myConceptConceptFunctionParameter_result, myConceptConceptFunctionParameter_sourceNode, myConceptConceptFunctionParameter_strictly, myConceptConceptFunctionParameter_targetNode, myConceptConceptFunctionParameter_wrapped, myConceptConceptPart, myConceptConceptRightTransformPart, myConceptConceptSubstitutePart, myConceptConceptsSubstituteMenuPart, myConceptCopyPasteHandlers, myConceptCopyPreProcessFunction, myConceptCopyPreProcessor, myConceptExecuteSmartActionFunction, myConceptGenerateCodeAction, myConceptGenericSubstituteMenuPart, myConceptGetActionUIFunction, myConceptISideTransform_String, myConceptISubstitute_String, myConceptIncludeRightTransformForNodePart, myConceptIsSmartActionApplicableFunction, myConceptMenuPart, myConceptNF_Concept_NewInstance, myConceptNF_LinkList_AddNewChildOperation, myConceptNF_Link_SetNewChildOperation, myConceptNF_Model_CreateNewNodeOperation, myConceptNF_Model_CreateNewRootNodeOperation, myConceptNF_Node_InsertNewNextSiblingOperation, myConceptNF_Node_InsertNewPrevSiblingOperation, myConceptNF_Node_ReplaceWithNewOperation, myConceptNodeFactories, myConceptNodeFactory, myConceptNodeSetupFunction, myConceptNodeSetupFunction_EnclosingNode, myConceptNodeSetupFunction_NewNode, myConceptNodeSetupFunction_SampleNode, myConceptNodeSubstituteActions, myConceptNodeSubstituteActionsBuilder, myConceptNodeSubstituteMenuBuilderPart, myConceptNodeSubstitutePreconditionFunction, myConceptParameterizedSideTransformMenuPart, myConceptParameterizedSubstituteMenuPart, myConceptPastePostProcessFunction, myConceptPastePostProcessor, myConceptPasteWrapper, myConceptPasteWrappers, myConceptQueryFunction_ActionType, myConceptQueryFunction_CanSubstitute, myConceptQueryFunction_GenericSubstituteMenuPart, myConceptQueryFunction_IconNode, myConceptQueryFunction_ParameterizedSideTransform_Handler, myConceptQueryFunction_ParameterizedSideTransform_Query, myConceptQueryFunction_ParameterizedSubstitute_Handler, myConceptQueryFunction_ParameterizedSubstitute_Icon, myConceptQueryFunction_ParameterizedSubstitute_Query, myConceptQueryFunction_ParameterizedSubstitute_String, myConceptQueryFunction_PasteWrapper, myConceptQueryFunction_RemoveBy_Condition, myConceptQueryFunction_ReturnSmallPart, myConceptQueryFunction_STVariableInitializer, myConceptQueryFunction_ST_CommonInitializer, myConceptQueryFunction_ST_RemoveBy_Condition, myConceptQueryFunction_SideTransform_ConceptHandler, myConceptQueryFunction_SideTransform_Handler, myConceptQueryFunction_SideTransform_Icon, myConceptQueryFunction_SideTransform_NodeQuery, myConceptQueryFunction_SideTransform_String, myConceptQueryFunction_SubstituteIcon, myConceptQueryFunction_SubstituteString, myConceptQueryFunction_SubstituteVariableInitializer, myConceptQueryFunction_SubstituteWrapper, myConceptQueryFunction_Substitute_CommonInitializer, myConceptQueryFunction_Substitute_Handler, myConceptQueryFunction_Substitute_SelectionHandler, myConceptRemoveByConditionPart, myConceptRemoveDefaultsPart, myConceptRemovePart, myConceptRemoveSTByConditionPart, myConceptSNodeCreatorAndInitializer, myConceptSideTransformHintSubstituteActions, myConceptSideTransformHintSubstituteActionsBuilder, myConceptSideTransformHintSubstitutePreconditionFunction, myConceptSideTransformMenuBuilderPart, myConceptSideTransformMenuPart, myConceptSideTransformVariableDeclaration, myConceptSideTransformVariableReference, myConceptSideTransform_SimpleString, myConceptSimpleItemSubstitutePart, myConceptSimpleSideTransformMenuPart, myConceptSmartActionParameter, myConceptSmartActionParameterReference, myConceptSmartEditorActions, myConceptSubstituteMenuPart, myConceptSubstituteNodeBuilderVariableDeclaration, myConceptSubstituteNodeBuilderVariableReference, myConceptSubstitute_SimpleString, myConceptSurroundWithAction, myConceptWrapperSubstituteMenuPart);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0ne, conceptFqName)) {
      case 0:
        return myConceptAddMenuPart;
      case 1:
        return myConceptConceptFunctionParameter_EditorCell;
      case 2:
        return myConceptConceptFunctionParameter_OperationContext;
      case 3:
        return myConceptConceptFunctionParameter_childConcept;
      case 4:
        return myConceptConceptFunctionParameter_childSetter;
      case 5:
        return myConceptConceptFunctionParameter_concept;
      case 6:
        return myConceptConceptFunctionParameter_createdNode;
      case 7:
        return myConceptConceptFunctionParameter_currentTargetNode;
      case 8:
        return myConceptConceptFunctionParameter_link;
      case 9:
        return myConceptConceptFunctionParameter_nodeToCopyPreProcess;
      case 10:
        return myConceptConceptFunctionParameter_nodeToCopyPreProcessOriginal;
      case 11:
        return myConceptConceptFunctionParameter_nodeToPastePostProcess;
      case 12:
        return myConceptConceptFunctionParameter_nodeToPasteWrap;
      case 13:
        return myConceptConceptFunctionParameter_nodeToWrap;
      case 14:
        return myConceptConceptFunctionParameter_parameterObject;
      case 15:
        return myConceptConceptFunctionParameter_parentNode;
      case 16:
        return myConceptConceptFunctionParameter_pattern;
      case 17:
        return myConceptConceptFunctionParameter_result;
      case 18:
        return myConceptConceptFunctionParameter_sourceNode;
      case 19:
        return myConceptConceptFunctionParameter_strictly;
      case 20:
        return myConceptConceptFunctionParameter_targetNode;
      case 21:
        return myConceptConceptFunctionParameter_wrapped;
      case 22:
        return myConceptConceptPart;
      case 23:
        return myConceptConceptRightTransformPart;
      case 24:
        return myConceptConceptSubstitutePart;
      case 25:
        return myConceptConceptsSubstituteMenuPart;
      case 26:
        return myConceptCopyPasteHandlers;
      case 27:
        return myConceptCopyPreProcessFunction;
      case 28:
        return myConceptCopyPreProcessor;
      case 29:
        return myConceptExecuteSmartActionFunction;
      case 30:
        return myConceptGenerateCodeAction;
      case 31:
        return myConceptGenericSubstituteMenuPart;
      case 32:
        return myConceptGetActionUIFunction;
      case 33:
        return myConceptISideTransform_String;
      case 34:
        return myConceptISubstitute_String;
      case 35:
        return myConceptIncludeRightTransformForNodePart;
      case 36:
        return myConceptIsSmartActionApplicableFunction;
      case 37:
        return myConceptMenuPart;
      case 38:
        return myConceptNF_Concept_NewInstance;
      case 39:
        return myConceptNF_LinkList_AddNewChildOperation;
      case 40:
        return myConceptNF_Link_SetNewChildOperation;
      case 41:
        return myConceptNF_Model_CreateNewNodeOperation;
      case 42:
        return myConceptNF_Model_CreateNewRootNodeOperation;
      case 43:
        return myConceptNF_Node_InsertNewNextSiblingOperation;
      case 44:
        return myConceptNF_Node_InsertNewPrevSiblingOperation;
      case 45:
        return myConceptNF_Node_ReplaceWithNewOperation;
      case 46:
        return myConceptNodeFactories;
      case 47:
        return myConceptNodeFactory;
      case 48:
        return myConceptNodeSetupFunction;
      case 49:
        return myConceptNodeSetupFunction_EnclosingNode;
      case 50:
        return myConceptNodeSetupFunction_NewNode;
      case 51:
        return myConceptNodeSetupFunction_SampleNode;
      case 52:
        return myConceptNodeSubstituteActions;
      case 53:
        return myConceptNodeSubstituteActionsBuilder;
      case 54:
        return myConceptNodeSubstituteMenuBuilderPart;
      case 55:
        return myConceptNodeSubstitutePreconditionFunction;
      case 56:
        return myConceptParameterizedSideTransformMenuPart;
      case 57:
        return myConceptParameterizedSubstituteMenuPart;
      case 58:
        return myConceptPastePostProcessFunction;
      case 59:
        return myConceptPastePostProcessor;
      case 60:
        return myConceptPasteWrapper;
      case 61:
        return myConceptPasteWrappers;
      case 62:
        return myConceptQueryFunction_ActionType;
      case 63:
        return myConceptQueryFunction_CanSubstitute;
      case 64:
        return myConceptQueryFunction_GenericSubstituteMenuPart;
      case 65:
        return myConceptQueryFunction_IconNode;
      case 66:
        return myConceptQueryFunction_ParameterizedSideTransform_Handler;
      case 67:
        return myConceptQueryFunction_ParameterizedSideTransform_Query;
      case 68:
        return myConceptQueryFunction_ParameterizedSubstitute_Handler;
      case 69:
        return myConceptQueryFunction_ParameterizedSubstitute_Icon;
      case 70:
        return myConceptQueryFunction_ParameterizedSubstitute_Query;
      case 71:
        return myConceptQueryFunction_ParameterizedSubstitute_String;
      case 72:
        return myConceptQueryFunction_PasteWrapper;
      case 73:
        return myConceptQueryFunction_RemoveBy_Condition;
      case 74:
        return myConceptQueryFunction_ReturnSmallPart;
      case 75:
        return myConceptQueryFunction_STVariableInitializer;
      case 76:
        return myConceptQueryFunction_ST_CommonInitializer;
      case 77:
        return myConceptQueryFunction_ST_RemoveBy_Condition;
      case 78:
        return myConceptQueryFunction_SideTransform_ConceptHandler;
      case 79:
        return myConceptQueryFunction_SideTransform_Handler;
      case 80:
        return myConceptQueryFunction_SideTransform_Icon;
      case 81:
        return myConceptQueryFunction_SideTransform_NodeQuery;
      case 82:
        return myConceptQueryFunction_SideTransform_String;
      case 83:
        return myConceptQueryFunction_SubstituteIcon;
      case 84:
        return myConceptQueryFunction_SubstituteString;
      case 85:
        return myConceptQueryFunction_SubstituteVariableInitializer;
      case 86:
        return myConceptQueryFunction_SubstituteWrapper;
      case 87:
        return myConceptQueryFunction_Substitute_CommonInitializer;
      case 88:
        return myConceptQueryFunction_Substitute_Handler;
      case 89:
        return myConceptQueryFunction_Substitute_SelectionHandler;
      case 90:
        return myConceptRemoveByConditionPart;
      case 91:
        return myConceptRemoveDefaultsPart;
      case 92:
        return myConceptRemovePart;
      case 93:
        return myConceptRemoveSTByConditionPart;
      case 94:
        return myConceptSNodeCreatorAndInitializer;
      case 95:
        return myConceptSideTransformHintSubstituteActions;
      case 96:
        return myConceptSideTransformHintSubstituteActionsBuilder;
      case 97:
        return myConceptSideTransformHintSubstitutePreconditionFunction;
      case 98:
        return myConceptSideTransformMenuBuilderPart;
      case 99:
        return myConceptSideTransformMenuPart;
      case 100:
        return myConceptSideTransformVariableDeclaration;
      case 101:
        return myConceptSideTransformVariableReference;
      case 102:
        return myConceptSideTransform_SimpleString;
      case 103:
        return myConceptSimpleItemSubstitutePart;
      case 104:
        return myConceptSimpleSideTransformMenuPart;
      case 105:
        return myConceptSmartActionParameter;
      case 106:
        return myConceptSmartActionParameterReference;
      case 107:
        return myConceptSmartEditorActions;
      case 108:
        return myConceptSubstituteMenuPart;
      case 109:
        return myConceptSubstituteNodeBuilderVariableDeclaration;
      case 110:
        return myConceptSubstituteNodeBuilderVariableReference;
      case 111:
        return myConceptSubstitute_SimpleString;
      case 112:
        return myConceptSurroundWithAction;
      case 113:
        return myConceptWrapperSubstituteMenuPart;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0ne = new String[]{"jetbrains.mps.lang.actions.structure.AddMenuPart", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_EditorCell", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_OperationContext", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_childConcept", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_childSetter", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_concept", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_createdNode", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_currentTargetNode", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_link", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_nodeToCopyPreProcess", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_nodeToCopyPreProcessOriginal", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_nodeToPastePostProcess", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_nodeToPasteWrap", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_nodeToWrap", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_parameterObject", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_parentNode", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_pattern", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_result", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_sourceNode", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_strictly", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_targetNode", "jetbrains.mps.lang.actions.structure.ConceptFunctionParameter_wrapped", "jetbrains.mps.lang.actions.structure.ConceptPart", "jetbrains.mps.lang.actions.structure.ConceptRightTransformPart", "jetbrains.mps.lang.actions.structure.ConceptSubstitutePart", "jetbrains.mps.lang.actions.structure.ConceptsSubstituteMenuPart", "jetbrains.mps.lang.actions.structure.CopyPasteHandlers", "jetbrains.mps.lang.actions.structure.CopyPreProcessFunction", "jetbrains.mps.lang.actions.structure.CopyPreProcessor", "jetbrains.mps.lang.actions.structure.ExecuteSmartActionFunction", "jetbrains.mps.lang.actions.structure.GenerateCodeAction", "jetbrains.mps.lang.actions.structure.GenericSubstituteMenuPart", "jetbrains.mps.lang.actions.structure.GetActionUIFunction", "jetbrains.mps.lang.actions.structure.ISideTransform_String", "jetbrains.mps.lang.actions.structure.ISubstitute_String", "jetbrains.mps.lang.actions.structure.IncludeRightTransformForNodePart", "jetbrains.mps.lang.actions.structure.IsSmartActionApplicableFunction", "jetbrains.mps.lang.actions.structure.MenuPart", "jetbrains.mps.lang.actions.structure.NF_Concept_NewInstance", "jetbrains.mps.lang.actions.structure.NF_LinkList_AddNewChildOperation", "jetbrains.mps.lang.actions.structure.NF_Link_SetNewChildOperation", "jetbrains.mps.lang.actions.structure.NF_Model_CreateNewNodeOperation", "jetbrains.mps.lang.actions.structure.NF_Model_CreateNewRootNodeOperation", "jetbrains.mps.lang.actions.structure.NF_Node_InsertNewNextSiblingOperation", "jetbrains.mps.lang.actions.structure.NF_Node_InsertNewPrevSiblingOperation", "jetbrains.mps.lang.actions.structure.NF_Node_ReplaceWithNewOperation", "jetbrains.mps.lang.actions.structure.NodeFactories", "jetbrains.mps.lang.actions.structure.NodeFactory", "jetbrains.mps.lang.actions.structure.NodeSetupFunction", "jetbrains.mps.lang.actions.structure.NodeSetupFunction_EnclosingNode", "jetbrains.mps.lang.actions.structure.NodeSetupFunction_NewNode", "jetbrains.mps.lang.actions.structure.NodeSetupFunction_SampleNode", "jetbrains.mps.lang.actions.structure.NodeSubstituteActions", "jetbrains.mps.lang.actions.structure.NodeSubstituteActionsBuilder", "jetbrains.mps.lang.actions.structure.NodeSubstituteMenuBuilderPart", "jetbrains.mps.lang.actions.structure.NodeSubstitutePreconditionFunction", "jetbrains.mps.lang.actions.structure.ParameterizedSideTransformMenuPart", "jetbrains.mps.lang.actions.structure.ParameterizedSubstituteMenuPart", "jetbrains.mps.lang.actions.structure.PastePostProcessFunction", "jetbrains.mps.lang.actions.structure.PastePostProcessor", "jetbrains.mps.lang.actions.structure.PasteWrapper", "jetbrains.mps.lang.actions.structure.PasteWrappers", "jetbrains.mps.lang.actions.structure.QueryFunction_ActionType", "jetbrains.mps.lang.actions.structure.QueryFunction_CanSubstitute", "jetbrains.mps.lang.actions.structure.QueryFunction_GenericSubstituteMenuPart", "jetbrains.mps.lang.actions.structure.QueryFunction_IconNode", "jetbrains.mps.lang.actions.structure.QueryFunction_ParameterizedSideTransform_Handler", "jetbrains.mps.lang.actions.structure.QueryFunction_ParameterizedSideTransform_Query", "jetbrains.mps.lang.actions.structure.QueryFunction_ParameterizedSubstitute_Handler", "jetbrains.mps.lang.actions.structure.QueryFunction_ParameterizedSubstitute_Icon", "jetbrains.mps.lang.actions.structure.QueryFunction_ParameterizedSubstitute_Query", "jetbrains.mps.lang.actions.structure.QueryFunction_ParameterizedSubstitute_String", "jetbrains.mps.lang.actions.structure.QueryFunction_PasteWrapper", "jetbrains.mps.lang.actions.structure.QueryFunction_RemoveBy_Condition", "jetbrains.mps.lang.actions.structure.QueryFunction_ReturnSmallPart", "jetbrains.mps.lang.actions.structure.QueryFunction_STVariableInitializer", "jetbrains.mps.lang.actions.structure.QueryFunction_ST_CommonInitializer", "jetbrains.mps.lang.actions.structure.QueryFunction_ST_RemoveBy_Condition", "jetbrains.mps.lang.actions.structure.QueryFunction_SideTransform_ConceptHandler", "jetbrains.mps.lang.actions.structure.QueryFunction_SideTransform_Handler", "jetbrains.mps.lang.actions.structure.QueryFunction_SideTransform_Icon", "jetbrains.mps.lang.actions.structure.QueryFunction_SideTransform_NodeQuery", "jetbrains.mps.lang.actions.structure.QueryFunction_SideTransform_String", "jetbrains.mps.lang.actions.structure.QueryFunction_SubstituteIcon", "jetbrains.mps.lang.actions.structure.QueryFunction_SubstituteString", "jetbrains.mps.lang.actions.structure.QueryFunction_SubstituteVariableInitializer", "jetbrains.mps.lang.actions.structure.QueryFunction_SubstituteWrapper", "jetbrains.mps.lang.actions.structure.QueryFunction_Substitute_CommonInitializer", "jetbrains.mps.lang.actions.structure.QueryFunction_Substitute_Handler", "jetbrains.mps.lang.actions.structure.QueryFunction_Substitute_SelectionHandler", "jetbrains.mps.lang.actions.structure.RemoveByConditionPart", "jetbrains.mps.lang.actions.structure.RemoveDefaultsPart", "jetbrains.mps.lang.actions.structure.RemovePart", "jetbrains.mps.lang.actions.structure.RemoveSTByConditionPart", "jetbrains.mps.lang.actions.structure.SNodeCreatorAndInitializer", "jetbrains.mps.lang.actions.structure.SideTransformHintSubstituteActions", "jetbrains.mps.lang.actions.structure.SideTransformHintSubstituteActionsBuilder", "jetbrains.mps.lang.actions.structure.SideTransformHintSubstitutePreconditionFunction", "jetbrains.mps.lang.actions.structure.SideTransformMenuBuilderPart", "jetbrains.mps.lang.actions.structure.SideTransformMenuPart", "jetbrains.mps.lang.actions.structure.SideTransformVariableDeclaration", "jetbrains.mps.lang.actions.structure.SideTransformVariableReference", "jetbrains.mps.lang.actions.structure.SideTransform_SimpleString", "jetbrains.mps.lang.actions.structure.SimpleItemSubstitutePart", "jetbrains.mps.lang.actions.structure.SimpleSideTransformMenuPart", "jetbrains.mps.lang.actions.structure.SmartActionParameter", "jetbrains.mps.lang.actions.structure.SmartActionParameterReference", "jetbrains.mps.lang.actions.structure.SmartEditorActions", "jetbrains.mps.lang.actions.structure.SubstituteMenuPart", "jetbrains.mps.lang.actions.structure.SubstituteNodeBuilderVariableDeclaration", "jetbrains.mps.lang.actions.structure.SubstituteNodeBuilderVariableReference", "jetbrains.mps.lang.actions.structure.Substitute_SimpleString", "jetbrains.mps.lang.actions.structure.SurroundWithAction", "jetbrains.mps.lang.actions.structure.WrapperSubstituteMenuPart"};
}
