package jetbrains.mps.lang.actions.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class CopyPasteHandlers_Behavior {
  public static void init(SNode thisNode) {
  }

  public static List<SNode> virtual_getBaseConceptCollection_5270353093116013036(SNode thisNode) {
    final List<SNode> result = new ArrayList<SNode>();
    ListSequence.fromList(SLinkOperations.getTargets(thisNode, "preProcessor", true)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        ListSequence.fromList(result).addElement(SLinkOperations.getTarget(it, "concept", false));
      }
    });
    ListSequence.fromList(SLinkOperations.getTargets(thisNode, "postProcessor", true)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        ListSequence.fromList(result).addElement(SLinkOperations.getTarget(it, "concept", false));
      }
    });
    return result;
  }

  public static void virtual_setBaseConcept_6261424444345963020(SNode thisNode, SNode baseConcept) {
    SNode pastePostProcessor = SConceptOperations.createNewNode("jetbrains.mps.lang.actions.structure.PastePostProcessor", null);
    SLinkOperations.setTarget(pastePostProcessor, "concept", baseConcept, false);
    ListSequence.fromList(SLinkOperations.getTargets(thisNode, "postProcessor", true)).addElement(pastePostProcessor);
    String name = SModelUtil.getDeclaringLanguage(baseConcept).getModuleFqName();
    SPropertyOperations.set(thisNode, "name", NameUtil.shortNameFromLongName(name) + "_CopyPasteHandlers");
  }

  @Deprecated
  public static List<SNode> call_getBaseConceptCollection_5948027493682791350(SNode thisNode) {
    return BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), thisNode, "virtual_getBaseConceptCollection_5270353093116013036", new Object[]{});
  }

  @Deprecated
  public static void call_setBaseConcept_6261424444345978344(SNode thisNode, SNode baseConcept) {
    BehaviorReflection.invokeVirtual(Void.class, thisNode, "virtual_setBaseConcept_6261424444345963020", new Object[]{baseConcept});
  }

  @Deprecated
  public static List<SNode> callSuper_getBaseConceptCollection_5948027493682791350(SNode thisNode, String callerConceptFqName) {
    return BehaviorManager.getInstance().invokeSuper((Class<List<SNode>>) ((Class) Object.class), SNodeOperations.cast(thisNode, "jetbrains.mps.lang.actions.structure.CopyPasteHandlers"), callerConceptFqName, "virtual_getBaseConceptCollection_5270353093116013036", new Class[]{SNode.class}, new Object[]{});
  }

  @Deprecated
  public static void callSuper_setBaseConcept_6261424444345978344(SNode thisNode, String callerConceptFqName, SNode baseConcept) {
    BehaviorManager.getInstance().invokeSuper(Void.class, SNodeOperations.cast(thisNode, "jetbrains.mps.lang.actions.structure.CopyPasteHandlers"), callerConceptFqName, "virtual_setBaseConcept_6261424444345963020", new Class[]{SNode.class, SNode.class}, new Object[]{baseConcept});
  }
}
