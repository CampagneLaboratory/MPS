package jetbrains.mps.lang.traceable.operations.tests;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest4;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import junit.framework.Assert;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.template.TracingUtil;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

@MPSLaunch
public class CopyWithTrace_Test extends BaseTransformationTest4 {
  @Test
  public void test_copyNodeWithTrace() throws Throwable {
    this.initTest("${mps_home}", "r:040810da-2115-47c4-899f-bb0a7342e4e5(jetbrains.mps.lang.traceable.operations.tests@tests)");
    this.runTest("jetbrains.mps.lang.traceable.operations.tests.CopyWithTrace_Test$TestBody", "test_copyNodeWithTrace", true);
  }

  @Test
  public void test_copyNListWithTrace() throws Throwable {
    this.initTest("${mps_home}", "r:040810da-2115-47c4-899f-bb0a7342e4e5(jetbrains.mps.lang.traceable.operations.tests@tests)");
    this.runTest("jetbrains.mps.lang.traceable.operations.tests.CopyWithTrace_Test$TestBody", "test_copyNListWithTrace", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_copyNodeWithTrace() throws Exception {
      this.addNodeById("7327404875649026841");
      Assert.assertEquals(SNodeOperations.cast(this.getNodeById("7327404875649026848"), "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"), TracingUtil.getInputNode(TracingUtil.copyWithTrace(SNodeOperations.cast(this.getNodeById("7327404875649026848"), "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"))));
    }

    public void test_copyNListWithTrace() throws Exception {
      this.addNodeById("7327404875649026841");
      List<SNode> copy = TracingUtil.copyWithTrace(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById("7327404875649026848"), "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"), SNodeOperations.cast(this.getNodeById("7327404875649026875"), "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")));
      SNode utilityCopy = ListSequence.fromList(copy).getElement(0);
      SNode callingCopy = ListSequence.fromList(copy).getElement(1);
      Assert.assertEquals(SNodeOperations.cast(this.getNodeById("7327404875649026848"), "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"), TracingUtil.getInputNode(utilityCopy));
      Assert.assertEquals(SNodeOperations.cast(this.getNodeById("7327404875649026875"), "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"), TracingUtil.getInputNode(callingCopy));
      Assert.assertEquals(SLinkOperations.getTarget(ListSequence.fromList(SNodeOperations.getDescendants(callingCopy, "jetbrains.mps.baseLanguage.structure.LocalMethodCall", false, new String[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, "baseMethodDeclaration", false), "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration");
        }
      }).toListSequence().first(), "baseMethodDeclaration", false), utilityCopy);
    }
  }
}
