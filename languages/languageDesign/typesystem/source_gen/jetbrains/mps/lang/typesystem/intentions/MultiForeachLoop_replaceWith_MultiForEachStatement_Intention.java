package jetbrains.mps.lang.typesystem.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class MultiForeachLoop_replaceWith_MultiForEachStatement_Intention extends BaseIntention {
  public MultiForeachLoop_replaceWith_MultiForEachStatement_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.typesystem.structure.MultipleForeachLoop";
  }

  public String getPresentation() {
    return "MultiForeachLoop_replaceWith_MultiForEachStatement";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.typesystem.intentions.MultiForeachLoop_replaceWith_MultiForEachStatement_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.ERROR;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:6cd1848d-7973-446d-943e-a0781322f155(jetbrains.mps.lang.typesystem.intentions@3_0)", "8293956702610699517");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Replace with foreach from collections language";
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    final List<SNode> mfps = ListSequence.fromList(SLinkOperations.getTargets(node, "loopVariable", true)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode lv) {
        return new MultiForeachLoop_replaceWith_MultiForEachStatement_Intention.QuotationClass_5rn0la_a0a0a0a0a0a0a0i().createNode(SPropertyOperations.getString(SLinkOperations.getTarget(lv, "variable", true), "name"), SNodeOperations.copyNode(SLinkOperations.getTarget(lv, "iterable", true)));
      }
    }).toListSequence();
    SNode mfs = SNodeOperations.replaceWithAnother(node, new MultiForeachLoop_replaceWith_MultiForEachStatement_Intention.QuotationClass_5rn0la_a1a0b0i().createNode(mfps, SNodeOperations.copyNode(SLinkOperations.getTarget(node, "body", true))));
    final List<SNode> lvs = ListSequence.fromList(SLinkOperations.getTargets(node, "loopVariable", true)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode lv) {
        return SLinkOperations.getTarget(lv, "variable", true);
      }
    }).toListSequence();
    ListSequence.fromList(SNodeOperations.getDescendants(mfs, "jetbrains.mps.baseLanguage.structure.VariableReference", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.baseLanguage.structure.VariableReference"), "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration");
      }
    }).toListSequence().where(new IWhereFilter<SNode>() {
      public boolean accept(SNode lvr) {
        return ListSequence.fromList(lvs).contains(SNodeOperations.cast(SLinkOperations.getTarget(lvr, "variableDeclaration", false), "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"));
      }
    }).toListSequence().visitAll(new IVisitor<SNode>() {
      public void visit(SNode lvr) {
        SNodeOperations.replaceWithAnother(lvr, new MultiForeachLoop_replaceWith_MultiForEachStatement_Intention.QuotationClass_5rn0la_a1a0a0a0a0a3a8().createNode(SLinkOperations.getTarget(ListSequence.fromList(mfps).getElement(SNodeOperations.getIndexInParent(SNodeOperations.getParent(SLinkOperations.getTarget(lvr, "variableDeclaration", false)))), "variable", true)));
      }
    });
  }

  public static class QuotationClass_5rn0la_a0a0a0a0a0a0a0i {
    public QuotationClass_5rn0la_a0a0a0a0a0a0a0i() {
    }

    public SNode createNode(Object parameter_7, Object parameter_8) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.MultiForEachPair", null, null, GlobalScope.getInstance(), false);
        SNode quotedNode1_4 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.MultiForEachVariable", null, null, GlobalScope.getInstance(), false);
          SNode quotedNode1_5 = quotedNode_2;
          quotedNode1_5.setProperty("name", (String) parameter_7);
          quotedNode_1.addChild("variable", quotedNode1_5);
        }
        {
          quotedNode_3 = (SNode) parameter_8;
          SNode quotedNode1_6;
          if (_parameterValues_129834374.contains(quotedNode_3)) {
            quotedNode1_6 = HUtil.copyIfNecessary(quotedNode_3);
          } else {
            _parameterValues_129834374.add(quotedNode_3);
            quotedNode1_6 = quotedNode_3;
          }
          if (quotedNode1_6 != null) {
            quotedNode_1.addChild("input", HUtil.copyIfNecessary(quotedNode1_6));
          }
        }
        result = quotedNode1_4;
      }
      return result;
    }
  }

  public static class QuotationClass_5rn0la_a1a0b0i {
    public QuotationClass_5rn0la_a1a0b0i() {
    }

    public SNode createNode(Object parameter_8, Object parameter_9) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      SNode quotedNode_5 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.MultiForEachStatement", null, null, GlobalScope.getInstance(), false);
        SNode quotedNode1_6 = quotedNode_1;
        {
          List<SNode> nodes = (List<SNode>) parameter_8;
          for (SNode child : nodes) {
            quotedNode_1.addChild("forEach", HUtil.copyIfNecessary(child));
          }
        }
        {
          quotedNode_3 = (SNode) parameter_9;
          SNode quotedNode1_7;
          if (_parameterValues_129834374.contains(quotedNode_3)) {
            quotedNode1_7 = HUtil.copyIfNecessary(quotedNode_3);
          } else {
            _parameterValues_129834374.add(quotedNode_3);
            quotedNode1_7 = quotedNode_3;
          }
          if (quotedNode1_7 != null) {
            quotedNode_1.addChild("body", HUtil.copyIfNecessary(quotedNode1_7));
          }
        }
        result = quotedNode1_6;
      }
      return result;
    }
  }

  public static class QuotationClass_5rn0la_a1a0a0a0a0a3a8 {
    public QuotationClass_5rn0la_a1a0a0a0a0a3a8() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.MultiForEachVariableReference", null, null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setReferenceTarget("variable", (SNode) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }
}
