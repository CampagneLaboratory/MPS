package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;

public enum InequalityProperty {
  as_is("as is", 0),
  same_as_inequality("same as inequality", 1),
  opposite_to_inequality("opposite to inequality", 2);

  private final String myName;
  public String getName() {
    return myName;
  }
  private final int myValue;
  InequalityProperty(String name, int value) {
    myName = name;
    myValue = value;
  }
  public int getValue() {
    return myValue;
  }
  public String getValueAsString() {
    return Integer.toString(myValue);
  }
  public static List<InequalityProperty> getConstants() {
    List<InequalityProperty> list = ListSequence.fromList(new LinkedList<InequalityProperty>());
    ListSequence.fromList(list).addElement(InequalityProperty.as_is);
    ListSequence.fromList(list).addElement(InequalityProperty.same_as_inequality);
    ListSequence.fromList(list).addElement(InequalityProperty.opposite_to_inequality);
    return list;
  }
  public static InequalityProperty getDefault() {
    return InequalityProperty.as_is;
  }
  public static InequalityProperty parseValue(String value) {
    if (value == null) {
      return InequalityProperty.getDefault();
    }
    if (value.equals(InequalityProperty.as_is.getValueAsString())) {
      return InequalityProperty.as_is;
    }
    if (value.equals(InequalityProperty.same_as_inequality.getValueAsString())) {
      return InequalityProperty.same_as_inequality;
    }
    if (value.equals(InequalityProperty.opposite_to_inequality.getValueAsString())) {
      return InequalityProperty.opposite_to_inequality;
    }
    return InequalityProperty.getDefault();
  }
}
