package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.IMethodLike;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.StatementList;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.Attribute;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class AbstractSubtypingRule extends AbstractRule implements IMethodLike {
  public static final String concept = "jetbrains.mps.lang.typesystem.structure.AbstractSubtypingRule";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String IS_WEAK = "isWeak";
  public static final String BODY = "body";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public AbstractSubtypingRule(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(AbstractSubtypingRule.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(AbstractSubtypingRule.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(AbstractSubtypingRule.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(AbstractSubtypingRule.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(AbstractSubtypingRule.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(AbstractSubtypingRule.VIRTUAL_PACKAGE, value);
  }

  public boolean getIsWeak() {
    return this.getBooleanProperty(AbstractSubtypingRule.IS_WEAK);
  }

  public void setIsWeak(boolean value) {
    this.setBooleanProperty(AbstractSubtypingRule.IS_WEAK, value);
  }

  public StatementList getBody() {
    return (StatementList) this.getChild(StatementList.class, AbstractSubtypingRule.BODY);
  }

  public void setBody(StatementList node) {
    super.setChild(AbstractSubtypingRule.BODY, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(AbstractSubtypingRule.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, AbstractSubtypingRule.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, AbstractSubtypingRule.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(AbstractSubtypingRule.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, AbstractSubtypingRule.SMODEL_ATTRIBUTE, node);
  }

  public static AbstractSubtypingRule newInstance(SModel sm, boolean init) {
    return (AbstractSubtypingRule) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.AbstractSubtypingRule", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AbstractSubtypingRule newInstance(SModel sm) {
    return AbstractSubtypingRule.newInstance(sm, false);
  }
}
