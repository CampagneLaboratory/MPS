package jetbrains.mps.lang.typesystem.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.smodel.SModelUtil_new;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class typeof_MultipleForeachLoopVariable_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_MultipleForeachLoopVariable_InferenceRule() {
  }
  public void applyRule(final SNode forEachVar, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode variable = SLinkOperations.getTarget(forEachVar, "variable", true);
    SNode inputSequence = SLinkOperations.getTarget(forEachVar, "iterable", true);
    if ((inputSequence != null) && (variable != null)) {
      final SNode elementType_typevar_8290446284380616563 = typeCheckingContext.createNewRuntimeTypesVariable();
      {
        SNode _nodeToCheck_1029348928467 = inputSequence;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902b1(jetbrains.mps.lang.typesystem.typesystem)", "8290446284380616564", 0, null);
        typeCheckingContext.createGreaterThanInequality((SNode) _quotation_createNode_aqgyap_a0b0c0b(typeCheckingContext.getRepresentative(elementType_typevar_8290446284380616563), typeCheckingContext.getRepresentative(elementType_typevar_8290446284380616563)), (SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c895902b1(jetbrains.mps.lang.typesystem.typesystem)", "8290446284380616577", true), false, true, _info_12389875345);
      }
      {
        SNode _nodeToCheck_1029348928467 = variable;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c895902b1(jetbrains.mps.lang.typesystem.typesystem)", "8290446284380616579", 0, null);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:00000000-0000-4000-0000-011c895902b1(jetbrains.mps.lang.typesystem.typesystem)", "8290446284380616583", true), (SNode) typeCheckingContext.getRepresentative(elementType_typevar_8290446284380616563), _info_12389875345);
      }
    }
  }
  public String getApplicableConceptFQName() {
    return "jetbrains.mps.lang.typesystem.structure.MultipleForeachLoopVariable";
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }
  public boolean overrides() {
    return false;
  }
  private static SNode _quotation_createNode_aqgyap_a0b0c0b(Object parameter_1, Object parameter_2) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.JoinType", null, null, false);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.collections.structure.SequenceType", null, null, false);
    quotedNode_6 = (SNode) parameter_1;
    if (quotedNode_6 != null) {
      quotedNode_4.addChild("elementType", HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_3.addChild("argument", quotedNode_4);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ArrayType", null, null, false);
    quotedNode_7 = (SNode) parameter_2;
    if (quotedNode_7 != null) {
      quotedNode_5.addChild("componentType", HUtil.copyIfNecessary(quotedNode_7));
    }
    quotedNode_3.addChild("argument", quotedNode_5);
    return quotedNode_3;
  }
}
