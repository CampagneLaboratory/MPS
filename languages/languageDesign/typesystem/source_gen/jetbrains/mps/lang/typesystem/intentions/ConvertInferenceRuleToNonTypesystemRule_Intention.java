package jetbrains.mps.lang.typesystem.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.openapi.navigation.NavigationSupport;

public class ConvertInferenceRuleToNonTypesystemRule_Intention extends BaseIntention {
  public ConvertInferenceRuleToNonTypesystemRule_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.typesystem.structure.InferenceRule";
  }

  public String getPresentation() {
    return "ConvertInferenceRuleToNonTypesystemRule";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.typesystem.intentions.ConvertInferenceRuleToNonTypesystemRule_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:6cd1848d-7973-446d-943e-a0781322f155(jetbrains.mps.lang.typesystem.intentions@3_0)", "1195490883262");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Convert to Non-Typesystem Rule";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    List<SNode> descendants = SNodeOperations.getDescendantsWhereConceptInList(node, new String[]{"jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement", "jetbrains.mps.lang.typesystem.structure.TypeVarDeclaration", "jetbrains.mps.lang.typesystem.structure.TypeVarReference", "jetbrains.mps.lang.typesystem.structure.TypeOfExpression", "jetbrains.mps.lang.typesystem.structure.WhenConcreteStatement"}, false, new String[]{});
    return ListSequence.fromList(descendants).isEmpty();
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode nonTypesystemRule = SNodeFactoryOperations.createNewRootNode(SNodeOperations.getModel(node), "jetbrains.mps.lang.typesystem.structure.NonTypesystemRule", null);
    SPropertyOperations.set(nonTypesystemRule, "overrides", "" + (SPropertyOperations.getBoolean(node, "overrides")));
    SPropertyOperations.set(nonTypesystemRule, "name", SPropertyOperations.getString(node, "name"));
    SLinkOperations.setTarget(nonTypesystemRule, "body", SNodeOperations.copyNode(SLinkOperations.getTarget(node, "body", true)), true);
    SLinkOperations.setTarget(nonTypesystemRule, "applicableNode", SNodeOperations.copyNode(SLinkOperations.getTarget(node, "applicableNode", true)), true);
    for (SNode applicableNodeReference : SNodeOperations.getDescendants(SLinkOperations.getTarget(nonTypesystemRule, "body", true), "jetbrains.mps.lang.typesystem.structure.ApplicableNodeReference", false, new String[]{})) {
      if (SLinkOperations.getTarget(applicableNodeReference, "applicableNode", false) == SLinkOperations.getTarget(node, "applicableNode", true)) {
        SLinkOperations.setTarget(applicableNodeReference, "applicableNode", SLinkOperations.getTarget(nonTypesystemRule, "applicableNode", true), false);
      }
    }
    SNodeOperations.deleteNode(node);
    NavigationSupport.getInstance().openNode(editorContext.getOperationContext(), nonTypesystemRule, true, !(nonTypesystemRule.isRoot()));
  }
}
