package jetbrains.mps.lang.typesystem.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myApplicableNodeCondition__BehaviorDescriptor = new ApplicableNodeCondition__BehaviorDescriptor();
  private final BHDescriptor myConceptReference__BehaviorDescriptor = new ConceptReference__BehaviorDescriptor();
  private final BHDescriptor myPatternCondition__BehaviorDescriptor = new PatternCondition__BehaviorDescriptor();
  private final BHDescriptor myInferenceRule__BehaviorDescriptor = new InferenceRule__BehaviorDescriptor();
  private final BHDescriptor myAbstractRule__BehaviorDescriptor = new AbstractRule__BehaviorDescriptor();
  private final BHDescriptor myApplicableNodeReference__BehaviorDescriptor = new ApplicableNodeReference__BehaviorDescriptor();
  private final BHDescriptor myTypeOfExpression__BehaviorDescriptor = new TypeOfExpression__BehaviorDescriptor();
  private final BHDescriptor myTypeVarReference__BehaviorDescriptor = new TypeVarReference__BehaviorDescriptor();
  private final BHDescriptor myAbstractSubtypingRule__BehaviorDescriptor = new AbstractSubtypingRule__BehaviorDescriptor();
  private final BHDescriptor mySubtypingRule__BehaviorDescriptor = new SubtypingRule__BehaviorDescriptor();
  private final BHDescriptor myReportErrorStatement__BehaviorDescriptor = new ReportErrorStatement__BehaviorDescriptor();
  private final BHDescriptor myNode_TypeOperation__BehaviorDescriptor = new Node_TypeOperation__BehaviorDescriptor();
  private final BHDescriptor myMultipleForeachLoop__BehaviorDescriptor = new MultipleForeachLoop__BehaviorDescriptor();
  private final BHDescriptor myJoinType__BehaviorDescriptor = new JoinType__BehaviorDescriptor();
  private final BHDescriptor myRuntimeErrorType__BehaviorDescriptor = new RuntimeErrorType__BehaviorDescriptor();
  private final BHDescriptor myRuntimeTypeVariable__BehaviorDescriptor = new RuntimeTypeVariable__BehaviorDescriptor();
  private final BHDescriptor myMeetType__BehaviorDescriptor = new MeetType__BehaviorDescriptor();
  private final BHDescriptor myComparisonRule__BehaviorDescriptor = new ComparisonRule__BehaviorDescriptor();
  private final BHDescriptor myNonTypesystemRule__BehaviorDescriptor = new NonTypesystemRule__BehaviorDescriptor();
  private final BHDescriptor myInequationReplacementRule__BehaviorDescriptor = new InequationReplacementRule__BehaviorDescriptor();
  private final BHDescriptor myWhenConcreteVariableDeclaration__BehaviorDescriptor = new WhenConcreteVariableDeclaration__BehaviorDescriptor();
  private final BHDescriptor myWhenConcreteVariableReference__BehaviorDescriptor = new WhenConcreteVariableReference__BehaviorDescriptor();
  private final BHDescriptor myWarningStatement__BehaviorDescriptor = new WarningStatement__BehaviorDescriptor();
  private final BHDescriptor myTypesystemIntentionArgument__BehaviorDescriptor = new TypesystemIntentionArgument__BehaviorDescriptor();
  private final BHDescriptor myAbstractInequationStatement__BehaviorDescriptor = new AbstractInequationStatement__BehaviorDescriptor();
  private final BHDescriptor myQuickFixExecuteBlock__BehaviorDescriptor = new QuickFixExecuteBlock__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_node__BehaviorDescriptor = new ConceptFunctionParameter_node__BehaviorDescriptor();
  private final BHDescriptor myQuickFixDescriptionBlock__BehaviorDescriptor = new QuickFixDescriptionBlock__BehaviorDescriptor();
  private final BHDescriptor myProcessed__BehaviorDescriptor = new Processed__BehaviorDescriptor();
  private final BHDescriptor myInfoStatement__BehaviorDescriptor = new InfoStatement__BehaviorDescriptor();
  private final BHDescriptor myMessageStatement__BehaviorDescriptor = new MessageStatement__BehaviorDescriptor();
  private final BHDescriptor myVariableConverterItem_ApplicableBlock__BehaviorDescriptor = new VariableConverterItem_ApplicableBlock__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_var__BehaviorDescriptor = new ConceptFunctionParameter_var__BehaviorDescriptor();
  private final BHDescriptor myVariableConverterItem_ConvertBlock__BehaviorDescriptor = new VariableConverterItem_ConvertBlock__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_Role__BehaviorDescriptor = new ConceptFunctionParameter_Role__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_isAggregation__BehaviorDescriptor = new ConceptFunctionParameter_isAggregation__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_ContextNode__BehaviorDescriptor = new ConceptFunctionParameter_ContextNode__BehaviorDescriptor();
  private final BHDescriptor myOverloadedOperatorTypeFunction__BehaviorDescriptor = new OverloadedOperatorTypeFunction__BehaviorDescriptor();
  private final BHDescriptor myLeftOperandType_parameter__BehaviorDescriptor = new LeftOperandType_parameter__BehaviorDescriptor();
  private final BHDescriptor myOperation_parameter__BehaviorDescriptor = new Operation_parameter__BehaviorDescriptor();
  private final BHDescriptor myRightOperandType_parameter__BehaviorDescriptor = new RightOperandType_parameter__BehaviorDescriptor();
  private final BHDescriptor myMeetContainer__BehaviorDescriptor = new MeetContainer__BehaviorDescriptor();
  private final BHDescriptor myJoinContainer__BehaviorDescriptor = new JoinContainer__BehaviorDescriptor();
  private final BHDescriptor myDefaultGroupReference__BehaviorDescriptor = new DefaultGroupReference__BehaviorDescriptor();
  private final BHDescriptor myOverridesConceptFunction__BehaviorDescriptor = new OverridesConceptFunction__BehaviorDescriptor();
  private final BHDescriptor myOriginalNodeId__BehaviorDescriptor = new OriginalNodeId__BehaviorDescriptor();
  private final BHDescriptor myIsReplacementRuleApplicable_ConceptFunction__BehaviorDescriptor = new IsReplacementRuleApplicable_ConceptFunction__BehaviorDescriptor();
  private final BHDescriptor myQuickFixSetSelectionBlock__BehaviorDescriptor = new QuickFixSetSelectionBlock__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_EditorContext__BehaviorDescriptor = new ConceptFunctionParameter_EditorContext__BehaviorDescriptor();
  private final BHDescriptor myIRuleWithTwoNodes__BehaviorDescriptor = new IRuleWithTwoNodes__BehaviorDescriptor();
  private final BHDescriptor myOverloadedOpIsApplicableFunction__BehaviorDescriptor = new OverloadedOpIsApplicableFunction__BehaviorDescriptor();
  private final BHDescriptor myNode_InferTypeOperation__BehaviorDescriptor = new Node_InferTypeOperation__BehaviorDescriptor();
  private final BHDescriptor mySubstituteTypeRule__BehaviorDescriptor = new SubstituteTypeRule__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_Selection__BehaviorDescriptor = new ConceptFunctionParameter_Selection__BehaviorDescriptor();
  private final BHDescriptor mySupersedeConceptFunction__BehaviorDescriptor = new SupersedeConceptFunction__BehaviorDescriptor();
  private final BHDescriptor myIsApplicableConceptFunction__BehaviorDescriptor = new IsApplicableConceptFunction__BehaviorDescriptor();
  private final BHDescriptor myQuickFixFieldReference__BehaviorDescriptor = new QuickFixFieldReference__BehaviorDescriptor();

  private final long[] myConceptBehaviorIds;

  public BehaviorAspectDescriptor() {
    myConceptBehaviorIds = new long[57];
    myConceptBehaviorIds[0] = 0x1117e29d976L;
    myConceptBehaviorIds[1] = 0x1117e2a88b3L;
    myConceptBehaviorIds[2] = 0x1117e2c3e68L;
    myConceptBehaviorIds[3] = 0x1117e2f5efaL;
    myConceptBehaviorIds[4] = 0x1117e7b5c73L;
    myConceptBehaviorIds[5] = 0x1117e9ef5dcL;
    myConceptBehaviorIds[6] = 0x1117f0ad10aL;
    myConceptBehaviorIds[7] = 0x1117f90b04cL;
    myConceptBehaviorIds[8] = 0x1119c40dfb0L;
    myConceptBehaviorIds[9] = 0x1119c426ccaL;
    myConceptBehaviorIds[10] = 0x111b251a62aL;
    myConceptBehaviorIds[11] = 0x111ef7d5e03L;
    myConceptBehaviorIds[12] = 0x111efb6d46fL;
    myConceptBehaviorIds[13] = 0x1129e737f02L;
    myConceptBehaviorIds[14] = 0x113f84956f9L;
    myConceptBehaviorIds[15] = 0x113f84956fbL;
    myConceptBehaviorIds[16] = 0x114b68ad132L;
    myConceptBehaviorIds[17] = 0x114caade477L;
    myConceptBehaviorIds[18] = 0x1164853e0faL;
    myConceptBehaviorIds[19] = 0x117c5668bf2L;
    myConceptBehaviorIds[20] = 0x118bd05a27aL;
    myConceptBehaviorIds[21] = 0x118bd0e07f1L;
    myConceptBehaviorIds[22] = 0x1190a1db131L;
    myConceptBehaviorIds[23] = 0x119e85f8628L;
    myConceptBehaviorIds[24] = 0x11a342c1412L;
    myConceptBehaviorIds[25] = 0x11b3617feddL;
    myConceptBehaviorIds[26] = 0x11b3618c300L;
    myConceptBehaviorIds[27] = 0x11b368d7f20L;
    myConceptBehaviorIds[28] = 0x11cd732687dL;
    myConceptBehaviorIds[29] = 0x11d2965916bL;
    myConceptBehaviorIds[30] = 0x11db4aad802L;
    myConceptBehaviorIds[31] = 0x11e0740f5fbL;
    myConceptBehaviorIds[32] = 0x11e07431ba7L;
    myConceptBehaviorIds[33] = 0x11e074487bbL;
    myConceptBehaviorIds[34] = 0x11e078e410eL;
    myConceptBehaviorIds[35] = 0x11e078ecdbdL;
    myConceptBehaviorIds[36] = 0x11e078ffb82L;
    myConceptBehaviorIds[37] = 0x11fcc4bffaeL;
    myConceptBehaviorIds[38] = 0x11fcc4cf5b0L;
    myConceptBehaviorIds[39] = 0x11fcc4d8298L;
    myConceptBehaviorIds[40] = 0x11fcc4d8edaL;
    myConceptBehaviorIds[41] = 0x1206cd802f8L;
    myConceptBehaviorIds[42] = 0x1206cda22fcL;
    myConceptBehaviorIds[43] = 0x12541e5f229acee2L;
    myConceptBehaviorIds[44] = 0x1885777d1370d97bL;
    myConceptBehaviorIds[45] = 0x2980b78b2f03a40bL;
    myConceptBehaviorIds[46] = 0x31d99a115038e5e8L;
    myConceptBehaviorIds[47] = 0x335fe1d0b7494a6dL;
    myConceptBehaviorIds[48] = 0x335fe1d0b7494cfcL;
    myConceptBehaviorIds[49] = 0x3e3c1137fe6cb779L;
    myConceptBehaviorIds[50] = 0x5529dae3231347deL;
    myConceptBehaviorIds[51] = 0x584039bf75272c67L;
    myConceptBehaviorIds[52] = 0x58e32a0782bca52aL;
    myConceptBehaviorIds[53] = 0x611e7dc14a69a014L;
    myConceptBehaviorIds[54] = 0x65684a1aee252403L;
    myConceptBehaviorIds[55] = 0x669222c8f1941d7fL;
    myConceptBehaviorIds[56] = 0x70489eee8479b55dL;
  }

  @Deprecated
  @Override
  public BehaviorDescriptor getDescriptor(String fqName) {
    return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
  }

  @Nullable
  @Override
  public BHDescriptor getDescriptor(@NotNull SConceptId conceptId) {
    int behaviorIndex = Arrays.binarySearch(myConceptBehaviorIds, conceptId.getIdValue());
    switch (behaviorIndex) {
      case 0:
        return myApplicableNodeCondition__BehaviorDescriptor;
      case 1:
        return myConceptReference__BehaviorDescriptor;
      case 2:
        return myPatternCondition__BehaviorDescriptor;
      case 3:
        return myInferenceRule__BehaviorDescriptor;
      case 4:
        return myAbstractRule__BehaviorDescriptor;
      case 5:
        return myApplicableNodeReference__BehaviorDescriptor;
      case 6:
        return myTypeOfExpression__BehaviorDescriptor;
      case 7:
        return myTypeVarReference__BehaviorDescriptor;
      case 8:
        return myAbstractSubtypingRule__BehaviorDescriptor;
      case 9:
        return mySubtypingRule__BehaviorDescriptor;
      case 10:
        return myReportErrorStatement__BehaviorDescriptor;
      case 11:
        return myNode_TypeOperation__BehaviorDescriptor;
      case 12:
        return myMultipleForeachLoop__BehaviorDescriptor;
      case 13:
        return myJoinType__BehaviorDescriptor;
      case 14:
        return myRuntimeErrorType__BehaviorDescriptor;
      case 15:
        return myRuntimeTypeVariable__BehaviorDescriptor;
      case 16:
        return myMeetType__BehaviorDescriptor;
      case 17:
        return myComparisonRule__BehaviorDescriptor;
      case 18:
        return myNonTypesystemRule__BehaviorDescriptor;
      case 19:
        return myInequationReplacementRule__BehaviorDescriptor;
      case 20:
        return myWhenConcreteVariableDeclaration__BehaviorDescriptor;
      case 21:
        return myWhenConcreteVariableReference__BehaviorDescriptor;
      case 22:
        return myWarningStatement__BehaviorDescriptor;
      case 23:
        return myTypesystemIntentionArgument__BehaviorDescriptor;
      case 24:
        return myAbstractInequationStatement__BehaviorDescriptor;
      case 25:
        return myQuickFixExecuteBlock__BehaviorDescriptor;
      case 26:
        return myConceptFunctionParameter_node__BehaviorDescriptor;
      case 27:
        return myQuickFixDescriptionBlock__BehaviorDescriptor;
      case 28:
        return myProcessed__BehaviorDescriptor;
      case 29:
        return myInfoStatement__BehaviorDescriptor;
      case 30:
        return myMessageStatement__BehaviorDescriptor;
      case 31:
        return myVariableConverterItem_ApplicableBlock__BehaviorDescriptor;
      case 32:
        return myConceptFunctionParameter_var__BehaviorDescriptor;
      case 33:
        return myVariableConverterItem_ConvertBlock__BehaviorDescriptor;
      case 34:
        return myConceptFunctionParameter_Role__BehaviorDescriptor;
      case 35:
        return myConceptFunctionParameter_isAggregation__BehaviorDescriptor;
      case 36:
        return myConceptFunctionParameter_ContextNode__BehaviorDescriptor;
      case 37:
        return myOverloadedOperatorTypeFunction__BehaviorDescriptor;
      case 38:
        return myLeftOperandType_parameter__BehaviorDescriptor;
      case 39:
        return myOperation_parameter__BehaviorDescriptor;
      case 40:
        return myRightOperandType_parameter__BehaviorDescriptor;
      case 41:
        return myMeetContainer__BehaviorDescriptor;
      case 42:
        return myJoinContainer__BehaviorDescriptor;
      case 43:
        return myDefaultGroupReference__BehaviorDescriptor;
      case 44:
        return myOverridesConceptFunction__BehaviorDescriptor;
      case 45:
        return myOriginalNodeId__BehaviorDescriptor;
      case 46:
        return myIsReplacementRuleApplicable_ConceptFunction__BehaviorDescriptor;
      case 47:
        return myQuickFixSetSelectionBlock__BehaviorDescriptor;
      case 48:
        return myConceptFunctionParameter_EditorContext__BehaviorDescriptor;
      case 49:
        return myIRuleWithTwoNodes__BehaviorDescriptor;
      case 50:
        return myOverloadedOpIsApplicableFunction__BehaviorDescriptor;
      case 51:
        return myNode_InferTypeOperation__BehaviorDescriptor;
      case 52:
        return mySubstituteTypeRule__BehaviorDescriptor;
      case 53:
        return myConceptFunctionParameter_Selection__BehaviorDescriptor;
      case 54:
        return mySupersedeConceptFunction__BehaviorDescriptor;
      case 55:
        return myIsApplicableConceptFunction__BehaviorDescriptor;
      case 56:
        return myQuickFixFieldReference__BehaviorDescriptor;
      default:
        return null;
    }
  }
}
