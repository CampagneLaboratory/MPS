package jetbrains.mps.lang.typesystem.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myApplicableNodeCondition_BehaviorDescriptor = new ApplicableNodeCondition_BehaviorDescriptor();
  private final BHDescriptor myConceptReference_BehaviorDescriptor = new ConceptReference_BehaviorDescriptor();
  private final BHDescriptor myPatternCondition_BehaviorDescriptor = new PatternCondition_BehaviorDescriptor();
  private final BHDescriptor myInferenceRule_BehaviorDescriptor = new InferenceRule_BehaviorDescriptor();
  private final BHDescriptor myAbstractRule_BehaviorDescriptor = new AbstractRule_BehaviorDescriptor();
  private final BHDescriptor myApplicableNodeReference_BehaviorDescriptor = new ApplicableNodeReference_BehaviorDescriptor();
  private final BHDescriptor myTypeOfExpression_BehaviorDescriptor = new TypeOfExpression_BehaviorDescriptor();
  private final BHDescriptor myTypeVarReference_BehaviorDescriptor = new TypeVarReference_BehaviorDescriptor();
  private final BHDescriptor myAbstractSubtypingRule_BehaviorDescriptor = new AbstractSubtypingRule_BehaviorDescriptor();
  private final BHDescriptor mySubtypingRule_BehaviorDescriptor = new SubtypingRule_BehaviorDescriptor();
  private final BHDescriptor myReportErrorStatement_BehaviorDescriptor = new ReportErrorStatement_BehaviorDescriptor();
  private final BHDescriptor myNode_TypeOperation_BehaviorDescriptor = new Node_TypeOperation_BehaviorDescriptor();
  private final BHDescriptor myMultipleForeachLoop_BehaviorDescriptor = new MultipleForeachLoop_BehaviorDescriptor();
  private final BHDescriptor myJoinType_BehaviorDescriptor = new JoinType_BehaviorDescriptor();
  private final BHDescriptor myRuntimeErrorType_BehaviorDescriptor = new RuntimeErrorType_BehaviorDescriptor();
  private final BHDescriptor myRuntimeTypeVariable_BehaviorDescriptor = new RuntimeTypeVariable_BehaviorDescriptor();
  private final BHDescriptor myMeetType_BehaviorDescriptor = new MeetType_BehaviorDescriptor();
  private final BHDescriptor myComparisonRule_BehaviorDescriptor = new ComparisonRule_BehaviorDescriptor();
  private final BHDescriptor myNonTypesystemRule_BehaviorDescriptor = new NonTypesystemRule_BehaviorDescriptor();
  private final BHDescriptor myInequationReplacementRule_BehaviorDescriptor = new InequationReplacementRule_BehaviorDescriptor();
  private final BHDescriptor myWhenConcreteVariableDeclaration_BehaviorDescriptor = new WhenConcreteVariableDeclaration_BehaviorDescriptor();
  private final BHDescriptor myWhenConcreteVariableReference_BehaviorDescriptor = new WhenConcreteVariableReference_BehaviorDescriptor();
  private final BHDescriptor myWarningStatement_BehaviorDescriptor = new WarningStatement_BehaviorDescriptor();
  private final BHDescriptor myTypesystemIntentionArgument_BehaviorDescriptor = new TypesystemIntentionArgument_BehaviorDescriptor();
  private final BHDescriptor myAbstractInequationStatement_BehaviorDescriptor = new AbstractInequationStatement_BehaviorDescriptor();
  private final BHDescriptor myQuickFixExecuteBlock_BehaviorDescriptor = new QuickFixExecuteBlock_BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_node_BehaviorDescriptor = new ConceptFunctionParameter_node_BehaviorDescriptor();
  private final BHDescriptor myQuickFixDescriptionBlock_BehaviorDescriptor = new QuickFixDescriptionBlock_BehaviorDescriptor();
  private final BHDescriptor myProcessed_BehaviorDescriptor = new Processed_BehaviorDescriptor();
  private final BHDescriptor myInfoStatement_BehaviorDescriptor = new InfoStatement_BehaviorDescriptor();
  private final BHDescriptor myMessageStatement_BehaviorDescriptor = new MessageStatement_BehaviorDescriptor();
  private final BHDescriptor myVariableConverterItem_ApplicableBlock_BehaviorDescriptor = new VariableConverterItem_ApplicableBlock_BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_var_BehaviorDescriptor = new ConceptFunctionParameter_var_BehaviorDescriptor();
  private final BHDescriptor myVariableConverterItem_ConvertBlock_BehaviorDescriptor = new VariableConverterItem_ConvertBlock_BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_Role_BehaviorDescriptor = new ConceptFunctionParameter_Role_BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_isAggregation_BehaviorDescriptor = new ConceptFunctionParameter_isAggregation_BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_ContextNode_BehaviorDescriptor = new ConceptFunctionParameter_ContextNode_BehaviorDescriptor();
  private final BHDescriptor myOverloadedOperatorTypeFunction_BehaviorDescriptor = new OverloadedOperatorTypeFunction_BehaviorDescriptor();
  private final BHDescriptor myLeftOperandType_parameter_BehaviorDescriptor = new LeftOperandType_parameter_BehaviorDescriptor();
  private final BHDescriptor myOperation_parameter_BehaviorDescriptor = new Operation_parameter_BehaviorDescriptor();
  private final BHDescriptor myRightOperandType_parameter_BehaviorDescriptor = new RightOperandType_parameter_BehaviorDescriptor();
  private final BHDescriptor myMeetContainer_BehaviorDescriptor = new MeetContainer_BehaviorDescriptor();
  private final BHDescriptor myJoinContainer_BehaviorDescriptor = new JoinContainer_BehaviorDescriptor();
  private final BHDescriptor myDefaultGroupReference_BehaviorDescriptor = new DefaultGroupReference_BehaviorDescriptor();
  private final BHDescriptor myOverridesConceptFunction_BehaviorDescriptor = new OverridesConceptFunction_BehaviorDescriptor();
  private final BHDescriptor myOriginalNodeId_BehaviorDescriptor = new OriginalNodeId_BehaviorDescriptor();
  private final BHDescriptor myIsReplacementRuleApplicable_ConceptFunction_BehaviorDescriptor = new IsReplacementRuleApplicable_ConceptFunction_BehaviorDescriptor();
  private final BHDescriptor myQuickFixSetSelectionBlock_BehaviorDescriptor = new QuickFixSetSelectionBlock_BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_EditorContext_BehaviorDescriptor = new ConceptFunctionParameter_EditorContext_BehaviorDescriptor();
  private final BHDescriptor myIRuleWithTwoNodes_BehaviorDescriptor = new IRuleWithTwoNodes_BehaviorDescriptor();
  private final BHDescriptor myOverloadedOpIsApplicableFunction_BehaviorDescriptor = new OverloadedOpIsApplicableFunction_BehaviorDescriptor();
  private final BHDescriptor myNode_InferTypeOperation_BehaviorDescriptor = new Node_InferTypeOperation_BehaviorDescriptor();
  private final BHDescriptor mySubstituteTypeRule_BehaviorDescriptor = new SubstituteTypeRule_BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_Selection_BehaviorDescriptor = new ConceptFunctionParameter_Selection_BehaviorDescriptor();
  private final BHDescriptor mySupersedeConceptFunction_BehaviorDescriptor = new SupersedeConceptFunction_BehaviorDescriptor();
  private final BHDescriptor myIsApplicableConceptFunction_BehaviorDescriptor = new IsApplicableConceptFunction_BehaviorDescriptor();
  private final BHDescriptor myQuickFixFieldReference_BehaviorDescriptor = new QuickFixFieldReference_BehaviorDescriptor();

  private final long[] myConceptBehaviorIds;

  public BehaviorAspectDescriptor() {
    myConceptBehaviorIds = new long[57];
    myConceptBehaviorIds[0] = 0x1117e29d976L;
    myConceptBehaviorIds[1] = 0x1117e2a88b3L;
    myConceptBehaviorIds[2] = 0x1117e2c3e68L;
    myConceptBehaviorIds[3] = 0x1117e2f5efaL;
    myConceptBehaviorIds[4] = 0x1117e7b5c73L;
    myConceptBehaviorIds[5] = 0x1117e9ef5dcL;
    myConceptBehaviorIds[6] = 0x1117f0ad10aL;
    myConceptBehaviorIds[7] = 0x1117f90b04cL;
    myConceptBehaviorIds[8] = 0x1119c40dfb0L;
    myConceptBehaviorIds[9] = 0x1119c426ccaL;
    myConceptBehaviorIds[10] = 0x111b251a62aL;
    myConceptBehaviorIds[11] = 0x111ef7d5e03L;
    myConceptBehaviorIds[12] = 0x111efb6d46fL;
    myConceptBehaviorIds[13] = 0x1129e737f02L;
    myConceptBehaviorIds[14] = 0x113f84956f9L;
    myConceptBehaviorIds[15] = 0x113f84956fbL;
    myConceptBehaviorIds[16] = 0x114b68ad132L;
    myConceptBehaviorIds[17] = 0x114caade477L;
    myConceptBehaviorIds[18] = 0x1164853e0faL;
    myConceptBehaviorIds[19] = 0x117c5668bf2L;
    myConceptBehaviorIds[20] = 0x118bd05a27aL;
    myConceptBehaviorIds[21] = 0x118bd0e07f1L;
    myConceptBehaviorIds[22] = 0x1190a1db131L;
    myConceptBehaviorIds[23] = 0x119e85f8628L;
    myConceptBehaviorIds[24] = 0x11a342c1412L;
    myConceptBehaviorIds[25] = 0x11b3617feddL;
    myConceptBehaviorIds[26] = 0x11b3618c300L;
    myConceptBehaviorIds[27] = 0x11b368d7f20L;
    myConceptBehaviorIds[28] = 0x11cd732687dL;
    myConceptBehaviorIds[29] = 0x11d2965916bL;
    myConceptBehaviorIds[30] = 0x11db4aad802L;
    myConceptBehaviorIds[31] = 0x11e0740f5fbL;
    myConceptBehaviorIds[32] = 0x11e07431ba7L;
    myConceptBehaviorIds[33] = 0x11e074487bbL;
    myConceptBehaviorIds[34] = 0x11e078e410eL;
    myConceptBehaviorIds[35] = 0x11e078ecdbdL;
    myConceptBehaviorIds[36] = 0x11e078ffb82L;
    myConceptBehaviorIds[37] = 0x11fcc4bffaeL;
    myConceptBehaviorIds[38] = 0x11fcc4cf5b0L;
    myConceptBehaviorIds[39] = 0x11fcc4d8298L;
    myConceptBehaviorIds[40] = 0x11fcc4d8edaL;
    myConceptBehaviorIds[41] = 0x1206cd802f8L;
    myConceptBehaviorIds[42] = 0x1206cda22fcL;
    myConceptBehaviorIds[43] = 0x12541e5f229acee2L;
    myConceptBehaviorIds[44] = 0x1885777d1370d97bL;
    myConceptBehaviorIds[45] = 0x2980b78b2f03a40bL;
    myConceptBehaviorIds[46] = 0x31d99a115038e5e8L;
    myConceptBehaviorIds[47] = 0x335fe1d0b7494a6dL;
    myConceptBehaviorIds[48] = 0x335fe1d0b7494cfcL;
    myConceptBehaviorIds[49] = 0x3e3c1137fe6cb779L;
    myConceptBehaviorIds[50] = 0x5529dae3231347deL;
    myConceptBehaviorIds[51] = 0x584039bf75272c67L;
    myConceptBehaviorIds[52] = 0x58e32a0782bca52aL;
    myConceptBehaviorIds[53] = 0x611e7dc14a69a014L;
    myConceptBehaviorIds[54] = 0x65684a1aee252403L;
    myConceptBehaviorIds[55] = 0x669222c8f1941d7fL;
    myConceptBehaviorIds[56] = 0x70489eee8479b55dL;
  }

  @Deprecated
  @Override
  public BehaviorDescriptor getDescriptor(String fqName) {
    return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
  }

  @Nullable
  @Override
  public BHDescriptor getDescriptor(@NotNull SConceptId conceptId) {
    int behaviorIndex = Arrays.binarySearch(myConceptBehaviorIds, conceptId.getIdValue());
    switch (behaviorIndex) {
      case 0:
        return myApplicableNodeCondition_BehaviorDescriptor;
      case 1:
        return myConceptReference_BehaviorDescriptor;
      case 2:
        return myPatternCondition_BehaviorDescriptor;
      case 3:
        return myInferenceRule_BehaviorDescriptor;
      case 4:
        return myAbstractRule_BehaviorDescriptor;
      case 5:
        return myApplicableNodeReference_BehaviorDescriptor;
      case 6:
        return myTypeOfExpression_BehaviorDescriptor;
      case 7:
        return myTypeVarReference_BehaviorDescriptor;
      case 8:
        return myAbstractSubtypingRule_BehaviorDescriptor;
      case 9:
        return mySubtypingRule_BehaviorDescriptor;
      case 10:
        return myReportErrorStatement_BehaviorDescriptor;
      case 11:
        return myNode_TypeOperation_BehaviorDescriptor;
      case 12:
        return myMultipleForeachLoop_BehaviorDescriptor;
      case 13:
        return myJoinType_BehaviorDescriptor;
      case 14:
        return myRuntimeErrorType_BehaviorDescriptor;
      case 15:
        return myRuntimeTypeVariable_BehaviorDescriptor;
      case 16:
        return myMeetType_BehaviorDescriptor;
      case 17:
        return myComparisonRule_BehaviorDescriptor;
      case 18:
        return myNonTypesystemRule_BehaviorDescriptor;
      case 19:
        return myInequationReplacementRule_BehaviorDescriptor;
      case 20:
        return myWhenConcreteVariableDeclaration_BehaviorDescriptor;
      case 21:
        return myWhenConcreteVariableReference_BehaviorDescriptor;
      case 22:
        return myWarningStatement_BehaviorDescriptor;
      case 23:
        return myTypesystemIntentionArgument_BehaviorDescriptor;
      case 24:
        return myAbstractInequationStatement_BehaviorDescriptor;
      case 25:
        return myQuickFixExecuteBlock_BehaviorDescriptor;
      case 26:
        return myConceptFunctionParameter_node_BehaviorDescriptor;
      case 27:
        return myQuickFixDescriptionBlock_BehaviorDescriptor;
      case 28:
        return myProcessed_BehaviorDescriptor;
      case 29:
        return myInfoStatement_BehaviorDescriptor;
      case 30:
        return myMessageStatement_BehaviorDescriptor;
      case 31:
        return myVariableConverterItem_ApplicableBlock_BehaviorDescriptor;
      case 32:
        return myConceptFunctionParameter_var_BehaviorDescriptor;
      case 33:
        return myVariableConverterItem_ConvertBlock_BehaviorDescriptor;
      case 34:
        return myConceptFunctionParameter_Role_BehaviorDescriptor;
      case 35:
        return myConceptFunctionParameter_isAggregation_BehaviorDescriptor;
      case 36:
        return myConceptFunctionParameter_ContextNode_BehaviorDescriptor;
      case 37:
        return myOverloadedOperatorTypeFunction_BehaviorDescriptor;
      case 38:
        return myLeftOperandType_parameter_BehaviorDescriptor;
      case 39:
        return myOperation_parameter_BehaviorDescriptor;
      case 40:
        return myRightOperandType_parameter_BehaviorDescriptor;
      case 41:
        return myMeetContainer_BehaviorDescriptor;
      case 42:
        return myJoinContainer_BehaviorDescriptor;
      case 43:
        return myDefaultGroupReference_BehaviorDescriptor;
      case 44:
        return myOverridesConceptFunction_BehaviorDescriptor;
      case 45:
        return myOriginalNodeId_BehaviorDescriptor;
      case 46:
        return myIsReplacementRuleApplicable_ConceptFunction_BehaviorDescriptor;
      case 47:
        return myQuickFixSetSelectionBlock_BehaviorDescriptor;
      case 48:
        return myConceptFunctionParameter_EditorContext_BehaviorDescriptor;
      case 49:
        return myIRuleWithTwoNodes_BehaviorDescriptor;
      case 50:
        return myOverloadedOpIsApplicableFunction_BehaviorDescriptor;
      case 51:
        return myNode_InferTypeOperation_BehaviorDescriptor;
      case 52:
        return mySubstituteTypeRule_BehaviorDescriptor;
      case 53:
        return myConceptFunctionParameter_Selection_BehaviorDescriptor;
      case 54:
        return mySupersedeConceptFunction_BehaviorDescriptor;
      case 55:
        return myIsApplicableConceptFunction_BehaviorDescriptor;
      case 56:
        return myQuickFixFieldReference_BehaviorDescriptor;
      default:
        return null;
    }
  }
}
