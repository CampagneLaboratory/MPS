package jetbrains.mps.lang.typesystem.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.SConceptId;

public class ConstraintsAspectDescriptor implements jetbrains.mps.smodel.runtime.ConstraintsAspectDescriptor {
  public ConstraintsAspectDescriptor() {
  }
  public ConstraintsDescriptor getDescriptor(String fqName) {
    switch (Arrays.binarySearch(stringSwitchCases_2qnle6_a0a0b, fqName)) {
      case 21:
        return new WhenConcreteVariableReference_Constraints();
      case 12:
        return new PropertyPatternVariableReference_Constraints();
      case 7:
        return new LinkPatternVariableReference_Constraints();
      case 10:
        return new PatternVariableReference_Constraints();
      case 17:
        return new TypeVarReference_Constraints();
      case 3:
        return new ConceptReference_Constraints();
      case 0:
        return new ApplicableNodeReference_Constraints();
      case 18:
        return new TypesystemIntentionArgument_Constraints();
      case 13:
        return new QuickFixArgumentReference_Constraints();
      case 6:
        return new InferenceRule_Constraints();
      case 2:
        return new ComparisonRule_Constraints();
      case 19:
        return new TypesystemQuickFix_Constraints();
      case 5:
        return new InequationReplacementRule_Constraints();
      case 9:
        return new NonTypesystemRule_Constraints();
      case 16:
        return new SubtypingRule_Constraints();
      case 11:
        return new PropertyMessageTarget_Constraints();
      case 15:
        return new ReferenceMessageTarget_Constraints();
      case 8:
        return new MessageStatement_Constraints();
      case 4:
        return new InequationReference_Constraints();
      case 14:
        return new QuickFixFieldReference_Constraints();
      case 20:
        return new WasSelectedNodeOperation_Constraints();
      case 1:
        return new CaretPositionOperation_Constraints();
      default:
        return new BaseConstraintsDescriptor(fqName);
    }
  }
  public ConstraintsDescriptor getDescriptor(SConceptId conceptId) {
    long id = conceptId.getIdValue();
    if (id == 0x118bd0e07f1L) {
      return new WhenConcreteVariableReference_Constraints();
    }
    if (id == 0x11192d97ff9L) {
      return new PropertyPatternVariableReference_Constraints();
    }
    if (id == 0x11192d92ad3L) {
      return new LinkPatternVariableReference_Constraints();
    }
    if (id == 0x11192d10036L) {
      return new PatternVariableReference_Constraints();
    }
    if (id == 0x1117f90b04cL) {
      return new TypeVarReference_Constraints();
    }
    if (id == 0x1117e2a88b3L) {
      return new ConceptReference_Constraints();
    }
    if (id == 0x1117e9ef5dcL) {
      return new ApplicableNodeReference_Constraints();
    }
    if (id == 0x119e85f8628L) {
      return new TypesystemIntentionArgument_Constraints();
    }
    if (id == 0x11b3683c009L) {
      return new QuickFixArgumentReference_Constraints();
    }
    if (id == 0x1117e2f5efaL) {
      return new InferenceRule_Constraints();
    }
    if (id == 0x114caade477L) {
      return new ComparisonRule_Constraints();
    }
    if (id == 0x11b36163865L) {
      return new TypesystemQuickFix_Constraints();
    }
    if (id == 0x117c5668bf2L) {
      return new InequationReplacementRule_Constraints();
    }
    if (id == 0x1164853e0faL) {
      return new NonTypesystemRule_Constraints();
    }
    if (id == 0x1119c426ccaL) {
      return new SubtypingRule_Constraints();
    }
    if (id == 0x11db4a6a000L) {
      return new PropertyMessageTarget_Constraints();
    }
    if (id == 0x11db4a87c94L) {
      return new ReferenceMessageTarget_Constraints();
    }
    if (id == 0x11db4aad802L) {
      return new MessageStatement_Constraints();
    }
    if (id == 0x42501924d0bd1913L) {
      return new InequationReference_Constraints();
    }
    if (id == 0x70489eee8479b55dL) {
      return new QuickFixFieldReference_Constraints();
    }
    if (id == 0xef0542bbc39506eL) {
      return new WasSelectedNodeOperation_Constraints();
    }
    if (id == 0xef0542bbc395068L) {
      return new CaretPositionOperation_Constraints();
    }
    return new BaseConstraintsDescriptor(conceptId);
  }
  private static String[] stringSwitchCases_2qnle6_a0a0b = new String[]{"jetbrains.mps.lang.typesystem.structure.ApplicableNodeReference", "jetbrains.mps.lang.typesystem.structure.CaretPositionOperation", "jetbrains.mps.lang.typesystem.structure.ComparisonRule", "jetbrains.mps.lang.typesystem.structure.ConceptReference", "jetbrains.mps.lang.typesystem.structure.InequationReference", "jetbrains.mps.lang.typesystem.structure.InequationReplacementRule", "jetbrains.mps.lang.typesystem.structure.InferenceRule", "jetbrains.mps.lang.typesystem.structure.LinkPatternVariableReference", "jetbrains.mps.lang.typesystem.structure.MessageStatement", "jetbrains.mps.lang.typesystem.structure.NonTypesystemRule", "jetbrains.mps.lang.typesystem.structure.PatternVariableReference", "jetbrains.mps.lang.typesystem.structure.PropertyMessageTarget", "jetbrains.mps.lang.typesystem.structure.PropertyPatternVariableReference", "jetbrains.mps.lang.typesystem.structure.QuickFixArgumentReference", "jetbrains.mps.lang.typesystem.structure.QuickFixFieldReference", "jetbrains.mps.lang.typesystem.structure.ReferenceMessageTarget", "jetbrains.mps.lang.typesystem.structure.SubtypingRule", "jetbrains.mps.lang.typesystem.structure.TypeVarReference", "jetbrains.mps.lang.typesystem.structure.TypesystemIntentionArgument", "jetbrains.mps.lang.typesystem.structure.TypesystemQuickFix", "jetbrains.mps.lang.typesystem.structure.WasSelectedNodeOperation", "jetbrains.mps.lang.typesystem.structure.WhenConcreteVariableReference"};
}
