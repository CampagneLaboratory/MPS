package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.IType;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class JoinType extends BaseConcept implements IType {
  public static final String concept = "jetbrains.mps.lang.typesystem.structure.JoinType";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String ARGUMENT = "argument";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public JoinType(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(JoinType.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(JoinType.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(JoinType.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(JoinType.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(JoinType.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(JoinType.VIRTUAL_PACKAGE, value);
  }

  public int getArgumentsCount() {
    return this.getChildCount(JoinType.ARGUMENT);
  }

  public Iterator<IType> arguments() {
    return this.children(IType.class, JoinType.ARGUMENT);
  }

  public List<IType> getArguments() {
    return this.getChildren(IType.class, JoinType.ARGUMENT);
  }

  public void addArgument(IType node) {
    this.addChild(JoinType.ARGUMENT, node);
  }

  public void insertArgument(IType prev, IType node) {
    this.insertChild(prev, JoinType.ARGUMENT, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(JoinType.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, JoinType.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, JoinType.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(JoinType.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, JoinType.SMODEL_ATTRIBUTE, node);
  }

  public static JoinType newInstance(SModel sm, boolean init) {
    return (JoinType) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.typesystem.structure.JoinType", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static JoinType newInstance(SModel sm) {
    return JoinType.newInstance(sm, false);
  }
}
