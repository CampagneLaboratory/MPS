package jetbrains.mps.lang.typesystem.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class FlipInequality_Intention extends BaseIntention {
  public FlipInequality_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement";
  }

  public String getPresentation() {
    return "FlipInequality";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.typesystem.intentions.FlipInequality_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:417dc360-c456-4155-ad66-fc79f455c42f(jetbrains.mps.lang.typesystem.intentions@3_0)", "6840209722389643031");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Flip Inequality";
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode newNode;
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.typesystem.structure.CreateGreaterThanInequationStatement")) {
      newNode = SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.CreateLessThanInequationStatement", null);
    } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.typesystem.structure.CreateLessThanInequationStatement")) {
      newNode = SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.CreateGreaterThanInequationStatement", null);
    } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.typesystem.structure.CreateStrongGreaterThanInequationStatement")) {
      newNode = SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.CreateStrongLessThanInequationStatement", null);
    } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.typesystem.structure.CreateStrongLessThanInequationStatement")) {
      newNode = SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.CreateStrongGreaterThanInequationStatement", null);
    } else {
      return;
    }
    SLinkOperations.setTarget(newNode, "rightExpression", SLinkOperations.getTarget(node, "leftExpression", true), true);
    SLinkOperations.setTarget(newNode, "leftExpression", SLinkOperations.getTarget(node, "rightExpression", true), true);
    ListSequence.fromList(SLinkOperations.getTargets(newNode, "afterEquations", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "afterEquations", true)));
    ListSequence.fromList(SLinkOperations.getTargets(newNode, "afterGroups", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "afterGroups", true)));
    ListSequence.fromList(SLinkOperations.getTargets(newNode, "beforeEquations", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "beforeEquations", true)));
    ListSequence.fromList(SLinkOperations.getTargets(newNode, "beforeGroups", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "beforeGroups", true)));
    SPropertyOperations.set(newNode, "checkOnly", "" + (SPropertyOperations.getBoolean(node, "checkOnly")));
    SLinkOperations.setTarget(newNode, "errorString", SLinkOperations.getTarget(node, "errorString", true), true);
    ListSequence.fromList(SLinkOperations.getTargets(newNode, "helginsIntention", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "helginsIntention", true)));
    SLinkOperations.setTarget(newNode, "inequationGroup", SLinkOperations.getTarget(node, "inequationGroup", true), true);
    SPropertyOperations.set(newNode, "inequationPriority", "" + (SPropertyOperations.getInteger_def(node, "inequationPriority", "0")));
    SPropertyOperations.set(newNode, "label", SPropertyOperations.getString(node, "label"));
    SLinkOperations.setTarget(newNode, "nodeToCheck", SLinkOperations.getTarget(node, "nodeToCheck", true), true);
    ListSequence.fromList(SLinkOperations.getTargets(newNode, "rulesToSkip", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "rulesToSkip", true)));
    SNodeOperations.replaceWithAnother(node, newNode);
  }
}
