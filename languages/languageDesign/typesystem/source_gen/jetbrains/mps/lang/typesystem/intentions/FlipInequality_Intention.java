package jetbrains.mps.lang.typesystem.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class FlipInequality_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public FlipInequality_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement";
  }

  public String getPresentation() {
    return "FlipInequality";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.typesystem.intentions.FlipInequality_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902b2(jetbrains.mps.lang.typesystem.intentions)", "6840209722389643031");
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new FlipInequality_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Flip Inequality";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode newNode;
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.typesystem.structure.CreateGreaterThanInequationStatement")) {
        newNode = SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.CreateLessThanInequationStatement", null);
      } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.typesystem.structure.CreateLessThanInequationStatement")) {
        newNode = SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.CreateGreaterThanInequationStatement", null);
      } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.typesystem.structure.CreateStrongGreaterThanInequationStatement")) {
        newNode = SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.CreateStrongLessThanInequationStatement", null);
      } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.typesystem.structure.CreateStrongLessThanInequationStatement")) {
        newNode = SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.typesystem.structure.CreateStrongGreaterThanInequationStatement", null);
      } else {
        return;
      }
      SLinkOperations.setTarget(newNode, "rightExpression", SLinkOperations.getTarget(node, "leftExpression", true), true);
      SLinkOperations.setTarget(newNode, "leftExpression", SLinkOperations.getTarget(node, "rightExpression", true), true);
      ListSequence.fromList(SLinkOperations.getTargets(newNode, "afterEquations", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "afterEquations", true)));
      ListSequence.fromList(SLinkOperations.getTargets(newNode, "afterGroups", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "afterGroups", true)));
      ListSequence.fromList(SLinkOperations.getTargets(newNode, "beforeEquations", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "beforeEquations", true)));
      ListSequence.fromList(SLinkOperations.getTargets(newNode, "beforeGroups", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "beforeGroups", true)));
      SPropertyOperations.set(newNode, "checkOnly", "" + (SPropertyOperations.getBoolean(node, "checkOnly")));
      SLinkOperations.setTarget(newNode, "errorString", SLinkOperations.getTarget(node, "errorString", true), true);
      ListSequence.fromList(SLinkOperations.getTargets(newNode, "helginsIntention", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "helginsIntention", true)));
      SLinkOperations.setTarget(newNode, "inequationGroup", SLinkOperations.getTarget(node, "inequationGroup", true), true);
      SPropertyOperations.set(newNode, "inequationPriority", "" + (SPropertyOperations.getInteger_def(node, "inequationPriority", "0")));
      SPropertyOperations.set(newNode, "label", SPropertyOperations.getString(node, "label"));
      SLinkOperations.setTarget(newNode, "nodeToCheck", SLinkOperations.getTarget(node, "nodeToCheck", true), true);
      ListSequence.fromList(SLinkOperations.getTargets(newNode, "rulesToSkip", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "rulesToSkip", true)));
      SNodeOperations.replaceWithAnother(node, newNode);
    }

    public IntentionDescriptor getDescriptor() {
      return FlipInequality_Intention.this;
    }
  }
}
