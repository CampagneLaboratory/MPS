package jetbrains.mps.lang.typesystem.pluginSolution.plugin;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleOwner;
import jetbrains.mps.project.AbstractModule;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.structure.modules.ModuleDescriptor;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.project.structure.modules.ModuleReference;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.BaseSpecialModelDescriptor;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.smodel.SModelId;
import jetbrains.mps.smodel.SNodeUndoableAction;

public class TempModelCreator {
  public static SModel createTempModel() {
    TempModelCreator.TempModule module = new TempModelCreator.TempModule();
    TempModelCreator.TempModule regModule = MPSModuleRepository.getInstance().registerModule(module, module);
    assert module == regModule : "Temporary module with same id already registered";

    TempModelCreator.AuxilaryRuntimeModel model = new TempModelCreator.AuxilaryRuntimeModel();
    SModelRepository.getInstance().registerModelDescriptor(model.getSModel(), module);

    return model.getSModel();
  }



  public static void disposeTempModel(SModel model) {
    IModule module = model.getModule();
    SModelRepository.getInstance().removeModelDescriptor(model);
    MPSModuleRepository.getInstance().unregisterModule(module, ((MPSModuleOwner) module));
  }



  public static class TempModule extends AbstractModule implements SModule, MPSModuleOwner {
    private final ModuleDescriptor myDescriptor;
    private final ModuleId myId = ModuleId.regular();

    public TempModule() {
      ModuleReference reference = new ModuleReference("TempModule" + myId, myId);
      setModuleReference(reference);
      myDescriptor = new ModuleDescriptor();
    }

    public boolean isHidden() {
      return true;
    }

    @Override
    public ModuleDescriptor getModuleDescriptor() {
      return myDescriptor;
    }

    @NotNull
    @Override
    public IScope getScope() {
      return GlobalScope.getInstance();
    }
  }



  public static class AuxilaryRuntimeModel {
    private SModel myModel;

    public AuxilaryRuntimeModel() {
      myModel = new TempModelCreator.AuxilaryRuntimeModel.AuxModelDescriptor();
    }

    public SModel getSModel() {
      return myModel;
    }

    private static class AuxModelDescriptor extends BaseSpecialModelDescriptor {
      public AuxModelDescriptor() {
        super(new SModelReference(new SModelFqName("$AuxModel$", ""), SModelId.generate()));
      }

      @Override
      protected jetbrains.mps.smodel.SModel createModel() {
        return new jetbrains.mps.smodel.SModel(getSModelReference()) {
          protected void performUndoableAction(SNodeUndoableAction action) {
          }



          @Override
          public boolean canFireEvent() {
            return false;
          }

          @Override
          public boolean canFireReadEvent() {
            return true;
          }
        };
      }
    }
  }



}
