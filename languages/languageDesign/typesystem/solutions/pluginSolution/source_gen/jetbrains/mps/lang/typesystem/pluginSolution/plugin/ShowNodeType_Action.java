package jetbrains.mps.lang.typesystem.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.icons.MPSIcons;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.apache.log4j.Level;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.ModelAccess;
import javax.swing.JOptionPane;
import java.awt.Frame;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import jetbrains.mps.typesystem.uiActions.MyBaseNodeDialog;
import jetbrains.mps.smodel.IOperationContext;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class ShowNodeType_Action extends BaseAction {
  private static final Icon ICON = MPSIcons.Nodes.Type;

  public ShowNodeType_Action() {
    super("Show Type", "Show node's HELGINS type", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      this.enable(event.getPresentation());
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "ShowNodeType", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("context", event.getData(MPSCommonDataKeys.OPERATION_CONTEXT));
    if (MapSequence.fromMap(_params).get("context") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("frame", event.getData(MPSCommonDataKeys.FRAME));
    if (MapSequence.fromMap(_params).get("frame") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("node", event.getData(MPSCommonDataKeys.NODE));
    if (MapSequence.fromMap(_params).get("node") == null) {
      return false;
    }
    {
      EditorComponent editorComponent = event.getData(MPSEditorDataKeys.EDITOR_COMPONENT);
      if (editorComponent != null && editorComponent.isInvalid()) {
        editorComponent = null;
      }
      MapSequence.fromMap(_params).put("editorComponent", editorComponent);
    }
    if (MapSequence.fromMap(_params).get("editorComponent") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final Wrappers._T<TypeCheckingContext> typeCheckingContext = new Wrappers._T<TypeCheckingContext>();
      final Wrappers._T<IErrorReporter> reporter = new Wrappers._T<IErrorReporter>();
      final Wrappers._T<SNode> type = new Wrappers._T<SNode>();

      ModelAccess.instance().runWriteAction(new Runnable() {
        public void run() {
          typeCheckingContext.value = ((EditorComponent) MapSequence.fromMap(_params).get("editorComponent")).getTypeCheckingContext();
          if (!(typeCheckingContext.value.isCheckedRoot(false))) {
            typeCheckingContext.value.checkIfNotChecked(((SNode) MapSequence.fromMap(_params).get("node")), false);
          }
          type.value = typeCheckingContext.value.getTypeDontCheck(((SNode) MapSequence.fromMap(_params).get("node")));
          reporter.value = typeCheckingContext.value.getTypeMessageDontCheck(((SNode) MapSequence.fromMap(_params).get("node")));
        }
      });

      if (type.value == null) {
        JOptionPane.showMessageDialog(((Frame) MapSequence.fromMap(_params).get("frame")), "no type");
        return;
      }

      final Wrappers._T<SModel> tmpModel = new Wrappers._T<SModel>();

      try {
        ModelAccess.instance().runUndoTransparentCommand(new Runnable() {
          public void run() {
            tmpModel.value = TemporaryModels.getInstance().create(false, TempModuleOptions.forDefaultModule());
            tmpModel.value.addRootNode(type.value);
            TemporaryModels.getInstance().addMissingImports(tmpModel.value);
          }
        });
        new MyBaseNodeDialog(((IOperationContext) MapSequence.fromMap(_params).get("context")), ((SNode) MapSequence.fromMap(_params).get("node")), type.value, reporter.value).show();
      } finally {
        ModelAccess.instance().runUndoTransparentCommand(new Runnable() {
          public void run() {
            tmpModel.value.removeRootNode(type.value);
            TemporaryModels.getInstance().dispose(tmpModel.value);
          }
        });
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "ShowNodeType", t);
      }
    }
  }

  protected static Logger LOG = LogManager.getLogger(ShowNodeType_Action.class);
}
