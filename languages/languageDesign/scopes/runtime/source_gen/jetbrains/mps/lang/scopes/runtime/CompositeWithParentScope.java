package jetbrains.mps.lang.scopes.runtime;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.scope.CompositeScope;
import jetbrains.mps.scope.SimpleRoleScope;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;

public class CompositeWithParentScope {
  public static Scope from(Scope original, SNode node, SNode kind) {
    // todo: from? 
    Scope nextScope = Scope.getScope(Scope.parent(node), node, kind);
    return (nextScope == null ? original : new CompositeScope(original, nextScope));
  }
  public static Scope from(Iterable<SNode> elements, SNode node, SNode kind) {
    return (elements != null ? from(new NamedElementsScope(elements), node, kind) : parentScope(node, kind));
  }
  public static Scope from(SNode element, SNode node, SNode kind) {
    return ((element != null) ? from(new NamedElementsScope(element), node, kind) : parentScope(node, kind));
  }
  public static Scope fromLink(SNode link, SNode node, SNode kind) {
    return from(new SimpleRoleScope(node, link, BehaviorReflection.invokeVirtual(String.class, SNodeOperations.asNode(kind), "virtual_getFqName_1213877404258", new Object[]{})) {
      @Override
      public String getName(SNode child) {
        return SPropertyOperations.getString(SNodeOperations.cast(child, MetaAdapterFactory.getInterfaceConcept(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, "jetbrains.mps.lang.core.structure.INamedConcept")), MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name"));
      }
    }, node, kind);
  }
  public static Scope parentScope(SNode node, SNode kind) {
    return Scope.getScope(Scope.parent(node), node, kind);
  }
}
