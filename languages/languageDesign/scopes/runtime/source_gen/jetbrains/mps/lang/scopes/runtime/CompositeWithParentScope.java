package jetbrains.mps.lang.scopes.runtime;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.scope.CompositeScope;
import jetbrains.mps.baseLanguage.scopes.SimpleScope;
import jetbrains.mps.scope.SimpleRoleScope;
import jetbrains.mps.smodel.behaviour.BehaviorManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class CompositeWithParentScope {
  public static Scope from(Scope original, SNode node, SNode kind) {
    // todo: from? 
    Scope nextScope = Scope.getScope(Scope.parent(node), node, kind);
    return (nextScope == null ?
      original :
      new CompositeScope(original, nextScope)
    );
  }

  public static Scope from(Iterable<SNode> elements, SNode node, SNode kind) {
    return (elements != null ?
      from(new SimpleScope(elements), node, kind) :
      parentScope(node, kind)
    );
  }

  public static Scope from(SNode element, SNode node, SNode kind) {
    return ((element != null) ?
      from(new SimpleScope(element), node, kind) :
      parentScope(node, kind)
    );
  }

  public static Scope fromLink(SNode link, SNode node, SNode kind) {
    return from(new SimpleRoleScope(node, link, ((String) BehaviorManager.getInstance().invoke(Object.class, kind, "virtual_getFqName_1213877404258", new Class[]{SNode.class}))) {
      public String getName(SNode child) {
        return SPropertyOperations.getString(SNodeOperations.cast(child, "jetbrains.mps.lang.core.structure.INamedConcept"), "name");
      }
    }, node, kind);
  }

  public static Scope parentScope(SNode node, SNode kind) {
    return Scope.getScope(Scope.parent(node), node, kind);
  }
}
