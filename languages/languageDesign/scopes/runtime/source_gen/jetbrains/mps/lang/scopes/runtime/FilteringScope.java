package jetbrains.mps.lang.scopes.runtime;

/*Generated by MPS */

import jetbrains.mps.scope.DelegatingScope;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class FilteringScope extends DelegatingScope {
  public FilteringScope(Scope scope) {
    super(scope);
  }

  public boolean isExcluded(SNode node) {
    return false;
  }

  @Override
  public SNode resolve(SNode contextNode, String refText) {
    SNode resolved = super.resolve(contextNode, refText);
    if (isExcluded(resolved)) {
      return null;
    }
    return resolved;
  }

  @Override
  public List<SNode> getAvailableElements(@Nullable String prefix) {
    List<SNode> availableElements = super.getAvailableElements(prefix);
    return ListSequence.fromList(availableElements).removeWhere(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return isExcluded(it);
      }
    });
  }

  @Override
  public String getReferenceText(SNode contextNode, SNode node) {
    if (isExcluded(node)) {
      return null;
    }
    return super.getReferenceText(contextNode, node);
  }

  @Override
  public boolean contains(SNode node) {
    if (isExcluded(node)) {
      return false;
    }
    return super.contains(node);
  }
}
