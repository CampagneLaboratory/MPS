package jetbrains.mps.lang.scopes.runtime;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.util.Map;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.SortedMapSequence;
import java.util.TreeMap;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.annotations.NotNull;
import java.util.List;

public abstract class NamedElementsScope extends Scope {
  private static int ACCESS_COUNT_LIMIT = 5;
  protected static Log log = LogFactory.getLog(NamedElementsScope.class);

  private int accessCount = 0;
  private volatile Map<String, SNode> optimized;

  public NamedElementsScope() {
    // todo: rewrite this class 
  }

  public abstract Iterable<SNode> getElements(@Nullable String prefix);

  private Iterable<SNode> _getElements(final String prefix) {
    if (optimized == null) {
      if (accessCount++ > ACCESS_COUNT_LIMIT || prefix == null) {
        if (log.isDebugEnabled()) {
          log.debug("optimize on " + accessCount + " counts " + optimized);
        }
        optimize();
      }
    }
    if (optimized == null) {
      return getElements(prefix);
    } else {
      if (prefix == null) {
        return MapSequence.fromMap(optimized).values();
      } else {
        return SetSequence.fromSet(MapSequence.fromMap(optimized).keySet()).where(new IWhereFilter<String>() {
          public boolean accept(String it) {
            return it.startsWith(prefix);
          }
        }).select(new ISelector<String, SNode>() {
          public SNode select(String it) {
            return MapSequence.fromMap(optimized).get(it);
          }
        });
      }
    }
  }

  private void optimize() {
    optimized = SortedMapSequence.fromMap(new TreeMap<String, SNode>());
    for (SNode node : Sequence.fromIterable(getElements(null))) {
      MapSequence.fromMap(optimized).put(SPropertyOperations.getString(node, "name"), node);
    }
  }

  @Override
  public boolean contains(SNode node) {
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.core.structure.INamedConcept"))) {
      return false;
    }
    String name = SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.lang.core.structure.INamedConcept"), "name");
    if (optimized != null) {
      return MapSequence.fromMap(optimized).get(name) == node;
    }
    return Sequence.fromIterable(_getElements(name)).contains(node);
  }

  @Nullable
  public String getReferenceText(SNode contextNode, @NotNull SNode node) {
    return SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.lang.core.structure.INamedConcept"), "name");
  }

  @Nullable
  public SNode resolve(SNode contextNode, @NotNull final String refText) {
    if (optimized != null) {
      return MapSequence.fromMap(optimized).get(refText);
    }
    Iterable<SNode> pretenders = Sequence.fromIterable(_getElements(refText)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getString(it, "name").equals(refText);
      }
    });
    return ((int) Sequence.fromIterable(pretenders).count() == 1 ?
      Sequence.fromIterable(pretenders).first() :
      null
    );
  }

  public List<SNode> getAvailableElements(@Nullable String prefix) {
    return Sequence.fromIterable(_getElements(prefix)).toListSequence();
  }
}
