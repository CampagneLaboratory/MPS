package jetbrains.mps.lang.scopes.runtime;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public abstract class NamedElementsScope extends Scope {
  public NamedElementsScope() {
  }

  public abstract Iterable<SNode> getElements(@Nullable String prefix);

  @Override
  public boolean contains(SNode node) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.core.structure.INamedConcept") && Sequence.fromIterable(getElements(SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.lang.core.structure.INamedConcept"), "name"))).contains(node);
  }

  @Nullable
  public String getReferenceText(SNode contextNode, @NotNull SNode node) {
    return SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.lang.core.structure.INamedConcept"), "name");
  }

  @Nullable
  public SNode resolve(SNode contextNode, @NotNull final String refText) {
    Iterable<SNode> pretenders = Sequence.fromIterable(getElements(refText)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getString(it, "name").equals(refText);
      }
    });
    return ((int) Sequence.fromIterable(pretenders).count() == 1 ?
      Sequence.fromIterable(pretenders).skip(1).first() :
      null
    );
  }

  public Iterable<SNode> getAvailableElements(@Nullable String prefix) {
    return getElements(prefix);
  }
}
