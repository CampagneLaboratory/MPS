package jetbrains.mps.lang.scopes.runtime;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.SNode;
import java.util.Set;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.List;
import org.jetbrains.annotations.Nullable;
import java.util.ArrayList;

public class HidingByNameScope extends Scope {
  private final SNode hidingRoot;
  private final SNode kind;
  private final Scope scope;
  private final Scope parentScope;
  private final Set<String> names;

  public HidingByNameScope(final SNode hidingRoot, SNode kind, @NotNull Scope scope, @NotNull Scope parentScope) {
    // hiding root: all subconcepts of hidingRoot hide each other 
    this.scope = scope;
    this.parentScope = parentScope;
    this.hidingRoot = hidingRoot;
    this.kind = kind;
    // todo: maybe lazy in getAvailableElements? 
    this.names = SetSequence.fromSetWithValues(new HashSet(), ListSequence.fromList(scope.getAvailableElements(null)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, NameUtil.nodeFQName(hidingRoot));
      }
    }).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.lang.core.structure.INamedConcept"), "name");
      }
    }));
  }

  public List<SNode> getAvailableElements(@Nullable String prefix) {
    List<SNode> result = new ArrayList<SNode>();
    ListSequence.fromList(result).addSequence(ListSequence.fromList(scope.getAvailableElements(prefix)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, NameUtil.nodeFQName(kind));
      }
    }));
    ListSequence.fromList(result).addSequence(ListSequence.fromList(parentScope.getAvailableElements(prefix)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, NameUtil.nodeFQName(kind));
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SNodeOperations.isInstanceOf(it, NameUtil.nodeFQName(hidingRoot))) || !(SetSequence.fromSet(names).contains(SPropertyOperations.getString(SNodeOperations.cast(it, "jetbrains.mps.lang.core.structure.INamedConcept"), "name")));
      }
    }));
    return result;
  }

  @Nullable
  public SNode resolve(SNode contextNode, @NotNull String refText) {
    return (SetSequence.fromSet(names).contains(refText) ?
      scope.resolve(contextNode, refText) :
      parentScope.resolve(contextNode, refText)
    );
  }

  @Nullable
  public String getReferenceText(SNode contextNode, @NotNull SNode node) {
    return SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.lang.core.structure.INamedConcept"), "name");
  }
}
