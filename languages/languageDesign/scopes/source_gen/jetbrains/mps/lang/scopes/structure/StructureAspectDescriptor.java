package jetbrains.mps.lang.scopes.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptComeFromExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.scopes.structure.ComeFromExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("link").alias("come from", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCompositeWithParentScopeExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.scopes.structure.CompositeWithParentScopeExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"expr"}, new boolean[]{false}).alias("composite with", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptParentScope = new ConceptDescriptorBuilder("jetbrains.mps.lang.scopes.structure.ParentScope").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("parent scope", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptUniformScopeProvider = new ConceptDescriptorBuilder("jetbrains.mps.lang.scopes.structure.UniformScopeProvider").interface_().parents("jetbrains.mps.lang.core.structure.ScopeProvider").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptComeFromExpression, myConceptCompositeWithParentScopeExpression, myConceptParentScope, myConceptUniformScopeProvider);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0h, conceptFqName)) {
      case 0:
        return myConceptComeFromExpression;
      case 1:
        return myConceptCompositeWithParentScopeExpression;
      case 2:
        return myConceptParentScope;
      case 3:
        return myConceptUniformScopeProvider;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0h = new String[]{"jetbrains.mps.lang.scopes.structure.ComeFromExpression", "jetbrains.mps.lang.scopes.structure.CompositeWithParentScopeExpression", "jetbrains.mps.lang.scopes.structure.ParentScope", "jetbrains.mps.lang.scopes.structure.UniformScopeProvider"};
}
