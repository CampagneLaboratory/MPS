package jetbrains.mps.tool.gentest.plugin;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import java.util.Map;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.Classifier_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import java.util.List;
import jetbrains.mps.baseLanguage.search.ReachableClassifiersScope;
import jetbrains.mps.baseLanguage.search.IClassifiersSearchScope;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.SReference;

public class TestCollector {
  private static final String TEST_CASE = "TEST_CASE";
  private static final String TEST_ANN = "TEST_ANN";
  private static final String MPS_LAUNCH_ANN = "MPS_LAUNCH_ANN";
  private static final String IGNORE_ANN = "IGNORE_ANN";
  private Iterable<SModel> models;
  private Map<Tuples._2<String, String>, SNode> nodeCache = MapSequence.fromMap(new HashMap<Tuples._2<String, String>, SNode>());
  public TestCollector(Iterable<SModel> models) {
    this.models = models;
  }
  public Iterable<String> collectTests() {
    return Sequence.fromIterable(models).translate(new ITranslator2<SModel, SNode>() {
      public Iterable<SNode> translate(SModel model) {
        return SModelOperations.getRoots(model, "jetbrains.mps.baseLanguage.structure.ClassConcept");
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode cls) {
        return isJunit38Test(cls) || isJUnit4Test(cls);
      }
    }).select(new ISelector<SNode, String>() {
      public String select(SNode cls) {
        return BehaviorReflection.invokeVirtual(String.class, cls, "virtual_getFqName_1213877404258", new Object[]{});
      }
    });
  }
  private boolean isJunit38Test(SNode maybetest) {
    boolean isdesc = BehaviorReflection.invokeVirtual(Boolean.TYPE, maybetest, "virtual_isDescendant_7165541881557222913", new Object[]{getTestCaseClass(SNodeOperations.getModel(maybetest))});
    boolean hasann = hasAnnotation(maybetest, getIgnoreAnnotation(SNodeOperations.getModel(maybetest)), getMPSLaunchAnnotation(SNodeOperations.getModel(maybetest)));
    return isdesc && !(hasann) && hasJUnit38TestMethods(maybetest);
  }
  private boolean hasJUnit38TestMethods(final SNode maybetest) {
    return Sequence.fromIterable(Classifier_Behavior.call_methods_5292274854859311639(maybetest)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode meth) {
        return "public".equals(SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(meth, "visibility", true)), "conceptAlias")) && SPropertyOperations.getString(meth, "name").startsWith("test");
      }
    }).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode meth) {
        return !(hasAnnotation(meth, getIgnoreAnnotation(SNodeOperations.getModel(maybetest))));
      }
    });
  }
  private boolean isJUnit4Test(SNode maybetest) {
    return !(hasAnnotation(getIgnoreAnnotation(SNodeOperations.getModel(maybetest)), getMPSLaunchAnnotation(SNodeOperations.getModel(maybetest)))) && hasJUnit4TestMethods(maybetest);
  }
  private boolean hasJUnit4TestMethods(final SNode maybetest) {
    return Sequence.fromIterable(Classifier_Behavior.call_methods_5292274854859311639(maybetest)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode meth) {
        return "public".equals(SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(SLinkOperations.getTarget(meth, "visibility", true)), "conceptAlias")) && hasAnnotation(meth, getTestAnnotation(SNodeOperations.getModel(maybetest)));
      }
    }).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode meth) {
        return !(hasAnnotation(meth, getIgnoreAnnotation(SNodeOperations.getModel(maybetest))));
      }
    });
  }
  private boolean hasAnnotation(final SNode hasann, SNode... annotation) {
    return Sequence.fromIterable(Sequence.fromArray(annotation)).any(new IWhereFilter<SNode>() {
      public boolean accept(final SNode ann) {
        return ListSequence.fromList(SLinkOperations.getTargets(hasann, "annotation", true)).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode anninst) {
            return SLinkOperations.getTarget(anninst, "annotation", false) == ann;
          }
        });
      }
    });
  }
  private SNode getTestCaseClass(final SModel context) {
    return SNodeOperations.cast(getNode(context, TEST_CASE, new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final String testCase = BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(_quotation_createNode_rpw6il_a0a0a0c0a0a31(), "classifier", false), "virtual_getFqName_1213877404258", new Object[]{});
        return SNodeOperations.cast(ListSequence.fromList(TestCollector.this.allClassifiers(context)).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode cls) {
            return BehaviorReflection.invokeVirtual(String.class, cls, "virtual_getFqName_1213877404258", new Object[]{}).equals(testCase);
          }
        }), "jetbrains.mps.baseLanguage.structure.ClassConcept");
      }
    }), "jetbrains.mps.baseLanguage.structure.ClassConcept");
  }
  private SNode getTestAnnotation(final SModel context) {
    return SNodeOperations.cast(getNode(context, TEST_ANN, new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final String testAnn = BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(_quotation_createNode_rpw6il_a0a0a0c0a0a41(), "classifier", false), "virtual_getFqName_1213877404258", new Object[]{});
        return ListSequence.fromList(TestCollector.this.allAnnotations(context)).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode ann) {
            return BehaviorReflection.invokeVirtual(String.class, ann, "virtual_getFqName_1213877404258", new Object[]{}).equals(testAnn);
          }
        });
      }
    }), "jetbrains.mps.baseLanguage.structure.Annotation");
  }
  private SNode getIgnoreAnnotation(final SModel context) {
    return SNodeOperations.cast(getNode(context, IGNORE_ANN, new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final String ignoreAnn = BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(_quotation_createNode_rpw6il_a0a0a0c0a0a51(), "classifier", false), "virtual_getFqName_1213877404258", new Object[]{});
        return ListSequence.fromList(TestCollector.this.allAnnotations(context)).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode ann) {
            return BehaviorReflection.invokeVirtual(String.class, ann, "virtual_getFqName_1213877404258", new Object[]{}).equals(ignoreAnn);
          }
        });
      }
    }), "jetbrains.mps.baseLanguage.structure.Annotation");
  }
  private SNode getMPSLaunchAnnotation(final SModel context) {
    return SNodeOperations.cast(getNode(context, MPS_LAUNCH_ANN, new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        final String mpslaunchAnn = BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(_quotation_createNode_rpw6il_a0a0a0c0a0a61(), "classifier", false), "virtual_getFqName_1213877404258", new Object[]{});
        return ListSequence.fromList(TestCollector.this.allAnnotations(context)).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode ann) {
            return BehaviorReflection.invokeVirtual(String.class, ann, "virtual_getFqName_1213877404258", new Object[]{}).equals(mpslaunchAnn);
          }
        });
      }
    }), "jetbrains.mps.baseLanguage.structure.Annotation");
  }
  private SNode getNode(SModel context, String kind, _FunctionTypes._return_P0_E0<? extends SNode> getter) {
    SNode node = MapSequence.fromMap(nodeCache).get(MultiTuple.<String,String>from(context.getReference().getModelName(), kind));
    if (node == null) {
      node = getter.invoke();
      MapSequence.fromMap(nodeCache).put(MultiTuple.<String,String>from(context.getReference().getModelName(), kind), node);
    }
    return node;
  }
  protected List<SNode> allClassifiers(SModel context) {
    return (List<SNode>) new ReachableClassifiersScope(context, IClassifiersSearchScope.CLASS).getClassifiers();
  }
  protected List<SNode> allAnnotations(SModel context) {
    return (List<SNode>) new ReachableClassifiersScope(context, IClassifiersSearchScope.ANNOTATION).getClassifiers();
  }
  private static SNode _quotation_createNode_rpw6il_a0a0a0c0a0a31() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("83f155ff-422c-4b5a-a2f2-b459302dd215/f:java_stub#83f155ff-422c-4b5a-a2f2-b459302dd215#junit.framework(jetbrains.mps.baseLanguage.unitTest.libs/junit.framework@java_stub)"), facade.createNodeId("~TestCase")));
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_rpw6il_a0a0a0c0a0a41() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("83f155ff-422c-4b5a-a2f2-b459302dd215/f:java_stub#83f155ff-422c-4b5a-a2f2-b459302dd215#org.junit(jetbrains.mps.baseLanguage.unitTest.libs/org.junit@java_stub)"), facade.createNodeId("~Test")));
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_rpw6il_a0a0a0c0a0a51() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("83f155ff-422c-4b5a-a2f2-b459302dd215/f:java_stub#83f155ff-422c-4b5a-a2f2-b459302dd215#org.junit(jetbrains.mps.baseLanguage.unitTest.libs/org.junit@java_stub)"), facade.createNodeId("~Ignore")));
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_rpw6il_a0a0a0c0a0a61() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("920eaa0e-ecca-46bc-bee7-4e5c59213dd6/f:java_stub#920eaa0e-ecca-46bc-bee7-4e5c59213dd6#jetbrains.mps(Testbench/jetbrains.mps@java_stub)"), facade.createNodeId("~MPSLaunch")));
    return quotedNode_1;
  }
}
