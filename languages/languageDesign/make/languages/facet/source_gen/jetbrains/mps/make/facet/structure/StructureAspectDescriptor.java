package jetbrains.mps.make.facet.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptExtendsFacetReference = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.ExtendsFacetReference").super_("jetbrains.mps.make.facet.structure.FacetReference").parents("jetbrains.mps.make.facet.structure.FacetReference").create();
  /*package*/ final ConceptDescriptor myConceptFacetDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.FacetDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.structure.IWillBeClassifier").children(new String[]{"extended", "required", "optional", "targetDeclaration"}, new boolean[]{true, true, true, true}).alias("Facet", "").create();
  /*package*/ final ConceptDescriptor myConceptFacetJavaClassExpression = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.FacetJavaClassExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("facet").alias("facet class/", "").create();
  /*package*/ final ConceptDescriptor myConceptFacetReference = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.FacetReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("facet").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptFacetReferenceExpression = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.FacetReferenceExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"reference"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptForeignParametersComponentExpression = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.ForeignParametersComponentExpression").super_("jetbrains.mps.baseLanguage.structure.DotExpression").parents("jetbrains.mps.baseLanguage.structure.DotExpression", "jetbrains.mps.make.facet.structure.IPropertyExpression").children(new String[]{"expression"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptForeignParametersExpression = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.ForeignParametersExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("target").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIFacet = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.IFacet").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIPropertyExpression = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.IPropertyExpression").interface_().children(new String[]{"resource"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptLocalParametersComponentExpression = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.LocalParametersComponentExpression").super_("jetbrains.mps.baseLanguage.structure.DotExpression").parents("jetbrains.mps.baseLanguage.structure.DotExpression", "jetbrains.mps.make.facet.structure.IPropertyExpression").children(new String[]{"expression"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLocalParametersExpression = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.LocalParametersExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNamedFacetReference = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.NamedFacetReference").super_("jetbrains.mps.make.facet.structure.FacetReference").parents("jetbrains.mps.make.facet.structure.FacetReference").create();
  /*package*/ final ConceptDescriptor myConceptParametersDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.ParametersDeclaration").super_("jetbrains.mps.baseLanguage.tuples.structure.NamedTupleDeclaration").parents("jetbrains.mps.baseLanguage.tuples.structure.NamedTupleDeclaration").create();
  /*package*/ final ConceptDescriptor myConceptRelatedFacetReference = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.RelatedFacetReference").super_("jetbrains.mps.make.facet.structure.FacetReference").parents("jetbrains.mps.make.facet.structure.FacetReference").create();
  /*package*/ final ConceptDescriptor myConceptResourceClassifierType = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.ResourceClassifierType").super_("jetbrains.mps.baseLanguage.structure.ClassifierType").parents("jetbrains.mps.baseLanguage.structure.ClassifierType").references("resource").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptResourceSpecificPropertiesExpression = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.ResourceSpecificPropertiesExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"properties", "resource"}, new boolean[]{false, false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptResourceTypeDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.ResourceTypeDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"resourceType"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptTargetDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.TargetDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.structure.IWillBeClassifier").properties("resourcesPolicy", "optional", "weight").references("overrides").children(new String[]{"parameters", "dependency", "job", "input", "output"}, new boolean[]{false, true, false, false, false}).create();
  /*package*/ final ConceptDescriptor myConceptTargetDependency = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.TargetDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("qualifier").references("dependsOn").create();
  /*package*/ final ConceptDescriptor myConceptTargetReferenceExpression = new ConceptDescriptorBuilder("jetbrains.mps.make.facet.structure.TargetReferenceExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("target").children(new String[]{"facetRef"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptExtendsFacetReference, myConceptFacetDeclaration, myConceptFacetJavaClassExpression, myConceptFacetReference, myConceptFacetReferenceExpression, myConceptForeignParametersComponentExpression, myConceptForeignParametersExpression, myConceptIFacet, myConceptIPropertyExpression, myConceptLocalParametersComponentExpression, myConceptLocalParametersExpression, myConceptNamedFacetReference, myConceptParametersDeclaration, myConceptRelatedFacetReference, myConceptResourceClassifierType, myConceptResourceSpecificPropertiesExpression, myConceptResourceTypeDeclaration, myConceptTargetDeclaration, myConceptTargetDependency, myConceptTargetReferenceExpression);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0x, conceptFqName)) {
      case 0:
        return myConceptExtendsFacetReference;
      case 1:
        return myConceptFacetDeclaration;
      case 2:
        return myConceptFacetJavaClassExpression;
      case 3:
        return myConceptFacetReference;
      case 4:
        return myConceptFacetReferenceExpression;
      case 5:
        return myConceptForeignParametersComponentExpression;
      case 6:
        return myConceptForeignParametersExpression;
      case 7:
        return myConceptIFacet;
      case 8:
        return myConceptIPropertyExpression;
      case 9:
        return myConceptLocalParametersComponentExpression;
      case 10:
        return myConceptLocalParametersExpression;
      case 11:
        return myConceptNamedFacetReference;
      case 12:
        return myConceptParametersDeclaration;
      case 13:
        return myConceptRelatedFacetReference;
      case 14:
        return myConceptResourceClassifierType;
      case 15:
        return myConceptResourceSpecificPropertiesExpression;
      case 16:
        return myConceptResourceTypeDeclaration;
      case 17:
        return myConceptTargetDeclaration;
      case 18:
        return myConceptTargetDependency;
      case 19:
        return myConceptTargetReferenceExpression;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0x = new String[]{"jetbrains.mps.make.facet.structure.ExtendsFacetReference", "jetbrains.mps.make.facet.structure.FacetDeclaration", "jetbrains.mps.make.facet.structure.FacetJavaClassExpression", "jetbrains.mps.make.facet.structure.FacetReference", "jetbrains.mps.make.facet.structure.FacetReferenceExpression", "jetbrains.mps.make.facet.structure.ForeignParametersComponentExpression", "jetbrains.mps.make.facet.structure.ForeignParametersExpression", "jetbrains.mps.make.facet.structure.IFacet", "jetbrains.mps.make.facet.structure.IPropertyExpression", "jetbrains.mps.make.facet.structure.LocalParametersComponentExpression", "jetbrains.mps.make.facet.structure.LocalParametersExpression", "jetbrains.mps.make.facet.structure.NamedFacetReference", "jetbrains.mps.make.facet.structure.ParametersDeclaration", "jetbrains.mps.make.facet.structure.RelatedFacetReference", "jetbrains.mps.make.facet.structure.ResourceClassifierType", "jetbrains.mps.make.facet.structure.ResourceSpecificPropertiesExpression", "jetbrains.mps.make.facet.structure.ResourceTypeDeclaration", "jetbrains.mps.make.facet.structure.TargetDeclaration", "jetbrains.mps.make.facet.structure.TargetDependency", "jetbrains.mps.make.facet.structure.TargetReferenceExpression"};
}
