package jetbrains.mps.make.facet.constraints;

/*Generated by MPS */

import jetbrains.mps.lang.scopes.runtime.SimpleScope;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SModule;
import java.util.Set;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class FacetsScope extends SimpleScope {
  public FacetsScope(SNode contextNode) {
    super(getAvailableFacets(contextNode));
  }

  public static Iterable<SNode> getAvailableFacets(SNode contextNode) {
    SModule contextModule = contextNode.getModel().getModelDescriptor().getModule();

    Set<Language> contextLanguages = SetSequence.fromSet(new HashSet<Language>());
    for (SModule module : Sequence.fromIterable(contextModule.getModuleScope().getModules())) {
      if (module instanceof Language) {
        SetSequence.fromSet(contextLanguages).addElement((Language) module);
      }
    }
    Iterable<SNode> facets = SetSequence.fromSet(contextLanguages).select(new ISelector<Language, EditableSModelDescriptor>() {
      public EditableSModelDescriptor select(Language it) {
        return LanguageAspect.PLUGIN.get(it);
      }
    }).where(new IWhereFilter<EditableSModelDescriptor>() {
      public boolean accept(EditableSModelDescriptor it) {
        return it != null;
      }
    }).translate(new ITranslator2<EditableSModelDescriptor, SNode>() {
      public Iterable<SNode> translate(EditableSModelDescriptor it) {
        return (Iterable<SNode>) it.getRootNodes();
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.make.facet.structure.FacetDeclaration");
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(it, "jetbrains.mps.make.facet.structure.FacetDeclaration");
      }
    });

    return facets;
  }

  @Nullable
  public String getReferenceText(@NotNull SNode target) {
    return BehaviorReflection.invokeVirtual(String.class, SNodeOperations.cast(target, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"), "virtual_getFqName_1213877404258", new Object[]{});
  }
}
