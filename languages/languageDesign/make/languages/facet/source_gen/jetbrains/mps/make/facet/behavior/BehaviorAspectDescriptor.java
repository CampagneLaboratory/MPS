package jetbrains.mps.make.facet.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myForeignParametersComponentExpression__BehaviorDescriptor = new ForeignParametersComponentExpression__BehaviorDescriptor();
  private final BHDescriptor myIFacet__BehaviorDescriptor = new IFacet__BehaviorDescriptor();
  private final BHDescriptor myFacetDeclaration__BehaviorDescriptor = new FacetDeclaration__BehaviorDescriptor();
  private final BHDescriptor myTargetDeclaration__BehaviorDescriptor = new TargetDeclaration__BehaviorDescriptor();
  private final BHDescriptor myFacetReferenceExpression__BehaviorDescriptor = new FacetReferenceExpression__BehaviorDescriptor();
  private final BHDescriptor myParametersDeclaration__BehaviorDescriptor = new ParametersDeclaration__BehaviorDescriptor();
  private final BHDescriptor myLocalParametersComponentExpression__BehaviorDescriptor = new LocalParametersComponentExpression__BehaviorDescriptor();
  private final BHDescriptor myTargetReferenceExpression__BehaviorDescriptor = new TargetReferenceExpression__BehaviorDescriptor();

  private final long[] myConceptBehaviorIds;

  public BehaviorAspectDescriptor() {
    myConceptBehaviorIds = new long[8];
    myConceptBehaviorIds[0] = 0x2e69d2eba535f3b1L;
    myConceptBehaviorIds[1] = 0x5912a2ab1cd24c11L;
    myConceptBehaviorIds[2] = 0x5912a2ab1cd24c13L;
    myConceptBehaviorIds[3] = 0x5912a2ab1cd24c3dL;
    myConceptBehaviorIds[4] = 0x639ef64ff4850bb0L;
    myConceptBehaviorIds[5] = 0x6598ce4d2f22a97eL;
    myConceptBehaviorIds[6] = 0x6598ce4d2f231cb3L;
    myConceptBehaviorIds[7] = 0x78c916bd7aecaff7L;
  }

  @Deprecated
  @Override
  public BehaviorDescriptor getDescriptor(String fqName) {
    return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
  }

  @Nullable
  @Override
  public BHDescriptor getDescriptor(@NotNull SConceptId conceptId) {
    int behaviorIndex = Arrays.binarySearch(myConceptBehaviorIds, conceptId.getIdValue());
    switch (behaviorIndex) {
      case 0:
        return myForeignParametersComponentExpression__BehaviorDescriptor;
      case 1:
        return myIFacet__BehaviorDescriptor;
      case 2:
        return myFacetDeclaration__BehaviorDescriptor;
      case 3:
        return myTargetDeclaration__BehaviorDescriptor;
      case 4:
        return myFacetReferenceExpression__BehaviorDescriptor;
      case 5:
        return myParametersDeclaration__BehaviorDescriptor;
      case 6:
        return myLocalParametersComponentExpression__BehaviorDescriptor;
      case 7:
        return myTargetReferenceExpression__BehaviorDescriptor;
      default:
        return null;
    }
  }
}
