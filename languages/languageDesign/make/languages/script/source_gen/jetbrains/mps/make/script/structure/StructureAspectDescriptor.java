package jetbrains.mps.make.script.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAdvanceWorkStatement = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.AdvanceWorkStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("workStatement").children(new String[]{"amount", "comment"}, new boolean[]{false, false}).alias("advance", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAllWorkLeftExpression = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.AllWorkLeftExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("ALL", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBeginWorkStatement = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.BeginWorkStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").properties("workName").children(new String[]{"expected", "ofTotal"}, new boolean[]{false, false}).alias("begin work", "").create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_progressMonitor = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.ConceptFunctionParameter_progressMonitor").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("progressMonitor", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConfigDefinition = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.ConfigDefinition").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExpected = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.Expected").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptExpectedInput = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.ExpectedInput").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.make.script.structure.IExpected").create();
  /*package*/ final ConceptDescriptor myConceptExpectedOption = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.ExpectedOption").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.make.script.structure.IExpected", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.structure.IWillBeClassifier").properties("defaultOption").children(new String[]{"option"}, new boolean[]{true}).alias("Option", "").create();
  /*package*/ final ConceptDescriptor myConceptFinishWorkStatement = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.FinishWorkStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("workStatement").alias("finish", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIExpected = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.IExpected").interface_().create();
  /*package*/ final ConceptDescriptor myConceptInputResourcesParameter = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.InputResourcesParameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("input", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptJobDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.JobDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"config", "job", "query"}, new boolean[]{false, false, true}).create();
  /*package*/ final ConceptDescriptor myConceptJobDefinition = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.JobDefinition").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptOption = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.Option").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"presentation"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptOptionExpression = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.OptionExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("option").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptOptionType = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.OptionType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.baseLanguage.structure.IWillBeClassifier").references("expectedOption").alias("option", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptOutputResources = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.OutputResources").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"resource"}, new boolean[]{false}).alias("output", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPropertiesAccessorParameter = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.PropertiesAccessorParameter").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("__pa__", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptQueryDefinition = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.QueryDefinition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.structure.IWillBeClassifier").children(new String[]{"expected", "presentation", "title"}, new boolean[]{false, false, false}).alias("Query", "").create();
  /*package*/ final ConceptDescriptor myConceptQueryParameterDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.QueryParameterDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"parameterType"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptRelayQueryExpression = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.RelayQueryExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("query").children(new String[]{"parameter"}, new boolean[]{true}).alias("relay query", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptReportFeedbackStatement = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.ReportFeedbackStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("feedback").children(new String[]{"message"}, new boolean[]{false}).alias("report", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptResourceType = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.ResourceType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").children(new String[]{"classifierType"}, new boolean[]{false}).alias("resource", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptResultStatement = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.ResultStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("result").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptText = new ConceptDescriptorBuilder("jetbrains.mps.make.script.structure.Text").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("text").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAdvanceWorkStatement, myConceptAllWorkLeftExpression, myConceptBeginWorkStatement, myConceptConceptFunctionParameter_progressMonitor, myConceptConfigDefinition, myConceptExpected, myConceptExpectedInput, myConceptExpectedOption, myConceptFinishWorkStatement, myConceptIExpected, myConceptInputResourcesParameter, myConceptJobDeclaration, myConceptJobDefinition, myConceptOption, myConceptOptionExpression, myConceptOptionType, myConceptOutputResources, myConceptPropertiesAccessorParameter, myConceptQueryDefinition, myConceptQueryParameterDeclaration, myConceptRelayQueryExpression, myConceptReportFeedbackStatement, myConceptResourceType, myConceptResultStatement, myConceptText);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0cb, conceptFqName)) {
      case 0:
        return myConceptAdvanceWorkStatement;
      case 1:
        return myConceptAllWorkLeftExpression;
      case 2:
        return myConceptBeginWorkStatement;
      case 3:
        return myConceptConceptFunctionParameter_progressMonitor;
      case 4:
        return myConceptConfigDefinition;
      case 5:
        return myConceptExpected;
      case 6:
        return myConceptExpectedInput;
      case 7:
        return myConceptExpectedOption;
      case 8:
        return myConceptFinishWorkStatement;
      case 9:
        return myConceptIExpected;
      case 10:
        return myConceptInputResourcesParameter;
      case 11:
        return myConceptJobDeclaration;
      case 12:
        return myConceptJobDefinition;
      case 13:
        return myConceptOption;
      case 14:
        return myConceptOptionExpression;
      case 15:
        return myConceptOptionType;
      case 16:
        return myConceptOutputResources;
      case 17:
        return myConceptPropertiesAccessorParameter;
      case 18:
        return myConceptQueryDefinition;
      case 19:
        return myConceptQueryParameterDeclaration;
      case 20:
        return myConceptRelayQueryExpression;
      case 21:
        return myConceptReportFeedbackStatement;
      case 22:
        return myConceptResourceType;
      case 23:
        return myConceptResultStatement;
      case 24:
        return myConceptText;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0cb = new String[]{"jetbrains.mps.make.script.structure.AdvanceWorkStatement", "jetbrains.mps.make.script.structure.AllWorkLeftExpression", "jetbrains.mps.make.script.structure.BeginWorkStatement", "jetbrains.mps.make.script.structure.ConceptFunctionParameter_progressMonitor", "jetbrains.mps.make.script.structure.ConfigDefinition", "jetbrains.mps.make.script.structure.Expected", "jetbrains.mps.make.script.structure.ExpectedInput", "jetbrains.mps.make.script.structure.ExpectedOption", "jetbrains.mps.make.script.structure.FinishWorkStatement", "jetbrains.mps.make.script.structure.IExpected", "jetbrains.mps.make.script.structure.InputResourcesParameter", "jetbrains.mps.make.script.structure.JobDeclaration", "jetbrains.mps.make.script.structure.JobDefinition", "jetbrains.mps.make.script.structure.Option", "jetbrains.mps.make.script.structure.OptionExpression", "jetbrains.mps.make.script.structure.OptionType", "jetbrains.mps.make.script.structure.OutputResources", "jetbrains.mps.make.script.structure.PropertiesAccessorParameter", "jetbrains.mps.make.script.structure.QueryDefinition", "jetbrains.mps.make.script.structure.QueryParameterDeclaration", "jetbrains.mps.make.script.structure.RelayQueryExpression", "jetbrains.mps.make.script.structure.ReportFeedbackStatement", "jetbrains.mps.make.script.structure.ResourceType", "jetbrains.mps.make.script.structure.ResultStatement", "jetbrains.mps.make.script.structure.Text"};
}
