package jetbrains.mps.lang.smodel.query.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class QueryExpression_Behavior {
  public static void init(SNode thisNode) {
  }
  public static boolean virtual_legalAsStatement_1262430001741498032(SAbstractConcept thisConcept) {
    return true;
  }
  public static String virtual_getHelpPage_7006261637493125297(SAbstractConcept thisConcept) {
    String result = "Supported parameters:\n";
    if (Sequence.fromIterable(BehaviorReflection.invokeVirtualStatic((Class<Iterable<SNode>>) ((Class) Object.class), SNodeOperations.asSConcept(SConceptOperations.findConceptDeclaration(thisConcept.getQualifiedName())), "virtual_getSupportedParameters_4307205004146936444", new Object[]{})).contains(MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x3bc644217618ed2fL, "jetbrains.mps.lang.smodel.query.structure.QueryParameterScope").getDeclarationNode())) {
      result += "scope  (default = project)   specifies the boundaries of the lookup operation\n";
    }
    if (Sequence.fromIterable(BehaviorReflection.invokeVirtualStatic((Class<Iterable<SNode>>) ((Class) Object.class), SNodeOperations.asSConcept(SConceptOperations.findConceptDeclaration(thisConcept.getQualifiedName())), "virtual_getSupportedParameters_4307205004146936444", new Object[]{})).contains(MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x3bc644217618ec86L, "jetbrains.mps.lang.smodel.query.structure.QueryParameterIncludeReadOnly").getDeclarationNode())) {
      result += "r/o+   (default = false)     also search in read-only models\n";
    } else {
      result += "Note: read-only models are included in the search scope\n";
    }
    return result;
  }
  public static String virtual_getDisplayString_6891027939994892943(SAbstractConcept thisConcept) {
    String result = BehaviorReflection.invokeSuperStatic(String.class, SNodeOperations.asSConcept(thisConcept), "jetbrains.mps.lang.smodel.query.structure.ExpressionHelpProvider", "virtual_getShortDisplayString_7006261637493126103", new Object[]{});
    if (Sequence.fromIterable(BehaviorReflection.invokeVirtualStatic((Class<Iterable<SNode>>) ((Class) Object.class), SNodeOperations.asSConcept(SConceptOperations.findConceptDeclaration(thisConcept.getQualifiedName())), "virtual_getSupportedParameters_4307205004146936444", new Object[]{})).isEmpty()) {
      return result;
    } else {
      return result + "<parameters>";
    }
  }
}
