package jetbrains.mps.testHybridEditor.diagram.generated.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.jetpad.projectional.diagram.view.DiagramView;
import jetbrains.jetpad.projectional.diagram.view.ConnectionRoutingView;
import jetbrains.jetpad.projectional.diagram.layout.OrthogonalRouter;
import jetbrains.mps.nodeEditor.cells.jetpad.DiagramViewCell;
import jetbrains.mps.openapi.editor.cells.EditorCell_Collection;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.nodeEditor.cells.jetpad.GenericViewCell;
import jetbrains.jetpad.projectional.view.View;

public class Diagram_diagramGenerated_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"jetbrains.mps.testHybridEditor.editor.HybridHints.diagramGenerated"});

  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }

  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createDiagram_tb7paq_a(editorContext, node);
  }

  private EditorCell createDiagram_tb7paq_a(EditorContext editorContext, SNode node) {
    DiagramView view = new ConnectionRoutingView(new OrthogonalRouter());
    DiagramViewCell editorCell = DiagramViewCell.createViewCell(editorContext, node, view);
    EditorCell_Collection blockCollection = jetbrains.mps.nodeEditor.cells.EditorCell_Collection.createIndent2(editorContext, node);
    for (SNode blockNode : ListSequence.fromList(SLinkOperations.getTargets(node, "blocks", true))) {
      GenericViewCell blockCell = (GenericViewCell) editorContext.createNodeCell(blockNode);
      View blockView = blockCell.getView();
      blockCollection.addEditorCell(blockCell);
      View oldParent = blockView.parent();
      if (oldParent != null) {
        oldParent.children().remove(oldParent.children().indexOf(blockView));
      }
      view.itemsView.children().add(blockView);
    }
    editorCell.addEditorCell(blockCollection);

    return editorCell;

  }
}
