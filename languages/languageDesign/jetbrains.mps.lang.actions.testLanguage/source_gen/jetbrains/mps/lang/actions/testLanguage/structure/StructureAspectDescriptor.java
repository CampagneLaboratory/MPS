package jetbrains.mps.lang.actions.testLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChild", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChildWrapper", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1Child", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1SubConcept", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild2", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap1", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap2", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildWrapper", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestContainer", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultAbstractChild", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultChild1", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultChild2", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAbstractChild", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAddConceptAbstractChild", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAddConceptChild", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherAbstractChild", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChild1", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChild2", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformChild1", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformTestAncestor", null);
    myFqNameToConcept.put("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformTestContainer", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChild").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault", "jetbrains.mps.lang.core.structure.INamedConcept").abstract_().create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChildWrapper").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault", "jetbrains.mps.lang.core.structure.INamedConcept").abstract_().create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChild").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChild").children(new String[]{"child1"}, new boolean[]{true}).alias("child1", "").create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1Child").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1SubConcept").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1").alias("child1Sub", "").create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild2").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChild").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChild").alias("child2", "").create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap1").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault", "jetbrains.mps.lang.core.structure.INamedConcept").alias("wrappedChild1", "").create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap2").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap1").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap1").alias("wrappedChild2", "").create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildWrapper").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChildWrapper").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChildWrapper").children(new String[]{"childToWrap"}, new boolean[]{false}).create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestContainer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"abstractChild", "conceptSubstitutePart", "addMenu_conceptSubstitute", "addMenu_genericQuery", "addMenu_parameterizedSubstitute", "addMenu_simpleItemSubstitute", "addMenu_wrapperSubstitute", "addMenu_wrapperSubstituteDefaultSelection", "removeByConditionPart", "removePart", "removeDefaultsPart"}, new boolean[]{true, true, true, true, true, true, true, true, true, true, true}).create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultAbstractChild").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").abstract_().create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultChild1").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultAbstractChild").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultAbstractChild").alias("child1", "").create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultChild2").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultAbstractChild").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultAbstractChild").alias("child2", "").create();
        break;
      case 13:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAbstractChild").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").abstract_().create();
        break;
      case 14:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAddConceptAbstractChild").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 15:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAddConceptChild").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAddConceptAbstractChild").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAddConceptAbstractChild").alias("addConceptChild", "").create();
        break;
      case 16:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherAbstractChild").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 17:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChild1").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept").alias("anotherChild1", "").create();
        break;
      case 18:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChild2").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept").alias("anotherChild2", "").create();
        break;
      case 19:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherAbstractChild").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherAbstractChild").abstract_().create();
        break;
      case 20:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformChild1").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAbstractChild").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAbstractChild").create();
        break;
      case 21:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformTestAncestor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"container"}, new boolean[]{false}).create();
        break;
      case 22:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformTestContainer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"abstractChild", "abstractChildConstrained", "anotherAbstractChild", "anotherAbstractChildConstrained", "abstractChildAddConcept"}, new boolean[]{true, true, true, true, true}).create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChild", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChildWrapper", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1Child", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1SubConcept", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild2", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap1", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap2", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildWrapper", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestContainer", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultAbstractChild", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultChild1", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultChild2", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAbstractChild", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAddConceptAbstractChild", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAddConceptChild", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherAbstractChild", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChild1", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChild2", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformChild1", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformTestAncestor", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformTestContainer"};
}
