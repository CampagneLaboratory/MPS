package jetbrains.mps.lang.actions.testLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptActionTestAbstractChild = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChild").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault", "jetbrains.mps.lang.core.structure.INamedConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptActionTestAbstractChildWrapper = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChildWrapper").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault", "jetbrains.mps.lang.core.structure.INamedConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptActionTestChild1 = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChild").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChild").children(new String[]{"child1"}, new boolean[]{true}).alias("child1", "").create();
  /*package*/ final ConceptDescriptor myConceptActionTestChild1Child = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1Child").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptActionTestChild1SubConcept = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1SubConcept").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1").alias("child1Sub", "").create();
  /*package*/ final ConceptDescriptor myConceptActionTestChild2 = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild2").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChild").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChild").alias("child2", "").create();
  /*package*/ final ConceptDescriptor myConceptActionTestChildToWrap1 = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap1").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault", "jetbrains.mps.lang.core.structure.INamedConcept").alias("wrappedChild1", "").create();
  /*package*/ final ConceptDescriptor myConceptActionTestChildToWrap2 = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap2").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap1").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap1").alias("wrappedChild2", "").create();
  /*package*/ final ConceptDescriptor myConceptActionTestChildWrapper = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildWrapper").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChildWrapper").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChildWrapper").children(new String[]{"childToWrap"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptActionTestContainer = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestContainer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"abstractChild", "conceptSubstitutePart", "addMenu_conceptSubstitute", "addMenu_genericQuery", "addMenu_parameterizedSubstitute", "addMenu_simpleItemSubstitute", "addMenu_wrapperSubstitute", "addMenu_wrapperSubstituteDefaultSelection", "removeByConditionPart", "removePart", "removeDefaultsPart"}, new boolean[]{true, true, true, true, true, true, true, true, true, true, true}).create();
  /*package*/ final ConceptDescriptor myConceptActionTestDefaultAbstractChild = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultAbstractChild").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptActionTestDefaultChild1 = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultChild1").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultAbstractChild").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultAbstractChild").alias("child1", "").create();
  /*package*/ final ConceptDescriptor myConceptActionTestDefaultChild2 = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultChild2").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultAbstractChild").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultAbstractChild").alias("child2", "").create();
  /*package*/ final ConceptDescriptor myConceptActionTestSidetransformAbstractChild = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAbstractChild").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptActionTestSidetransformAddConceptAbstractChild = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAddConceptAbstractChild").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptActionTestSidetransformAddConceptChild = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAddConceptChild").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAddConceptAbstractChild").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAddConceptAbstractChild").alias("addConceptChild", "").create();
  /*package*/ final ConceptDescriptor myConceptActionTestSidetransformAnotherAbstractChild = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherAbstractChild").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptActionTestSidetransformAnotherChild1 = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChild1").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept").alias("anotherChild1", "").create();
  /*package*/ final ConceptDescriptor myConceptActionTestSidetransformAnotherChild2 = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChild2").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept").alias("anotherChild2", "").create();
  /*package*/ final ConceptDescriptor myConceptActionTestSidetransformAnotherChildCommonSuperConcept = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherAbstractChild").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherAbstractChild").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptActionTestSidetransformChild1 = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformChild1").super_("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAbstractChild").parents("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAbstractChild").create();
  /*package*/ final ConceptDescriptor myConceptActionTestSidetransformTestAncestor = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformTestAncestor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"container"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptActionTestSidetransformTestContainer = new ConceptDescriptorBuilder("jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformTestContainer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"abstractChild", "abstractChildConstrained", "anotherAbstractChild", "anotherAbstractChildConstrained", "abstractChildAddConcept"}, new boolean[]{true, true, true, true, true}).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptActionTestAbstractChild, myConceptActionTestAbstractChildWrapper, myConceptActionTestChild1, myConceptActionTestChild1Child, myConceptActionTestChild1SubConcept, myConceptActionTestChild2, myConceptActionTestChildToWrap1, myConceptActionTestChildToWrap2, myConceptActionTestChildWrapper, myConceptActionTestContainer, myConceptActionTestDefaultAbstractChild, myConceptActionTestDefaultChild1, myConceptActionTestDefaultChild2, myConceptActionTestSidetransformAbstractChild, myConceptActionTestSidetransformAddConceptAbstractChild, myConceptActionTestSidetransformAddConceptChild, myConceptActionTestSidetransformAnotherAbstractChild, myConceptActionTestSidetransformAnotherChild1, myConceptActionTestSidetransformAnotherChild2, myConceptActionTestSidetransformAnotherChildCommonSuperConcept, myConceptActionTestSidetransformChild1, myConceptActionTestSidetransformTestAncestor, myConceptActionTestSidetransformTestContainer);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0ab, conceptFqName)) {
      case 0:
        return myConceptActionTestAbstractChild;
      case 1:
        return myConceptActionTestAbstractChildWrapper;
      case 2:
        return myConceptActionTestChild1;
      case 3:
        return myConceptActionTestChild1Child;
      case 4:
        return myConceptActionTestChild1SubConcept;
      case 5:
        return myConceptActionTestChild2;
      case 6:
        return myConceptActionTestChildToWrap1;
      case 7:
        return myConceptActionTestChildToWrap2;
      case 8:
        return myConceptActionTestChildWrapper;
      case 9:
        return myConceptActionTestContainer;
      case 10:
        return myConceptActionTestDefaultAbstractChild;
      case 11:
        return myConceptActionTestDefaultChild1;
      case 12:
        return myConceptActionTestDefaultChild2;
      case 13:
        return myConceptActionTestSidetransformAbstractChild;
      case 14:
        return myConceptActionTestSidetransformAddConceptAbstractChild;
      case 15:
        return myConceptActionTestSidetransformAddConceptChild;
      case 16:
        return myConceptActionTestSidetransformAnotherAbstractChild;
      case 17:
        return myConceptActionTestSidetransformAnotherChild1;
      case 18:
        return myConceptActionTestSidetransformAnotherChild2;
      case 19:
        return myConceptActionTestSidetransformAnotherChildCommonSuperConcept;
      case 20:
        return myConceptActionTestSidetransformChild1;
      case 21:
        return myConceptActionTestSidetransformTestAncestor;
      case 22:
        return myConceptActionTestSidetransformTestContainer;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0ab = new String[]{"jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChild", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestAbstractChildWrapper", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1Child", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild1SubConcept", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChild2", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap1", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildToWrap2", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestChildWrapper", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestContainer", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultAbstractChild", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultChild1", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestDefaultChild2", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAbstractChild", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAddConceptAbstractChild", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAddConceptChild", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherAbstractChild", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChild1", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChild2", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformAnotherChildCommonSuperConcept", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformChild1", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformTestAncestor", "jetbrains.mps.lang.actions.testLanguage.structure.ActionTestSidetransformTestContainer"};
}
