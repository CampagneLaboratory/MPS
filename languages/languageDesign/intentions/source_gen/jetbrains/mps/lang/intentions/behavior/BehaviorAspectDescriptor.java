package jetbrains.mps.lang.intentions.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myIntentionDeclaration__BehaviorDescriptor = new IntentionDeclaration__BehaviorDescriptor();
  private final BHDescriptor myDescriptionBlock__BehaviorDescriptor = new DescriptionBlock__BehaviorDescriptor();
  private final BHDescriptor myIsApplicableBlock__BehaviorDescriptor = new IsApplicableBlock__BehaviorDescriptor();
  private final BHDescriptor myExecuteBlock__BehaviorDescriptor = new ExecuteBlock__BehaviorDescriptor();
  private final BHDescriptor myQueryBlock__BehaviorDescriptor = new QueryBlock__BehaviorDescriptor();
  private final BHDescriptor myParameterizedIntentionDeclaration__BehaviorDescriptor = new ParameterizedIntentionDeclaration__BehaviorDescriptor();
  private final BHDescriptor myParameterizedDescriptionBlock__BehaviorDescriptor = new ParameterizedDescriptionBlock__BehaviorDescriptor();
  private final BHDescriptor myParameterizedExecuteBlock__BehaviorDescriptor = new ParameterizedExecuteBlock__BehaviorDescriptor();
  private final BHDescriptor myBaseIntentionDeclaration__BehaviorDescriptor = new BaseIntentionDeclaration__BehaviorDescriptor();
  private final BHDescriptor myChildFilterFunction__BehaviorDescriptor = new ChildFilterFunction__BehaviorDescriptor();
  private final BHDescriptor myParameter__BehaviorDescriptor = new Parameter__BehaviorDescriptor();
  private final BHDescriptor myIntention__BehaviorDescriptor = new Intention__BehaviorDescriptor();

  private final long[] myConceptBehaviorIds;

  public BehaviorAspectDescriptor() {
    myConceptBehaviorIds = new long[12];
    myConceptBehaviorIds[0] = 0x115b81b652bL;
    myConceptBehaviorIds[1] = 0x115b81bfaa7L;
    myConceptBehaviorIds[2] = 0x115b82b10f5L;
    myConceptBehaviorIds[3] = 0x115b82d36d9L;
    myConceptBehaviorIds[4] = 0x120c89cc719L;
    myConceptBehaviorIds[5] = 0x120cd519c2dL;
    myConceptBehaviorIds[6] = 0x1925e8184af03861L;
    myConceptBehaviorIds[7] = 0x1925e8184af310edL;
    myConceptBehaviorIds[8] = 0x2303633a9c3cc675L;
    myConceptBehaviorIds[9] = 0x323731f511d1c1bbL;
    myConceptBehaviorIds[10] = 0x6688b42d39674b7aL;
    myConceptBehaviorIds[11] = 0x71ffad1474b12a0bL;
  }

  @Deprecated
  @Override
  public BehaviorDescriptor getDescriptor(String fqName) {
    return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
  }

  @Nullable
  @Override
  public BHDescriptor getDescriptor(@NotNull SConceptId conceptId) {
    int behaviorIndex = Arrays.binarySearch(myConceptBehaviorIds, conceptId.getIdValue());
    switch (behaviorIndex) {
      case 0:
        return myIntentionDeclaration__BehaviorDescriptor;
      case 1:
        return myDescriptionBlock__BehaviorDescriptor;
      case 2:
        return myIsApplicableBlock__BehaviorDescriptor;
      case 3:
        return myExecuteBlock__BehaviorDescriptor;
      case 4:
        return myQueryBlock__BehaviorDescriptor;
      case 5:
        return myParameterizedIntentionDeclaration__BehaviorDescriptor;
      case 6:
        return myParameterizedDescriptionBlock__BehaviorDescriptor;
      case 7:
        return myParameterizedExecuteBlock__BehaviorDescriptor;
      case 8:
        return myBaseIntentionDeclaration__BehaviorDescriptor;
      case 9:
        return myChildFilterFunction__BehaviorDescriptor;
      case 10:
        return myParameter__BehaviorDescriptor;
      case 11:
        return myIntention__BehaviorDescriptor;
      default:
        return null;
    }
  }
}
