package jetbrains.mps.lang.intentions.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class MakeSurroundWith_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public MakeSurroundWith_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration";
  }

  public String getPresentation() {
    return "MakeSurroundWith";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.intentions.intentions.MakeSurroundWith_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.intentions.structure.SurroundWithIntentionDeclaration") || SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.intentions.structure.IntentionDeclaration");
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:5a8e1e6d-7386-4281-8e53-bda28bd8edf3(jetbrains.mps.lang.intentions.intentions)", "4203998840477564642");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new MakeSurroundWith_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.intentions.structure.SurroundWithIntentionDeclaration")) {
        return "Make Plain Intention";
      } else {
        return "Make a Surround with Intention";
      }
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode sd;
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.intentions.structure.SurroundWithIntentionDeclaration")) {
        sd = SModelOperations.createNewRootNode(SNodeOperations.getModel(node), "jetbrains.mps.lang.intentions.structure.IntentionDeclaration", null);
      } else {
        sd = SModelOperations.createNewRootNode(SNodeOperations.getModel(node), "jetbrains.mps.lang.intentions.structure.SurroundWithIntentionDeclaration", null);
      }
      SPropertyOperations.set(sd, "name", SPropertyOperations.getString(node, "name"));
      SPropertyOperations.set(sd, "shortDescription", SPropertyOperations.getString(node, "shortDescription"));
      SPropertyOperations.set(sd, "alias", SPropertyOperations.getString(node, "alias"));
      SPropertyOperations.set(sd, "virtualPackage", SPropertyOperations.getString(node, "virtualPackage"));
      SPropertyOperations.set(sd, "isAvailableInChildNodes", "" + (SPropertyOperations.getBoolean(node, "isAvailableInChildNodes")));
      SPropertyOperations.set(sd, "isErrorIntention", "" + (SPropertyOperations.getBoolean(node, "isErrorIntention")));
      SLinkOperations.setTarget(sd, "forConcept", SLinkOperations.getTarget(node, "forConcept", false), false);
      SLinkOperations.setTarget(sd, "descriptionFunction", SLinkOperations.getTarget(node, "descriptionFunction", true), true);
      SLinkOperations.setTarget(sd, "childFilterFunction", SLinkOperations.getTarget(node, "childFilterFunction", true), true);
      SLinkOperations.setTarget(sd, "isApplicableFunction", SLinkOperations.getTarget(node, "isApplicableFunction", true), true);
      SLinkOperations.setTarget(sd, "executeFunction", SLinkOperations.getTarget(node, "executeFunction", true), true);

      SNodeOperations.deleteNode(node);
    }

    public IntentionDescriptor getDescriptor() {
      return MakeSurroundWith_Intention.this;
    }
  }
}
