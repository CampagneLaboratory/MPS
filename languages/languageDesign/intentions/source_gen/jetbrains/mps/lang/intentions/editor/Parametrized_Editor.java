package jetbrains.mps.lang.intentions.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.impl.cellActions.CellAction_Comment;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class Parametrized_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_ohe1er_a(editorContext, node);
  }
  private EditorCell createCollection_ohe1er_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_ohe1er_a");
    editorCell.setBig(true);
    editorCell.setAction(CellActionType.COMMENT, new CellAction_Comment(node));
    editorCell.addEditorCell(this.createConstant_ohe1er_a0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_ohe1er_b0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_ohe1er_c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_ohe1er_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "type PARAMETRIZED");
    editorCell.setCellId("Constant_ohe1er_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_ohe1er_b0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_ohe1er_b0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_ohe1er_a1a(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_ohe1er_b1a(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_ohe1er_a1a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "parameter type");
    editorCell.setCellId("Constant_ohe1er_a1a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_ohe1er_b1a(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new Parametrized_Editor.parameterTypeSingleRoleHandler_ohe1er_b1a(node, MetaAdapterFactory.getContainmentLink(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x8113ff3ea785963L, 0x8113ff3ea790a03L, "parameterType"), editorContext);
    return provider.createCell();
  }
  private class parameterTypeSingleRoleHandler_ohe1er_b1a extends SingleRoleCellProvider {
    public parameterTypeSingleRoleHandler_ohe1er_b1a(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    public EditorCell createChildCell(EditorContext editorContext, SNode child) {
      EditorCell editorCell = super.createChildCell(editorContext, child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    public void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("parameterType");
      }
    }


    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_parameterType");
      installCellInfo(null, editorCell);
      return editorCell;
    }

    protected String getNoTargetText() {
      return "<no " + "parameterType" + ">";
    }

  }
  private EditorCell createCollection_ohe1er_c0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_ohe1er_c0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_ohe1er_a2a(editorContext, node));
    editorCell.addEditorCell(this.createComponent_ohe1er_b2a(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_ohe1er_a2a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "parameter function");
    editorCell.setCellId("Constant_ohe1er_a2a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createComponent_ohe1er_b2a(EditorContext editorContext, SNode node) {
    EditorCell editorCell = editorContext.getCellFactory().createEditorComponentCell(node, "jetbrains.mps.baseLanguage.editor.ClassifierMembers_Component");
    return editorCell;
  }
}
