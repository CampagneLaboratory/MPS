package jetbrains.mps.lang.intentions.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBaseIntentionDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.checkedName.structure.ICheckedNamePolicy", "jetbrains.mps.lang.structure.structure.IConceptAspect").properties("isErrorIntention", "isAvailableInChildNodes").references("forConcept").children(new String[]{"descriptionFunction", "childFilterFunction", "isApplicableFunction", "executeFunction"}, new boolean[]{false, false, false, false}).create();
  /*package*/ final ConceptDescriptor myConceptChildFilterBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ChildFilterBlock").interface_().create();
  /*package*/ final ConceptDescriptor myConceptChildFilterFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ChildFilterFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction", "jetbrains.mps.lang.intentions.structure.ChildFilterBlock").alias("child filter function", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_childNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ConceptFunctionParameter_childNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("childNode", "function parameter").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_node = new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ConceptFunctionParameter_node").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("node", "function parameter").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDescriptionBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.DescriptionBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("description", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExecuteBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ExecuteBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("execute", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIntentionDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.IntentionDeclaration").super_("jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration").parents("jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration").alias("Intention", "").create();
  /*package*/ final ConceptDescriptor myConceptIntentionParameter = new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.IntentionParameter").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("parameter", "intention parameter").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIsApplicableBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.IsApplicableBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("isApplicable", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptParameterizedDescriptionBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ParameterizedDescriptionBlock").super_("jetbrains.mps.lang.intentions.structure.DescriptionBlock").parents("jetbrains.mps.lang.intentions.structure.DescriptionBlock").alias("description", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptParameterizedExecuteBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ParameterizedExecuteBlock").super_("jetbrains.mps.lang.intentions.structure.ExecuteBlock").parents("jetbrains.mps.lang.intentions.structure.ExecuteBlock").alias("execute", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptParameterizedIntentionDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ParameterizedIntentionDeclaration").super_("jetbrains.mps.lang.intentions.structure.IntentionDeclaration").parents("jetbrains.mps.lang.intentions.structure.IntentionDeclaration").children(new String[]{"queryBlock", "descriptionBlock", "executeBlock"}, new boolean[]{false, false, false}).alias("Parameterized Intention", "").create();
  /*package*/ final ConceptDescriptor myConceptQueryBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.QueryBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").children(new String[]{"paramType"}, new boolean[]{false}).alias("parameter", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSurroundWithIntentionDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.SurroundWithIntentionDeclaration").super_("jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration").parents("jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration").alias("Surround-With Intention", "").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBaseIntentionDeclaration, myConceptChildFilterBlock, myConceptChildFilterFunction, myConceptConceptFunctionParameter_childNode, myConceptConceptFunctionParameter_node, myConceptDescriptionBlock, myConceptExecuteBlock, myConceptIntentionDeclaration, myConceptIntentionParameter, myConceptIsApplicableBlock, myConceptParameterizedDescriptionBlock, myConceptParameterizedExecuteBlock, myConceptParameterizedIntentionDeclaration, myConceptQueryBlock, myConceptSurroundWithIntentionDeclaration);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0s, conceptFqName)) {
      case 0:
        return myConceptBaseIntentionDeclaration;
      case 1:
        return myConceptChildFilterBlock;
      case 2:
        return myConceptChildFilterFunction;
      case 3:
        return myConceptConceptFunctionParameter_childNode;
      case 4:
        return myConceptConceptFunctionParameter_node;
      case 5:
        return myConceptDescriptionBlock;
      case 6:
        return myConceptExecuteBlock;
      case 7:
        return myConceptIntentionDeclaration;
      case 8:
        return myConceptIntentionParameter;
      case 9:
        return myConceptIsApplicableBlock;
      case 10:
        return myConceptParameterizedDescriptionBlock;
      case 11:
        return myConceptParameterizedExecuteBlock;
      case 12:
        return myConceptParameterizedIntentionDeclaration;
      case 13:
        return myConceptQueryBlock;
      case 14:
        return myConceptSurroundWithIntentionDeclaration;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0s = new String[]{"jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration", "jetbrains.mps.lang.intentions.structure.ChildFilterBlock", "jetbrains.mps.lang.intentions.structure.ChildFilterFunction", "jetbrains.mps.lang.intentions.structure.ConceptFunctionParameter_childNode", "jetbrains.mps.lang.intentions.structure.ConceptFunctionParameter_node", "jetbrains.mps.lang.intentions.structure.DescriptionBlock", "jetbrains.mps.lang.intentions.structure.ExecuteBlock", "jetbrains.mps.lang.intentions.structure.IntentionDeclaration", "jetbrains.mps.lang.intentions.structure.IntentionParameter", "jetbrains.mps.lang.intentions.structure.IsApplicableBlock", "jetbrains.mps.lang.intentions.structure.ParameterizedDescriptionBlock", "jetbrains.mps.lang.intentions.structure.ParameterizedExecuteBlock", "jetbrains.mps.lang.intentions.structure.ParameterizedIntentionDeclaration", "jetbrains.mps.lang.intentions.structure.QueryBlock", "jetbrains.mps.lang.intentions.structure.SurroundWithIntentionDeclaration"};
}
