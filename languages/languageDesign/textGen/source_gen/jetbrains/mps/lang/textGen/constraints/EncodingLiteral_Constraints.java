package jetbrains.mps.lang.textGen.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.nio.charset.Charset;

public class EncodingLiteral_Constraints extends BaseConstraintsDescriptor {
  public EncodingLiteral_Constraints() {
    super("jetbrains.mps.lang.textGen.structure.EncodingLiteral");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("encoding", new BasePropertyConstraintsDescriptor("encoding", this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }

      @Override
      public boolean validateValue(SNode node, String propertyValue, IScope scope) {
        String propertyName = "encoding";
        if (isEmpty_p9uqyx_a0a0b0b0a1a0b0b(trim_p9uqyx_a0a0a1a1a0b0a1a1((SPropertyOperations.getString(propertyValue))))) {
          return false;
        }
        if ((SPropertyOperations.getString(propertyValue)).equals("binary")) {
          return true;
        }
        try {
          Charset.forName((SPropertyOperations.getString(propertyValue)));
          return true;
        } catch (IllegalArgumentException uc) {
          return false;
        }
      }
    });
    return properties;
  }

  public static boolean isEmpty_p9uqyx_a0a0b0b0a1a0b0b(String str) {
    return str == null || str.length() == 0;
  }

  public static String trim_p9uqyx_a0a0a1a1a0b0a1a1(String str) {
    return (str == null ?
      null :
      str.trim()
    );
  }
}
