package jetbrains.mps.lang.textGen.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.AbstractAppendPart", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.AbstractTextGenDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.AbstractTextGenParameter", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.AppendOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.BufferParameter", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.CollectionAppendPart", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.ConceptTextGenDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.ConstantStringAppendPart", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.ContextParameter", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.DecreaseDepthOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.EncodingDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.EncodingDeclarationBase", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.EncodingLiteral", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.ExtensionDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.FilenameFunction", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.FoundErrorOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.GenerateTextDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.IncreaseDepthOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.IndentBufferOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.InfoAppendPart", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.LanguageTextGenDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.NewLineAppendPart", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.NodeAppendPart", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.NodeParameter", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.OperationCall", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.OperationDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.ReferenceAppendPart", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.SimpleTextGenOperation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.UtilityMethodCall", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.UtilityMethodDeclaration", null);
    myFqNameToConcept.put("jetbrains.mps.lang.textGen.structure.WithIndentOperation", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.AbstractAppendPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.AbstractTextGenDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier").abstract_().create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.AbstractTextGenParameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.AppendOperation").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"part"}, new boolean[]{true}).alias("append", "").staticScope(StaticScope.NONE).create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.BufferParameter").super_("jetbrains.mps.lang.textGen.structure.AbstractTextGenParameter").parents("jetbrains.mps.lang.textGen.structure.AbstractTextGenParameter").alias("buffer", "").staticScope(StaticScope.NONE).create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.CollectionAppendPart").super_("jetbrains.mps.lang.textGen.structure.AbstractAppendPart").parents("jetbrains.mps.lang.textGen.structure.AbstractAppendPart").properties("separator", "withSeparator").children(new String[]{"list"}, new boolean[]{false}).alias("$list{", "collection").create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.ConceptTextGenDeclaration").super_("jetbrains.mps.lang.textGen.structure.AbstractTextGenDeclaration").parents("jetbrains.mps.lang.textGen.structure.AbstractTextGenDeclaration", "jetbrains.mps.lang.structure.structure.IConceptAspect").references("conceptDeclaration").children(new String[]{"extension", "encoding", "textGenBlock", "filename"}, new boolean[]{false, false, false, false}).create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.ConstantStringAppendPart").super_("jetbrains.mps.lang.textGen.structure.AbstractAppendPart").parents("jetbrains.mps.lang.textGen.structure.AbstractAppendPart").properties("value", "withIndent").alias("constant", "constant string").create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.ContextParameter").super_("jetbrains.mps.lang.textGen.structure.AbstractTextGenParameter").parents("jetbrains.mps.lang.textGen.structure.AbstractTextGenParameter").alias("context", "").staticScope(StaticScope.NONE).create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.DecreaseDepthOperation").super_("jetbrains.mps.lang.textGen.structure.SimpleTextGenOperation").parents("jetbrains.mps.lang.textGen.structure.SimpleTextGenOperation").alias("decrease depth", "").staticScope(StaticScope.NONE).create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.EncodingDeclaration").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction", "jetbrains.mps.lang.textGen.structure.EncodingDeclarationBase").alias("encoding", "").staticScope(StaticScope.NONE).create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.EncodingDeclarationBase").interface_().create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.EncodingLiteral").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.textGen.structure.EncodingDeclarationBase").properties("encoding").alias("encoding literal", "").create();
        break;
      case 13:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.ExtensionDeclaration").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("extension", "").staticScope(StaticScope.NONE).create();
        break;
      case 14:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.FilenameFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").final_().alias("filename", "name of output file").create();
        break;
      case 15:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.FoundErrorOperation").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"text"}, new boolean[]{false}).alias("found error", "").staticScope(StaticScope.NONE).create();
        break;
      case 16:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.GenerateTextDeclaration").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("do generate text", "").staticScope(StaticScope.NONE).create();
        break;
      case 17:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.IncreaseDepthOperation").super_("jetbrains.mps.lang.textGen.structure.SimpleTextGenOperation").parents("jetbrains.mps.lang.textGen.structure.SimpleTextGenOperation").alias("increase depth", "").staticScope(StaticScope.NONE).create();
        break;
      case 18:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.IndentBufferOperation").super_("jetbrains.mps.lang.textGen.structure.SimpleTextGenOperation").parents("jetbrains.mps.lang.textGen.structure.SimpleTextGenOperation").alias("indent buffer", "").staticScope(StaticScope.NONE).create();
        break;
      case 19:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.InfoAppendPart").super_("jetbrains.mps.lang.textGen.structure.AbstractAppendPart").parents("jetbrains.mps.lang.textGen.structure.AbstractAppendPart").children(new String[]{"value"}, new boolean[]{false}).alias("$resolve{", "resolve info").create();
        break;
      case 20:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.LanguageTextGenDeclaration").super_("jetbrains.mps.lang.textGen.structure.AbstractTextGenDeclaration").parents("jetbrains.mps.lang.textGen.structure.AbstractTextGenDeclaration").references("baseTextGen").children(new String[]{"operation", "function"}, new boolean[]{true, true}).create();
        break;
      case 21:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.NewLineAppendPart").super_("jetbrains.mps.lang.textGen.structure.AbstractAppendPart").parents("jetbrains.mps.lang.textGen.structure.AbstractAppendPart").alias("\\n", "new line").create();
        break;
      case 22:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.NodeAppendPart").super_("jetbrains.mps.lang.textGen.structure.AbstractAppendPart").parents("jetbrains.mps.lang.textGen.structure.AbstractAppendPart").properties("withIndent").children(new String[]{"value"}, new boolean[]{false}).alias("${", "node or property").create();
        break;
      case 23:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.NodeParameter").super_("jetbrains.mps.lang.textGen.structure.AbstractTextGenParameter").parents("jetbrains.mps.lang.textGen.structure.AbstractTextGenParameter").alias("node", "").staticScope(StaticScope.NONE).create();
        break;
      case 24:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.OperationCall").super_("jetbrains.mps.lang.textGen.structure.AbstractAppendPart").parents("jetbrains.mps.lang.textGen.structure.AbstractAppendPart").references("function").children(new String[]{"parameter"}, new boolean[]{true}).create();
        break;
      case 25:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.OperationDeclaration").super_("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").properties("operationName").alias("new operation", "").create();
        break;
      case 26:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.ReferenceAppendPart").super_("jetbrains.mps.lang.textGen.structure.AbstractAppendPart").parents("jetbrains.mps.lang.textGen.structure.AbstractAppendPart").properties("uniqNameInFile").children(new String[]{"reference"}, new boolean[]{false}).alias("$ref{", "reference").create();
        break;
      case 27:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.SimpleTextGenOperation").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").abstract_().staticScope(StaticScope.NONE).create();
        break;
      case 28:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.UtilityMethodCall").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("function").children(new String[]{"parameter"}, new boolean[]{true}).staticScope(StaticScope.NONE).create();
        break;
      case 29:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.UtilityMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").alias("new private function", "").create();
        break;
      case 30:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.textGen.structure.WithIndentOperation").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"list"}, new boolean[]{false}).alias("with indent {", "code block").staticScope(StaticScope.NONE).create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.lang.textGen.structure.AbstractAppendPart", "jetbrains.mps.lang.textGen.structure.AbstractTextGenDeclaration", "jetbrains.mps.lang.textGen.structure.AbstractTextGenParameter", "jetbrains.mps.lang.textGen.structure.AppendOperation", "jetbrains.mps.lang.textGen.structure.BufferParameter", "jetbrains.mps.lang.textGen.structure.CollectionAppendPart", "jetbrains.mps.lang.textGen.structure.ConceptTextGenDeclaration", "jetbrains.mps.lang.textGen.structure.ConstantStringAppendPart", "jetbrains.mps.lang.textGen.structure.ContextParameter", "jetbrains.mps.lang.textGen.structure.DecreaseDepthOperation", "jetbrains.mps.lang.textGen.structure.EncodingDeclaration", "jetbrains.mps.lang.textGen.structure.EncodingDeclarationBase", "jetbrains.mps.lang.textGen.structure.EncodingLiteral", "jetbrains.mps.lang.textGen.structure.ExtensionDeclaration", "jetbrains.mps.lang.textGen.structure.FilenameFunction", "jetbrains.mps.lang.textGen.structure.FoundErrorOperation", "jetbrains.mps.lang.textGen.structure.GenerateTextDeclaration", "jetbrains.mps.lang.textGen.structure.IncreaseDepthOperation", "jetbrains.mps.lang.textGen.structure.IndentBufferOperation", "jetbrains.mps.lang.textGen.structure.InfoAppendPart", "jetbrains.mps.lang.textGen.structure.LanguageTextGenDeclaration", "jetbrains.mps.lang.textGen.structure.NewLineAppendPart", "jetbrains.mps.lang.textGen.structure.NodeAppendPart", "jetbrains.mps.lang.textGen.structure.NodeParameter", "jetbrains.mps.lang.textGen.structure.OperationCall", "jetbrains.mps.lang.textGen.structure.OperationDeclaration", "jetbrains.mps.lang.textGen.structure.ReferenceAppendPart", "jetbrains.mps.lang.textGen.structure.SimpleTextGenOperation", "jetbrains.mps.lang.textGen.structure.UtilityMethodCall", "jetbrains.mps.lang.textGen.structure.UtilityMethodDeclaration", "jetbrains.mps.lang.textGen.structure.WithIndentOperation"};
}
