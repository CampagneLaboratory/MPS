package jetbrains.mps.lang.dataFlow.analyzers.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAnalysisDirection = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalysisDirection").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptAnalyzer = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.Analyzer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"initialFunction", "mergeFunction", "funFunction", "direction", "latticeElementType", "instruction"}, new boolean[]{false, false, false, false, false, true}).create();
  /*package*/ final ConceptDescriptor myConceptAnalyzerFunFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerFunFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("fun", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAnalyzerFunParameterInput = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerFunParameterInput").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("input", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAnalyzerFunParameterProgramState = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerFunParameterProgramState").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("state", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAnalyzerFunctionResultType = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerFunctionResultType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("lattice element type", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAnalyzerInitialFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerInitialFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("initial", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAnalyzerMergeFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerMergeFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("merge", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAnalyzerMergeParameterInput = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerMergeParameterInput").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("input", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAnalyzerParameterProgram = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerParameterProgram").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("program", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAnalyzerRunnerAnalyzeOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerRunnerAnalyzeOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").alias("analyze", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAnalyzerRunnerCreator = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerRunnerCreator").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("analyzer").children(new String[]{"nodeToCheck"}, new boolean[]{false}).alias("runner", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAnalyzerRunnerType = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerRunnerType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("analyzerRunner", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptApplicableCondition = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableCondition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptApplicableNodeReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableNodeReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("applicableNode").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBackwardDirection = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.BackwardDirection").super_("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalysisDirection").parents("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalysisDirection").alias("backward", "").create();
  /*package*/ final ConceptDescriptor myConceptConceptCondition = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.ConceptCondition").super_("jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableCondition").parents("jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableCondition", "jetbrains.mps.lang.core.structure.INamedConcept").references("concept").alias("concept =", "").create();
  /*package*/ final ConceptDescriptor myConceptEmitInstruction = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.EmitInstruction").super_("jetbrains.mps.lang.pattern.structure.ActionStatement").parents("jetbrains.mps.lang.pattern.structure.ActionStatement").children(new String[]{"instructionRef", "target", "position"}, new boolean[]{false, false, false}).alias("insert", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptForwardDirection = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.ForwardDirection").super_("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalysisDirection").parents("jetbrains.mps.lang.dataFlow.analyzers.structure.AnalysisDirection").alias("forward", "").create();
  /*package*/ final ConceptDescriptor myConceptInsertAfterPosition = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.InsertAfterPosition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").create();
  /*package*/ final ConceptDescriptor myConceptInsertBeforePosition = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.InsertBeforePosition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").create();
  /*package*/ final ConceptDescriptor myConceptInsertPosition = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.InsertPosition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").create();
  /*package*/ final ConceptDescriptor myConceptInstruction = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.Instruction").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"parameter"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptInstructionParameter = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.InstructionParameter").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"type"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptInstructionReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.InstructionReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("instruction").children(new String[]{"argument"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptIsOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.IsOperation").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("instruction").children(new String[]{"left"}, new boolean[]{false}).alias("is", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPatternCondition = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.PatternCondition").super_("jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableCondition").parents("jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableCondition").children(new String[]{"pattern"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptRule = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.Rule").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").references("analyzer").children(new String[]{"actions", "condition"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptRuleReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.dataFlow.analyzers.structure.RuleReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("rule").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAnalysisDirection, myConceptAnalyzer, myConceptAnalyzerFunFunction, myConceptAnalyzerFunParameterInput, myConceptAnalyzerFunParameterProgramState, myConceptAnalyzerFunctionResultType, myConceptAnalyzerInitialFunction, myConceptAnalyzerMergeFunction, myConceptAnalyzerMergeParameterInput, myConceptAnalyzerParameterProgram, myConceptAnalyzerRunnerAnalyzeOperation, myConceptAnalyzerRunnerCreator, myConceptAnalyzerRunnerType, myConceptApplicableCondition, myConceptApplicableNodeReference, myConceptBackwardDirection, myConceptConceptCondition, myConceptEmitInstruction, myConceptForwardDirection, myConceptInsertAfterPosition, myConceptInsertBeforePosition, myConceptInsertPosition, myConceptInstruction, myConceptInstructionParameter, myConceptInstructionReference, myConceptIsOperation, myConceptPatternCondition, myConceptRule, myConceptRuleReference);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0gb, conceptFqName)) {
      case 0:
        return myConceptAnalysisDirection;
      case 1:
        return myConceptAnalyzer;
      case 2:
        return myConceptAnalyzerFunFunction;
      case 3:
        return myConceptAnalyzerFunParameterInput;
      case 4:
        return myConceptAnalyzerFunParameterProgramState;
      case 5:
        return myConceptAnalyzerFunctionResultType;
      case 6:
        return myConceptAnalyzerInitialFunction;
      case 7:
        return myConceptAnalyzerMergeFunction;
      case 8:
        return myConceptAnalyzerMergeParameterInput;
      case 9:
        return myConceptAnalyzerParameterProgram;
      case 10:
        return myConceptAnalyzerRunnerAnalyzeOperation;
      case 11:
        return myConceptAnalyzerRunnerCreator;
      case 12:
        return myConceptAnalyzerRunnerType;
      case 13:
        return myConceptApplicableCondition;
      case 14:
        return myConceptApplicableNodeReference;
      case 15:
        return myConceptBackwardDirection;
      case 16:
        return myConceptConceptCondition;
      case 17:
        return myConceptEmitInstruction;
      case 18:
        return myConceptForwardDirection;
      case 19:
        return myConceptInsertAfterPosition;
      case 20:
        return myConceptInsertBeforePosition;
      case 21:
        return myConceptInsertPosition;
      case 22:
        return myConceptInstruction;
      case 23:
        return myConceptInstructionParameter;
      case 24:
        return myConceptInstructionReference;
      case 25:
        return myConceptIsOperation;
      case 26:
        return myConceptPatternCondition;
      case 27:
        return myConceptRule;
      case 28:
        return myConceptRuleReference;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0gb = new String[]{"jetbrains.mps.lang.dataFlow.analyzers.structure.AnalysisDirection", "jetbrains.mps.lang.dataFlow.analyzers.structure.Analyzer", "jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerFunFunction", "jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerFunParameterInput", "jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerFunParameterProgramState", "jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerFunctionResultType", "jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerInitialFunction", "jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerMergeFunction", "jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerMergeParameterInput", "jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerParameterProgram", "jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerRunnerAnalyzeOperation", "jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerRunnerCreator", "jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerRunnerType", "jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableCondition", "jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableNodeReference", "jetbrains.mps.lang.dataFlow.analyzers.structure.BackwardDirection", "jetbrains.mps.lang.dataFlow.analyzers.structure.ConceptCondition", "jetbrains.mps.lang.dataFlow.analyzers.structure.EmitInstruction", "jetbrains.mps.lang.dataFlow.analyzers.structure.ForwardDirection", "jetbrains.mps.lang.dataFlow.analyzers.structure.InsertAfterPosition", "jetbrains.mps.lang.dataFlow.analyzers.structure.InsertBeforePosition", "jetbrains.mps.lang.dataFlow.analyzers.structure.InsertPosition", "jetbrains.mps.lang.dataFlow.analyzers.structure.Instruction", "jetbrains.mps.lang.dataFlow.analyzers.structure.InstructionParameter", "jetbrains.mps.lang.dataFlow.analyzers.structure.InstructionReference", "jetbrains.mps.lang.dataFlow.analyzers.structure.IsOperation", "jetbrains.mps.lang.dataFlow.analyzers.structure.PatternCondition", "jetbrains.mps.lang.dataFlow.analyzers.structure.Rule", "jetbrains.mps.lang.dataFlow.analyzers.structure.RuleReference"};
}
