package jetbrains.mps.lang.generator.crossmodel.generator.test;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.IfMacroContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;

@Generated
public class QueriesGenerated {
  public final boolean NEEDS_OPCONTEXT = false;

  public static boolean baseMappingRule_Condition_2500545923215242436(final BaseMappingRuleContext _context) {
    return SPropertyOperations.hasValue(_context.getNode(), "kind", "1", "1");
  }

  public static boolean baseMappingRule_Condition_2500545923215242447(final BaseMappingRuleContext _context) {
    return SPropertyOperations.hasValue(_context.getNode(), "kind", "2", "1");
  }

  public static Object propertyMacro_GetPropertyValue_4355167635272123028(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_4355167635272142236(final PropertyMacroContext _context) {
    return "get_" + SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_4355167635272161393(final PropertyMacroContext _context) {
    return "set_" + SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_4355167635272259509(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object referenceMacro_GetReferent_8915420221430192739(final ReferenceMacroContext _context) {
    return _context.getOutputNodeProxy(SLinkOperations.getTarget(_context.getNode(), "use1", false), "MethodLabel");
  }

  public static Object referenceMacro_GetReferent_8915420221430202755(final ReferenceMacroContext _context) {
    return _context.getOutputNodeProxy(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "use1", false), "owner", false), "ClassLabel");
  }

  public static Object referenceMacro_GetReferent_8915420221430196108(final ReferenceMacroContext _context) {
    return _context.getOutputNodeProxy(SLinkOperations.getTarget(_context.getNode(), "use2", false), "MethodLabel");
  }

  public static Object referenceMacro_GetReferent_8915420221430205023(final ReferenceMacroContext _context) {
    return _context.getOutputNodeProxy(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "use2", false), "owner", false), "ClassLabel");
  }

  public static Object referenceMacro_GetReferent_8915420221430199422(final ReferenceMacroContext _context) {
    return _context.getOutputNodeProxy(SLinkOperations.getTarget(_context.getNode(), "use3", false), "MethodLabel");
  }

  public static Object referenceMacro_GetReferent_8915420221430207289(final ReferenceMacroContext _context) {
    return _context.getOutputNodeProxy(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "use3", false), "owner", false), "ClassLabel");
  }

  public static boolean ifMacro_Condition_8915420221430180396(final IfMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "use1", false) != null;
  }

  public static boolean ifMacro_Condition_8915420221430184882(final IfMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "use2", false) != null;
  }

  public static boolean ifMacro_Condition_8915420221430186144(final IfMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "use3", false) != null;
  }

  public static Iterable<SNode> sourceNodesQuery_4355167635272269705(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "entries", true);
  }
}
