package jetbrains.mps.lang.descriptor.generator.template.utils;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.generator.template.TemplateQueryContext;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModuleRepositoryFacade;

public class LanguageRuntimeGeneratorUtils {
  public static boolean isAspectOfLanguage(SNode modelReference, LanguageAspect aspect, TemplateQueryContext genContext, final SAbstractConcept... rootConcepts) {
    SModel aspectModel = getAspectModel(modelReference, aspect, genContext);
    if (aspectModel == null) {
      return false;
    }
    List<SNode> roots = SModelOperations.roots(((SModel) aspectModel), null);
    return (rootConcepts.length == 0 ? ListSequence.fromList(roots).isNotEmpty() : ListSequence.fromList(roots).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        for (SAbstractConcept rootConcept : rootConcepts) {
          if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(it)), SNodeOperations.asSConcept(rootConcept))) {
            return true;
          }
        }
        return false;
      }
    }) != null);
  }
  public static boolean hasManualEditorAspectDescriptor(SNode modelReference, TemplateQueryContext genContext) {
    SModel editorModel = getAspectModel(modelReference, LanguageAspect.EDITOR, genContext);
    if (editorModel == null) {
      return false;
    }
    List<SNode> roots = SModelOperations.roots(((SModel) editorModel), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"));
    return ListSequence.fromList(roots).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return "EditorAspectDescriptorImpl".equals(SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
      }
    });
  }
  private static SModel getAspectModel(SNode modelReference, LanguageAspect aspect, TemplateQueryContext genContext) {
    SNode language = SNodeOperations.cast(SNodeOperations.getParent(modelReference), MetaAdapterFactory.getConcept(0x86ef829012bb4ca7L, 0x947f093788f263a9L, 0x5869770da61dfe1fL, "jetbrains.mps.lang.project.structure.Language"));
    if (language == null) {
      genContext.showErrorMessage(modelReference, "Parent of ModelReference is not a Language: " + SPropertyOperations.getString(modelReference, MetaAdapterFactory.getProperty(0x86ef829012bb4ca7L, 0x947f093788f263a9L, 0x5869770da61dfe27L, 0x5869770da61dfe2eL, "qualifiedName")));
      return null;
    }
    SModuleReference moduleReference = PersistenceFacade.getInstance().createModuleReference(BehaviorReflection.invokeVirtual(String.class, language, "virtual_getModuleReference_9020561928507315628", new Object[]{}));
    Language languageModule = ModuleRepositoryFacade.getInstance().getModule(moduleReference, Language.class);
    if (languageModule == null) {
      genContext.showErrorMessage(language, "No language in repository: " + SPropertyOperations.getString(language, MetaAdapterFactory.getProperty(0x86ef829012bb4ca7L, 0x947f093788f263a9L, 0x5869770da61dfe1eL, 0x5869770da61dfe23L, "namespace")));
      return null;
    }
    SModel aspectModel = aspect.get(languageModule);
    return (aspectModel == null || !(aspectModel.getModelId().toString().equals(SPropertyOperations.getString(modelReference, MetaAdapterFactory.getProperty(0x86ef829012bb4ca7L, 0x947f093788f263a9L, 0x5869770da61dfe27L, 0x5869770da61dfe2dL, "uuid")))) ? null : aspectModel);
  }
}
