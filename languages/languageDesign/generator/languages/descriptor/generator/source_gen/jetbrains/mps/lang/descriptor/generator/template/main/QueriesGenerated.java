package jetbrains.mps.lang.descriptor.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.template.CreateRootRuleContext;
import jetbrains.mps.util.SNodeOperations;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.descriptor.generator.template.utils.LanguageRuntimeGeneratorUtils;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.project.structure.modules.ModuleReference;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.behavior.ClassConcept_Behavior;
import jetbrains.mps.generator.template.IfMacroContext;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.SModelStereotype;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.lang.project.behavior.ModelReference_Behavior;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import java.util.Collections;
import jetbrains.mps.generator.impl.plan.ModelContentUtil;
import jetbrains.mps.generator.template.TemplateQueryContextWithMacro;
import jetbrains.mps.generator.runtime.TemplateModel;
import jetbrains.mps.generator.runtime.TemplateModule;

@Generated
public class QueriesGenerated {
  public final boolean NEEDS_OPCONTEXT = false;

  public static boolean createRootRule_Condition_8780540425167326385(final CreateRootRuleContext _context) {
    return SNodeOperations.getModelStereotype(_context.getOriginalInputModel()).equals("descriptor");
  }

  public static boolean baseMappingRule_Condition_1820665478710839841(final BaseMappingRuleContext _context) {
    return SPropertyOperations.hasValue(_context.getNode(), "type", "strictly_before", "strictly_before");
  }

  public static boolean baseMappingRule_Condition_1820665478710839910(final BaseMappingRuleContext _context) {
    return SPropertyOperations.hasValue(_context.getNode(), "type", "before_or_together", "strictly_before");
  }

  public static boolean baseMappingRule_Condition_2643213347103793267(final BaseMappingRuleContext _context) {
    return SPropertyOperations.hasValue(_context.getNode(), "type", "strictly_after", "strictly_before");
  }

  public static boolean baseMappingRule_Condition_2643213347103793295(final BaseMappingRuleContext _context) {
    return SPropertyOperations.hasValue(_context.getNode(), "type", "after_or_together", "strictly_before");
  }

  public static boolean baseMappingRule_Condition_6655394244919371015(final BaseMappingRuleContext _context) {
    return SPropertyOperations.getBoolean(_context.getNode(), "generateTemplates");
  }

  public static boolean baseMappingRule_Condition_1570228009929814973(final BaseMappingRuleContext _context) {
    return LanguageRuntimeGeneratorUtils.isAspectOfLanguage(_context.getNode(), LanguageAspect.EDITOR, _context, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration"), SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.ConceptEditorContextHints")) || LanguageRuntimeGeneratorUtils.hasManualEditorAspectDescriptor(_context.getNode(), _context);
  }

  public static boolean baseMappingRule_Condition_4565427742314546853(final BaseMappingRuleContext _context) {
    return LanguageRuntimeGeneratorUtils.isAspectOfLanguage(_context.getNode(), LanguageAspect.EDITOR, _context, SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration"), SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.editor.structure.ConceptEditorContextHints")) || LanguageRuntimeGeneratorUtils.hasManualEditorAspectDescriptor(_context.getNode(), _context);
  }

  public static Object propertyMacro_GetPropertyValue_9020561928507315549(final PropertyMacroContext _context) {
    return BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(_context.getNode(), "language", true), "virtual_getModuleReference_9020561928507315628", new Object[]{});
  }

  public static Object propertyMacro_GetPropertyValue_2229091780083882944(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "qualifiedName");
  }

  public static Object propertyMacro_GetPropertyValue_5102832340571708655(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "language", true), "namespace");
  }

  public static Object propertyMacro_GetPropertyValue_5828571963818937562(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "language", true), "namespace") + ".typesystem.TypesystemDescriptor";
  }

  public static Object propertyMacro_GetPropertyValue_2838795720286867776(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "language", true), "namespace") + ".findUsages.FindUsagesDescriptor";
  }

  public static Object propertyMacro_GetPropertyValue_5554116809065233243(final PropertyMacroContext _context) {
    return BehaviorReflection.invokeVirtual(String.class, _context.getNode(), "virtual_getModuleReference_9020561928507315628", new Object[]{});
  }

  public static Object propertyMacro_GetPropertyValue_1820665478710840122(final PropertyMacroContext _context) {
    // TODO 
    return new ModuleReference(SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "generator", true), "qualifiedName"), SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "generator", true), "uuid")).toString();
  }

  public static Object propertyMacro_GetPropertyValue_1820665478710840070(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "modelUID");
  }

  public static Object propertyMacro_GetPropertyValue_1820665478710840073(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "nodeID");
  }

  public static Object propertyMacro_GetPropertyValue_1698302279987411159(final PropertyMacroContext _context) {
    SNode l = jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.cast(jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.lang.project.structure.Language");
    return (ListSequence.fromList(SLinkOperations.getTargets(l, "generator", true)).count() == 1 ? "Generator" : "Generator" + ListSequence.fromList(SLinkOperations.getTargets(l, "generator", true)).indexOf(_context.getNode()));
  }

  public static Object propertyMacro_GetPropertyValue_7633657384060768610(final PropertyMacroContext _context) {
    return BehaviorReflection.invokeVirtual(String.class, _context.getNode(), "virtual_getModuleReference_9020561928507315628", new Object[]{});
  }

  public static Object propertyMacro_GetPropertyValue_3829836699771176869(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "qualifiedName") + ".TemplateModelImpl";
  }

  public static Object propertyMacro_GetPropertyValue_1250389701475344482(final PropertyMacroContext _context) {
    SModule m = MPSModuleRepository.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference(BehaviorReflection.invokeVirtual(String.class, _context.getNode(), "virtual_getModuleReference_1250389701475344624", new Object[]{})));
    if (m instanceof Generator) {
      Generator g = (Generator) m;
      return g.getSourceLanguage().getModuleName() + "/" + g.getModuleName();
    } else {
      _context.showErrorMessage(_context.getNode(), "referenced generator is not available: " + _context.getNode());
      return "????";
    }
  }

  public static Object propertyMacro_GetPropertyValue_1250389701475432571(final PropertyMacroContext _context) {
    return _context.getNode().getProperty("aa");
  }

  public static Object propertyMacro_GetPropertyValue_5102832340571646536(final PropertyMacroContext _context) {
    SNode l = jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.cast(jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getParent(_context.getNode()), "jetbrains.mps.lang.project.structure.Language");
    return SPropertyOperations.getString(l, "namespace") + "/" + ((isEmptyString(SPropertyOperations.getString(_context.getNode(), "name")) ? "<no name>" : SPropertyOperations.getString(_context.getNode(), "name")));
  }

  public static Object propertyMacro_GetPropertyValue_4565427742315554124(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "qualifiedName") + ".EditorAspectDescriptorImpl";
  }

  public static Object propertyMacro_GetPropertyValue_4565427742314939782(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "qualifiedName") + ".EditorAspectDescriptorImpl";
  }

  public static Object referenceMacro_GetReferent_5554116809065233210(final ReferenceMacroContext _context) {
    return Sequence.fromIterable(ClassConcept_Behavior.call_constructors_5292274854859503373(_context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "generator.descriptor"))).first();
  }

  public static Object referenceMacro_GetReferent_4565427742316037865(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "aspect.descriptor.field");
  }

  public static Object referenceMacro_GetReferent_4565427742316079240(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "aspect.descriptor.field");
  }

  public static Object referenceMacro_GetReferent_4565427742316090271(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "aspect.descriptor.field");
  }

  public static boolean ifMacro_Condition_5828571963818937566(final IfMacroContext _context) {
    SModuleReference ref = PersistenceFacade.getInstance().createModuleReference(BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(_context.getNode(), "language", true), "virtual_getModuleReference_9020561928507315628", new Object[]{}));
    Language l = ModuleRepositoryFacade.getInstance().getModule(ref, Language.class);
    if (l == null) {
      _context.showErrorMessage(SLinkOperations.getTarget(_context.getNode(), "language", true), "No language in repository: " + SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "language", true), "namespace"));
      return false;
    }
    SModel ts = LanguageAspect.TYPESYSTEM.get(l);
    if (ts == null) {
      return false;
    }
    SModel m = ts;
    if (m == null) {
      _context.showErrorMessage(SLinkOperations.getTarget(_context.getNode(), "language", true), "Cannot load model: " + SNodeOperations.getModelLongName(ts));
      return false;
    }
    return ListSequence.fromList(SModelOperations.getRoots(m, null)).isNotEmpty();
  }

  public static boolean ifMacro_Condition_2838795720286867781(final IfMacroContext _context) {
    SModuleReference ref = PersistenceFacade.getInstance().createModuleReference(BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(_context.getNode(), "language", true), "virtual_getModuleReference_9020561928507315628", new Object[]{}));
    Language l = ModuleRepositoryFacade.getInstance().getModule(ref, Language.class);
    if (l == null) {
      _context.showErrorMessage(SLinkOperations.getTarget(_context.getNode(), "language", true), "No language in repository: " + SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "language", true), "namespace"));
      return false;
    }
    SModel ts = LanguageAspect.FIND_USAGES.get(l);
    if (ts == null) {
      return false;
    }
    SModel m = ts;
    if (m == null) {
      _context.showErrorMessage(SLinkOperations.getTarget(_context.getNode(), "language", true), "Cannot load model: " + SNodeOperations.getModelLongName(ts));
      return false;
    }
    return ListSequence.fromList(SModelOperations.getRoots(m, "jetbrains.mps.lang.findUsages.structure.FinderDeclaration")).isNotEmpty();
  }

  public static boolean ifMacro_Condition_5554116809065233232(final IfMacroContext _context) {
    return SPropertyOperations.getBoolean(_context.getNode(), "generateTemplates");
  }

  public static boolean ifMacro_Condition_5554116809065233262(final IfMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "language", true), "generator", true)).isNotEmpty();
  }

  public static boolean ifMacro_Condition_1820665478710807083(final IfMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "priorityRules", true)).isNotEmpty();
  }

  public static boolean ifMacro_Condition_6655394244919403419(final IfMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "model", true)).isNotEmpty();
  }

  public static boolean ifMacro_Condition_1250389701475281189(final IfMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "depGenerators", true)).isNotEmpty();
  }

  public static boolean ifMacro_Condition_1820665478710839778(final IfMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "priorityRules", true)).isNotEmpty();
  }

  public static boolean ifMacro_Condition_3829836699770777506(final IfMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "model", true)).isNotEmpty();
  }

  public static boolean ifMacro_Condition_1250389701475344465(final IfMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "depGenerators", true)).isNotEmpty();
  }

  public static boolean ifMacro_Condition_6655394244919461209(final IfMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "model", true)).isNotEmpty();
  }

  public static boolean ifMacro_Condition_1820665478710839798(final IfMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "priorityRules", true)).isNotEmpty();
  }

  public static boolean ifMacro_Condition_1250389701475344489(final IfMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "depGenerators", true)).isNotEmpty();
  }

  public static SNode sourceNodeQuery_1820665478710839875(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "left", true);
  }

  public static SNode sourceNodeQuery_1820665478710839879(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "right", true);
  }

  public static SNode sourceNodeQuery_1820665478710839959(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "left", true);
  }

  public static SNode sourceNodeQuery_1820665478710839967(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "right", true);
  }

  public static SNode sourceNodeQuery_2643213347103793325(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "left", true);
  }

  public static SNode sourceNodeQuery_2643213347103793333(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "right", true);
  }

  public static SNode sourceNodeQuery_2643213347103793342(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "left", true);
  }

  public static SNode sourceNodeQuery_2643213347103793350(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "right", true);
  }

  public static SNode sourceNodeQuery_1820665478710839976(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "left", true);
  }

  public static SNode sourceNodeQuery_1820665478710839984(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "right", true);
  }

  public static SNode sourceNodeQuery_1820665478710840112(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "innerRef", true);
  }

  public static Iterable<SNode> sourceNodesQuery_2229091780083588954(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "language", true), "extendedLanguages", true);
  }

  public static Iterable<SNode> sourceNodesQuery_1570228009930646079(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "language", true), "model", true);
  }

  public static Iterable<SNode> sourceNodesQuery_5554116809065233223(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "language", true), "generator", true);
  }

  public static Iterable<SNode> sourceNodesQuery_8131497994928406547(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "language", true), "model", true);
  }

  public static Iterable<SNode> sourceNodesQuery_1820665478710840047(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "refs", true);
  }

  public static Iterable<SNode> sourceNodesQuery_1820665478710839750(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "priorityRules", true);
  }

  public static Iterable<SNode> sourceNodesQuery_3829836699771395556(final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "model", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return eq_x583g4_a0a0a0a0a0a0a0ic(SPropertyOperations.getString(it, "stereotype"), SModelStereotype.GENERATOR);
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        SModelReference ref = PersistenceFacade.getInstance().createModelReference(ModelReference_Behavior.call_getModelReference_6236774123822284799(it));
        SModel descriptor = SModelRepository.getInstance().getModelDescriptor(ref);
        if (descriptor == null) {
          return false;
        }
        SModel m = descriptor;
        if (m == null) {
          return false;
        }
        return ListSequence.fromList(SModelOperations.getRoots(m, "jetbrains.mps.lang.generator.structure.TemplateSwitch")).isNotEmpty() || ListSequence.fromList(SModelOperations.getRoots(m, "jetbrains.mps.lang.generator.structure.MappingConfiguration")).isNotEmpty();
      }
    }).sort(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return SPropertyOperations.getString(it, "qualifiedName");
      }
    }, true);
  }

  public static Iterable<SNode> sourceNodesQuery_1250389701475344450(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "depGenerators", true);
  }

  public static Iterable<SNode> sourceNodesQuery_1250389701475431822(final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "model", true)).translate(new ITranslator2<SNode, String>() {
      public Iterable<String> translate(SNode it) {
        SModel m = SModelRepository.getInstance().getModelDescriptor(PersistenceFacade.getInstance().createModelReference(ModelReference_Behavior.call_getModelReference_6236774123822284799(it)));
        return (m == null ? Collections.<String>emptyList() : ModelContentUtil.getUsedLanguageNamespaces(m, true));
      }
    }).distinct().sort(new ISelector<String, String>() {
      public String select(String it) {
        return it;
      }
    }, true).select(new ISelector<String, SNode>() {
      public SNode select(String it) {
        SNode n = SConceptOperations.createNewNode("jetbrains.mps.lang.core.structure.BaseConcept", null);
        n.setProperty("aa", it);
        return n;
      }
    });
  }

  public static SNode insertMacro_Query_1509962061695074412(final TemplateQueryContextWithMacro _context) {
    return jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.cast(SModelOperations.getModuleStub(_context.getOriginalInputModel()), "jetbrains.mps.lang.project.structure.Language");
  }

  public static TemplateModel getDescriptor(TemplateModule module) {
    return new TemplateModelImpl(module);
  }

  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }

  private static boolean eq_x583g4_a0a0a0a0a0a0a0ic(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
