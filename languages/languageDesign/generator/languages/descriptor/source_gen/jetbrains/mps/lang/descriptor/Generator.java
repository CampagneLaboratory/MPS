package jetbrains.mps.lang.descriptor;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.TemplateModule;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.project.structure.modules.ModuleReference;
import java.util.Collection;
import jetbrains.mps.generator.runtime.TemplateModel;
import jetbrains.mps.generator.runtime.TemplateUtil;
import jetbrains.mps.generator.runtime.TemplateMappingPriorityRule;
import jetbrains.mps.smodel.language.LanguageRuntime;
import jetbrains.mps.classloading.ClassLoaderManager;
import jetbrains.mps.smodel.MPSModuleRepository;

public class Generator implements TemplateModule {
  public static SModuleReference MODULE_REFERENCE = ModuleReference.fromString("3ac18869-0828-4401-abad-822a47bf83f1(jetbrains.mps.lang.descriptor#9020561928507175817)");
  private Language sourceLanguage;
  private final Collection<TemplateModel> models;
  private Collection<String> usedLanguages;

  public Generator(Language sourceLanguage) {
    this.sourceLanguage = sourceLanguage;
    models = TemplateUtil.<TemplateModel>asCollection(getTemplateModel("jetbrains.mps.lang.descriptor.generator.template.main.TemplateModelImpl"));
    usedLanguages = TemplateUtil.<String>asCollection("jetbrains.mps.baseLanguage", "jetbrains.mps.baseLanguageInternal", "jetbrains.mps.lang.descriptor", "jetbrains.mps.lang.project");
  }

  public String getAlias() {
    return "jetbrains.mps.lang.descriptor/main";
  }

  public Collection<TemplateModel> getModels() {
    return models;
  }

  public Collection<TemplateMappingPriorityRule> getPriorities() {
    return null;
  }

  public SModuleReference getReference() {
    return MODULE_REFERENCE;
  }

  public Collection<String> getUsedLanguages() {
    return usedLanguages;
  }

  public LanguageRuntime getSourceLanguage() {
    return sourceLanguage;
  }

  public Collection<String> getReferencedModules() {
    return null;
  }

  private TemplateModel getTemplateModel(String modelName) {
    Class<TemplateModel> clazz = ClassLoaderManager.getInstance().getClass(MPSModuleRepository.getInstance().getModule(MODULE_REFERENCE.getModuleId()), modelName);
    try {
      return clazz.getConstructor(TemplateModule.class).newInstance(this);
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }
}
