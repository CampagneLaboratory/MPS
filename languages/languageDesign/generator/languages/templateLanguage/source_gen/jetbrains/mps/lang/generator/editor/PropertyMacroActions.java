package jetbrains.mps.lang.generator.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.openapi.editor.EditorComponent;
import jetbrains.mps.lang.structure.behavior.PropertyDeclaration_Behavior;

public class PropertyMacroActions {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new PropertyMacroActions.PropertyMacroActions_DELETE(node));
  }

  public static class PropertyMacroActions_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;

    public PropertyMacroActions_DELETE(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode attributedNode = SNodeOperations.getParent(node);
      SNode propertyDeclaration = AttributeOperations.getPropertyDeclaration(SNodeOperations.as(node, "jetbrains.mps.lang.core.structure.PropertyAttribute"));
      EditorComponent editorComponent = editorContext.getEditorComponent();
      EditorCell cell = editorComponent.findCellWithId(attributedNode, PropertyDeclaration_Behavior.call_getCellId_1216822951265(propertyDeclaration));
      if (cell != null) {
        editorComponent.changeSelection(cell);
      }
      SNodeOperations.deleteNode(node);
    }
  }
}
