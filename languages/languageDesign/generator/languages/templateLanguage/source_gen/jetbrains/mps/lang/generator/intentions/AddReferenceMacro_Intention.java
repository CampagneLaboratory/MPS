package jetbrains.mps.lang.generator.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.lang.generator.editor.QueriesUtil;

public class AddReferenceMacro_Intention extends BaseIntention {
  public AddReferenceMacro_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }

  public String getPresentation() {
    return "AddReferenceMacro";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.generator.intentions.AddReferenceMacro_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:bda568eb-a9f1-4a7d-bbff-1c00bbe87f34(jetbrains.mps.lang.generator.intentions@3_0)", "1207154220489");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Add Reference Macro";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    SModelDescriptor sm = SNodeOperations.getModel(node).getModelDescriptor();
    if (sm == null || !(sm.getModule() instanceof Generator)) {
      return false;
    }
    return QueriesUtil.isReferenceMacroApplicable(node, editorContext.getSelectedCell());
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode referenceMacro = QueriesUtil.addReferenceMacro(node, editorContext.getSelectedCell());
    // set caret 
    editorContext.selectAndSetCaret(referenceMacro, 2);
    editorContext.openInspector();
  }
}
