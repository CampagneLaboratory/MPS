package jetbrains.mps.lang.generator.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collection;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.util.NameUtil;

public class ReplaceWithConcreteSubconcept_Intention implements IntentionFactory {
  public ReplaceWithConcreteSubconcept_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }

  public String getPresentation() {
    return "ReplaceWithConcreteSubconcept";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.generator.intentions.ReplaceWithConcreteSubconcept_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902e5(jetbrains.mps.lang.generator.intentions)", "1210374656847760938");
  }

  public Collection<Intention> instances(final SNode node, final EditorContext context) {
    List<Intention> list = ListSequence.fromList(new ArrayList<Intention>());
    List<SNode> paramList = parameter(node, context);
    if (paramList != null) {
      for (SNode param : paramList) {
        ListSequence.fromList(list).addElement(new ReplaceWithConcreteSubconcept_Intention.IntentionImplementation(param));
      }
    }
    return list;
  }

  private List<SNode> parameter(final SNode node, final EditorContext editorContext) {
    SNode selectedNodeConcept = SNodeOperations.getConceptDeclaration(node);
    return ListSequence.fromList(SConceptOperations.getAllSubConcepts(selectedNodeConcept, SNodeOperations.getModel(node), GlobalScope.getInstance())).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SPropertyOperations.getBoolean(SNodeOperations.getConceptDeclaration(it), "abstract"));
      }
    }).toListSequence();
  }

  public class IntentionImplementation extends BaseIntention {
    private SNode myParameter;

    public IntentionImplementation(SNode parameter) {
      myParameter = parameter;
    }

    public String getConcept() {
      return ReplaceWithConcreteSubconcept_Intention.this.getConcept();
    }

    public String getPresentation() {
      return ReplaceWithConcreteSubconcept_Intention.this.getPresentation();
    }

    public String getPersistentStateKey() {
      return ReplaceWithConcreteSubconcept_Intention.this.getPersistentStateKey();
    }

    public String getLanguageFqName() {
      return ReplaceWithConcreteSubconcept_Intention.this.getLanguageFqName();
    }

    public IntentionType getType() {
      return ReplaceWithConcreteSubconcept_Intention.this.getType();
    }

    public SNodeReference getIntentionNodeReference() {
      return ReplaceWithConcreteSubconcept_Intention.this.getIntentionNodeReference();
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Replace with instance of  " + BehaviorReflection.invokeVirtual(String.class, myParameter, "virtual_getPresentation_1213877396640", new Object[]{}) + " concept";
    }

    public boolean isApplicable(final SNode node, final EditorContext editorContext) {
      if (!(isApplicableToNode(node, editorContext))) {
        return false;
      }
      return true;
    }

    private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
      SModelDescriptor sm = SNodeOperations.getModel(node).getModelDescriptor();
      if (sm == null || !(sm.getModule() instanceof Generator)) {
        return false;
      }
      SNode selectedNodeConcept = SNodeOperations.getConceptDeclaration(node);
      return SPropertyOperations.getBoolean(selectedNodeConcept, "abstract");
    }

    public boolean isAvailableInChildNodes() {
      return false;
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode concreteConceptInstance = SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName(myParameter), null);
      SNodeOperations.replaceWithAnother(node, concreteConceptInstance);
      SNodeOperations.deleteNode(node);
    }
  }
}
