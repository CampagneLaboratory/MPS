package jetbrains.mps.lang.generator.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class ConvertSwitchToParameterized_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public ConvertSwitchToParameterized_Intention() {
  }
  public String getConcept() {
    return "jetbrains.mps.lang.generator.structure.SwitchMacro";
  }
  public String getPresentation() {
    return "ConvertSwitchToParameterized";
  }
  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.generator.intentions.ConvertSwitchToParameterized_Intention";
  }
  public String getLanguageFqName() {
    return "jetbrains.mps.lang.generator";
  }
  public IntentionType getType() {
    return IntentionType.NORMAL;
  }
  public boolean isAvailableInChildNodes() {
    return false;
  }
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902e5(jetbrains.mps.lang.generator.intentions)", "6983393488351645746");
  }
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ConvertSwitchToParameterized_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Convert parameterless switch to one with parameters";
    }
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode n = SNodeOperations.replaceWithNewChild(node, "jetbrains.mps.lang.generator.structure.TemplateSwitchMacro");
      SLinkOperations.setTarget(n, "template", SLinkOperations.getTarget(node, "templateSwitch", false), false);
      SPropertyOperations.set(n, "comment", SPropertyOperations.getString(node, "comment"));
      SLinkOperations.setTarget(n, "sourceNodeQuery", SLinkOperations.getTarget(node, "sourceNodeQuery", true), true);
      SLinkOperations.setTarget(n, "mappingLabel", SLinkOperations.getTarget(node, "mappingLabel", false), false);
    }
    public IntentionDescriptor getDescriptor() {
      return ConvertSwitchToParameterized_Intention.this;
    }
  }
}
