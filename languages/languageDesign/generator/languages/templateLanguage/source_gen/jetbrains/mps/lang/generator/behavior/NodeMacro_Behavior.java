package jetbrains.mps.lang.generator.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class NodeMacro_Behavior {
  public static void init(SNode thisNode) {
  }
  public static SNode virtual_getInputNodeTypeInsideOfMacro_1213877290799(SNode thisNode) {
    SNode prevNodeMacro = NodeMacro_Behavior.call_getPreviousNodeMacro_1213877290823(thisNode);
    if (prevNodeMacro != null) {
      return BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), prevNodeMacro, "virtual_getInputNodeTypeInsideOfMacro_1213877290799", new Object[]{});
    } else {
      return NodeMacro_Behavior.call_getInputNodeTypeFromEnvironment_1213877290892(thisNode);
    }
  }
  public static SNode call_getPreviousNodeMacro_1213877290823(SNode thisNode) {
    return NodeMacro_Behavior.call_getEnclosingMacro_1213877290834(thisNode, thisNode, SNodeOperations.getParent(thisNode));
  }
  public static String virtual_getPresentation_1213877396640(SNode thisNode) {
    StringBuilder builder = new StringBuilder();
    boolean newWord = false;
    for (char ch : SPropertyOperations.getString(SNodeOperations.getConceptDeclaration(thisNode), "conceptAlias").toCharArray()) {
      if (ch == '$' || ch == '_') {
        newWord = true;
        continue;
      }
      if (newWord) {
        builder.append(Character.toUpperCase(ch));
      } else {
        builder.append(Character.toLowerCase(ch));
      }
      newWord = false;
    }
    return builder.toString();
  }
  public static SNode call_getEnclosingMacro_1213877290834(SNode thisNode, SNode currentMacro, SNode currentNode) {
    if (currentNode == null) {
      return null;
    }
    SNode result = null;
    for (SNode currentAttribute : AttributeOperations.getAttributeList(currentNode, new IAttributeDescriptor.AllAttributes())) {
      if (SNodeOperations.isInstanceOf(currentAttribute, "jetbrains.mps.lang.generator.structure.NodeMacro")) {
        if (currentAttribute == currentMacro) {
          break;
        }
        result = SNodeOperations.cast(currentAttribute, "jetbrains.mps.lang.generator.structure.NodeMacro");
      }
    }
    if (result != null) {
      return result;
    }
    return NodeMacro_Behavior.call_getEnclosingMacro_1213877290834(thisNode, null, SNodeOperations.getParent(currentNode));
  }
  public static SNode call_getInputNodeTypeFromEnvironment_1213877290892(SNode thisNode) {
    SNode ancestor = SNodeOperations.getAncestorWhereConceptInList(thisNode, new String[]{"jetbrains.mps.lang.generator.structure.TemplateDeclaration", "jetbrains.mps.lang.generator.structure.BaseMappingRule"}, false, false);
    if (SNodeOperations.isInstanceOf(ancestor, "jetbrains.mps.lang.generator.structure.TemplateDeclaration")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(ancestor, "jetbrains.mps.lang.generator.structure.TemplateDeclaration"), "applicableConcept", false);
    }
    if (SNodeOperations.isInstanceOf(ancestor, "jetbrains.mps.lang.generator.structure.BaseMappingRule")) {
      return SLinkOperations.getTarget(SNodeOperations.cast(ancestor, "jetbrains.mps.lang.generator.structure.BaseMappingRule"), "applicableConcept", false);
    }
    SNode rootAnnotation = AttributeOperations.getAttribute(SNodeOperations.getContainingRoot(thisNode), new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.generator.structure.RootTemplateAnnotation"));
    return SLinkOperations.getTarget(SNodeOperations.cast(rootAnnotation, "jetbrains.mps.lang.generator.structure.RootTemplateAnnotation"), "applicableConcept", false);
  }
}
