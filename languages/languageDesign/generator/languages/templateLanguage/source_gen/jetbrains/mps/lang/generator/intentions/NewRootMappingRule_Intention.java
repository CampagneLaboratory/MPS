package jetbrains.mps.lang.generator.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.util.Comparing;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.openapi.navigation.NavigationSupport;
import jetbrains.mps.intentions.IntentionDescriptor;

public class NewRootMappingRule_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public NewRootMappingRule_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.core.structure.INamedConcept";
  }

  public String getPresentation() {
    return "NewRootMappingRule";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.generator.intentions.NewRootMappingRule_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.generator";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    SNode annotation = AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.RootTemplateAnnotation")));
    if (annotation == null) {
      return false;
    }
    if (SLinkOperations.getTarget(annotation, "applicableConcept", false) == null) {
      return false;
    }
    List<SNode> configs = SModelOperations.getRoots(SNodeOperations.getModel(node), "jetbrains.mps.lang.generator.structure.MappingConfiguration");
    if (ListSequence.fromList(configs).isEmpty()) {
      return false;
    }
    SNode usage = ListSequence.fromList(configs).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return ListSequence.fromList(SLinkOperations.getTargets(it, "rootMappingRule", true)).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SLinkOperations.getTarget(it, "template", false) == node;
          }
        }) != null;
      }
    });
    //  not used in rule yet? 
    return usage == null;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902e5(jetbrains.mps.lang.generator.intentions)", "1227221178632");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new NewRootMappingRule_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      //  Creates new 'root mapping rule' for a root tamplate 
      //  (if such rule is not exist yet) 
      return "Create Root Mapping Rule";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      List<SNode> configs = SModelOperations.getRoots(SNodeOperations.getModel(node), "jetbrains.mps.lang.generator.structure.MappingConfiguration");
      if (ListSequence.fromList(configs).count() > 1) {
        Iterable<SNode> sameVPackConfigs = ListSequence.fromList(configs).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return Comparing.equal(SPropertyOperations.getString(it, "virtualPackage"), SPropertyOperations.getString(node, "virtualPackage"));
          }
        });
        if (Sequence.fromIterable(sameVPackConfigs).isNotEmpty()) {
          configs = Sequence.fromIterable(sameVPackConfigs).toListSequence();
        }
      }
      if (ListSequence.fromList(configs).count() > 1) {
        // TODO: let user to choose mapping config? 
      }
      //  add new rule 
      SNode rule = SNodeFactoryOperations.addNewChild(ListSequence.fromList(configs).first(), "rootMappingRule", "jetbrains.mps.lang.generator.structure.Root_MappingRule");
      SLinkOperations.setTarget(rule, "applicableConcept", SLinkOperations.getTarget(AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.RootTemplateAnnotation"))), "applicableConcept", false), false);
      SLinkOperations.setTarget(rule, "template", node, false);
      //  open in editor 
      NavigationSupport.getInstance().openNode(editorContext.getOperationContext(), rule, true, true);
    }

    public IntentionDescriptor getDescriptor() {
      return NewRootMappingRule_Intention.this;
    }
  }
}
