package jetbrains.mps.lang.generator.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class ConvertLoopWithCopySrc_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public ConvertLoopWithCopySrc_Intention() {
  }
  public String getConcept() {
    return "jetbrains.mps.lang.generator.structure.LoopMacro";
  }
  public String getPresentation() {
    return "ConvertLoopWithCopySrc";
  }
  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.generator.intentions.ConvertLoopWithCopySrc_Intention";
  }
  public String getLanguageFqName() {
    return "jetbrains.mps.lang.generator";
  }
  public IntentionType getType() {
    return IntentionType.NORMAL;
  }
  public boolean isAvailableInChildNodes() {
    return false;
  }
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    Iterable<SNode> nodes = ListSequence.fromList(SNodeOperations.getChildren(SNodeOperations.getParent(node))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.generator.structure.NodeMacro");
      }
    });
    boolean seen = false;
    for (SNode n : nodes) {
      if (seen) {
        if (SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.generator.structure.CopySrcNodeMacro")) {
          SNode m = SLinkOperations.getTarget(SNodeOperations.cast(n, "jetbrains.mps.lang.generator.structure.CopySrcNodeMacro"), "sourceNodeQuery", true);
          if ((m == null) || (SLinkOperations.getTarget(m, "body", true) == null) || ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(m, "body", true), "statement", true)).isEmpty() || ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(m, "body", true), "statement", true)).count() > 1) {
            return false;
          }
          SNode st = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(m, "body", true), "statement", true)).first();
          return SNodeOperations.isInstanceOf(st, "jetbrains.mps.baseLanguage.structure.ExpressionStatement") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(st, "jetbrains.mps.baseLanguage.structure.ExpressionStatement"), "expression", true), "jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_sourceNode");
        } else {
          return false;
        }
      } else if (n == node) {
        seen = true;
      }
    }
    return false;
  }
  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902e5(jetbrains.mps.lang.generator.intentions)", "7834938100936599479");
  }
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ConvertLoopWithCopySrc_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Convert to $COPY-SRCL$";
    }
    public void execute(final SNode node, final EditorContext editorContext) {
      Iterable<SNode> nodes = ListSequence.fromList(SNodeOperations.getChildren(SNodeOperations.getParent(node))).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.generator.structure.NodeMacro");
        }
      });
      boolean seen = false;
      for (SNode n : nodes) {
        if (seen) {
          if (SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.generator.structure.CopySrcNodeMacro")) {
            SNodeOperations.deleteNode(n);
            SNodeFactoryOperations.replaceWithNewChild(node, "jetbrains.mps.lang.generator.structure.CopySrcListMacro");
          }
          return;
        } else if (n == node) {
          seen = true;
        }
      }
    }
    public IntentionDescriptor getDescriptor() {
      return ConvertLoopWithCopySrc_Intention.this;
    }
  }
}
