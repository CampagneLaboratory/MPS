package jetbrains.mps.lang.generator.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbandonInput_RuleConsequence = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.AbandonInput_RuleConsequence").super_("jetbrains.mps.lang.generator.structure.RuleConsequence").parents("jetbrains.mps.lang.generator.structure.RuleConsequence").alias("<abandon input>", "").create();
  /*package*/ final ConceptDescriptor myConceptAbstractMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.AbstractMacro").interface_().properties("comment").create();
  /*package*/ final ConceptDescriptor myConceptBaseMappingRule = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.BaseMappingRule").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("applyToConceptInheritors", "description").references("applicableConcept", "labelDeclaration").children(new String[]{"conditionFunction"}, new boolean[]{false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBaseMappingRule_Condition = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.BaseMappingRule_Condition").super_("jetbrains.mps.lang.generator.structure.TemplateQueryBase").parents("jetbrains.mps.lang.generator.structure.TemplateQueryBase").alias("condition", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCopySrcListMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.CopySrcListMacro").super_("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro").parents("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro", "jetbrains.mps.lang.core.structure.ISuppressErrors").children(new String[]{"sourceNodesQuery"}, new boolean[]{false}).alias("$COPY_SRCL$", "copy list of nodes from source").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCopySrcNodeMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.CopySrcNodeMacro").super_("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro").parents("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro", "jetbrains.mps.lang.core.structure.ISuppressErrors").children(new String[]{"sourceNodeQuery"}, new boolean[]{false}).alias("$COPY_SRC$", "copy source node macro").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCreateRootRule = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.CreateRootRule").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("templateNode", "label").children(new String[]{"conditionFunction"}, new boolean[]{false}).alias("create root", "").create();
  /*package*/ final ConceptDescriptor myConceptCreateRootRule_Condition = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.CreateRootRule_Condition").super_("jetbrains.mps.lang.generator.structure.TemplateQueryBase").parents("jetbrains.mps.lang.generator.structure.TemplateQueryBase").alias("condition", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDismissTopMappingRule = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.DismissTopMappingRule").super_("jetbrains.mps.lang.generator.structure.RuleConsequence").parents("jetbrains.mps.lang.generator.structure.RuleConsequence").children(new String[]{"generatorMessage"}, new boolean[]{false}).alias("<dismiss top rule>", "").create();
  /*package*/ final ConceptDescriptor myConceptDropRootRule = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.DropRootRule").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("applicableConcept").children(new String[]{"conditionFunction"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptDropRootRule_Condition = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.DropRootRule_Condition").super_("jetbrains.mps.lang.generator.structure.TemplateQueryBase").parents("jetbrains.mps.lang.generator.structure.TemplateQueryBase").alias("condition", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExportEntry = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.ExportEntry").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("label").children(new String[]{"outputModel", "inputNode", "outputNode", "dataKeeper"}, new boolean[]{false, false, false, false}).final_().alias("", "persistence of generator exports").create();
  /*package*/ final ConceptDescriptor myConceptExportLabel = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.ExportLabel").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("documentation").references("inputKind", "outputKind", "dataHolder").children(new String[]{"marshal", "unmarshal"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptExportLabelParameter_inputNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.ExportLabelParameter_inputNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("inputNode", "").create();
  /*package*/ final ConceptDescriptor myConceptExportLabelParameter_keeper = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.ExportLabelParameter_keeper").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("keeper", "").create();
  /*package*/ final ConceptDescriptor myConceptExportLabelParameter_outputNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.ExportLabelParameter_outputNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("outputNode", "").create();
  /*package*/ final ConceptDescriptor myConceptExportMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.ExportMacro").super_("jetbrains.mps.lang.generator.structure.NodeMacro").parents("jetbrains.mps.lang.generator.structure.NodeMacro").references("label").alias("$EXPOSE$", "expose output node to facilitate external references to generator outcome").create();
  /*package*/ final ConceptDescriptor myConceptGeneratorMessage = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.GeneratorMessage").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("messageType", "messageText").alias("generator message", "").create();
  /*package*/ final ConceptDescriptor myConceptGeneratorParameterReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.GeneratorParameterReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("isOptional").references("declaration").create();
  /*package*/ final ConceptDescriptor myConceptIGeneratorParameter = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.IGeneratorParameter").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"type"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptIParameterizedTemplate = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.IParameterizedTemplate").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"parameter"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptITemplateCall = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.ITemplateCall").interface_().parents("jetbrains.mps.baseLanguage.structure.TypeDerivable").references("template").children(new String[]{"actualArgument"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptIfMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.IfMacro").super_("jetbrains.mps.lang.generator.structure.NodeMacro").parents("jetbrains.mps.lang.generator.structure.NodeMacro").children(new String[]{"conditionFunction", "alternativeConsequence"}, new boolean[]{false, false}).alias("$IF$", "conditional macro").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIfMacro_Condition = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.IfMacro_Condition").super_("jetbrains.mps.lang.generator.structure.TemplateQueryBase").parents("jetbrains.mps.lang.generator.structure.TemplateQueryBase").alias("condition", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIncludeMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.IncludeMacro").super_("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro").parents("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro").references("includeTemplate").children(new String[]{"sourceNodeQuery"}, new boolean[]{false}).alias("$INCLUDE$", "include template macro").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInlineSwitch_Case = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.InlineSwitch_Case").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"conditionFunction", "caseConsequence"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptInlineSwitch_RuleConsequence = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.InlineSwitch_RuleConsequence").super_("jetbrains.mps.lang.generator.structure.RuleConsequence").parents("jetbrains.mps.lang.generator.structure.RuleConsequence", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"case", "defaultConsequence"}, new boolean[]{true, false}).alias("<in-line switch>", "").create();
  /*package*/ final ConceptDescriptor myConceptInlineTemplateWithContext_RuleConsequence = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.InlineTemplateWithContext_RuleConsequence").super_("jetbrains.mps.lang.generator.structure.RuleConsequence").parents("jetbrains.mps.lang.generator.structure.RuleConsequence").children(new String[]{"contentNode"}, new boolean[]{false}).alias("<in-line template with context>", "").create();
  /*package*/ final ConceptDescriptor myConceptInlineTemplate_RuleConsequence = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence").super_("jetbrains.mps.lang.generator.structure.RuleConsequence").parents("jetbrains.mps.lang.generator.structure.RuleConsequence").children(new String[]{"templateNode"}, new boolean[]{false}).alias("<in-line template>", "").create();
  /*package*/ final ConceptDescriptor myConceptInsertMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.InsertMacro").super_("jetbrains.mps.lang.generator.structure.NodeMacro").parents("jetbrains.mps.lang.generator.structure.NodeMacro").children(new String[]{"createNodeQuery"}, new boolean[]{false}).alias("$INSERT$", "create an arbitrary node in output model").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInsertMacro_CreateNodeQuery = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.InsertMacro_CreateNodeQuery").super_("jetbrains.mps.lang.generator.structure.TemplateQueryBase").parents("jetbrains.mps.lang.generator.structure.TemplateQueryBase").alias("query", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLabelMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.LabelMacro").super_("jetbrains.mps.lang.generator.structure.NodeMacro").parents("jetbrains.mps.lang.generator.structure.NodeMacro").alias("$LABEL$", "attach label to output node").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLoopMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.LoopMacro").super_("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro").parents("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro").children(new String[]{"sourceNodesQuery"}, new boolean[]{false}).alias("$LOOP$", "loop macro").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMapSrcListMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.MapSrcListMacro").super_("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro").parents("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro").children(new String[]{"sourceNodesQuery", "mapperFunction", "postMapperFunction"}, new boolean[]{false, false, false}).alias("$MAP_SRCL$", "map nodes form source list macro").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMapSrcMacro_MapperFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.MapSrcMacro_MapperFunction").super_("jetbrains.mps.lang.generator.structure.TemplateQueryBase").parents("jetbrains.mps.lang.generator.structure.TemplateQueryBase").alias("create output node", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMapSrcMacro_PostMapperFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.MapSrcMacro_PostMapperFunction").super_("jetbrains.mps.lang.generator.structure.TemplateQueryBase").parents("jetbrains.mps.lang.generator.structure.TemplateQueryBase").alias("post-process output node", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMapSrcNodeMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.MapSrcNodeMacro").super_("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro").parents("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro").children(new String[]{"sourceNodeQuery", "mapperFunction", "postMapperFunction"}, new boolean[]{false, false, false}).alias("$MAP_SRC$", "map source node macro").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMappingConfiguration = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.MappingConfiguration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.structure.IMemberContainer", "jetbrains.mps.lang.structure.structure.IConceptAspect").properties("topPriorityGroup").children(new String[]{"condition", "rootMappingRule", "weavingMappingRule", "reductionMappingRule", "patternReductionRule", "createRootRule", "dropRootRule", "preMappingScript", "postMappingScript", "mappingLabel", "generationParameters", "exports"}, new boolean[]{false, true, true, true, true, true, true, true, true, true, true, true}).alias("mapping configuration", "").create();
  /*package*/ final ConceptDescriptor myConceptMappingConfiguration_Condition = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.MappingConfiguration_Condition").super_("jetbrains.mps.lang.generator.structure.TemplateQueryBase").parents("jetbrains.mps.lang.generator.structure.TemplateQueryBase").alias("condition", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMappingLabelDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.MappingLabelDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").references("sourceConcept", "targetConcept").alias("label: input -> output", "mapping label declaration").create();
  /*package*/ final ConceptDescriptor myConceptMappingScript = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.MappingScript").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("scriptKind", "modifiesModel").children(new String[]{"codeBlock"}, new boolean[]{false}).alias("mapping script", "").create();
  /*package*/ final ConceptDescriptor myConceptMappingScriptReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.MappingScriptReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("mappingScript").create();
  /*package*/ final ConceptDescriptor myConceptMappingScript_CodeBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.MappingScript_CodeBlock").super_("jetbrains.mps.lang.generator.structure.TemplateQueryBase").parents("jetbrains.mps.lang.generator.structure.TemplateQueryBase").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMarshalFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.MarshalFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").create();
  /*package*/ final ConceptDescriptor myConceptModelIdentity = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.ModelIdentity").interface_().create();
  /*package*/ final ConceptDescriptor myConceptNodeIdentity = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.NodeIdentity").interface_().create();
  /*package*/ final ConceptDescriptor myConceptNodeMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.NodeMacro").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute", "jetbrains.mps.lang.generator.structure.AbstractMacro").references("mappingLabel").abstract_().alias("$$", "abstract node macro").create();
  /*package*/ final ConceptDescriptor myConceptPatternReduction_MappingRule = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.PatternReduction_MappingRule").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.generator.structure.ReductionRule").references("labelDeclaration").children(new String[]{"pattern", "ruleConsequence", "conditionFunction"}, new boolean[]{false, false, false}).alias("pattern reduce", "").create();
  /*package*/ final ConceptDescriptor myConceptPropertyMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.PropertyMacro").super_("jetbrains.mps.lang.core.structure.PropertyAttribute").parents("jetbrains.mps.lang.core.structure.PropertyAttribute", "jetbrains.mps.lang.generator.structure.AbstractMacro", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"propertyValueFunction"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPropertyMacro_GetPropertyValue = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.PropertyMacro_GetPropertyValue").super_("jetbrains.mps.lang.generator.structure.TemplateQueryBase").parents("jetbrains.mps.lang.generator.structure.TemplateQueryBase").alias("property value", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptReductionRule = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.ReductionRule").interface_().create();
  /*package*/ final ConceptDescriptor myConceptReduction_MappingRule = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.Reduction_MappingRule").super_("jetbrains.mps.lang.generator.structure.BaseMappingRule").parents("jetbrains.mps.lang.generator.structure.BaseMappingRule", "jetbrains.mps.lang.generator.structure.ReductionRule").children(new String[]{"ruleConsequence"}, new boolean[]{false}).alias("reduce", "").create();
  /*package*/ final ConceptDescriptor myConceptReferenceMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.ReferenceMacro").super_("jetbrains.mps.lang.core.structure.LinkAttribute").parents("jetbrains.mps.lang.core.structure.LinkAttribute", "jetbrains.mps.lang.generator.structure.AbstractMacro", "jetbrains.mps.lang.core.structure.ISuppressErrors").children(new String[]{"referentFunction"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptReferenceMacro_GetReferent = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.ReferenceMacro_GetReferent").super_("jetbrains.mps.lang.generator.structure.TemplateQueryBase").parents("jetbrains.mps.lang.generator.structure.TemplateQueryBase").alias("get referent", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRootTemplateAnnotation = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.RootTemplateAnnotation").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").references("applicableConcept").create();
  /*package*/ final ConceptDescriptor myConceptRoot_MappingRule = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.Root_MappingRule").super_("jetbrains.mps.lang.generator.structure.BaseMappingRule").parents("jetbrains.mps.lang.generator.structure.BaseMappingRule").properties("keepSourceRoot").references("template").alias("map", "").create();
  /*package*/ final ConceptDescriptor myConceptRuleConsequence = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.RuleConsequence").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptSourceSubstituteMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro").super_("jetbrains.mps.lang.generator.structure.NodeMacro").parents("jetbrains.mps.lang.generator.structure.NodeMacro").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSourceSubstituteMacro_SourceNodeQuery = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro_SourceNodeQuery").super_("jetbrains.mps.lang.generator.structure.TemplateQueryBase").parents("jetbrains.mps.lang.generator.structure.TemplateQueryBase").alias("query", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSourceSubstituteMacro_SourceNodesQuery = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro_SourceNodesQuery").super_("jetbrains.mps.lang.generator.structure.TemplateQueryBase").parents("jetbrains.mps.lang.generator.structure.TemplateQueryBase").alias("query", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSwitchMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.SwitchMacro").super_("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro").parents("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro").references("templateSwitch").children(new String[]{"sourceNodeQuery"}, new boolean[]{false}).alias("$SWITCH$", "template switch macro (no arguments)").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplateArgumentLinkPatternRefExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateArgumentLinkPatternRefExpression").super_("jetbrains.mps.lang.generator.structure.TemplateArgumentPatternRef").parents("jetbrains.mps.lang.generator.structure.TemplateArgumentPatternRef").references("patternVar").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplateArgumentParameterExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateArgumentParameterExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("parameter").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplateArgumentPatternRef = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateArgumentPatternRef").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplateArgumentPatternVarRefExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateArgumentPatternVarRefExpression").super_("jetbrains.mps.lang.generator.structure.TemplateArgumentPatternRef").parents("jetbrains.mps.lang.generator.structure.TemplateArgumentPatternRef").references("patternVarDecl").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplateArgumentPropertyPatternRefExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateArgumentPropertyPatternRefExpression").super_("jetbrains.mps.lang.generator.structure.TemplateArgumentPatternRef").parents("jetbrains.mps.lang.generator.structure.TemplateArgumentPatternRef").references("propertyPattern").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplateArgumentQuery = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateArgumentQuery").super_("jetbrains.mps.lang.generator.structure.TemplateQueryBase").parents("jetbrains.mps.lang.generator.structure.TemplateQueryBase").alias("query", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplateArgumentQueryExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateArgumentQueryExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"query"}, new boolean[]{false}).alias("query", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplateArgumentVariableRefExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateArgumentVariableRefExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("varmacro").create();
  /*package*/ final ConceptDescriptor myConceptTemplateCallMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateCallMacro").super_("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro").parents("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro", "jetbrains.mps.lang.generator.structure.ITemplateCall").children(new String[]{"sourceNodeQuery"}, new boolean[]{false}).alias("$CALL$", "call template macro").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplateDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.structure.structure.IConceptAspect", "jetbrains.mps.lang.generator.structure.IParameterizedTemplate").references("applicableConcept").children(new String[]{"contentNode"}, new boolean[]{false}).alias("template declaration", "").create();
  /*package*/ final ConceptDescriptor myConceptTemplateDeclarationReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateDeclarationReference").super_("jetbrains.mps.lang.generator.structure.RuleConsequence").parents("jetbrains.mps.lang.generator.structure.RuleConsequence", "jetbrains.mps.lang.generator.structure.ITemplateCall").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplateFragment = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateFragment").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").references("labelDeclaration").children(new String[]{"contextNodeQuery"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptTemplateFragment_ContextNodeQuery = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateFragment_ContextNodeQuery").super_("jetbrains.mps.lang.generator.structure.TemplateQueryBase").parents("jetbrains.mps.lang.generator.structure.TemplateQueryBase").alias("template fragment context node", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplateFunctionParameter_mainContextNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_mainContextNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("mainContextNode", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplateFunctionParameter_outputNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_outputNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("outputNode", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplateFunctionParameter_parentOutputNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_parentOutputNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("parentOutputNode", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplateFunctionParameter_sourceNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_sourceNode").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("node", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplateFunctionParameter_templatePropertyValue = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_templatePropertyValue").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("templateValue", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplateFunctionParameter_templateReferent = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_templateReferent").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("templateValue", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplateParameterDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateParameterDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier").children(new String[]{"type"}, new boolean[]{false}).alias("", "parameter").create();
  /*package*/ final ConceptDescriptor myConceptTemplateQueryBase = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateQueryBase").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTemplateSwitch = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateSwitch").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.generator.structure.IParameterizedTemplate", "jetbrains.mps.lang.structure.structure.IConceptAspect").references("modifiedSwitch").children(new String[]{"reductionMappingRule", "defaultConsequence", "nullInputMessage"}, new boolean[]{true, false, false}).alias("template switch", "").create();
  /*package*/ final ConceptDescriptor myConceptTemplateSwitchMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateSwitchMacro").super_("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro").parents("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro", "jetbrains.mps.lang.generator.structure.ITemplateCall").children(new String[]{"sourceNodeQuery"}, new boolean[]{false}).alias("$SWITCH$", "template switch macro").create();
  /*package*/ final ConceptDescriptor myConceptTemplateSwitchReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TemplateSwitchReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("templateSwitch").create();
  /*package*/ final ConceptDescriptor myConceptTraceMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TraceMacro").super_("jetbrains.mps.lang.generator.structure.NodeMacro").parents("jetbrains.mps.lang.generator.structure.NodeMacro").children(new String[]{"sourceNodeQuery"}, new boolean[]{false}).alias("$TRACE$", "specify input for the attributed node for tracing purposes").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTrivialModelId = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TrivialModelId").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.generator.structure.ModelIdentity").properties("modelName").create();
  /*package*/ final ConceptDescriptor myConceptTrivialNodeId = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.TrivialNodeId").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.generator.structure.NodeIdentity").properties("conceptId", "nodeId").final_().create();
  /*package*/ final ConceptDescriptor myConceptUnmarshalFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.UnmarshalFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").create();
  /*package*/ final ConceptDescriptor myConceptVarMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.VarMacro").super_("jetbrains.mps.lang.generator.structure.NodeMacro").parents("jetbrains.mps.lang.generator.structure.NodeMacro", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"type", "value"}, new boolean[]{false, false}).alias("$VAR$", "compute and store value in variable").create();
  /*package*/ final ConceptDescriptor myConceptVarMacro_ValueQuery = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.VarMacro_ValueQuery").super_("jetbrains.mps.lang.generator.structure.TemplateQueryBase").parents("jetbrains.mps.lang.generator.structure.TemplateQueryBase").alias("query", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptWeaveEach_RuleConsequence = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.WeaveEach_RuleConsequence").super_("jetbrains.mps.lang.generator.structure.RuleConsequence").parents("jetbrains.mps.lang.generator.structure.RuleConsequence", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("template").children(new String[]{"sourceNodesQuery"}, new boolean[]{false}).alias("<weave each>", "").create();
  /*package*/ final ConceptDescriptor myConceptWeaveMacro = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.WeaveMacro").super_("jetbrains.mps.lang.generator.structure.NodeMacro").parents("jetbrains.mps.lang.generator.structure.NodeMacro").children(new String[]{"ruleConsequence", "nodesToWeaveQuery"}, new boolean[]{false, false}).alias("$WEAVE$", "weave additional children").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptWeaving_MappingRule = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.Weaving_MappingRule").super_("jetbrains.mps.lang.generator.structure.BaseMappingRule").parents("jetbrains.mps.lang.generator.structure.BaseMappingRule").children(new String[]{"ruleConsequence", "contextNodeQuery"}, new boolean[]{false, false}).alias("weave", "").create();
  /*package*/ final ConceptDescriptor myConceptWeaving_MappingRule_ContextNodeQuery = new ConceptDescriptorBuilder("jetbrains.mps.lang.generator.structure.Weaving_MappingRule_ContextNodeQuery").super_("jetbrains.mps.lang.generator.structure.TemplateQueryBase").parents("jetbrains.mps.lang.generator.structure.TemplateQueryBase").alias("weaving context node", "").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbandonInput_RuleConsequence, myConceptAbstractMacro, myConceptBaseMappingRule, myConceptBaseMappingRule_Condition, myConceptCopySrcListMacro, myConceptCopySrcNodeMacro, myConceptCreateRootRule, myConceptCreateRootRule_Condition, myConceptDismissTopMappingRule, myConceptDropRootRule, myConceptDropRootRule_Condition, myConceptExportEntry, myConceptExportLabel, myConceptExportLabelParameter_inputNode, myConceptExportLabelParameter_keeper, myConceptExportLabelParameter_outputNode, myConceptExportMacro, myConceptGeneratorMessage, myConceptGeneratorParameterReference, myConceptIGeneratorParameter, myConceptIParameterizedTemplate, myConceptITemplateCall, myConceptIfMacro, myConceptIfMacro_Condition, myConceptIncludeMacro, myConceptInlineSwitch_Case, myConceptInlineSwitch_RuleConsequence, myConceptInlineTemplateWithContext_RuleConsequence, myConceptInlineTemplate_RuleConsequence, myConceptInsertMacro, myConceptInsertMacro_CreateNodeQuery, myConceptLabelMacro, myConceptLoopMacro, myConceptMapSrcListMacro, myConceptMapSrcMacro_MapperFunction, myConceptMapSrcMacro_PostMapperFunction, myConceptMapSrcNodeMacro, myConceptMappingConfiguration, myConceptMappingConfiguration_Condition, myConceptMappingLabelDeclaration, myConceptMappingScript, myConceptMappingScriptReference, myConceptMappingScript_CodeBlock, myConceptMarshalFunction, myConceptModelIdentity, myConceptNodeIdentity, myConceptNodeMacro, myConceptPatternReduction_MappingRule, myConceptPropertyMacro, myConceptPropertyMacro_GetPropertyValue, myConceptReductionRule, myConceptReduction_MappingRule, myConceptReferenceMacro, myConceptReferenceMacro_GetReferent, myConceptRootTemplateAnnotation, myConceptRoot_MappingRule, myConceptRuleConsequence, myConceptSourceSubstituteMacro, myConceptSourceSubstituteMacro_SourceNodeQuery, myConceptSourceSubstituteMacro_SourceNodesQuery, myConceptSwitchMacro, myConceptTemplateArgumentLinkPatternRefExpression, myConceptTemplateArgumentParameterExpression, myConceptTemplateArgumentPatternRef, myConceptTemplateArgumentPatternVarRefExpression, myConceptTemplateArgumentPropertyPatternRefExpression, myConceptTemplateArgumentQuery, myConceptTemplateArgumentQueryExpression, myConceptTemplateArgumentVariableRefExpression, myConceptTemplateCallMacro, myConceptTemplateDeclaration, myConceptTemplateDeclarationReference, myConceptTemplateFragment, myConceptTemplateFragment_ContextNodeQuery, myConceptTemplateFunctionParameter_mainContextNode, myConceptTemplateFunctionParameter_outputNode, myConceptTemplateFunctionParameter_parentOutputNode, myConceptTemplateFunctionParameter_sourceNode, myConceptTemplateFunctionParameter_templatePropertyValue, myConceptTemplateFunctionParameter_templateReferent, myConceptTemplateParameterDeclaration, myConceptTemplateQueryBase, myConceptTemplateSwitch, myConceptTemplateSwitchMacro, myConceptTemplateSwitchReference, myConceptTraceMacro, myConceptTrivialModelId, myConceptTrivialNodeId, myConceptUnmarshalFunction, myConceptVarMacro, myConceptVarMacro_ValueQuery, myConceptWeaveEach_RuleConsequence, myConceptWeaveMacro, myConceptWeaving_MappingRule, myConceptWeaving_MappingRule_ContextNodeQuery);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0ud, conceptFqName)) {
      case 0:
        return myConceptAbandonInput_RuleConsequence;
      case 1:
        return myConceptAbstractMacro;
      case 2:
        return myConceptBaseMappingRule;
      case 3:
        return myConceptBaseMappingRule_Condition;
      case 4:
        return myConceptCopySrcListMacro;
      case 5:
        return myConceptCopySrcNodeMacro;
      case 6:
        return myConceptCreateRootRule;
      case 7:
        return myConceptCreateRootRule_Condition;
      case 8:
        return myConceptDismissTopMappingRule;
      case 9:
        return myConceptDropRootRule;
      case 10:
        return myConceptDropRootRule_Condition;
      case 11:
        return myConceptExportEntry;
      case 12:
        return myConceptExportLabel;
      case 13:
        return myConceptExportLabelParameter_inputNode;
      case 14:
        return myConceptExportLabelParameter_keeper;
      case 15:
        return myConceptExportLabelParameter_outputNode;
      case 16:
        return myConceptExportMacro;
      case 17:
        return myConceptGeneratorMessage;
      case 18:
        return myConceptGeneratorParameterReference;
      case 19:
        return myConceptIGeneratorParameter;
      case 20:
        return myConceptIParameterizedTemplate;
      case 21:
        return myConceptITemplateCall;
      case 22:
        return myConceptIfMacro;
      case 23:
        return myConceptIfMacro_Condition;
      case 24:
        return myConceptIncludeMacro;
      case 25:
        return myConceptInlineSwitch_Case;
      case 26:
        return myConceptInlineSwitch_RuleConsequence;
      case 27:
        return myConceptInlineTemplateWithContext_RuleConsequence;
      case 28:
        return myConceptInlineTemplate_RuleConsequence;
      case 29:
        return myConceptInsertMacro;
      case 30:
        return myConceptInsertMacro_CreateNodeQuery;
      case 31:
        return myConceptLabelMacro;
      case 32:
        return myConceptLoopMacro;
      case 33:
        return myConceptMapSrcListMacro;
      case 34:
        return myConceptMapSrcMacro_MapperFunction;
      case 35:
        return myConceptMapSrcMacro_PostMapperFunction;
      case 36:
        return myConceptMapSrcNodeMacro;
      case 37:
        return myConceptMappingConfiguration;
      case 38:
        return myConceptMappingConfiguration_Condition;
      case 39:
        return myConceptMappingLabelDeclaration;
      case 40:
        return myConceptMappingScript;
      case 41:
        return myConceptMappingScriptReference;
      case 42:
        return myConceptMappingScript_CodeBlock;
      case 43:
        return myConceptMarshalFunction;
      case 44:
        return myConceptModelIdentity;
      case 45:
        return myConceptNodeIdentity;
      case 46:
        return myConceptNodeMacro;
      case 47:
        return myConceptPatternReduction_MappingRule;
      case 48:
        return myConceptPropertyMacro;
      case 49:
        return myConceptPropertyMacro_GetPropertyValue;
      case 50:
        return myConceptReductionRule;
      case 51:
        return myConceptReduction_MappingRule;
      case 52:
        return myConceptReferenceMacro;
      case 53:
        return myConceptReferenceMacro_GetReferent;
      case 54:
        return myConceptRootTemplateAnnotation;
      case 55:
        return myConceptRoot_MappingRule;
      case 56:
        return myConceptRuleConsequence;
      case 57:
        return myConceptSourceSubstituteMacro;
      case 58:
        return myConceptSourceSubstituteMacro_SourceNodeQuery;
      case 59:
        return myConceptSourceSubstituteMacro_SourceNodesQuery;
      case 60:
        return myConceptSwitchMacro;
      case 61:
        return myConceptTemplateArgumentLinkPatternRefExpression;
      case 62:
        return myConceptTemplateArgumentParameterExpression;
      case 63:
        return myConceptTemplateArgumentPatternRef;
      case 64:
        return myConceptTemplateArgumentPatternVarRefExpression;
      case 65:
        return myConceptTemplateArgumentPropertyPatternRefExpression;
      case 66:
        return myConceptTemplateArgumentQuery;
      case 67:
        return myConceptTemplateArgumentQueryExpression;
      case 68:
        return myConceptTemplateArgumentVariableRefExpression;
      case 69:
        return myConceptTemplateCallMacro;
      case 70:
        return myConceptTemplateDeclaration;
      case 71:
        return myConceptTemplateDeclarationReference;
      case 72:
        return myConceptTemplateFragment;
      case 73:
        return myConceptTemplateFragment_ContextNodeQuery;
      case 74:
        return myConceptTemplateFunctionParameter_mainContextNode;
      case 75:
        return myConceptTemplateFunctionParameter_outputNode;
      case 76:
        return myConceptTemplateFunctionParameter_parentOutputNode;
      case 77:
        return myConceptTemplateFunctionParameter_sourceNode;
      case 78:
        return myConceptTemplateFunctionParameter_templatePropertyValue;
      case 79:
        return myConceptTemplateFunctionParameter_templateReferent;
      case 80:
        return myConceptTemplateParameterDeclaration;
      case 81:
        return myConceptTemplateQueryBase;
      case 82:
        return myConceptTemplateSwitch;
      case 83:
        return myConceptTemplateSwitchMacro;
      case 84:
        return myConceptTemplateSwitchReference;
      case 85:
        return myConceptTraceMacro;
      case 86:
        return myConceptTrivialModelId;
      case 87:
        return myConceptTrivialNodeId;
      case 88:
        return myConceptUnmarshalFunction;
      case 89:
        return myConceptVarMacro;
      case 90:
        return myConceptVarMacro_ValueQuery;
      case 91:
        return myConceptWeaveEach_RuleConsequence;
      case 92:
        return myConceptWeaveMacro;
      case 93:
        return myConceptWeaving_MappingRule;
      case 94:
        return myConceptWeaving_MappingRule_ContextNodeQuery;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0ud = new String[]{"jetbrains.mps.lang.generator.structure.AbandonInput_RuleConsequence", "jetbrains.mps.lang.generator.structure.AbstractMacro", "jetbrains.mps.lang.generator.structure.BaseMappingRule", "jetbrains.mps.lang.generator.structure.BaseMappingRule_Condition", "jetbrains.mps.lang.generator.structure.CopySrcListMacro", "jetbrains.mps.lang.generator.structure.CopySrcNodeMacro", "jetbrains.mps.lang.generator.structure.CreateRootRule", "jetbrains.mps.lang.generator.structure.CreateRootRule_Condition", "jetbrains.mps.lang.generator.structure.DismissTopMappingRule", "jetbrains.mps.lang.generator.structure.DropRootRule", "jetbrains.mps.lang.generator.structure.DropRootRule_Condition", "jetbrains.mps.lang.generator.structure.ExportEntry", "jetbrains.mps.lang.generator.structure.ExportLabel", "jetbrains.mps.lang.generator.structure.ExportLabelParameter_inputNode", "jetbrains.mps.lang.generator.structure.ExportLabelParameter_keeper", "jetbrains.mps.lang.generator.structure.ExportLabelParameter_outputNode", "jetbrains.mps.lang.generator.structure.ExportMacro", "jetbrains.mps.lang.generator.structure.GeneratorMessage", "jetbrains.mps.lang.generator.structure.GeneratorParameterReference", "jetbrains.mps.lang.generator.structure.IGeneratorParameter", "jetbrains.mps.lang.generator.structure.IParameterizedTemplate", "jetbrains.mps.lang.generator.structure.ITemplateCall", "jetbrains.mps.lang.generator.structure.IfMacro", "jetbrains.mps.lang.generator.structure.IfMacro_Condition", "jetbrains.mps.lang.generator.structure.IncludeMacro", "jetbrains.mps.lang.generator.structure.InlineSwitch_Case", "jetbrains.mps.lang.generator.structure.InlineSwitch_RuleConsequence", "jetbrains.mps.lang.generator.structure.InlineTemplateWithContext_RuleConsequence", "jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence", "jetbrains.mps.lang.generator.structure.InsertMacro", "jetbrains.mps.lang.generator.structure.InsertMacro_CreateNodeQuery", "jetbrains.mps.lang.generator.structure.LabelMacro", "jetbrains.mps.lang.generator.structure.LoopMacro", "jetbrains.mps.lang.generator.structure.MapSrcListMacro", "jetbrains.mps.lang.generator.structure.MapSrcMacro_MapperFunction", "jetbrains.mps.lang.generator.structure.MapSrcMacro_PostMapperFunction", "jetbrains.mps.lang.generator.structure.MapSrcNodeMacro", "jetbrains.mps.lang.generator.structure.MappingConfiguration", "jetbrains.mps.lang.generator.structure.MappingConfiguration_Condition", "jetbrains.mps.lang.generator.structure.MappingLabelDeclaration", "jetbrains.mps.lang.generator.structure.MappingScript", "jetbrains.mps.lang.generator.structure.MappingScriptReference", "jetbrains.mps.lang.generator.structure.MappingScript_CodeBlock", "jetbrains.mps.lang.generator.structure.MarshalFunction", "jetbrains.mps.lang.generator.structure.ModelIdentity", "jetbrains.mps.lang.generator.structure.NodeIdentity", "jetbrains.mps.lang.generator.structure.NodeMacro", "jetbrains.mps.lang.generator.structure.PatternReduction_MappingRule", "jetbrains.mps.lang.generator.structure.PropertyMacro", "jetbrains.mps.lang.generator.structure.PropertyMacro_GetPropertyValue", "jetbrains.mps.lang.generator.structure.ReductionRule", "jetbrains.mps.lang.generator.structure.Reduction_MappingRule", "jetbrains.mps.lang.generator.structure.ReferenceMacro", "jetbrains.mps.lang.generator.structure.ReferenceMacro_GetReferent", "jetbrains.mps.lang.generator.structure.RootTemplateAnnotation", "jetbrains.mps.lang.generator.structure.Root_MappingRule", "jetbrains.mps.lang.generator.structure.RuleConsequence", "jetbrains.mps.lang.generator.structure.SourceSubstituteMacro", "jetbrains.mps.lang.generator.structure.SourceSubstituteMacro_SourceNodeQuery", "jetbrains.mps.lang.generator.structure.SourceSubstituteMacro_SourceNodesQuery", "jetbrains.mps.lang.generator.structure.SwitchMacro", "jetbrains.mps.lang.generator.structure.TemplateArgumentLinkPatternRefExpression", "jetbrains.mps.lang.generator.structure.TemplateArgumentParameterExpression", "jetbrains.mps.lang.generator.structure.TemplateArgumentPatternRef", "jetbrains.mps.lang.generator.structure.TemplateArgumentPatternVarRefExpression", "jetbrains.mps.lang.generator.structure.TemplateArgumentPropertyPatternRefExpression", "jetbrains.mps.lang.generator.structure.TemplateArgumentQuery", "jetbrains.mps.lang.generator.structure.TemplateArgumentQueryExpression", "jetbrains.mps.lang.generator.structure.TemplateArgumentVariableRefExpression", "jetbrains.mps.lang.generator.structure.TemplateCallMacro", "jetbrains.mps.lang.generator.structure.TemplateDeclaration", "jetbrains.mps.lang.generator.structure.TemplateDeclarationReference", "jetbrains.mps.lang.generator.structure.TemplateFragment", "jetbrains.mps.lang.generator.structure.TemplateFragment_ContextNodeQuery", "jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_mainContextNode", "jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_outputNode", "jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_parentOutputNode", "jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_sourceNode", "jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_templatePropertyValue", "jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_templateReferent", "jetbrains.mps.lang.generator.structure.TemplateParameterDeclaration", "jetbrains.mps.lang.generator.structure.TemplateQueryBase", "jetbrains.mps.lang.generator.structure.TemplateSwitch", "jetbrains.mps.lang.generator.structure.TemplateSwitchMacro", "jetbrains.mps.lang.generator.structure.TemplateSwitchReference", "jetbrains.mps.lang.generator.structure.TraceMacro", "jetbrains.mps.lang.generator.structure.TrivialModelId", "jetbrains.mps.lang.generator.structure.TrivialNodeId", "jetbrains.mps.lang.generator.structure.UnmarshalFunction", "jetbrains.mps.lang.generator.structure.VarMacro", "jetbrains.mps.lang.generator.structure.VarMacro_ValueQuery", "jetbrains.mps.lang.generator.structure.WeaveEach_RuleConsequence", "jetbrains.mps.lang.generator.structure.WeaveMacro", "jetbrains.mps.lang.generator.structure.Weaving_MappingRule", "jetbrains.mps.lang.generator.structure.Weaving_MappingRule_ContextNodeQuery"};
}
