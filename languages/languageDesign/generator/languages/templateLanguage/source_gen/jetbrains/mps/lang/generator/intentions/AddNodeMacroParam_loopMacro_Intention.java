package jetbrains.mps.lang.generator.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.lang.generator.editor.QueriesUtil;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class AddNodeMacroParam_loopMacro_Intention implements IntentionFactory {
  public AddNodeMacroParam_loopMacro_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }

  public String getPresentation() {
    return "AddNodeMacroParam_loopMacro";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.generator.intentions.AddNodeMacroParam_loopMacro_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    SModelDescriptor sm = SNodeOperations.getModel(node).getModelDescriptor();
    if (sm == null || !(sm.getModule() instanceof Generator)) {
      return false;
    }
    return QueriesUtil.isNodeMacroApplicable(node);
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902e5(jetbrains.mps.lang.generator.intentions)", "1240595919493");
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    List<IntentionExecutable> list = ListSequence.fromList(new ArrayList<IntentionExecutable>());
    List<SNode> paramList = parameter(node, context);
    if (paramList != null) {
      for (SNode param : paramList) {
        ListSequence.fromList(list).addElement(new AddNodeMacroParam_loopMacro_Intention.IntentionImplementation(param));
      }
    }
    return list;
  }

  private List<SNode> parameter(final SNode node, final EditorContext editorContext) {
    SNode sourceNode = MacroIntentionsUtil.getContextNodeConcept(node);
    return MacroIntentionsUtil.getLinks(sourceNode, true);
  }

  public class IntentionImplementation implements IntentionExecutable {
    private SNode myParameter;

    public IntentionImplementation(SNode parameter) {
      myParameter = parameter;
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Add Node Macro Loop: node." + BehaviorReflection.invokeVirtual(String.class, myParameter, "virtual_getPresentation_1213877396640", new Object[]{});
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode nodeMacro = QueriesUtil.addNodeMacro(node);
      SNode loopMacro = SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.generator.structure.LoopMacro", null);
      SNodeOperations.replaceWithAnother(nodeMacro, loopMacro);
      SNode referentValue = SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.generator.structure.SourceSubstituteMacro_SourceNodesQuery", null);
      SNode dotExpression = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.DotExpression", null);
      SNode linkAccess = SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.smodel.structure.SLinkListAccess", null);
      SLinkOperations.setTarget(linkAccess, "link", myParameter, false);
      SLinkOperations.setTarget(dotExpression, "operation", linkAccess, true);
      SLinkOperations.setTarget(dotExpression, "operand", SNodeFactoryOperations.createNewNode("jetbrains.mps.lang.generator.structure.TemplateFunctionParameter_sourceNode", null), true);
      SNode expressionStatement = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null);
      SLinkOperations.setTarget(expressionStatement, "expression", dotExpression, true);
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(referentValue, "body", true), "statement", true)).addElement(expressionStatement);
      SLinkOperations.setTarget(loopMacro, "sourceNodesQuery", referentValue, true);
      // set caret 
      editorContext.selectAndSetCaret(loopMacro, 1);
    }

    public IntentionDescriptor getDescriptor() {
      return AddNodeMacroParam_loopMacro_Intention.this;
    }
  }
}
