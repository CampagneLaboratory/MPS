package jetbrains.mps.lang.generator.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.generator.editor.QueriesUtil;
import jetbrains.mps.intentions.IntentionDescriptor;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class AddContext_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public AddContext_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence";
  }

  public String getPresentation() {
    return "AddContext";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.generator.intentions.AddContext_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895902e5(jetbrains.mps.lang.generator.intentions)", "3462145372628250475");
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new AddContext_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Convert to Inline Template with Context";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode tNode = SLinkOperations.getTarget(node, "templateNode", true);
      SLinkOperations.setTarget(node, "templateNode", null, true);
      SNode result = SNodeOperations.replaceWithNewChild(node, "jetbrains.mps.lang.generator.structure.InlineTemplateWithContext_RuleConsequence");
      if (SNodeOperations.isInstanceOf(tNode, "jetbrains.mps.baseLanguage.structure.Expression")) {
        SLinkOperations.setTarget(result, "contentNode", new AddContext_Intention.QuotationClass_7sjj31_a2a0a3a1a().createNode(tNode), true);
      } else {
        SLinkOperations.setTarget(result, "contentNode", tNode, true);
      }
      QueriesUtil.createTemplateFragment(tNode);
    }

    public IntentionDescriptor getDescriptor() {
      return AddContext_Intention.this;
    }
  }

  public static class QuotationClass_7sjj31_a2a0a3a1a {
    public QuotationClass_7sjj31_a2a0a3a1a() {
    }

    public SNode createNode(Object parameter_9) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      SNode quotedNode_3 = null;
      SNode quotedNode_4 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BlockStatement", null, null, GlobalScope.getInstance(), false);
        SNode quotedNode1_5 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StatementList", null, null, GlobalScope.getInstance(), false);
          SNode quotedNode1_6 = quotedNode_2;
          {
            quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ExpressionStatement", null, null, GlobalScope.getInstance(), false);
            SNode quotedNode1_7 = quotedNode_3;
            {
              quotedNode_4 = (SNode) parameter_9;
              SNode quotedNode1_8;
              if (_parameterValues_129834374.contains(quotedNode_4)) {
                quotedNode1_8 = HUtil.copyIfNecessary(quotedNode_4);
              } else {
                _parameterValues_129834374.add(quotedNode_4);
                quotedNode1_8 = quotedNode_4;
              }
              if (quotedNode1_8 != null) {
                quotedNode_3.addChild("expression", HUtil.copyIfNecessary(quotedNode1_8));
              }
            }
            quotedNode_2.addChild("statement", quotedNode1_7);
          }
          quotedNode_1.addChild("statements", quotedNode1_6);
        }
        result = quotedNode1_5;
      }
      return result;
    }
  }
}
