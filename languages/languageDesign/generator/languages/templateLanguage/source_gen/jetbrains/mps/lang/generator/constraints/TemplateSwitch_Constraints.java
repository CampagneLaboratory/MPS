package jetbrains.mps.lang.generator.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.scope.FilteringScope;
import jetbrains.mps.scope.ModelPlusImportedScope;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;

public class TemplateSwitch_Constraints extends BaseConstraintsDescriptor {
  public TemplateSwitch_Constraints() {
    super("jetbrains.mps.lang.generator.structure.TemplateSwitch");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("modifiedSwitch", new BaseReferenceConstraintsDescriptor("modifiedSwitch", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_phmuaq_a0a0a0a0a1a0b0a1a1;
          }

          @Override
          public Scope createScope(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return new FilteringScope(new ModelPlusImportedScope(_context.getModel(), true, operationContext.getScope(), "jetbrains.mps.lang.generator.structure.TemplateSwitch")) {
              @Override
              public boolean isExcluded(SNode node) {
                if (node == _context.getContextNode()) {
                  return true;
                }
                // allow to modify switches that accept more parameters 
                // iow, rules in this switch need no more parameters than that will be passed to original switch invocation 
                SNode contributor = SNodeOperations.cast(_context.getContextNode(), "jetbrains.mps.lang.generator.structure.TemplateSwitch");
                SNode originCandidate = SNodeOperations.cast(node, "jetbrains.mps.lang.generator.structure.TemplateSwitch");
                if (ListSequence.fromList(SLinkOperations.getTargets(originCandidate, "parameter", true)).count() < ListSequence.fromList(SLinkOperations.getTargets(contributor, "parameter", true)).count()) {
                  return true;
                }
                for (int i = 0; i < ListSequence.fromList(SLinkOperations.getTargets(contributor, "parameter", true)).count(); i++) {
                  SNode p1 = ListSequence.fromList(SLinkOperations.getTargets(contributor, "parameter", true)).getElement(i);
                  SNode p2 = ListSequence.fromList(SLinkOperations.getTargets(originCandidate, "parameter", true)).getElement(i);
                  // contributor's parameter types shall be same or narrow (sic!) than that of modified switch 
                  // so that contributed rules can't expect too much from actual arguments 
                  if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(SLinkOperations.getTarget(p2, "type", true), SLinkOperations.getTarget(p1, "type", true)))) {
                    return true;
                  }
                  if (!(SPropertyOperations.getString(p1, "name").equals(SPropertyOperations.getString(p2, "name")))) {
                    return true;
                  }
                }
                return false;
              }
            };
          }
        };
      }
    });
    return references;
  }

  private static SNodePointer breakingNode_phmuaq_a0a0a0a0a1a0b0a1a1 = new SNodePointer("r:00000000-0000-4000-0000-011c895902e2(jetbrains.mps.lang.generator.constraints)", "5858775738865283157");
}
