package jetbrains.mps.lang.generator.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.newIntentions.IntentionFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.generator.helper.EditingUtil;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import java.util.Collection;
import jetbrains.mps.intentions.newIntentions.Intention;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import java.util.ArrayList;

public class AddNodeMacro implements IntentionFactory {

  public AddNodeMacro() {
  }

  public boolean isAvailableInChildren() {
    return true;
  }

  public boolean isSurroundWith() {
    return false;
  }


  public IntentionFactory.IntentionType getType() {
    return IntentionFactory.IntentionType.NORMAL;
  }


  public SConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept");
  }

  public SNodePointer getDeclarationNode() {
    return implementationNode;
  }

  private SNodePointer implementationNode = new SNodePointer("r:00000000-0000-4000-0000-011c895902e5(jetbrains.mps.lang.generator.intentions)", "1931319275952475609");


  private boolean isApplicableHelper(SNode node, EditorContext editorContext) {
    if (!(MacroIntentionsUtil.isInGeneratorModel(node))) {
      return false;
    }
    return EditingUtil.isNodeMacroApplicable(node);
  }

  private boolean filterChild(SNode node, SNode childNode, EditorContext editorContext) {
    return false;
  }

  public boolean isApplicable(SNode node, EditorContext editorContext) {
    if (!(isApplicableHelper(node, editorContext))) {
      return false;
    }

    SNode child = editorContext.getSelectedNode();
    if (child != node) {
      if (filterChild(node, child, editorContext) == false) {
        return false;
      }
    }

    return true;
  }


  public void execute(SNode node, EditorContext editorContext) {
    SNode nodeMacro = EditingUtil.addNodeMacro(node);
    // set caret 
    SelectionUtil.selectLabelCellAnSetCaret(editorContext, nodeMacro, SelectionManager.FIRST_CELL, 1);
  }
  public String description(SNode node, EditorContext editorContext) {
    return "Add Node Macro";
  }

  public Collection<Intention> getIntentions(SNode node, EditorContext editorContext) {
    Collection<Intention> result = CollectionSequence.fromCollection(new ArrayList<Intention>());
    CollectionSequence.fromCollection(result).addElement(new Intention() {
      public void execute(SNode node, EditorContext editorContext) {
        AddNodeMacro.this.execute(node, editorContext);
      }
      public String getDescription(SNode node, EditorContext editorContext) {
        return AddNodeMacro.this.description(node, editorContext);
      }
      public IntentionFactory getCreator() {
        return AddNodeMacro.this;
      }
    });
    return result;
  }
}
