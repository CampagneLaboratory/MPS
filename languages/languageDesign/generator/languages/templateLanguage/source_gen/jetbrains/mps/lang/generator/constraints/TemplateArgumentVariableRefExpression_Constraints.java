package jetbrains.mps.lang.generator.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;

public class TemplateArgumentVariableRefExpression_Constraints extends BaseConstraintsDescriptor {
  public TemplateArgumentVariableRefExpression_Constraints() {
    super("jetbrains.mps.lang.generator.structure.TemplateArgumentVariableRefExpression");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("varmacro", new BaseReferenceConstraintsDescriptor("varmacro", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            SNode contextNode = (_context.getReferenceNode() == null ? _context.getEnclosingNode() : _context.getReferenceNode());
            List<SNode> vars = new ArrayList<SNode>();
            while ((contextNode != null)) {
              SNode nextNode = null;
              if (SNodeOperations.isInstanceOf(contextNode, "jetbrains.mps.lang.generator.structure.VarMacro")) {
                ListSequence.fromList(vars).addElement(SNodeOperations.cast(contextNode, "jetbrains.mps.lang.generator.structure.VarMacro"));
                nextNode = SNodeOperations.getPrevSibling(contextNode);
              }
              if (nextNode == null && "smodelAttribute".equals(SNodeOperations.getContainingLinkRole(contextNode))) {
                nextNode = SNodeOperations.getPrevSibling(contextNode);
                if (nextNode == null) {
                  contextNode = SNodeOperations.getParent(contextNode);
                }
              }
              if (nextNode == null) {
                SNode parentWithAttrs = SNodeOperations.getParent(contextNode);
                while (parentWithAttrs != null) {
                  SNode lastAttr = ListSequence.fromList(SLinkOperations.getTargets(parentWithAttrs, "smodelAttribute", true)).last();
                  if (lastAttr != null) {
                    nextNode = lastAttr;
                    break;
                  }
                  parentWithAttrs = SNodeOperations.getParent(parentWithAttrs);
                }
              }
              contextNode = nextNode;
            }
            return vars;
          }

          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_k799s7_a0a1a0a0a1a0b0a1a1;
          }
        };
      }
    });
    return references;
  }

  private static SNodePointer breakingNode_k799s7_a0a1a0a0a1a0b0a1a1 = new SNodePointer("r:00000000-0000-4000-0000-011c895902e2(jetbrains.mps.lang.generator.constraints)", "4941415056452019252");
}
