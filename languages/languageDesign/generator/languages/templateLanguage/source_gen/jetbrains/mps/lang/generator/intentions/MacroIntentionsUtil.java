package jetbrains.mps.lang.generator.intentions;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.generator.helper.QueriesUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.pattern.GeneratedMatchingPattern;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.pattern.IMatchingPattern;
import jetbrains.mps.lang.pattern.runtime.PatternUtil;
import jetbrains.mps.util.IterableUtil;

public final class MacroIntentionsUtil {
  public static SNode getContextNodeConcept(SNode contextNode) {
    SNode enclosingMacro = findOuterMacro(contextNode);
    if ((enclosingMacro == null)) {
      return QueriesUtil.getApplicableConcept_fromEnvironment(contextNode);
    }
    if (SNodeOperations.isInstanceOf(enclosingMacro, "jetbrains.mps.lang.generator.structure.SourceSubstituteMacro")) {
      return getConceptFrom(SNodeOperations.cast(enclosingMacro, "jetbrains.mps.lang.generator.structure.SourceSubstituteMacro"));
    }
    return null;
  }
  private static SNode getConceptFrom(SNode macro) {
    SNode query = QueriesUtil.getQueryFunction_fromSourceSubstituteMacro(macro);
    SNode returnType = TypeChecker.getInstance().getTypeOf(query);
    // ====== 
    if (SNodeOperations.isInstanceOf(query, "jetbrains.mps.lang.generator.structure.SourceSubstituteMacro_SourceNodeQuery")) {
      {
        GeneratedMatchingPattern pattern_iiuth6_a0d0b = new MacroIntentionsUtil.Pattern_iiuth6_a0a0a0a3a1();
        SNode coercedNode_iiuth6_a0d0b = TypeChecker.getInstance().getRuntimeSupport().coerce_(returnType, pattern_iiuth6_a0d0b);
        if (coercedNode_iiuth6_a0d0b != null) {
          return ((SNode) pattern_iiuth6_a0d0b.getFieldValue("patternVar_concept"));
        } else {
          return null;
        }
      }
    } else if (SNodeOperations.isInstanceOf(query, "jetbrains.mps.lang.generator.structure.SourceSubstituteMacro_SourceNodesQuery")) {
      {
        GeneratedMatchingPattern pattern_iiuth6_a0a3a1 = new MacroIntentionsUtil.Pattern_iiuth6_a0a0a0a0d0b();
        SNode coercedNode_iiuth6_a0a3a1 = TypeChecker.getInstance().getRuntimeSupport().coerce_(returnType, pattern_iiuth6_a0a3a1);
        if (coercedNode_iiuth6_a0a3a1 != null) {
          return ((SNode) pattern_iiuth6_a0a3a1.getFieldValue("patternVar_concept"));
        } else {
          return null;
        }
      }
    } else {
      SNode macroOuterNode = SNodeOperations.getParent(SNodeOperations.getParent(macro));
      return getContextNodeConcept(macroOuterNode);
    }
  }
  private static SNode findOuterMacro(SNode contextNode) {
    if (contextNode == null) {
      return null;
    }
    if (ListSequence.fromList(AttributeOperations.getAttributeList(contextNode, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.generator.structure.NodeMacro"))).isNotEmpty()) {
      return ListSequence.fromList(AttributeOperations.getAttributeList(contextNode, new IAttributeDescriptor.NodeAttribute("jetbrains.mps.lang.generator.structure.NodeMacro"))).last();
    }
    return findOuterMacro(SNodeOperations.getParent(contextNode));
  }
  public static List<SNode> getLinks(SNode sourceNode, boolean inCollection) {
    if (sourceNode == null) {
      return null;
    }
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode child : AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(sourceNode)) {
      if (inCollection) {
        if (SPropertyOperations.hasValue(child, "sourceCardinality", "0..n", "0..1") || SPropertyOperations.hasValue(child, "sourceCardinality", "1..n", "0..1")) {
          ListSequence.fromList(result).addElement(child);
        }
      } else {
        if (SPropertyOperations.hasValue(child, "sourceCardinality", "0..1", "0..1") || SPropertyOperations.hasValue(child, "sourceCardinality", "1", "0..1")) {
          ListSequence.fromList(result).addElement(child);
        }
      }
    }
    return result;
  }
  public static String getPresentaion(SNode intentionParam) {
    //  characters '_' and '&' are treated as mnemonics in AnAction that is created for each intention, 
    //  however it's common to see '_' in link/property/conecept/template names, and removing this char 
    //  (as mnemonics processing does) results in incorrect name shown to user, which is wrong. 
    // Here I escape only '_' as it's unlikely to see '&' in metamodel-level names, 
    // although correct (but impossible now) solution would be to change the way actions for intentions are created 
    // (i.e. without mnemonics processing). 
    return BehaviorReflection.invokeVirtual(String.class, intentionParam, "virtual_getPresentation_1213877396640", new Object[]{}).replaceAll("_{1}", "__");
  }
  public static void copyVirtualPackage(SNode to, SNode from) {
    SPropertyOperations.set(to, "virtualPackage", SPropertyOperations.getString(SNodeOperations.getContainingRoot(from), "virtualPackage"));
  }
  public static boolean isInGeneratorModel(SNode node) {
    return SNodeOperations.isInstanceOf(SModelOperations.getModuleStub(SNodeOperations.getModel(node)), "jetbrains.mps.lang.project.structure.Generator");
  }
  public static class Pattern_iiuth6_a0a0a0a3a1 extends GeneratedMatchingPattern implements IMatchingPattern {
    /*package*/ SNode patternVar_concept;
    public Pattern_iiuth6_a0a0a0a3a1() {
    }
    public boolean match(SNode nodeToMatch) {
      {
        SNode nodeToMatch_iiuth6_a0a0a3a1 = nodeToMatch;
        if (!("jetbrains.mps.lang.smodel.structure.SNodeType".equals(nodeToMatch_iiuth6_a0a0a3a1.getConcept().getQualifiedName()))) {
          return false;
        }
        patternVar_concept = nodeToMatch_iiuth6_a0a0a3a1.getReferenceTarget("concept");
      }
      return true;
    }
    public boolean hasAntiquotations() {
      return false;
    }
    public void fillFieldValuesFrom(GeneratedMatchingPattern pattern) {
      if (pattern != null && pattern.getClass() == this.getClass()) {
        patternVar_concept = (SNode) pattern.getFieldValue("patternVar_concept");
      }
    }
    public Object getFieldValue(String fieldName) {
      if ("patternVar_concept".equals(fieldName)) {
        return patternVar_concept;
      }
      return null;
    }
    public void performActions(Object o) {
    }
  }
  public static class Pattern_iiuth6_a0a0a0a0d0b extends GeneratedMatchingPattern implements IMatchingPattern {
    /*package*/ SNode patternVar_concept;
    public Pattern_iiuth6_a0a0a0a0d0b() {
    }
    public boolean match(SNode nodeToMatch) {
      {
        SNode nodeToMatch_iiuth6_a0a0a0d0b = nodeToMatch;
        if (!("jetbrains.mps.baseLanguage.collections.structure.SequenceType".equals(nodeToMatch_iiuth6_a0a0a0d0b.getConcept().getQualifiedName()))) {
          return false;
        }
        {
          String childRole_iiuth6_ = "elementType";
          if (!(PatternUtil.hasNChildren(nodeToMatch_iiuth6_a0a0a0d0b, childRole_iiuth6_, 1))) {
            return false;
          }
          {
            SNode childVar_iiuth6_a0a0a0a3a1 = IterableUtil.get(nodeToMatch_iiuth6_a0a0a0d0b.getChildren(childRole_iiuth6_), 0);
            {
              SNode nodeToMatch_iiuth6_a0a0a0a3a1 = childVar_iiuth6_a0a0a0a3a1;
              if (!("jetbrains.mps.lang.smodel.structure.SNodeType".equals(nodeToMatch_iiuth6_a0a0a0a3a1.getConcept().getQualifiedName()))) {
                return false;
              }
              patternVar_concept = nodeToMatch_iiuth6_a0a0a0a3a1.getReferenceTarget("concept");
            }
          }
        }
      }
      return true;
    }
    public boolean hasAntiquotations() {
      return false;
    }
    public void fillFieldValuesFrom(GeneratedMatchingPattern pattern) {
      if (pattern != null && pattern.getClass() == this.getClass()) {
        patternVar_concept = (SNode) pattern.getFieldValue("patternVar_concept");
      }
    }
    public Object getFieldValue(String fieldName) {
      if ("patternVar_concept".equals(fieldName)) {
        return patternVar_concept;
      }
      return null;
    }
    public void performActions(Object o) {
    }
  }
}
