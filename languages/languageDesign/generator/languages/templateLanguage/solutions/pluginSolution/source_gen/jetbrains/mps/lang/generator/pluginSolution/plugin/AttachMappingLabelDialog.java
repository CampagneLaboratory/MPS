package jetbrains.mps.lang.generator.pluginSolution.plugin;

/*Generated by MPS */

import com.intellij.openapi.ui.DialogWrapper;
import jetbrains.mps.openapi.editor.EditorContext;
import javax.swing.JPanel;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.ide.project.ProjectHelper;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import javax.swing.JLabel;
import javax.swing.JComboBox;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import org.jetbrains.annotations.Nullable;
import javax.swing.JComponent;
import javax.swing.Action;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import java.awt.Insets;

public class AttachMappingLabelDialog extends DialogWrapper {
  protected EditorContext myEditorContext;
  protected JPanel myPanel;
  private SNode myTemplateNode;
  private List<String> myExistingLabels;
  private String myResultLabelName = "";

  public AttachMappingLabelDialog(SNode templateNode, List<String> existingLabels, EditorContext editorContext) {
    super(ProjectHelper.toIdeaProject(editorContext.getOperationContext().getProject()));
    setTitle("Attach Mapping Label");
    this.myExistingLabels = existingLabels;
    this.myEditorContext = editorContext;
    this.myTemplateNode = templateNode;
    this.initPanel();

    init();
  }

  private JPanel createNamePanel() {
    JPanel namePanel = new JPanel(new GridBagLayout());
    GridBagConstraints c = new GridBagConstraints();
    c.fill = GridBagConstraints.HORIZONTAL;
    namePanel.add(new JLabel("Mapping label: "), c);
    c = new GridBagConstraints();
    c.fill = GridBagConstraints.HORIZONTAL;
    c.weightx = 1;
    c.gridx = 1;
    final JComboBox nameCombo = new JComboBox(ListSequence.fromList(this.myExistingLabels).toGenericArray(String.class));
    nameCombo.setEditable(true);
    namePanel.add(nameCombo, c);
    nameCombo.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        AttachMappingLabelDialog.this.myResultLabelName = (String) nameCombo.getSelectedItem();
      }
    });
    if (ListSequence.fromList(this.myExistingLabels).isNotEmpty()) {
      nameCombo.setSelectedItem(ListSequence.fromList(this.myExistingLabels).first());
      JTextField textField = ((JTextField) nameCombo.getEditor().getEditorComponent());
      textField.setSelectionStart(0);
      textField.setSelectionEnd(ListSequence.fromList(this.myExistingLabels).first().length());
    }
    return namePanel;
  }

  @Nullable
  protected JComponent createCenterPanel() {
    return this.myPanel;
  }

  @Override
  protected Action[] createActions() {
    return new Action[]{new DialogWrapper.DialogWrapperAction("Attach label") {
      protected void doAction(ActionEvent p0) {
        doOKAction();
        doAttachMappingLabel();
      }
    }, getCancelAction()};
  }

  protected void doAttachMappingLabel() {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {
      public void run() {
        SNode mappingLabel = MappingLabelUtil.findOrCreateMappingLabelForName(AttachMappingLabelDialog.this.myTemplateNode, AttachMappingLabelDialog.this.myResultLabelName);
        SNode existingMacro = ListSequence.fromList(AttributeOperations.getAttributeList(AttachMappingLabelDialog.this.myTemplateNode, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.NodeMacro")))).last();
        if (existingMacro != null) {
          SLinkOperations.setTarget(existingMacro, "mappingLabel", mappingLabel, false);
          return;
        }
        SNode templateFragment = AttributeOperations.getAttribute(AttachMappingLabelDialog.this.myTemplateNode, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.TemplateFragment")));
        if (templateFragment != null) {
          SLinkOperations.setTarget(templateFragment, "labelDeclaration", mappingLabel, false);
          return;
        }
        // create new MAP_SRC macro 
        SNode newMacro = SNodeFactoryOperations.addNewAttribute(AttachMappingLabelDialog.this.myTemplateNode, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.NodeMacro")), "jetbrains.mps.lang.generator.structure.MapSrcNodeMacro");
        SLinkOperations.setTarget(newMacro, "mappingLabel", mappingLabel, false);
      }
    });
  }

  protected void initPanel() {
    this.myPanel = new JPanel(new GridBagLayout());
    GridBagConstraints c = new GridBagConstraints();
    c.fill = GridBagConstraints.HORIZONTAL;
    c.insets = new Insets(3, 3, 3, 3);
    c.gridx = 0;
    c.gridy = 0;
    c.weightx = 1;
    c.weighty = 0;
    this.myPanel.add(this.createNamePanel(), c);
  }
}
