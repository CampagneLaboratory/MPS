package jetbrains.mps.lang.generator.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.lang.core.behavior.BaseConcept_Behavior;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.BootstrapLanguages;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.annotations.NotNull;
import org.apache.log4j.Priority;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.project.IModule;
import java.util.List;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.generator.GenerationFacade;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import javax.swing.SwingUtilities;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SModel;

public class AttachMappingLabel_Action extends BaseAction {
  private static final Icon ICON = null;

  public AttachMappingLabel_Action() {
    super("Attach Mapping Label", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }

  @Override
  public boolean isDumbAware() {
    return true;
  }

  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    SNode node = ((SNode) MapSequence.fromMap(_params).get("nodeSelected"));
    if (!(BaseConcept_Behavior.call_isInTemplates_1213877396627(node))) {
      return false;
    }
    //  not an element form generator language 
    if ((Language) check_gwd6n9_a0a3a0(SNodeOperations.getConceptDeclaration(((SNode) node)).getModel()) == BootstrapLanguages.generatorLanguage()) {
      return false;
    }
    //  not inside macro 
    if (SNodeOperations.getAncestor(node, "jetbrains.mps.lang.generator.structure.AbstractMacro", false, false) != null) {
      return false;
    }
    //  in root template - ok 
    if (AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.RootTemplateAnnotation"))) != null) {
      return true;
    }
    //  in in-line template - ok 
    if (SNodeOperations.getAncestor(node, "jetbrains.mps.lang.generator.structure.InlineTemplate_RuleConsequence", false, false) != null) {
      return true;
    }
    //  in in-line template with context 
    if (SNodeOperations.getAncestor(node, "jetbrains.mps.lang.generator.structure.InlineTemplateWithContext_RuleConsequence", false, false) != null) {
      return ListSequence.fromList(SNodeOperations.getAncestors(node, null, true)).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.TemplateFragment"))) != null;
        }
      }) != null;
    }
    //  in template fragment - ok 
    if (SNodeOperations.isInstanceOf(SNodeOperations.getContainingRoot(node), "jetbrains.mps.lang.generator.structure.TemplateDeclaration")) {
      return ListSequence.fromList(SNodeOperations.getAncestors(node, null, true)).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.generator.structure.TemplateFragment"))) != null;
        }
      }) != null;
    }
    return false;
  }

  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    try {
      {
        boolean enabled = this.isApplicable(event, _params);
        this.setEnabledState(event.getPresentation(), enabled);
      }
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action doUpdate method failed. Action:" + "AttachMappingLabel", t);
      }
      this.disable(event.getPresentation());
    }
  }

  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    MapSequence.fromMap(_params).put("nodeSelected", event.getData(MPSCommonDataKeys.NODE));
    if (MapSequence.fromMap(_params).get("nodeSelected") == null) {
      return false;
    }
    MapSequence.fromMap(_params).put("editorContext", event.getData(MPSEditorDataKeys.EDITOR_CONTEXT));
    if (MapSequence.fromMap(_params).get("editorContext") == null) {
      return false;
    }
    return true;
  }

  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final SNode node = ((SNode) MapSequence.fromMap(_params).get("nodeSelected"));
      IOperationContext operationContext = ((EditorContext) MapSequence.fromMap(_params).get("editorContext")).getOperationContext();
      IModule module = operationContext.getModule();
      List<SNode> mappings;
      if (module instanceof Generator) {
        mappings = (List<SNode>) GenerationFacade.getOwnMappings((Generator) module);
      } else {
        mappings = SModelOperations.getRoots(SNodeOperations.getModel(node), "jetbrains.mps.lang.generator.structure.MappingConfiguration");
      }
      final List<String> existingLabels = ListSequence.fromList(mappings).translate(new ITranslator2<SNode, String>() {
        public Iterable<String> translate(final SNode it) {
          return new Iterable<String>() {
            public Iterator<String> iterator() {
              return new YieldingIterator<String>() {
                private int __CP__ = 0;

                protected boolean moveToNext() {
__loop__:
                  do {
__switch__:
                    switch (this.__CP__) {
                      case -1:
                        assert false : "Internal error";
                        return false;
                      case 2:
                        this._2_label_it = ListSequence.fromList(SLinkOperations.getTargets(it, "mappingLabel", true)).iterator();
                      case 3:
                        if (!(this._2_label_it.hasNext())) {
                          this.__CP__ = 1;
                          break;
                        }
                        this._2_label = this._2_label_it.next();
                        this.__CP__ = 4;
                        break;
                      case 5:
                        this.__CP__ = 3;
                        this.yield(SPropertyOperations.getString(_2_label, "name"));
                        return true;
                      case 0:
                        this.__CP__ = 2;
                        break;
                      case 4:
                        this.__CP__ = 5;
                        break;
                      default:
                        break __loop__;
                    }
                  } while (true);
                  return false;
                }

                private SNode _2_label;
                private Iterator<SNode> _2_label_it;
              };
            }
          };
        }
      }).toListSequence();
      SwingUtilities.invokeLater(new Runnable() {
        public void run() {
          AttachMappingLabelDialog dialog = new AttachMappingLabelDialog(node, existingLabels, ((EditorContext) MapSequence.fromMap(_params).get("editorContext")));
          dialog.show();
        }
      });
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Priority.ERROR)) {
        LOG.error("User's action execute method failed. Action:" + "AttachMappingLabel", t);
      }
    }
  }

  protected static Logger LOG = LogManager.getLogger(AttachMappingLabel_Action.class);

  private static IModule check_gwd6n9_a0a3a0(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }
}
