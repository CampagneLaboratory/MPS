package jetbrains.mps.transformation.test.inputLang.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.lang.core.structure.ScopeProvider;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class RefTestMethod extends BaseConcept implements INamedConcept, ScopeProvider {
  public static final String concept = "jetbrains.mps.transformation.test.inputLang.structure.RefTestMethod";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String PARAMS = "params";
  public static final String EXPRESSIONS = "expressions";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public RefTestMethod(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(RefTestMethod.NAME);
  }

  public void setName(String value) {
    this.setProperty(RefTestMethod.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(RefTestMethod.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(RefTestMethod.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(RefTestMethod.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(RefTestMethod.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(RefTestMethod.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(RefTestMethod.VIRTUAL_PACKAGE, value);
  }

  public int getParamsesCount() {
    return this.getChildCount(RefTestMethod.PARAMS);
  }

  public Iterator<RefTestParam> paramses() {
    return this.children(RefTestParam.class, RefTestMethod.PARAMS);
  }

  public List<RefTestParam> getParamses() {
    return this.getChildren(RefTestParam.class, RefTestMethod.PARAMS);
  }

  public void addParams(RefTestParam node) {
    this.addChild(RefTestMethod.PARAMS, node);
  }

  public void insertParams(RefTestParam prev, RefTestParam node) {
    this.insertChild(prev, RefTestMethod.PARAMS, node);
  }

  public int getExpressionsesCount() {
    return this.getChildCount(RefTestMethod.EXPRESSIONS);
  }

  public Iterator<RefTestExpression> expressionses() {
    return this.children(RefTestExpression.class, RefTestMethod.EXPRESSIONS);
  }

  public List<RefTestExpression> getExpressionses() {
    return this.getChildren(RefTestExpression.class, RefTestMethod.EXPRESSIONS);
  }

  public void addExpressions(RefTestExpression node) {
    this.addChild(RefTestMethod.EXPRESSIONS, node);
  }

  public void insertExpressions(RefTestExpression prev, RefTestExpression node) {
    this.insertChild(prev, RefTestMethod.EXPRESSIONS, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(RefTestMethod.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, RefTestMethod.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, RefTestMethod.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(RefTestMethod.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, RefTestMethod.SMODEL_ATTRIBUTE, node);
  }

  public static RefTestMethod newInstance(SModel sm, boolean init) {
    return (RefTestMethod) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.transformation.test.inputLang.structure.RefTestMethod", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static RefTestMethod newInstance(SModel sm) {
    return RefTestMethod.newInstance(sm, false);
  }
}
