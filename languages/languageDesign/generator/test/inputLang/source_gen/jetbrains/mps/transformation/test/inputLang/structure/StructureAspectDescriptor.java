package jetbrains.mps.transformation.test.inputLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.transformation.test.inputLang.structure.ExpressionToReduceToStatement", null);
    myFqNameToConcept.put("jetbrains.mps.transformation.test.inputLang.structure.InputNode", null);
    myFqNameToConcept.put("jetbrains.mps.transformation.test.inputLang.structure.InputNode_A", null);
    myFqNameToConcept.put("jetbrains.mps.transformation.test.inputLang.structure.InputNode_B", null);
    myFqNameToConcept.put("jetbrains.mps.transformation.test.inputLang.structure.InputNode_C", null);
    myFqNameToConcept.put("jetbrains.mps.transformation.test.inputLang.structure.InputRoot", null);
    myFqNameToConcept.put("jetbrains.mps.transformation.test.inputLang.structure.InputRootWithStatementList", null);
    myFqNameToConcept.put("jetbrains.mps.transformation.test.inputLang.structure.RefTestClass", null);
    myFqNameToConcept.put("jetbrains.mps.transformation.test.inputLang.structure.RefTestExpression", null);
    myFqNameToConcept.put("jetbrains.mps.transformation.test.inputLang.structure.RefTestMethod", null);
    myFqNameToConcept.put("jetbrains.mps.transformation.test.inputLang.structure.RefTestMethodCall", null);
    myFqNameToConcept.put("jetbrains.mps.transformation.test.inputLang.structure.RefTestParam", null);
    myFqNameToConcept.put("jetbrains.mps.transformation.test.inputLang.structure.RefTestParamRef", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.ExpressionToReduceToStatement").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("expression to reduce to statement", "generator should produce clear warning").staticScope(StaticScope.NONE).create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.InputNode").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"inputChild"}, new boolean[]{true}).abstract_().create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.InputNode_A").super_("jetbrains.mps.transformation.test.inputLang.structure.InputNode").parents("jetbrains.mps.transformation.test.inputLang.structure.InputNode").properties("option").create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.InputNode_B").super_("jetbrains.mps.transformation.test.inputLang.structure.InputNode_A").parents("jetbrains.mps.transformation.test.inputLang.structure.InputNode_A").create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.InputNode_C").super_("jetbrains.mps.transformation.test.inputLang.structure.InputNode_B").parents("jetbrains.mps.transformation.test.inputLang.structure.InputNode_B").properties("key").create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.InputRoot").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("useInTest").children(new String[]{"inputChild"}, new boolean[]{true}).create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.InputRootWithStatementList").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("useInTest").children(new String[]{"statementList"}, new boolean[]{false}).create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.RefTestClass").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.ScopeProvider").references("extends").children(new String[]{"methods"}, new boolean[]{true}).create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.RefTestExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.RefTestMethod").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"params", "expressions"}, new boolean[]{true, true}).create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.RefTestMethodCall").super_("jetbrains.mps.transformation.test.inputLang.structure.RefTestExpression").parents("jetbrains.mps.transformation.test.inputLang.structure.RefTestExpression").references("method").create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.RefTestParam").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.RefTestParamRef").super_("jetbrains.mps.transformation.test.inputLang.structure.RefTestExpression").parents("jetbrains.mps.transformation.test.inputLang.structure.RefTestExpression").references("declaration").create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.transformation.test.inputLang.structure.ExpressionToReduceToStatement", "jetbrains.mps.transformation.test.inputLang.structure.InputNode", "jetbrains.mps.transformation.test.inputLang.structure.InputNode_A", "jetbrains.mps.transformation.test.inputLang.structure.InputNode_B", "jetbrains.mps.transformation.test.inputLang.structure.InputNode_C", "jetbrains.mps.transformation.test.inputLang.structure.InputRoot", "jetbrains.mps.transformation.test.inputLang.structure.InputRootWithStatementList", "jetbrains.mps.transformation.test.inputLang.structure.RefTestClass", "jetbrains.mps.transformation.test.inputLang.structure.RefTestExpression", "jetbrains.mps.transformation.test.inputLang.structure.RefTestMethod", "jetbrains.mps.transformation.test.inputLang.structure.RefTestMethodCall", "jetbrains.mps.transformation.test.inputLang.structure.RefTestParam", "jetbrains.mps.transformation.test.inputLang.structure.RefTestParamRef"};
}
