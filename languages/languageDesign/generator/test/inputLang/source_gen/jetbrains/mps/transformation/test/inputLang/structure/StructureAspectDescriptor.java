package jetbrains.mps.transformation.test.inputLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptExpressionToReduceToStatement = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.ExpressionToReduceToStatement").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("expression to reduce to statement", "generator should produce clear warning").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInputNode = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.InputNode").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"inputChild"}, new boolean[]{true}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptInputNode_A = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.InputNode_A").super_("jetbrains.mps.transformation.test.inputLang.structure.InputNode").parents("jetbrains.mps.transformation.test.inputLang.structure.InputNode").properties("option").create();
  /*package*/ final ConceptDescriptor myConceptInputNode_B = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.InputNode_B").super_("jetbrains.mps.transformation.test.inputLang.structure.InputNode_A").parents("jetbrains.mps.transformation.test.inputLang.structure.InputNode_A").create();
  /*package*/ final ConceptDescriptor myConceptInputNode_C = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.InputNode_C").super_("jetbrains.mps.transformation.test.inputLang.structure.InputNode_B").parents("jetbrains.mps.transformation.test.inputLang.structure.InputNode_B").properties("key").create();
  /*package*/ final ConceptDescriptor myConceptInputRoot = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.InputRoot").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("useInTest").children(new String[]{"inputChild"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptInputRootWithStatementList = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.InputRootWithStatementList").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("useInTest").children(new String[]{"statementList"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptRefTestClass = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.RefTestClass").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.ScopeProvider").references("extends").children(new String[]{"methods"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptRefTestExpression = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.RefTestExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptRefTestMethod = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.RefTestMethod").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.ScopeProvider").children(new String[]{"params", "expressions"}, new boolean[]{true, true}).create();
  /*package*/ final ConceptDescriptor myConceptRefTestMethodCall = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.RefTestMethodCall").super_("jetbrains.mps.transformation.test.inputLang.structure.RefTestExpression").parents("jetbrains.mps.transformation.test.inputLang.structure.RefTestExpression").references("method").create();
  /*package*/ final ConceptDescriptor myConceptRefTestParam = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.RefTestParam").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptRefTestParamRef = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.inputLang.structure.RefTestParamRef").super_("jetbrains.mps.transformation.test.inputLang.structure.RefTestExpression").parents("jetbrains.mps.transformation.test.inputLang.structure.RefTestExpression").references("declaration").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptExpressionToReduceToStatement, myConceptInputNode, myConceptInputNode_A, myConceptInputNode_B, myConceptInputNode_C, myConceptInputRoot, myConceptInputRootWithStatementList, myConceptRefTestClass, myConceptRefTestExpression, myConceptRefTestMethod, myConceptRefTestMethodCall, myConceptRefTestParam, myConceptRefTestParamRef);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0q, conceptFqName)) {
      case 0:
        return myConceptExpressionToReduceToStatement;
      case 1:
        return myConceptInputNode;
      case 2:
        return myConceptInputNode_A;
      case 3:
        return myConceptInputNode_B;
      case 4:
        return myConceptInputNode_C;
      case 5:
        return myConceptInputRoot;
      case 6:
        return myConceptInputRootWithStatementList;
      case 7:
        return myConceptRefTestClass;
      case 8:
        return myConceptRefTestExpression;
      case 9:
        return myConceptRefTestMethod;
      case 10:
        return myConceptRefTestMethodCall;
      case 11:
        return myConceptRefTestParam;
      case 12:
        return myConceptRefTestParamRef;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0q = new String[]{"jetbrains.mps.transformation.test.inputLang.structure.ExpressionToReduceToStatement", "jetbrains.mps.transformation.test.inputLang.structure.InputNode", "jetbrains.mps.transformation.test.inputLang.structure.InputNode_A", "jetbrains.mps.transformation.test.inputLang.structure.InputNode_B", "jetbrains.mps.transformation.test.inputLang.structure.InputNode_C", "jetbrains.mps.transformation.test.inputLang.structure.InputRoot", "jetbrains.mps.transformation.test.inputLang.structure.InputRootWithStatementList", "jetbrains.mps.transformation.test.inputLang.structure.RefTestClass", "jetbrains.mps.transformation.test.inputLang.structure.RefTestExpression", "jetbrains.mps.transformation.test.inputLang.structure.RefTestMethod", "jetbrains.mps.transformation.test.inputLang.structure.RefTestMethodCall", "jetbrains.mps.transformation.test.inputLang.structure.RefTestParam", "jetbrains.mps.transformation.test.inputLang.structure.RefTestParamRef"};
}
