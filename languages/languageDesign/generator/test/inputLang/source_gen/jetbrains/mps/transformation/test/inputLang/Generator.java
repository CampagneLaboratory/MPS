package jetbrains.mps.transformation.test.inputLang;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.TemplateModuleBase;
import java.util.Collection;
import jetbrains.mps.generator.runtime.TemplateModel;
import jetbrains.mps.generator.runtime.TemplateUtil;
import jetbrains.mps.generator.runtime.TemplateMappingPriorityRule;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.language.LanguageRuntime;
import jetbrains.mps.module.ReloadableModule;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.generator.runtime.TemplateModule;

public class Generator extends TemplateModuleBase {
  public static String MODULE_REF = "45250695-332a-4a0e-94bc-014e09fa751d(jetbrains.mps.transformation.test.inputLang#1195164860857)";
  private Language sourceLanguage;
  private final Collection<TemplateModel> models;
  private Collection<String> usedLanguages;
  public Generator(Language sourceLanguage) {
    this.sourceLanguage = sourceLanguage;
    models = TemplateUtil.<TemplateModel>asCollection(getTemplateModel("jetbrains.mps.transformation.test.inputLang.generator.outputLang.template.test_ArgumentsInTemplateDeclarationReference.TemplateModelImpl"), getTemplateModel("jetbrains.mps.transformation.test.inputLang.generator.outputLang.template.test_ReduceInheritors.TemplateModelImpl"), getTemplateModel("jetbrains.mps.transformation.test.inputLang.generator.outputLang.template.test_dontApplyReductionTwice.TemplateModelImpl"), getTemplateModel("jetbrains.mps.transformation.test.inputLang.generator.outputLang.template.test_generationScripts.TemplateModelImpl"), getTemplateModel("jetbrains.mps.transformation.test.inputLang.generator.outputLang.template.test_getPrevInput.TemplateModelImpl"), getTemplateModel("jetbrains.mps.transformation.test.inputLang.generator.outputLang.template.test_reduceExpressionToStatement.TemplateModelImpl"), getTemplateModel("jetbrains.mps.transformation.test.inputLang.generator.outputLang.template.test_reduceOneToMany.TemplateModelImpl"), getTemplateModel("jetbrains.mps.transformation.test.inputLang.generator.outputLang.template.test_weaveManyToSingularChild.TemplateModelImpl"));
    usedLanguages = TemplateUtil.<String>asCollection("jetbrains.mps.baseLanguage", "jetbrains.mps.lang.core", "jetbrains.mps.transformation.test.outputLang");
  }
  @Override
  public String getAlias() {
    return "jetbrains.mps.transformation.test.inputLang/tests";
  }
  @Override
  public Collection<TemplateModel> getModels() {
    return models;
  }
  @Override
  public Collection<TemplateMappingPriorityRule> getPriorities() {
    return null;
  }
  @Override
  public SModuleReference getReference() {
    return PersistenceFacade.getInstance().createModuleReference(MODULE_REF);
  }
  @Override
  public Collection<String> getUsedLanguages() {
    return usedLanguages;
  }
  @Override
  public LanguageRuntime getSourceLanguage() {
    return sourceLanguage;
  }
  @Override
  public Collection<String> getReferencedModules() {
    return null;
  }
  private TemplateModel getTemplateModel(String modelName) {
    ReloadableModule module = (ReloadableModule) ModuleRepositoryFacade.getInstance().getModule(getReference());
    Class<TemplateModel> clazz = null;
    if (module != null) {
      try {
        clazz = (Class<TemplateModel>) module.getClass(modelName);
      } catch (ClassNotFoundException e) {
        throw new IllegalStateException("", e);
      }
    }
    if (clazz == null) {
      throw new IllegalStateException(String.format("Failed to obtain generator runtime class for model %s", modelName));
    }
    try {
      return clazz.getConstructor(TemplateModule.class).newInstance(this);
    } catch (RuntimeException ex) {
      throw ex;
    } catch (Exception ex) {
      throw new RuntimeException(ex);
    }
  }
}
