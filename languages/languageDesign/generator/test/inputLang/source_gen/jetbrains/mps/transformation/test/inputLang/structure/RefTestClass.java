package jetbrains.mps.transformation.test.inputLang.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.lang.core.structure.ScopeProvider;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class RefTestClass extends BaseConcept implements INamedConcept, ScopeProvider {
  public static final String concept = "jetbrains.mps.transformation.test.inputLang.structure.RefTestClass";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String EXTENDS = "extends";
  public static final String METHODS = "methods";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public RefTestClass(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(RefTestClass.NAME);
  }

  public void setName(String value) {
    this.setProperty(RefTestClass.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(RefTestClass.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(RefTestClass.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(RefTestClass.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(RefTestClass.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(RefTestClass.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(RefTestClass.VIRTUAL_PACKAGE, value);
  }

  public RefTestClass getExtends() {
    return (RefTestClass) this.getReferent(RefTestClass.class, RefTestClass.EXTENDS);
  }

  public void setExtends(RefTestClass node) {
    super.setReferent(RefTestClass.EXTENDS, node);
  }

  public int getMethodsesCount() {
    return this.getChildCount(RefTestClass.METHODS);
  }

  public Iterator<RefTestMethod> methodses() {
    return this.children(RefTestMethod.class, RefTestClass.METHODS);
  }

  public List<RefTestMethod> getMethodses() {
    return this.getChildren(RefTestMethod.class, RefTestClass.METHODS);
  }

  public void addMethods(RefTestMethod node) {
    this.addChild(RefTestClass.METHODS, node);
  }

  public void insertMethods(RefTestMethod prev, RefTestMethod node) {
    this.insertChild(prev, RefTestClass.METHODS, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(RefTestClass.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, RefTestClass.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, RefTestClass.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(RefTestClass.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, RefTestClass.SMODEL_ATTRIBUTE, node);
  }

  public static RefTestClass newInstance(SModel sm, boolean init) {
    return (RefTestClass) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.transformation.test.inputLang.structure.RefTestClass", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static RefTestClass newInstance(SModel sm) {
    return RefTestClass.newInstance(sm, false);
  }
}
