package jetbrains.mps.transformation.test.inputLang.generator.outputLang.template.test_getPrevInput;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.runtime.TemplateMappingConfiguration;
import java.util.Collection;
import jetbrains.mps.generator.runtime.TemplateRootMappingRule;
import jetbrains.mps.generator.runtime.TemplateModel;
import jetbrains.mps.generator.runtime.TemplateUtil;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.generator.template.ITemplateGenerator;
import jetbrains.mps.generator.runtime.TemplateReductionRule;
import java.util.Collections;
import jetbrains.mps.generator.runtime.TemplateCreateRootRule;
import jetbrains.mps.generator.runtime.TemplateWeavingRule;
import jetbrains.mps.generator.runtime.TemplateDropRootRule;
import jetbrains.mps.generator.runtime.TemplateMappingScript;
import jetbrains.mps.generator.runtime.MapRootRuleBase;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.generator.runtime.TemplateExecutionEnvironment;
import jetbrains.mps.generator.runtime.TemplateContext;
import jetbrains.mps.generator.runtime.GenerationException;
import jetbrains.mps.generator.template.MapRootRuleContext;
import org.jetbrains.mps.openapi.model.SNode;

@Generated
public class Mappingmain implements TemplateMappingConfiguration {
  private final Collection<TemplateRootMappingRule> rootRules;
  private final TemplateModel myModel;
  public Mappingmain(TemplateModel model) {
    this.myModel = model;
    rootRules = TemplateUtil.<TemplateRootMappingRule>asCollection(new Mappingmain.RootMappingRule0(), new Mappingmain.RootMappingRule1());
  }
  public String getName() {
    return "main";
  }
  public TemplateModel getModel() {
    return this.myModel;
  }
  public SNodeReference getMappingNode() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c895905f7(jetbrains.mps.transformation.test.inputLang.generator.outputLang.template.test_getPrevInput@generator)", "1202255161944");
  }
  public boolean isApplicable(ITemplateGenerator generator) {
    return true;
  }
  public Collection<TemplateReductionRule> getReductionRules() {
    return Collections.emptySet();
  }
  public Collection<TemplateCreateRootRule> getCreateRules() {
    return Collections.emptySet();
  }
  public Collection<TemplateRootMappingRule> getRootRules() {
    return rootRules;
  }
  public Collection<TemplateWeavingRule> getWeavingRules() {
    return Collections.emptySet();
  }
  public Collection<TemplateDropRootRule> getDropRules() {
    return Collections.emptySet();
  }
  public Collection<TemplateMappingScript> getPostScripts() {
    return Collections.emptySet();
  }
  public Collection<TemplateMappingScript> getPreScripts() {
    return Collections.emptySet();
  }
  public boolean isTopPriority() {
    return false;
  }
  public class RootMappingRule0 extends MapRootRuleBase implements TemplateRootMappingRule {
    public RootMappingRule0() {
      super(new SNodePointer("r:00000000-0000-4000-0000-011c895905f7(jetbrains.mps.transformation.test.inputLang.generator.outputLang.template.test_getPrevInput@generator)", "1202255161953"), MetaAdapterFactory.getConcept(0xab0ae915e3b54f35L, 0xb55ac655d649a03cL, 0x11645953ab3L, "jetbrains.mps.transformation.test.inputLang.structure.InputRoot"), false, false);
    }
    public boolean isApplicable(TemplateExecutionEnvironment environment, TemplateContext context) throws GenerationException {
      if (!(QueriesGenerated.baseMappingRule_Condition_1202255161954(new MapRootRuleContext(context, getRuleNode())))) {
        return false;
      }
      return true;
    }
    public Collection<SNode> apply(final TemplateExecutionEnvironment environment, final TemplateContext context) throws GenerationException {
      Collection<SNode> result = new TemplateOutputRoot__1().apply(environment, context);
      environment.registerLabel(context.getInput(), result, "ROOT INPUT");
      return result;
    }
  }
  public class RootMappingRule1 extends MapRootRuleBase implements TemplateRootMappingRule {
    public RootMappingRule1() {
      super(new SNodePointer("r:00000000-0000-4000-0000-011c895905f7(jetbrains.mps.transformation.test.inputLang.generator.outputLang.template.test_getPrevInput@generator)", "1202338801828"), MetaAdapterFactory.getConcept(0xab0ae915e3b54f35L, 0xb55ac655d649a03cL, 0x11645953ab3L, "jetbrains.mps.transformation.test.inputLang.structure.InputRoot"), false, false);
    }
    public boolean isApplicable(TemplateExecutionEnvironment environment, TemplateContext context) throws GenerationException {
      if (!(QueriesGenerated.baseMappingRule_Condition_1202338801829(new MapRootRuleContext(context, getRuleNode())))) {
        return false;
      }
      return true;
    }
    public Collection<SNode> apply(final TemplateExecutionEnvironment environment, final TemplateContext context) throws GenerationException {
      Collection<SNode> result = new TemplateOutputRoot__2().apply(environment, context);
      environment.registerLabel(context.getInput(), result, "ROOT INPUT");
      return result;
    }
  }
}
