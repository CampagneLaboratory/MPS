package jetbrains.mps.transformation.test.outputLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptCustomRoot = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.outputLang.structure.CustomRoot").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"statement"}, new boolean[]{false}).alias("custom root", "root for tests").create();
  /*package*/ final ConceptDescriptor myConceptCustomStatement = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.outputLang.structure.CustomStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"inner"}, new boolean[]{false}).alias("work: ", "").create();
  /*package*/ final ConceptDescriptor myConceptCustomStatementRef = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.outputLang.structure.CustomStatementRef").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("ii").references("myStatement").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptOutputNode = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.outputLang.structure.OutputNode").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("text").children(new String[]{"outputChild"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptOutputNode_forDontApplyReductionTwice_test = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.outputLang.structure.OutputNode_forDontApplyReductionTwice_test").super_("jetbrains.mps.transformation.test.outputLang.structure.OutputNode").parents("jetbrains.mps.transformation.test.outputLang.structure.OutputNode").create();
  /*package*/ final ConceptDescriptor myConceptOutputRoot = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.outputLang.structure.OutputRoot").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("text").children(new String[]{"outputChild", "specialChild"}, new boolean[]{true, false}).alias("output root concept", "").create();
  /*package*/ final ConceptDescriptor myConceptTwoVarStatement = new ConceptDescriptorBuilder("jetbrains.mps.transformation.test.outputLang.structure.TwoVarStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").properties("name1", "name2").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptCustomRoot, myConceptCustomStatement, myConceptCustomStatementRef, myConceptOutputNode, myConceptOutputNode_forDontApplyReductionTwice_test, myConceptOutputRoot, myConceptTwoVarStatement);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0k, conceptFqName)) {
      case 0:
        return myConceptCustomRoot;
      case 1:
        return myConceptCustomStatement;
      case 2:
        return myConceptCustomStatementRef;
      case 3:
        return myConceptOutputNode;
      case 4:
        return myConceptOutputNode_forDontApplyReductionTwice_test;
      case 5:
        return myConceptOutputRoot;
      case 6:
        return myConceptTwoVarStatement;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0k = new String[]{"jetbrains.mps.transformation.test.outputLang.structure.CustomRoot", "jetbrains.mps.transformation.test.outputLang.structure.CustomStatement", "jetbrains.mps.transformation.test.outputLang.structure.CustomStatementRef", "jetbrains.mps.transformation.test.outputLang.structure.OutputNode", "jetbrains.mps.transformation.test.outputLang.structure.OutputNode_forDontApplyReductionTwice_test", "jetbrains.mps.transformation.test.outputLang.structure.OutputRoot", "jetbrains.mps.transformation.test.outputLang.structure.TwoVarStatement"};
}
