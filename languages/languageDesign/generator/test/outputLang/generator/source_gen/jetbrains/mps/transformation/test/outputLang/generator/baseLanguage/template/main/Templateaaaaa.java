package jetbrains.mps.transformation.test.outputLang.generator.baseLanguage.template.main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.runtime.TemplateDeclarationWeavingAware;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.runtime.TemplateExecutionEnvironment;
import jetbrains.mps.generator.runtime.TemplateContext;
import jetbrains.mps.generator.runtime.GenerationException;
import java.util.Collection;
import jetbrains.mps.generator.runtime.TemplateUtil;

@Generated
public class Templateaaaaa implements TemplateDeclarationWeavingAware {
  private SNode myNnnn;
  public Templateaaaaa(SNode nnnn) {
    this.myNnnn = nnnn;
  }
  public SNodeReference getTemplateNode() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c89590606(jetbrains.mps.transformation.test.outputLang.generator.baseLanguage.template.main@generator)", "933643154466320524");
  }
  private Map<String, Object> getParametersAsMap() {
    Map<String, Object> result = MapSequence.fromMap(new HashMap<String, Object>());
    MapSequence.fromMap(result).put("nnnn", myNnnn);
    return result;
  }
  protected SNode applyPart0(@NotNull final TemplateExecutionEnvironment environment, @NotNull final TemplateContext context) throws GenerationException {
    final SNode tnode1 = environment.createOutputNode("jetbrains.mps.baseLanguage.structure.BlockStatement");
    try {
      environment.nodeCopied(context, tnode1, "tpl/r:00000000-0000-4000-0000-011c89590606/7870321878389731890");
      {
        final SNode tnode2 = environment.createOutputNode("jetbrains.mps.baseLanguage.structure.StatementList");
        try {
          environment.nodeCopied(context, tnode2, "tpl/r:00000000-0000-4000-0000-011c89590606/7870321878389731891");
        } finally {
        }
        if (tnode2 != null) {
          tnode1.addChild("statements", tnode2);
        }
        // TODO validate child 
      }
    } finally {
    }
    return tnode1;
  }
  public Collection<SNode> apply(@NotNull TemplateExecutionEnvironment environment, @NotNull TemplateContext context) throws GenerationException {
    TemplateContext contextWithParams = context.subContext(getParametersAsMap());
    return TemplateUtil.singletonList(applyPart0(environment, contextWithParams));
  }
  public Collection<SNode> weave(@NotNull TemplateExecutionEnvironment environment, @NotNull TemplateContext context, @NotNull SNode outputContextNode) throws GenerationException {
    TemplateContext contextWithParams = context.subContext(getParametersAsMap());
    SNode tnodepart0 = applyPart0(environment, contextWithParams);
    SNodeReference weaveTf0 = weaveTfConst_54ml0j_a0c0g;
    environment.weaveNode(outputContextNode, "contentNode", tnodepart0, weaveTf0, contextWithParams.getInput());
    return TemplateUtil.singletonList(tnodepart0);
  }
  private static SNodePointer weaveTfConst_54ml0j_a0c0g = new SNodePointer("r:00000000-0000-4000-0000-011c89590606(jetbrains.mps.transformation.test.outputLang.generator.baseLanguage.template.main@generator)", "7870321878389731892");
}
