package jetbrains.mps.lang.plugin.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.DynamicReference;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.SetSequence;

public class FixDynamicReferences_MigrationScript extends BaseMigrationScript {
  public FixDynamicReferences_MigrationScript(IOperationContext operationContext) {
    super("Replace dynamic references with static references");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "dynamic refs";
      }

      public String getAdditionalInfo() {
        return "dynamic refs";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.core.structure.BaseConcept";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return Sequence.fromIterable(((Iterable<SReference>) node.getReferences())).any(new IWhereFilter<SReference>() {
          public boolean accept(SReference it) {
            return it instanceof DynamicReference;
          }
        });
      }

      public void doUpdateInstanceNode(SNode node) {
        Map<String, SNode> roleToTarget = MapSequence.fromMap(new HashMap<String, SNode>());
        for (SReference ref : Sequence.fromIterable(node.getReferences())) {
          if (!(ref instanceof DynamicReference)) {
            continue;
          }
          MapSequence.fromMap(roleToTarget).put(ref.getRole(), ref.getTargetNode());
        }
        for (Map.Entry<String, SNode> m : SetSequence.fromSet(roleToTarget.entrySet())) {
          node.setReferenceTarget(m.getKey(), m.getValue());
        }
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
}
