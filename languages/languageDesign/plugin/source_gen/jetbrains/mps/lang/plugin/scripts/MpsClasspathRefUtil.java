package jetbrains.mps.lang.plugin.scripts;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.SModelReference;
import java.util.List;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModelRepository;
import java.util.Set;
import jetbrains.mps.project.structure.modules.Dependency;
import jetbrains.mps.internal.collections.runtime.SetSequence;

/*package*/ class MpsClasspathRefUtil {
  private MpsClasspathRefUtil() {
  }

  /*package*/ static void updateReferencesToMpsClasspath(SNode node) {
    IModule[] modules = {MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("6ed54515-acc8-4d1e-a16c-9fd6cfe951ea")), MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("1ed103c3-3aa6-49b7-9c21-6765ee11f224")), MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("86441d7a-e194-42da-81a5-2161ec62a379"))};

    SModel model = SNodeOperations.getModel(node);
    IModule module = check_xpwqv8_a0d0a(model.getModelDescriptor());

    for (SReference ref : Sequence.fromIterable(SNodeOperations.getReferences(node))) {
      SModelReference oldModelRef = ref.getTargetSModelReference();
      final String fqname = check_xpwqv8_a0b0f0a(oldModelRef);
      for (IModule newModule : modules) {
        List<SModelDescriptor> models = newModule.getOwnModelDescriptors();
        SModelReference modelRef = check_xpwqv8_a0b0c0f0a(ListSequence.fromList(models).findFirst(new IWhereFilter<SModelDescriptor>() {
          public boolean accept(SModelDescriptor it) {
            return eq_xpwqv8_a0a0a0a0a0a0b0c0f0a(it.getLongName(), fqname);
          }
        }));
        if (modelRef == null) {
          continue;
        }
        ref.setTargetSModelReference(modelRef);
        // check reference - sometimes same package can be in several modules 
        if ((SLinkOperations.getTargetNode(ref) == null)) {
          ref.setTargetSModelReference(oldModelRef);
          continue;
        }
        model.addModelImport(modelRef, false);
        model.deleteModelImport(oldModelRef);
        SModelRepository.getInstance().markChanged(model);
        // update module dependencies 
        if (module != null && module.getModuleDescriptor() != null) {
          Set<Dependency> dependencies = module.getModuleDescriptor().getDependencies();
          Dependency dep = SetSequence.fromSet(dependencies).findFirst(new IWhereFilter<Dependency>() {
            public boolean accept(Dependency it) {
              return it.getModuleRef().equals(MPSModuleRepository.getInstance().getModuleById(ModuleId.fromString("37a3367b-1fb2-44d8-aa6b-18075e74e003")).getModuleReference());
            }
          });
          // get re-export from MPS.Classpath, then should be checked manually 
          module.addDependency(newModule.getModuleReference(), dep != null && dep.isReexport());
          SetSequence.fromSet(dependencies).removeElement(dep);
          // <node> 
        }
        break;
      }
    }
  }

  private static IModule check_xpwqv8_a0d0a(SModelDescriptor checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }

  private static String check_xpwqv8_a0b0f0a(SModelReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getLongName();
    }
    return null;
  }

  private static SModelReference check_xpwqv8_a0b0c0f0a(SModelDescriptor checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getSModelReference();
    }
    return null;
  }

  private static boolean eq_xpwqv8_a0a0a0a0a0a0b0c0f0a(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
