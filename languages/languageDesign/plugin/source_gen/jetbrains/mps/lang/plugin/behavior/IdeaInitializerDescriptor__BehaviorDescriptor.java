package jetbrains.mps.lang.plugin.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class IdeaInitializerDescriptor__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x45b64b294c2b3514L, "jetbrains.mps.lang.plugin.structure.IdeaInitializerDescriptor");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<String> getGeneratedFileName_id3uUnGg98wJc = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getGeneratedFileName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3uUnGg98wJc").registry(REGISTRY).build();
  public static final SMethod<String> getGeneratedFileShortName_id3uUnGg98M$X = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getGeneratedFileShortName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3uUnGg98M$X").registry(REGISTRY).build();
  public static final SMethod<String> getGeneratesFileExtension_id3uUnGg98M_4 = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getGeneratesFileExtension").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3uUnGg98M_4").registry(REGISTRY).build();
  public static final SMethod<String> getLibrariesResourceName_id6Ug_cEzkAtK = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getLibrariesResourceName").modifiers(SModifiersImpl.create(1, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6Ug_cEzkAtK").registry(REGISTRY).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getGeneratedFileName_id3uUnGg98wJc, getGeneratedFileShortName_id3uUnGg98M$X, getGeneratesFileExtension_id3uUnGg98M_4, getLibrariesResourceName_id6Ug_cEzkAtK);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String getGeneratedFileName_id3uUnGg98wJc(@NotNull SNode __thisNode__) {
    return IdeaInitializerDescriptor__BehaviorDescriptor.getGeneratedFileShortName_id3uUnGg98M$X.invoke(__thisNode__) + "." + IdeaInitializerDescriptor__BehaviorDescriptor.getGeneratesFileExtension_id3uUnGg98M_4.invoke(__thisNode__);
  }
  /*package*/ static String getGeneratedFileShortName_id3uUnGg98M$X(@NotNull SNode __thisNode__) {
    return "plugin";
  }
  /*package*/ static String getGeneratesFileExtension_id3uUnGg98M_4(@NotNull SNode __thisNode__) {
    return "xml";
  }
  /*package*/ static String getLibrariesResourceName_id6Ug_cEzkAtK(@NotNull SAbstractConcept __thisConcept__) {
    return "libraries";
  }

  /*package*/ IdeaInitializerDescriptor__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) getGeneratedFileName_id3uUnGg98wJc(node));
      case 1:
        return (T) ((String) getGeneratedFileShortName_id3uUnGg98M$X(node));
      case 2:
        return (T) ((String) getGeneratesFileExtension_id3uUnGg98M_4(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 3:
        return (T) ((String) getLibrariesResourceName_id6Ug_cEzkAtK(concept));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
