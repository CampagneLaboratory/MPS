package jetbrains.mps.lang.plugin.scripts;

/*Generated by MPS */

import java.util.regex.Pattern;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.project.IModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.regex.Matcher;
import jetbrains.mps.lang.plugin.behavior.IconResource_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.DefaultSModelDescriptor;
import jetbrains.mps.smodel.LanguageAspect;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class ExtractIconsUtil {
  private static Pattern REGEXP_st4ewd_a0a0a0b0b0a = Pattern.compile("([^/]+)\\.([^\\.]+)$", 0);

  public ExtractIconsUtil() {
  }

  public static void updateIconResourceBundle(SNode cb) {
    IModule module = SNodeOperations.getModel(cb).getModelDescriptor().getModule();
    if (module instanceof Language) {
      SNode irb = getIconResourceBundle((Language) module);
      for (SNode ire : ListSequence.fromList(SNodeOperations.getDescendants(cb, "jetbrains.mps.lang.plugin.structure.IconResourceExpression", false, new String[]{})).toListSequence()) {
        {
          Pattern _pattern_0 = REGEXP_st4ewd_a0a0a0b0b0a;
          Matcher _matcher_0 = _pattern_0.matcher(IconResource_Behavior.call_getFilename_6759767305208076279(SLinkOperations.getTarget(ire, "icon", true)));
          if (_matcher_0.find()) {
            final String iconName = _matcher_0.group(1).toUpperCase();
            SNode decl = ListSequence.fromList(SLinkOperations.getTargets(irb, "icons", true)).findFirst(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return iconName.equals(SPropertyOperations.getString(it, "name"));
              }
            });
            if ((decl == null)) {
              decl = SLinkOperations.addNewChild(irb, "icons", "jetbrains.mps.lang.plugin.structure.IconResourceDeclaration");
              SLinkOperations.setTarget(decl, "iconExpression", new ExtractIconsUtil.QuotationClass_st4ewd_a0a1a2a0a1a1a0().createNode(SNodeOperations.copyNode(SLinkOperations.getTarget(ire, "icon", true))), true);
              SPropertyOperations.set(decl, "name", iconName);
            }
            SNodeOperations.replaceWithAnother(ire, new ExtractIconsUtil.QuotationClass_st4ewd_a0a0d0a0b0b0a().createNode(decl));
          }
        }
      }
    }
  }

  private static SNode getIconResourceBundle(Language lang) {
    EditableSModelDescriptor pluginModel = getPluginModel(lang);
    SModel smodel = pluginModel.getSModel();
    SNode irb = ListSequence.fromList(SModelOperations.getRoots(smodel, "jetbrains.mps.lang.plugin.structure.IconResourceBundle")).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode irb) {
        return "Behavior".equals(SPropertyOperations.getString(irb, "name"));
      }
    });
    if ((irb == null)) {
      irb = SModelOperations.createNewRootNode(smodel, "jetbrains.mps.lang.plugin.structure.IconResourceBundle", null);
      SPropertyOperations.set(irb, "name", "Behavior");
    }
    return irb;
  }

  private static EditableSModelDescriptor getPluginModel(Language lang) {
    DefaultSModelDescriptor plugin = LanguageAspect.PLUGIN.get(lang);
    LanguageAspect aspectForModel = lang.getAspectForModel(plugin);
    return aspectForModel.getOrCreate(lang);
  }

  public static class QuotationClass_st4ewd_a0a1a2a0a1a1a0 {
    public QuotationClass_st4ewd_a0a1a2a0a1a1a0() {
    }

    public SNode createNode(Object parameter_5) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.plugin.structure.IconResourceExpression", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        {
          quotedNode_2 = (SNode) parameter_5;
          SNode quotedNode1_4;
          if (_parameterValues_129834374.contains(quotedNode_2)) {
            quotedNode1_4 = HUtil.copyIfNecessary(quotedNode_2);
          } else {
            _parameterValues_129834374.add(quotedNode_2);
            quotedNode1_4 = quotedNode_2;
          }
          if (quotedNode1_4 != null) {
            quotedNode_1.addChild("icon", HUtil.copyIfNecessary(quotedNode1_4));
          }
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }

  public static class QuotationClass_st4ewd_a0a0d0a0b0b0a {
    public QuotationClass_st4ewd_a0a0d0a0b0b0a() {
    }

    public SNode createNode(Object parameter_3) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.plugin.structure.IconResourceReference", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setReferent("declaration", (SNode) parameter_3);
        result = quotedNode1_2;
      }
      return result;
    }
  }
}
