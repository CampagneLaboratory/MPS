package jetbrains.mps.lang.plugin.refactorings;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.BaseRefactoring;
import jetbrains.mps.refactoring.framework.IRefactoringTarget;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class SortKeymapMembers extends BaseRefactoring {
  public SortKeymapMembers() {
  }

  public IRefactoringTarget getRefactoringTarget() {
    return new SortKeymapMembers_Target();
  }

  public String getUserFriendlyName() {
    return "Sort Members";
  }

  public void refactor(final RefactoringContext refactoringContext) {
    SNode node = refactoringContext.getSelectedNode();
    List<SNode> copy = ListSequence.fromListWithValues(new ArrayList<SNode>(), SLinkOperations.getTargets(node, "shortcutChange", true));
    ListSequence.fromList(SLinkOperations.getTargets(node, "shortcutChange", true)).clear();
    ListSequence.fromList(SLinkOperations.getTargets(node, "shortcutChange", true)).addSequence(ListSequence.fromList(copy).sort(new ISelector<SNode, Boolean>() {
      public Boolean select(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.plugin.structure.ParameterizedShortcutChange");
      }
    }, true).alsoSort(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return SPropertyOperations.getString(SLinkOperations.getTarget(it, "action", false), "name");
      }
    }, true));
  }
}
