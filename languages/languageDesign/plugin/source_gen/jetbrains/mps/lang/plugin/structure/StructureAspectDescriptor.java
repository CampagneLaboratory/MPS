package jetbrains.mps.lang.plugin.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptActionAccessOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ActionAccessOperation").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("action").alias("action<<{action}>>", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptActionConstructionParameterDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ActionConstructionParameterDeclaration").super_("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierFieldDeclaration").parents("jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierFieldDeclaration", "jetbrains.mps.baseLanguage.classifiers.structure.IMember").children(new String[]{"toStringFunction"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptActionConstructorParameterReferenceOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ActionConstructorParameterReferenceOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IMemberOperation").references("declaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptActionDataParameterDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ActionDataParameterDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IMember", "jetbrains.mps.lang.plugin.structure.ActionParameter").references("key").alias("simple parameter (java class)", "").create();
  /*package*/ final ConceptDescriptor myConceptActionDataParameterReferenceOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ActionDataParameterReferenceOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IMemberOperation").references("parameterDeclaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptActionDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ActionDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier", "jetbrains.mps.lang.checkedName.structure.ICheckedNamePolicy", "jetbrains.mps.lang.core.structure.ScopeProvider").properties("caption", "description", "mnemonic", "isAlwaysVisible", "outsideCommandExecution").children(new String[]{"updateBlock", "icon", "executeFunction", "methodDeclaration", "parameter", "constructionParameter", "places"}, new boolean[]{false, false, false, true, true, true, true}).alias("Action", "").helpURL("http://confluence.jetbrains.com/display/MPSD31/Plugin#Plugin-actionsandactiongroups").create();
  /*package*/ final ConceptDescriptor myConceptActionGroupDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ActionGroupDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.plugin.structure.ActionGroupMember", "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier", "jetbrains.mps.lang.checkedName.structure.ICheckedNamePolicy").properties("caption", "mnemonic", "isInternal", "isPopup", "isInvisibleWhenDisabled", "isPluginXmlGroup").children(new String[]{"modifier", "contents"}, new boolean[]{true, false}).alias("Group", "").create();
  /*package*/ final ConceptDescriptor myConceptActionGroupMember = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ActionGroupMember").interface_().create();
  /*package*/ final ConceptDescriptor myConceptActionGroupRef = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ActionGroupRef").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("group").create();
  /*package*/ final ConceptDescriptor myConceptActionInstance = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ActionInstance").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.plugin.structure.ActionGroupMember").references("action").children(new String[]{"actualParameter"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptActionParameter = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ActionParameter").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").properties("isOptional").children(new String[]{"condition"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptActionParameterCondition = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ActionParameterCondition").interface_().create();
  /*package*/ final ConceptDescriptor myConceptActionParameterDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ActionParameterDeclaration").super_("jetbrains.mps.baseLanguage.structure.FieldDeclaration").parents("jetbrains.mps.baseLanguage.structure.FieldDeclaration", "jetbrains.mps.baseLanguage.classifiers.structure.IMember", "jetbrains.mps.lang.plugin.structure.ActionParameter").alias("complex parameter (node<>,...)", "").create();
  /*package*/ final ConceptDescriptor myConceptActionParameterReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ActionParameterReference").super_("jetbrains.mps.baseLanguage.structure.VariableReference").parents("jetbrains.mps.baseLanguage.structure.VariableReference").references("parameter").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptActionParameterReferenceOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ActionParameterReferenceOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IMemberOperation").references("parameterDeclaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptActionPlaceSpecification = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ActionPlaceSpecification").interface_().create();
  /*package*/ final ConceptDescriptor myConceptActionReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ActionReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("actionDeclaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptActionType = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ActionType").super_("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").parents("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").references("action").alias("action<<{action}>>", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAddElementStatement = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.AddElementStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"expression"}, new boolean[]{false}).alias("addJavaAction", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAddKeystrokeStatement = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.AddKeystrokeStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"stroke"}, new boolean[]{false}).alias("addKeystroke", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAddStatement = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.AddStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"item"}, new boolean[]{false}).alias("add", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAddTabOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.AddTabOperation").super_("jetbrains.mps.lang.plugin.structure.TabbedToolOperation").parents("jetbrains.mps.lang.plugin.structure.TabbedToolOperation", "jetbrains.mps.baseLanguage.structure.IOperation").children(new String[]{"tab"}, new boolean[]{false}).alias("addTab", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBaseNodeBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.BaseNodeBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("base node", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBaseProjectOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.BaseProjectOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBaseToolDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.BaseToolDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier", "jetbrains.mps.lang.checkedName.structure.ICheckedNamePolicy").properties("caption", "number", "position", "icon").children(new String[]{"methodDeclaration", "fieldDeclaration", "toolInitBlock", "toolDisposeBlock", "toolIcon"}, new boolean[]{true, true, false, false, false}).abstract_().alias("Base Tool", "").create();
  /*package*/ final ConceptDescriptor myConceptBuildGroupBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.BuildGroupBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction", "jetbrains.mps.lang.plugin.structure.GroupContents").alias("build", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptButtonCreator = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ButtonCreator").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"action"}, new boolean[]{false}).alias("button", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCloseTabOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.CloseTabOperation").super_("jetbrains.mps.lang.plugin.structure.TabbedToolOperation").parents("jetbrains.mps.lang.plugin.structure.TabbedToolOperation").children(new String[]{"componentExpression"}, new boolean[]{false}).alias("closeTab", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptCondition = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ConceptCondition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.plugin.structure.ActionParameterCondition").references("concept").alias("concept", "").create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_AnActionEvent = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_AnActionEvent").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("event", "function parameter").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_Concept = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_Concept").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("concept", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_CreatorType = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_CreatorType").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_IModule = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_IModule").super_("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_CreatorType").parents("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_CreatorType", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("module", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_MPSProject = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_MPSProject").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("project", "MPS project").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_Model = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_Model").super_("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_CreatorType").parents("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_CreatorType", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("model", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_OperationContext = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_OperationContext").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("context", "function parameter").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_PreferencePage_component = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_PreferencePage_component").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("component", "UI component of the page").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_Project = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_Project").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("project", "IDEA project").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_node = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_node").super_("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_CreatorType").parents("jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_CreatorType", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("node", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCreateNodeAspectBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.CreateNodeAspectBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("create", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCreateTabBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.CreateTabBlock").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("commandOnCreate").children(new String[]{"conceptsBlock", "createBlock"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptCustomCondition = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.CustomCondition").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction", "jetbrains.mps.lang.plugin.structure.ActionParameterCondition").alias("custom precondition", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDisposeBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.DisposeBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("dispose", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDoUpdateBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.DoUpdateBlock").super_("jetbrains.mps.lang.plugin.structure.UpdateBlock").parents("jetbrains.mps.lang.plugin.structure.UpdateBlock").alias("update", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptEditableModel = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.EditableModel").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.plugin.structure.ActionParameterCondition").alias("editable", "").create();
  /*package*/ final ConceptDescriptor myConceptEditorTab = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.EditorTab").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.checkedName.structure.ICheckedNamePolicy").properties("shortcutChar", "commandOnCreate").references("baseNodeConcept").children(new String[]{"icon", "order", "listenBlock", "baseNodeBlock", "isApplicableBlock", "nodesBlock", "createTabBlock", "conceptsBlock", "createBlock"}, new boolean[]{false, false, false, false, false, false, false, false, false}).create();
  /*package*/ final ConceptDescriptor myConceptEditorTabReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.EditorTabReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("editorTab").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptElementListContents = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ElementListContents").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.plugin.structure.GroupContents").children(new String[]{"reference"}, new boolean[]{true}).alias("element list", "").create();
  /*package*/ final ConceptDescriptor myConceptEnumerateChildrenFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.EnumerateChildrenFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("enumerateChildren", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptEverywhereActionPlace = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.EverywhereActionPlace").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.plugin.structure.ActionPlaceSpecification").alias("everywhere", "").create();
  /*package*/ final ConceptDescriptor myConceptExecuteBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ExecuteBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("execute", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetComponentBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.GetComponentBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("getComponent", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetConceptsBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.GetConceptsBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("getConcepts", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetGroupOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.GetGroupOperation").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("group").alias("actionGroup<<{group}>>", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetNodeBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.GetNodeBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction", "jetbrains.mps.lang.plugin.structure.NodesBlock").alias("getNode", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetNodesBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.GetNodesBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction", "jetbrains.mps.lang.plugin.structure.NodesBlock").alias("getNodes", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetSelectedTabOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.GetSelectedTabOperation").super_("jetbrains.mps.lang.plugin.structure.TabbedToolOperation").parents("jetbrains.mps.lang.plugin.structure.TabbedToolOperation").alias("getSelectedTab", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGroupAccessOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.GroupAccessOperation").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("group").alias("group<<{group}>>", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGroupAnchor = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.GroupAnchor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.plugin.structure.ActionGroupMember").alias("->", "extension point").create();
  /*package*/ final ConceptDescriptor myConceptGroupContents = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.GroupContents").interface_().create();
  /*package*/ final ConceptDescriptor myConceptGroupType = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.GroupType").super_("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").parents("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").references("actionGroup").alias("actiongroup<<{actionGroup}>>", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIdeaActionsDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.IdeaActionsDescriptor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"keymapsRef", "actionGroups"}, new boolean[]{true, true}).alias("actions", "").create();
  /*package*/ final ConceptDescriptor myConceptIdeaConfigurationXml = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.IdeaConfigurationXml").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"actions"}, new boolean[]{false}).alias("IdeaComponents.xml", "").create();
  /*package*/ final ConceptDescriptor myConceptIdeaInitializerDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.IdeaInitializerDescriptor").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("id", "descripttion", "version", "vendor", "vendorUrl", "vendorLogo", "ideaVersion", "loadModules", "handleErrors").children(new String[]{"dependency", "actions"}, new boolean[]{true, false}).create();
  /*package*/ final ConceptDescriptor myConceptIdeaPluginDependency = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.IdeaPluginDependency").super_("jetbrains.mps.lang.plugin.structure.PluginDependency").parents("jetbrains.mps.lang.plugin.structure.PluginDependency").properties("pluginId").create();
  /*package*/ final ConceptDescriptor myConceptInitBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.InitBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("init", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInterfaceExtentionPoint = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.InterfaceExtentionPoint").super_("jetbrains.mps.lang.plugin.structure.GroupAnchor").parents("jetbrains.mps.lang.plugin.structure.GroupAnchor", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"pointID"}, new boolean[]{false}).alias("bootstrap ->", "").create();
  /*package*/ final ConceptDescriptor myConceptInterfaceGroup = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.InterfaceGroup").super_("jetbrains.mps.lang.plugin.structure.ActionGroupDeclaration").parents("jetbrains.mps.lang.plugin.structure.ActionGroupDeclaration", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"groupID", "contents"}, new boolean[]{false, false}).alias("Bootstrap Group", "").create();
  /*package*/ final ConceptDescriptor myConceptIsApplicableBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.IsApplicableBlock").super_("jetbrains.mps.lang.plugin.structure.UpdateBlock").parents("jetbrains.mps.lang.plugin.structure.UpdateBlock").alias("isApplicable", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIsApplicableTabBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.IsApplicableTabBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("isApplicable", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptKeyMapKeystroke = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.KeyMapKeystroke").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("modifiers", "keycode").create();
  /*package*/ final ConceptDescriptor myConceptKeyStrokeType = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.KeyStrokeType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("keystroke", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptKeymapChangesDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.KeymapChangesDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("keymap", "isPluginXmlKeymap").children(new String[]{"shortcutChange"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptKeymapRef = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.KeymapRef").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("keymap").create();
  /*package*/ final ConceptDescriptor myConceptListenBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ListenBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("listen", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMPSPluginDependency = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.MPSPluginDependency").super_("jetbrains.mps.lang.plugin.structure.PluginDependency").parents("jetbrains.mps.lang.plugin.structure.PluginDependency").references("plugin").create();
  /*package*/ final ConceptDescriptor myConceptModificationStatement = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ModificationStatement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("modifiedGroup", "point").alias("add", "").create();
  /*package*/ final ConceptDescriptor myConceptNewCreateBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.NewCreateBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("create", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNodesBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.NodesBlock").interface_().create();
  /*package*/ final ConceptDescriptor myConceptNonDumbAwareActions = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.NonDumbAwareActions").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"actions"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptOnAfterReadBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.OnAfterReadBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("after read", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptOnBeforeWriteBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.OnBeforeWriteBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("before write", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptOrder = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.Order").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.plugin.structure.OrderConstraints", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"tab"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptOrderConstraints = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.OrderConstraints").interface_().create();
  /*package*/ final ConceptDescriptor myConceptOrderReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.OrderReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.plugin.structure.OrderConstraints").references("order").create();
  /*package*/ final ConceptDescriptor myConceptParameterCondition_ConceptFunctionParameter = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ParameterCondition_ConceptFunctionParameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").alias("parameter", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptParameterizedShortcutChange = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ParameterizedShortcutChange").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction", "jetbrains.mps.lang.plugin.structure.ShortcutChange").alias("parameterized", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPersistentPropertyDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.PersistentPropertyDeclaration").super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration", "jetbrains.mps.baseLanguage.classifiers.structure.IMember").create();
  /*package*/ final ConceptDescriptor myConceptPersistentPropertyReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.PersistentPropertyReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.baseLanguage.classifiers.structure.IMemberOperation", "jetbrains.mps.lang.core.structure.BaseConcept").references("propertyDeclaration").alias("", "reference to externalizable property").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPluginDependency = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.PluginDependency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptPopupCreator = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.PopupCreator").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"group"}, new boolean[]{false}).alias("popup", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPreferencePage = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.PreferencePage").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.checkedName.structure.ICheckedNamePolicy").properties("icon", "helpTopic").children(new String[]{"component", "isModifiedBlock", "resetBlock", "commitBlock"}, new boolean[]{false, false, false, false}).create();
  /*package*/ final ConceptDescriptor myConceptPreferencePageCommitBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.PreferencePageCommitBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("commit", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPreferencePageIsModifiedBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.PreferencePageIsModifiedBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("isModified", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPreferencePageResetBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.PreferencePageResetBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("reset", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPreferencesComponentDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.PreferencesComponentDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier").children(new String[]{"persistenPropertyDeclaration", "afterReadBlock", "beforeWriteBlock", "preferencePage"}, new boolean[]{true, false, false, true}).alias("Preferences Component", "").create();
  /*package*/ final ConceptDescriptor myConceptPreferencesComponentType = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.PreferencesComponentType").super_("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").parents("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").references("componentDeclaration").alias("preferenceComponent<<{componentDeclaration}>>", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRequiredCondition = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.RequiredCondition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.plugin.structure.ActionParameterCondition").alias("required", "").create();
  /*package*/ final ConceptDescriptor myConceptSeparator = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.Separator").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.plugin.structure.ActionGroupMember").alias("<--->", "separator").create();
  /*package*/ final ConceptDescriptor myConceptShortcutChange = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ShortcutChange").interface_().references("action").create();
  /*package*/ final ConceptDescriptor myConceptSimpleActionPlace = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.SimpleActionPlace").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.plugin.structure.ActionPlaceSpecification", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("action place", "").create();
  /*package*/ final ConceptDescriptor myConceptSimpleShortcutChange = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.SimpleShortcutChange").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.plugin.structure.ShortcutChange").children(new String[]{"keystroke"}, new boolean[]{true}).alias("simple", "").create();
  /*package*/ final ConceptDescriptor myConceptSmartDisposeClosureParameterDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.SmartDisposeClosureParameterDeclaration").super_("jetbrains.mps.baseLanguage.closures.structure.UnboundClosureParameterDeclaration").parents("jetbrains.mps.baseLanguage.closures.structure.UnboundClosureParameterDeclaration").alias("~ <name>", "smart closure parameter").create();
  /*package*/ final ConceptDescriptor myConceptTabbedToolDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.TabbedToolDeclaration").super_("jetbrains.mps.lang.plugin.structure.BaseToolDeclaration").parents("jetbrains.mps.lang.plugin.structure.BaseToolDeclaration").alias("Tabbed Tool", "").create();
  /*package*/ final ConceptDescriptor myConceptTabbedToolOperation = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.TabbedToolOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptToStringConceptFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ToStringConceptFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("toString", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptToStringParameter = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ToStringParameter").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("object", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptToolActionPlace = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ToolActionPlace").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.plugin.structure.ActionPlaceSpecification", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("tool action place", "").create();
  /*package*/ final ConceptDescriptor myConceptToolDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ToolDeclaration").super_("jetbrains.mps.lang.plugin.structure.BaseToolDeclaration").parents("jetbrains.mps.lang.plugin.structure.BaseToolDeclaration").children(new String[]{"getComponentBlock"}, new boolean[]{false}).alias("Tool", "").create();
  /*package*/ final ConceptDescriptor myConceptToolInstanceExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ToolInstanceExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("instance", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptToolTab = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ToolTab").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"componentExpression", "titleExpression", "iconExpression", "disposeTabClosure"}, new boolean[]{false, false, false, false}).alias("tab", "").create();
  /*package*/ final ConceptDescriptor myConceptToolType = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ToolType").super_("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").parents("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").references("tool").alias("tool<<{tool}>>", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptToolbarCreator = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.ToolbarCreator").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("isHorizontal").children(new String[]{"group"}, new boolean[]{false}).alias("toolbar", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptUpdateBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.UpdateBlock").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptUpdateGroupBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.UpdateGroupBlock").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.plugin.structure.GroupContents").children(new String[]{"updateFunction", "enumerateFunction"}, new boolean[]{false, false}).alias("update", "").create();
  /*package*/ final ConceptDescriptor myConceptUpdateGroupFunction = new ConceptDescriptorBuilder("jetbrains.mps.lang.plugin.structure.UpdateGroupFunction").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("update", "").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptActionAccessOperation, myConceptActionConstructionParameterDeclaration, myConceptActionConstructorParameterReferenceOperation, myConceptActionDataParameterDeclaration, myConceptActionDataParameterReferenceOperation, myConceptActionDeclaration, myConceptActionGroupDeclaration, myConceptActionGroupMember, myConceptActionGroupRef, myConceptActionInstance, myConceptActionParameter, myConceptActionParameterCondition, myConceptActionParameterDeclaration, myConceptActionParameterReference, myConceptActionParameterReferenceOperation, myConceptActionPlaceSpecification, myConceptActionReference, myConceptActionType, myConceptAddElementStatement, myConceptAddKeystrokeStatement, myConceptAddStatement, myConceptAddTabOperation, myConceptBaseNodeBlock, myConceptBaseProjectOperation, myConceptBaseToolDeclaration, myConceptBuildGroupBlock, myConceptButtonCreator, myConceptCloseTabOperation, myConceptConceptCondition, myConceptConceptFunctionParameter_AnActionEvent, myConceptConceptFunctionParameter_Concept, myConceptConceptFunctionParameter_CreatorType, myConceptConceptFunctionParameter_IModule, myConceptConceptFunctionParameter_MPSProject, myConceptConceptFunctionParameter_Model, myConceptConceptFunctionParameter_OperationContext, myConceptConceptFunctionParameter_PreferencePage_component, myConceptConceptFunctionParameter_Project, myConceptConceptFunctionParameter_node, myConceptCreateNodeAspectBlock, myConceptCreateTabBlock, myConceptCustomCondition, myConceptDisposeBlock, myConceptDoUpdateBlock, myConceptEditableModel, myConceptEditorTab, myConceptEditorTabReference, myConceptElementListContents, myConceptEnumerateChildrenFunction, myConceptEverywhereActionPlace, myConceptExecuteBlock, myConceptGetComponentBlock, myConceptGetConceptsBlock, myConceptGetGroupOperation, myConceptGetNodeBlock, myConceptGetNodesBlock, myConceptGetSelectedTabOperation, myConceptGroupAccessOperation, myConceptGroupAnchor, myConceptGroupContents, myConceptGroupType, myConceptIdeaActionsDescriptor, myConceptIdeaConfigurationXml, myConceptIdeaInitializerDescriptor, myConceptIdeaPluginDependency, myConceptInitBlock, myConceptInterfaceExtentionPoint, myConceptInterfaceGroup, myConceptIsApplicableBlock, myConceptIsApplicableTabBlock, myConceptKeyMapKeystroke, myConceptKeyStrokeType, myConceptKeymapChangesDeclaration, myConceptKeymapRef, myConceptListenBlock, myConceptMPSPluginDependency, myConceptModificationStatement, myConceptNewCreateBlock, myConceptNodesBlock, myConceptNonDumbAwareActions, myConceptOnAfterReadBlock, myConceptOnBeforeWriteBlock, myConceptOrder, myConceptOrderConstraints, myConceptOrderReference, myConceptParameterCondition_ConceptFunctionParameter, myConceptParameterizedShortcutChange, myConceptPersistentPropertyDeclaration, myConceptPersistentPropertyReference, myConceptPluginDependency, myConceptPopupCreator, myConceptPreferencePage, myConceptPreferencePageCommitBlock, myConceptPreferencePageIsModifiedBlock, myConceptPreferencePageResetBlock, myConceptPreferencesComponentDeclaration, myConceptPreferencesComponentType, myConceptRequiredCondition, myConceptSeparator, myConceptShortcutChange, myConceptSimpleActionPlace, myConceptSimpleShortcutChange, myConceptSmartDisposeClosureParameterDeclaration, myConceptTabbedToolDeclaration, myConceptTabbedToolOperation, myConceptToStringConceptFunction, myConceptToStringParameter, myConceptToolActionPlace, myConceptToolDeclaration, myConceptToolInstanceExpression, myConceptToolTab, myConceptToolType, myConceptToolbarCreator, myConceptUpdateBlock, myConceptUpdateGroupBlock, myConceptUpdateGroupFunction);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0pe, conceptFqName)) {
      case 0:
        return myConceptActionAccessOperation;
      case 1:
        return myConceptActionConstructionParameterDeclaration;
      case 2:
        return myConceptActionConstructorParameterReferenceOperation;
      case 3:
        return myConceptActionDataParameterDeclaration;
      case 4:
        return myConceptActionDataParameterReferenceOperation;
      case 5:
        return myConceptActionDeclaration;
      case 6:
        return myConceptActionGroupDeclaration;
      case 7:
        return myConceptActionGroupMember;
      case 8:
        return myConceptActionGroupRef;
      case 9:
        return myConceptActionInstance;
      case 10:
        return myConceptActionParameter;
      case 11:
        return myConceptActionParameterCondition;
      case 12:
        return myConceptActionParameterDeclaration;
      case 13:
        return myConceptActionParameterReference;
      case 14:
        return myConceptActionParameterReferenceOperation;
      case 15:
        return myConceptActionPlaceSpecification;
      case 16:
        return myConceptActionReference;
      case 17:
        return myConceptActionType;
      case 18:
        return myConceptAddElementStatement;
      case 19:
        return myConceptAddKeystrokeStatement;
      case 20:
        return myConceptAddStatement;
      case 21:
        return myConceptAddTabOperation;
      case 22:
        return myConceptBaseNodeBlock;
      case 23:
        return myConceptBaseProjectOperation;
      case 24:
        return myConceptBaseToolDeclaration;
      case 25:
        return myConceptBuildGroupBlock;
      case 26:
        return myConceptButtonCreator;
      case 27:
        return myConceptCloseTabOperation;
      case 28:
        return myConceptConceptCondition;
      case 29:
        return myConceptConceptFunctionParameter_AnActionEvent;
      case 30:
        return myConceptConceptFunctionParameter_Concept;
      case 31:
        return myConceptConceptFunctionParameter_CreatorType;
      case 32:
        return myConceptConceptFunctionParameter_IModule;
      case 33:
        return myConceptConceptFunctionParameter_MPSProject;
      case 34:
        return myConceptConceptFunctionParameter_Model;
      case 35:
        return myConceptConceptFunctionParameter_OperationContext;
      case 36:
        return myConceptConceptFunctionParameter_PreferencePage_component;
      case 37:
        return myConceptConceptFunctionParameter_Project;
      case 38:
        return myConceptConceptFunctionParameter_node;
      case 39:
        return myConceptCreateNodeAspectBlock;
      case 40:
        return myConceptCreateTabBlock;
      case 41:
        return myConceptCustomCondition;
      case 42:
        return myConceptDisposeBlock;
      case 43:
        return myConceptDoUpdateBlock;
      case 44:
        return myConceptEditableModel;
      case 45:
        return myConceptEditorTab;
      case 46:
        return myConceptEditorTabReference;
      case 47:
        return myConceptElementListContents;
      case 48:
        return myConceptEnumerateChildrenFunction;
      case 49:
        return myConceptEverywhereActionPlace;
      case 50:
        return myConceptExecuteBlock;
      case 51:
        return myConceptGetComponentBlock;
      case 52:
        return myConceptGetConceptsBlock;
      case 53:
        return myConceptGetGroupOperation;
      case 54:
        return myConceptGetNodeBlock;
      case 55:
        return myConceptGetNodesBlock;
      case 56:
        return myConceptGetSelectedTabOperation;
      case 57:
        return myConceptGroupAccessOperation;
      case 58:
        return myConceptGroupAnchor;
      case 59:
        return myConceptGroupContents;
      case 60:
        return myConceptGroupType;
      case 61:
        return myConceptIdeaActionsDescriptor;
      case 62:
        return myConceptIdeaConfigurationXml;
      case 63:
        return myConceptIdeaInitializerDescriptor;
      case 64:
        return myConceptIdeaPluginDependency;
      case 65:
        return myConceptInitBlock;
      case 66:
        return myConceptInterfaceExtentionPoint;
      case 67:
        return myConceptInterfaceGroup;
      case 68:
        return myConceptIsApplicableBlock;
      case 69:
        return myConceptIsApplicableTabBlock;
      case 70:
        return myConceptKeyMapKeystroke;
      case 71:
        return myConceptKeyStrokeType;
      case 72:
        return myConceptKeymapChangesDeclaration;
      case 73:
        return myConceptKeymapRef;
      case 74:
        return myConceptListenBlock;
      case 75:
        return myConceptMPSPluginDependency;
      case 76:
        return myConceptModificationStatement;
      case 77:
        return myConceptNewCreateBlock;
      case 78:
        return myConceptNodesBlock;
      case 79:
        return myConceptNonDumbAwareActions;
      case 80:
        return myConceptOnAfterReadBlock;
      case 81:
        return myConceptOnBeforeWriteBlock;
      case 82:
        return myConceptOrder;
      case 83:
        return myConceptOrderConstraints;
      case 84:
        return myConceptOrderReference;
      case 85:
        return myConceptParameterCondition_ConceptFunctionParameter;
      case 86:
        return myConceptParameterizedShortcutChange;
      case 87:
        return myConceptPersistentPropertyDeclaration;
      case 88:
        return myConceptPersistentPropertyReference;
      case 89:
        return myConceptPluginDependency;
      case 90:
        return myConceptPopupCreator;
      case 91:
        return myConceptPreferencePage;
      case 92:
        return myConceptPreferencePageCommitBlock;
      case 93:
        return myConceptPreferencePageIsModifiedBlock;
      case 94:
        return myConceptPreferencePageResetBlock;
      case 95:
        return myConceptPreferencesComponentDeclaration;
      case 96:
        return myConceptPreferencesComponentType;
      case 97:
        return myConceptRequiredCondition;
      case 98:
        return myConceptSeparator;
      case 99:
        return myConceptShortcutChange;
      case 100:
        return myConceptSimpleActionPlace;
      case 101:
        return myConceptSimpleShortcutChange;
      case 102:
        return myConceptSmartDisposeClosureParameterDeclaration;
      case 103:
        return myConceptTabbedToolDeclaration;
      case 104:
        return myConceptTabbedToolOperation;
      case 105:
        return myConceptToStringConceptFunction;
      case 106:
        return myConceptToStringParameter;
      case 107:
        return myConceptToolActionPlace;
      case 108:
        return myConceptToolDeclaration;
      case 109:
        return myConceptToolInstanceExpression;
      case 110:
        return myConceptToolTab;
      case 111:
        return myConceptToolType;
      case 112:
        return myConceptToolbarCreator;
      case 113:
        return myConceptUpdateBlock;
      case 114:
        return myConceptUpdateGroupBlock;
      case 115:
        return myConceptUpdateGroupFunction;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0pe = new String[]{"jetbrains.mps.lang.plugin.structure.ActionAccessOperation", "jetbrains.mps.lang.plugin.structure.ActionConstructionParameterDeclaration", "jetbrains.mps.lang.plugin.structure.ActionConstructorParameterReferenceOperation", "jetbrains.mps.lang.plugin.structure.ActionDataParameterDeclaration", "jetbrains.mps.lang.plugin.structure.ActionDataParameterReferenceOperation", "jetbrains.mps.lang.plugin.structure.ActionDeclaration", "jetbrains.mps.lang.plugin.structure.ActionGroupDeclaration", "jetbrains.mps.lang.plugin.structure.ActionGroupMember", "jetbrains.mps.lang.plugin.structure.ActionGroupRef", "jetbrains.mps.lang.plugin.structure.ActionInstance", "jetbrains.mps.lang.plugin.structure.ActionParameter", "jetbrains.mps.lang.plugin.structure.ActionParameterCondition", "jetbrains.mps.lang.plugin.structure.ActionParameterDeclaration", "jetbrains.mps.lang.plugin.structure.ActionParameterReference", "jetbrains.mps.lang.plugin.structure.ActionParameterReferenceOperation", "jetbrains.mps.lang.plugin.structure.ActionPlaceSpecification", "jetbrains.mps.lang.plugin.structure.ActionReference", "jetbrains.mps.lang.plugin.structure.ActionType", "jetbrains.mps.lang.plugin.structure.AddElementStatement", "jetbrains.mps.lang.plugin.structure.AddKeystrokeStatement", "jetbrains.mps.lang.plugin.structure.AddStatement", "jetbrains.mps.lang.plugin.structure.AddTabOperation", "jetbrains.mps.lang.plugin.structure.BaseNodeBlock", "jetbrains.mps.lang.plugin.structure.BaseProjectOperation", "jetbrains.mps.lang.plugin.structure.BaseToolDeclaration", "jetbrains.mps.lang.plugin.structure.BuildGroupBlock", "jetbrains.mps.lang.plugin.structure.ButtonCreator", "jetbrains.mps.lang.plugin.structure.CloseTabOperation", "jetbrains.mps.lang.plugin.structure.ConceptCondition", "jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_AnActionEvent", "jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_Concept", "jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_CreatorType", "jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_IModule", "jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_MPSProject", "jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_Model", "jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_OperationContext", "jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_PreferencePage_component", "jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_Project", "jetbrains.mps.lang.plugin.structure.ConceptFunctionParameter_node", "jetbrains.mps.lang.plugin.structure.CreateNodeAspectBlock", "jetbrains.mps.lang.plugin.structure.CreateTabBlock", "jetbrains.mps.lang.plugin.structure.CustomCondition", "jetbrains.mps.lang.plugin.structure.DisposeBlock", "jetbrains.mps.lang.plugin.structure.DoUpdateBlock", "jetbrains.mps.lang.plugin.structure.EditableModel", "jetbrains.mps.lang.plugin.structure.EditorTab", "jetbrains.mps.lang.plugin.structure.EditorTabReference", "jetbrains.mps.lang.plugin.structure.ElementListContents", "jetbrains.mps.lang.plugin.structure.EnumerateChildrenFunction", "jetbrains.mps.lang.plugin.structure.EverywhereActionPlace", "jetbrains.mps.lang.plugin.structure.ExecuteBlock", "jetbrains.mps.lang.plugin.structure.GetComponentBlock", "jetbrains.mps.lang.plugin.structure.GetConceptsBlock", "jetbrains.mps.lang.plugin.structure.GetGroupOperation", "jetbrains.mps.lang.plugin.structure.GetNodeBlock", "jetbrains.mps.lang.plugin.structure.GetNodesBlock", "jetbrains.mps.lang.plugin.structure.GetSelectedTabOperation", "jetbrains.mps.lang.plugin.structure.GroupAccessOperation", "jetbrains.mps.lang.plugin.structure.GroupAnchor", "jetbrains.mps.lang.plugin.structure.GroupContents", "jetbrains.mps.lang.plugin.structure.GroupType", "jetbrains.mps.lang.plugin.structure.IdeaActionsDescriptor", "jetbrains.mps.lang.plugin.structure.IdeaConfigurationXml", "jetbrains.mps.lang.plugin.structure.IdeaInitializerDescriptor", "jetbrains.mps.lang.plugin.structure.IdeaPluginDependency", "jetbrains.mps.lang.plugin.structure.InitBlock", "jetbrains.mps.lang.plugin.structure.InterfaceExtentionPoint", "jetbrains.mps.lang.plugin.structure.InterfaceGroup", "jetbrains.mps.lang.plugin.structure.IsApplicableBlock", "jetbrains.mps.lang.plugin.structure.IsApplicableTabBlock", "jetbrains.mps.lang.plugin.structure.KeyMapKeystroke", "jetbrains.mps.lang.plugin.structure.KeyStrokeType", "jetbrains.mps.lang.plugin.structure.KeymapChangesDeclaration", "jetbrains.mps.lang.plugin.structure.KeymapRef", "jetbrains.mps.lang.plugin.structure.ListenBlock", "jetbrains.mps.lang.plugin.structure.MPSPluginDependency", "jetbrains.mps.lang.plugin.structure.ModificationStatement", "jetbrains.mps.lang.plugin.structure.NewCreateBlock", "jetbrains.mps.lang.plugin.structure.NodesBlock", "jetbrains.mps.lang.plugin.structure.NonDumbAwareActions", "jetbrains.mps.lang.plugin.structure.OnAfterReadBlock", "jetbrains.mps.lang.plugin.structure.OnBeforeWriteBlock", "jetbrains.mps.lang.plugin.structure.Order", "jetbrains.mps.lang.plugin.structure.OrderConstraints", "jetbrains.mps.lang.plugin.structure.OrderReference", "jetbrains.mps.lang.plugin.structure.ParameterCondition_ConceptFunctionParameter", "jetbrains.mps.lang.plugin.structure.ParameterizedShortcutChange", "jetbrains.mps.lang.plugin.structure.PersistentPropertyDeclaration", "jetbrains.mps.lang.plugin.structure.PersistentPropertyReference", "jetbrains.mps.lang.plugin.structure.PluginDependency", "jetbrains.mps.lang.plugin.structure.PopupCreator", "jetbrains.mps.lang.plugin.structure.PreferencePage", "jetbrains.mps.lang.plugin.structure.PreferencePageCommitBlock", "jetbrains.mps.lang.plugin.structure.PreferencePageIsModifiedBlock", "jetbrains.mps.lang.plugin.structure.PreferencePageResetBlock", "jetbrains.mps.lang.plugin.structure.PreferencesComponentDeclaration", "jetbrains.mps.lang.plugin.structure.PreferencesComponentType", "jetbrains.mps.lang.plugin.structure.RequiredCondition", "jetbrains.mps.lang.plugin.structure.Separator", "jetbrains.mps.lang.plugin.structure.ShortcutChange", "jetbrains.mps.lang.plugin.structure.SimpleActionPlace", "jetbrains.mps.lang.plugin.structure.SimpleShortcutChange", "jetbrains.mps.lang.plugin.structure.SmartDisposeClosureParameterDeclaration", "jetbrains.mps.lang.plugin.structure.TabbedToolDeclaration", "jetbrains.mps.lang.plugin.structure.TabbedToolOperation", "jetbrains.mps.lang.plugin.structure.ToStringConceptFunction", "jetbrains.mps.lang.plugin.structure.ToStringParameter", "jetbrains.mps.lang.plugin.structure.ToolActionPlace", "jetbrains.mps.lang.plugin.structure.ToolDeclaration", "jetbrains.mps.lang.plugin.structure.ToolInstanceExpression", "jetbrains.mps.lang.plugin.structure.ToolTab", "jetbrains.mps.lang.plugin.structure.ToolType", "jetbrains.mps.lang.plugin.structure.ToolbarCreator", "jetbrains.mps.lang.plugin.structure.UpdateBlock", "jetbrains.mps.lang.plugin.structure.UpdateGroupBlock", "jetbrains.mps.lang.plugin.structure.UpdateGroupFunction"};
}
