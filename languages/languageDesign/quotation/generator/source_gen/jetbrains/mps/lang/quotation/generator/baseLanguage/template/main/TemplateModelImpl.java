package jetbrains.mps.lang.quotation.generator.baseLanguage.template.main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.runtime.TemplateModel;
import java.util.Collection;
import jetbrains.mps.generator.runtime.TemplateMappingConfiguration;
import jetbrains.mps.generator.runtime.TemplateSwitchMapping;
import jetbrains.mps.generator.runtime.TemplateModule;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.generator.runtime.TemplateUtil;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.generator.runtime.TemplateDeclaration;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.model.SNodeId;
import jetbrains.mps.smodel.SNodePointer;

@Generated
public class TemplateModelImpl implements TemplateModel {
  private final Collection<TemplateMappingConfiguration> mappings;
  private final Collection<TemplateSwitchMapping> switches;
  private final TemplateModule templateModule;
  private final SModelReference model;

  public TemplateModelImpl(TemplateModule module) {
    mappings = TemplateUtil.<TemplateMappingConfiguration>asCollection(new Mappingmain(this), new Mappingpreprocess(this));
    switches = TemplateUtil.<TemplateSwitchMapping>asCollection();
    templateModule = module;
    model = PersistenceFacade.getInstance().createModelReference("r:00000000-0000-4000-0000-011c8959034c(jetbrains.mps.lang.quotation.generator.baseLanguage.template.main@generator)");
  }

  public String getLongName() {
    return "jetbrains.mps.lang.quotation.generator.baseLanguage.template.main";
  }

  public SModelReference getSModelReference() {
    return model;
  }

  public Collection<TemplateMappingConfiguration> getConfigurations() {
    return mappings;
  }

  public Collection<TemplateSwitchMapping> getSwitches() {
    return switches;
  }

  public TemplateDeclaration loadTemplate(SNodeReference template, Object... arguments) {
    if (!(model.equals(template.getModelReference()))) {
      return null;
    }
    SNodeId id = ((SNodePointer) template).getNodeId();
    if (id instanceof jetbrains.mps.smodel.SNodeId.Regular) {
      long idValue = ((jetbrains.mps.smodel.SNodeId.Regular) id).getId();
      if (idValue == 1196351886726L) {
        if (arguments.length != 0) {
          // TODO report `wrong arguments count` 
          return null;
        }
        return new TemplateQuotedNode__to__statementList();
      }
      if (idValue == 1025590056396628814L) {
        if (arguments.length != 0) {
          // TODO report `wrong arguments count` 
          return null;
        }
        return new TemplateQuotation__to__staticMethodCall();
      }
      if (idValue == 1006429225401295242L) {
        if (arguments.length != 0) {
          // TODO report `wrong arguments count` 
          return null;
        }
        return new TemplateNodeBuilder__to__methodCall();
      }
      if (idValue == 429601079676709776L) {
        if (arguments.length != 0) {
          // TODO report `wrong arguments count` 
          return null;
        }
        return new Templatereduce__NodeBuilderNode();
      }
    }
    return null;
  }

  public TemplateModule getModule() {
    return templateModule;
  }
}
