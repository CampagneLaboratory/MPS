package jetbrains.mps.lang.quotation.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.lang.quotation.structure.AbstractAntiquotation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.quotation.structure.Antiquotation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.quotation.structure.ListAntiquotation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.quotation.structure.NodeBuilder", null);
    myFqNameToConcept.put("jetbrains.mps.lang.quotation.structure.NodeBuilderExpression", null);
    myFqNameToConcept.put("jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink", null);
    myFqNameToConcept.put("jetbrains.mps.lang.quotation.structure.NodeBuilderInitPart", null);
    myFqNameToConcept.put("jetbrains.mps.lang.quotation.structure.NodeBuilderInitProperty", null);
    myFqNameToConcept.put("jetbrains.mps.lang.quotation.structure.NodeBuilderList", null);
    myFqNameToConcept.put("jetbrains.mps.lang.quotation.structure.NodeBuilderNode", null);
    myFqNameToConcept.put("jetbrains.mps.lang.quotation.structure.NodeBuilderRef", null);
    myFqNameToConcept.put("jetbrains.mps.lang.quotation.structure.PropertyAntiquotation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.quotation.structure.Quotation", null);
    myFqNameToConcept.put("jetbrains.mps.lang.quotation.structure.ReferenceAntiquotation", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.AbstractAntiquotation").interface_().parents("jetbrains.mps.lang.core.structure.IMetaLevelChanger", "jetbrains.mps.lang.core.structure.IAntisuppressErrors", "jetbrains.mps.lang.core.structure.ScopeProvider").properties("label").children(new String[]{"expression"}, new boolean[]{false}).create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.Antiquotation").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute", "jetbrains.mps.lang.quotation.structure.AbstractAntiquotation").create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.ListAntiquotation").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute", "jetbrains.mps.lang.quotation.structure.AbstractAntiquotation").create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.NodeBuilder").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"quotedNode", "modelToCreate"}, new boolean[]{false, false}).alias("<light quotation>", "").staticScope(StaticScope.NONE).create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.NodeBuilderExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"expression"}, new boolean[]{false}).alias("#", "").staticScope(StaticScope.NONE).create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink").super_("jetbrains.mps.lang.quotation.structure.NodeBuilderInitPart").parents("jetbrains.mps.lang.quotation.structure.NodeBuilderInitPart").references("link").create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.NodeBuilderInitPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"expression"}, new boolean[]{false}).abstract_().create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.NodeBuilderInitProperty").super_("jetbrains.mps.lang.quotation.structure.NodeBuilderInitPart").parents("jetbrains.mps.lang.quotation.structure.NodeBuilderInitPart").references("property").alias("<{property}>", "").create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.NodeBuilderList").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"nodes"}, new boolean[]{true}).alias("[list]", "").staticScope(StaticScope.NONE).create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.NodeBuilderNode").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.ScopeProvider").references("concept").children(new String[]{"values"}, new boolean[]{true}).staticScope(StaticScope.NONE).create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.NodeBuilderRef").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("target").staticScope(StaticScope.NONE).create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.PropertyAntiquotation").super_("jetbrains.mps.lang.core.structure.PropertyAttribute").parents("jetbrains.mps.lang.core.structure.PropertyAttribute", "jetbrains.mps.lang.quotation.structure.AbstractAntiquotation").create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.Quotation").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IMetaLevelChanger", "jetbrains.mps.lang.core.structure.ISuppressErrors").children(new String[]{"quotedNode", "modelToCreate", "nodeId"}, new boolean[]{false, false, false}).alias("<quotation>", "").staticScope(StaticScope.NONE).create();
        break;
      case 13:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.ReferenceAntiquotation").super_("jetbrains.mps.lang.core.structure.LinkAttribute").parents("jetbrains.mps.lang.core.structure.LinkAttribute", "jetbrains.mps.lang.quotation.structure.AbstractAntiquotation").create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.lang.quotation.structure.AbstractAntiquotation", "jetbrains.mps.lang.quotation.structure.Antiquotation", "jetbrains.mps.lang.quotation.structure.ListAntiquotation", "jetbrains.mps.lang.quotation.structure.NodeBuilder", "jetbrains.mps.lang.quotation.structure.NodeBuilderExpression", "jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink", "jetbrains.mps.lang.quotation.structure.NodeBuilderInitPart", "jetbrains.mps.lang.quotation.structure.NodeBuilderInitProperty", "jetbrains.mps.lang.quotation.structure.NodeBuilderList", "jetbrains.mps.lang.quotation.structure.NodeBuilderNode", "jetbrains.mps.lang.quotation.structure.NodeBuilderRef", "jetbrains.mps.lang.quotation.structure.PropertyAntiquotation", "jetbrains.mps.lang.quotation.structure.Quotation", "jetbrains.mps.lang.quotation.structure.ReferenceAntiquotation"};
}
