package jetbrains.mps.lang.quotation.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractAntiquotation = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.AbstractAntiquotation").interface_().parents("jetbrains.mps.lang.core.structure.IMetaLevelChanger", "jetbrains.mps.lang.core.structure.IAntisuppressErrors", "jetbrains.mps.lang.core.structure.ScopeProvider").properties("label").children(new String[]{"expression"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptAntiquotation = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.Antiquotation").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute", "jetbrains.mps.lang.quotation.structure.AbstractAntiquotation").create();
  /*package*/ final ConceptDescriptor myConceptListAntiquotation = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.ListAntiquotation").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute", "jetbrains.mps.lang.quotation.structure.AbstractAntiquotation").create();
  /*package*/ final ConceptDescriptor myConceptNodeBuilder = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.NodeBuilder").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"quotedNode", "modelToCreate"}, new boolean[]{false, false}).alias("<light quotation>", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNodeBuilderExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.NodeBuilderExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"expression"}, new boolean[]{false}).alias("#", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNodeBuilderInitLink = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink").super_("jetbrains.mps.lang.quotation.structure.NodeBuilderInitPart").parents("jetbrains.mps.lang.quotation.structure.NodeBuilderInitPart").references("link").create();
  /*package*/ final ConceptDescriptor myConceptNodeBuilderInitPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.NodeBuilderInitPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"expression"}, new boolean[]{false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptNodeBuilderInitProperty = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.NodeBuilderInitProperty").super_("jetbrains.mps.lang.quotation.structure.NodeBuilderInitPart").parents("jetbrains.mps.lang.quotation.structure.NodeBuilderInitPart").references("property").alias("<{property}>", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeBuilderList = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.NodeBuilderList").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"nodes"}, new boolean[]{true}).alias("[list]", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNodeBuilderNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.NodeBuilderNode").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.ScopeProvider").references("concept").children(new String[]{"values"}, new boolean[]{true}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptNodeBuilderRef = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.NodeBuilderRef").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("target").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPropertyAntiquotation = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.PropertyAntiquotation").super_("jetbrains.mps.lang.core.structure.PropertyAttribute").parents("jetbrains.mps.lang.core.structure.PropertyAttribute", "jetbrains.mps.lang.quotation.structure.AbstractAntiquotation").create();
  /*package*/ final ConceptDescriptor myConceptQuotation = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.Quotation").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IMetaLevelChanger", "jetbrains.mps.lang.core.structure.ISuppressErrors").children(new String[]{"quotedNode", "modelToCreate", "nodeId"}, new boolean[]{false, false, false}).alias("<quotation>", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptReferenceAntiquotation = new ConceptDescriptorBuilder("jetbrains.mps.lang.quotation.structure.ReferenceAntiquotation").super_("jetbrains.mps.lang.core.structure.LinkAttribute").parents("jetbrains.mps.lang.core.structure.LinkAttribute", "jetbrains.mps.lang.quotation.structure.AbstractAntiquotation").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractAntiquotation, myConceptAntiquotation, myConceptListAntiquotation, myConceptNodeBuilder, myConceptNodeBuilderExpression, myConceptNodeBuilderInitLink, myConceptNodeBuilderInitPart, myConceptNodeBuilderInitProperty, myConceptNodeBuilderList, myConceptNodeBuilderNode, myConceptNodeBuilderRef, myConceptPropertyAntiquotation, myConceptQuotation, myConceptReferenceAntiquotation);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0r, conceptFqName)) {
      case 0:
        return myConceptAbstractAntiquotation;
      case 1:
        return myConceptAntiquotation;
      case 2:
        return myConceptListAntiquotation;
      case 3:
        return myConceptNodeBuilder;
      case 4:
        return myConceptNodeBuilderExpression;
      case 5:
        return myConceptNodeBuilderInitLink;
      case 6:
        return myConceptNodeBuilderInitPart;
      case 7:
        return myConceptNodeBuilderInitProperty;
      case 8:
        return myConceptNodeBuilderList;
      case 9:
        return myConceptNodeBuilderNode;
      case 10:
        return myConceptNodeBuilderRef;
      case 11:
        return myConceptPropertyAntiquotation;
      case 12:
        return myConceptQuotation;
      case 13:
        return myConceptReferenceAntiquotation;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0r = new String[]{"jetbrains.mps.lang.quotation.structure.AbstractAntiquotation", "jetbrains.mps.lang.quotation.structure.Antiquotation", "jetbrains.mps.lang.quotation.structure.ListAntiquotation", "jetbrains.mps.lang.quotation.structure.NodeBuilder", "jetbrains.mps.lang.quotation.structure.NodeBuilderExpression", "jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink", "jetbrains.mps.lang.quotation.structure.NodeBuilderInitPart", "jetbrains.mps.lang.quotation.structure.NodeBuilderInitProperty", "jetbrains.mps.lang.quotation.structure.NodeBuilderList", "jetbrains.mps.lang.quotation.structure.NodeBuilderNode", "jetbrains.mps.lang.quotation.structure.NodeBuilderRef", "jetbrains.mps.lang.quotation.structure.PropertyAntiquotation", "jetbrains.mps.lang.quotation.structure.Quotation", "jetbrains.mps.lang.quotation.structure.ReferenceAntiquotation"};
}
