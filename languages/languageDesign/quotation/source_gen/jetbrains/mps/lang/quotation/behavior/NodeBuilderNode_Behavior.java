/*
 * Copyright 2003-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.lang.quotation.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.scope.EmptyScope;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class NodeBuilderNode_Behavior {
  public static void init(SNode thisNode) {
  }

  public static Scope virtual_getScope_3734116213129936182(SNode thisNode, SNode kind, SNode child) {
    if (kind == SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.PropertyDeclaration")) {
      if ((SLinkOperations.getTarget(thisNode, "concept", false) == null)) {
        return new EmptyScope();
      }
      return ListScope.forNamedElements(AbstractConceptDeclaration_Behavior.call_getPropertyDeclarations_1213877394546(SLinkOperations.getTarget(thisNode, "concept", false)));
    }
    if (kind == SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.structure.structure.LinkDeclaration")) {
      if ((SLinkOperations.getTarget(thisNode, "concept", false) == null)) {
        return new EmptyScope();
      }
      return new ListScope(AbstractConceptDeclaration_Behavior.call_getLinkDeclarations_1213877394480(SLinkOperations.getTarget(thisNode, "concept", false))) {
        public String getName(SNode child) {
          return SPropertyOperations.getString(SNodeOperations.cast(child, "jetbrains.mps.lang.structure.structure.LinkDeclaration"), "role");
        }
      };
    }
    return null;
  }

  public static Iterable<SNode> call_getExternalExpressions_1006429225401327586(SNode thisNode) {
    List<SNode> result = new ArrayList<SNode>();
    NodeBuilderNode_Behavior.call_collectExternalExpressions_1006429225401327680(thisNode, result);
    return result;
  }

  public static void call_collectExternalExpressions_1006429225401327680(SNode thisNode, List<SNode> list) {
    for (SNode v : ListSequence.fromList(SLinkOperations.getTargets(thisNode, "values", true))) {
      if (SNodeOperations.isInstanceOf(v, "jetbrains.mps.lang.quotation.structure.NodeBuilderInitProperty")) {
        SNode pe = SLinkOperations.getTarget(SNodeOperations.cast(v, "jetbrains.mps.lang.quotation.structure.NodeBuilderInitProperty"), "expression", true);
        if (!(SNodeOperations.isInstanceOf(pe, "jetbrains.mps.baseLanguage.structure.IntegerConstant") || SNodeOperations.isInstanceOf(pe, "jetbrains.mps.baseLanguage.structure.StringLiteral") || SNodeOperations.isInstanceOf(pe, "jetbrains.mps.baseLanguage.structure.BooleanConstant"))) {
          ListSequence.fromList(list).addElement(pe);
        }
      } else if (SNodeOperations.isInstanceOf(v, "jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink")) {
        SNode expr = SLinkOperations.getTarget(SNodeOperations.cast(v, "jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink"), "expression", true);
        if (SNodeOperations.isInstanceOf(expr, "jetbrains.mps.lang.quotation.structure.NodeBuilderList")) {
          for (SNode n : ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(expr, "jetbrains.mps.lang.quotation.structure.NodeBuilderList"), "nodes", true))) {
            if (SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.quotation.structure.NodeBuilderNode")) {
              NodeBuilderNode_Behavior.call_collectExternalExpressions_1006429225401327680(SNodeOperations.cast(n, "jetbrains.mps.lang.quotation.structure.NodeBuilderNode"), list);
            } else if (SNodeOperations.isInstanceOf(n, "jetbrains.mps.lang.quotation.structure.NodeBuilderExpression")) {
              ListSequence.fromList(list).addElement(SLinkOperations.getTarget(SNodeOperations.cast(n, "jetbrains.mps.lang.quotation.structure.NodeBuilderExpression"), "expression", true));
            }
          }
        } else if (SNodeOperations.isInstanceOf(expr, "jetbrains.mps.lang.quotation.structure.NodeBuilderNode")) {
          NodeBuilderNode_Behavior.call_collectExternalExpressions_1006429225401327680(SNodeOperations.cast(expr, "jetbrains.mps.lang.quotation.structure.NodeBuilderNode"), list);
        } else if (SNodeOperations.isInstanceOf(expr, "jetbrains.mps.lang.quotation.structure.NodeBuilderExpression")) {
          ListSequence.fromList(list).addElement(SLinkOperations.getTarget(SNodeOperations.cast(expr, "jetbrains.mps.lang.quotation.structure.NodeBuilderExpression"), "expression", true));
        }
      }
    }
  }
}
