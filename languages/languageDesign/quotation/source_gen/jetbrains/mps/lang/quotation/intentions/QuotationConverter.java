package jetbrains.mps.lang.quotation.intentions;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Collections;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import jetbrains.mps.lang.structure.behavior.DataTypeDeclaration_Behavior;
import jetbrains.mps.util.NameUtil;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.smodel.search.SModelSearchUtil;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.structure.behavior.LinkDeclaration_Behavior;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class QuotationConverter {
  private SNode quotation;

  public QuotationConverter(SNode quotation) {
    this.quotation = quotation;
  }

  public SNode convert() {
    SNode node = convert(SLinkOperations.getTarget(quotation, "quotedNode", true));
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.lang.quotation.structure.NodeBuilderNode"))) {
      return node;
    }

    SNode q = SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilder", null);
    SLinkOperations.setTarget(q, "quotedNode", SNodeOperations.cast(node, "jetbrains.mps.lang.quotation.structure.NodeBuilderNode"), true);
    SLinkOperations.setTarget(q, "modelToCreate", SLinkOperations.getTarget(quotation, "modelToCreate", true), true);
    return q;
  }

  private SNode convert(SNode quotationNode) {
    if (quotationNode == null) {
      return null;
    }
    SNode aq = AttributeOperations.getAttribute(quotationNode, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.quotation.structure.Antiquotation")));
    if ((aq != null)) {
      SNode expr = SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderExpression", null);
      SLinkOperations.setTarget(expr, "expression", SLinkOperations.getTarget(aq, "expression", true), true);
      return expr;
    }
    SNode la = AttributeOperations.getAttribute(quotationNode, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.quotation.structure.ListAntiquotation")));
    if ((la != null)) {
      SNode expr = SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderExpression", null);
      SLinkOperations.setTarget(expr, "expression", SLinkOperations.getTarget(la, "expression", true), true);
      return expr;
    }

    SNode result = SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderNode", null);
    SLinkOperations.setTarget(result, "concept", SNodeOperations.getConceptDeclaration(quotationNode), false);

    List<String> propertyNames = ListSequence.fromListWithValues(new ArrayList<String>(), quotationNode.getPropertyNames());
    Collections.sort(propertyNames);
    for (String property : propertyNames) {
      SNode attribute = AttributeOperations.getAttribute(quotationNode, new IAttributeDescriptor.PropertyAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.quotation.structure.PropertyAntiquotation"), property));
      SNode pval = SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderInitProperty", null);
      SLinkOperations.setTarget(pval, "property", AbstractConceptDeclaration_Behavior.call_findPropertyDeclaration_1219835742593(SLinkOperations.getTarget(result, "concept", false), property), false);
      if (attribute != null) {
        SLinkOperations.setTarget(pval, "expression", SLinkOperations.getTarget(attribute, "expression", true), true);
      } else {
        SNode dataType = SLinkOperations.getTarget(SLinkOperations.getTarget(pval, "property", false), "dataType", false);
        SLinkOperations.setTarget(pval, "expression", (DataTypeDeclaration_Behavior.call_isSimpleBoolean_1220268891062(dataType) ?
          _quotation_createNode_aytayy_a0a1a0d0l0d(quotationNode.getProperty(property)) :
          (DataTypeDeclaration_Behavior.call_isSimpleInteger_1220268868375(dataType) ?
            _quotation_createNode_aytayy_a0a0b0a3a11a3(quotationNode.getProperty(property)) :
            _quotation_createNode_aytayy_a0a0b0a3a11a3_0(NameUtil.escapeString(quotationNode.getProperty(property)))
          )
        ), true);
      }
      ListSequence.fromList(SLinkOperations.getTargets(result, "values", true)).addElement(pval);
    }
    Set<String> seenRoles = SetSequence.fromSet(new HashSet<String>());
    for (SReference ref : ListSequence.fromList(SNodeOperations.getReferences(quotationNode))) {
      seenRoles.add(SLinkOperations.getRole(ref));
      SNode refattr = AttributeOperations.getAttribute(quotationNode, new IAttributeDescriptor.LinkAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.lang.quotation.structure.ReferenceAntiquotation"), SLinkOperations.getRole(ref)));
      SNode lval = SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink", null);
      SLinkOperations.setTarget(lval, "link", SNodeOperations.as(SModelSearchUtil.findMostSpecificLinkDeclaration(SLinkOperations.getTarget(result, "concept", false), SLinkOperations.getRole(ref)), "jetbrains.mps.lang.structure.structure.LinkDeclaration"), false);
      if (refattr != null) {
        SNode nbexpr = SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderExpression", null);
        SLinkOperations.setTarget(nbexpr, "expression", SLinkOperations.getTarget(refattr, "expression", true), true);
        SLinkOperations.setTarget(lval, "expression", nbexpr, true);
      } else {
        SLinkOperations.setTarget(lval, "expression", SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderRef", null), true);
        SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(lval, "expression", true), "jetbrains.mps.lang.quotation.structure.NodeBuilderRef"), "target", SNodeOperations.as(SLinkOperations.getTargetNode(ref), "jetbrains.mps.lang.core.structure.INamedConcept"), false);
      }
      ListSequence.fromList(SLinkOperations.getTargets(result, "values", true)).addElement(lval);
    }

    for (SNode refAQ : ListSequence.fromList(SNodeOperations.getChildren(quotationNode)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.lang.quotation.structure.ReferenceAntiquotation");
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SNodeOperations.cast(it, "jetbrains.mps.lang.quotation.structure.ReferenceAntiquotation");
      }
    })) {
      if (!(seenRoles.add(SPropertyOperations.getString(refAQ, "linkRole")))) {
        continue;
      }
      seenRoles.add(SPropertyOperations.getString(refAQ, "linkRole"));
      SNode lval = SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink", null);
      SLinkOperations.setTarget(lval, "link", SNodeOperations.as(SModelSearchUtil.findMostSpecificLinkDeclaration(SLinkOperations.getTarget(result, "concept", false), SPropertyOperations.getString(refAQ, "linkRole")), "jetbrains.mps.lang.structure.structure.LinkDeclaration"), false);
      SNode nbexpr = SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderExpression", null);
      SLinkOperations.setTarget(nbexpr, "expression", SLinkOperations.getTarget(refAQ, "expression", true), true);
      SLinkOperations.setTarget(lval, "expression", nbexpr, true);
      ListSequence.fromList(SLinkOperations.getTargets(result, "values", true)).addElement(lval);
    }

    Map<SNode, SNode> map = MapSequence.fromMap(new HashMap<SNode, SNode>());
    for (SNode child : SNodeOperations.getChildren(quotationNode)) {
      if (SNodeOperations.isInstanceOf(child, "jetbrains.mps.lang.quotation.structure.AbstractAntiquotation")) {
        continue;
      }

      SNode link = SNodeOperations.as(SModelSearchUtil.findMostSpecificLinkDeclaration(SLinkOperations.getTarget(result, "concept", false), SNodeOperations.getContainingLinkRole(child)), "jetbrains.mps.lang.structure.structure.LinkDeclaration");
      if ((link == null)) {
        LOG.error("cannot find link `" + SNodeOperations.getContainingLinkRole(child) + "' in " + BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(result, "concept", false), "virtual_getFqName_1213877404258", new Object[]{}));
      }
      boolean multipleLink = link != null && !(LinkDeclaration_Behavior.call_isSingular_1213877254557(link));
      SNode c = convert(child);
      SNode lval;
      if (MapSequence.fromMap(map).containsKey(link)) {
        lval = MapSequence.fromMap(map).get(link);
      } else {
        lval = SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderInitLink", null);
        SLinkOperations.setTarget(lval, "link", link, false);
        ListSequence.fromList(SLinkOperations.getTargets(result, "values", true)).addElement(lval);
        if (multipleLink) {
          MapSequence.fromMap(map).put(link, lval);
          SLinkOperations.setTarget(lval, "expression", SConceptOperations.createNewNode("jetbrains.mps.lang.quotation.structure.NodeBuilderList", null), true);
        }
      }
      if (multipleLink) {
        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SLinkOperations.getTarget(lval, "expression", true), "jetbrains.mps.lang.quotation.structure.NodeBuilderList"), "nodes", true)).addElement(c);
      } else {
        SLinkOperations.setTarget(lval, "expression", c, true);
      }

    }
    return result;
  }

  private static Logger LOG = Logger.getLogger(QuotationConverter.class);

  private static SNode _quotation_createNode_aytayy_a0a1a0d0l0d(Object parameter_1) {
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanConstant", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_2, "value", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_aytayy_a0a0b0a3a11a3(Object parameter_1) {
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerConstant", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_2, "value", (String) parameter_1);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_aytayy_a0a0b0a3a11a3_0(Object parameter_1) {
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.StringLiteral", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setProperty(quotedNode_2, "value", (String) parameter_1);
    return quotedNode_2;
  }
}
