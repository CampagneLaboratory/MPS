package jetbrains.mps.lang.script.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class ConvertToFQNameSpecification_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public ConvertToFQNameSpecification_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.script.structure.DirectClassifierSpecification";
  }

  public String getPresentation() {
    return "ConvertToFQNameSpecification";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.script.intentions.ConvertToFQNameSpecification_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:b58ac159-1e62-40c6-8c0d-e9511a9824de(jetbrains.mps.lang.script.intentions)", "5434557751114211965");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ConvertToFQNameSpecification_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Convert Direct Classifier reference to hardcoded FQName specification";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode classifierSpecification = SNodeFactoryOperations.replaceWithNewChild(node, "jetbrains.mps.lang.script.structure.FQNameClassifierSpecification");
      SPropertyOperations.set(classifierSpecification, "classifierFQName", BehaviorReflection.invokeVirtual(String.class, node, "virtual_getClassifierFqName_5434557751112930827", new Object[]{}));
      SPropertyOperations.set(classifierSpecification, "smodelReference", BehaviorReflection.invokeVirtual(String.class, node, "virtual_getSModelReference_5434557751113441014", new Object[]{}));
      SPropertyOperations.set(classifierSpecification, "snodeId", node.getSNodeId().toString());
      SNodeOperations.deleteNode(node);
    }

    public IntentionDescriptor getDescriptor() {
      return ConvertToFQNameSpecification_Intention.this;
    }
  }
}
