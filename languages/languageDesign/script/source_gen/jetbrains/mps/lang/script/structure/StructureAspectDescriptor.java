package jetbrains.mps.lang.script.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.lang.script.structure.AbstractClassifierSpecification", null);
    myFqNameToConcept.put("jetbrains.mps.lang.script.structure.AbstractMethodSpecification", null);
    myFqNameToConcept.put("jetbrains.mps.lang.script.structure.CommentMigrationScriptPart", null);
    myFqNameToConcept.put("jetbrains.mps.lang.script.structure.DirectClassifierSpecification", null);
    myFqNameToConcept.put("jetbrains.mps.lang.script.structure.DirectMethodSpecification", null);
    myFqNameToConcept.put("jetbrains.mps.lang.script.structure.ExtractInterfaceMigration", null);
    myFqNameToConcept.put("jetbrains.mps.lang.script.structure.FQNameClassifierSpecification", null);
    myFqNameToConcept.put("jetbrains.mps.lang.script.structure.FQNameMethodSpecification", null);
    myFqNameToConcept.put("jetbrains.mps.lang.script.structure.FactoryMigrationScriptPart", null);
    myFqNameToConcept.put("jetbrains.mps.lang.script.structure.MigrationScript", null);
    myFqNameToConcept.put("jetbrains.mps.lang.script.structure.MigrationScriptPart", null);
    myFqNameToConcept.put("jetbrains.mps.lang.script.structure.MigrationScriptPart_Instance", null);
    myFqNameToConcept.put("jetbrains.mps.lang.script.structure.MigrationScriptPart_Instance_Predicate", null);
    myFqNameToConcept.put("jetbrains.mps.lang.script.structure.MigrationScriptPart_Instance_Updater", null);
    myFqNameToConcept.put("jetbrains.mps.lang.script.structure.MigrationScriptPart_node", null);
    myFqNameToConcept.put("jetbrains.mps.lang.script.structure.PullUpMethod", null);
    myFqNameToConcept.put("jetbrains.mps.lang.script.structure.WhitespaceMigrationScriptPart", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.script.structure.AbstractClassifierSpecification").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.script.structure.AbstractMethodSpecification").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.script.structure.CommentMigrationScriptPart").super_("jetbrains.mps.lang.script.structure.MigrationScriptPart").parents("jetbrains.mps.lang.script.structure.MigrationScriptPart").properties("text").alias("//", "").create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.script.structure.DirectClassifierSpecification").super_("jetbrains.mps.lang.script.structure.AbstractClassifierSpecification").parents("jetbrains.mps.lang.script.structure.AbstractClassifierSpecification").references("classifier").create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.script.structure.DirectMethodSpecification").super_("jetbrains.mps.lang.script.structure.AbstractMethodSpecification").parents("jetbrains.mps.lang.script.structure.AbstractMethodSpecification").references("methodDeclaration").create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.script.structure.ExtractInterfaceMigration").super_("jetbrains.mps.lang.script.structure.MigrationScriptPart").parents("jetbrains.mps.lang.script.structure.MigrationScriptPart").properties("updateClassifierTypes").references("newClassifier").children(new String[]{"oldClassifier", "pullUpMethods"}, new boolean[]{false, true}).alias("extract interface", "").create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.script.structure.FQNameClassifierSpecification").super_("jetbrains.mps.lang.script.structure.AbstractClassifierSpecification").parents("jetbrains.mps.lang.script.structure.AbstractClassifierSpecification").properties("classifierFQName", "smodelReference", "snodeId").create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.script.structure.FQNameMethodSpecification").super_("jetbrains.mps.lang.script.structure.AbstractMethodSpecification").parents("jetbrains.mps.lang.script.structure.AbstractMethodSpecification").properties("snodeId").create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.script.structure.FactoryMigrationScriptPart").super_("jetbrains.mps.lang.script.structure.MigrationScriptPart").parents("jetbrains.mps.lang.script.structure.MigrationScriptPart").children(new String[]{"factoryMethod"}, new boolean[]{false}).alias("factory migration script part", "").create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.script.structure.MigrationScript").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier").properties("title", "migrationFromBuild", "category", "type", "toBuild").children(new String[]{"part"}, new boolean[]{true}).alias("Language Migration Script", "").create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.script.structure.MigrationScriptPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.script.structure.MigrationScriptPart_Instance").super_("jetbrains.mps.lang.script.structure.MigrationScriptPart").parents("jetbrains.mps.lang.script.structure.MigrationScriptPart").properties("description", "showAsIntention").references("affectedInstanceConcept").children(new String[]{"affectedInstancePredicate", "affectedInstanceUpdater"}, new boolean[]{false, false}).alias("concept instances updater", "").create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.script.structure.MigrationScriptPart_Instance_Predicate").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("instance predicate", "").staticScope(StaticScope.NONE).create();
        break;
      case 13:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.script.structure.MigrationScriptPart_Instance_Updater").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").alias("instance predicate", "").staticScope(StaticScope.NONE).create();
        break;
      case 14:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.script.structure.MigrationScriptPart_node").super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").alias("node", "").staticScope(StaticScope.NONE).create();
        break;
      case 15:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.script.structure.PullUpMethod").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("newMethodDeclaration").children(new String[]{"oldMethodSpecification"}, new boolean[]{false}).alias("pull up method", "").create();
        break;
      case 16:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.script.structure.WhitespaceMigrationScriptPart").super_("jetbrains.mps.lang.script.structure.MigrationScriptPart").parents("jetbrains.mps.lang.script.structure.MigrationScriptPart").alias("whitespace", "").create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.lang.script.structure.AbstractClassifierSpecification", "jetbrains.mps.lang.script.structure.AbstractMethodSpecification", "jetbrains.mps.lang.script.structure.CommentMigrationScriptPart", "jetbrains.mps.lang.script.structure.DirectClassifierSpecification", "jetbrains.mps.lang.script.structure.DirectMethodSpecification", "jetbrains.mps.lang.script.structure.ExtractInterfaceMigration", "jetbrains.mps.lang.script.structure.FQNameClassifierSpecification", "jetbrains.mps.lang.script.structure.FQNameMethodSpecification", "jetbrains.mps.lang.script.structure.FactoryMigrationScriptPart", "jetbrains.mps.lang.script.structure.MigrationScript", "jetbrains.mps.lang.script.structure.MigrationScriptPart", "jetbrains.mps.lang.script.structure.MigrationScriptPart_Instance", "jetbrains.mps.lang.script.structure.MigrationScriptPart_Instance_Predicate", "jetbrains.mps.lang.script.structure.MigrationScriptPart_Instance_Updater", "jetbrains.mps.lang.script.structure.MigrationScriptPart_node", "jetbrains.mps.lang.script.structure.PullUpMethod", "jetbrains.mps.lang.script.structure.WhitespaceMigrationScriptPart"};
}
