package jetbrains.mps.testHybridEditor.diagram.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.jetpad.projectional.diagram.view.DiagramView;
import jetbrains.jetpad.projectional.diagram.view.ConnectionRoutingView;
import jetbrains.jetpad.projectional.diagram.layout.OrthogonalRouter;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.nodeEditor.cells.jetpad.GenericViewCell;
import java.util.Collection;
import java.util.Collections;
import jetbrains.mps.openapi.editor.cells.EditorCell_Collection;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.nodeEditor.cells.jetpad.ConnectorViewCell;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.jetpad.projectional.diagram.view.PolylineConnection;
import jetbrains.jetpad.projectional.view.LineView;

public class DiagramEditor extends DefaultNodeEditor {
  private DiagramView myView = new ConnectionRoutingView(new OrthogonalRouter());
  private Map<SNode, View> nodeToViewMap = MapSequence.fromMap(new HashMap<SNode, View>());

  @Override
  public EditorCell createEditorCell(EditorContext editorContext, SNode diagramNode) {
    GenericViewCell diagramCell = GenericViewCell.createViewCell(editorContext, diagramNode, myView);
    createBlockCells(editorContext, diagramNode, diagramCell);
    createConnectorCollection(editorContext, diagramNode, diagramCell);
    return diagramCell;
  }

  @Override
  public Collection<String> getContextHints() {
    return Collections.singletonList("jetbrains.mps.testHybridEditor.editor.HybridHints.diagram");
  }

  private void createBlockCells(EditorContext editorContext, SNode diagramNode, GenericViewCell diagramCell) {
    EditorCell_Collection blockCollection = jetbrains.mps.nodeEditor.cells.EditorCell_Collection.createIndent2(editorContext, diagramNode);
    for (SNode blockNode : ListSequence.fromList(SLinkOperations.getTargets(diagramNode, "blocks", true))) {
      GenericViewCell blockCell = (GenericViewCell) editorContext.createNodeCell(blockNode);
      View blockView = blockCell.getView();
      blockCollection.addEditorCell(blockCell);
      myView.itemsView.children().add(blockView);
      blockView.moveTo(new Vector(SPropertyOperations.getInteger(blockNode, "x"), SPropertyOperations.getInteger(blockNode, "y")));
      MapSequence.fromMap(nodeToViewMap).put(blockNode, blockView);
    }
    diagramCell.addEditorCell(blockCollection);
  }

  private void createConnectorCollection(EditorContext editorContext, SNode diagramNode, GenericViewCell diagramCell) {
    for (SNode connectorNode : ListSequence.fromList(SLinkOperations.getTargets(diagramNode, "connectors", true))) {
      ConnectorViewCell connectorCell = (ConnectorViewCell) editorContext.createNodeCell(connectorNode);
      View connectorView = connectorCell.getView();
      View fromView = MapSequence.fromMap(nodeToViewMap).get(SNodeOperations.getParent(SLinkOperations.getTarget(connectorNode, "inputPort", false)));
      View toView = MapSequence.fromMap(nodeToViewMap).get(SNodeOperations.getParent(SLinkOperations.getTarget(connectorNode, "outputPort", false)));
      EditorCell_Collection lineCollection = jetbrains.mps.nodeEditor.cells.EditorCell_Collection.createIndent2(editorContext, diagramNode);
      if (fromView != null && toView != null) {
        createConnection(lineCollection, connectorCell, connectorView, fromView, toView, editorContext, diagramNode);
      }
      diagramCell.addEditorCell(lineCollection);
    }
  }

  private void createConnection(EditorCell_Collection linesCell, ConnectorViewCell connectorCell, View connectorView, View fromView, View toView, EditorContext editorContext, SNode diagramNode) {
    // <node> 
    PolylineConnection connection = connectorCell.getConnection();
    connection.toView().set(fromView);
    connection.fromView().set(toView);
    myView.connections.add(connection);
    Vector fromCenter = fromView.bounds().get().center();
    Vector toCenter = toView.bounds().get().center();
    // <node> 

    for (LineView line : ListSequence.fromList(connection.getLines())) {
      connectorCell.addEditorCell(GenericViewCell.createViewCell(editorContext, diagramNode, line));
    }
    linesCell.addEditorCell(connectorCell);
  }
}
