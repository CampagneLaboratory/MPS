package jetbrains.mps.testHybridEditor.diagram.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.jetpad.projectional.diagram.view.DiagramView;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.jetpad.GenericViewCell;
import jetbrains.mps.openapi.editor.cells.EditorCell_Collection;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.jetpad.geometry.Vector;
import java.util.Collection;
import java.util.Collections;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Indent;

public class DiagramEditor extends DefaultNodeEditor {
  private DiagramView myView = new DiagramView();

  @Override
  public EditorCell createEditorCell(EditorContext context, SNode node) {
    GenericViewCell cell = GenericViewCell.createViewCell(context, node, myView);
    EditorCell_Collection collection = createBlockCollection(context, node);
    cell.addEditorCell(collection);
    int i = 0;
    for (EditorCell child : Sequence.fromIterable(collection)) {
      if (child instanceof GenericViewCell) {
        View view = ((GenericViewCell) child).getView();
        myView.itemsView.children().add(view);
        view.moveTo(new Vector(i, i));
        i += 10;
      }
    }
    return cell;
  }

  @Override
  public Collection<String> getContextHints() {
    return Collections.singletonList("jetbrains.mps.testHybridEditor.editor.HybridHints.diagram");
  }

  private EditorCell_Collection createBlockCollection(EditorContext context, SNode node) {
    AbstractCellListHandler handler = new RefNodeListHandler(node, "blocks", context) {};
    jetbrains.mps.nodeEditor.cells.EditorCell_Collection cells = handler.createCells(context, new CellLayout_Indent(), false);
    return cells;
  }
}
