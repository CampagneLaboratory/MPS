package jetbrains.mps.testHybridEditor.diagram.editor;

/*Generated by MPS */

import jetbrains.jetpad.projectional.diagram.view.DiagramView;
import jetbrains.jetpad.projectional.diagram.view.ConnectionRoutingView;
import jetbrains.jetpad.projectional.diagram.layout.OrthogonalRouter;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.nodeEditor.cells.jetpad.DiagramViewCell;
import java.util.Collection;
import java.util.Collections;
import jetbrains.mps.nodeEditor.cells.jetpad.GenericViewCell;
import jetbrains.mps.openapi.editor.cells.EditorCell_Collection;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Iterator;
import jetbrains.mps.nodeEditor.cells.jetpad.ConnectorViewCell;
import jetbrains.jetpad.projectional.diagram.view.PolylineConnection;
import jetbrains.jetpad.projectional.view.LineView;

public class DiagramEditor extends AbstractJetpadEditor {
  private DiagramView myView = new ConnectionRoutingView(new OrthogonalRouter());
  private Map<SNode, View> nodeToViewMap = MapSequence.fromMap(new HashMap<SNode, View>());

  @Override
  public EditorCell createEditorCell(EditorContext editorContext, SNode diagramNode) {
    DiagramViewCell diagramCell = DiagramViewCell.createViewCell(editorContext, diagramNode, myView);
    createBlockCells(editorContext, diagramNode, diagramCell);
    createConnectorCollection(editorContext, diagramNode, diagramCell);
    return diagramCell;
  }

  @Override
  public Collection<String> getContextHints() {
    return Collections.singletonList("jetbrains.mps.testHybridEditor.editor.HybridHints.diagram");
  }

  private void createBlockCells(EditorContext editorContext, SNode diagramNode, GenericViewCell diagramCell) {
    EditorCell_Collection blockCollection = jetbrains.mps.nodeEditor.cells.EditorCell_Collection.createIndent2(editorContext, diagramNode);
    for (SNode blockNode : ListSequence.fromList(SLinkOperations.getTargets(diagramNode, "blocks", true))) {
      GenericViewCell blockCell = (GenericViewCell) editorContext.createNodeCell(blockNode);
      MPSBlockView blockView = ((MPSBlockView) blockCell.getView());
      blockCollection.addEditorCell(blockCell);
      attach(myView.itemsView, blockView);
      {
        Iterator<SNode> inputPort_it = ListSequence.fromList(SLinkOperations.getTargets(blockNode, "inputPorts", true)).iterator();
        SNode inputPort_var;
        while (inputPort_it.hasNext()) {
          inputPort_var = inputPort_it.next();
          MapSequence.fromMap(nodeToViewMap).put(inputPort_var, blockView.getViewByPort(inputPort_var));
        }
      }
      {
        Iterator<SNode> outputPort_it = ListSequence.fromList(SLinkOperations.getTargets(blockNode, "outputPorts", true)).iterator();
        SNode outputPort_var;
        while (outputPort_it.hasNext()) {
          outputPort_var = outputPort_it.next();
          MapSequence.fromMap(nodeToViewMap).put(outputPort_var, blockView.getViewByPort(outputPort_var));
        }
      }
    }
    diagramCell.addEditorCell(blockCollection);
  }

  private void createConnectorCollection(final EditorContext editorContext, final SNode diagramNode, GenericViewCell diagramCell) {
    for (SNode connectorNode : ListSequence.fromList(SLinkOperations.getTargets(diagramNode, "connectors", true))) {
      final ConnectorViewCell connectorCell = (ConnectorViewCell) editorContext.createNodeCell(connectorNode);
      connectorCell.removeAllCells();
      View connectorView = connectorCell.getView();
      View fromView = MapSequence.fromMap(nodeToViewMap).get(SLinkOperations.getTarget(connectorNode, "outputPort", false));
      View toView = MapSequence.fromMap(nodeToViewMap).get(SLinkOperations.getTarget(connectorNode, "inputPort", false));
      if (fromView != null && toView != null) {
        createConnection(diagramCell, connectorCell, connectorView, fromView, toView, editorContext, diagramNode);
      }
    }
  }

  private void createConnection(EditorCell_Collection linesCell, ConnectorViewCell connectorCell, View connectorView, View fromView, View toView, EditorContext editorContext, SNode diagramNode) {
    PolylineConnection connection = connectorCell.getConnection();
    if (connectorView.parent() != null) {
      connectorView.parent().children().remove(connectorView.parent().children().indexOf(connectorView));
    }
    connection.view().invalidate();
    connection.toView().set(toView);
    connection.fromView().set(fromView);

    myView.connections.add(connection);
    myView.validate();

    for (LineView line : ListSequence.fromList(connection.getLines())) {
      connectorCell.addEditorCell(GenericViewCell.createViewCell(editorContext, diagramNode, line));
    }
    linesCell.addEditorCell(connectorCell);
  }
}
