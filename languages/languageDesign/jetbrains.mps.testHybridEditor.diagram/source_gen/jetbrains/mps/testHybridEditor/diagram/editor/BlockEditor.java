package jetbrains.mps.testHybridEditor.diagram.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.jetpad.GenericViewCell;
import jetbrains.jetpad.projectional.view.RectView;
import jetbrains.jetpad.projectional.view.TextView;
import jetbrains.jetpad.values.Color;
import jetbrains.mps.nodeEditor.EditorSettings;
import java.util.Collection;
import java.util.Collections;

public class BlockEditor extends DefaultNodeEditor {
  private MPSLabelView myView = new MPSLabelView();

  @Override
  public EditorCell createEditorCell(EditorContext context, SNode node) {
    GenericViewCell viewCell = GenericViewCell.createViewCell(context, node, myView);
    GenericViewCell rectCell = createRectCell(context, node);
    viewCell.addEditorCell(rectCell);
    myView.setRectView(((RectView) rectCell.getView()));

    GenericViewCell textCell = createTextCell(context, node);
    viewCell.addEditorCell(textCell);
    myView.setTextView(((TextView) textCell.getView()));

    return viewCell;
  }

  private GenericViewCell createRectCell(EditorContext context, SNode node) {
    RectView view = new RectView();
    view.background().set(Color.LIGHT_GRAY);
    view.visible().set(true);
    return GenericViewCell.createViewCell(context, node, view);
  }

  private GenericViewCell createTextCell(EditorContext context, SNode node) {
    MPSTextView view = new MPSTextView(EditorSettings.getInstance().getDefaultEditorFont());
    view.text().set(node.getName());
    return GenericViewCell.createViewCell(context, node, view);
  }

  @Override
  public Collection<String> getContextHints() {
    return Collections.singletonList("jetbrains.mps.testHybridEditor.editor.HybridHints.diagram");
  }


}
