package jetbrains.mps.testHybridEditor.diagram.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.jetpad.GenericViewCell;
import jetbrains.jetpad.projectional.view.RectView;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.mps.nodeEditor.EditorSettings;
import jetbrains.mps.openapi.editor.cells.EditorCell_Collection;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Collection;
import java.util.Collections;

public class BlockEditor extends DefaultNodeEditor {
  private MPSBlockView myView = new MPSBlockView();

  @Override
  public EditorCell createEditorCell(EditorContext context, SNode node) {

    GenericViewCell blockCell = GenericViewCell.createViewCell(context, node, myView);

    createRectCell(context, node, blockCell);
    createTextCell(context, node, blockCell);
    createInputPorts(context, node, blockCell);
    createOutputPorts(context, node, blockCell);
    return blockCell;
  }

  private void createRectCell(EditorContext context, SNode node, GenericViewCell blockCell) {
    RectView rectView = new RectView();
    rectView.background().set(Color.LIGHT_GRAY);
    rectView.visible().set(true);
    rectView.dimension().set(new Vector(75, 75));
    myView.setRectView(rectView);
    GenericViewCell rectCell = GenericViewCell.createViewCell(context, node, rectView);
    blockCell.addEditorCell(rectCell);
  }

  private void createTextCell(EditorContext context, SNode node, GenericViewCell blockCell) {
    MPSTextView textView = new MPSTextView(EditorSettings.getInstance().getDefaultEditorFont());
    textView.text().set(node.getName());
    myView.setTextView(textView);
    GenericViewCell textCell = GenericViewCell.createViewCell(context, node, textView);
    blockCell.addEditorCell(textCell);
  }

  private void createInputPorts(EditorContext context, SNode node, GenericViewCell blockCell) {
    EditorCell_Collection inputCollection = jetbrains.mps.nodeEditor.cells.EditorCell_Collection.createIndent2(context, node);
    for (SNode port : ListSequence.fromList(SLinkOperations.getTargets(node, "inputPorts", true))) {
      GenericViewCell portCell = (GenericViewCell) context.createNodeCell(port);
      inputCollection.addEditorCell(portCell);
      myView.addInputPort(portCell.getView());
    }
    blockCell.addEditorCell(inputCollection);
  }

  private void createOutputPorts(EditorContext context, SNode node, GenericViewCell blockCell) {
    EditorCell_Collection outputCollection = jetbrains.mps.nodeEditor.cells.EditorCell_Collection.createIndent2(context, node);
    for (SNode port : ListSequence.fromList(SLinkOperations.getTargets(node, "outputPorts", true))) {
      GenericViewCell portCell = (GenericViewCell) context.createNodeCell(port);
      outputCollection.addEditorCell(portCell);
      myView.addOutputPort(portCell.getView());
    }
    blockCell.addEditorCell(outputCollection);
  }



  @Override
  public Collection<String> getContextHints() {
    return Collections.singletonList("jetbrains.mps.testHybridEditor.editor.HybridHints.diagram");
  }


}
