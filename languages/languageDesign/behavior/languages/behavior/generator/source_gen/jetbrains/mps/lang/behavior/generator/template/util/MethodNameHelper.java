package jetbrains.mps.lang.behavior.generator.template.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.model.SNodeId;

/**
 * TODO need to be moved to the behavior of the ConceptBehavior after MPS project rebuilt
 */
public final class MethodNameHelper {
  private final SNode myBehavior;
  private final Map<SNode, Integer> myMethodToId;

  public MethodNameHelper(SNode behavior) {
    myBehavior = behavior;
    myMethodToId = init();
  }

  private Map<SNode, Integer> init() {
    if (ListSequence.fromList(SLinkOperations.getChildren(myBehavior, MetaAdapterFactory.getContainmentLink(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d43447b1aL, 0x11d43447b25L, "method"))).count() > maxMethodCount()) {
      throw new IllegalStateException("The number of methods exceeds standard java value in the '" + myBehavior + "'");
    }

    final Map<SNode, Integer> methodToId = new HashMap<SNode, Integer>();

    for (SNode method : ListSequence.fromList(SLinkOperations.getChildren(myBehavior, MetaAdapterFactory.getContainmentLink(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d43447b1aL, 0x11d43447b25L, "method")))) {
      int methodGeneratedId = getTrimmedId(method.getNodeId());
      while (methodToId.containsValue(methodGeneratedId)) {
        methodGeneratedId = (methodGeneratedId + 1) % maxMethodCount();
      }
      methodToId.put(method, methodGeneratedId);
    }
    return methodToId;
  }

  @NotNull
  public String getGeneratedName(SNode methodDecl) {
    return SPropertyOperations.getString(methodDecl, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "_id" + myMethodToId.get(methodDecl);
  }

  private int getTrimmedId(SNodeId id) {
    int res = id.hashCode() % maxMethodCount();
    if (res < 0) {
      res += maxMethodCount();
    }
    assert res > 0;
    return res;
  }

  private static int maxMethodCount() {
    return 65536;
  }
}
