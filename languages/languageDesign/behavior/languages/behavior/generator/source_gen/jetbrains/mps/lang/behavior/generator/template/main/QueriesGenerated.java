package jetbrains.mps.lang.behavior.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.template.CreateRootRuleContext;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.behavior.behavior.BehaviorMethodNames;
import jetbrains.mps.lang.behavior.behavior.StaticConceptMethodDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.behavior.behavior.LocalBehaviorMethodCall_Behavior;
import jetbrains.mps.lang.behavior.behavior.ConceptMethodDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.generator.template.IfMacroContext;
import jetbrains.mps.lang.behavior.behavior.SuperNodeExpression_Behavior;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.lang.structure.behavior.ConceptDeclaration_Behavior;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

@Generated
public class QueriesGenerated {
  public final boolean NEEDS_OPCONTEXT = false;

  public static boolean createRootRule_Condition_2056529430201935245(final CreateRootRuleContext _context) {
    return LanguageAspect.BEHAVIOR.is(_context.getOriginalInputModel());
  }

  public static boolean createRootRule_Condition_7923290658387314702(final CreateRootRuleContext _context) {
    return LanguageAspect.BEHAVIOR.is(_context.getOriginalInputModel());
  }

  public static boolean baseMappingRule_Condition_1144956008583649232(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "concept", false), "jetbrains.mps.lang.structure.structure.ConceptDeclaration");
  }

  public static boolean baseMappingRule_Condition_1144956008583716329(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "concept", false), "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration");
  }

  public static Object propertyMacro_GetPropertyValue_1225195370435(final PropertyMacroContext _context) {
    return BehaviorMethodNames.getDeclarationName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1225195370906(final PropertyMacroContext _context) {
    return StaticConceptMethodDeclaration_Behavior.call_getGeneratedName_1225196403920(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1225195370914(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_257065298285659954(final PropertyMacroContext _context) {
    SNode behavior = SNodeOperations.cast(SNodeOperations.getContainingRoot(SLinkOperations.getTarget(_context.getNode(), "baseMethodDeclaration", false)), "jetbrains.mps.lang.behavior.structure.ConceptBehavior");
    return NameUtil.nodeFQName(behavior);
  }

  public static Object propertyMacro_GetPropertyValue_257065298285659969(final PropertyMacroContext _context) {
    if (LocalBehaviorMethodCall_Behavior.call_isVirtualMethodCall_7148319044498537586(_context.getNode())) {
      return ConceptMethodDeclaration_Behavior.call_getCallerMethodName_1225196404032(SLinkOperations.getTarget(_context.getNode(), "baseMethodDeclaration", false));
    } else {
      return ConceptMethodDeclaration_Behavior.call_getGeneratedName_1225196404000(SLinkOperations.getTarget(_context.getNode(), "baseMethodDeclaration", false));
    }
  }

  public static Object propertyMacro_GetPropertyValue_7923290658387314641(final PropertyMacroContext _context) {
    SNode behavior = ConceptMethodDeclaration_Behavior.call_getBehaviour_1225196403947(_context.getNode());
    return jetbrains.mps.util.SNodeOperations.getModelLongName(SNodeOperations.getModel(behavior)) + "." + SPropertyOperations.getString(behavior, "name");
  }

  public static Object propertyMacro_GetPropertyValue_7923290658387314663(final PropertyMacroContext _context) {
    return BehaviorMethodNames.getDeclarationName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_7923290658387314616(final PropertyMacroContext _context) {
    return BehaviorMethodNames.getDeclarationName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_420948651745787987(final PropertyMacroContext _context) {
    return NameUtil.nodeFQName(SLinkOperations.getTarget(_context.getNode(), "concept", false));
  }

  public static Object propertyMacro_GetPropertyValue_1144956008583624134(final PropertyMacroContext _context) {
    return BehaviorMethodNames.getDeclarationName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1144956008583745105(final PropertyMacroContext _context) {
    String behaviorModel = jetbrains.mps.util.SNodeOperations.getModelLongName(SNodeOperations.getModel(_context.getNode()));
    behaviorModel = behaviorModel.substring(0, behaviorModel.length() - "structure".length()) + "behavior";
    return behaviorModel + "." + SPropertyOperations.getString(_context.getNode(), "name") + "_BehaviorDescriptor";
  }

  public static Object propertyMacro_GetPropertyValue_7923290658387314310(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "concept", false), "name") + "_BehaviorDescriptor";
  }

  public static Object propertyMacro_GetPropertyValue_7923290658387314322(final PropertyMacroContext _context) {
    SNode extendsNode = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "concept", false), "jetbrains.mps.lang.structure.structure.ConceptDeclaration"), "extends", false);

    if (SConceptOperations.isExactly(SLinkOperations.getTarget(_context.getNode(), "concept", false), "jetbrains.mps.lang.core.structure.BaseConcept")) {
      return "jetbrains.mps.smodel.runtime.impl.CompiledBehaviorDescriptor";
    }
    if ((extendsNode == null)) {
      extendsNode = SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "1133920641626");
    }

    String behaviorModel = jetbrains.mps.util.SNodeOperations.getModelLongName(SNodeOperations.getModel(extendsNode));
    behaviorModel = behaviorModel.substring(0, behaviorModel.length() - "structure".length()) + "behavior";
    return behaviorModel + "." + SPropertyOperations.getString(extendsNode, "name") + "_BehaviorDescriptor";
  }

  public static Object propertyMacro_GetPropertyValue_1144956008583624648(final PropertyMacroContext _context) {
    return SPropertyOperations.getBoolean(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "concept", false), "jetbrains.mps.lang.structure.structure.ConceptDeclaration"), "abstract");
  }

  public static Object propertyMacro_GetPropertyValue_1144956008583655120(final PropertyMacroContext _context) {
    return BehaviorMethodNames.getDeclarationName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1144956008583742122(final PropertyMacroContext _context) {
    String behaviorModel = jetbrains.mps.util.SNodeOperations.getModelLongName(SNodeOperations.getModel(_context.getNode()));
    behaviorModel = behaviorModel.substring(0, behaviorModel.length() - "structure".length()) + "behavior";
    return behaviorModel + "." + SPropertyOperations.getString(_context.getNode(), "name") + "_BehaviorDescriptor";
  }

  public static Object propertyMacro_GetPropertyValue_1144956008583654964(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "concept", false), "name") + "_BehaviorDescriptor";
  }

  public static Object propertyMacro_GetPropertyValue_2056529430201935371(final PropertyMacroContext _context) {
    return NameUtil.nodeFQName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_2056529430201968218(final PropertyMacroContext _context) {
    return SModelOperations.getModelName(_context.getOriginalInputModel()) + "." + SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.lang.structure.structure.ConceptDeclaration"), "name") + "_BehaviorDescriptor";
  }

  public static Object propertyMacro_GetPropertyValue_3624172675694562186(final PropertyMacroContext _context) {
    return BehaviorMethodNames.getCallerMethodName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_3624172675694562262(final PropertyMacroContext _context) {
    return BehaviorMethodNames.getDeclarationName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_3624172675694702268(final PropertyMacroContext _context) {
    return BehaviorMethodNames.getSuperCallerMethodName(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_3624172675694702343(final PropertyMacroContext _context) {
    return BehaviorMethodNames.getDeclarationName(_context.getNode());
  }

  public static Object referenceMacro_GetReferent_2061371070686517040(final ReferenceMacroContext _context) {
    return (SPropertyOperations.getBoolean(_context.getNode(), "isStatic") ? "thisConcept" : "thisNode");
  }

  public static Object referenceMacro_GetReferent_7923290658387314636(final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"), "name");
  }

  public static Object referenceMacro_GetReferent_7923290658387314693(final ReferenceMacroContext _context) {
    return _context.getNode();
  }

  public static Object referenceMacro_GetReferent_3624172675694562279(final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object referenceMacro_GetReferent_3624172675694702334(final ReferenceMacroContext _context) {
    return ConceptMethodDeclaration_Behavior.call_getContainingConcept_1241074789565(_context.getNode());
  }

  public static Object referenceMacro_GetReferent_3624172675694702394(final ReferenceMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static boolean ifMacro_Condition_5570334447680403000(final IfMacroContext _context) {
    return !(SPropertyOperations.getBoolean(_context.getNode(), "isStatic"));
  }

  public static boolean ifMacro_Condition_5212852298298917224(final IfMacroContext _context) {
    return !(SuperNodeExpression_Behavior.call_isSuperMethodStatic_5212852298298945349(_context.getNode()));
  }

  public static boolean ifMacro_Condition_572350672214579331(final IfMacroContext _context) {
    SNode enclosingMethod = SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration", false, false);
    return ((enclosingMethod != null) && SPropertyOperations.getBoolean(enclosingMethod, "isStatic"));
  }

  public static boolean ifMacro_Condition_2061371070686302345(final IfMacroContext _context) {
    return !(SPropertyOperations.getBoolean(_context.getNode(), "isStatic"));
  }

  public static boolean ifMacro_Condition_2061371070686326268(final IfMacroContext _context) {
    return !(SPropertyOperations.getBoolean(_context.getNode(), "isStatic"));
  }

  public static boolean ifMacro_Condition_2949815620942818983(final IfMacroContext _context) {
    return !(SPropertyOperations.getBoolean(_context.getNode(), "isStatic"));
  }

  public static SNode sourceNodeQuery_1225195370365(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "constructor", true), "body", true);
  }

  public static SNode sourceNodeQuery_1225195370420(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1225195370395(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "returnType", true);
  }

  public static SNode sourceNodeQuery_1225195370860(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "returnType", true);
  }

  public static SNode sourceNodeQuery_1225195370869(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1225195370946(final SourceSubstituteMacroNodeContext _context) {
    return _context.getNode();
  }

  public static SNode sourceNodeQuery_257065298285659944(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "baseMethodDeclaration", false), "returnType", true);
  }

  public static SNode sourceNodeQuery_7923290658387314391(final SourceSubstituteMacroNodeContext _context) {
    if (!(ConceptMethodDeclaration_Behavior.call_isCorrectlyOverriden_1227262347923(_context.getNode()))) {
      _context.showErrorMessage(_context.getNode(), "Behavior method is not correctly overriden");
    }

    return SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration"), "returnType", true);
  }

  public static SNode sourceNodeQuery_1144956008583623905(final SourceSubstituteMacroNodeContext _context) {
    if (!(ConceptMethodDeclaration_Behavior.call_isCorrectlyOverriden_1227262347923(_context.getNode()))) {
      _context.showErrorMessage(_context.getNode(), "Behavior method is not correctly overriden");
    }

    return SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration"), "returnType", true);
  }

  public static SNode sourceNodeQuery_1144956008583655031(final SourceSubstituteMacroNodeContext _context) {
    if (!(ConceptMethodDeclaration_Behavior.call_isCorrectlyOverriden_1227262347923(_context.getNode()))) {
      _context.showErrorMessage(_context.getNode(), "Behavior method is not correctly overriden");
    }

    return SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(), "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration"), "returnType", true);
  }

  public static SNode sourceNodeQuery_3624172675694562193(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "returnType", true);
  }

  public static SNode sourceNodeQuery_3624172675694562206(final SourceSubstituteMacroNodeContext _context) {
    SNode returnType = SLinkOperations.getTarget(_context.getNode(), "returnType", true);
    // use smart construction not generated before all types from bl 
    if (SNodeOperations.isInstanceOf(returnType, "jetbrains.mps.baseLanguage.structure.PrimitiveType") || (SNodeOperations.isInstanceOf(returnType, "jetbrains.mps.baseLanguage.structure.ClassifierType") && ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(returnType, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "parameter", true)).isEmpty()) || SNodeOperations.isInstanceOf(returnType, "jetbrains.mps.baseLanguage.structure.StringType")) {
      // todo: remove getClassExpression here 
      return BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), returnType, "virtual_getClassExpression_1213877337357", new Object[]{});
    } else {
      return _quotation_createNode_x583g4_a0a0c0zb(returnType);
    }
  }

  public static SNode sourceNodeQuery_3624172675694702227(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "returnType", true);
  }

  public static SNode sourceNodeQuery_3624172675694702280(final SourceSubstituteMacroNodeContext _context) {
    // remove this method at all 
    SNode returnType = SLinkOperations.getTarget(_context.getNode(), "returnType", true);
    if (SNodeOperations.isInstanceOf(returnType, "jetbrains.mps.baseLanguage.structure.PrimitiveType") || (SNodeOperations.isInstanceOf(returnType, "jetbrains.mps.baseLanguage.structure.ClassifierType") && ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(returnType, "jetbrains.mps.baseLanguage.structure.ClassifierType"), "parameter", true)).isEmpty()) || SNodeOperations.isInstanceOf(returnType, "jetbrains.mps.baseLanguage.structure.StringType")) {
      return BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), returnType, "virtual_getClassExpression_1213877337357", new Object[]{});
    } else {
      return _quotation_createNode_x583g4_a0a0c0bc(returnType);
    }
  }

  public static SNode sourceNodeQuery_3624172675694702364(final SourceSubstituteMacroNodeContext _context) {
    try {
      return BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SLinkOperations.getTarget(_context.getNode(), "type", true), "virtual_getClassExpression_1213877337357", new Object[]{});
    } catch (Exception e) {
      return _quotation_createNode_x583g4_a0a0a0cc();
    }
  }

  public static Iterable<SNode> sourceNodesQuery_1225195370428(final SourceSubstituteMacroNodesContext _context) {
    List<SNode> methods = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode md : SLinkOperations.getTargets(_context.getNode(), "method", true)) {
      if (!(SPropertyOperations.getBoolean(md, "isAbstract"))) {
        ListSequence.fromList(methods).addElement(md);
      }
    }
    return methods;
  }

  public static Iterable<SNode> sourceNodesQuery_6808887469561087818(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "parameter", true);
  }

  public static Iterable<SNode> sourceNodesQuery_3317934321613716219(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "annotation", true);
  }

  public static Iterable<SNode> sourceNodesQuery_3317934321613707903(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "annotation", true);
  }

  public static Iterable<SNode> sourceNodesQuery_1232967387673(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "parameter", true);
  }

  public static Iterable<SNode> sourceNodesQuery_1225195370876(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "staticMethod", true);
  }

  public static Iterable<SNode> sourceNodesQuery_1225195370480(final SourceSubstituteMacroNodesContext _context) {
    List<SNode> methods = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode md : SLinkOperations.getTargets(_context.getNode(), "method", true)) {
      if (SPropertyOperations.getBoolean(md, "isVirtual") && !(SPropertyOperations.getBoolean(md, "isStatic"))) {
        ListSequence.fromList(methods).addElement(md);
      }
    }
    return methods;
  }

  public static Iterable<SNode> sourceNodesQuery_257065298285659936(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "actualArgument", true);
  }

  public static Iterable<SNode> sourceNodesQuery_7923290658387314629(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "parameter", true);
  }

  public static Iterable<SNode> sourceNodesQuery_7923290658387314426(final SourceSubstituteMacroNodesContext _context) {
    Map<String, SNode> generatedNameToConceptMethodDeclaration = MapSequence.fromMap(new HashMap<String, SNode>());

    List<SNode> methods = ConceptDeclaration_Behavior.call_getAllMethodsInPriorityOrder_9106339407519386338(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "concept", false), "jetbrains.mps.lang.structure.structure.ConceptDeclaration"));
    SNode extendsNode = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "concept", false), "jetbrains.mps.lang.structure.structure.ConceptDeclaration"), "extends", false);
    extendsNode = ((extendsNode != null) ? extendsNode : SNodeOperations.getNode("r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)", "1133920641626"));

    if (extendsNode != SLinkOperations.getTarget(_context.getNode(), "concept", false)) {
      ListSequence.fromList(methods).removeSequence(ListSequence.fromList(ConceptDeclaration_Behavior.call_getAllMethodsInPriorityOrder_9106339407519386338(extendsNode)));
    }

    // <node> 

    for (SNode method : methods) {
      if (!(MapSequence.fromMap(generatedNameToConceptMethodDeclaration).containsKey(BehaviorMethodNames.getDeclarationName(method)))) {
        MapSequence.fromMap(generatedNameToConceptMethodDeclaration).put(BehaviorMethodNames.getDeclarationName(method), method);
      }
    }

    for (SNode behavior : SModelOperations.getNodes(_context.getInputModel(), "jetbrains.mps.lang.behavior.structure.ConceptBehavior")) {
      // todo: and extends and implements node in priority order! 
      if (SLinkOperations.getTarget(behavior, "concept", false) == SLinkOperations.getTarget(_context.getNode(), "concept", false)) {
        for (SNode method : SLinkOperations.getTargets(behavior, "method", true)) {
          if (MapSequence.fromMap(generatedNameToConceptMethodDeclaration).containsKey(BehaviorMethodNames.getDeclarationName(method))) {
            MapSequence.fromMap(generatedNameToConceptMethodDeclaration).put(BehaviorMethodNames.getDeclarationName(method), method);
          }
        }
      }
    }

    // <node> 

    return Sequence.fromIterable(MapSequence.fromMap(generatedNameToConceptMethodDeclaration).values()).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SPropertyOperations.getBoolean(it, "isAbstract")) && BehaviorMethodNames.getDeclarationName(it).startsWith("virtual");
      }
    }).sort(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return BehaviorMethodNames.getDeclarationName(it);
      }
    }, true);
  }

  public static Iterable<SNode> sourceNodesQuery_7923290658387314419(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "annotation", true);
  }

  public static Iterable<SNode> sourceNodesQuery_6808887469560184435(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "parameter", true);
  }

  public static Iterable<SNode> sourceNodesQuery_1144956008583623933(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "annotation", true);
  }

  public static Iterable<SNode> sourceNodesQuery_1144956008583623940(final SourceSubstituteMacroNodesContext _context) {
    SNode behavior = ListSequence.fromList(SModelOperations.getNodes(_context.getInputModel(), "jetbrains.mps.lang.behavior.structure.ConceptBehavior")).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "concept", false) == SLinkOperations.getTarget(_context.getNode(), "concept", false);
      }
    }).first();
    return ListSequence.fromList(SLinkOperations.getTargets(behavior, "method", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getBoolean(it, "isAbstract");
      }
    });
  }

  public static Iterable<SNode> sourceNodesQuery_6808887469560309312(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "parameter", true);
  }

  public static Iterable<SNode> sourceNodesQuery_1144956008583745034(final SourceSubstituteMacroNodesContext _context) {
    SNode concept = SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "concept", false), "jetbrains.mps.lang.structure.structure.ConceptDeclaration");
    return ListSequence.fromList(SLinkOperations.getTargets(concept, "implements", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, "intfc", false) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "intfc", false);
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (it != null);
      }
    });
  }

  public static Iterable<SNode> sourceNodesQuery_7923290658387314672(final SourceSubstituteMacroNodesContext _context) {
    SModel behaviorModel = _context.getOriginalInputModel();

    Language language = Language.getLanguageForLanguageAspect(behaviorModel);
    SModel structureModel = LanguageAspect.STRUCTURE.get(language);

    return SModelOperations.getNodes(structureModel, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration");
  }

  public static Iterable<SNode> sourceNodesQuery_1144956008583655066(final SourceSubstituteMacroNodesContext _context) {
    SNode behavior = ListSequence.fromList(SModelOperations.getNodes(_context.getInputModel(), "jetbrains.mps.lang.behavior.structure.ConceptBehavior")).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "concept", false) == SLinkOperations.getTarget(_context.getNode(), "concept", false);
      }
    }).first();
    return ListSequence.fromList(SLinkOperations.getTargets(behavior, "method", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getBoolean(it, "isVirtual");
      }
    });
  }

  public static Iterable<SNode> sourceNodesQuery_1144956008583655059(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "annotation", true);
  }

  public static Iterable<SNode> sourceNodesQuery_6808887469560859217(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "parameter", true);
  }

  public static Iterable<SNode> sourceNodesQuery_1144956008583742081(final SourceSubstituteMacroNodesContext _context) {
    SNode concept = SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "concept", false), "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration");
    return ListSequence.fromList(SLinkOperations.getTargets(concept, "extends", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, "intfc", false) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "intfc", false);
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (it != null);
      }
    });
  }

  public static Iterable<SNode> sourceNodesQuery_2056529430201935318(final SourceSubstituteMacroNodesContext _context) {
    SModel behaviorModel = _context.getOriginalInputModel();

    Language language = Language.getLanguageForLanguageAspect(behaviorModel);
    SModel structureModel = LanguageAspect.STRUCTURE.get(language);

    return ListSequence.fromList(SModelOperations.getNodes(structureModel, "jetbrains.mps.lang.structure.structure.ConceptDeclaration")).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SPropertyOperations.getBoolean(it, "abstract"));
      }
    });
  }

  public static Iterable<SNode> sourceNodesQuery_3624172675694562272(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "parameter", true);
  }

  public static Iterable<SNode> sourceNodesQuery_3624172675694562289(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "parameter", true);
  }

  public static Iterable<SNode> sourceNodesQuery_3624172675694702353(final SourceSubstituteMacroNodesContext _context) {
    SNode n = _context.getNode();
    return SLinkOperations.getTargets(n, "parameter", true);
  }

  public static Iterable<SNode> sourceNodesQuery_3624172675694702387(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "parameter", true);
  }

  public static Iterable<SNode> sourceNodesQuery_3624172675694702407(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "parameter", true);
  }

  private static SNode _quotation_createNode_x583g4_a0a0c0zb(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, null, false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, null, false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, null, false);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierClassExpression", null, null, false);
    quotedNode_7.setReference("classifier", SReference.create("classifier", quotedNode_7, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object")));
    quotedNode_5.addChild("expression", quotedNode_7);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, false);
    quotedNode_8.setReference("classifier", SReference.create("classifier", quotedNode_8, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Class")));
    quotedNode_5.addChild("type", quotedNode_8);
    quotedNode_3.addChild("expression", quotedNode_5);
    quotedNode_2.addChild("expression", quotedNode_3);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, false);
    quotedNode_4.setReference("classifier", SReference.create("classifier", quotedNode_4, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Class")));
    quotedNode_6 = (SNode) parameter_1;
    if (quotedNode_6 != null) {
      quotedNode_4.addChild("parameter", HUtil.copyIfNecessary(quotedNode_6));
    }
    quotedNode_2.addChild("type", quotedNode_4);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_x583g4_a0a0c0bc(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    SNode quotedNode_8 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, null, false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, false);
    quotedNode_3.setReference("classifier", SReference.create("classifier", quotedNode_3, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Class")));
    quotedNode_5 = (SNode) parameter_1;
    if (quotedNode_5 != null) {
      quotedNode_3.addChild("parameter", HUtil.copyIfNecessary(quotedNode_5));
    }
    quotedNode_2.addChild("type", quotedNode_3);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ParenthesizedExpression", null, null, false);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, null, false);
    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierClassExpression", null, null, false);
    quotedNode_7.setReference("classifier", SReference.create("classifier", quotedNode_7, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object")));
    quotedNode_6.addChild("expression", quotedNode_7);
    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, false);
    quotedNode_8.setReference("classifier", SReference.create("classifier", quotedNode_8, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Class")));
    quotedNode_6.addChild("type", quotedNode_8);
    quotedNode_4.addChild("expression", quotedNode_6);
    quotedNode_2.addChild("expression", quotedNode_4);
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_x583g4_a0a0a0cc() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierClassExpression", null, null, false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Object")));
    return quotedNode_1;
  }
}
