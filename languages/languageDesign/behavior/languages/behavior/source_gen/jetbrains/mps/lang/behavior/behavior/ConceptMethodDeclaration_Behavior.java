package jetbrains.mps.lang.behavior.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.pattern.util.MatchingUtil;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class ConceptMethodDeclaration_Behavior {
  public static void init(SNode thisNode) {
  }

  public static SNode call_getBehaviour_1225196403947(SNode thisNode) {
    return SNodeOperations.cast(SNodeOperations.getContainingRoot(thisNode), "jetbrains.mps.lang.behavior.structure.ConceptBehavior");
  }

  public static boolean virtual_canBeAnnotated_1233076312117(SNode thisNode) {
    return true;
  }

  public static SNode call_getContainingConcept_1241074789565(SNode thisNode) {
    return SLinkOperations.getTarget(ConceptMethodDeclaration_Behavior.call_getBehaviour_1225196403947(thisNode), "concept", false);
  }

  public static SNode call_getOverridenMethod_1225196403956(SNode thisNode) {
    if (SLinkOperations.getTarget(thisNode, "overriddenMethod", false) != null) {
      if (SLinkOperations.getTarget(thisNode, "overriddenMethod", false) == thisNode) {
        return thisNode;
      } else {
        return ConceptMethodDeclaration_Behavior.call_getOverridenMethod_1225196403956(SLinkOperations.getTarget(thisNode, "overriddenMethod", false));
      }
    }
    if (SPropertyOperations.getBoolean(thisNode, "isVirtual")) {
      return thisNode;
    }
    return null;
  }

  public static boolean call_isCorrectlyOverriden_1227262347923(SNode thisNode) {
    if ((SLinkOperations.getTarget(thisNode, "overriddenMethod", false) == null)) {
      return true;
    }
    if (!(TypeChecker.getInstance().getSubtypingManager().isSubtype(SLinkOperations.getTarget(thisNode, "returnType", true), SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "overriddenMethod", false), "returnType", true)))) {
      return false;
    }
    int parameterCount = ListSequence.fromList(SLinkOperations.getTargets(thisNode, "parameter", true)).count();
    if (parameterCount != ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "overriddenMethod", false), "parameter", true)).count()) {
      return false;
    }
    for (int i = 0; i < parameterCount; i++) {
      if (!(MatchingUtil.matchNodes(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "parameter", true)).getElement(i), "type", true), SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "overriddenMethod", false), "parameter", true)).getElement(i), "type", true)))) {
        return false;
      }
    }
    return true;
  }

  public static String call_getOverridenMethodConceptName_1225196403980(SNode thisNode) {
    SNode conceptDeclaration = SLinkOperations.getTarget(SNodeOperations.getAncestor(ConceptMethodDeclaration_Behavior.call_getOverridenMethod_1225196403956(thisNode), "jetbrains.mps.lang.behavior.structure.ConceptBehavior", false, false), "concept", false);
    return SPropertyOperations.getString(conceptDeclaration, "name");
  }

  @Deprecated
  public static String call_getGeneratedName_1225196404000(SNode thisNode) {
    return BehaviorMethodNames.getDeclarationName(thisNode);
  }

  @Deprecated
  public static String call_getCallerMethodName_1225196404032(SNode thisNode) {
    return BehaviorMethodNames.getCallerMethodName(thisNode);
  }

  @Deprecated
  public static String call_getSuperCallerMethodName_5914983970298756775(SNode thisNode) {
    return BehaviorMethodNames.getSuperCallerMethodName(thisNode);
  }

  public static boolean virtual_isAbstract_1232982539764(SNode thisNode) {
    return SPropertyOperations.getBoolean(thisNode, "isAbstract");
  }

  public static SNode virtual_getNearestOverriddenMethod_5358895268254685434(SNode thisNode) {
    return SLinkOperations.getTarget(thisNode, "overriddenMethod", false);
  }

  public static boolean virtual_supportsCheckedExceptions_8510677279630867629(SNode thisNode) {
    return false;
  }

  @Deprecated
  public static SNode call_getNearestOverriddenMethod_5014346297260520836(SNode thisNode) {
    return BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), thisNode, "virtual_getNearestOverriddenMethod_5358895268254685434", new Object[]{});
  }

  @Deprecated
  public static SNode callSuper_getNearestOverriddenMethod_5014346297260520836(SNode thisNode, String callerConceptFqName) {
    return BehaviorManager.getInstance().invokeSuper((Class<SNode>) ((Class) Object.class), SNodeOperations.cast(thisNode, "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration"), callerConceptFqName, "virtual_getNearestOverriddenMethod_5358895268254685434", new Class[]{SNode.class}, new Object[]{});
  }
}
