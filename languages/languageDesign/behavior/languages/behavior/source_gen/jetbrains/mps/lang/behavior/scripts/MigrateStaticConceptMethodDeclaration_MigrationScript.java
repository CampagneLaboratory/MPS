package jetbrains.mps.lang.behavior.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.behavior.behavior.StaticConceptMethodDeclaration_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import java.util.List;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class MigrateStaticConceptMethodDeclaration_MigrationScript extends BaseMigrationScript {
  public MigrateStaticConceptMethodDeclaration_MigrationScript(IOperationContext operationContext) {
    super("Migrate StaticConceptMethodDeclaration to static, non-virtual ConceptMethodDeclaration");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Migrate StaticConceptMethodDeclaration declaration";
      }

      public String getAdditionalInfo() {
        return "Migrate StaticConceptMethodDeclaration declaration";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.behavior.structure.StaticConceptMethodDeclaration";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return true;
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode behavior = StaticConceptMethodDeclaration_Behavior.call_getBehavior_1225196403935(node);

        SNode result = SConceptOperations.createNewNode("jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration", null);
        SPropertyOperations.set(result, "isStatic", "" + (true));
        SPropertyOperations.set(result, "isPrivate", "" + (SPropertyOperations.getBoolean(node, "isPrivate")));
        SPropertyOperations.set(result, "isAbstract", "" + (false));
        SLinkOperations.setTarget(result, "body", SLinkOperations.getTarget(node, "body", true), true);
        SLinkOperations.setTarget(result, "returnType", SLinkOperations.getTarget(node, "returnType", true), true);
        ListSequence.fromList(SLinkOperations.getTargets(result, "parameter", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "parameter", true)));
        ListSequence.fromList(SLinkOperations.getTargets(result, "annotation", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "annotation", true)));
        SLinkOperations.setTarget(result, "visibility", SLinkOperations.getTarget(node, "visibility", true), true);
        SPropertyOperations.set(result, "name", SPropertyOperations.getString(node, "name"));
        ListSequence.fromList(SLinkOperations.getTargets(result, "smodelAttribute", true)).addSequence(ListSequence.fromList(SLinkOperations.getTargets(node, "smodelAttribute", true)));
        ((jetbrains.mps.smodel.SNode) result).setId(node.getNodeId());
        SNodeOperations.deleteNode(node);

        ListSequence.fromList(SLinkOperations.getTargets(behavior, "method", true)).addElement(result);
      }

      public boolean isShowAsIntention() {
        return true;
      }
    });
    // whitespace 
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "Migrate StaticConceptMethodDeclaration calls";
      }

      public String getAdditionalInfo() {
        return "Migrate StaticConceptMethodDeclaration calls";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.lang.smodel.structure.StaticConceptMethodCall";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return true;
      }

      public void doUpdateInstanceNode(SNode node) {
        SNode result = _quotation_createNode_63ygf9_a0a0a2(SLinkOperations.getTargets(node, "actualArgument", true), SLinkOperations.getTarget(node, "baseMethodDeclaration", false), SLinkOperations.getTarget(node, "concept", false));
        SNodeOperations.replaceWithAnother(node, result);
      }

      public boolean isShowAsIntention() {
        return true;
      }
    });
  }

  private static SNode _quotation_createNode_63ygf9_a0a0a2(Object parameter_1, Object parameter_2, Object parameter_3) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    SNode quotedNode_7 = null;
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_5, "baseMethodDeclaration", (SNode) parameter_2);
    {
      List<SNode> nodes = (List<SNode>) parameter_1;
      for (SNode child : nodes) {
        quotedNode_5.addChild("actualArgument", HUtil.copyIfNecessary(child));
      }
    }
    quotedNode_4.addChild("operation", quotedNode_5);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.ConceptRefExpression", null, null, GlobalScope.getInstance(), false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_6, "conceptDeclaration", (SNode) parameter_3);
    quotedNode_4.addChild("operand", quotedNode_6);
    return quotedNode_4;
  }
}
