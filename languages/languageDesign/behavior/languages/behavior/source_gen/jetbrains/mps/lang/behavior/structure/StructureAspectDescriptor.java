package jetbrains.mps.lang.behavior.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptConceptBehavior = new ConceptDescriptorBuilder("jetbrains.mps.lang.behavior.structure.ConceptBehavior").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.structure.IMemberContainer", "jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable", "jetbrains.mps.lang.structure.structure.IConceptAspect").references("concept").children(new String[]{"constructor", "method"}, new boolean[]{false, true}).alias("Concept Behavior", "").create();
  /*package*/ final ConceptDescriptor myConceptConceptConstructorDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.behavior.structure.ConceptConstructorDeclaration").super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConceptMethodDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration").super_("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration").parents("jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration", "jetbrains.mps.baseLanguage.structure.IVisible").properties("isVirtual", "isPrivate", "isAbstract", "isStatic").references("overriddenMethod").create();
  /*package*/ final ConceptDescriptor myConceptInternalConceptDeclarationReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.behavior.structure.InternalConceptDeclarationReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("concept").create();
  /*package*/ final ConceptDescriptor myConceptInternalConceptDeclarationsHolder = new ConceptDescriptorBuilder("jetbrains.mps.lang.behavior.structure.InternalConceptDeclarationsHolder").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"concept"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptLocalBehaviorMethodCall = new ConceptDescriptorBuilder("jetbrains.mps.lang.behavior.structure.LocalBehaviorMethodCall").super_("jetbrains.mps.baseLanguage.structure.BaseMethodCall").parents("jetbrains.mps.baseLanguage.structure.BaseMethodCall").references("declaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSuperNodeExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.behavior.structure.SuperNodeExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("superConcept").alias("super", "super node").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptThisNodeExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.behavior.structure.ThisNodeExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.structure.IThisExpression").alias("this", "this node").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptConceptBehavior, myConceptConceptConstructorDeclaration, myConceptConceptMethodDeclaration, myConceptInternalConceptDeclarationReference, myConceptInternalConceptDeclarationsHolder, myConceptLocalBehaviorMethodCall, myConceptSuperNodeExpression, myConceptThisNodeExpression);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0l, conceptFqName)) {
      case 0:
        return myConceptConceptBehavior;
      case 1:
        return myConceptConceptConstructorDeclaration;
      case 2:
        return myConceptConceptMethodDeclaration;
      case 3:
        return myConceptInternalConceptDeclarationReference;
      case 4:
        return myConceptInternalConceptDeclarationsHolder;
      case 5:
        return myConceptLocalBehaviorMethodCall;
      case 6:
        return myConceptSuperNodeExpression;
      case 7:
        return myConceptThisNodeExpression;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0l = new String[]{"jetbrains.mps.lang.behavior.structure.ConceptBehavior", "jetbrains.mps.lang.behavior.structure.ConceptConstructorDeclaration", "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration", "jetbrains.mps.lang.behavior.structure.InternalConceptDeclarationReference", "jetbrains.mps.lang.behavior.structure.InternalConceptDeclarationsHolder", "jetbrains.mps.lang.behavior.structure.LocalBehaviorMethodCall", "jetbrains.mps.lang.behavior.structure.SuperNodeExpression", "jetbrains.mps.lang.behavior.structure.ThisNodeExpression"};
}
