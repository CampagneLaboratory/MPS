package jetbrains.mps.lang.behavior.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.util.plugin.refactorings.IExtractMethodRefactoringProcessor;
import jetbrains.mps.baseLanguage.util.plugin.refactorings.AbstractExtractMethodRefactoringProcessor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration_Behavior;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import java.util.Queue;
import jetbrains.mps.internal.collections.runtime.QueueSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import jetbrains.mps.smodel.LanguageAspect;

public class ConceptBehavior_Behavior {
  public static void init(SNode thisNode) {
  }

  public static List<SNode> virtual_getMembers_1213877531970(SNode thisNode) {
    List<SNode> members = new ArrayList<SNode>();
    ListSequence.fromList(members).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "method", true)));
    return members;
  }

  public static IExtractMethodRefactoringProcessor virtual_getExtractMethodRefactoringProcessor_1221393367929(SNode thisNode, List<SNode> nodesToExtract) {
    AbstractExtractMethodRefactoringProcessor result = new AbstractExtractMethodRefactoringProcessor(thisNode, nodesToExtract) {
      @Override
      public SNode createMethodCall(SNode declaration, List<SNode> arguments) {
        if (SNodeOperations.isInstanceOf(declaration, "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration")) {
          SNode call = SConceptOperations.createNewNode("jetbrains.mps.lang.behavior.structure.LocalBehaviorMethodCall", null);
          SLinkOperations.setTarget(call, "baseMethodDeclaration", SNodeOperations.cast(declaration, "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration"), false);
          ListSequence.fromList(SLinkOperations.getTargets(call, "actualArgument", true)).addSequence(ListSequence.fromList(arguments));
          return call;
        }
        return null;
      }

      @Override
      public SNode createNewMethod() {
        // <node> 
        // <node> 
        SNode method = SConceptOperations.createNewNode("jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration", null);
        SPropertyOperations.set(method, "isStatic", "" + (isStatic));
        return method;
      }
    };
    return result;
  }

  public static List<SNode> virtual_getMethodsToOverride_5418393554803767537(SNode thisNode) {
    List<SNode> candidates = new ArrayList<SNode>();
    Map<SNode, SNode> concrete = MapSequence.fromMap(new HashMap<SNode, SNode>());

    for (SNode allSuper : ConceptBehavior_Behavior.call_getAllSuperBehaviors_1818770337282950280(thisNode)) {
      for (SNode meth : SLinkOperations.getTargets(allSuper, "method", true)) {
        SNode baseMeth = ConceptMethodDeclaration_Behavior.call_getOverridenMethod_1225196403956(meth);
        if (baseMeth != null && !(MapSequence.fromMap(concrete).containsKey(baseMeth))) {
          MapSequence.fromMap(concrete).put(baseMeth, meth);
          ListSequence.fromList(candidates).addElement(meth);
        }
      }
    }

    List<SNode> result = new ArrayList<SNode>();
    for (SNode method : candidates) {
      if (SPropertyOperations.getBoolean(method, "isFinal")) {
        continue;
      }
      if (SPropertyOperations.getBoolean(method, "isAbstract")) {
        continue;
      }
      if (SNodeOperations.getParent(method) == thisNode) {
        continue;
      }
      ListSequence.fromList(result).addElement(method);
    }
    return result;
  }

  public static List<SNode> virtual_getMethodsToImplement_5418393554803775106(SNode thisNode) {
    SNode baseNode = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), thisNode, "virtual_getBaseConcept_2621449412040133768", new Object[]{});
    if ((baseNode == null)) {
      return new ArrayList<SNode>();
    }
    return AbstractConceptDeclaration_Behavior.call_getNotImplementedConceptMethods_1213877394339(baseNode);
  }

  public static List<SNode> call_getAllSuperBehaviors_1818770337282950280(SNode thisNode) {
    Set<SNode> seen = SetSequence.fromSet(new HashSet<SNode>());
    List<SNode> conceptResult = new ArrayList<SNode>();
    Queue<SNode> q = QueueSequence.fromQueue(new LinkedList<SNode>());
    QueueSequence.fromQueue(q).addLastElement(SLinkOperations.getTarget(thisNode, "concept", false));
    while (QueueSequence.fromQueue(q).isNotEmpty()) {
      SNode qn = QueueSequence.fromQueue(q).removeFirstElement();
      ListSequence.fromList(conceptResult).addElement(qn);
      if (SNodeOperations.isInstanceOf(qn, "jetbrains.mps.lang.structure.structure.ConceptDeclaration")) {
        if ((SLinkOperations.getTarget(SNodeOperations.cast(qn, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"), "extends", false) != null)) {
          SNode cl = SLinkOperations.getTarget(SNodeOperations.cast(qn, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"), "extends", false);
          if (seen.add(cl)) {
            QueueSequence.fromQueue(q).addLastElement(cl);
          }
        }
        for (SNode i : SLinkOperations.getTargets(SNodeOperations.cast(qn, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"), "implements", true)) {
          SNode cl = SLinkOperations.getTarget(i, "intfc", false);
          if (seen.add(cl)) {
            QueueSequence.fromQueue(q).addLastElement(cl);
          }
        }
      } else if (SNodeOperations.isInstanceOf(qn, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration")) {
        for (SNode i : SLinkOperations.getTargets(SNodeOperations.cast(qn, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration"), "extends", true)) {
          SNode cl = SLinkOperations.getTarget(i, "intfc", false);
          if (seen.add(cl)) {
            QueueSequence.fromQueue(q).addLastElement(cl);
          }
        }
      }
    }
    List<SNode> result = new ArrayList<SNode>();
    for (SNode concept : conceptResult) {
      SNode behavior = SNodeOperations.cast(AbstractConceptDeclaration_Behavior.call_findConceptAspect_8360039740498068384(concept, LanguageAspect.BEHAVIOR), "jetbrains.mps.lang.behavior.structure.ConceptBehavior");
      if (behavior != null) {
        ListSequence.fromList(result).addElement(behavior);
      }
    }
    return result;
  }

  public static SNode virtual_getBaseConcept_2621449412040133768(SNode thisNode) {
    return SLinkOperations.getTarget(thisNode, "concept", false);
  }

  public static void virtual_setBaseConcept_6261424444345963020(SNode thisNode, SNode baseConcept) {
    SLinkOperations.setTarget(thisNode, "concept", baseConcept, false);
  }
}
