package jetbrains.mps.lang.behavior.test.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class B_Behavior {
  public static void init(SNode thisNode) {
  }
  public static String virtual_virtualMethod_4731970554577218058(SNode thisNode, String in, int dummy) {
    return "B";
  }
  public static String call_nonVirtualMethod_4731970554577218075(SNode thisNode, String in, int dummy) {
    return "B";
  }
  public static String virtual_virtualMethod_4731970554577185009(SNode thisNode, String in, int dummy) {
    return "B";
  }
  public static String virtual_staticVirtualMethod_4731970554577185580(SAbstractConcept thisConcept, String in, int dummy) {
    return "B";
  }
  public static void call_doInvokeAll_4731970554577222218(SNode thisNode) {
    BehaviorReflection.invokeVirtual(String.class, thisNode, "virtual_abstractVirtualMethod_4731970554577217984", new Object[]{0});
    BehaviorReflection.invokeVirtual(String.class, thisNode, "virtual_abstractVirtualMethod_4731970554577217984", new Object[]{0});
    // 
    BehaviorReflection.invokeVirtual(String.class, thisNode, "virtual_virtualMethod_4731970554577218058", new Object[]{"from B", 0});
    BehaviorReflection.invokeVirtual(String.class, thisNode, "virtual_virtualMethod_4731970554577218058", new Object[]{"from B", 0});
    BehaviorReflection.invokeVirtual(String.class, thisNode, "virtual_virtualMethod_4731970554577185009", new Object[]{"from A", 0});
    BehaviorReflection.invokeVirtual(String.class, thisNode, "virtual_virtualMethod_4731970554577185009", new Object[]{"from A", 0});
    // 
    B_Behavior.call_nonVirtualMethod_4731970554577218075(thisNode, "from B", 0);
    B_Behavior.call_nonVirtualMethod_4731970554577218075(thisNode, "from B", 0);
    A_Behavior.call_nonVirtualMethod_4731970554577184968(thisNode, "from A", 0);
    A_Behavior.call_nonVirtualMethod_4731970554577184968(thisNode, "from A", 0);
    // 
    A_Behavior.virtual_staticVirtualMethod_4731970554577185580(MetaAdapterFactory.getConcept(0xa18fb831fb54541L, 0x97c9a13312451954L, 0x41ab5625f92e5b2aL, "jetbrains.mps.lang.behavior.test.structure.A"), "from A", 0);
    // 
    // FIXME it's possible to declare static virtual abstract method, but impossible to call it 
    // staticAbstractVirtualMethod() 
  }
}
