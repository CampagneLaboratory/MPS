package jetbrains.mps.lang.editor.figures.sandbox;

/*Generated by MPS */

import jetbrains.jetpad.projectional.view.GroupView;
import jetbrains.jetpad.projectional.diagram.base.GridDirection;
import jetbrains.jetpad.projectional.view.RectView;
import jetbrains.jetpad.projectional.view.TextView;
import jetbrains.jetpad.model.property.Property;
import jetbrains.jetpad.model.property.ValueProperty;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.jetpad.projectional.diagram.view.RootTrait;
import jetbrains.jetpad.projectional.diagram.view.MoveHandler;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.jetpad.geometry.Rectangle;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.nodeEditor.cells.jetpad.BlockViewPortLayouter;
import java.util.Iterator;

public class AttributedMPSBlockView extends GroupView {
  private GridDirection myDir = GridDirection.RIGHT;

  public GroupView inputs = new GroupView();
  public GroupView outputs = new GroupView();
  private RectView myRectView;
  private TextView myTextView = new TextView();

  public Property<Integer> x = new ValueProperty<Integer>(0);
  public Property<Integer> y = new ValueProperty<Integer>(0);
  public Property<String> text = new ValueProperty<String>("");


  public AttributedMPSBlockView() {
    children().add(inputs);
    children().add(outputs);
    createRectView();
    children().add(myTextView);

    initSynchronizers();
  }

  private void createRectView() {
    myRectView = new RectView();
    myRectView.background().set(Color.LIGHT_GRAY);
    myRectView.visible().set(true);
    myRectView.dimension().set(new Vector(75, 75));
    children().add(myRectView);
    this.prop(RootTrait.MOVE_HANDLER).set(new MoveHandler() {
      public void move(Vector delta) {
        x.set(x.get() + delta.x);
        y.set(y.get() + delta.y);
        AttributedMPSBlockView.this.invalidate();
      }
    });

  }

  private void initSynchronizers() {
    new Mapper<AttributedMPSBlockView, AttributedMPSBlockView>(this, this) {


      @Override
      protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
        configuration.add(Synchronizers.forProperty(getSource().x, new Runnable() {
          public void run() {
            getTarget().moveTo(new Vector(getTarget().x.get(), getTarget().y.get()));
          }
        }));
        configuration.add(Synchronizers.forProperty(getSource().y, new Runnable() {
          public void run() {
            getTarget().moveTo(new Vector(getTarget().x.get(), getTarget().y.get()));
          }
        }));
        configuration.add(Synchronizers.forProperty(getSource().text, getSource().myTextView.text()));
      }
    }.attachRoot();
  }

  public Property<Vector> dimension() {
    return myRectView.dimension();
  }

  @Override
  protected void doValidate(View.ValidationContext context) {
    super.doValidate(context);
    Rectangle labelRect = myTextView.bounds().get();
    myRectView.dimension().set(myRectView.dimension().get().max(labelRect.dimension));
    layoutPorts(inputs.children(), myDir.opposite());
    layoutPorts(outputs.children(), myDir);
    super.doValidate(context);
  }

  private void layoutPorts(List<View> views, GridDirection dir) {
    List<Vector> viewDimensions = new ArrayList<Vector>(views.size());
    for (View v : views) {
      viewDimensions.add(v.bounds().get().dimension);
    }
    Rectangle bounds = new Rectangle(myRectView.bounds().get().origin, myRectView.dimension().get());
    List<Vector> viewOrigins = new BlockViewPortLayouter(bounds).layoutPorts(viewDimensions, dir);
    Iterator<Vector> originIter = viewOrigins.iterator();
    for (View v : views) {
      v.moveTo(originIter.next());
    }
  }
}
