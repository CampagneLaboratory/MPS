package jetbrains.mps.lang.editor.figures.sandbox;

/*Generated by MPS */

import jetbrains.jetpad.projectional.view.GroupView;
import jetbrains.jetpad.projectional.view.RectView;
import jetbrains.jetpad.projectional.view.TextView;
import jetbrains.mps.nodeEditor.EditorSettings;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.jetpad.projectional.diagram.base.GridDirection;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.jetpad.model.property.Property;
import jetbrains.jetpad.geometry.Rectangle;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.nodeEditor.cells.jetpad.BlockViewPortLayouter;
import java.util.Iterator;

public class MPSBlockView extends GroupView {
  private RectView myRectView;
  private TextView myTextView = new MPSTextView(EditorSettings.getInstance().getDefaultEditorFont());
  private final GroupView myInputs = new GroupView();
  private final GroupView myOutputs = new GroupView();
  private final Map<SNode, View> portToViewMap = MapSequence.fromMap(new HashMap<SNode, View>());
  private GridDirection myDir = GridDirection.RIGHT;



  public MPSBlockView() {
    children().add(myInputs);
    children().add(myOutputs);
    createRectView();
  }

  public void setTextView(String name) {
    myTextView.text().set(name);
    attach(this, myTextView);
  }

  public TextView getTextView() {
    return myTextView;
  }

  public GroupView getInputs() {
    return myInputs;
  }

  public GroupView getOutputs() {
    return myOutputs;
  }

  private void createRectView() {
    myRectView = new RectView();
    myRectView.background().set(Color.LIGHT_GRAY);
    myRectView.visible().set(true);
    myRectView.dimension().set(new Vector(75, 75));
    attach(this, myRectView);
  }

  public GroupView getInputView() {
    return myInputs;
  }

  public GroupView getOutputView() {
    return myOutputs;
  }

  public void addInputPort(View inputPortView, SNode port) {
    attach(myInputs, inputPortView);
    MapSequence.fromMap(portToViewMap).put(port, inputPortView);
  }

  public Property<Vector> dimension() {
    return myRectView.dimension();
  }

  private void attach(View parent, View inputPortView) {
    if (inputPortView.parent() != null) {
      inputPortView.parent().children().remove(inputPortView.parent().children().indexOf(inputPortView));
    }
    parent.children().add(inputPortView);
  }

  public void addOutputPort(View outputPortView, SNode port) {
    attach(myOutputs, outputPortView);
    MapSequence.fromMap(portToViewMap).put(port, outputPortView);
  }

  public View getViewByPort(SNode port) {
    return MapSequence.fromMap(portToViewMap).get(port);
  }

  @Override
  protected void doValidate(View.ValidationContext context) {
    super.doValidate(context);
    Rectangle labelRect = myTextView.bounds().get();
    myRectView.dimension().set(myRectView.dimension().get().max(labelRect.dimension));
    layoutPorts(myInputs.children(), myDir.opposite());
    layoutPorts(myOutputs.children(), myDir);
    super.doValidate(context);

  }

  private void layoutPorts(List<View> views, GridDirection dir) {
    List<Vector> viewDimensions = new ArrayList<Vector>(views.size());
    for (View v : views) {
      viewDimensions.add(v.bounds().get().dimension);
    }
    Rectangle bounds = new Rectangle(myRectView.bounds().get().origin, myRectView.dimension().get());
    List<Vector> viewOrigins = new BlockViewPortLayouter(bounds).layoutPorts(viewDimensions, dir);
    Iterator<Vector> originIter = viewOrigins.iterator();
    for (View v : views) {
      v.moveTo(originIter.next());
    }
  }



}
