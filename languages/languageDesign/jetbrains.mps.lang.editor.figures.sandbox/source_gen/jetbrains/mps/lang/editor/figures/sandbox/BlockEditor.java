package jetbrains.mps.lang.editor.figures.sandbox;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.jetpad.GenericViewCell;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Collection;
import java.util.Collections;

public class BlockEditor extends AbstractJetpadEditor {
  private MPSBlockView myView = new MPSBlockView();

  @Override
  public EditorCell createEditorCell(EditorContext context, SNode node) {

    GenericViewCell blockCell = GenericViewCell.createViewCell(context, node, myView);

    myView.setTextView(SPropertyOperations.getString(node, "name"));
    createInputPorts(context, node, blockCell);
    createOutputPorts(context, node, blockCell);
    myView.moveTo(new Vector(SPropertyOperations.getInteger(node, "x"), SPropertyOperations.getInteger(node, "y")));
    return blockCell;
  }

  private void createInputPorts(EditorContext context, SNode node, GenericViewCell blockCell) {
    for (SNode port : ListSequence.fromList(SLinkOperations.getTargets(node, "inputPorts", true))) {
      GenericViewCell portCell = (GenericViewCell) context.createNodeCell(port);
      blockCell.addEditorCell(portCell);
      myView.addInputPort(portCell.getView(), port);
    }
  }

  private void createOutputPorts(EditorContext context, SNode node, GenericViewCell blockCell) {
    for (SNode port : ListSequence.fromList(SLinkOperations.getTargets(node, "outputPorts", true))) {
      GenericViewCell portCell = (GenericViewCell) context.createNodeCell(port);
      blockCell.addEditorCell(portCell);
      myView.addOutputPort(portCell.getView(), port);
    }
  }



  @Override
  public Collection<String> getContextHints() {
    return Collections.singletonList("jetbrains.mps.testHybridEditor.editor.HybridHints.diagram");
  }


}
