package jetbrains.mps.lang.actions.test.sidetransform;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest4;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseEditorTestBody;
import jetbrains.mps.openapi.editor.Editor;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import junit.framework.Assert;

@MPSLaunch
public class RightTransformWithCustomItem_Simple_checkCanBeAncestor_Test extends BaseTransformationTest4 {
  public RightTransformWithCustomItem_Simple_checkCanBeAncestor_Test() {
  }

  @Test
  public void test_RightTransformWithCustomItem_Simple_checkCanBeAncestor() throws Throwable {
    this.initTest("${mps_home}", "r:3643c33a-b564-4832-938b-79a88b40b6f2(jetbrains.mps.lang.actions.test.sidetransform@tests)");
    this.runTest("jetbrains.mps.lang.actions.test.sidetransform.RightTransformWithCustomItem_Simple_checkCanBeAncestor_Test$TestBody", "testMethod", false);
  }

  @MPSLaunch
  public static class TestBody extends BaseEditorTestBody {
    public TestBody() {
    }

    @Override
    public void testMethodImpl() throws Exception {
      final Editor editor = TestBody.this.initEditor("3185679905989925383", "3185679905989925455");
      EditorComponent editorComponent = (EditorComponent) editor.getCurrentEditorComponent();
      BaseEditorTestBody.typeString(editorComponent, " ");
      BaseEditorTestBody.pressKeys(editorComponent, ListSequence.fromListAndArray(new ArrayList<String>(), "ctrl SPACE"));
      Assert.assertTrue(editorComponent.getNodeSubstituteChooser().isVisible());
      Assert.assertTrue(editorComponent.getNodeSubstituteChooser().isMenuEmpty());
      editorComponent.getNodeSubstituteChooser().setVisible(false);
      BaseEditorTestBody.pressKeys(editorComponent, ListSequence.fromListAndArray(new ArrayList<String>(), " ESCAPE"));
    }
  }
}
