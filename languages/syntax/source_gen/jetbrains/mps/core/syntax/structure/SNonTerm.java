package jetbrains.mps.core.syntax.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class SNonTerm extends SGrammarPart {
  public static final String concept = "jetbrains.mps.core.syntax.structure.SNonTerm";
  public static final String SYM = "sym";
  public static final String RULES = "rules";

  public SNonTerm(SNode node) {
    super(node);
  }

  public SSymbol getSym() {
    return (SSymbol) this.getChild(SSymbol.class, SNonTerm.SYM);
  }

  public void setSym(SSymbol node) {
    super.setChild(SNonTerm.SYM, node);
  }

  public int getRulesesCount() {
    return this.getChildCount(SNonTerm.RULES);
  }

  public Iterator<SRule> ruleses() {
    return this.children(SRule.class, SNonTerm.RULES);
  }

  public List<SRule> getRuleses() {
    return this.getChildren(SRule.class, SNonTerm.RULES);
  }

  public void addRules(SRule node) {
    this.addChild(SNonTerm.RULES, node);
  }

  public void insertRules(SRule prev, SRule node) {
    this.insertChild(prev, SNonTerm.RULES, node);
  }

  public static SNonTerm newInstance(SModel sm, boolean init) {
    return (SNonTerm) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.syntax.structure.SNonTerm", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static SNonTerm newInstance(SModel sm) {
    return SNonTerm.newInstance(sm, false);
  }
}
