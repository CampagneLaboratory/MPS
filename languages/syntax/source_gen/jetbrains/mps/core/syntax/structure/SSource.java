package jetbrains.mps.core.syntax.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class SSource extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.core.syntax.structure.SSource";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String INPUT = "input";
  public static final String LEXER_PARTS = "lexerParts";
  public static final String GRAMMAR_PARTS = "grammarParts";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public SSource(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(SSource.NAME);
  }

  public void setName(String value) {
    this.setProperty(SSource.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(SSource.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(SSource.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(SSource.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(SSource.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(SSource.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(SSource.VIRTUAL_PACKAGE, value);
  }

  public int getInputsCount() {
    return this.getChildCount(SSource.INPUT);
  }

  public Iterator<SInputRef> inputs() {
    return this.children(SInputRef.class, SSource.INPUT);
  }

  public List<SInputRef> getInputs() {
    return this.getChildren(SInputRef.class, SSource.INPUT);
  }

  public void addInput(SInputRef node) {
    this.addChild(SSource.INPUT, node);
  }

  public void insertInput(SInputRef prev, SInputRef node) {
    this.insertChild(prev, SSource.INPUT, node);
  }

  public int getLexerPartsesCount() {
    return this.getChildCount(SSource.LEXER_PARTS);
  }

  public Iterator<SLexerPart> lexerPartses() {
    return this.children(SLexerPart.class, SSource.LEXER_PARTS);
  }

  public List<SLexerPart> getLexerPartses() {
    return this.getChildren(SLexerPart.class, SSource.LEXER_PARTS);
  }

  public void addLexerParts(SLexerPart node) {
    this.addChild(SSource.LEXER_PARTS, node);
  }

  public void insertLexerParts(SLexerPart prev, SLexerPart node) {
    this.insertChild(prev, SSource.LEXER_PARTS, node);
  }

  public int getGrammarPartsesCount() {
    return this.getChildCount(SSource.GRAMMAR_PARTS);
  }

  public Iterator<SGrammarPart> grammarPartses() {
    return this.children(SGrammarPart.class, SSource.GRAMMAR_PARTS);
  }

  public List<SGrammarPart> getGrammarPartses() {
    return this.getChildren(SGrammarPart.class, SSource.GRAMMAR_PARTS);
  }

  public void addGrammarParts(SGrammarPart node) {
    this.addChild(SSource.GRAMMAR_PARTS, node);
  }

  public void insertGrammarParts(SGrammarPart prev, SGrammarPart node) {
    this.insertChild(prev, SSource.GRAMMAR_PARTS, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(SSource.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, SSource.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, SSource.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(SSource.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, SSource.SMODEL_ATTRIBUTE, node);
  }

  public static SSource newInstance(SModel sm, boolean init) {
    return (SSource) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.syntax.structure.SSource", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static SSource newInstance(SModel sm) {
    return SSource.newInstance(sm, false);
  }
}
