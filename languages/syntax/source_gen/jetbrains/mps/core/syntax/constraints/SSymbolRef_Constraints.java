package jetbrains.mps.core.syntax.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferencePresentationContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class SSymbolRef_Constraints extends BaseConstraintsDescriptor {
  public SSymbolRef_Constraints() {
    super("jetbrains.mps.core.syntax.structure.SSymbolRef");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("ref", new BaseReferenceConstraintsDescriptor("ref", this) {
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public boolean hasPresentation() {
            return true;
          }

          @Override
          public String getPresentation(final IOperationContext operationContext, final ReferencePresentationContext _context) {
            if (_context.getInEditor() && (_context.getReferenceNode() != null) && SPropertyOperations.getBoolean(_context.getReferenceNode(), "isOptional")) {
              return SPropertyOperations.getString(_context.getParameterNode(), "name") + "opt";
            }
            return SPropertyOperations.getString(_context.getParameterNode(), "name");
          }
        };
      }
    });
    return references;
  }
}
