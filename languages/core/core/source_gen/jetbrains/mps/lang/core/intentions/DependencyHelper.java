package jetbrains.mps.lang.core.intentions;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SModule;
import java.awt.Frame;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.project.ProjectHelper;
import org.jetbrains.mps.openapi.model.SReference;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.constraints.ModelConstraints;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.ide.editor.actions.ModelImporter;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.module.SRepository;

public class DependencyHelper {
  private final SNode myNode;
  private final SModule myModule;
  private final Frame myFrame;

  public DependencyHelper(SNode node, EditorContext context) {
    this.myNode = node;
    this.myModule = SNodeOperations.getModel(node).getModule();
    this.myFrame = ProjectHelper.toMainFrame(context.getOperationContext().getProject());
  }

  public boolean isApplicable() {
    return execute(true) > 0;
  }

  public void execute() {
    execute(false);
  }

  private int execute(boolean dryRun) {
    int count = 0;
    for (SReference ref : myNode.getReferences()) {
      SModel modelToImport = resolveModel(ref, myModule.getRepository());
      if (modelToImport == null) {
        continue;
      }

      if (!(ModelConstraints.getScope(ref).contains(ref.getTargetNode()))) {
        if (!(dryRun)) {
          fixModelImport(ref.getTargetSModelReference());
        }
        ++count;
      }
    }
    return count;
  }


  private void fixModelImport(SModelReference mRefToImport) {
    new ModelImporter(SNodeOperations.getModel(myNode), myFrame).execute(mRefToImport);
  }

  @Nullable
  private SModel resolveModel(SReference ref, @NotNull SRepository repo) {
    SModelReference mRef = ref.getTargetSModelReference();
    return check_iea6ws_a1a51(mRef, repo);
  }

  private static SModel check_iea6ws_a1a51(SModelReference checkedDotOperand, SRepository repo) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.resolve(repo);
    }
    return null;
  }
}
