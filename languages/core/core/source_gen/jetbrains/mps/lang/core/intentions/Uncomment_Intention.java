package jetbrains.mps.lang.core.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.lang.core.behavior.BaseCommentAttribute_Behavior;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.util.CommentUtil;
import jetbrains.mps.intentions.IntentionDescriptor;

public class Uncomment_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public Uncomment_Intention() {
  }
  public String getConcept() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }
  public String getPresentation() {
    return "Uncomment";
  }
  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.core.intentions.Uncomment_Intention";
  }
  public String getLanguageFqName() {
    return "jetbrains.mps.lang.core";
  }
  public IntentionType getType() {
    return IntentionType.NORMAL;
  }
  public boolean isAvailableInChildNodes() {
    return false;
  }
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x3dcc194340c24debL, "jetbrains.mps.lang.core.structure.BaseCommentAttribute"));
  }
  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c89590285(jetbrains.mps.lang.core.intentions)", "3078666699043064829");
  }
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new Uncomment_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Uncomment";
    }
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode attribute = SNodeOperations.getParent(node);
      SNode mainParent = SNodeOperations.getParent(attribute);
      SContainmentLink resultLink = null;
      for (SContainmentLink link : CollectionSequence.fromCollection(SNodeOperations.getConcept(mainParent).getContainmentLinks())) {
        if (link.equals(BaseCommentAttribute_Behavior.call_getLink_3078666699043525887(SNodeOperations.cast(attribute, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x3dcc194340c24debL, "jetbrains.mps.lang.core.structure.BaseCommentAttribute"))))) {
          resultLink = link;
          break;
        }
      }
      if (resultLink != null) {
        List<SNode> children = SNodeOperations.getChildren(mainParent, resultLink);
        attribute.removeChild(node);
        if (ListSequence.fromList(children).isEmpty()) {
          SNodeOperations.deleteNode(attribute);
        } else {
          ListSequence.fromList(children).visitAll(new IVisitor<SNode>() {
            public void visit(SNode it) {
              CommentUtil.commentOutNode(it);
            }
          });
        }
        mainParent.addChild(resultLink, node);
      }
    }
    public IntentionDescriptor getDescriptor() {
      return Uncomment_Intention.this;
    }
  }
}
