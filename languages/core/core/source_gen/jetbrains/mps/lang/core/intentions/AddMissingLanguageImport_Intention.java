package jetbrains.mps.lang.core.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.project.IModule;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.intentions.IntentionDescriptor;

public class AddMissingLanguageImport_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public AddMissingLanguageImport_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }

  public String getPresentation() {
    return "AddMissingLanguageImport";
  }

  public String getPersistentStateKey() {
    return "jetbrains.mps.lang.core.intentions.AddMissingLanguageImport_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.ERROR;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return ((IModule) node.getConcept().getLanguage().getModule()) == null;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:00000000-0000-4000-0000-011c89590285(jetbrains.mps.lang.core.intentions)", "1209383918929");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new AddMissingLanguageImport_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Add Language " + node.getConcept().getLanguage().getPresentation() + " to Current Module";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SModuleReference moduleRef = ((IModule) node.getConcept().getLanguage().getModule()).getModuleReference();
      if (moduleRef == null) {
        return;
      }
      ((IModule) editorContext.getOperationContext().getModule()).addUsedLanguage(moduleRef);
    }

    public IntentionDescriptor getDescriptor() {
      return AddMissingLanguageImport_Intention.this;
    }
  }
}
