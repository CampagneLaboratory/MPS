package jetbrains.mps.lang.core.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.structure.behavior.AttributeDesignTimeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class Attribute__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x47bf8397520e5939L, "jetbrains.mps.lang.core.structure.Attribute");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<String> getRole_id1653mnvAgoG = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getRole").modifiers(SModifiersImpl.create(9, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1653mnvAgoG").registry(REGISTRY).build();
  public static final SMethod<Boolean> multiple_id1653mnvAgpO = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("multiple").modifiers(SModifiersImpl.create(9, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1653mnvAgpO").registry(REGISTRY).build();
  public static final SMethod<List<SNode>> getAttributed_id2D1PBM_bxHl = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("getAttributed").modifiers(SModifiersImpl.create(9, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2D1PBM_bxHl").registry(REGISTRY).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getRole_id1653mnvAgoG, multiple_id1653mnvAgpO, getAttributed_id2D1PBM_bxHl);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  @Deprecated
  /*package*/ static String getRole_id1653mnvAgoG(@NotNull SAbstractConcept __thisConcept__) {
    // use this method 
    return AttributeDesignTimeOperations.getAttributeRole(__thisConcept__.getDeclarationNode());
  }
  @Deprecated
  /*package*/ static boolean multiple_id1653mnvAgpO(@NotNull SAbstractConcept __thisConcept__) {
    // use this method 
    return AttributeDesignTimeOperations.isMultipleAttribute(__thisConcept__.getDeclarationNode());
  }
  @Deprecated
  /*package*/ static List<SNode> getAttributed_id2D1PBM_bxHl(@NotNull SAbstractConcept __thisConcept__) {
    // use this method 
    return Sequence.fromIterable(AttributeDesignTimeOperations.getApplicableConcepts(__thisConcept__.getDeclarationNode())).toListSequence();
  }

  /*package*/ Attribute__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) getRole_id1653mnvAgoG(concept));
      case 1:
        return (T) ((Boolean) multiple_id1653mnvAgpO(concept));
      case 2:
        return (T) ((List<SNode>) getAttributed_id2D1PBM_bxHl(concept));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
