package jetbrains.mps.lang.core.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.StructureDescriptor;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.structure.ConceptRegistry;

public class StructureAspectDescriptor extends DescriptorProvider<StructureDescriptor> {
  public StructureAspectDescriptor() {
  }

  public StructureDescriptor getDescriptor(String conceptFqName) {
    int hash = conceptFqName.hashCode();
    if (hash == 965148823) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == 2115426872) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.INamedConcept");
    }
    if (hash == 2101294673) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.IResolveInfo");
    }
    if (hash == 491166122) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.IWrapper");
    }
    if (hash == -702055753) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.IDeprecatable");
    }
    if (hash == -826443816) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.IContainer");
    }
    if (hash == -1037801085) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.IType");
    }
    if (hash == -1774624244) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.IMetaLevelChanger");
    }
    if (hash == -98730688) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.ExportScope", "jetbrains.mps.lang.core.structure.NodeAttribute");
    }
    if (hash == 1677536201) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.ExportScopePublic", "jetbrains.mps.lang.core.structure.ExportScope");
    }
    if (hash == -953098245) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.ExportScopeNamespace", "jetbrains.mps.lang.core.structure.ExportScope");
    }
    if (hash == 1586175948) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.ExportScopeModule", "jetbrains.mps.lang.core.structure.ExportScope");
    }
    if (hash == 877743324) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.Attribute", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -1983711742) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.LinkAttribute", "jetbrains.mps.lang.core.structure.Attribute");
    }
    if (hash == 172703994) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.NodeAttribute", "jetbrains.mps.lang.core.structure.Attribute");
    }
    if (hash == 1806896775) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.PropertyAttribute", "jetbrains.mps.lang.core.structure.Attribute");
    }
    return null;
  }

  public static class DataBasedStructureDescriptor extends StructureDescriptor {
    private ImmutableList<String> parents;
    private ImmutableSet<String> ancestors;

    public DataBasedStructureDescriptor(String fqName, String... parents) {
      this.parents = ImmutableList.copyOf(parents);
      this.ancestors = getAncestors(fqName, parents);
    }

    public Set<String> getAncestorsNames() {
      return ancestors;
    }

    public boolean isAssignableTo(String toConceptFqName) {
      return ancestors.contains(toConceptFqName);
    }

    public List<String> getParentsNames() {
      return parents;
    }

    private static ImmutableSet<String> getAncestors(String conceptFqName, String... parents) {
      List<String> result = new ArrayList();

      result.add(conceptFqName);
      ConceptRegistry registry = ConceptRegistry.getInstance();
      for (String parent : parents) {
        result.addAll(registry.getStructureDescriptor(parent).getAncestorsNames());
      }
      return ImmutableSet.copyOf(result);
    }
  }
}
