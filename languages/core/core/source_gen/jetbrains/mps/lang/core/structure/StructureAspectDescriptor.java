package jetbrains.mps.lang.core.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAttribute = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.Attribute").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBaseConcept = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.BaseConcept").parents().properties("shortDescription", "alias", "virtualPackage").children(new String[]{"smodelAttribute"}, new boolean[]{true}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptExportScope = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ExportScope").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute", "jetbrains.mps.lang.core.structure.InterfacePart").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptExportScopeModule = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ExportScopeModule").super_("jetbrains.mps.lang.core.structure.ExportScope").parents("jetbrains.mps.lang.core.structure.ExportScope").alias("@export(module)", "").create();
  /*package*/ final ConceptDescriptor myConceptExportScopeNamespace = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ExportScopeNamespace").super_("jetbrains.mps.lang.core.structure.ExportScope").parents("jetbrains.mps.lang.core.structure.ExportScope").properties("namespace").alias("@export(namespace)", "").create();
  /*package*/ final ConceptDescriptor myConceptExportScopePublic = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ExportScopePublic").super_("jetbrains.mps.lang.core.structure.ExportScope").parents("jetbrains.mps.lang.core.structure.ExportScope").alias("@export(public)", "").create();
  /*package*/ final ConceptDescriptor myConceptIAntisuppressErrors = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.IAntisuppressErrors").interface_().create();
  /*package*/ final ConceptDescriptor myConceptICanSuppressErrors = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ICanSuppressErrors").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIContainer = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.IContainer").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIDeprecatable = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.IDeprecatable").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIDontSubstituteByDefault = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIMetaLevelChanger = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.IMetaLevelChanger").interface_().create();
  /*package*/ final ConceptDescriptor myConceptINamedConcept = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.INamedConcept").interface_().properties("name").create();
  /*package*/ final ConceptDescriptor myConceptIResolveInfo = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.IResolveInfo").interface_().properties("resolveInfo").create();
  /*package*/ final ConceptDescriptor myConceptISuppressErrors = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ISuppressErrors").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIType = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.IType").interface_().create();
  /*package*/ final ConceptDescriptor myConceptIWrapper = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.IWrapper").interface_().create();
  /*package*/ final ConceptDescriptor myConceptImplementationContainer = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ImplementationContainer").interface_().create();
  /*package*/ final ConceptDescriptor myConceptImplementationPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ImplementationPart").interface_().parents("jetbrains.mps.lang.core.structure.ScopeFacade").create();
  /*package*/ final ConceptDescriptor myConceptImplementationWithStubPart = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ImplementationWithStubPart").interface_().parents("jetbrains.mps.lang.core.structure.ImplementationPart").create();
  /*package*/ final ConceptDescriptor myConceptInterfacePart = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.InterfacePart").interface_().create();
  /*package*/ final ConceptDescriptor myConceptLinkAttribute = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.LinkAttribute").super_("jetbrains.mps.lang.core.structure.Attribute").parents("jetbrains.mps.lang.core.structure.Attribute").properties("linkRole").create();
  /*package*/ final ConceptDescriptor myConceptNodeAttribute = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.NodeAttribute").super_("jetbrains.mps.lang.core.structure.Attribute").parents("jetbrains.mps.lang.core.structure.Attribute").create();
  /*package*/ final ConceptDescriptor myConceptPropertyAttribute = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.PropertyAttribute").super_("jetbrains.mps.lang.core.structure.Attribute").parents("jetbrains.mps.lang.core.structure.Attribute").properties("propertyName").create();
  /*package*/ final ConceptDescriptor myConceptScopeFacade = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ScopeFacade").interface_().create();
  /*package*/ final ConceptDescriptor myConceptScopeProvider = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ScopeProvider").interface_().create();
  /*package*/ final ConceptDescriptor myConceptSuppressErrorsAnnotation = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.SuppressErrorsAnnotation").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute", "jetbrains.mps.lang.core.structure.ISuppressErrors").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAttribute, myConceptBaseConcept, myConceptExportScope, myConceptExportScopeModule, myConceptExportScopeNamespace, myConceptExportScopePublic, myConceptIAntisuppressErrors, myConceptICanSuppressErrors, myConceptIContainer, myConceptIDeprecatable, myConceptIDontSubstituteByDefault, myConceptIMetaLevelChanger, myConceptINamedConcept, myConceptIResolveInfo, myConceptISuppressErrors, myConceptIType, myConceptIWrapper, myConceptImplementationContainer, myConceptImplementationPart, myConceptImplementationWithStubPart, myConceptInterfacePart, myConceptLinkAttribute, myConceptNodeAttribute, myConceptPropertyAttribute, myConceptScopeFacade, myConceptScopeProvider, myConceptSuppressErrorsAnnotation);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0eb, conceptFqName)) {
      case 0:
        return myConceptAttribute;
      case 1:
        return myConceptBaseConcept;
      case 2:
        return myConceptExportScope;
      case 3:
        return myConceptExportScopeModule;
      case 4:
        return myConceptExportScopeNamespace;
      case 5:
        return myConceptExportScopePublic;
      case 6:
        return myConceptIAntisuppressErrors;
      case 7:
        return myConceptICanSuppressErrors;
      case 8:
        return myConceptIContainer;
      case 9:
        return myConceptIDeprecatable;
      case 10:
        return myConceptIDontSubstituteByDefault;
      case 11:
        return myConceptIMetaLevelChanger;
      case 12:
        return myConceptINamedConcept;
      case 13:
        return myConceptIResolveInfo;
      case 14:
        return myConceptISuppressErrors;
      case 15:
        return myConceptIType;
      case 16:
        return myConceptIWrapper;
      case 17:
        return myConceptImplementationContainer;
      case 18:
        return myConceptImplementationPart;
      case 19:
        return myConceptImplementationWithStubPart;
      case 20:
        return myConceptInterfacePart;
      case 21:
        return myConceptLinkAttribute;
      case 22:
        return myConceptNodeAttribute;
      case 23:
        return myConceptPropertyAttribute;
      case 24:
        return myConceptScopeFacade;
      case 25:
        return myConceptScopeProvider;
      case 26:
        return myConceptSuppressErrorsAnnotation;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0eb = new String[]{"jetbrains.mps.lang.core.structure.Attribute", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.ExportScope", "jetbrains.mps.lang.core.structure.ExportScopeModule", "jetbrains.mps.lang.core.structure.ExportScopeNamespace", "jetbrains.mps.lang.core.structure.ExportScopePublic", "jetbrains.mps.lang.core.structure.IAntisuppressErrors", "jetbrains.mps.lang.core.structure.ICanSuppressErrors", "jetbrains.mps.lang.core.structure.IContainer", "jetbrains.mps.lang.core.structure.IDeprecatable", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault", "jetbrains.mps.lang.core.structure.IMetaLevelChanger", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.IResolveInfo", "jetbrains.mps.lang.core.structure.ISuppressErrors", "jetbrains.mps.lang.core.structure.IType", "jetbrains.mps.lang.core.structure.IWrapper", "jetbrains.mps.lang.core.structure.ImplementationContainer", "jetbrains.mps.lang.core.structure.ImplementationPart", "jetbrains.mps.lang.core.structure.ImplementationWithStubPart", "jetbrains.mps.lang.core.structure.InterfacePart", "jetbrains.mps.lang.core.structure.LinkAttribute", "jetbrains.mps.lang.core.structure.NodeAttribute", "jetbrains.mps.lang.core.structure.PropertyAttribute", "jetbrains.mps.lang.core.structure.ScopeFacade", "jetbrains.mps.lang.core.structure.ScopeProvider", "jetbrains.mps.lang.core.structure.SuppressErrorsAnnotation"};
}
