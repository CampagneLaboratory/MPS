package jetbrains.mps.lang.core.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.StructureDescriptor;
import com.google.common.collect.ImmutableList;
import java.util.Set;
import java.util.List;
import java.util.HashSet;
import jetbrains.mps.smodel.structure.ConceptRegistry;
import java.util.Collections;

public class StructureAspectDescriptor extends DescriptorProvider<StructureDescriptor> {
  public StructureAspectDescriptor() {
  }

  public StructureDescriptor getDescriptor(String conceptFqName) {
    switch ((conceptFqName).hashCode()) {
      case 965148823:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.BaseConcept", new String[]{}, new String[]{}, new String[]{});
      case 2115426872:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.INamedConcept", new String[]{}, new String[]{}, new String[]{});
      case 2101294673:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.IResolveInfo", new String[]{}, new String[]{}, new String[]{});
      case 491166122:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.IWrapper", new String[]{}, new String[]{}, new String[]{});
      case -702055753:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.IDeprecatable", new String[]{}, new String[]{}, new String[]{});
      case -826443816:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.IContainer", new String[]{}, new String[]{}, new String[]{});
      case -1037801085:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.IType", new String[]{}, new String[]{}, new String[]{});
      case -1774624244:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.IMetaLevelChanger", new String[]{}, new String[]{}, new String[]{});
      case -98730688:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.ExportScope", new String[]{"jetbrains.mps.lang.core.structure.NodeAttribute"}, new String[]{"jetbrains.mps.lang.core.structure.Attribute", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.NodeAttribute"}, new String[]{});
      case 1677536201:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.ExportScopePublic", new String[]{"jetbrains.mps.lang.core.structure.ExportScope"}, new String[]{"jetbrains.mps.lang.core.structure.Attribute", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.ExportScope", "jetbrains.mps.lang.core.structure.NodeAttribute"}, new String[]{});
      case -953098245:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.ExportScopeNamespace", new String[]{"jetbrains.mps.lang.core.structure.ExportScope"}, new String[]{"jetbrains.mps.lang.core.structure.Attribute", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.ExportScope", "jetbrains.mps.lang.core.structure.NodeAttribute"}, new String[]{});
      case 1586175948:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.ExportScopeModule", new String[]{"jetbrains.mps.lang.core.structure.ExportScope"}, new String[]{"jetbrains.mps.lang.core.structure.Attribute", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.ExportScope", "jetbrains.mps.lang.core.structure.NodeAttribute"}, new String[]{});
      case 877743324:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.Attribute", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{});
      case -1983711742:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.LinkAttribute", new String[]{"jetbrains.mps.lang.core.structure.Attribute"}, new String[]{"jetbrains.mps.lang.core.structure.Attribute", "jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{});
      case 172703994:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.NodeAttribute", new String[]{"jetbrains.mps.lang.core.structure.Attribute"}, new String[]{"jetbrains.mps.lang.core.structure.Attribute", "jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{});
      case 1806896775:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.lang.core.structure.PropertyAttribute", new String[]{"jetbrains.mps.lang.core.structure.Attribute"}, new String[]{"jetbrains.mps.lang.core.structure.Attribute", "jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{});
      default:
        return null;
    }
  }

  public static class DataBasedStructureDescriptor extends StructureDescriptor {
    private ImmutableList<String> parents;
    private Set<String> ancestors;

    public DataBasedStructureDescriptor(String fqName, String[] parents, String[] ancestorsInLanguage, String[] ancestorsNotInLanguage) {
      this.parents = ImmutableList.copyOf(parents);
      this.ancestors = getAncestors(fqName, ancestorsInLanguage, ancestorsNotInLanguage);
    }

    public Set<String> getAncestorsNames() {
      return ancestors;
    }

    public boolean isAssignableTo(String toConceptFqName) {
      return ancestors.contains(toConceptFqName);
    }

    public List<String> getParentsNames() {
      return parents;
    }

    private static Set<String> getAncestors(String conceptFqName, String[] ancestorsInLanguage, String[] ancestorsNotInLanguage) {
      Set<String> result = new HashSet(ancestorsInLanguage.length + 1);

      result.add(conceptFqName);
      for (String ancestor : ancestorsInLanguage) {
        result.add(ancestor);
      }

      ConceptRegistry registry = ConceptRegistry.getInstance();
      for (String parent : ancestorsNotInLanguage) {
        if (!(result.contains(parent))) {
          result.addAll(registry.getStructureDescriptor(parent).getAncestorsNames());
        }
      }

      return Collections.unmodifiableSet(result);
    }
  }
}
