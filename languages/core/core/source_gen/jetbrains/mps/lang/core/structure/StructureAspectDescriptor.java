package jetbrains.mps.lang.core.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;

public class StructureAspectDescriptor implements BaseStructureAspectDescriptor {
  private final Map<String, ConceptDescriptor> myFqNameToConcept = new HashMap<String, ConceptDescriptor>();

  public StructureAspectDescriptor() {
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.Attribute", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.BaseConcept", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.ExportScope", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.ExportScopeModule", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.ExportScopeNamespace", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.ExportScopePublic", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.IAntisuppressErrors", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.ICanSuppressErrors", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.IContainer", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.IDeprecatable", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.IDontSubstituteByDefault", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.IMetaLevelChanger", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.INamedConcept", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.IResolveInfo", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.ISuppressErrors", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.IType", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.IWrapper", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.ImplementationContainer", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.ImplementationPart", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.ImplementationWithStubPart", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.InterfacePart", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.LinkAttribute", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.NodeAttribute", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.PropertyAttribute", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.ScopeFacade", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.ScopeProvider", null);
    myFqNameToConcept.put("jetbrains.mps.lang.core.structure.SuppressErrorsAnnotation", null);
  }

  @Override
  public Set<ConceptDescriptor> getDescriptors() {
    for (String fqName : myFqNameToConcept.keySet()) {
      if (myFqNameToConcept.get(fqName) == null) {
        initLazy(fqName);
      }
    }
    return new HashSet<ConceptDescriptor>(myFqNameToConcept.values());
  }

  @Override
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    if (!(myFqNameToConcept.containsKey(conceptFqName))) {
      return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
    return initLazy(conceptFqName);
  }

  @NotNull
  private ConceptDescriptor initLazy(String conceptFqName) {
    assert myFqNameToConcept.containsKey(conceptFqName);
    ConceptDescriptor conceptDescriptor = myFqNameToConcept.get(conceptFqName);
    if (conceptDescriptor != null) {
      return conceptDescriptor;
    }
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0d0i, conceptFqName)) {
      case 0:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.Attribute").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
        break;
      case 1:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.BaseConcept").parents().properties("shortDescription", "alias", "virtualPackage").children(new String[]{"smodelAttribute"}, new boolean[]{true}).abstract_().create();
        break;
      case 2:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ExportScope").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute", "jetbrains.mps.lang.core.structure.InterfacePart").abstract_().create();
        break;
      case 3:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ExportScopeModule").super_("jetbrains.mps.lang.core.structure.ExportScope").parents("jetbrains.mps.lang.core.structure.ExportScope").alias("@export(module)", "").create();
        break;
      case 4:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ExportScopeNamespace").super_("jetbrains.mps.lang.core.structure.ExportScope").parents("jetbrains.mps.lang.core.structure.ExportScope").properties("namespace").alias("@export(namespace)", "").create();
        break;
      case 5:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ExportScopePublic").super_("jetbrains.mps.lang.core.structure.ExportScope").parents("jetbrains.mps.lang.core.structure.ExportScope").alias("@export(public)", "").create();
        break;
      case 6:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.IAntisuppressErrors").interface_().create();
        break;
      case 7:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ICanSuppressErrors").interface_().create();
        break;
      case 8:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.IContainer").interface_().create();
        break;
      case 9:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.IDeprecatable").interface_().create();
        break;
      case 10:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").interface_().create();
        break;
      case 11:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.IMetaLevelChanger").interface_().create();
        break;
      case 12:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.INamedConcept").interface_().properties("name").create();
        break;
      case 13:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.IResolveInfo").interface_().properties("resolveInfo").create();
        break;
      case 14:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ISuppressErrors").interface_().create();
        break;
      case 15:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.IType").interface_().create();
        break;
      case 16:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.IWrapper").interface_().create();
        break;
      case 17:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ImplementationContainer").interface_().create();
        break;
      case 18:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ImplementationPart").interface_().parents("jetbrains.mps.lang.core.structure.ScopeFacade").create();
        break;
      case 19:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ImplementationWithStubPart").interface_().parents("jetbrains.mps.lang.core.structure.ImplementationPart").create();
        break;
      case 20:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.InterfacePart").interface_().create();
        break;
      case 21:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.LinkAttribute").super_("jetbrains.mps.lang.core.structure.Attribute").parents("jetbrains.mps.lang.core.structure.Attribute").properties("linkRole").create();
        break;
      case 22:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.NodeAttribute").super_("jetbrains.mps.lang.core.structure.Attribute").parents("jetbrains.mps.lang.core.structure.Attribute").create();
        break;
      case 23:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.PropertyAttribute").super_("jetbrains.mps.lang.core.structure.Attribute").parents("jetbrains.mps.lang.core.structure.Attribute").properties("propertyName").create();
        break;
      case 24:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ScopeFacade").interface_().create();
        break;
      case 25:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.ScopeProvider").interface_().create();
        break;
      case 26:
        conceptDescriptor = new ConceptDescriptorBuilder("jetbrains.mps.lang.core.structure.SuppressErrorsAnnotation").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute", "jetbrains.mps.lang.core.structure.ISuppressErrors").create();
        break;
      default:
        conceptDescriptor = null;
    }
    assert conceptDescriptor != null;
    myFqNameToConcept.put(conceptFqName, conceptDescriptor);
    return conceptDescriptor;
  }
  private static String[] stringSwitchCases_1htk8d_a0d0i = new String[]{"jetbrains.mps.lang.core.structure.Attribute", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.ExportScope", "jetbrains.mps.lang.core.structure.ExportScopeModule", "jetbrains.mps.lang.core.structure.ExportScopeNamespace", "jetbrains.mps.lang.core.structure.ExportScopePublic", "jetbrains.mps.lang.core.structure.IAntisuppressErrors", "jetbrains.mps.lang.core.structure.ICanSuppressErrors", "jetbrains.mps.lang.core.structure.IContainer", "jetbrains.mps.lang.core.structure.IDeprecatable", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault", "jetbrains.mps.lang.core.structure.IMetaLevelChanger", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.IResolveInfo", "jetbrains.mps.lang.core.structure.ISuppressErrors", "jetbrains.mps.lang.core.structure.IType", "jetbrains.mps.lang.core.structure.IWrapper", "jetbrains.mps.lang.core.structure.ImplementationContainer", "jetbrains.mps.lang.core.structure.ImplementationPart", "jetbrains.mps.lang.core.structure.ImplementationWithStubPart", "jetbrains.mps.lang.core.structure.InterfacePart", "jetbrains.mps.lang.core.structure.LinkAttribute", "jetbrains.mps.lang.core.structure.NodeAttribute", "jetbrains.mps.lang.core.structure.PropertyAttribute", "jetbrains.mps.lang.core.structure.ScopeFacade", "jetbrains.mps.lang.core.structure.ScopeProvider", "jetbrains.mps.lang.core.structure.SuppressErrorsAnnotation"};
}
