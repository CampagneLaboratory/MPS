package jetbrains.mps.lang.core.plugin;

/*Generated by MPS */

import jetbrains.mps.generator.textGen.TextGeneratorEngine;
import jetbrains.mps.smodel.resources.GResource;
import jetbrains.mps.smodel.ModelAccess;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.Collections;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.textGen.TextGenerationResult;
import java.util.List;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.generator.fileGenerator.FileGenerationUtil;
import jetbrains.mps.extapi.model.GeneratableSModel;
import org.jetbrains.mps.openapi.persistence.DataSource;
import jetbrains.mps.extapi.persistence.FileDataSource;
import jetbrains.mps.vfs.FileSystem;

public class TextGenUtil {
  private TextGenUtil() {
  }

  @Deprecated
  public static void generateText(TextGeneratorEngine engine, Iterable<GResource> inputResources, final TextGenUtil.TextGenerationCallback callback) {
    ModelAccess.assertLegalRead();

    // out map and hashmap doesn't have asSynchronized method 
    final Map<SModel, GResource> modelToInput = Collections.synchronizedMap(new HashMap<SModel, GResource>());

    for (GResource inputResource : Sequence.fromIterable(inputResources)) {
      SModel outputModel = inputResource.status().getOutputModel();
      if (outputModel != null) {
        modelToInput.put(outputModel, inputResource);
      } else {
        callback.textGenerated(inputResource, Collections.<TextGenerationResult>emptyList());
      }
    }

    engine.generateModels(modelToInput.keySet(), new TextGeneratorEngine.GenerateCallback() {
      @Override
      public void modelGenerated(SModel model, List<TextGenerationResult> results) {
        GResource generatedResource = modelToInput.get(model);
        callback.textGenerated(generatedResource, results);
      }
    });
  }

  public static IFile getOutputDir(IFile root, SModel model, IFile override) {
    if (override != null) {
      return override;
    }
    return FileGenerationUtil.getDefaultOutputDir(model, root);
  }

  public static IFile getOverriddenOutputDir(SModel md) {
    if (md instanceof GeneratableSModel) {
      boolean useModelFolder = ((GeneratableSModel) md).isGenerateIntoModelFolder();
      DataSource source = md.getSource();
      if (useModelFolder && source instanceof FileDataSource) {
        IFile file = ((FileDataSource) source).getFile();
        return file.getParent();
      }
    }
    return null;
  }

  public static boolean runWriteTransaction(final Runnable runnable) {
    return FileSystem.getInstance().runWriteTransaction(runnable);
  }

  public static interface TextGenerationCallback {
    public void textGenerated(GResource inputResource, List<TextGenerationResult> results);
  }
}
