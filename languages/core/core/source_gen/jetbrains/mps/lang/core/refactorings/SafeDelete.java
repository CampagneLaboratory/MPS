package jetbrains.mps.lang.core.refactorings;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.BaseRefactoring;
import jetbrains.mps.refactoring.framework.IRefactoringTarget;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.findusages.model.SearchResults;
import java.util.Set;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.ArrayList;

public class SafeDelete extends BaseRefactoring {
  public SafeDelete() {
  }

  public String getUserFriendlyName() {
    return "Safe Delete Node";
  }

  public IRefactoringTarget getRefactoringTarget() {
    return new SafeDelete_Target();
  }

  public void refactor(final RefactoringContext refactoringContext) {
    ListSequence.fromList(refactoringContext.getSelectedNodes()).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        if (!(it.isDeleted())) {
          SNodeOperations.deleteNode(it);
        }
      }
    });
  }

  public SearchResults getAffectedNodes(final RefactoringContext refactoringContext) {
    final Set<SearchResult<SNode>> results = SetSequence.fromSet(new HashSet<SearchResult<SNode>>());

    ListSequence.fromList(refactoringContext.getSelectedNodes()).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SearchResults<SNode> searchResults = FindUtils.getSearchResults(new EmptyProgressMonitor(), refactoringContext.getSelectedNode(), GlobalScope.getInstance(), "jetbrains.mps.lang.structure.findUsages.NodeAndDescendantsUsages_Finder");
        SetSequence.fromSet(results).addSequence(ListSequence.fromList(searchResults.getSearchResults()));
      }
    });

    Set<SNode> nodes = SetSequence.fromSetWithValues(new HashSet<SNode>(), SetSequence.fromSet(results).select(new ISelector<SearchResult<SNode>, SNode>() {
      public SNode select(SearchResult<SNode> it) {
        return it.getObject();
      }
    }));
    for (SearchResult<SNode> searchResult : ListSequence.fromListWithValues(new ArrayList<SearchResult<SNode>>(), results)) {
      SNode resultNode = searchResult.getObject();

      for (SNode anc : ListSequence.fromList(SNodeOperations.getAncestors(resultNode, null, false))) {
        if (SetSequence.fromSet(nodes).contains(anc)) {
          SetSequence.fromSet(results).removeElement(searchResult);
          break;
        }
      }
    }

    return new SearchResults(SetSequence.fromSetWithValues(new HashSet<SNode>(), refactoringContext.getSelectedNodes()), SetSequence.fromSet(results).toListSequence());
  }
}
