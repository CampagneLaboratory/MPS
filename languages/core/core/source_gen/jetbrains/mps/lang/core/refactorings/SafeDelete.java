package jetbrains.mps.lang.core.refactorings;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.BaseRefactoring;
import jetbrains.mps.refactoring.framework.IRefactoringTarget;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.project.GlobalScope;
import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public class SafeDelete extends BaseRefactoring {
  public SafeDelete() {
  }

  public String getUserFriendlyName() {
    return "Safe Delete Node";
  }

  public String getKeyStroke() {
    return getKeyStroke_static();
  }

  public IRefactoringTarget getRefactoringTarget() {
    return new SafeDelete_Target();
  }

  public void refactor(final RefactoringContext refactoringContext) {
    SNodeOperations.deleteNode(refactoringContext.getSelectedNode());
  }

  public SearchResults getAffectedNodes(final RefactoringContext refactoringContext) {
    SearchResults<SNode> searchResults = FindUtils.getSearchResults(new EmptyProgressMonitor(), refactoringContext.getSelectedNode(), GlobalScope.getInstance(), "jetbrains.mps.lang.structure.findUsages.NodeAndDescendantsUsages_Finder");

    List<SearchResult<SNode>> searchResultsList = searchResults.getSearchResults();
    List<SearchResult<SNode>> searchResultsCopy = ListSequence.fromListWithValues(new ArrayList<SearchResult<SNode>>(), searchResultsList);

    for (SearchResult<SNode> searchResult : searchResultsCopy) {
      SNode resultNode = searchResult.getObject();
      if (ListSequence.fromList(SNodeOperations.getAncestors(resultNode, null, true)).contains(refactoringContext.getSelectedNode())) {
        searchResults.remove(searchResult);
      }
    }

    return searchResults;
  }

  public static String getKeyStroke_static() {
    return "alt DELETE";
  }
}
