package jetbrains.mps.core.scripts;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.AbstractLoggableRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.action.ActionContext;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.ide.findusages.model.searchquery.SearchQuery;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.ide.findusages.model.result.SearchResults;
import jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder;
import java.util.List;
import jetbrains.mps.ide.findusages.model.result.SearchResult;
import jetbrains.mps.ide.IDEProjectFrame;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.util.Map;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModel;
import java.util.HashMap;

public class SafeDelete extends AbstractLoggableRefactoring {
  public static final String showAffectedNodes = "showAffectedNodes";

  public static String getKeyStroke_static() {
    return "alt DELETE";
  }

  public static Class getClass_static() {
    return SafeDelete.class;
  }

  public static boolean isApplicableWRTConcept_static(SNode node) {
    if(SModelUtil_new.isAssignableConcept(((AbstractConceptDeclaration)SNodeOperations.getAdapter(SNodeOperations.getConceptDeclaration(node))), "jetbrains.mps.core.structure.BaseConcept")) {
      return true;
    } else
    {
      return false;
    }
  }


  public String getUserFriendlyName() {
    return "Safe Delete (under construction)";
  }

  public String getKeyStroke() {
    return SafeDelete.getKeyStroke_static();
  }

  public boolean isApplicableWRTConcept(SNode node) {
    return SafeDelete.isApplicableWRTConcept_static(node);
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.core.structure.BaseConcept";
  }

  public Class getOverridenRefactoringClass() {
    return null;
  }

  public boolean isApplicable(ActionContext actionContext, RefactoringContext refactoringContext) {
    {
      SNode node = actionContext.getNode();
      if(node == null) {
        return false;
      }
      SearchQuery searchQuery = new SearchQuery(new SNodePointer(node), actionContext.getScope());
      SearchResults searchResults = new NodeUsages_Finder().find(searchQuery);
      List<SearchResult> aliveResults = searchResults.getAliveResults();
      if(!(aliveResults.isEmpty())) {
        int size = aliveResults.size();
        IDEProjectFrame projectFrame = (IDEProjectFrame)actionContext.get(IDEProjectFrame.class);
        String message = size + " usages found. delete anyway?";
        JFrame component = projectFrame.getMainFrame();
        int option = JOptionPane.showConfirmDialog(component, message, "Safe Delete", JOptionPane.YES_NO_OPTION);
        if(option == JOptionPane.YES_OPTION) {
          refactoringContext.setParameter("showAffectedNodes", true);
          return true;
        }
        return false;
      }
      refactoringContext.setParameter("showAffectedNodes", false);
      return true;
    }
  }

  public boolean showsAffectedNodes() {
    return true;
  }

  public SearchResults getAffectedNodes(ActionContext actionContext, RefactoringContext refactoringContext) {
    {
      if(!(((Boolean)refactoringContext.getParameter("showAffectedNodes")))) {
        return null;
      }
      SNode node = actionContext.getNode();
      SearchQuery searchQuery = new SearchQuery(new SNodePointer(node), actionContext.getScope());
      SearchResults searchResults = new NodeUsages_Finder().find(searchQuery);
      return searchResults;
    }
  }

  public void doRefactor(ActionContext actionContext, RefactoringContext refactoringContext) {
    {
      SNode node = actionContext.getNode();
      SNodeOperations.deleteNode(node);
    }
  }

  public Map<IModule, List<SModel>> getModelsToGenerate(ActionContext actionContext, RefactoringContext refactoringContext) {
    return new HashMap<IModule, List<SModel>>();
  }

  public void updateModel(SModel model, RefactoringContext refactoringContext) {
  }

  public boolean doesUpdateModel() {
    return false;
  }

  public boolean askForInfo(ActionContext actionContext, RefactoringContext refactoringContext) {
    return this.isApplicable(actionContext, refactoringContext);
  }

}
