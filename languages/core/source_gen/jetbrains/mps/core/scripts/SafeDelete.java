package jetbrains.mps.core.scripts;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.AbstractLoggableRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.action.ActionContext;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.ide.findusages.model.result.SearchResults;
import jetbrains.mps.bootstrap.structureLanguage.findUsages.NodeUsages_Finder;
import jetbrains.mps.ide.findusages.model.searchquery.SearchQuery;
import jetbrains.mps.smodel.SNodePointer;
import java.util.List;
import jetbrains.mps.ide.findusages.model.result.SearchResult;
import javax.swing.JOptionPane;
import jetbrains.mps.ide.IDEProjectFrame;
import java.util.Map;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModel;
import java.util.HashMap;
import jetbrains.mps.refactoring.framework.IChooseComponent;
import java.util.ArrayList;
import jetbrains.mps.refactoring.framework.ChooseRefactoringInputDataDialog;

public class SafeDelete extends AbstractLoggableRefactoring {

  public static String getKeyStroke_static() {
    return "";
  }

  public static Class getClass_static() {
    return SafeDelete.class;
  }

  public static boolean isApplicableWRTConcept_static(SNode node) {
    if(SModelUtil_new.isAssignableConcept(((AbstractConceptDeclaration)SNodeOperations.getAdapter(SNodeOperations.getConceptDeclaration(node))), "jetbrains.mps.core.structure.BaseConcept")) {
      return true;
    } else
    {
      return false;
    }
  }


  public String getUserFriendlyName() {
    return "Safe Delete (under construction)";
  }

  public String getSourceId() {
    return "jetbrains.mps.core.scripts@1_0_1200667642215#1200665013408";
  }

  public String getKeyStroke() {
    return SafeDelete.getKeyStroke_static();
  }

  public boolean isApplicableWRTConcept(SNode node) {
    return SafeDelete.isApplicableWRTConcept_static(node);
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.core.structure.BaseConcept";
  }

  public Class getOverridenRefactoringClass() {
    return null;
  }

  public boolean isApplicable(ActionContext actionContext, RefactoringContext refactoringContext) {
    {
      SNode node = actionContext.getNode();
      if(node == null) {
        return false;
      }
      SearchResults searchResults = new NodeUsages_Finder().find(new SearchQuery(new SNodePointer(node), actionContext.getScope()));
      List<SearchResult> aliveResults = searchResults.getAliveResults();
      if(!(aliveResults.isEmpty())) {
        int size = aliveResults.size();
        JOptionPane.showMessageDialog(((IDEProjectFrame)actionContext.get(IDEProjectFrame.class)).getMainFrame(), size + " usages found, can't perform safe delete");
        return false;
      }
      return true;
    }
  }

  public void doRefactor(ActionContext actionContext, RefactoringContext refactoringContext) {
    {
      SNode node = actionContext.getNode();
      SNodeOperations.deleteNode(node);
    }
  }

  public Map<IModule, List<SModel>> getModelsToGenerate(ActionContext actionContext, RefactoringContext refactoringContext) {
    return new HashMap<IModule, List<SModel>>();
  }

  public void updateModel(SModel model, RefactoringContext refactoringContext) {
  }

  public boolean askForInfo(ActionContext actionContext, RefactoringContext refactoringContext) {
    boolean result = false;
    List<IChooseComponent> components = new ArrayList<IChooseComponent>();
    ChooseRefactoringInputDataDialog dialog = new ChooseRefactoringInputDataDialog(this, actionContext, refactoringContext, components);
    dialog.showDialog();
    result = dialog.getResult();
    return result;
  }

}
