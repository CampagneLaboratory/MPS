package jetbrains.mps.bootstrap.helgins.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import java.util.Iterator;
import java.util.List;

public class InferenceRule extends AbstractCheckingRule {
  public static final String concept = "jetbrains.mps.bootstrap.helgins.structure.InferenceRule";
  public static String DEPENDENCY = "dependency";

  public  InferenceRule(SNode node) {
    super(node);
  }

  public static InferenceRule newInstance(SModel sm, boolean init) {
    return (InferenceRule)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.bootstrap.helgins.structure.InferenceRule", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static InferenceRule newInstance(SModel sm) {
    return InferenceRule.newInstance(sm, false);
  }


  public int getDependencysCount() {
    return this.getChildCount(InferenceRule.DEPENDENCY);
  }

  public Iterator<Dependency> dependencys() {
    return this.children(InferenceRule.DEPENDENCY);
  }

  public List<Dependency> getDependencys() {
    return this.getChildren(InferenceRule.DEPENDENCY);
  }

  public void addDependency(Dependency node) {
    this.addChild(InferenceRule.DEPENDENCY, node);
  }

  public void insertDependency(Dependency prev, Dependency node) {
    this.insertChild(prev, InferenceRule.DEPENDENCY, node);
  }

}
