package jetbrains.mps.bootstrap.structureLanguage.findUsages;

/*Generated by MPS */

import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.findUsages.FindUsagesManager;
import jetbrains.mps.ide.findusages.findalgorithm.finders.BaseFinder;
import jetbrains.mps.ide.findusages.model.result.SearchResult;
import jetbrains.mps.ide.findusages.model.result.SearchResults;
import jetbrains.mps.ide.findusages.model.searchquery.SearchQuery;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SNodePointer;

import java.util.List;

public class ConceptInstances_Finder extends BaseFinder {

  public String getConcept() {
    return "jetbrains.mps.core.structure.BaseConcept";
  }

  public String getDescription() {
    return "Concept Instances";
  }

  public boolean isApplicable(SNode node) {
    return SNodeOperations.isInstanceOf(node, "jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration");
  }

  public SearchResults find(SearchQuery searchQuery) {
    SearchResults results = new SearchResults();
    {
      List<SNode> resNodes = FindUsagesManager.getInstance().findInstances(searchQuery.getNodePointer().getNode(), searchQuery.getScope());
      for (SNode node : resNodes) {
        results.getSearchResults().add(new SearchResult(new SNodePointer(node), "Concept Instances"));
      }
      results.getSearchedNodePointers().add(searchQuery.getNodePointer());
    }
    return results;
  }

}
