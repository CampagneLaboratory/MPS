package jetbrains.mps.bootstrap.structureLanguage.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.BaseFinder;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.ide.findusages.model.result.SearchResults;
import jetbrains.mps.ide.findusages.model.searchquery.SearchQuery;
import java.util.Set;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.findUsages.FindUsagesManager;
import jetbrains.mps.ide.findusages.model.result.SearchResult;
import jetbrains.mps.smodel.SNodePointer;

public class NodeUsages_Finder extends BaseFinder {

  public String getConcept() {
    return "jetbrains.mps.core.structure.BaseConcept";
  }

  public String getDescription() {
    return "Node Usages";
  }

  public boolean isApplicable(SNode node) {
    return true;
  }

  public SearchResults find(SearchQuery searchQuery) {
    Set<SReference> resRefs = FindUsagesManager.getInstance().findUsages(searchQuery.getNodePointer().getNode(), searchQuery.getScope());
    SearchResults results = new SearchResults();
    for(SReference reference : resRefs) {
      results.getSearchResults().add(new SearchResult(new SNodePointer(reference.getSourceNode()), "Node Usages"));
    }
    results.getSearchedNodePointers().add(searchQuery.getNodePointer());
    return results;
  }

}
