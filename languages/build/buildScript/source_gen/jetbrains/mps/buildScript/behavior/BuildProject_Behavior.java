package jetbrains.mps.buildScript.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.buildScript.util.Context;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.annotations.NotNull;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.buildScript.util.ScopeUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptPropertyOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.scope.CompositeScope;
import jetbrains.mps.smodel.structure.ExtensionPoint;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BuildProject_Behavior {
  public static void init(SNode thisNode) {
    SPropertyOperations.set(thisNode, "internalBaseDirectory", BuildProject_Behavior.call_getBasePath_4959435991187146924(thisNode, Context.defaultContext()));
    SLinkOperations.setTarget(thisNode, "scriptsDir", new BuildProject_Behavior.QuotationClass_save77_a2a1a0().createNode(), true);
  }

  @NotNull
  public static String call_getBasePath_4959435991187146924(SNode thisNode, Context context) {
    if (StringUtils.isNotEmpty(SPropertyOperations.getString(thisNode, "internalBaseDirectory"))) {
      return MacrosFactory.projectDescriptor().expandPath(SPropertyOperations.getString(thisNode, "internalBaseDirectory"), (IFile) null);
    }

    IFile descriptorFile = context.getModule(thisNode).getDescriptorFile();
    assert descriptorFile != null : "Context " + context + " returned module " + context.getModule(thisNode) + " with null descriptor.";
    return descriptorFile.getParent().getPath();
  }

  @NotNull
  public static String call_getScriptsPath_4796668409958419284(SNode thisNode, Context context) {
    if ((SLinkOperations.getTarget(thisNode, "scriptsDir", true) != null)) {
      return BuildSourcePath_Behavior.call_getLocalPath_5481553824944787364(SLinkOperations.getTarget(thisNode, "scriptsDir", true), context);
    }
    return BuildProject_Behavior.call_getBasePath_4959435991187146924(thisNode, context) + "/build";
  }

  public static String call_getBasePathRelativeToScriptsPath_5178006408628632053(SNode thisNode, Context context) {
    String scriptsPath = BuildProject_Behavior.call_getScriptsPath_4796668409958419284(thisNode, context);
    String basePath = BuildProject_Behavior.call_getBasePath_4959435991187146924(thisNode, context);
    return FileUtil.getRelativePath(basePath, scriptsPath, "/");
  }

  public static Scope virtual_getScope_3734116213129936182(SNode thisNode, SNode kind, final SNode child) {
    if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.buildScript.structure.BuildMacro")) {
      return BuildProject_Behavior.call_getBuildMacroScope_3767587139141108514(thisNode, child);
    }
    return null;
  }

  public static Scope call_getBuildMacroScope_3767587139141108514(SNode thisNode, final SNode child) {
    Scope rootScope = ScopeUtil.simpleRoleScope(thisNode, SLinkOperations.findLinkDeclaration("jetbrains.mps.buildScript.structure.BuildProject", "macros"));
    SNode containingProject = SNodeOperations.getAncestor(child, "jetbrains.mps.buildScript.structure.BuildProject", false, false);
    if (neq_save77_a0c0f(containingProject, thisNode)) {
      // we are imported => give away only public macro 
      rootScope = ScopeUtil.where(rootScope, new _FunctionTypes._return_P1_E0<Boolean, SNode>() {
        public Boolean invoke(SNode node) {
          return SConceptPropertyOperations.getBoolean(SNodeOperations.cast(node, "jetbrains.mps.buildScript.structure.BuildMacro"), "public");
        }
      });
    }
    if ((containingProject != null)) {
      final Wrappers._T<SNode> definedMacro = new Wrappers._T<SNode>();
      if (ListSequence.fromList(SLinkOperations.getTargets(containingProject, "macros", true)).contains(child)) {
        definedMacro.value = SNodeOperations.cast(child, "jetbrains.mps.buildScript.structure.BuildMacro");
      } else {
        definedMacro.value = ListSequence.fromList(SLinkOperations.getTargets(containingProject, "macros", true)).findFirst(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return ListSequence.fromList(SNodeOperations.getDescendants(it, null, false, new String[]{})).contains(child);
          }
        });
      }
      if ((definedMacro.value != null)) {
        // we can only see what was strictly before us 
        rootScope = ScopeUtil.where(rootScope, new _FunctionTypes._return_P1_E0<Boolean, SNode>() {
          public Boolean invoke(SNode visibleNode) {
            return !(ListSequence.fromList(SNodeOperations.getNextSiblings(definedMacro.value, false)).contains(visibleNode)) && !(eq_save77_a0a0a0a0a1a0b0c0d0f(definedMacro.value, visibleNode));
          }
        });
      }
    }

    List<Scope> scopes = ListSequence.fromList(new ArrayList<Scope>());
    ListSequence.fromList(scopes).addElement(rootScope);
    ListSequence.fromList(scopes).addSequence(Sequence.fromIterable(ScopeUtil.imported(SLinkOperations.getTargets(thisNode, "dependencies", true), SConceptOperations.findConceptDeclaration("jetbrains.mps.buildScript.structure.BuildMacro"), child)));

    return new CompositeScope(ListSequence.fromList(scopes).toGenericArray(Scope.class));
  }

  public static boolean canEditBaseDir_8419583202466289469() {
    ExtensionPoint<_FunctionTypes._return_P0_E0<? extends Boolean>> point = ExtensionPoint.<_FunctionTypes._return_P0_E0<? extends Boolean>>generify(new ExtensionPoint("jetbrains.mps.buildScript.CanEditBaseDir", _FunctionTypes._return_P0_E0.class));
    return Sequence.fromIterable(point.getObjects()).findFirst(new IWhereFilter<_FunctionTypes._return_P0_E0<? extends Boolean>>() {
      public boolean accept(_FunctionTypes._return_P0_E0<? extends Boolean> it) {
        return it.invoke();
      }
    }) != null;
  }

  private static boolean neq_save77_a0c0f(Object a, Object b) {
    return !((a != null ?
      a.equals(b) :
      a == b
    ));
  }

  private static boolean eq_save77_a0a0a0a0a1a0b0c0d0f(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  public static class QuotationClass_save77_a2a1a0 {
    public QuotationClass_save77_a2a1a0() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      SNode quotedNode_2 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.buildScript.structure.BuildSourceProjectRelativePath", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_3 = quotedNode_1;
        {
          quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.buildScript.structure.CompositePath", null, GlobalScope.getInstance(), false);
          SNode quotedNode1_4 = quotedNode_2;
          quotedNode1_4.setProperty("head", "build");
          quotedNode_1.addChild("compositePart", quotedNode1_4);
        }
        result = quotedNode1_3;
      }
      return result;
    }
  }
}
