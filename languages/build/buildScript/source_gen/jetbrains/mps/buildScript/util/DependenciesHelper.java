package jetbrains.mps.buildScript.util;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.smodel.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class DependenciesHelper {
  private final Map<SNode, String> locationMap;
  private final Map<SNode, String> contentLocationMap;
  private final Map<Object, SNode> idToArtifactMap;
  protected final MacroHelper macros;

  public DependenciesHelper(@NotNull TemplateQueryContext genContext, SNode project) {
    this.locationMap = GenerationUtil.<SNode,String>getSessionMap(project, genContext, "location");
    this.contentLocationMap = GenerationUtil.<SNode,String>getSessionMap(project, genContext, "contentLocation");
    this.idToArtifactMap = GenerationUtil.<Object,SNode>getSessionMap(project, genContext, "IDToArtifact");
    this.macros = new MacroHelper.MacroContext(project, genContext).getMacros(project);
  }

  public Map<SNode, String> locations() {
    return locationMap;
  }

  public Map<SNode, String> contentLocations() {
    return contentLocationMap;
  }

  public Map<Object, SNode> artifacts() {
    return idToArtifactMap;
  }

  public static SNode getOriginalNode(SNode node, TemplateQueryContext genContext) {
    if (SNodeOperations.getModel(node).isTransient()) {
      if (genContext == null) {
        throw new IllegalStateException("transient model is not expected");
      }
      SNode originalNode = genContext.getOriginalCopiedInputNode(node);
      if ((originalNode != null)) {
        return originalNode;
      } else {
        genContext.showErrorMessage(node, "cannot resolve dependency on transient model, no original node is available");
      }
      return null;
    }
    return node;
  }
}
