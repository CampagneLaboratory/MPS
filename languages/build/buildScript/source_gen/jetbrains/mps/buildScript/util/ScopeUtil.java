package jetbrains.mps.buildScript.util;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.scope.SimpleRoleScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.scope.DelegatingScope;
import java.util.List;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.core.behavior.ScopeProvider_Behavior;

public class ScopeUtil {
  public ScopeUtil() {
  }

  public static Scope simpleRoleScope(SNode node, SNode link) {
    return new SimpleRoleScope(node, link) {
      public String getName(SNode child) {
        return SPropertyOperations.getString(SNodeOperations.cast(child, "jetbrains.mps.lang.core.structure.INamedConcept"), "name");
      }
    };
  }

  public static Scope where(Scope scope, final _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> filter) {
    return new DelegatingScope(scope) {
      public List<SNode> getAvailableElements(@Nullable String prefix) {
        return ListSequence.fromList(wrapped.getAvailableElements(prefix)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return filter.invoke(it);
          }
        }).toListSequence();
      }
    };
  }

  public static Iterable<Scope> imported(List<SNode> importDeclarations, final SNode concept, final SNode child) {
    return ListSequence.fromList(importDeclarations).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        // searching for smart references 
        return (int) Sequence.fromIterable(SNodeOperations.getReferences(it)).count() == 1 && SNodeOperations.isInstanceOf(SLinkOperations.getTargetNode(Sequence.fromIterable(SNodeOperations.getReferences(it)).first()), "jetbrains.mps.lang.core.structure.ScopeProvider");
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        // that references providers 
        return SNodeOperations.cast(SLinkOperations.getTargetNode(Sequence.fromIterable(SNodeOperations.getReferences(it)).first()), "jetbrains.mps.lang.core.structure.ScopeProvider");
      }
    }).select(new ISelector<SNode, Scope>() {
      public Scope select(SNode it) {
        return ScopeProvider_Behavior.call_getScope_3734116213129936182(it, concept, child);
      }
    });
  }
}
