package jetbrains.mps.buildScript.util;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.generator.template.TemplateQueryContext;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.buildScript.behavior.BuildProject_Behavior;
import jetbrains.mps.smodel.SModelDescriptor;

public class Context {
  private Map<String, Object> myProperties = MapSequence.fromMap(new HashMap<String, Object>());
  private Map<String, Map<SNodeId, Integer>> myNamesIndex = MapSequence.fromMap(new HashMap<String, Map<SNodeId, Integer>>());
  private TemplateQueryContext myGenerationContext;

  public Context() {
  }

  public Context(TemplateQueryContext generationContext) {
    myGenerationContext = generationContext;
  }

  @Nullable
  public Object put(String key, Object value) {
    Object previousValue = MapSequence.fromMap(myProperties).get(key);
    MapSequence.fromMap(myProperties).put(key, value);
    return previousValue;
  }

  @Nullable
  public <T> T get(String key) {
    return ((T) MapSequence.fromMap(myProperties).get(key));
  }

  protected SNode getBuildProject(SNode node) {
    return SNodeOperations.getAncestor(node, "jetbrains.mps.buildScript.structure.BuildProject", true, false);
  }

  public String getBuildProjectName(SNode node) {
    return SPropertyOperations.getString(getBuildProject(node), "name");
  }

  @NotNull
  public IModule getModule(SModel model) {
    if (myGenerationContext != null) {
      return myGenerationContext.getOriginalInputModel().getModelDescriptor().getModule();
    }
    return model.getModelDescriptor().getModule();
  }

  public String getUniqueName(SNode node, String name) {
    Map<SNodeId, Integer> map = MapSequence.fromMap(myNamesIndex).get(name);
    if (map == null) {
      map = MapSequence.fromMap(new HashMap<SNodeId, Integer>());
      MapSequence.fromMap(myNamesIndex).put(name, map);
    }
    Integer integer = MapSequence.fromMap(map).get(node.getSNodeId());
    if (integer == null) {
      integer = MapSequence.fromMap(map).count();
      MapSequence.fromMap(map).put(node.getSNodeId(), integer);
    }
    return name + (((integer == 0) ?
      "" :
      "_" + integer
    ));
  }

  public String getBasePath_Local(SNode node) {
    return BuildProject_Behavior.call_getBasePath_4959435991187146924(this.getBuildProject(node), this);
  }

  public RelativePathHelper getRelativePathHelper(SModel model) {
    if (model.isTransient() && myGenerationContext != null) {
      model = myGenerationContext.getOriginalInputModel();
    }
    SModelDescriptor modelDescriptor = model.getModelDescriptor();
    if (model.isTransient() || modelDescriptor == null) {
      return null;
    }
    IModule module = modelDescriptor.getModule();
    if (module == null || module.getDescriptorFile() == null) {
      return null;
    }
    String basePath = module.getDescriptorFile().getParent().getPath();
    return new RelativePathHelper(basePath);
  }

  public TemplateQueryContext getGenerationContext() {
    return myGenerationContext;
  }

  @NotNull
  public static Context defaultContext() {
    return new Context();
  }

  @NotNull
  public static Context defaulContext(final TemplateQueryContext gencontext) {
    Context context = ((Context) gencontext.getSessionObject(Context.class));
    if (context == null) {
      context = new Context(gencontext);
      gencontext.putSessionObject(Context.class, context);
    }
    return context;
  }
}
