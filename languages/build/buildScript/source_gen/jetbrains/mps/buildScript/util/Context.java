package jetbrains.mps.buildScript.util;

/*Generated by MPS */

import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.annotations.Nullable;

public class Context {
  private final SNodePointer myEnvironment;
  private Map<String, Object> myProperties = MapSequence.fromMap(new HashMap<String, Object>());

  public Context(SNode environment) {
    myEnvironment = new SNodePointer(environment);
  }

  public SNode getEnvironment() {
    return SNodeOperations.cast(myEnvironment.getNode(), "jetbrains.mps.buildScript.structure.Environment");
  }

  @Nullable
  public Object put(String key, Object value) {
    Object previousValue = MapSequence.fromMap(myProperties).get(key);
    MapSequence.fromMap(myProperties).put(key, value);
    return previousValue;
  }

  @Nullable
  public <T> T get(String key) {
    return ((T) MapSequence.fromMap(myProperties).get(key));
  }

  @Nullable
  public static Context defaultContext(SNode node) {
    SNode ancestor = SNodeOperations.getAncestor(node, "jetbrains.mps.buildScript.structure.Environment", true, false);
    if (ancestor == null) {
      return null;
    }
    return new Context(ancestor);
  }
}
