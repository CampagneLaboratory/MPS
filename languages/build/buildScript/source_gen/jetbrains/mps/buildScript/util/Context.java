package jetbrains.mps.buildScript.util;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.generator.template.TemplateQueryContext;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.buildScript.behavior.BuildProject_Behavior;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.buildScript.behavior.BuildSourcePath_Behavior;
import jetbrains.mps.vfs.IFile;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.util.MacrosFactory;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Context {
  private Map<String, Object> myProperties = MapSequence.fromMap(new HashMap<String, Object>());
  private Map<String, Map<SNodeId, Integer>> myNamesIndex = MapSequence.fromMap(new HashMap<String, Map<SNodeId, Integer>>());
  private TemplateQueryContext myGenerationContext;

  public Context() {
  }

  public Context(TemplateQueryContext generationContext) {
    myGenerationContext = generationContext;
  }

  @Nullable
  public Object put(String key, Object value) {
    Object previousValue = MapSequence.fromMap(myProperties).get(key);
    MapSequence.fromMap(myProperties).put(key, value);
    return previousValue;
  }

  @Nullable
  public <T> T get(String key) {
    return ((T) MapSequence.fromMap(myProperties).get(key));
  }

  protected SNode getBuildProject(SNode node) {
    return SNodeOperations.getAncestor(node, "jetbrains.mps.buildScript.structure.BuildProject", true, false);
  }

  public String getBuildProjectName(SNode node) {
    return SPropertyOperations.getString(getBuildProject(node), "name");
  }

  @NotNull
  public IModule getModule(SModel model) {
    if (myGenerationContext != null) {
      return myGenerationContext.getOriginalInputModel().getModelDescriptor().getModule();
    }
    return model.getModelDescriptor().getModule();
  }

  public String getBasePath_Local(SNode node) {
    return BuildProject_Behavior.call_getBasePath_4959435991187146924(this.getBuildProject(node), this);
  }

  public String getTmpDirMacroName(SNode node) {
    return SPropertyOperations.getString(this.getBuildProject(node), "name") + ".tmp";
  }

  public String getTmpPath_WithMacro(SNode node) {
    return "${build.dir}/tmp/" + SPropertyOperations.getString(getBuildProject(node), "name") + ".tmp";
  }

  public String getDeployDirMacroName(SNode node) {
    return SPropertyOperations.getString(this.getBuildProject(node), "name") + ".deploy.dir";
  }

  public String getDeployPath_WithMacro(SNode node) {
    return "${build.dir}/artifacts/" + SPropertyOperations.getString(getBuildProject(node), "name") + ".artifacts";
  }

  public String getVariablesDeployPath(SNode node) {
    return getDeployPath_WithMacro(node) + "/" + getBuildProjectName(node) + ".variables.properties";
  }

  public List<SNode> getExportedMacro(SNode node) {
    List<SNode> exportedMacro = new ArrayList<SNode>();
    ListSequence.fromList(exportedMacro).addElement(new Context.QuotationClass_lmsybr_a0a0b0l().createNode(getTmpPath_WithMacro(node), getTmpDirMacroName(node)));
    ListSequence.fromList(exportedMacro).addElement(new Context.QuotationClass_lmsybr_a0a0c0l().createNode(getDeployPath_WithMacro(node), getDeployDirMacroName(node)));
    return exportedMacro;
  }

  public String getUniqueName(SNode node, String name) {
    Map<SNodeId, Integer> map = MapSequence.fromMap(myNamesIndex).get(name);
    if (map == null) {
      map = MapSequence.fromMap(new HashMap<SNodeId, Integer>());
      MapSequence.fromMap(myNamesIndex).put(name, map);
    }
    Integer integer = MapSequence.fromMap(map).get(node.getSNodeId());
    if (integer == null) {
      integer = MapSequence.fromMap(map).count();
      MapSequence.fromMap(map).put(node.getSNodeId(), integer);
    }
    return name + (((integer == 0) ?
      "" :
      "_" + integer
    ));
  }

  public String getDefaultScriptsPath(final SNode project) {
    return BuildSourcePath_Behavior.call_getLocalPath_5481553824944787364(new Context.QuotationClass_lmsybr_a0a0a31().createNode(), new Context(this.myGenerationContext) {
      @Override
      protected SNode getBuildProject(SNode node) {
        return project;
      }
    });
  }

  public String getDefaultBasePath(SModel model) {
    IFile descriptorFile = this.getModule(model).getDescriptorFile();
    assert descriptorFile != null : "Context " + this + " returned module " + this.getModule(model) + " for node " + model + " with null descriptor.";
    return descriptorFile.getParent().getPath();
  }

  public String shrinkPath(final SModel model, String fullPath) {
    if (StringUtils.isEmpty(fullPath)) {
      return "";
    }
    final Wrappers._T<IModule> module = new Wrappers._T<IModule>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        module.value = getModule(model);
      }
    });
    return MacrosFactory.moduleDescriptor(module.value).shrinkPath(fullPath, module.value.getDescriptorFile()).replace("\\", "/");
  }

  public String expandPath(final SModel model, String shortPath) {
    if (shortPath == null) {
      shortPath = "";
    }
    final Wrappers._T<IModule> module = new Wrappers._T<IModule>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        module.value = getModule(model);
      }
    });
    if (!(shortPath.startsWith("${"))) {
      // path is probably relative to solution 
      if (shortPath.startsWith("/")) {
        shortPath = shortPath.substring(1);
      }
      return module.value.getDescriptorFile().getParent().getDescendant(shortPath).getPath();
    }
    return MacrosFactory.moduleDescriptor(module.value).expandPath(shortPath, module.value.getDescriptorFile()).replace("\\", "/");
  }

  @NotNull
  public static Context defaultContext() {
    return new Context();
  }

  @NotNull
  public static Context defaulContext(final TemplateQueryContext gencontext) {
    Context context = ((Context) gencontext.getSessionObject(Context.class));
    if (context == null) {
      context = new Context(gencontext);
      gencontext.putSessionObject(Context.class, context);
    }
    return context;
  }

  public static class QuotationClass_lmsybr_a0a0b0l {
    public QuotationClass_lmsybr_a0a0b0l() {
    }

    public SNode createNode(Object parameter_3, Object parameter_4) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.buildScript.structure.ExportedMacroInternal", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setProperty("defaultPath", (String) parameter_3);
        quotedNode1_2.setProperty("name", (String) parameter_4);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_lmsybr_a0a0c0l {
    public QuotationClass_lmsybr_a0a0c0l() {
    }

    public SNode createNode(Object parameter_3, Object parameter_4) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.buildScript.structure.ExportedMacroInternal", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.setProperty("defaultPath", (String) parameter_3);
        quotedNode1_2.setProperty("name", (String) parameter_4);
        result = quotedNode1_2;
      }
      return result;
    }
  }

  public static class QuotationClass_lmsybr_a0a0a31 {
    public QuotationClass_lmsybr_a0a0a31() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.buildScript.structure.BuildSourceProjectRelativePath", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }
}
