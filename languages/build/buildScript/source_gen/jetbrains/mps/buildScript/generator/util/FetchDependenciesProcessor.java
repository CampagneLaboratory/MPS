package jetbrains.mps.buildScript.generator.util;

/*Generated by MPS */

import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.smodel.SNode;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.buildScript.util.VisibleArtifacts;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.buildScript.behavior.BuildExternalDependency_Behavior;

public class FetchDependenciesProcessor {
  private TemplateQueryContext genContext;
  private SNode project;
  private Set<SNode> requiredArtifacts = new HashSet<SNode>();

  public FetchDependenciesProcessor(SNode project, TemplateQueryContext genContext) {
    this.genContext = genContext;
    this.project = project;
  }

  public void process() {
    VisibleArtifacts artifacts = new VisibleArtifacts(project, genContext);
    artifacts.collect();
    for (SNode dep : SNodeOperations.getDescendants(project, "jetbrains.mps.buildScript.structure.BuildExternalDependency", false, new String[]{})) {
      Iterable<SNode> dependencyTargets = BuildExternalDependency_Behavior.call_getDependencyTargets_841011766566205095(dep, artifacts);
      for (SNode node : dependencyTargets) {
        if (SNodeOperations.getModel(node).isTransient()) {
          genContext.showErrorMessage(dep, "returned dependency in transient model: " + node.getDebugText());
          continue;
        }
        if (!(artifacts.contains(node))) {
          genContext.showErrorMessage(dep, "returned node which is not available in dependencies: " + node.getDebugText());
          continue;
        }
        requiredArtifacts.add(node);
      }
    }
  }
}
