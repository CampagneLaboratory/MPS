package jetbrains.mps.buildScript.generator.util;

/*Generated by MPS */

import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.smodel.SNode;
import java.util.Set;
import java.util.LinkedHashSet;
import jetbrains.mps.buildScript.util.VisibleArtifacts;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.buildScript.behavior.BuildExternalDependency_Behavior;
import jetbrains.mps.buildScript.util.UnpackHelper;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SNodeId;

public class FetchDependenciesProcessor {
  private TemplateQueryContext genContext;
  private SNode project;
  private Set<SNode> requiredArtifacts = new LinkedHashSet<SNode>();

  public FetchDependenciesProcessor(SNode project, TemplateQueryContext genContext) {
    this.genContext = genContext;
    this.project = project;
  }

  public void process() {
    VisibleArtifacts artifacts = new VisibleArtifacts(project, genContext);
    artifacts.collect();
    for (SNode dep : SNodeOperations.getDescendants(project, "jetbrains.mps.buildScript.structure.BuildExternalDependency", false, new String[]{})) {
      Iterable<SNode> dependencyTargets = BuildExternalDependency_Behavior.call_getDependencyTargets_841011766566205095(dep, artifacts);
      for (SNode node : dependencyTargets) {
        if (SNodeOperations.getModel(node).isTransient()) {
          genContext.showErrorMessage(dep, "returned dependency in transient model: " + node.getDebugText());
          continue;
        }
        if (!(artifacts.contains(node))) {
          genContext.showErrorMessage(dep, "returned node which is not available in dependencies: " + node.getDebugText());
          continue;
        }
        requiredArtifacts.add(node);
      }
    }
    UnpackHelper helper = new UnpackHelper(artifacts, requiredArtifacts, genContext);
    helper.eval();

    List<SNode> statements = helper.getStatements();
    if (!(ListSequence.fromList(statements).isEmpty())) {
      SNode wf = SModelOperations.createNewNode(SNodeOperations.getModel(project), "jetbrains.mps.buildScript.structure.BuildCustomWorkflow", null);
      SNode taskpart = SModelOperations.createNewNode(SNodeOperations.getModel(project), "jetbrains.mps.build.workflow.structure.BwfTaskPart", null);
      SLinkOperations.setTarget(taskpart, "task", SLinkOperations.getTarget(new FetchDependenciesProcessor.QuotationClass_t02zqv_a0a0c0h0a().createNode(), "target", false), false);
      ListSequence.fromList(SLinkOperations.getTargets(wf, "parts", true)).addElement(taskpart);
      SNode stask = SModelOperations.createNewNode(SNodeOperations.getModel(project), "jetbrains.mps.build.workflow.structure.BwfSubTask", null);
      ListSequence.fromList(SLinkOperations.getTargets(taskpart, "subTasks", true)).addElement(stask);
      ListSequence.fromList(SLinkOperations.getTargets(stask, "statements", true)).addSequence(ListSequence.fromList(statements));
      ListSequence.fromList(SLinkOperations.getTargets(project, "aspects", true)).addElement(wf);
    }
  }

  public static class QuotationClass_t02zqv_a0a0c0h0a {
    public QuotationClass_t02zqv_a0a0c0h0a() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.workflow.structure.BwfTaskDependency", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        quotedNode1_2.addReference(SReference.create("target", quotedNode1_2, SModelReference.fromString("r:14f06230-41df-42af-9a25-81de46539bf1(jetbrains.mps.build.workflow.accessories)"), SNodeId.fromString("7128123785277844790")));
        result = quotedNode1_2;
      }
      return result;
    }
  }
}
