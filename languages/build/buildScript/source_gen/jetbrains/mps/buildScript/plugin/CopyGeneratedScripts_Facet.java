package jetbrains.mps.buildScript.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IPropertiesPersistence;
import jetbrains.mps.make.facet.ITargetEx;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.smodel.resources.ITResource;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.resources.IPropertiesAccessor;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.smodel.resources.TResource;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.traceInfo.DebugInfo;
import jetbrains.mps.internal.make.runtime.util.DeltaReconciler;
import jetbrains.mps.internal.make.runtime.util.FilesDelta;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.make.script.IFeedback;
import jetbrains.mps.ide.ThreadUtils;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.vfs.IFileUtils;
import jetbrains.mps.make.script.IConfig;
import jetbrains.mps.smodel.resources.IGResource;
import java.util.HashMap;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.generator.GenerationStatus;
import jetbrains.mps.smodel.resources.GResource;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.buildScript.util.GenerationUtil;
import jetbrains.mps.generator.generationTypes.TextGenerator;
import java.util.Map;
import jetbrains.mps.make.script.IPropertiesPool;

public class CopyGeneratedScripts_Facet extends IFacet.Stub {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("jetbrains.mps.buildScript.CopyGeneratedScripts");

  public CopyGeneratedScripts_Facet() {
    ListSequence.fromList(targets).addElement(new CopyGeneratedScripts_Facet.Target_copyFiles());
    ListSequence.fromList(targets).addElement(new CopyGeneratedScripts_Facet.Target_collectDirs());
  }

  public Iterable<ITarget> targets() {
    return targets;
  }

  public Iterable<IFacet.Name> optional() {
    return null;
  }

  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.lang.core.Generate"), new IFacet.Name("jetbrains.mps.lang.core.TextGen")});
  }

  public Iterable<IFacet.Name> extended() {
    return null;
  }

  public IFacet.Name getName() {
    return this.name;
  }

  public IPropertiesPersistence propertiesPersistence() {
    return new CopyGeneratedScripts_Facet.TargetProperties();
  }

  public static class Target_copyFiles implements ITargetEx {
    private static Class<? extends IResource>[] EXPECTED_INPUT = (Class<? extends IResource>[]) new Class[]{ITResource.class};
    private static Class<? extends IResource>[] EXPECTED_OUTPUT = (Class<? extends IResource>[]) new Class[]{};

    private ITarget.Name name = new ITarget.Name("jetbrains.mps.buildScript.CopyGeneratedScripts.copyFiles");

    public Target_copyFiles() {
    }

    public IJob createJob() {
      return new IJob.Stub() {
        public IResult execute(final Iterable<IResource> input, final IJobMonitor monitor, final IPropertiesAccessor pa) {
          Iterable<IResource> _output_ixa0pj_a0a = null;
          switch (0) {
            case 0:
              for (IResource resource : input) {
                final List<Tuples._2<IFile, IFile>> toCopy = ListSequence.fromList(new ArrayList<Tuples._2<IFile, IFile>>());

                final TResource tres = (TResource) resource;
                if (MapSequence.fromMap(pa.global().properties(new ITarget.Name("jetbrains.mps.buildScript.CopyGeneratedScripts.collectDirs"), CopyGeneratedScripts_Facet.Target_collectDirs.Parameters.class).status()).get(tres.modelDescriptor().getSModelReference()) != null) {

                  final DebugInfo debugInfo = MapSequence.fromMap(pa.global().properties(new ITarget.Name("jetbrains.mps.buildScript.CopyGeneratedScripts.collectDirs"), CopyGeneratedScripts_Facet.Target_collectDirs.Parameters.class).status()).get(tres.modelDescriptor().getSModelReference()).getDebugInfo();

                  new DeltaReconciler(tres.delta()).visitAll(new FilesDelta.Visitor() {
                    @Override
                    public boolean acceptWritten(IFile file) {
                      if (!(Sequence.fromIterable(Sequence.fromArray(new String[]{"dependencies", "generated", "trace.info"})).contains(file.getName()))) {

                        String nodeId = debugInfo.getNodeIdForFileName(file.getName());
                        if (StringUtils.isNotEmpty(nodeId)) {
                          String destPath = MapSequence.fromMap(pa.global().properties(new ITarget.Name("jetbrains.mps.buildScript.CopyGeneratedScripts.collectDirs"), CopyGeneratedScripts_Facet.Target_collectDirs.Parameters.class).originalNodesToDestination()).get(new SNodePointer(tres.modelDescriptor().getSModelReference().toString(), nodeId));
                          if (StringUtils.isNotEmpty(destPath)) {
                            IFile destDir = FileSystem.getInstance().getFileByPath(destPath);
                            IFile copy = destDir.getDescendant(file.getName());
                            ListSequence.fromList(toCopy).addElement(MultiTuple.<IFile,IFile>from(file, copy));
                            monitor.reportFeedback(new IFeedback.INFORMATION(String.valueOf("Copying " + ListSequence.fromList(toCopy).last())));
                          }
                        }

                      }
                      return true;
                    }
                  });

                }
                ThreadUtils.runInUIThreadAndWait(new Runnable() {
                  public void run() {
                    ModelAccess.instance().requireWrite(new Runnable() {
                      public void run() {
                        ListSequence.fromList(toCopy).visitAll(new IVisitor<Tuples._2<IFile, IFile>>() {
                          public void visit(Tuples._2<IFile, IFile> ftc) {
                            IFileUtils.copyFileContent(ftc._0(), ftc._1());
                          }
                        });
                      }
                    });
                  }
                });
                _output_ixa0pj_a0a = Sequence.fromIterable(_output_ixa0pj_a0a).concat(Sequence.fromIterable(Sequence.<IResource>singleton(resource)));
              }
            default:
              return new IResult.SUCCESS(_output_ixa0pj_a0a);
          }
        }
      };
    }

    public IConfig createConfig() {
      return null;
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGen"), new ITarget.Name("jetbrains.mps.buildScript.CopyGeneratedScripts.collectDirs")});
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.Make.reconcile")});
    }

    public ITarget.Name getName() {
      return name;
    }

    public boolean isOptional() {
      return false;
    }

    public boolean requiresInput() {
      return true;
    }

    public boolean producesOutput() {
      return true;
    }

    public Iterable<Class<? extends IResource>> expectedInput() {
      return Sequence.fromArray(EXPECTED_INPUT);
    }

    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }

    public <T> T createParameters(Class<T> cls) {
      return null;
    }

    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      return t;
    }
  }

  public static class Target_collectDirs implements ITargetEx {
    private static Class<? extends IResource>[] EXPECTED_INPUT = (Class<? extends IResource>[]) new Class[]{IGResource.class};
    private static Class<? extends IResource>[] EXPECTED_OUTPUT = (Class<? extends IResource>[]) new Class[]{};

    private ITarget.Name name = new ITarget.Name("jetbrains.mps.buildScript.CopyGeneratedScripts.collectDirs");

    public Target_collectDirs() {
    }

    public IJob createJob() {
      return new IJob.Stub() {
        public IResult execute(final Iterable<IResource> input, final IJobMonitor monitor, final IPropertiesAccessor pa) {
          Iterable<IResource> _output_ixa0pj_a0b = null;
          switch (0) {
            case 0:
              pa.global().properties(Target_collectDirs.this.getName(), CopyGeneratedScripts_Facet.Target_collectDirs.Parameters.class).originalNodesToDestination(MapSequence.fromMap(new HashMap<SNodePointer, String>()));
              pa.global().properties(Target_collectDirs.this.getName(), CopyGeneratedScripts_Facet.Target_collectDirs.Parameters.class).status(MapSequence.fromMap(new HashMap<SModelReference, GenerationStatus>()));
              for (IResource resource : Sequence.fromIterable(input)) {
                final GResource gres = (GResource) resource;
                ModelAccess.instance().runReadAction(new Runnable() {
                  public void run() {
                    // we will need debug info from status 
                    MapSequence.fromMap(pa.global().properties(Target_collectDirs.this.getName(), CopyGeneratedScripts_Facet.Target_collectDirs.Parameters.class).status()).put(gres.model().getSModelReference(), gres.status());

                    // all descendants with scripts_dir_property 
                    Iterable<SNode> buildScriptDescendants = ListSequence.fromList(SModelOperations.getRoots(gres.status().getOutputModel(), null)).where(new IWhereFilter<SNode>() {
                      public boolean accept(SNode it) {
                        Object userObject = it.getUserObject(GenerationUtil.SCRIPTS_DIR_PROPERTY);
                        return userObject != null && userObject instanceof String;
                      }
                    });

                    // find input and map it to scripts dir 
                    for (SNode descendant : Sequence.fromIterable(buildScriptDescendants)) {
                      SNode originalNode = TextGenerator.getOriginalInputNodeForNearestParent(descendant);
                      MapSequence.fromMap(pa.global().properties(Target_collectDirs.this.getName(), CopyGeneratedScripts_Facet.Target_collectDirs.Parameters.class).originalNodesToDestination()).put(new SNodePointer(originalNode), ((String) descendant.getUserObject(GenerationUtil.SCRIPTS_DIR_PROPERTY)));
                    }
                  }
                });

                // todo 
                // some other roots that exist in the model 
                // do we need to copy them? 
                // what if some of them are build scripts (or generate build scripts %) )? 
                // what if some of them are required to be copied? 
                // some kind of annotation, like @ResourceFile(buildScript=buildscript) ???? 
                // yep 

                _output_ixa0pj_a0b = Sequence.fromIterable(_output_ixa0pj_a0b).concat(Sequence.fromIterable(Sequence.<IResource>singleton(resource)));
              }
            default:
              return new IResult.SUCCESS(_output_ixa0pj_a0b);
          }
        }
      };
    }

    public IConfig createConfig() {
      return null;
    }

    public Iterable<ITarget.Name> notAfter() {
      return null;
    }

    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.Generate.generate")});
    }

    public Iterable<ITarget.Name> notBefore() {
      return null;
    }

    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.TextGen.textGen")});
    }

    public ITarget.Name getName() {
      return name;
    }

    public boolean isOptional() {
      return false;
    }

    public boolean requiresInput() {
      return true;
    }

    public boolean producesOutput() {
      return true;
    }

    public Iterable<Class<? extends IResource>> expectedInput() {
      return Sequence.fromArray(EXPECTED_INPUT);
    }

    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }

    public <T> T createParameters(Class<T> cls) {
      return cls.cast(new Parameters());
    }

    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      if (t != null) {
        ((Tuples._2) t).assign((Tuples._2) copyFrom);
      }
      return t;
    }

    public static class Parameters extends MultiTuple._2<Map<SNodePointer, String>, Map<SModelReference, GenerationStatus>> {
      public Parameters() {
        super();
      }

      public Parameters(Map<SNodePointer, String> originalNodesToDestination, Map<SModelReference, GenerationStatus> status) {
        super(originalNodesToDestination, status);
      }

      public Map<SNodePointer, String> originalNodesToDestination(Map<SNodePointer, String> value) {
        return super._0(value);
      }

      public Map<SModelReference, GenerationStatus> status(Map<SModelReference, GenerationStatus> value) {
        return super._1(value);
      }

      public Map<SNodePointer, String> originalNodesToDestination() {
        return super._0();
      }

      public Map<SModelReference, GenerationStatus> status() {
        return super._1();
      }

      @SuppressWarnings(value = "unchecked")
      public CopyGeneratedScripts_Facet.Target_collectDirs.Parameters assignFrom(Tuples._2<Map<SNodePointer, String>, Map<SModelReference, GenerationStatus>> from) {
        return (CopyGeneratedScripts_Facet.Target_collectDirs.Parameters) super.assign(from);
      }
    }
  }

  public static class TargetProperties implements IPropertiesPersistence {
    public TargetProperties() {
    }

    public void storeValues(Map<String, String> store, IPropertiesPool properties) {
      {
        ITarget.Name name = new ITarget.Name("jetbrains.mps.buildScript.CopyGeneratedScripts.collectDirs");
        if (properties.hasProperties(name)) {
          CopyGeneratedScripts_Facet.Target_collectDirs.Parameters props = properties.properties(name, CopyGeneratedScripts_Facet.Target_collectDirs.Parameters.class);
          MapSequence.fromMap(store).put("jetbrains.mps.buildScript.CopyGeneratedScripts.collectDirs.originalNodesToDestination", null);
          MapSequence.fromMap(store).put("jetbrains.mps.buildScript.CopyGeneratedScripts.collectDirs.status", null);
        }
      }
    }

    public void loadValues(Map<String, String> store, IPropertiesPool properties) {
      try {
        {
          ITarget.Name name = new ITarget.Name("jetbrains.mps.buildScript.CopyGeneratedScripts.collectDirs");
          CopyGeneratedScripts_Facet.Target_collectDirs.Parameters props = properties.properties(name, CopyGeneratedScripts_Facet.Target_collectDirs.Parameters.class);
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.buildScript.CopyGeneratedScripts.collectDirs.originalNodesToDestination")) {
            props.originalNodesToDestination(null);
          }
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.buildScript.CopyGeneratedScripts.collectDirs.status")) {
            props.status(null);
          }
        }
      } catch (RuntimeException re) {
      }
    }
  }
}
