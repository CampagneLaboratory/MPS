package jetbrains.mps.buildScript.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferencePresentationContext;
import jetbrains.mps.buildScript.behavior.BuildLayout_NamedContainer_Behavior;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.scope.EmptyScope;

public class BuildLayout_Import_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_gjnfdd_a0a2a0a0a1a0b0a1a0 = new SNodePointer("r:5076fdb3-19c3-4563-aa26-7ace7591e78d(jetbrains.mps.buildScript.constraints)", "841011766566141823");

  public BuildLayout_Import_Constraints() {
    super("jetbrains.mps.buildScript.structure.BuildLayout_Import");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("target", new BaseReferenceConstraintsDescriptor("target", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public boolean hasPresentation() {
            return true;
          }

          @Override
          public String getPresentation(final IOperationContext operationContext, final ReferencePresentationContext _context) {
            String target = BuildLayout_NamedContainer_Behavior.call_getReferenceText_841011766566134611(_context.getParameterNode());
            if ((_context.getContextNode() != null)) {
              SNode contextProject = SNodeOperations.getAncestor(_context.getContextNode(), "jetbrains.mps.buildScript.structure.BuildProject", true, false);
              final SNode parameterProject = SNodeOperations.getAncestor(_context.getParameterNode(), "jetbrains.mps.buildScript.structure.BuildProject", true, false);
              if ((contextProject != null) && (parameterProject != null)) {
                if (ListSequence.fromList(SLinkOperations.getTargets(contextProject, "dependencies", true)).any(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SNodeOperations.isInstanceOf(it, "jetbrains.mps.buildScript.structure.BuildProjectDependency") && SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.buildScript.structure.BuildProjectDependency"), "script", false) == parameterProject;
                  }
                })) {
                  target = SPropertyOperations.getString(parameterProject, "name") + "/" + target;
                }
              }
            }
            return (_context.getSmartReference() ?
              "import " + target :
              target
            );
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_gjnfdd_a0a2a0a0a1a0b0a1a0;
          }

          @Override
          public Scope createScope(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            SNode contextProject = SNodeOperations.getAncestor(_context.getContextNode(), "jetbrains.mps.buildScript.structure.BuildProject", true, false);
            if ((contextProject != null)) {
              // TODO rewrite 
              final List<SNode> list = ListSequence.fromList(SLinkOperations.getTargets(contextProject, "dependencies", true)).where(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SNodeOperations.isInstanceOf(it, "jetbrains.mps.buildScript.structure.BuildProjectDependency");
                }
              }).translate(new ITranslator2<SNode, SNode>() {
                public Iterable<SNode> translate(SNode it) {
                  return SNodeOperations.getDescendants(SLinkOperations.getTarget(SNodeOperations.cast(it, "jetbrains.mps.buildScript.structure.BuildProjectDependency"), "script", false), "jetbrains.mps.buildScript.structure.BuildLayout_NamedContainer", false, new String[]{});
                }
              }).toListSequence();
              return new Scope() {
                /**
                 * javadoc suxx
                 */
                public List<SNode> getAvailableElements(@Nullable String prefix) {
                  return list;
                }

                /**
                 * javadoc suxx
                 */
                @Nullable
                public SNode resolve(SNode contextNode, @NotNull String refText) {
                  return null;
                }

                /**
                 * javadoc suxx
                 */
                @Nullable
                public String getReferenceText(SNode contextNode, @NotNull SNode node) {
                  return null;
                }
              };

            }
            return new EmptyScope();
          }
        };
      }
    });
    return references;
  }
}
