package jetbrains.mps.buildScript.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.buildScript.behavior.CompositePath_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class BuildRelativePath_Constraints extends BaseConstraintsDescriptor {
  public BuildRelativePath_Constraints() {
    super("jetbrains.mps.buildScript.structure.BuildRelativePath");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("relativePath", new BasePropertyConstraintsDescriptor("relativePath", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node, IScope scope) {
        String propertyName = "relativePath";
        return CompositePath_Behavior.call_getPath_8618885170173674800(SLinkOperations.getTarget(node, "compositePart", true));
      }
    });
    return properties;
  }
}
