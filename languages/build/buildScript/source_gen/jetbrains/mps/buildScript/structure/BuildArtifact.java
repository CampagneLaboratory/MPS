package jetbrains.mps.buildScript.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BuildArtifact extends BuildAspect implements INamedConcept {
  public static final String concept = "jetbrains.mps.buildScript.structure.BuildArtifact";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String CHILDREN = "children";
  public static final String ARTIFACT_NAME = "artifactName";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public BuildArtifact(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(BuildArtifact.NAME);
  }

  public void setName(String value) {
    this.setProperty(BuildArtifact.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(BuildArtifact.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(BuildArtifact.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(BuildArtifact.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(BuildArtifact.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(BuildArtifact.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(BuildArtifact.VIRTUAL_PACKAGE, value);
  }

  public int getChildrensCount() {
    return this.getChildCount(BuildArtifact.CHILDREN);
  }

  public Iterator<BuildLayout_Node> childrens() {
    return this.children(BuildLayout_Node.class, BuildArtifact.CHILDREN);
  }

  public List<BuildLayout_Node> getChildrens() {
    return this.getChildren(BuildLayout_Node.class, BuildArtifact.CHILDREN);
  }

  public void addChildren(BuildLayout_Node node) {
    this.addChild(BuildArtifact.CHILDREN, node);
  }

  public void insertChildren(BuildLayout_Node prev, BuildLayout_Node node) {
    this.insertChild(prev, BuildArtifact.CHILDREN, node);
  }

  public int getArtifactNamesCount() {
    return this.getChildCount(BuildArtifact.ARTIFACT_NAME);
  }

  public Iterator<BuildNamePart> artifactNames() {
    return this.children(BuildNamePart.class, BuildArtifact.ARTIFACT_NAME);
  }

  public List<BuildNamePart> getArtifactNames() {
    return this.getChildren(BuildNamePart.class, BuildArtifact.ARTIFACT_NAME);
  }

  public void addArtifactName(BuildNamePart node) {
    this.addChild(BuildArtifact.ARTIFACT_NAME, node);
  }

  public void insertArtifactName(BuildNamePart prev, BuildNamePart node) {
    this.insertChild(prev, BuildArtifact.ARTIFACT_NAME, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(BuildArtifact.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, BuildArtifact.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, BuildArtifact.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(BuildArtifact.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, BuildArtifact.SMODEL_ATTRIBUTE, node);
  }

  public static BuildArtifact newInstance(SModel sm, boolean init) {
    return (BuildArtifact) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.buildScript.structure.BuildArtifact", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BuildArtifact newInstance(SModel sm) {
    return BuildArtifact.newInstance(sm, false);
  }
}
