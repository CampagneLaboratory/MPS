package jetbrains.mps.buildScript.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BuildInputFiles extends BuildInputFileSet {
  public static final String concept = "jetbrains.mps.buildScript.structure.BuildInputFiles";
  public static final String DIR = "dir";
  public static final String SELECTORS = "selectors";

  public BuildInputFiles(SNode node) {
    super(node);
  }

  public BuildSourcePath getDir() {
    return (BuildSourcePath) this.getChild(BuildSourcePath.class, BuildInputFiles.DIR);
  }

  public void setDir(BuildSourcePath node) {
    super.setChild(BuildInputFiles.DIR, node);
  }

  public int getSelectorsesCount() {
    return this.getChildCount(BuildInputFiles.SELECTORS);
  }

  public Iterator<BuildFileSelector> selectorses() {
    return this.children(BuildFileSelector.class, BuildInputFiles.SELECTORS);
  }

  public List<BuildFileSelector> getSelectorses() {
    return this.getChildren(BuildFileSelector.class, BuildInputFiles.SELECTORS);
  }

  public void addSelectors(BuildFileSelector node) {
    this.addChild(BuildInputFiles.SELECTORS, node);
  }

  public void insertSelectors(BuildFileSelector prev, BuildFileSelector node) {
    this.insertChild(prev, BuildInputFiles.SELECTORS, node);
  }

  public static BuildInputFiles newInstance(SModel sm, boolean init) {
    return (BuildInputFiles) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.buildScript.structure.BuildInputFiles", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BuildInputFiles newInstance(SModel sm) {
    return BuildInputFiles.newInstance(sm, false);
  }
}
