package jetbrains.mps.buildScript.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.ScopeProvider;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BuildScript extends BaseConcept implements ScopeProvider, INamedConcept {
  public static final String concept = "jetbrains.mps.buildScript.structure.BuildScript";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String NAME = "name";
  public static final String LAYOUT = "layout";
  public static final String DEPENDENCIES = "dependencies";
  public static final String MACROS = "macros";
  public static final String MODULES = "modules";
  public static final String ARTIFACTS = "artifacts";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public BuildScript(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(BuildScript.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(BuildScript.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(BuildScript.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(BuildScript.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(BuildScript.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(BuildScript.VIRTUAL_PACKAGE, value);
  }

  public String getName() {
    return this.getProperty(BuildScript.NAME);
  }

  public void setName(String value) {
    this.setProperty(BuildScript.NAME, value);
  }

  public BuildLayout getLayout() {
    return (BuildLayout) this.getChild(BuildLayout.class, BuildScript.LAYOUT);
  }

  public void setLayout(BuildLayout node) {
    super.setChild(BuildScript.LAYOUT, node);
  }

  public int getDependenciesesCount() {
    return this.getChildCount(BuildScript.DEPENDENCIES);
  }

  public Iterator<BuildDependency> dependencieses() {
    return this.children(BuildDependency.class, BuildScript.DEPENDENCIES);
  }

  public List<BuildDependency> getDependencieses() {
    return this.getChildren(BuildDependency.class, BuildScript.DEPENDENCIES);
  }

  public void addDependencies(BuildDependency node) {
    this.addChild(BuildScript.DEPENDENCIES, node);
  }

  public void insertDependencies(BuildDependency prev, BuildDependency node) {
    this.insertChild(prev, BuildScript.DEPENDENCIES, node);
  }

  public int getMacrosesCount() {
    return this.getChildCount(BuildScript.MACROS);
  }

  public Iterator<BuildMacro> macroses() {
    return this.children(BuildMacro.class, BuildScript.MACROS);
  }

  public List<BuildMacro> getMacroses() {
    return this.getChildren(BuildMacro.class, BuildScript.MACROS);
  }

  public void addMacros(BuildMacro node) {
    this.addChild(BuildScript.MACROS, node);
  }

  public void insertMacros(BuildMacro prev, BuildMacro node) {
    this.insertChild(prev, BuildScript.MACROS, node);
  }

  public int getModulesesCount() {
    return this.getChildCount(BuildScript.MODULES);
  }

  public Iterator<BuildSourceModule> moduleses() {
    return this.children(BuildSourceModule.class, BuildScript.MODULES);
  }

  public List<BuildSourceModule> getModuleses() {
    return this.getChildren(BuildSourceModule.class, BuildScript.MODULES);
  }

  public void addModules(BuildSourceModule node) {
    this.addChild(BuildScript.MODULES, node);
  }

  public void insertModules(BuildSourceModule prev, BuildSourceModule node) {
    this.insertChild(prev, BuildScript.MODULES, node);
  }

  public int getArtifactsesCount() {
    return this.getChildCount(BuildScript.ARTIFACTS);
  }

  public Iterator<BuildArtifact> artifactses() {
    return this.children(BuildArtifact.class, BuildScript.ARTIFACTS);
  }

  public List<BuildArtifact> getArtifactses() {
    return this.getChildren(BuildArtifact.class, BuildScript.ARTIFACTS);
  }

  public void addArtifacts(BuildArtifact node) {
    this.addChild(BuildScript.ARTIFACTS, node);
  }

  public void insertArtifacts(BuildArtifact prev, BuildArtifact node) {
    this.insertChild(prev, BuildScript.ARTIFACTS, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(BuildScript.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, BuildScript.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, BuildScript.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(BuildScript.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, BuildScript.SMODEL_ATTRIBUTE, node);
  }

  public static BuildScript newInstance(SModel sm, boolean init) {
    return (BuildScript) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.buildScript.structure.BuildScript", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BuildScript newInstance(SModel sm) {
    return BuildScript.newInstance(sm, false);
  }
}
