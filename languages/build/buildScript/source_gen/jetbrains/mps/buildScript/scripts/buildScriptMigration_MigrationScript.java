package jetbrains.mps.buildScript.scripts;

/*Generated by MPS */

import jetbrains.mps.lang.script.runtime.BaseMigrationScript;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.script.runtime.AbstractMigrationRefactoring;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class buildScriptMigration_MigrationScript extends BaseMigrationScript {
  public buildScriptMigration_MigrationScript(IOperationContext operationContext) {
    super("buildScript migration");
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "wow";
      }

      public String getAdditionalInfo() {
        return "wow";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.buildScript.structure.BuildLayout_NamedContainer";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return ListSequence.fromList(SNodeOperations.getChildren(node)).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, "jetbrains.mps.buildScript.structure.BuildStringPart");
          }
        });
      }

      public void doUpdateInstanceNode(final SNode node) {
        Iterable<SNode> seq = ListSequence.fromList(SNodeOperations.getChildren(node)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, "jetbrains.mps.buildScript.structure.BuildStringPart");
          }
        }).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SNodeOperations.cast(it, "jetbrains.mps.buildScript.structure.BuildStringPart");
          }
        }).toListSequence();
        Sequence.fromIterable(seq).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            node.removeChild(it);
          }
        });
        SLinkOperations.setNewChild(node, "containerName", "jetbrains.mps.buildScript.structure.BuildStringNotEmpty");
        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "containerName", true), "parts", true)).addSequence(Sequence.fromIterable(seq));
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
    this.addRefactoring(new AbstractMigrationRefactoring(operationContext) {
      public String getName() {
        return "wow2";
      }

      public String getAdditionalInfo() {
        return "wow2";
      }

      public String getFqNameOfConceptToSearchInstances() {
        return "jetbrains.mps.buildScript.structure.BuildVariableMacro";
      }

      public boolean isApplicableInstanceNode(SNode node) {
        return ListSequence.fromList(SNodeOperations.getChildren(node)).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, "jetbrains.mps.buildScript.structure.BuildStringPart");
          }
        });
      }

      public void doUpdateInstanceNode(final SNode node) {
        Iterable<SNode> seq = ListSequence.fromList(SNodeOperations.getChildren(node)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, "jetbrains.mps.buildScript.structure.BuildStringPart");
          }
        }).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SNodeOperations.cast(it, "jetbrains.mps.buildScript.structure.BuildStringPart");
          }
        }).toListSequence();
        Sequence.fromIterable(seq).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            node.removeChild(it);
          }
        });
        SLinkOperations.setNewChild(node, "value", "jetbrains.mps.buildScript.structure.BuildString");
        ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(node, "value", true), "parts", true)).addSequence(Sequence.fromIterable(seq));
      }

      public boolean isShowAsIntention() {
        return false;
      }
    });
  }
}
