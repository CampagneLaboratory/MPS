package jetbrains.mps.build.workflow.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.lang.core.structure.ScopeProvider;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BwfTask extends BwfProjectPart implements INamedConcept, ScopeProvider {
  public static final String concept = "jetbrains.mps.build.workflow.structure.BwfTask";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String DEPENDENCIES = "dependencies";
  public static final String SUB_TASKS = "subTasks";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public BwfTask(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(BwfTask.NAME);
  }

  public void setName(String value) {
    this.setProperty(BwfTask.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(BwfTask.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(BwfTask.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(BwfTask.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(BwfTask.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(BwfTask.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(BwfTask.VIRTUAL_PACKAGE, value);
  }

  public int getDependenciesesCount() {
    return this.getChildCount(BwfTask.DEPENDENCIES);
  }

  public Iterator<BwfTaskDependency> dependencieses() {
    return this.children(BwfTaskDependency.class, BwfTask.DEPENDENCIES);
  }

  public List<BwfTaskDependency> getDependencieses() {
    return this.getChildren(BwfTaskDependency.class, BwfTask.DEPENDENCIES);
  }

  public void addDependencies(BwfTaskDependency node) {
    this.addChild(BwfTask.DEPENDENCIES, node);
  }

  public void insertDependencies(BwfTaskDependency prev, BwfTaskDependency node) {
    this.insertChild(prev, BwfTask.DEPENDENCIES, node);
  }

  public int getSubTasksesCount() {
    return this.getChildCount(BwfTask.SUB_TASKS);
  }

  public Iterator<BwfSubTask> subTaskses() {
    return this.children(BwfSubTask.class, BwfTask.SUB_TASKS);
  }

  public List<BwfSubTask> getSubTaskses() {
    return this.getChildren(BwfSubTask.class, BwfTask.SUB_TASKS);
  }

  public void addSubTasks(BwfSubTask node) {
    this.addChild(BwfTask.SUB_TASKS, node);
  }

  public void insertSubTasks(BwfSubTask prev, BwfSubTask node) {
    this.insertChild(prev, BwfTask.SUB_TASKS, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(BwfTask.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, BwfTask.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, BwfTask.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(BwfTask.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, BwfTask.SMODEL_ATTRIBUTE, node);
  }

  public static BwfTask newInstance(SModel sm, boolean init) {
    return (BwfTask) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.workflow.structure.BwfTask", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BwfTask newInstance(SModel sm) {
    return BwfTask.newInstance(sm, false);
  }
}
