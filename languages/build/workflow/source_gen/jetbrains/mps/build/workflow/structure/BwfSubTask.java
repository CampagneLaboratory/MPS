package jetbrains.mps.build.workflow.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.lang.core.structure.ScopeProvider;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class BwfSubTask extends BaseConcept implements INamedConcept, ScopeProvider {
  public static final String concept = "jetbrains.mps.build.workflow.structure.BwfSubTask";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String AFTER = "after";
  public static final String BEFORE = "before";
  public static final String STATEMENTS = "statements";
  public static final String SMODEL_ATTRIBUTE = "smodelAttribute";

  public BwfSubTask(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(BwfSubTask.NAME);
  }

  public void setName(String value) {
    this.setProperty(BwfSubTask.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(BwfSubTask.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(BwfSubTask.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(BwfSubTask.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(BwfSubTask.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(BwfSubTask.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(BwfSubTask.VIRTUAL_PACKAGE, value);
  }

  public int getAftersCount() {
    return this.getChildCount(BwfSubTask.AFTER);
  }

  public Iterator<BwfSubTaskDependency> afters() {
    return this.children(BwfSubTaskDependency.class, BwfSubTask.AFTER);
  }

  public List<BwfSubTaskDependency> getAfters() {
    return this.getChildren(BwfSubTaskDependency.class, BwfSubTask.AFTER);
  }

  public void addAfter(BwfSubTaskDependency node) {
    this.addChild(BwfSubTask.AFTER, node);
  }

  public void insertAfter(BwfSubTaskDependency prev, BwfSubTaskDependency node) {
    this.insertChild(prev, BwfSubTask.AFTER, node);
  }

  public int getBeforesCount() {
    return this.getChildCount(BwfSubTask.BEFORE);
  }

  public Iterator<BwfSubTaskDependency> befores() {
    return this.children(BwfSubTaskDependency.class, BwfSubTask.BEFORE);
  }

  public List<BwfSubTaskDependency> getBefores() {
    return this.getChildren(BwfSubTaskDependency.class, BwfSubTask.BEFORE);
  }

  public void addBefore(BwfSubTaskDependency node) {
    this.addChild(BwfSubTask.BEFORE, node);
  }

  public void insertBefore(BwfSubTaskDependency prev, BwfSubTaskDependency node) {
    this.insertChild(prev, BwfSubTask.BEFORE, node);
  }

  public int getStatementsesCount() {
    return this.getChildCount(BwfSubTask.STATEMENTS);
  }

  public Iterator<BwfStatement> statementses() {
    return this.children(BwfStatement.class, BwfSubTask.STATEMENTS);
  }

  public List<BwfStatement> getStatementses() {
    return this.getChildren(BwfStatement.class, BwfSubTask.STATEMENTS);
  }

  public void addStatements(BwfStatement node) {
    this.addChild(BwfSubTask.STATEMENTS, node);
  }

  public void insertStatements(BwfStatement prev, BwfStatement node) {
    this.insertChild(prev, BwfSubTask.STATEMENTS, node);
  }

  public int getSmodelAttributesCount() {
    return this.getChildCount(BwfSubTask.SMODEL_ATTRIBUTE);
  }

  public Iterator<Attribute> smodelAttributes() {
    return this.children(Attribute.class, BwfSubTask.SMODEL_ATTRIBUTE);
  }

  public List<Attribute> getSmodelAttributes() {
    return this.getChildren(Attribute.class, BwfSubTask.SMODEL_ATTRIBUTE);
  }

  public void addSmodelAttribute(Attribute node) {
    this.addChild(BwfSubTask.SMODEL_ATTRIBUTE, node);
  }

  public void insertSmodelAttribute(Attribute prev, Attribute node) {
    this.insertChild(prev, BwfSubTask.SMODEL_ATTRIBUTE, node);
  }

  public static BwfSubTask newInstance(SModel sm, boolean init) {
    return (BwfSubTask) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.workflow.structure.BwfSubTask", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BwfSubTask newInstance(SModel sm) {
    return BwfSubTask.newInstance(sm, false);
  }
}
