package jetbrains.mps.query.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class MqlVarReference_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_97d4g1_a0a1a0a0a1a0b0a1a0 = new SNodePointer("r:d2131fa8-9bff-49c9-a7e2-6972f9544c0a(jetbrains.mps.query.constraints)", "2059702675526025699");

  public MqlVarReference_Constraints() {
    super("jetbrains.mps.query.structure.MqlVarReference");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("var", new BaseReferenceConstraintsDescriptor("var", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            List<SNode> result = new ArrayList<SNode>();
            SNode current = _context.getEnclosingNode();
            if (SNodeOperations.isInstanceOf(_context.getEnclosingNode(), "jetbrains.mps.query.structure.MqlComma")) {
              SNode left = SLinkOperations.getTarget(SNodeOperations.cast(_context.getEnclosingNode(), "jetbrains.mps.query.structure.MqlComma"), "left", true);
              if (SNodeOperations.isInstanceOf(left, "jetbrains.mps.query.structure.MqlAssignment")) {
                ListSequence.<SNode>fromList(result).addElement(SNodeOperations.cast(left, "jetbrains.mps.query.structure.MqlAssignment"));
              }
            }
            while ((current != null)) {
              if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(current), "jetbrains.mps.query.structure.MqlComma")) {
                SNode left = SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(current), "jetbrains.mps.query.structure.MqlComma"), "left", true);
                if (left != current && SNodeOperations.isInstanceOf(left, "jetbrains.mps.query.structure.MqlAssignment")) {
                  ListSequence.<SNode>fromList(result).addElement(SNodeOperations.cast(left, "jetbrains.mps.query.structure.MqlAssignment"));
                }
              }
              current = SNodeOperations.getParent(current);
            }
            return result;
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_97d4g1_a0a1a0a0a1a0b0a1a0;
          }
        };
      }
    });
    return references;
  }
}
