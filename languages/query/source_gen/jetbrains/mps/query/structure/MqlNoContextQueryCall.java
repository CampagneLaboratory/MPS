package jetbrains.mps.query.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MqlNoContextQueryCall extends MqlExpression {
  public static final String concept = "jetbrains.mps.query.structure.MqlNoContextQueryCall";
  public static final String QUERY = "query";
  public static final String ARGUMENTS = "arguments";

  public MqlNoContextQueryCall(SNode node) {
    super(node);
  }

  public MqlQuery getQuery() {
    return (MqlQuery) this.getReferent(MqlQuery.class, MqlNoContextQueryCall.QUERY);
  }

  public void setQuery(MqlQuery node) {
    super.setReferent(MqlNoContextQueryCall.QUERY, node);
  }

  public int getArgumentsesCount() {
    return this.getChildCount(MqlNoContextQueryCall.ARGUMENTS);
  }

  public Iterator<MqlExpression> argumentses() {
    return this.children(MqlExpression.class, MqlNoContextQueryCall.ARGUMENTS);
  }

  public List<MqlExpression> getArgumentses() {
    return this.getChildren(MqlExpression.class, MqlNoContextQueryCall.ARGUMENTS);
  }

  public void addArguments(MqlExpression node) {
    this.addChild(MqlNoContextQueryCall.ARGUMENTS, node);
  }

  public void insertArguments(MqlExpression prev, MqlExpression node) {
    this.insertChild(prev, MqlNoContextQueryCall.ARGUMENTS, node);
  }

  public static MqlNoContextQueryCall newInstance(SModel sm, boolean init) {
    return (MqlNoContextQueryCall) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.query.structure.MqlNoContextQueryCall", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static MqlNoContextQueryCall newInstance(SModel sm) {
    return MqlNoContextQueryCall.newInstance(sm, false);
  }
}
