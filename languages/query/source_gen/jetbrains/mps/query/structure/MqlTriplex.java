package jetbrains.mps.query.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MqlTriplex extends MqlExpression {
  public static final String concept = "jetbrains.mps.query.structure.MqlTriplex";
  public static final String CONDITION = "condition";
  public static final String THENEXPR = "thenexpr";
  public static final String ELSEEXPR = "elseexpr";

  public MqlTriplex(SNode node) {
    super(node);
  }

  public MqlExpression getCondition() {
    return (MqlExpression) this.getChild(MqlExpression.class, MqlTriplex.CONDITION);
  }

  public void setCondition(MqlExpression node) {
    super.setChild(MqlTriplex.CONDITION, node);
  }

  public MqlExpression getThenexpr() {
    return (MqlExpression) this.getChild(MqlExpression.class, MqlTriplex.THENEXPR);
  }

  public void setThenexpr(MqlExpression node) {
    super.setChild(MqlTriplex.THENEXPR, node);
  }

  public MqlExpression getElseexpr() {
    return (MqlExpression) this.getChild(MqlExpression.class, MqlTriplex.ELSEEXPR);
  }

  public void setElseexpr(MqlExpression node) {
    super.setChild(MqlTriplex.ELSEEXPR, node);
  }

  public static MqlTriplex newInstance(SModel sm, boolean init) {
    return (MqlTriplex) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.query.structure.MqlTriplex", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static MqlTriplex newInstance(SModel sm) {
    return MqlTriplex.newInstance(sm, false);
  }
}
