package jetbrains.mps.query.actions;

/*Generated by MPS */

import java.util.regex.Pattern;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.SideTransformPreconditionContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.query.behavior.MqlExpression_Behavior;
import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.smodel.action.DefaultSimpleSubstituteAction;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.action.IChildNodeSetter;
import jetbrains.mps.smodel.action.AbstractChildNodeSetter;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.action.ModelActions;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;
import jetbrains.mps.util.Calculable;
import jetbrains.mps.nodeEditor.CellSide;

public class QueriesGenerated {
  private static Pattern REGEXP_x583g4_a0a0a0a2a0a0a0a2a0a1a2 = Pattern.compile("-?\\d+", 0);
  private static Pattern REGEXP_x583g4_a0a0a0a0c0a0a0a0c0a0b0c = Pattern.compile("-?\\d*", 0);

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_MqlExpression_8205627927119749823(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    SNode current = _context.getSourceNode();
    while (SNodeOperations.isInstanceOf(SNodeOperations.getParent(current), "jetbrains.mps.query.structure.MqlBinaryExpr") && SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(current), "jetbrains.mps.query.structure.MqlBinaryExpr"), "right", true) == current) {
      current = SNodeOperations.cast(SNodeOperations.getParent(current), "jetbrains.mps.query.structure.MqlExpression");
    }
    return !(SNodeOperations.isInstanceOf(current, "jetbrains.mps.query.structure.MqlComma"));
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_MqlExpression_2059702675525956873(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return (MqlExpression_Behavior.call_getType_228266671027861783(_context.getSourceNode()) != null);
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_MqlExpression_228266671027634830(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.query.structure.MqlIntLiteral");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode intConst = SNodeFactoryOperations.createNewNode(model, "jetbrains.mps.query.structure.MqlIntLiteral", null);
            try {
              SPropertyOperations.set(intConst, "value", "" + (Integer.parseInt(pattern)));
            } catch (NumberFormatException e) {
              SPropertyOperations.set(intConst, "value", "" + (0));
            }
            return intConst;
          }

          public boolean hasSubstitute() {
            return true;
          }

          public boolean canSubstitute_internal(String pattern, boolean strictly) {
            if (strictly) {
              return REGEXP_x583g4_a0a0a0a2a0a0a0a2a0a1a2.matcher(pattern).matches();
            } else {
              return REGEXP_x583g4_a0a0a0a0c0a0a0a0c0a0b0c.matcher(pattern).matches();
            }
          }

          public String getMatchingText(String pattern) {
            return pattern;
          }

          public String getVisibleMatchingText(String pattern) {
            return this.getMatchingText(pattern);
          }
        });
      }
    }
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.query.structure.MqlBoolLiteral");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode result = SNodeFactoryOperations.createNewNode(model, "jetbrains.mps.query.structure.MqlBoolLiteral", null);
            SPropertyOperations.set(result, "value", "" + (true));
            return result;
          }

          public String getDescriptionText(String pattern) {
            return "true literal";
          }

          public String getMatchingText(String pattern) {
            return "true";
          }

          public String getVisibleMatchingText(String pattern) {
            return this.getMatchingText(pattern);
          }
        });
      }
    }
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.query.structure.MqlBoolLiteral");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode result = SNodeFactoryOperations.createNewNode(model, "jetbrains.mps.query.structure.MqlBoolLiteral", null);
            SPropertyOperations.set(result, "value", "" + (false));
            return result;
          }

          public String getDescriptionText(String pattern) {
            return "false literal";
          }

          public String getMatchingText(String pattern) {
            return "false";
          }

          public String getVisibleMatchingText(String pattern) {
            return this.getMatchingText(pattern);
          }
        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_MqlParameter_228266671027817939(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode wrappedConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.query.structure.MqlType");
      IChildNodeSetter setter = new AbstractChildNodeSetter() {
        public SNode wrapNode(SNode nodeToWrap, SModel model) {
          SNode parameter = SNodeFactoryOperations.createNewNode(model, "jetbrains.mps.query.structure.MqlParameter", null);
          SLinkOperations.setTarget(parameter, "type", nodeToWrap, true);
          return parameter;
        }

        public boolean returnSmallPart(SNode nodeToWrap) {
          return false;
        }

        public SNode doExecute(SNode pn, SNode oc, SNode nc, IScope sc) {
          SNode wrappedNode = this.wrapNode(nc, nc.getModel());
          _context.getChildSetter().execute(_context.getParentNode(), _context.getCurrentTargetNode(), wrappedNode, operationContext.getScope());
          if (this.returnSmallPart(nc)) {
            return nc;
          } else {
            return wrappedNode;
          }
        }
      };
      ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createChildSubstituteActions(_context.getParentNode(), _context.getCurrentTargetNode(), wrappedConcept, setter, operationContext)));
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_MqlExpression_8205627927119749822(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.query.structure.MqlComma");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(String pattern) {
          SNode to = SNodeFactoryOperations.createNewNode(_context.getModel(), "jetbrains.mps.query.structure.MqlComma", null);
          SNode current = _context.getSourceNode();
          while (SNodeOperations.isInstanceOf(SNodeOperations.getParent(current), "jetbrains.mps.query.structure.MqlBinaryExpr") && SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(current), "jetbrains.mps.query.structure.MqlBinaryExpr"), "right", true) == current) {
            current = SNodeOperations.cast(SNodeOperations.getParent(current), "jetbrains.mps.query.structure.MqlExpression");
          }
          SNodeOperations.replaceWithAnother(current, to);
          ListSequence.fromList(SLinkOperations.getTargets(to, "expressions", true)).insertElement(0, current);
          return ListSequence.fromList(SLinkOperations.getTargets(to, "expressions", true)).getElement(1);

        }

        public String getMatchingText(String pattern) {
          return ",";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }

        public String getDescriptionText(String pattern) {
          return "comma expression";
        }
      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_MqlExpression_2059702675525956854(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.query.structure.MqlTriplex");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(String pattern) {
          SNode to = SNodeFactoryOperations.createNewNode(_context.getModel(), "jetbrains.mps.query.structure.MqlTriplex", null);
          SNode current = _context.getSourceNode();
          while (SNodeOperations.isInstanceOf(SNodeOperations.getParent(current), "jetbrains.mps.query.structure.MqlBinaryExpr") && SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(current), "jetbrains.mps.query.structure.MqlBinaryExpr"), "right", true) == current) {
            current = SNodeOperations.cast(SNodeOperations.getParent(current), "jetbrains.mps.query.structure.MqlExpression");
          }
          SNodeOperations.replaceWithAnother(current, to);
          SLinkOperations.setTarget(to, "condition", current, true);
          return to;
        }

        public String getMatchingText(String pattern) {
          return "?";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }

        public String getDescriptionText(String pattern) {
          return "triplex operator";
        }
      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_MqlExpression_2059702675525956872(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.query.structure.MqlDotExpression");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(String pattern) {
          SNode dotexpr = SNodeOperations.replaceWithAnother(_context.getSourceNode(), SNodeFactoryOperations.createNewNode(_context.getModel(), "jetbrains.mps.query.structure.MqlDotExpression", null));
          SLinkOperations.setTarget(dotexpr, "left", _context.getSourceNode(), true);
          SNodeFactoryOperations.setNewChild(dotexpr, "right", "jetbrains.mps.query.structure.MqlSelector");
          return dotexpr;
        }

        public String getMatchingText(String pattern) {
          return ".";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }

        public String getDescriptionText(String pattern) {
          return "dot expression";
        }
      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_MqlSelector_1197032086774(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      Calculable calc = new Calculable() {
        public Object calculate() {
          return SNodeOperations.getParent(_context.getSourceNode());
        }
      };
      SNode node = (SNode) calc.calculate();
      ListSequence.fromList(result).addSequence(ListSequence.fromList(ModelActions.createRightTransformHintSubstituteActions(node, CellSide.RIGHT, _context.getTransformationTag(), operationContext)));
    }
    return result;
  }
}
