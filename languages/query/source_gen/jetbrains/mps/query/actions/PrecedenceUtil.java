package jetbrains.mps.query.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.query.behavior.MqlExpression_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.annotations.NotNull;

/*package*/ class PrecedenceUtil {
  public PrecedenceUtil() {
  }

  /*package*/ static SNode getTargetForLeftTransform(SNode context, SNode result) {
    int prio = MqlExpression_Behavior.call_getPriority_7352592509980890960(result);
    SNode targetNode = context;
    for (SNode parentNode = SNodeOperations.getParent(targetNode); parentNode != null && SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.query.structure.MqlExpression") && MqlExpression_Behavior.call_getPriority_7352592509980890960(SNodeOperations.cast(parentNode, "jetbrains.mps.query.structure.MqlExpression")) < prio; parentNode = SNodeOperations.getParent(targetNode)) {
      if (MqlExpression_Behavior.call_getPriority_7352592509980890960(SNodeOperations.cast(parentNode, "jetbrains.mps.query.structure.MqlExpression")) == -1) {
        // we do not go through expressions like parentheses or calls 
        break;
      }
      if (SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.query.structure.MqlBinaryExpr") && SNodeOperations.getContainingLinkDeclaration(targetNode) == SLinkOperations.findLinkDeclaration("jetbrains.mps.query.structure.MqlBinaryExpr", "right")) {
        // if parent expression is BinaryOperation having higher priority and target is rhigh child of it 
        // then we should rather transform current target and add additional parenthesis around resulting expression 
        break;
      }
      targetNode = SNodeOperations.cast(parentNode, "jetbrains.mps.query.structure.MqlExpression");
    }
    return targetNode;
  }

  /*package*/ static SNode getTargetForRightTransform(@NotNull SNode contextNode, SNode result) {
    int prio = MqlExpression_Behavior.call_getPriority_7352592509980890960(result);
    SNode targetNode = contextNode;
    for (SNode parentNode = SNodeOperations.getParent(targetNode); parentNode != null && SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.query.structure.MqlExpression") && MqlExpression_Behavior.call_getPriority_7352592509980890960(SNodeOperations.cast(parentNode, "jetbrains.mps.query.structure.MqlExpression")) < prio; parentNode = SNodeOperations.getParent(targetNode)) {
      if (MqlExpression_Behavior.call_getPriority_7352592509980890960(SNodeOperations.cast(parentNode, "jetbrains.mps.query.structure.MqlExpression")) == -1) {
        // we do not go through expressions like parentheses or calls 
        break;
      }
      if (SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.query.structure.MqlBinaryExpr") && SNodeOperations.getContainingLinkDeclaration(targetNode) == SLinkOperations.findLinkDeclaration("jetbrains.mps.query.structure.MqlBinaryExpr", "left")) {
        // if parent expression is BinaryOperation and target is left child of it 
        // then we should rather transform current target 
        break;
      }
      if (SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.query.structure.MqlDotExpression") && SNodeOperations.getContainingLinkDeclaration(targetNode) == SLinkOperations.findLinkDeclaration("jetbrains.mps.query.structure.MqlDotExpression", "left")) {
        // if parent expression is DotExpression and target is operang ("left" part of the expression) 
        // then we should rather transform current target 
        break;
      }
      targetNode = SNodeOperations.cast(parentNode, "jetbrains.mps.query.structure.MqlExpression");
    }
    return targetNode;
  }

  /*package*/ static SNode parenthesiseIfNecessary(@NotNull SNode contextNode) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(contextNode), "jetbrains.mps.query.structure.MqlBinaryExpr")) {
      SNode parentBinaryOperation = SNodeOperations.cast(SNodeOperations.getParent(contextNode), "jetbrains.mps.query.structure.MqlBinaryExpr");
      if (MqlExpression_Behavior.call_getPriority_7352592509980890960(parentBinaryOperation) < MqlExpression_Behavior.call_getPriority_7352592509980890960(contextNode)) {
        SNode result = SNodeOperations.replaceWithNewChild(contextNode, "jetbrains.mps.query.structure.MqlParentheses");
        SLinkOperations.setTarget(result, "expr", contextNode, true);
        return result;
      }
    }
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(contextNode), "jetbrains.mps.query.structure.MqlDotExpression")) {
      if (MqlExpression_Behavior.call_getPriority_7352592509980890960(SNodeOperations.getParent(contextNode)) < MqlExpression_Behavior.call_getPriority_7352592509980890960(contextNode)) {
        SNode result = SNodeOperations.replaceWithNewChild(contextNode, "jetbrains.mps.query.structure.MqlParentheses");
        SLinkOperations.setTarget(result, "expr", contextNode, true);
        return result;
      }
    }
    return contextNode;
  }
}
