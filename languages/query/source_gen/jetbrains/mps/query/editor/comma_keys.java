package jetbrains.mps.query.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorCellKeyMap;
import jetbrains.mps.nodeEditor.EditorCellKeyMapAction;
import java.awt.event.KeyEvent;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.query.actions.PrecedenceUtil;

public class comma_keys extends EditorCellKeyMap {
  public comma_keys() {
    this.setApplicableToEveryModel(false);
    EditorCellKeyMapAction action;
    action = new comma_keys.comma_keys_Action0();
    this.putAction("any", "VK_COMMA", action);
    this.putAction("ctrl", "VK_ENTER", action);
  }

  public static class comma_keys_Action0 extends EditorCellKeyMapAction {
    public comma_keys_Action0() {
      super.setCaretPolicy(EditorCellKeyMapAction.CARET_AT_INTERMEDIATE_POSITION);
      this.setShownInPopupMenu(false);
    }

    public String getDescriptionText() {
      return "add item after";
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (contextNode.isInstanceOfConcept("jetbrains.mps.query.structure.MqlComma")) {
        return true;
      }
      return false;
    }

    public void execute(final KeyEvent keyEvent, final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }

    private void execute_internal(final KeyEvent keyEvent, final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      SNode to = SNodeFactoryOperations.createNewNode(SNodeOperations.getModel(node), "jetbrains.mps.query.structure.MqlComma", null);
      SNode current = SLinkOperations.getTarget(node, "left", true);
      SNodeOperations.replaceWithAnother(current, to);
      SLinkOperations.setTarget(to, "left", current, true);
      PrecedenceUtil.parenthesiseAndRotateIfNecessary(node);
      editorContext.select(to, "right");
      keyEvent.consume();
    }

    public String getKeyStroke() {
      return " COMMA";
    }
  }
}
