package jetbrains.mps.query.runtime;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.SNode;
import java.util.Collection;
import java.util.Arrays;

public class EvaluationEnvironment {
  private static final Object MISSED = new Object();

  private Map<EvaluationEnvironment.Key, Object> cache = MapSequence.fromMap(new HashMap<EvaluationEnvironment.Key, Object>());

  public EvaluationEnvironment() {
  }

  public void cache(Object value, Object... keys) {
    MapSequence.fromMap(cache).put(new EvaluationEnvironment.Key(keys), value);
  }

  public Object lookup(Object... keys) {
    EvaluationEnvironment.Key key = new EvaluationEnvironment.Key(keys);
    Object result = MapSequence.fromMap(cache).get(key);
    if (result != null) {
      return result;
    }
    return (MapSequence.fromMap(cache).containsKey(key) ?
      null :
      MISSED
    );
  }

  public String objectType(Object object) {
    if (object == null) {
      return "[null]";
    }

    if (object instanceof Integer) {
      return "[int]";
    } else if (object instanceof Long) {
      return "[long]";
    } else if (object instanceof Boolean) {
      return "[bool]";
    } else if (object instanceof SNode) {
      String concept = ((SNode) object).getConceptFqName();
      return "[" + concept + "]";
    } else if (object instanceof Collection) {
      return "[list]";
    }
    return "[unknown]";
  }

  public void reportError(String message) {
  }

  private class Key {
    private final Object[] keys;

    public Key(Object[] keys) {
      this.keys = keys;
    }

    @Override
    public boolean equals(Object object) {
      if (!(object instanceof EvaluationEnvironment.Key)) {
        return false;
      }
      EvaluationEnvironment.Key t = (EvaluationEnvironment.Key) object;
      return Arrays.equals(keys, t.keys);
    }

    @Override
    public int hashCode() {
      return Arrays.hashCode(keys);
    }
  }
}
