package jetbrains.mps.core.query.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.query.runtime.EvaluationEnvironment;
import jetbrains.mps.core.query.runtime.EvaluationContext;
import jetbrains.mps.core.query.runtime.QueryScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.query.runtime.SingleElementScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.query.runtime.CompositeScope;

public class MqlComma_Behavior {
  public static void init(SNode thisNode) {
  }

  public static SNode virtual_getType_228266671027861783(SNode thisNode) {
    return MqlExpression_Behavior.call_getType_228266671027861783(SLinkOperations.getTarget(thisNode, "right", true));
  }

  public static int virtual_getPriority_7352592509980890960(SNode thisNode) {
    return 15;
  }

  public static int virtual_getAssociativity_5322644393894740267(SNode thisNode) {
    return 1;
  }

  public static Object virtual_evaluate_1671449901154581105(SNode thisNode, EvaluationEnvironment env, EvaluationContext context) {
    env.evaluate(SLinkOperations.getTarget(thisNode, "left", true), context, true);
    return env.evaluate(SLinkOperations.getTarget(thisNode, "right", true), context, true);
  }

  public static QueryScope virtual_getScope_5433095484313879207(SNode thisNode, SNode kind, SNode child) {
    if (kind == SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlVariable")) {
      if (child == SLinkOperations.getTarget(thisNode, "right", true) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(thisNode, "left", true), "jetbrains.mps.core.query.structure.MqlAssignment")) {
        SNode var = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(thisNode, "left", true), "jetbrains.mps.core.query.structure.MqlAssignment"), "var", true);
        if ((var != null)) {
          QueryScope scope = new SingleElementScope(var, SPropertyOperations.getString(var, "name"));
          return CompositeScope.createComposite(scope, QueryScope.getScope(SNodeOperations.getParent(thisNode), thisNode, kind));
        }
      }
    }
    return null;
  }
}
