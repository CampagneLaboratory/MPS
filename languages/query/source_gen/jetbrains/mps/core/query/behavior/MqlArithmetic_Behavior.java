package jetbrains.mps.core.query.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.query.runtime.EvaluationEnvironment;
import jetbrains.mps.core.query.runtime.EvaluationContext;
import jetbrains.mps.core.query.runtime.EvaluationException;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MqlArithmetic_Behavior {
  public static void init(SNode thisNode) {
  }

  public static SNode virtual_getType_228266671027861783(SNode thisNode) {
    return new MqlArithmetic_Behavior.QuotationClass_yuyu4v_a0a0b().createNode();
  }

  public static int virtual_getAssociativity_5322644393894740267(SNode thisNode) {
    return -1;
  }

  public static int virtual_getPriority_7352592509980890960(SNode thisNode) {
    if (SPropertyOperations.hasValue(thisNode, "kind", "5", null) || SPropertyOperations.hasValue(thisNode, "kind", "3", null) || SPropertyOperations.hasValue(thisNode, "kind", "4", null)) {
      return 3;
    } else {
      return 4;
    }
  }

  public static Object virtual_evaluate_1671449901154581105(SNode thisNode, EvaluationEnvironment env, EvaluationContext context) {
    int left = MqlArithmetic_Behavior.call_evaluateAsInt_1671449901154581993(thisNode, true, env, context);
    int right = MqlArithmetic_Behavior.call_evaluateAsInt_1671449901154581993(thisNode, false, env, context);
    if (SPropertyOperations.hasValue(thisNode, "kind", "1", null)) {
      return left + right;
    } else if (SPropertyOperations.hasValue(thisNode, "kind", "2", null)) {
      return left - right;
    } else if (SPropertyOperations.hasValue(thisNode, "kind", "3", null)) {
      return left * right;
    } else if (SPropertyOperations.hasValue(thisNode, "kind", "4", null)) {
      return left / right;
    } else if (SPropertyOperations.hasValue(thisNode, "kind", "5", null)) {
      return left % right;
    }
    throw new EvaluationException("bad query: unknown arithmetic kind", thisNode, context);
  }

  public static int call_evaluateAsInt_1671449901154581993(SNode thisNode, boolean left, EvaluationEnvironment env, EvaluationContext context) {
    Object result = env.evaluate((left ?
      SLinkOperations.getTarget(thisNode, "left", true) :
      SLinkOperations.getTarget(thisNode, "right", true)
    ), context, false);
    if (result instanceof Integer) {
      return (Integer) result;
    }
    throw new EvaluationException("arithmetic expression can handle integers only, not " + env.getRuntime().objectType(result), thisNode, context);
  }

  public static class QuotationClass_yuyu4v_a0a0b {
    public QuotationClass_yuyu4v_a0a0b() {
    }

    public SNode createNode() {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1 = null;
      {
        quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.core.query.structure.MqlIntType", null, GlobalScope.getInstance(), false);
        SNode quotedNode1_2 = quotedNode_1;
        result = quotedNode1_2;
      }
      return result;
    }
  }
}
