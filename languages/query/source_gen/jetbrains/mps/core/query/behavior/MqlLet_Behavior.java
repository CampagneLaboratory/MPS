package jetbrains.mps.core.query.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.scope.Scope;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.core.query.runtime.MultipleElementsScope;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class MqlLet_Behavior {
  public static void init(SNode thisNode) {
  }

  public static boolean call_isMultiline_4562783364485757485(SNode thisNode) {
    return ListSequence.fromList(SLinkOperations.getTargets(thisNode, "bindings", true)).count() > 1;
  }

  public static SNode virtual_getType_228266671027861783(SNode thisNode) {
    return BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), SLinkOperations.getTarget(thisNode, "expression", true), "virtual_getType_228266671027861783", new Object[]{});
  }

  public static Scope virtual_getScope_3734116213129936182(SNode thisNode, SNode kind, SNode child) {
    // workaround for bad signature of MultElemScope that uses nlist 
    List<SNode> vars = new ArrayList<SNode>();
    ListSequence.fromList(vars).addSequence(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "bindings", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, "var", true) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "var", true);
      }
    }));
    if (kind == SConceptOperations.findConceptDeclaration("jetbrains.mps.core.query.structure.MqlVariable")) {
      return new MultipleElementsScope(vars, new _FunctionTypes._return_P1_E0<String, SNode>() {
        public String invoke(SNode n) {
          return SPropertyOperations.getString(SNodeOperations.cast(n, "jetbrains.mps.core.query.structure.MqlVariable"), "name");
        }
      });
    }
    return null;
  }
}
