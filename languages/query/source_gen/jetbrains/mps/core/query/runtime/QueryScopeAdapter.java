package jetbrains.mps.core.query.runtime;

/*Generated by MPS */

import jetbrains.mps.smodel.search.ISearchScope;
import jetbrains.mps.smodel.search.IReferenceInfoResolver;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModelReference;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.util.Condition;
import java.util.Iterator;

public class QueryScopeAdapter implements ISearchScope {
  private QueryScope scope;

  public QueryScopeAdapter(QueryScope scope) {
    this.scope = scope;
  }

  public IReferenceInfoResolver getReferenceInfoResolver(final SNode referenceNode, SNode targetConcept) {
    return new IReferenceInfoResolver() {
      public SNode resolve(String referenceInfo, SModelReference targetModelReference) {
        return scope.resolve(referenceNode, referenceInfo);
      }
    };
  }

  @NotNull
  public List<SNode> getNodes() {
    return scope.getAvailableElements(null);
  }

  public boolean isInScope(SNode node) {
    return ListSequence.fromList(scope.getAvailableElements(null)).contains(node);
  }

  @NotNull
  public List<SNode> getNodes(Condition<SNode> condition) {
    List<SNode> result = scope.getAvailableElements(null);
    if (condition != null) {
      Iterator<SNode> it = ListSequence.fromList(result).iterator();
      while (it.hasNext()) {
        SNode node = it.next();
        if (!(condition.met(node))) {
          it.remove();
        }
      }
    }
    return result;
  }
}
