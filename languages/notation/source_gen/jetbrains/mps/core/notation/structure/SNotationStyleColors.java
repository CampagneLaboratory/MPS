package jetbrains.mps.core.notation.structure;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;

public enum SNotationStyleColors {
  none("none", null),
  red("red", "red"),
  pink("pink", "pink"),
  orange("orange", "orange"),
  yellow("yellow", "yellow"),
  green("green", "green"),
  dark_green("dark-green", "darkGreen"),
  magenta("magenta", "magenta"),
  dark_magenta("dark-magenta", "darkMagenta"),
  cyan("cyan", "cyan"),
  blue("blue", "blue"),
  light_blue("light-blue", "lightBlue"),
  dark_blue("dark-blue", "darkBlue"),
  gray("gray", "gray"),
  light_gray("light-gray", "lightGray"),
  dark_gray("dark-gray", "darkGray"),
  white("white", "white"),
  black("black", "black");

  private String myName;

  public String getName() {
    return this.myName;
  }

  public String getValueAsString() {
    return this.myValue;
  }

  public static List<SNotationStyleColors> getConstants() {
    List<SNotationStyleColors> list = ListSequence.fromList(new LinkedList<SNotationStyleColors>());
    ListSequence.fromList(list).addElement(SNotationStyleColors.none);
    ListSequence.fromList(list).addElement(SNotationStyleColors.red);
    ListSequence.fromList(list).addElement(SNotationStyleColors.pink);
    ListSequence.fromList(list).addElement(SNotationStyleColors.orange);
    ListSequence.fromList(list).addElement(SNotationStyleColors.yellow);
    ListSequence.fromList(list).addElement(SNotationStyleColors.green);
    ListSequence.fromList(list).addElement(SNotationStyleColors.dark_green);
    ListSequence.fromList(list).addElement(SNotationStyleColors.magenta);
    ListSequence.fromList(list).addElement(SNotationStyleColors.dark_magenta);
    ListSequence.fromList(list).addElement(SNotationStyleColors.cyan);
    ListSequence.fromList(list).addElement(SNotationStyleColors.blue);
    ListSequence.fromList(list).addElement(SNotationStyleColors.light_blue);
    ListSequence.fromList(list).addElement(SNotationStyleColors.dark_blue);
    ListSequence.fromList(list).addElement(SNotationStyleColors.gray);
    ListSequence.fromList(list).addElement(SNotationStyleColors.light_gray);
    ListSequence.fromList(list).addElement(SNotationStyleColors.dark_gray);
    ListSequence.fromList(list).addElement(SNotationStyleColors.white);
    ListSequence.fromList(list).addElement(SNotationStyleColors.black);
    return list;
  }

  public static SNotationStyleColors getDefault() {
    return SNotationStyleColors.none;
  }

  public static SNotationStyleColors parseValue(String value) {
    if (value == null) {
      return SNotationStyleColors.getDefault();
    }
    if (value.equals(SNotationStyleColors.none.getValueAsString())) {
      return SNotationStyleColors.none;
    }
    if (value.equals(SNotationStyleColors.red.getValueAsString())) {
      return SNotationStyleColors.red;
    }
    if (value.equals(SNotationStyleColors.pink.getValueAsString())) {
      return SNotationStyleColors.pink;
    }
    if (value.equals(SNotationStyleColors.orange.getValueAsString())) {
      return SNotationStyleColors.orange;
    }
    if (value.equals(SNotationStyleColors.yellow.getValueAsString())) {
      return SNotationStyleColors.yellow;
    }
    if (value.equals(SNotationStyleColors.green.getValueAsString())) {
      return SNotationStyleColors.green;
    }
    if (value.equals(SNotationStyleColors.dark_green.getValueAsString())) {
      return SNotationStyleColors.dark_green;
    }
    if (value.equals(SNotationStyleColors.magenta.getValueAsString())) {
      return SNotationStyleColors.magenta;
    }
    if (value.equals(SNotationStyleColors.dark_magenta.getValueAsString())) {
      return SNotationStyleColors.dark_magenta;
    }
    if (value.equals(SNotationStyleColors.cyan.getValueAsString())) {
      return SNotationStyleColors.cyan;
    }
    if (value.equals(SNotationStyleColors.blue.getValueAsString())) {
      return SNotationStyleColors.blue;
    }
    if (value.equals(SNotationStyleColors.light_blue.getValueAsString())) {
      return SNotationStyleColors.light_blue;
    }
    if (value.equals(SNotationStyleColors.dark_blue.getValueAsString())) {
      return SNotationStyleColors.dark_blue;
    }
    if (value.equals(SNotationStyleColors.gray.getValueAsString())) {
      return SNotationStyleColors.gray;
    }
    if (value.equals(SNotationStyleColors.light_gray.getValueAsString())) {
      return SNotationStyleColors.light_gray;
    }
    if (value.equals(SNotationStyleColors.dark_gray.getValueAsString())) {
      return SNotationStyleColors.dark_gray;
    }
    if (value.equals(SNotationStyleColors.white.getValueAsString())) {
      return SNotationStyleColors.white;
    }
    if (value.equals(SNotationStyleColors.black.getValueAsString())) {
      return SNotationStyleColors.black;
    }
    return SNotationStyleColors.getDefault();
  }

  private String myValue;

  SNotationStyleColors(String name, String value) {
    this.myName = name;
    this.myValue = value;
  }

  public String getValue() {
    return this.myValue;
  }
}
