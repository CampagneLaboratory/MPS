package jetbrains.mps.core.notation.actions;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class SNotationActionUtil {
  private SNotationActionUtil() {
  }

  public static SNode getRightOutermostNotation(SNode part) {
    SNode parent = SNodeOperations.getParent(part);
    if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.core.notation.structure.SNotationMapping") && "presentation".equals(SNodeOperations.getContainingLinkRole(part))) {
      return getRightOutermostNotation(SNodeOperations.cast(parent, "jetbrains.mps.core.notation.structure.SNotationPart"));
    }
    if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.core.notation.structure.SNotationUnorderedGroup") && ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(parent, "jetbrains.mps.core.notation.structure.SNotationUnorderedGroup"), "parts", true)).last() == part) {
      return getRightOutermostNotation(SNodeOperations.cast(parent, "jetbrains.mps.core.notation.structure.SNotationPart"));
    }
    return part;
  }

  public static SNode getLeftOutermostNotation(SNode part) {
    SNode parent = SNodeOperations.getParent(part);
    if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.core.notation.structure.SNotationQuantifier")) {
      return getLeftOutermostNotation(SNodeOperations.cast(parent, "jetbrains.mps.core.notation.structure.SNotationPart"));
    }
    if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.core.notation.structure.SNotationUnorderedGroup") && ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(parent, "jetbrains.mps.core.notation.structure.SNotationUnorderedGroup"), "parts", true)).first() == part) {
      return getLeftOutermostNotation(SNodeOperations.cast(parent, "jetbrains.mps.core.notation.structure.SNotationPart"));
    }
    return part;
  }

  public static SNode getTargetForNewStyle(SNode node) {
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.core.notation.structure.SNotationPartWithStyle"))) {
      return null;
    }
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.core.notation.structure.SNotationMapping") && "presentation".equals(SNodeOperations.getContainingLinkRole(node))) {
      node = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.core.notation.structure.SNotationPart");
    }
    return node;
  }

  public static SNode getTargetForNewUnorderedGroup(SNode node) {
    while ((node != null) && (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.core.notation.structure.SNotationCorePart") || SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.core.notation.structure.SNotationMapping"))) {
      node = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.core.notation.structure.SNotationPart");
    }
    if ((node != null) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.core.notation.structure.SNotationPartList") && (SNodeOperations.isInstanceOf(node, "jetbrains.mps.core.notation.structure.SNotationCorePart") || SNodeOperations.isInstanceOf(node, "jetbrains.mps.core.notation.structure.SNotationMapping"))) {
      return node;
    }
    return null;
  }

  public static SNode getTargetForQuantifier(SNode node) {
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.core.notation.structure.SNotationMapping")) {
      node = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.core.notation.structure.SNotationMapping"), "presentation", true);
    }
    SNode result = SNodeOperations.as(node, "jetbrains.mps.core.notation.structure.SNotationCorePart");
    if ((result == null)) {
      return null;
    }

    while ((node != null)) {
      if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.core.notation.structure.SNotationQuantifier")) {
        return null;
      }
      node = SNodeOperations.as(SNodeOperations.getParent(node), "jetbrains.mps.core.notation.structure.SNotationCorePart");
    }
    return result;
  }
}
