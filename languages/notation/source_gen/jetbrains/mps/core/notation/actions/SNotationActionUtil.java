package jetbrains.mps.core.notation.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.notation.behavior.SNotationWrapper_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class SNotationActionUtil {
  private SNotationActionUtil() {
  }

  public static SNode getRightOutermostNotation(SNode part) {
    SNode parent = SNodeOperations.getParent(part);
    if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.core.notation.structure.SNotationWrapper") && !(SNotationWrapper_Behavior.call_hasSuffix_8379004527113948621(SNodeOperations.cast(parent, "jetbrains.mps.core.notation.structure.SNotationWrapper")))) {
      return getRightOutermostNotation(SNodeOperations.cast(parent, "jetbrains.mps.core.notation.structure.SNotationPart"));
    }
    if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.core.notation.structure.SNotationMapping") && "presentation".equals(SNodeOperations.getContainingLinkRole(part))) {
      return getRightOutermostNotation(SNodeOperations.cast(parent, "jetbrains.mps.core.notation.structure.SNotationPart"));
    }
    return part;
  }

  public static SNode getLeftOutermostNotation(SNode part) {
    SNode parent = SNodeOperations.getParent(part);
    if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.core.notation.structure.SNotationWrapper") && !(SNotationWrapper_Behavior.call_hasPrefix_8379004527113948625(SNodeOperations.cast(parent, "jetbrains.mps.core.notation.structure.SNotationWrapper")))) {
      return getLeftOutermostNotation(SNodeOperations.cast(parent, "jetbrains.mps.core.notation.structure.SNotationPart"));
    }
    return part;
  }

  public static boolean canWrap(SNode part, int prio) {
    SNode node = part;
    while (SNodeOperations.isInstanceOf(node, "jetbrains.mps.core.notation.structure.SNotationWrapper")) {
      if (SNotationWrapper_Behavior.call_getPrio_2711998566963954000(SNodeOperations.cast(node, "jetbrains.mps.core.notation.structure.SNotationWrapper")) > prio) {
        return false;
      }
      node = SLinkOperations.getTarget(SNodeOperations.cast(node, "jetbrains.mps.core.notation.structure.SNotationWrapper"), "inner", true);
    }
    node = part;
    while (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.core.notation.structure.SNotationWrapper")) {
      if (SNotationWrapper_Behavior.call_getPrio_2711998566963954000(SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.core.notation.structure.SNotationWrapper")) < prio) {
        return false;
      }
      node = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.core.notation.structure.SNotationPart");
    }
    return true;
  }

  public static SNode getTargetForNewStyle(SNode node) {
    if (!(SNodeOperations.isInstanceOf(node, "jetbrains.mps.core.notation.structure.SNotationPartWithStyle"))) {
      return null;
    }
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.core.notation.structure.SNotationMapping") && "presentation".equals(SNodeOperations.getContainingLinkRole(node))) {
      node = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.core.notation.structure.SNotationPart");
    }
    return node;
  }
}
