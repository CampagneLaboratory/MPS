package jetbrains.mps.core.notation.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new SAllNotationsSelector_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new SAllTermsSelector_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new SConceptNotationSelector_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new SConcreteNotationSelector_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new SNotation_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new SNotationBreak_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new SNotationCall_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new SNotationConceptContext_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new SNotationContext_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new SNotationLabel_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new SNotationMapping_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new SNotationNewLine_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new SNotationNospace_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new SNotationParentheses_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new SNotationPart_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new SNotationPartList_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new SNotationPredicate_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new SNotationQuantifier_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new SNotationStyle_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new SNotationStyleColor_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new SNotationStyleContent_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new SNotationStyleEmptyLine_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new SNotationStyleIndent_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new SNotationStylePart_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new SNotationStyleSelector_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new SNotationStylesImport_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new SNotationTab_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new SNotationTermClassSelector_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new SNotationTermTextSelector_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new SNotationUnorderedGroup_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new SStructureEntityRef_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new SStructureLinkRef_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new SStructurePropertyRef_Editor());
      default:
    }
    return Collections.emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0b, descriptor.getConceptFqName())) {
      case 0:
        if ("jetbrains.mps.core.notation.editor.SNotationPartListBody".equals(editorComponentId)) {
          return Collections.<ConceptEditorComponent>singletonList(new SNotationPartListBody());
        }
        break;
      default:
    }
    return Collections.emptyList();
  }



  public Collection<ConceptEditorHint> getHints() {
    return Collections.emptyList();
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.core.notation.structure.SAllNotationsSelector", "jetbrains.mps.core.notation.structure.SAllTermsSelector", "jetbrains.mps.core.notation.structure.SConceptNotationSelector", "jetbrains.mps.core.notation.structure.SConcreteNotationSelector", "jetbrains.mps.core.notation.structure.SNotation", "jetbrains.mps.core.notation.structure.SNotationBreak", "jetbrains.mps.core.notation.structure.SNotationCall", "jetbrains.mps.core.notation.structure.SNotationConceptContext", "jetbrains.mps.core.notation.structure.SNotationContext", "jetbrains.mps.core.notation.structure.SNotationLabel", "jetbrains.mps.core.notation.structure.SNotationMapping", "jetbrains.mps.core.notation.structure.SNotationNewLine", "jetbrains.mps.core.notation.structure.SNotationNospace", "jetbrains.mps.core.notation.structure.SNotationParentheses", "jetbrains.mps.core.notation.structure.SNotationPart", "jetbrains.mps.core.notation.structure.SNotationPartList", "jetbrains.mps.core.notation.structure.SNotationPredicate", "jetbrains.mps.core.notation.structure.SNotationQuantifier", "jetbrains.mps.core.notation.structure.SNotationStyle", "jetbrains.mps.core.notation.structure.SNotationStyleColor", "jetbrains.mps.core.notation.structure.SNotationStyleContent", "jetbrains.mps.core.notation.structure.SNotationStyleEmptyLine", "jetbrains.mps.core.notation.structure.SNotationStyleIndent", "jetbrains.mps.core.notation.structure.SNotationStylePart", "jetbrains.mps.core.notation.structure.SNotationStyleSelector", "jetbrains.mps.core.notation.structure.SNotationStylesImport", "jetbrains.mps.core.notation.structure.SNotationTab", "jetbrains.mps.core.notation.structure.SNotationTermClassSelector", "jetbrains.mps.core.notation.structure.SNotationTermTextSelector", "jetbrains.mps.core.notation.structure.SNotationUnorderedGroup", "jetbrains.mps.core.notation.structure.SStructureEntityRef", "jetbrains.mps.core.notation.structure.SStructureLinkRef", "jetbrains.mps.core.notation.structure.SStructurePropertyRef"};
  private static String[] stringSwitchCases_xbvbvu_a0a0b = new String[]{"jetbrains.mps.core.notation.structure.SNotationPartList"};
}
