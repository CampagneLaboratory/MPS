package jetbrains.mps.core.notation.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class unorderedGroup_deleteElement {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new unorderedGroup_deleteElement.unorderedGroup_deleteElement_DELETE(node));
  }

  public static class unorderedGroup_deleteElement_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;

    public unorderedGroup_deleteElement_DELETE(SNode node) {
      this.myNode = node;
    }

    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }

    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode parent = SNodeOperations.as(SNodeOperations.getParent(node), "jetbrains.mps.core.notation.structure.SNotationUnorderedGroup");
      SNodeOperations.deleteNode(node);
      if ((int) ListSequence.fromList(SLinkOperations.getTargets(parent, "parts", true)).count() == 1) {
        SNodeOperations.replaceWithAnother(parent, ListSequence.fromList(SLinkOperations.getTargets(parent, "parts", true)).first());
      }
    }
  }
}
