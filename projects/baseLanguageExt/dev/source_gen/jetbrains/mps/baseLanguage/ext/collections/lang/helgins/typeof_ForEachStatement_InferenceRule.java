package jetbrains.mps.baseLanguage.ext.collections.lang.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.ext.collections.lang.helgins.TypeUtil_Collections;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.bootstrap.helgins.structure.ApplicableNodeCondition;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelUID;
import jetbrains.mps.smodel.BaseAdapter;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_ForEachStatement_InferenceRule implements InferenceRule_Runtime {

  public  typeof_ForEachStatement_InferenceRule() {
  }

  public void applyRule(SNode argument) {
    SNode inputSequenceExpr = SLinkOperations.getTarget(argument, "inputSequence", true);
    if((inputSequenceExpr == null)) {
      return;
    }
    SNode sequenceType = TypeUtil_Collections.coerceTo_SequenceType(TypeChecker.getInstance().getRuntimeSupport().checkedTypeOf(inputSequenceExpr));
    if(!(sequenceType != null)) {
      TypeChecker.getInstance().reportTypeError(inputSequenceExpr, "sequence is expected");
    }
    if(SLinkOperations.getTarget(argument, "variable", true) != null) {
      TypeChecker.getInstance().getRuntimeSupport().givetype(SLinkOperations.getTarget(sequenceType, "elementType", true), SLinkOperations.getTarget(argument, "variable", true));
    }
  }
  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.ext.collections.lang.structure.ForEachStatement";
  }
  public ApplicableNodeCondition getNodeCondition() {
    SModel model = SModelRepository.getInstance().getModelDescriptor(SModelUID.fromString("jetbrains.mps.baseLanguage.ext.collections.lang.helgins")).getSModel();
    return (ApplicableNodeCondition)BaseAdapter.fromNode(model.getNodeById("1178725704704"));
  }
  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }
  public boolean overrides() {
    return false;
  }
}
