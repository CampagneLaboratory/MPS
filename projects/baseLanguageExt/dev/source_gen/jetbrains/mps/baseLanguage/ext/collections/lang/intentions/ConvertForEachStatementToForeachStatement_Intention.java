package jetbrains.mps.baseLanguage.ext.collections.lang.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;

public class ConvertForEachStatementToForeachStatement_Intention extends BaseIntention implements Intention {

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.ext.collections.lang.structure.ForEachStatement";
  }

  public boolean isErrorIntention() {
    return false;
  }

  public String getDescription(SNode node, EditorContext editorContext) {
    return "Convert to \"for (Type var: iterable)\"";
  }

  public boolean isApplicable(SNode node, EditorContext editorContext) {
    return true;
  }

  public void execute(SNode node, EditorContext editorContext) {
    final zClosureContext _zClosureContext = new zClosureContext();
    _zClosureContext.oldVariable = SLinkOperations.getTarget(node, "variable", true);
    SNode variableType = SNodeOperations.copyNode(TypeChecker.getInstance().getTypeOf(_zClosureContext.oldVariable));
    SNode foreachStatement = SNodeOperations.replaceWithNewChild(node, "jetbrains.mps.baseLanguage.structure.ForeachStatement");
    SLinkOperations.setTarget(foreachStatement, "body", SLinkOperations.getTarget(node, "body", true), true);
    SLinkOperations.setTarget(foreachStatement, "iterable", SLinkOperations.getTarget(node, "inputSequence", true), true);
    SNode newVariable = SLinkOperations.setNewChild(foreachStatement, "variable", "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration");
    SPropertyOperations.set(newVariable, "name", SPropertyOperations.getString(_zClosureContext.oldVariable, "name"));
    SLinkOperations.setTarget(newVariable, "type", variableType, true);
    {
      ICursor<SNode> _zCursor = CursorFactory.createCursor(SequenceOperations.where(SNodeOperations.getDescendants(SLinkOperations.getTarget(foreachStatement, "body", true), "jetbrains.mps.baseLanguage.ext.collections.lang.structure.ForEachVariableReference", false), new zPredicate(null, _zClosureContext)));
      try {
        while(_zCursor.moveToNext()) {
          SNode oldRef = _zCursor.getCurrent();
          SLinkOperations.setTarget(SNodeOperations.replaceWithNewChild(oldRef, "jetbrains.mps.baseLanguage.structure.LocalVariableReference"), "variableDeclaration", newVariable, false);
        }
      } finally {
        _zCursor.release();
      }
    }
  }

}
