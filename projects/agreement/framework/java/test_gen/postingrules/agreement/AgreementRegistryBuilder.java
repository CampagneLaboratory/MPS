package postingrules.agreement;

/*Generated by MPS*/


import postingrules.AgreementRegistry;
import postingrules.ServiceAgreement;
import postingrules.EventType;
import formulaAdapter.PostingRule_Formula;
import postingrules.AccountType;
import formulaAdapter.MoneyAdapter;
import jetbrains.mps.formulaLanguage.api.MultiplyOperation;
import jetbrains.mps.formulaLanguage.api.DoubleConstant;
import formulaAdapter.UsageDouble;
import mf.Currency;
import mf.MfDate;
import formulaAdapter.MoneyAddOperation;
import formulaAdapter.MoneyMultiplyOperation;
import formulaAdapter.FeeMoney;
import formulaAdapter.MoneyConstant;
import jetbrains.mps.formulaLanguage.api.IfFunction;
import mf.Money;
import formulaAdapter.QuantityGreaterThenOperation;
import formulaAdapter.UsageQuantity;
import formulaAdapter.QuantityConstant;
import mf.Unit;

public class AgreementRegistryBuilder {

  public void setUp(AgreementRegistry registry) {
    System.out.println("!!!!! setUp: " + this);
    registry.register("regular", this.setUpRegular());
    registry.register("lowPay", this.setUpLowPay());
  }
  public ServiceAgreement setUpRegular() {
    ServiceAgreement serviceAggreement = new ServiceAgreement();
    serviceAggreement.addPostingRule(EventType.USAGE, new PostingRule_Formula(AccountType.BASE_USAGE, true, new MoneyAdapter(new MultiplyOperation(new DoubleConstant(10.0), new UsageDouble()), Currency.USD)), new MfDate(1999, 10, 1));
    serviceAggreement.addPostingRule(EventType.SERVICE_CALL, new PostingRule_Formula(AccountType.SERVICE, true, new MoneyAddOperation(new MoneyMultiplyOperation(new FeeMoney(), new DoubleConstant(0.5)), new MoneyConstant(10.0, Currency.USD))), new MfDate(1999, 10, 1));
    serviceAggreement.addPostingRule(EventType.SERVICE_CALL, new PostingRule_Formula(AccountType.SERVICE, true, new MoneyAddOperation(new MoneyMultiplyOperation(new FeeMoney(), new DoubleConstant(0.5)), new MoneyConstant(15.0, Currency.USD))), new MfDate(1999, 12, 1));
    serviceAggreement.addPostingRule(EventType.TAX, new PostingRule_Formula(AccountType.TAX, false, new MoneyMultiplyOperation(new FeeMoney(), new DoubleConstant(0.055))), new MfDate(1999, 10, 1));
    return serviceAggreement;
  }
  public ServiceAgreement setUpLowPay() {
    ServiceAgreement serviceAggreement = new ServiceAgreement();
    serviceAggreement.addPostingRule(EventType.USAGE, new PostingRule_Formula(AccountType.BASE_USAGE, true, new IfFunction<Money>(new QuantityGreaterThenOperation(new UsageQuantity(), new QuantityConstant(50.0, Unit.KWH)), new MoneyAdapter(new MultiplyOperation(new DoubleConstant(10.0), new UsageDouble()), Currency.USD), new MoneyAdapter(new MultiplyOperation(new DoubleConstant(5.0), new UsageDouble()), Currency.USD))), new MfDate(1999, 10, 1));
    serviceAggreement.addPostingRule(EventType.SERVICE_CALL, new PostingRule_Formula(AccountType.SERVICE, true, new MoneyConstant(10.0, Currency.USD)), new MfDate(1999, 10, 1));
    serviceAggreement.addPostingRule(EventType.SERVICE_CALL, new PostingRule_Formula(AccountType.SERVICE, true, new MoneyAddOperation(new MoneyMultiplyOperation(new FeeMoney(), new DoubleConstant(0.5)), new MoneyConstant(15.0, Currency.USD))), new MfDate(1999, 12, 1));
    serviceAggreement.addPostingRule(EventType.TAX, new PostingRule_Formula(AccountType.TAX, false, new MoneyMultiplyOperation(new FeeMoney(), new DoubleConstant(0.055))), new MfDate(1999, 10, 1));
    return serviceAggreement;
  }
}
