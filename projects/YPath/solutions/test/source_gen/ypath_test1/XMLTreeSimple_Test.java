package ypath_test1;

/*Generated by MPS */

import junit.framework.TestCase;
import org.w3c.dom.Document;
import ypath.util.ITreeTraversal;
import org.w3c.dom.Node;
import treepath_dom.DOM;
import junit.framework.Assert;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import ypath.util.TreeTraversalFactory;
import ypath.util.CompositeFilter;
import treepath_dom.TreePath_nodeKind_1175164209844;
import treepath_dom.TreePath_nodeKind_propertyMatcher_1175164263587;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import javax.xml.parsers.DocumentBuilderFactory;

public class XMLTreeSimple_Test extends TestCase {
  public static String SINGLE_NODE = "<foo/>";
  public static String SIMPLE_TREE = "<root><a1><b1/><b2/></a1><a2><b3><c1/></b3></a2></root>";

  public void test_single() throws Exception {
    Document doc = this.parse(SINGLE_NODE);
    ITreeTraversal<Node> tp = new DOM().startTraversal(doc);
    Assert.assertSame(SequenceOperations.getSize(tp), 1);
    Assert.assertEquals(SequenceOperations.getFirst(tp), doc);
  }
  public void test_children() throws Exception {
    Document doc = this.parse(SIMPLE_TREE);
    Assert.assertSame(SequenceOperations.getSize(TreeTraversalFactory.Traverse(new DOM().startTraversal(doc), TreeTraversalFactory.Axis("CHILDREN"))), 1);
    Assert.assertSame(SequenceOperations.getSize(TreeTraversalFactory.Traverse(TreeTraversalFactory.Traverse(new DOM().startTraversal(doc), TreeTraversalFactory.Axis("CHILDREN")), TreeTraversalFactory.Axis("CHILDREN"))), 2);
  }
  public void test_descendants() throws Exception {
    Document doc = this.parse(SIMPLE_TREE);
    Assert.assertSame(SequenceOperations.getSize(TreeTraversalFactory.Traverse(new DOM().startTraversal(doc), TreeTraversalFactory.Axis("DESCENDANTS"))), 7);
  }
  public void test_defautProperty() throws Exception {
    Document doc = this.parse(SIMPLE_TREE);
    Assert.assertSame(SequenceOperations.getSize(TreeTraversalFactory.Filter(TreeTraversalFactory.Traverse(new DOM().startTraversal(doc), TreeTraversalFactory.Axis("DESCENDANTS")), new CompositeFilter<Node>(new TreePath_nodeKind_1175164209844(), new TreePath_nodeKind_propertyMatcher_1175164263587("b3")))), 1);
  }
  public Document parse(String xml) throws Exception {
    InputStream is = new ByteArrayInputStream(xml.getBytes());
    Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(is);
    return doc;
  }
}
