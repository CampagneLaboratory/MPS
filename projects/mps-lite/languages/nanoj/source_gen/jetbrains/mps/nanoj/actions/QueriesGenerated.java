package jetbrains.mps.nanoj.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.IOperationContext;
import java.util.ArrayList;
import jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.action.AbstractRTransformHintSubstituteAction;
import jetbrains.mps.smodel.BaseAdapter;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;

public class QueriesGenerated {

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1183027336540(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.BinaryExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.nanoj.structure.BinaryExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, newNode);
          SLinkOperations.setTarget(newNode, "left", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return "sign";
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1183027336569(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.PlusExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.nanoj.structure.PlusExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, newNode);
          SLinkOperations.setTarget(newNode, "left", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return "+";
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1183027336598(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.MinusExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.nanoj.structure.MinusExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, newNode);
          SLinkOperations.setTarget(newNode, "left", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return "*";
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1183027336627(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.MulExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.nanoj.structure.MulExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, newNode);
          SLinkOperations.setTarget(newNode, "left", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return "*";
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1183027336656(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.DivExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.nanoj.structure.DivExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, newNode);
          SLinkOperations.setTarget(newNode, "left", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return "/";
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1183027336685(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.AssignmentExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.nanoj.structure.AssignmentExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, newNode);
          SLinkOperations.setTarget(newNode, "left", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return "=";
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1183027336714(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.EqualsExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.nanoj.structure.EqualsExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, newNode);
          SLinkOperations.setTarget(newNode, "left", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return "==";
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1183027336743(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.NotEqualsExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.nanoj.structure.NotEqualsExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, newNode);
          SLinkOperations.setTarget(newNode, "left", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return "!=";
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1183027336772(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.InstanceMethodCallExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.nanoj.structure.InstanceMethodCallExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, newNode);
          SLinkOperations.setTarget(newNode, "instance", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return ".";
        }
      });
    }
    return result;
  }
}
