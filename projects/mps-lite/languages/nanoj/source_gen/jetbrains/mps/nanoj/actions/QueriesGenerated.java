package jetbrains.mps.nanoj.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration;
import jetbrains.mps.smodel.action.IChildNodeSetter;
import jetbrains.mps.smodel.IOperationContext;
import java.util.ArrayList;
import jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.action.DefaultSimpleSubstituteAction;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import java.util.regex.Pattern;
import jetbrains.mps.smodel.action.AbstractRTransformHintSubstituteAction;
import jetbrains.mps.smodel.BaseAdapter;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;

public class QueriesGenerated {

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Expression_1183117102519(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.Expression", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          int value = Integer.parseInt(pattern);
          SNode result = SModelOperations.createNewNode(model, "jetbrains.mps.nanoj.structure.NumberExpression", null);
          SPropertyOperations.set(result, "number", "" + (value));
          return result;
        }
        public boolean hasSubstitute() {
          return true;
        }
        public boolean canSubstitute_internal(String pattern) {
          return Pattern.compile("(?:\\d)+", 0).matcher(pattern).matches();
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1183117102258(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.BinaryExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.nanoj.structure.BinaryExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, newNode);
          SLinkOperations.setTarget(newNode, "left", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return "sign";
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1183117102287(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.PlusExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.nanoj.structure.PlusExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, newNode);
          SLinkOperations.setTarget(newNode, "left", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return "+";
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1183117102316(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.MinusExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.nanoj.structure.MinusExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, newNode);
          SLinkOperations.setTarget(newNode, "left", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return "*";
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1183117102345(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.MulExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.nanoj.structure.MulExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, newNode);
          SLinkOperations.setTarget(newNode, "left", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return "*";
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1183117102374(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.DivExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.nanoj.structure.DivExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, newNode);
          SLinkOperations.setTarget(newNode, "left", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return "/";
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1183117102403(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.AssignmentExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.nanoj.structure.AssignmentExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, newNode);
          SLinkOperations.setTarget(newNode, "left", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return "=";
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1183117102432(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.EqualsExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.nanoj.structure.EqualsExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, newNode);
          SLinkOperations.setTarget(newNode, "left", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return "==";
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1183117102461(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.NotEqualsExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.nanoj.structure.NotEqualsExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, newNode);
          SLinkOperations.setTarget(newNode, "left", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return "!=";
        }
      });
    }
    return result;
  }
  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1183117102490(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.nanoj.structure.InstanceMethodCallExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode newNode = SModelOperations.createNewNode(model, "jetbrains.mps.nanoj.structure.InstanceMethodCallExpression", null);
          SNodeOperations.replaceWithAnother(sourceNode, newNode);
          SLinkOperations.setTarget(newNode, "instance", sourceNode, true);
          return newNode;
        }
        public String getMatchingText(String pattern) {
          return ".";
        }
      });
    }
    return result;
  }
}
