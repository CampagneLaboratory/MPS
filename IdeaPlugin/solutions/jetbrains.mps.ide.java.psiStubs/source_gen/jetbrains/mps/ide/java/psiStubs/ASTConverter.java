package jetbrains.mps.ide.java.psiStubs;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import com.intellij.psi.PsiClass;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptPropertyOperations;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import com.intellij.psi.PsiField;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.intellij.psi.PsiMethod;
import com.intellij.psi.PsiModifier;
import com.intellij.psi.PsiType;
import com.intellij.psi.PsiPrimitiveType;
import com.intellij.psi.PsiClassType;
import com.intellij.psi.PsiArrayType;
import com.intellij.psi.PsiWildcardType;
import com.intellij.psi.PsiTypeParameter;
import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiJavaFile;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.DynamicReference;
import com.intellij.psi.PsiModifierListOwner;
import com.intellij.psi.PsiTypeParameterListOwner;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class ASTConverter {
  public ASTConverter() {
  }

  public SNode convertClass(PsiClass x) {

    final Wrappers._T<SNode> classifier = new Wrappers._T<SNode>();

    if (x.isInterface()) {
      classifier.value = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Interface", null);
    } else if (x.isEnum()) {
      classifier.value = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.EnumClass", null);
    } else if (x.isAnnotationType()) {
      classifier.value = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.Annotation", null);
    } else {
      classifier.value = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassConcept", null);
    }

    final SNode ourConcept = SNodeOperations.getConceptDeclaration(classifier.value);

    SPropertyOperations.set(classifier.value, "name", x.getName());
    SLinkOperations.setTarget(classifier.value, "visibility", getVisibility(x), true);
    SConceptPropertyOperations.setBoolean(classifier.value, "final", isFinal(x));
    addTypeParams(x, classifier.value);

    if (isNotEmpty_rbndtb_a0m0a(SPropertyOperations.getString(classifier.value, "name"))) {
      String id = SNodeId.Foreign.ID_PREFIX + SPropertyOperations.getString(classifier.value, "name");
      classifier.value.setId(new SNodeId.Foreign(id));
    }

    Sequence.fromIterable(Sequence.fromArray(x.getFields())).visitAll(new IVisitor<PsiField>() {
      public void visit(PsiField it) {
        SNode node = convertField(it, ourConcept);

        if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration")) {
          ListSequence.fromList(SLinkOperations.getTargets(classifier.value, "staticField", true)).addElement(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"));
        } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.FieldDeclaration")) {
          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(classifier.value, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "field", true)).addElement(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.FieldDeclaration"));
        }

      }
    });

    Sequence.fromIterable(Sequence.fromArray(x.getMethods())).visitAll(new IVisitor<PsiMethod>() {
      public void visit(PsiMethod it) {
        SNode node = convertMethod(it, ourConcept);

        if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration")) {
          ListSequence.fromList(SLinkOperations.getTargets(classifier.value, "method", true)).addElement(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
        } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration")) {
          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(classifier.value, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "staticMethod", true)).addElement(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"));
        } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration")) {
          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(classifier.value, "jetbrains.mps.baseLanguage.structure.ClassConcept"), "constructor", true)).addElement(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration"));
        }

      }
    });


    return classifier.value;
  }

  public SNode convertField(PsiField x, SNode parentConcept) {
    SNode field;
    if (isStatic(x) || SConceptOperations.isSubConceptOf(parentConcept, "jetbrains.mps.baseLanguage.structure.Interface")) {
      field = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration", null);
    } else {
      field = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.FieldDeclaration", null);
      SPropertyOperations.set(SNodeOperations.cast(field, "jetbrains.mps.baseLanguage.structure.FieldDeclaration"), "isVolatile", "" + (x.hasModifierProperty(PsiModifier.VOLATILE)));
      SPropertyOperations.set(SNodeOperations.cast(field, "jetbrains.mps.baseLanguage.structure.FieldDeclaration"), "isTransient", "" + (x.hasModifierProperty(PsiModifier.TRANSIENT)));
    }

    SPropertyOperations.set(field, "name", x.getName());
    SLinkOperations.setTarget(SNodeOperations.cast(field, "jetbrains.mps.baseLanguage.structure.ClassifierMember"), "visibility", getVisibility(x), true);
    SPropertyOperations.set(field, "isFinal", "" + (isFinal(x)));
    SLinkOperations.setTarget(field, "type", convertType(x.getType()), true);

    return field;
  }

  public SNode convertMethod(PsiMethod x, SNode parentConcept) {
    SNode method;
    if (x.isConstructor()) {
      method = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ConstructorDeclaration", null);
    } else if (!(isStatic(x)) || SConceptOperations.isSubConceptOf(parentConcept, "jetbrains.mps.baseLanguage.structure.Interface")) {
      method = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", null);
    } else {
      method = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration", null);
    }

    SPropertyOperations.set(method, "name", x.getName());
    SLinkOperations.setTarget(SNodeOperations.cast(method, "jetbrains.mps.baseLanguage.structure.ClassifierMember"), "visibility", getVisibility(x), true);
    SPropertyOperations.set(method, "isFinal", "" + (isFinal(x)));
    SPropertyOperations.set(method, "isSynchronized", "" + (x.hasModifierProperty(PsiModifier.SYNCHRONIZED)));

    SLinkOperations.setTarget(method, "returnType", convertType(x.getReturnType()), true);

    SLinkOperations.setTarget(method, "body", SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StubStatementList", null), true);

    return method;
  }

  public SNode convertType(PsiType x) {
    if (x == null) {
      return null;
    }

    if (x instanceof PsiPrimitiveType) {

      PsiPrimitiveType t = (PsiPrimitiveType) x;
      if (x.equals(PsiPrimitiveType.BYTE)) {
        return SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ByteType", null);
      } else if (x.equals(PsiPrimitiveType.INT)) {
        return SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IntegerType", null);

      } else if (x.equals(PsiPrimitiveType.VOID)) {
        return SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VoidType", null);

      } else {
        return null;
      }

    } else if (x instanceof PsiClassType) {

      PsiClassType t = (PsiClassType) x;
      return resolveClass(t);

    } else if (x instanceof PsiArrayType) {


    } else if (x instanceof PsiWildcardType) {


    } else {
      return null;
    }
    return null;
  }

  public SNode convertTypeParameter(PsiTypeParameter x) {
    SNode typeVar = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration", null);
    SPropertyOperations.set(typeVar, "name", x.getName());
    // TODO extends, super, etc 
    return typeVar;
  }

  public SNode resolveClass(PsiClassType t) {
    PsiClass cls = t.resolve();

    // TODO q: handle this case? create dynamic reference? 
    if (cls == null) {
      return null;
    }

    System.out.println("Class resolved: " + cls.getQualifiedName());

    PsiElement e = cls;
    do {
      e = e.getParent();
      if (!(e instanceof PsiClass) && !(e instanceof PsiJavaFile)) {
        return null;
      }
    } while (!(e instanceof PsiJavaFile));

    PsiJavaFile file = (PsiJavaFile) e;
    String packageName = file.getPackageName();
    SModelReference modelRef = SModelReference.fromString(packageName);

    SNode clsType = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClassifierType", null);
    clsType.setReference("classifier", new DynamicReference("classifier", clsType, modelRef, t.getClassName()));

    System.out.println("Class type: " + t.getClassName());

    return clsType;
  }

  private SNode getVisibility(PsiModifierListOwner x) {
    if (x.hasModifierProperty(PsiModifier.PUBLIC)) {
      return SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.PublicVisibility", null);
    } else if (x.hasModifierProperty(PsiModifier.PROTECTED)) {
      return SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ProtectedVisibility", null);
    } else if (x.hasModifierProperty(PsiModifier.PRIVATE)) {
      return SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.PrivateVisibility", null);
    } else {
      return null;
    }
  }

  private boolean isFinal(PsiModifierListOwner x) {
    return x.hasModifierProperty(PsiModifier.FINAL);
  }

  public boolean isStatic(PsiModifierListOwner x) {
    return x.hasModifierProperty(PsiModifier.STATIC);
  }

  private void addTypeParams(PsiTypeParameterListOwner from, SNode to) {
    ListSequence.fromList(SLinkOperations.getTargets(to, "typeVariableDeclaration", true)).addSequence(Sequence.fromIterable(Sequence.fromArray(from.getTypeParameters())).select(new ISelector<PsiTypeParameter, SNode>() {
      public SNode select(PsiTypeParameter it) {
        return convertTypeParameter(it);
      }
    }));
  }

  public static boolean isNotEmpty_rbndtb_a0m0a(String str) {
    return str != null && str.length() > 0;
  }
}
