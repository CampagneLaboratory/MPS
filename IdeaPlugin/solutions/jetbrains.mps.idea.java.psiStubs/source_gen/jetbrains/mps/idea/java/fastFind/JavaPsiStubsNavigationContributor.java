package jetbrains.mps.idea.java.fastFind;

/*Generated by MPS */

import org.jetbrains.mps.openapi.persistence.indexing.NodeNavigationContributor;
import com.intellij.openapi.components.ApplicationComponent;
import java.util.Collection;
import org.jetbrains.mps.openapi.persistence.indexing.NodeDescriptor;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.project.Project;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.idea.java.psiStubs.PsiJavaStubModelDescriptor;
import jetbrains.mps.idea.java.psiStubs.PsiJavaStubDataSource;
import com.intellij.psi.PsiJavaFile;
import jetbrains.mps.internal.collections.runtime.Sequence;
import com.intellij.psi.PsiClass;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SConceptRepository;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNodeId;
import org.jetbrains.mps.openapi.persistence.indexing.FastGoToRegistry;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;

public class JavaPsiStubsNavigationContributor implements NodeNavigationContributor, ApplicationComponent {
  public JavaPsiStubsNavigationContributor() {
  }

  public Collection<NodeDescriptor> getNodeDescriptors(Collection<SModel> collection, Project project) {
    List<NodeDescriptor> nodes = ListSequence.fromList(new ArrayList<NodeDescriptor>());

    for (SModel model : CollectionSequence.fromCollection(collection)) {
      if (!(model instanceof PsiJavaStubModelDescriptor)) {
        continue;
      }

      PsiJavaStubDataSource dataSource = ((PsiJavaStubModelDescriptor) model).getSource();
      for (PsiJavaFile javaFile : Sequence.fromIterable(dataSource.getJavaFiles())) {
        for (PsiClass clas : javaFile.getClasses()) {
          final PsiClass claz = clas;
          final SModelReference modelRef = model.getModelReference();

          if (!(modelRef instanceof jetbrains.mps.smodel.SModelReference)) {
            continue;
          }
          if (clas.getName() == null || clas.getName().equals("")) {
            continue;
          }

          ListSequence.fromList(nodes).addElement(new NodeDescriptor() {
            public String getName() {
              return claz.getName();
            }

            public SConcept getConcept() {
              String name = "jetbrains.mps.baseLanguage.structure.ClassConcept";
              if (claz.isAnnotationType()) {
                name = "jetbrains.mps.baseLanguage.structure.Annotation";
              } else if (claz.isInterface()) {
                name = "jetbrains.mps.baseLanguage.structure.Interface";
              } else if (claz.isEnum()) {
                name = "jetbrains.mps.baseLanguage.structure.EnumClass";
              }
              return SConceptRepository.getInstance().getConcept(name);
            }

            public SNodeReference getNodeReference() {
              return new SNodePointer((jetbrains.mps.smodel.SModelReference) modelRef, new jetbrains.mps.smodel.SNodeId.Foreign(jetbrains.mps.smodel.SNodeId.Foreign.ID_PREFIX + claz.getName()));

            }
          });

        }
      }
    }
    return nodes;
  }

  public void initComponent() {
    FastGoToRegistry.getInstance().setNavigationContributor("JavaPsiStubs", this);
  }

  public void disposeComponent() {
    FastGoToRegistry.getInstance().setNavigationContributor("JavaPsiStubs", null);
  }

  @NonNls
  @NotNull
  public String getComponentName() {
    return "Java PSI stubs navigation contributor";
  }
}
