package jetbrains.mps.idea.java.psiStubs;

/*Generated by MPS */

import jetbrains.mps.smodel.BaseSpecialModelDescriptor;
import jetbrains.mps.idea.core.psi.PsiListener;
import org.jetbrains.mps.openapi.persistence.DataSourceListener;
import jetbrains.mps.smodel.SModelReference;
import java.util.Map;
import com.intellij.psi.PsiJavaFile;
import java.util.Set;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.mps.openapi.model.SNodeId;
import com.intellij.psi.PsiFile;
import com.google.common.collect.BiMap;
import com.intellij.psi.PsiElement;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import com.google.common.collect.HashBiMap;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import com.intellij.psi.PsiClass;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.jetbrains.mps.openapi.persistence.DataSource;
import com.intellij.psi.PsiFileSystemItem;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class PsiJavaStubModelDescriptor extends BaseSpecialModelDescriptor implements PsiListener, DataSourceListener {
  private SModelReference myModelRef;
  private PsiJavaStubDataSource myDataSource;
  private Map<PsiJavaFile, Set<SNode>> myRootsPerFile = MapSequence.fromMap(new HashMap<PsiJavaFile, Set<SNode>>());
  private Map<SNodeId, SNode> myRootsById = MapSequence.fromMap(new HashMap<SNodeId, SNode>());
  private Map<PsiFile, BiMap<SNodeId, PsiElement>> myMps2PsiMappings = MapSequence.fromMap(new HashMap<PsiFile, BiMap<SNodeId, PsiElement>>());

  public PsiJavaStubModelDescriptor(SModelReference modelRef, PsiJavaStubDataSource dataSource) {
    super(modelRef);
    myModelRef = modelRef;
    myDataSource = dataSource;
  }

  @Override
  @NotNull
  public PsiJavaStubDataSource getSource() {
    return myDataSource;
  }

  @Override
  public void attach() {
    myDataSource.addListener(this);
  }

  @Override
  public void dispose() {
    myDataSource.removeListener(this);
  }

  @Override
  protected SModel createModel() {

    SModel ourModel = new SModel(myModelRef);

    for (PsiJavaFile jf : Sequence.fromIterable(myDataSource.getJavaFiles())) {

      BiMap<SNodeId, PsiElement> mapping = HashBiMap.create();
      MapSequence.fromMap(myMps2PsiMappings).put(jf, mapping);

      ASTConverter converter = new ASTConverter(mapping);
      Set<SNode> roots = SetSequence.fromSet(new HashSet<SNode>());

      for (PsiClass cls : jf.getClasses()) {
        SNode node = converter.convertClass(cls);
        // TODO check for duplicate ids (in java sources there may be 2 classes with the same name 
        //  which is an error but none the less) 
        SModelOperations.addRootNode(ourModel, node);
        SetSequence.fromSet(roots).addElement(node);
        MapSequence.fromMap(myRootsById).put(node.getNodeId(), node);
      }

      if (SetSequence.fromSet(roots).isNotEmpty()) {
        MapSequence.fromMap(myRootsPerFile).put(jf, roots);
      }
    }

    return ourModel;
  }

  @Override
  public void changed(DataSource source) {
    // ignore, why do we need this? 
  }

  public void psiChanged(final PsiListener.PsiEvent event) {
    SModel ourModel = getCurrentModelInternal();

    // already attached, but not createModel'd yet? 
    if (ourModel == null) {
      return;
    }

    // TODO Order can be important, be careful with class name changes (how to find old root node?) 

    // I do madeUpEvent for now to simplify the event that comes in: it only has removed and created 
    // and nothing changed. This is to ensure validity for now while I work on refactorings etc. 

    PsiListener.PsiEvent madeUpEvent = new PsiListener.PsiEvent() {
      public Iterable<PsiFileSystemItem> getCreated() {
        Set<PsiFileSystemItem> result = SetSequence.fromSet(new HashSet<PsiFileSystemItem>());
        SetSequence.fromSet(result).addSequence(Sequence.fromIterable(event.getCreated()));
        SetSequence.fromSet(result).addSequence(SetSequence.fromSet(event.getChanged().keySet()));
        return result;
      }

      public Iterable<PsiFileSystemItem> getRemoved() {
        Set<PsiFileSystemItem> result = SetSequence.fromSet(new HashSet<PsiFileSystemItem>());
        SetSequence.fromSet(result).addSequence(Sequence.fromIterable(event.getRemoved()));
        SetSequence.fromSet(result).addSequence(SetSequence.fromSet(event.getChanged().keySet()));
        return result;
      }

      public Map<PsiFile, Set<PsiElement>> getChanged() {
        return new HashMap<PsiFile, Set<PsiElement>>();
      }
    };

    for (PsiFileSystemItem file : Sequence.fromIterable(madeUpEvent.getRemoved())) {
      assert file instanceof PsiJavaFile;
      PsiJavaFile javaFile = (PsiJavaFile) file;

      SetSequence.fromSet(MapSequence.fromMap(myRootsPerFile).get(javaFile)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          SNodeOperations.deleteNode(it);
        }
      });
      MapSequence.fromMap(myRootsPerFile).removeKey(javaFile);
      MapSequence.fromMap(myMps2PsiMappings).removeKey(javaFile);
    }

    for (PsiFileSystemItem file : Sequence.fromIterable(madeUpEvent.getCreated())) {

      assert file instanceof PsiJavaFile;
      PsiJavaFile javaFile = (PsiJavaFile) file;

      BiMap<SNodeId, PsiElement> mapping = HashBiMap.create();
      ASTConverter converter = new ASTConverter(mapping);

      Set<SNode> roots = SetSequence.fromSet(new HashSet<SNode>());

      for (PsiClass cls : javaFile.getClasses()) {
        SNode node = converter.convertClass(cls);
        SModelOperations.addRootNode(ourModel, node);
        SetSequence.fromSet(roots).addElement(node);
      }

      if (SetSequence.fromSet(roots).isNotEmpty()) {
        MapSequence.fromMap(myRootsPerFile).put(javaFile, roots);
        MapSequence.fromMap(myMps2PsiMappings).put(javaFile, mapping);
      }
    }

    for (PsiFile file : SetSequence.fromSet(madeUpEvent.getChanged().keySet())) {

      ASTConverter converter = new ASTConverter();

      for (PsiElement elem : SetSequence.fromSet(madeUpEvent.getChanged().get(file))) {
        if (elem instanceof PsiFile) {
          continue;
        }
        // going up to one of top-level classes 
        PsiElement e = elem;
        do {
          e = e.getParent();
        } while (e != null && !(e instanceof PsiClass && e.getParent() instanceof PsiFile));

        if (e != null) {

          SNode node = converter.convertClass((PsiClass) e);
          SNodeId id = node.getNodeId();
          SNode oldNode = ourModel.getNodeById(id);

          if ((oldNode != null)) {
            SNodeOperations.replaceWithAnother(oldNode, node);
          } else {
            SModelOperations.addRootNode(ourModel, node);
          }
        }
      }
    }
  }

  public PsiElement getPsiSource(SNode node) {
    // bad: iterating through files 
    for (BiMap<SNodeId, PsiElement> mapping : Sequence.fromIterable(MapSequence.fromMap(myMps2PsiMappings).values())) {
      PsiElement element = mapping.get(node.getNodeId());
      if (element != null) {
        return element;
      }
    }
    return null;
  }

  public SNode getMPSNode(PsiElement element) {
    PsiFile file = element.getContainingFile();
    if (file == null) {
      return null;
    }
    SNodeId nodeId = MapSequence.fromMap(myMps2PsiMappings).get(file).inverse().get(element);
    return mySModel.getNodeById(nodeId);
  }
}
