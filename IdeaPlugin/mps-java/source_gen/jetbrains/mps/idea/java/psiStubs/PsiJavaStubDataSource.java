package jetbrains.mps.idea.java.psiStubs;

/*Generated by MPS */

import jetbrains.mps.extapi.persistence.DataSourceBase;
import com.intellij.openapi.module.Module;
import com.intellij.psi.PsiDirectory;
import com.intellij.openapi.vfs.VirtualFileManager;
import com.intellij.psi.PsiManager;
import java.util.List;
import jetbrains.mps.idea.core.psi.PsiListener;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Iterator;
import org.jetbrains.mps.openapi.persistence.DataSourceListener;
import com.intellij.psi.PsiJavaFile;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class PsiJavaStubDataSource extends DataSourceBase {
  private final Object LOCK = new Object();
  private Module myModule;
  private PsiDirectory myDirectory;
  private VirtualFileManager myVirtualFileManager;
  private PsiManager myPsiManager;
  private List<PsiListener> myListeners = ListSequence.fromList(new ArrayList<PsiListener>());

  public PsiJavaStubDataSource(Module module, PsiDirectory dir) {
    myModule = module;
    myDirectory = dir;

    myVirtualFileManager = VirtualFileManager.getInstance();
    myPsiManager = PsiManager.getInstance(myModule.getProject());

  }

  public void dispatchEvent(PsiListener.PsiEvent event) {
    synchronized (LOCK) {
      {
        Iterator<PsiListener> l_it = myListeners.iterator();
        PsiListener l_var;
        while (l_it.hasNext()) {
          l_var = l_it.next();
          l_var.psiChanged(event);
        }
      }
    }
  }

  @Override
  public void addListener(DataSourceListener listener) {
    assert listener instanceof PsiListener;
    synchronized (LOCK) {
      myListeners.add((PsiListener) listener);
    }
  }

  public PsiDirectory getDirectory() {
    return myDirectory;
  }

  public Iterable<PsiJavaFile> getJavaFiles() {
    return Sequence.fromIterable(Sequence.fromArray(myDirectory.getFiles())).ofType(PsiJavaFile.class);
  }
}
