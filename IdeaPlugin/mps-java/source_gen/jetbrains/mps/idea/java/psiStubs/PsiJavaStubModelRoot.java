package jetbrains.mps.idea.java.psiStubs;

/*Generated by MPS */

import jetbrains.mps.extapi.persistence.ModelRootBase;
import jetbrains.mps.idea.java.psi.PsiListener;
import jetbrains.mps.logging.Logger;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.module.Module;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SModelId;
import jetbrains.mps.idea.java.psi.PsiChangesWatcher;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.Map;
import java.util.HashMap;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.openapi.roots.ModuleRootManager;
import com.intellij.psi.PsiManager;
import com.intellij.psi.PsiDirectory;
import jetbrains.mps.internal.collections.runtime.Sequence;
import com.intellij.psi.PsiJavaFile;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.ide.java.sourceStubs.Util;
import org.jetbrains.mps.openapi.persistence.Memento;
import com.intellij.psi.PsiFileSystemItem;

public class PsiJavaStubModelRoot extends ModelRootBase implements PsiListener {
  private static Logger LOG = Logger.getLogger(PsiJavaStubModelRoot.class);
  private static final String TYPE = "JavaPsiStubs";

  @NotNull
  private Module myIdeaModule;


  public PsiJavaStubModelRoot(Module module) {
    myIdeaModule = module;
  }



  /**
   * Equals is defined only by our ideaModule, all the state is not taken into acount
   * We should be careful when working with ModelRoots in collections (see AbstractModule.doUpdateModelSet)
   */
  @Override
  public boolean equals(Object root) {
    if (!(root instanceof PsiJavaStubModelRoot)) {
      return false;
    }
    return myIdeaModule.equals(((PsiJavaStubModelRoot) root).myIdeaModule);
  }

  @Override
  public int hashCode() {
    return myIdeaModule.hashCode();
  }

  @Override
  public String getType() {
    return TYPE;
  }

  @Override
  public String getPresentation() {
    return "Java PSI stubs";
  }

  @Override
  public SModel getModel(SModelId id) {
    // TODO 
    return null;
  }

  @Override
  public void attach() {
    super.attach();

    //  start to listen 
    PsiChangesWatcher w = myIdeaModule.getProject().getComponent(PsiChangesWatcher.class);
    w.addListener(this);
  }

  @Override
  public void dispose() {
    super.dispose();
    PsiChangesWatcher w = myIdeaModule.getProject().getComponent(PsiChangesWatcher.class);
    w.removeListener(this);
  }

  @Override
  public Iterable<SModel> loadModels() {
    // TODO get rid of getModelMap(), make it simple 
    return MapSequence.fromMap(getModelMap()).values();
  }

  private Map<PsiJavaStubDataSource, SModel> getModelMap() {
    Map<PsiJavaStubDataSource, SModel> modelMap = MapSequence.fromMap(new HashMap<PsiJavaStubDataSource, SModel>());

    final VirtualFile[] sourceRoots = ModuleRootManager.getInstance(myIdeaModule).getSourceRoots(false);
    PsiManager psiMgr = PsiManager.getInstance(myIdeaModule.getProject());

    for (VirtualFile root : sourceRoots) {
      PsiDirectory dir = psiMgr.findDirectory(root);
      addModelsForDir(dir, dir, modelMap);
    }

    return modelMap;
  }

  private void addModelsForDir(PsiDirectory sourceRoot, PsiDirectory dir, Map<PsiJavaStubDataSource, SModel> resultMap) {
    if (Sequence.fromIterable(Sequence.fromArray(dir.getFiles())).ofType(PsiJavaFile.class).isNotEmpty()) {

      SModelReference modelRef = makeModelReference(sourceRoot, dir);
      SModel model = SModelRepository.getInstance().getModelDescriptor(modelRef);

      if (model == null) {
        model = makeModelDescriptor(modelRef, dir);
      }

      assert model instanceof PsiJavaStubModelDescriptor;

      PsiJavaStubDataSource dataSource = ((PsiJavaStubModelDescriptor) model).getSource();
      MapSequence.fromMap(resultMap).put(dataSource, model);
    }

    for (PsiDirectory subDir : dir.getSubdirectories()) {
      addModelsForDir(sourceRoot, subDir, resultMap);
    }
  }

  private PsiJavaStubModelDescriptor makeModelDescriptor(SModelReference modelRef, PsiDirectory dir) {
    PsiJavaStubDataSource ds = new PsiJavaStubDataSource(myIdeaModule, dir);
    return new PsiJavaStubModelDescriptor(modelRef, ds);
  }

  private SModelReference makeModelReference(PsiDirectory sourceRoot, PsiDirectory dir) {
    int skipPrefix = sourceRoot.toString().length();
    String relativeDirName = dir.toString().substring(skipPrefix);
    String packageName = relativeDirName.replace('/', '.').replace('\\', '.');

    if (packageName.length() > 0 && packageName.charAt(0) == '.') {
      packageName = packageName.substring(1);
    }

    return (SModelReference) Util.makeModelReference(packageName, getModule());
  }

  public boolean isReadOnly() {
    return true;
  }

  @Override
  public boolean canCreateModel(String modelName) {
    return false;
  }

  @Override
  public SModel createModel(String modelName) {
    return null;
  }

  @Override
  public void save(Memento memento) {
    throw new UnsupportedOperationException("JavaPsiStubs: unsupported for now");
  }

  @Override
  public void load(Memento memento) {
    throw new UnsupportedOperationException("JavaPsiStubs: unsupported for now");
  }



  @Override
  public void psiChanged(PsiListener.PsiEvent event) {
    // here we simply decide if we have to update 
    for (PsiFileSystemItem fsItem : event.getCreated()) {
      if (importantDir(fsItem)) {
        update();
        return;
      }
    }

    for (PsiFileSystemItem fsItem : event.getRemoved()) {
      if (importantDir(fsItem)) {
        update();
        return;
      }
    }
    // TODO handle moves and renames of directories 
  }



  private boolean importantDir(PsiFileSystemItem fsItem) {
    if (!(fsItem instanceof PsiDirectory)) {
      return false;
    }
    if (findOurSourceRoot(fsItem) == null) {
      return false;
    }
    return true;
  }



  private PsiDirectory findOurSourceRoot(PsiFileSystemItem item) {
    for (VirtualFile sourceRoot : ModuleRootManager.getInstance(myIdeaModule).getSourceRoots()) {
      String rootPath = sourceRoot.toString();
      String itemPath = item.getVirtualFile().toString();
      if (itemPath.startsWith(rootPath)) {
        return PsiManager.getInstance(myIdeaModule.getProject()).findDirectory(sourceRoot);
      }
    }
    return null;
  }
}
