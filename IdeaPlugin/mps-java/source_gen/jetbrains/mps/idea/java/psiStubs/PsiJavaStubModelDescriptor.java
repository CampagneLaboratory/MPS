package jetbrains.mps.idea.java.psiStubs;

/*Generated by MPS */

import jetbrains.mps.extapi.model.SModelBase;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.smodel.SModel;
import java.util.Map;
import java.util.Set;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.mps.openapi.model.SNodeId;
import com.intellij.psi.PsiElement;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.module.SRepository;
import com.intellij.psi.PsiJavaFile;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import com.intellij.psi.PsiClass;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.persistence.DataSource;
import jetbrains.mps.idea.java.psi.PsiListener;
import com.intellij.psi.PsiFile;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import com.intellij.psi.PsiImportStatementBase;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import com.intellij.psi.PsiImportStaticStatement;
import java.util.StringTokenizer;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.util.Consumer;
import jetbrains.mps.util.Pair;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class PsiJavaStubModelDescriptor extends SModelBase implements PsiJavaStubListener {
  private SModelReference myModelRef;
  private SModel myModel;
  private PsiJavaStubDataSource myDataSource;

  private Map<String, Set<SNode>> myRootsPerFile = MapSequence.fromMap(new HashMap<String, Set<SNode>>());
  private Map<SNodeId, SNode> myRootsById = MapSequence.fromMap(new HashMap<SNodeId, SNode>());
  private Map<SNode, PsiElement> myGlobalMps2PsiMapping = MapSequence.fromMap(new HashMap<SNode, PsiElement>());
  private Map<String, Set<SNode>> myMps2PsiMappings = MapSequence.fromMap(new HashMap<String, Set<SNode>>());
  private PsiJavaStubModelDescriptor.MyMps2PsiMapper myMps2PsiMapper = new PsiJavaStubModelDescriptor.MyMps2PsiMapper();


  public PsiJavaStubModelDescriptor(SModelReference modelRef, PsiJavaStubDataSource dataSource) {
    super(modelRef, dataSource);
    myModelRef = modelRef;
    myDataSource = dataSource;
  }

  @Override
  @NotNull
  public PsiJavaStubDataSource getSource() {
    return myDataSource;
  }

  @Override
  public void attach(SRepository repository) {
    myDataSource.addListener(this);
  }

  @Override
  public void dispose() {
    myDataSource.removeListener(this);
  }



  @Override
  public boolean isLoaded() {
    // todo fix this ! 
    return myModel != null;
  }



  @Override
  public synchronized SModel getSModelInternal() {
    if (myModel == null) {
      myModel = createModel();
      myModel.setModelDescriptor(this);
    }
    return myModel;
  }

  private SModel createModel() {
    return new SModel(myModelRef);
  }



  @Override
  public void load() {

    for (PsiJavaFile jf : myDataSource.getJavaFiles()) {
      SNode javaImports = getImports(jf.getImportList().getAllImportStatements());

      ASTConverter converter = new ASTConverter(myMps2PsiMapper);
      Set<SNode> roots = SetSequence.fromSet(new HashSet<SNode>());

      for (PsiClass cls : jf.getClasses()) {
        SNode node = converter.convertClass(cls);
        if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.Classifier")) {
          AttributeOperations.setAttribute(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.Classifier"), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.JavaImports")), javaImports);
        }
        // TODO check for duplicate ids (in java sources there may be 2 classes with the same name 
        //  which is an error but none the less) 
        addRootNode(node);
        SetSequence.fromSet(roots).addElement(node);
        MapSequence.fromMap(myRootsById).put(node.getNodeId(), node);
      }

      if (SetSequence.fromSet(roots).isNotEmpty()) {
        MapSequence.fromMap(myRootsPerFile).put(jf.getName(), roots);
      }
    }
  }

  @Override
  public void changed(DataSource source) {
    // ignore, we should never receive this one 
    // always the more detailed changed(source, psiEvent) 
  }

  @Override
  public void changed(DataSource source, final PsiJavaStubEvent event) {
    org.jetbrains.mps.openapi.model.SModel ourModel = this;

    // already attached, but not createModel'd yet? 
    if (ourModel == null) {
      return;
    }

    for (PsiJavaFile file : event.removed()) {
      myMps2PsiMapper.clearFile(file.getName());
    }

    for (PsiListener.FSRename rename : event.renamed()) {
      String oldName = rename.oldName;
      myMps2PsiMapper.clearFile(oldName);
    }

    for (PsiJavaFile file : event.needReparse()) {
      if (!(file.isValid())) {
        // going upwards and trying to find the valid file with this filename... 
        // it should probably be removed, looks like a hack 
        String name = file.getName();
        for (PsiFile f : file.getParent().getFiles()) {
          if (name.equals(f.getName()) && f instanceof PsiJavaFile) {
            file = (PsiJavaFile) f;
            break;
          }
        }
      }
      // it's still not valid 
      if (!(file.isValid())) {
        continue;
      }

      SNode javaImports = getImports(file.getImportList().getAllImportStatements());
      ASTConverter converter = new ASTConverter(myMps2PsiMapper);

      Set<SNode> roots = SetSequence.fromSet(new HashSet<SNode>());

      for (PsiClass cls : file.getClasses()) {
        SNode node = converter.convertClass(cls);
        if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.Classifier")) {
          AttributeOperations.setAttribute(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.Classifier"), new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.JavaImports")), javaImports);
        }

        SNodeId id = node.getNodeId();
        SNode oldNode = ourModel.getNode(id);

        if ((oldNode != null)) {
          SNodeOperations.replaceWithAnother(oldNode, node);
        } else {
          SModelOperations.addRootNode(ourModel, node);
        }

        SetSequence.fromSet(roots).addElement(node);
      }

      if (SetSequence.fromSet(roots).isNotEmpty()) {
        MapSequence.fromMap(myRootsPerFile).put(file.getName(), roots);
      }
    }
  }



  private SNode getImports(PsiImportStatementBase[] imports) {
    SNode javaImports = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.JavaImports", null);

    for (PsiImportStatementBase imp : imports) {
      SNode javaImport = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.JavaImport", null);
      SPropertyOperations.set(javaImport, "onDemand", "" + (imp.isOnDemand()));
      SPropertyOperations.set(javaImport, "static", "" + (imp instanceof PsiImportStaticStatement));
      String qName = imp.getImportReference().getQualifiedName();
      StringTokenizer toks = new StringTokenizer(qName, ".");
      while (toks.hasMoreTokens()) {
        String tok = toks.nextToken();
        SNode blToken = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StringToken", null);
        SPropertyOperations.set(blToken, "value", tok);
        ListSequence.fromList(SLinkOperations.getTargets(javaImport, "token", true)).addElement(blToken);
      }
      ListSequence.fromList(SLinkOperations.getTargets(javaImports, "entries", true)).addElement(javaImport);
    }
    return javaImports;
  }



  public PsiElement getPsiSource(SNode node) {
    return MapSequence.fromMap(myGlobalMps2PsiMapping).get(node);
  }



  private class MyMps2PsiMapper implements Consumer<Pair<SNode, PsiElement>> {
    @Override
    public void consume(Pair<SNode, PsiElement> pair) {
      SNode node = pair.o1;
      PsiElement element = pair.o2;
      MapSequence.fromMap(myGlobalMps2PsiMapping).put(node, element);
      PsiFile file = element.getContainingFile();
      Set<SNode> mapForFile = MapSequence.fromMap(myMps2PsiMappings).get(file.getName());
      if (mapForFile == null) {
        mapForFile = SetSequence.fromSet(new HashSet<SNode>());
        MapSequence.fromMap(myMps2PsiMappings).put(file.getName(), mapForFile);
      }
      SetSequence.fromSet(mapForFile).addElement(node);
    }



    /*package*/ void clearFile(String fileName) {

      if (MapSequence.fromMap(myRootsPerFile).get(fileName) != null) {
        SetSequence.fromSet(MapSequence.fromMap(myRootsPerFile).get(fileName)).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            SNodeOperations.deleteNode(it);
          }
        });
        MapSequence.fromMap(myRootsPerFile).removeKey(fileName);
      }

      Set<SNode> mapForFile = MapSequence.fromMap(myMps2PsiMappings).get(fileName);
      if (mapForFile == null) {
        return;
      }
      MapSequence.fromMap(myMps2PsiMappings).removeKey(fileName);
      for (SNode node : mapForFile) {
        MapSequence.fromMap(myGlobalMps2PsiMapping).removeKey(node);
      }
    }
  }
}
