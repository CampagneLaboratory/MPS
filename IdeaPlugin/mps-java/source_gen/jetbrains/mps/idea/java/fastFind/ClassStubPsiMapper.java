package jetbrains.mps.idea.java.fastFind;

/*Generated by MPS */

import jetbrains.mps.idea.core.psi.MPS2PsiMapper;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.persistence.java.library.JavaClassStubModelDescriptor;
import com.intellij.psi.PsiElement;
import org.jetbrains.mps.openapi.model.SNode;
import com.intellij.openapi.project.Project;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import com.intellij.psi.PsiClass;
import com.intellij.psi.PsiField;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import com.intellij.psi.JavaPsiFacade;
import com.intellij.psi.search.GlobalSearchScope;

public class ClassStubPsiMapper implements MPS2PsiMapper {
  public boolean hasCorrespondingPsi(SModel model) {
    ModelAccess.instance().checkReadAccess();
    return model instanceof JavaClassStubModelDescriptor;
  }

  public PsiElement getPsiElement(SNode nodeParam, Project project) {
    ModelAccess.instance().checkReadAccess();

    SNode node = nodeParam;
    if (!(hasCorrespondingPsi(SNodeOperations.getModel(node)))) {
      return null;
    }

    // just in case: anonynous classes shouldn't appear here, as they shouldn't in stubs 

    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.Classifier")) {
      return findPsiClass(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.Classifier"), project);

    } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.FieldDeclaration")) {
      PsiClass psiClass = findPsiClass(SNodeOperations.getAncestor(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.FieldDeclaration"), "jetbrains.mps.baseLanguage.structure.Classifier", false, false), project);
      if (psiClass == null) {
        return null;
      }
      PsiField[] fields = psiClass.getFields();
      String expectedName = SPropertyOperations.getString(SNodeOperations.cast(node, "jetbrains.mps.baseLanguage.structure.FieldDeclaration"), MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name"));
      for (PsiField field : fields) {
        if (expectedName.equals(field.getName())) {
          return field;
        }
      }

    } else if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
      // TODO to properly handle methods we have to build node ids in the same way as class stubs do 
      // (based on asm class file parser output) 
    }

    return null;
  }

  private PsiClass findPsiClass(SNode claz, Project project) {
    String classFqName = BehaviorReflection.invokeVirtual(String.class, claz, "virtual_getFqName_1213877404258", new Object[]{});
    return JavaPsiFacade.getInstance(project).findClass(classFqName, GlobalSearchScope.allScope(project));
  }
}
