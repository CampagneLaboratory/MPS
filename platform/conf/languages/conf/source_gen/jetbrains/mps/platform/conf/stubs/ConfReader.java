package jetbrains.mps.platform.conf.stubs;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import org.jdom.Document;
import org.jdom.Element;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jdom.filter.AbstractFilter;
import org.jdom.filter.ElementFilter;
import java.util.List;
import org.jdom.Namespace;
import jetbrains.mps.smodel.SModelReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.smodel.SNodeId;

public class ConfReader {
  private static final String IDEA_PLUGIN = "idea-plugin";
  private static final String EXTENSION_POINTS = "extensionPoints";
  private static final String EXTENSIONS = "extensions";
  private static final String APPLICATION_COMPONENTS = "applicationComponents";
  private static final String MODULE_COMPONENTS = "moduleComponents";
  private static final String PROJECT_COMPONENTS = "projectComponents";
  private static final String EXTENSION_POINT = "extensionPoint";
  private static final String NAME = "name";
  private static final String BEAN_CLASS = "beanClass";
  private static final String INTERFACE = "interface";
  private static final String COMPONENT = "component";
  private static final String INTERFACE_CLASS = "interface-class";
  private static final String IMPLEMENTATION_CLASS = "implementation-class";
  private static final String APPLICATION_SERVICE = "applicationService";
  private static final String MODULE_SERVICE = "moduleService";
  private static final String PROJECT_SERVICE = "projectService";
  private static final String SERVICE_INTERFACE = "serviceInterface";
  private static final String SERVICE_IMPLEMENTATION = "serviceImplementation";

  private ConfReader.Resolver confstubResolver;
  private ConfReader.Resolver javastubResolver;

  public ConfReader(ConfReader.Resolver javaResolver, ConfReader.Resolver confResolver) {
    this.javastubResolver = javaResolver;
    this.confstubResolver = confResolver;
  }

  public void read(SNode confDoc, Document doc) {
    Element root = doc.getRootElement();
    if (IDEA_PLUGIN.equals(root.getName())) {
      readContainers(SLinkOperations.setNewChild(confDoc, "root", "jetbrains.mps.platform.conf.structure.IdeaPlugin"), root);
    } else if (EXTENSION_POINTS.equals(root.getName())) {
      readExtensionPoints(SLinkOperations.setNewChild(confDoc, "root", "jetbrains.mps.platform.conf.structure.ExtensionPoints"), root);
    } else if (EXTENSIONS.equals(root.getName())) {
      readExtensions(SLinkOperations.setNewChild(confDoc, "root", "jetbrains.mps.platform.conf.structure.Extensions"), root);
    } else if (APPLICATION_COMPONENTS.equals(root.getName())) {
      readComponents(SLinkOperations.setNewChild(confDoc, "root", "jetbrains.mps.platform.conf.structure.Components"), SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:d3304d29-cd93-4341-982d-9f0d1a8b40bf(jetbrains.mps.platform.conf.structure)", "Level"), "application"), root);
    } else if (MODULE_COMPONENTS.equals(root.getName())) {
      readComponents(SLinkOperations.setNewChild(confDoc, "root", "jetbrains.mps.platform.conf.structure.Components"), SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:d3304d29-cd93-4341-982d-9f0d1a8b40bf(jetbrains.mps.platform.conf.structure)", "Level"), "module"), root);
    } else if (PROJECT_COMPONENTS.equals(root.getName())) {
      readComponents(SLinkOperations.setNewChild(confDoc, "root", "jetbrains.mps.platform.conf.structure.Components"), SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:d3304d29-cd93-4341-982d-9f0d1a8b40bf(jetbrains.mps.platform.conf.structure)", "Level"), "project"), root);
    }
  }

  private void readContainers(SNode node, Element ideaPlugin) {
    for (Element container : elements(ideaPlugin, EXTENSION_POINTS, EXTENSIONS, APPLICATION_COMPONENTS, MODULE_COMPONENTS, PROJECT_COMPONENTS)) {
      if (EXTENSION_POINTS.equals(container.getName())) {
        readExtensionPoints(SLinkOperations.addNewChild(node, "fragment", "jetbrains.mps.platform.conf.structure.ExtensionPoints"), container);
      } else if (EXTENSIONS.equals(container.getName())) {
        readExtensions(SLinkOperations.addNewChild(node, "fragment", "jetbrains.mps.platform.conf.structure.Extensions"), container);
      } else if (APPLICATION_COMPONENTS.equals(container.getName())) {
        readComponents(SLinkOperations.addNewChild(node, "fragment", "jetbrains.mps.platform.conf.structure.Components"), SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:d3304d29-cd93-4341-982d-9f0d1a8b40bf(jetbrains.mps.platform.conf.structure)", "Level"), "application"), container);
      } else if (MODULE_COMPONENTS.equals(container.getName())) {
        readComponents(SLinkOperations.addNewChild(node, "fragment", "jetbrains.mps.platform.conf.structure.Components"), SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:d3304d29-cd93-4341-982d-9f0d1a8b40bf(jetbrains.mps.platform.conf.structure)", "Level"), "module"), container);
      } else if (PROJECT_COMPONENTS.equals(container.getName())) {
        readComponents(SLinkOperations.addNewChild(node, "fragment", "jetbrains.mps.platform.conf.structure.Components"), SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:d3304d29-cd93-4341-982d-9f0d1a8b40bf(jetbrains.mps.platform.conf.structure)", "Level"), "project"), container);
      }

    }
  }

  public void readExtensionPoints(SNode node, Element eps) {
    for (Element ep : elements(eps, EXTENSION_POINT)) {
      String bc = ep.getAttributeValue(BEAN_CLASS);
      String ifc = ep.getAttributeValue(INTERFACE);
      if (bc != null) {
        SNode bep = SLinkOperations.addNewChild(node, "fragment", "jetbrains.mps.platform.conf.structure.BeanExtensionPoint");
        SPropertyOperations.set(bep, "name", ep.getAttributeValue(NAME));
        addClassifierReference(SLinkOperations.findLinkDeclaration("jetbrains.mps.platform.conf.structure.BeanExtensionPoint", "beanClass"), bep, bc);
      } else if (ifc != null) {
        SNode iep = SLinkOperations.addNewChild(node, "fragment", "jetbrains.mps.platform.conf.structure.IntefaceExtensionPoint");
        SPropertyOperations.set(iep, "name", ep.getAttributeValue(NAME));
        addClassifierReference(SLinkOperations.findLinkDeclaration("jetbrains.mps.platform.conf.structure.IntefaceExtensionPoint", "iface"), iep, ifc);
      } else {
        throw new IllegalStateException();
      }
    }
  }

  public void readExtensions(SNode node, Element es) {
    for (Element ext : elements(es)) {
      if (APPLICATION_SERVICE.equals(ext.getName())) {
        readService(node, SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:d3304d29-cd93-4341-982d-9f0d1a8b40bf(jetbrains.mps.platform.conf.structure)", "Level"), "application"), es);
      } else if (MODULE_SERVICE.equals(ext.getName())) {
        readService(node, SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:d3304d29-cd93-4341-982d-9f0d1a8b40bf(jetbrains.mps.platform.conf.structure)", "Level"), "module"), es);
      } else if (PROJECT_SERVICE.equals(ext.getName())) {
        readService(node, SEnumOperations.getEnumMember(SEnumOperations.getEnum("r:d3304d29-cd93-4341-982d-9f0d1a8b40bf(jetbrains.mps.platform.conf.structure)", "Level"), "project"), es);
      }
    }
  }

  public void readComponents(SNode node, SNode level, Element cs) {
    for (Element cmp : elements(cs, COMPONENT)) {
      String ifc = cmp.getChildTextTrim(INTERFACE_CLASS);
      String impl = cmp.getChildTextTrim(IMPLEMENTATION_CLASS);
      SNode subNode = SLinkOperations.addNewChild(node, "fragment", "jetbrains.mps.platform.conf.structure.Component");
      SPropertyOperations.set(subNode, "level", SEnumOperations.getEnumMemberValue(level));
      if (ifc != null) {
        addClassifierReference(SLinkOperations.findLinkDeclaration("jetbrains.mps.platform.conf.structure.Component", "ifaceClass"), subNode, ifc);
      }
      if (impl != null) {
        addClassifierReference(SLinkOperations.findLinkDeclaration("jetbrains.mps.platform.conf.structure.Component", "implClass"), subNode, impl);
      }
    }
  }

  public void readService(SNode node, SNode level, Element srv) {
    SNode subNode = SLinkOperations.addNewChild(node, "fragment", "jetbrains.mps.platform.conf.structure.Service");
    SPropertyOperations.set(subNode, "level", SEnumOperations.getEnumMemberValue(level));
    String ifc = srv.getAttributeValue(SERVICE_INTERFACE);
    if (ifc != null) {
      addClassifierReference(SLinkOperations.findLinkDeclaration("jetbrains.mps.platform.conf.structure.Service", "serviceIface"), subNode, ifc);
    }
    String impl = srv.getAttributeValue(SERVICE_IMPLEMENTATION);
    if (impl != null) {
      addClassifierReference(SLinkOperations.findLinkDeclaration("jetbrains.mps.platform.conf.structure.Service", "serviceImpl"), subNode, impl);
    }

  }

  private Iterable<Element> elements(Element parent, String name, String... orName) {
    AbstractFilter flt = new ElementFilter(name);
    if (orName != null) {
      for (String or : orName) {
        flt = (AbstractFilter) flt.or(new ElementFilter(or));
      }
    }
    return (List<Element>) parent.getContent(flt);
  }

  private Iterable<Element> elements(Element parent) {
    AbstractFilter flt = new ElementFilter(Namespace.NO_NAMESPACE);
    return (List<Element>) parent.getContent(flt);
  }

  private void addConfXmlDocReference(SNode link, SNode src, final String fqName) {
    SModelReference trgsmref = this.confstubResolver.stubModelReference(namespace(fqName));
    if (SNodeOperations.getModel(src).getSModelReference().equals(trgsmref)) {
      SNode trg = ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(src), "jetbrains.mps.platform.conf.structure.ConfigurationXmlDocument")).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode gwtmod) {
          return SPropertyOperations.getString(gwtmod, "name").equals(shortName(fqName));
        }
      });
      src.addReference(SReference.create(SPropertyOperations.getString(link, "role"), src, trg));
    } else {
      SNodeOperations.getModel(src).addModelImport(trgsmref, false);
      src.addReference(SReference.create(SPropertyOperations.getString(link, "role"), src, trgsmref, createId(fqName)));
    }
  }

  private void addClassifierReference(SNode link, SNode src, String fqClassName) {
    SModelReference trgsmref = this.javastubResolver.stubModelReference(namespace(fqClassName));
    SNodeOperations.getModel(src).addModelImport(trgsmref, false);
    src.addReference(SReference.create(SPropertyOperations.getString(link, "role"), src, trgsmref, createId(fqClassName)));
  }

  private static String namespace(String fqName) {
    if (fqName == null) {
      return null;
    }
    int idx = fqName.lastIndexOf(".");
    if (idx < 0) {
      return "";
    }
    return fqName.substring(0, idx);
  }

  private static String shortName(String fqName) {
    if (fqName == null) {
      return null;
    }
    int idx = fqName.lastIndexOf(".");
    if (idx < 0) {
      return fqName;
    }
    return fqName.substring(idx + 1);
  }

  public static SNodeId createId(String fqName) {
    return new SNodeId.Foreign(SNodeId.Foreign.ID_PREFIX + shortName(fqName));
  }

  public static interface Resolver {
    public SModelReference stubModelReference(String pkg);
  }
}
