package jetbrains.mps.platform.conf.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.ConstraintsDataHolder;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.structure.CanBeASomethingMethod;
import jetbrains.mps.smodel.constraints.CanBeAParentContext;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.structure.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;

public class Extensions_Constraints extends ConstraintsDataHolder {
  public Extensions_Constraints() {
  }

  public String getConceptFqName() {
    return "jetbrains.mps.platform.conf.structure.Extensions";
  }

  @Nullable
  @Override
  public CanBeASomethingMethod<CanBeAParentContext> getCanBeAParentMethod() {
    return new CanBeASomethingMethod<CanBeAParentContext>() {
      private SNodePointer breakingNode = new SNodePointer("r:2fe958f4-f755-4faa-af2a-c5125dc0cfc1(jetbrains.mps.platform.conf.constraints)", "7161354651095842821");

      public boolean canBe(IOperationContext operationContext, CanBeAParentContext _context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = canBeAParent(operationContext, _context);
        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.breakingNodePointer = breakingNode;
        }
        return result;
      }
    };
  }

  public static boolean canBeAParent(final IOperationContext operationContext, final CanBeAParentContext _context) {
    if (SLinkOperations.findLinkDeclaration("jetbrains.mps.platform.conf.structure.Extensions", "fragment") == _context.getLink()) {
      return (SConceptOperations.isSubConceptOf(_context.getChildConcept(), "jetbrains.mps.platform.conf.structure.Extension") || SConceptOperations.isSubConceptOf(_context.getChildConcept(), "jetbrains.mps.platform.conf.structure.IExternalConfigurationFragment"));
    }
    return true;
  }
}
