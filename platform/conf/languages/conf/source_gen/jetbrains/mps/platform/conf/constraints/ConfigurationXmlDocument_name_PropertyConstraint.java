package jetbrains.mps.platform.conf.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.INodePropertyGetter;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class ConfigurationXmlDocument_name_PropertyConstraint implements IModelConstraints, INodePropertyGetter {
  public ConfigurationXmlDocument_name_PropertyConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodePropertyGetter("jetbrains.mps.platform.conf.structure.ConfigurationXmlDocument", "name", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodePropertyGetter("jetbrains.mps.platform.conf.structure.ConfigurationXmlDocument", "name");
  }

  public Object execPropertyGet(SNode node, String propertyName, IScope scope) {
    String name = node.getName();
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "root", true), "jetbrains.mps.lang.core.structure.INamedConcept")) {
      name = name + "(" + SPropertyOperations.getString(SNodeOperations.as(SLinkOperations.getTarget(node, "root", true), "jetbrains.mps.lang.core.structure.INamedConcept"), "name") + ")";
    }
    return name;
  }
}
