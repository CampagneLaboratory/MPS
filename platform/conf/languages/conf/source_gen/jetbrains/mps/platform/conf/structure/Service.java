package jetbrains.mps.platform.conf.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Classifier;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.Attribute;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Service extends Extension implements HasLevel {
  public static final String concept = "jetbrains.mps.platform.conf.structure.Service";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String LEVEL = "level";
  public static final String SERVICE_IFACE = "serviceIface";
  public static final String SERVICE_IMPL = "serviceImpl";
  public static final String _$ATTRIBUTE = "_$attribute";

  public Service(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(Service.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Service.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Service.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Service.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Service.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Service.VIRTUAL_PACKAGE, value);
  }

  public Level getLevel() {
    String value = super.getProperty(Service.LEVEL);
    return Level.parseValue(value);
  }

  public void setLevel(Level value) {
    super.setProperty(Service.LEVEL, value.getValueAsString());
  }

  public Classifier getServiceIface() {
    return (Classifier) this.getReferent(Classifier.class, Service.SERVICE_IFACE);
  }

  public void setServiceIface(Classifier node) {
    super.setReferent(Service.SERVICE_IFACE, node);
  }

  public Classifier getServiceImpl() {
    return (Classifier) this.getReferent(Classifier.class, Service.SERVICE_IMPL);
  }

  public void setServiceImpl(Classifier node) {
    super.setReferent(Service.SERVICE_IMPL, node);
  }

  public int get_$attributesCount() {
    return this.getChildCount(Service._$ATTRIBUTE);
  }

  public Iterator<Attribute> _$attributes() {
    return this.children(Attribute.class, Service._$ATTRIBUTE);
  }

  public List<Attribute> get_$attributes() {
    return this.getChildren(Attribute.class, Service._$ATTRIBUTE);
  }

  public void add_$attribute(Attribute node) {
    this.addChild(Service._$ATTRIBUTE, node);
  }

  public void insert_$attribute(Attribute prev, Attribute node) {
    this.insertChild(prev, Service._$ATTRIBUTE, node);
  }

  public static Service newInstance(SModel sm, boolean init) {
    return (Service) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.platform.conf.structure.Service", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Service newInstance(SModel sm) {
    return Service.newInstance(sm, false);
  }
}
