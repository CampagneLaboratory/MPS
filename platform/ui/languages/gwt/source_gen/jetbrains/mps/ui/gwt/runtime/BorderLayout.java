package jetbrains.mps.ui.gwt.runtime;

/*Generated by MPS */

import org.eclipse.swt.widgets.Layout;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.SWT;

public class BorderLayout extends Layout {
  private static Point ZERO = new Point(0, 0);

  private Control north;
  private Control south;
  private Control east;
  private Control west;
  private Control center;

  public BorderLayout() {
  }

  protected Point computeSize(Composite comp, int wHint, int hHint, boolean flushCache) {
    this.collectControls(comp);
    int width = this.size(this.west, flushCache).x + this.size(this.center, flushCache).x + this.size(this.east, flushCache).x;
    width = Math.max(width, this.size(this.north, flushCache).x);
    width = Math.max(width, this.size(this.south, flushCache).x);
    int mheight = Math.max(this.size(this.east, flushCache).y, Math.max(this.size(this.center, flushCache).y, this.size(this.west, flushCache).y));
    int height = this.size(this.north, flushCache).y + mheight + this.size(this.south, flushCache).y;
    return new Point(Math.max(width, wHint), Math.max(height, hHint));
  }

  protected void layout(Composite comp, boolean flushCache) {
    this.collectControls(comp);
    Rectangle carea = comp.getClientArea();
    Rectangle insides = new Rectangle(carea.x, carea.y, carea.width, carea.height);
    this.placeControl(this.north, BorderData.NORTH, carea, insides, flushCache);
    this.placeControl(this.south, BorderData.SOUTH, carea, insides, flushCache);
    this.placeControl(this.east, BorderData.EAST, carea, insides, flushCache);
    this.placeControl(this.west, BorderData.WEST, carea, insides, flushCache);
    this.placeControl(this.center, BorderData.CENTER, carea, insides, flushCache);
  }

  @Override
  protected boolean flushCache(Control comp) {
    return super.flushCache(comp);
  }

  private void placeControl(Control ctrl, int border, Rectangle carea, Rectangle insides, boolean flushCache) {
    if (ctrl == null) {
      return;
    }
    Point pt = this.size(ctrl, flushCache);
    switch (border) {
      case BorderData.NORTH:
        ctrl.setBounds(insides.x, insides.y, carea.width, pt.y);
        insides.y += pt.y;
        break;
      case BorderData.SOUTH:
        ctrl.setBounds(insides.x, carea.height - pt.y, carea.width, pt.y);
        insides.height -= pt.y;
        break;
      case BorderData.EAST:
        ctrl.setBounds(carea.width - pt.x, insides.y, pt.x, insides.height - insides.y);
        insides.width -= pt.x;
        break;
      case BorderData.WEST:
        ctrl.setBounds(insides.x, insides.y, pt.x, insides.height - insides.y);
        insides.x += pt.x;
        break;
      case BorderData.CENTER:
        ctrl.setBounds(insides.x, insides.y, insides.width - insides.x, insides.height - insides.y);
        break;
      default:
        throw new RuntimeException("Unknown constant in BorderData");
    }
  }

  private Point size(Control ctrl, boolean flushCache) {
    return (ctrl != null ?
      ctrl.computeSize(SWT.DEFAULT, SWT.DEFAULT, flushCache) :
      ZERO
    );
  }

  private void collectControls(Composite comp) {
    for (Control child : comp.getChildren()) {
      BorderData bd = (BorderData)child.getLayoutData();
      switch (bd.border) {
        case BorderData.NORTH:
          this.north = child;
          break;
        case BorderData.SOUTH:
          this.south = child;
          break;
        case BorderData.EAST:
          this.east = child;
          break;
        case BorderData.WEST:
          this.west = child;
          break;
        case BorderData.CENTER:
          this.center = child;
          break;
        default:
          throw new RuntimeException("Unknown constant in BorderData");
      }

    }
  }
}
