package jetbrains.mps.ui.modeling.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ui.modeling.behavior.UIObject_Behavior;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.SNodePointer;

public class UIObject_belongsTo_ReferentConstraint extends BaseNodeReferenceSearchScopeProvider implements IModelConstraints {
  public UIObject_belongsTo_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("jetbrains.mps.ui.modeling.structure.UIObject", "belongsTo", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("jetbrains.mps.ui.modeling.structure.UIObject", "belongsTo");
  }

  public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    List<SNode> nodes = SModelOperations.getNodesIncludingImported(_context.getModel(), GlobalScope.getInstance(), "jetbrains.mps.ui.modeling.structure.UIObject");
    if ((_context.getReferenceNode() == null)) {
      return nodes;
    }
    SNode uio = SNodeOperations.cast(_context.getReferenceNode(), "jetbrains.mps.ui.modeling.structure.UIObject");
    // respect extending object's "belongsTo" ref 
    final SNode mbt = UIObject_Behavior.call_mustBelongTo_1719339442171055203(uio);
    if (mbt != null) {
      ListSequence.fromList(nodes).removeWhere(new IWhereFilter<SNode>() {
        public boolean accept(SNode n) {
          return !(Sequence.fromIterable(UIObject_Behavior.call_allExtends_8115675450774407592(n)).contains(mbt));
        }
      });
    }
    return nodes;
  }

  public SNodePointer getSearchScopeValidatorNodePointer() {
    return new SNodePointer("r:3cad8b0f-ef3c-442c-8c6f-1ab422f65805(jetbrains.mps.ui.modeling.constraints)", "1719339442170193747");
  }
}
