package jetbrains.mps.ui.modeling.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.ui.modeling.behavior.UIObject_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SNodePointer;

public class ContainerTemplate_container_ReferentConstraint extends BaseNodeReferenceSearchScopeProvider implements IModelConstraints {
  public ContainerTemplate_container_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("jetbrains.mps.ui.modeling.structure.ContainerTemplate", "container", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("jetbrains.mps.ui.modeling.structure.ContainerTemplate", "container");
  }

  public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    Iterable<SNode> allConts = Sequence.fromIterable(UIObject_Behavior.call_allExtends_8115675450774407592(SLinkOperations.getTarget(SNodeOperations.as(_context.getEnclosingNode(), "jetbrains.mps.ui.modeling.structure.UIObjectTemplate"), "uiObject", false))).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode uio) {
        return SLinkOperations.getTargets(uio, "compartment", true);
      }
    });
    Iterable<SNode> specializesConts = Sequence.fromIterable(UIObject_Behavior.call_allExtends_8115675450774407592(SLinkOperations.getTarget(SNodeOperations.as(_context.getEnclosingNode(), "jetbrains.mps.ui.modeling.structure.UIObjectTemplate"), "uiObject", false))).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode uio) {
        return SLinkOperations.getTargets(uio, "compartment", true);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode cont) {
        return SLinkOperations.getTarget(cont, "specializes", false);
      }
    }).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode cont) {
        return cont != null;
      }
    });
    Iterable<SNode> existing = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.as(_context.getEnclosingNode(), "jetbrains.mps.ui.modeling.structure.UIObjectTemplate"), "containerTemplate", true)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode ct) {
        return SLinkOperations.getTarget(ct, "container", false);
      }
    });
    return Sequence.fromIterable(allConts).subtract(Sequence.fromIterable(specializesConts)).subtract(Sequence.fromIterable(existing));
  }

  public SNodePointer getSearchScopeValidatorNodePointer() {
    return new SNodePointer("r:3cad8b0f-ef3c-442c-8c6f-1ab422f65805(jetbrains.mps.ui.modeling.constraints)", "4391079257750389363");
  }
}
