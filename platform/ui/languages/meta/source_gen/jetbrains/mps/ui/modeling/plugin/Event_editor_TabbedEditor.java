package jetbrains.mps.ui.modeling.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.tabbedEditor.BaseTabbedEditor;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.plugins.pluginparts.tabbedEditor.BaseSingleTab;
import jetbrains.mps.ide.tabbedEditor.TabbedEditor;
import jetbrains.mps.plugins.pluginparts.tabbedEditor.BaseMultiTab;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.awt.Frame;
import jetbrains.mps.workbench.MPSDataKeys;
import com.intellij.ide.DataManager;
import javax.swing.JOptionPane;

public class Event_editor_TabbedEditor extends BaseTabbedEditor {
  public Event_editor_TabbedEditor(IOperationContext operationContext, SNode node) {
    super(operationContext, node);
    this.addTab(new Event_editor_TabbedEditor.Structure_Tab(this, node), null);
    this.addTab(new Event_editor_TabbedEditor.Code_Tab(this, node), null);
  }

  public static class Structure_Tab extends BaseSingleTab {
    public Structure_Tab(TabbedEditor tabbedEditor, SNode baseNode) {
      super(tabbedEditor, baseNode);
    }

    public String getTitle() {
      return "Structure";
    }

    public String getNullText() {
      return "";
    }

    public SNode getNode(SNode node) {
      return node;
    }

    public boolean canCreate() {
      return false;
    }

    public SNode createNode(final SNode node) {
      throw new IllegalArgumentException();
    }
  }

  public static class Code_Tab extends BaseMultiTab {
    public Code_Tab(TabbedEditor tabbedEditor, SNode baseNode) {
      super(tabbedEditor, baseNode);
    }

    public String getTitle() {
      return "Code";
    }

    public String getNullText() {
      return "";
    }

    public List<SNode> getNodes(SNode node) {
      if (!(EditorExtensions.isInitialized())) {
        return new ArrayList<SNode>();
      }
      final SNode event = node;
      return Sequence.fromIterable(EditorExtensions.getInstance().findAllEventHandlerTemplates()).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode eht) {
          return SLinkOperations.getTarget(eht, "event", false) == event;
        }
      }).toListSequence();
    }

    public String getTabTextForNode(SNode node) {
      return SModelOperations.getModelName(SNodeOperations.getModel(node)) + "/" + SPropertyOperations.getString(SNodeOperations.as(node, "jetbrains.mps.lang.core.structure.INamedConcept"), "name");
    }

    public boolean canCreate() {
      return true;
    }

    public SNode createNode(final SNode node, final boolean ask, final SNode concept) {
      String defVal = "<default>";
      Object[] msg = new Object[]{"Choose destination model for the new template:"};
      Object[] selVals = Sequence.fromIterable(Sequence.<Object>singleton(defVal)).concat(Sequence.fromIterable(EditorExtensions.getInstance().findEventHandlerTemplateCreatorsInfo())).toGenericArray(Object.class);
      Frame frame = MPSDataKeys.FRAME.getData(DataManager.getInstance().getDataContext());
      Object creatorInfo = JOptionPane.showInputDialog(frame, msg, "Choose destination model", JOptionPane.QUESTION_MESSAGE, null, selVals, defVal);
      if (defVal.equals(creatorInfo)) {
        JOptionPane.showMessageDialog(frame, "Cannot create template", "Error", JOptionPane.ERROR_MESSAGE);
        return null;
      }
      return (creatorInfo != null ?
        EditorExtensions.getInstance().createEventHandlerTemplate(node, creatorInfo) :
        null
      );
    }
  }
}
