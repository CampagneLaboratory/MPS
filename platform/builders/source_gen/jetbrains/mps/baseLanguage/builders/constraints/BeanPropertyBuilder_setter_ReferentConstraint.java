package jetbrains.mps.baseLanguage.builders.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.builders.behavior.Builder_Behavior;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import java.util.ArrayList;
import java.util.List;
import jetbrains.mps.baseLanguage.behavior.Classifier_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.search.IClassifiersSearchScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.builders.behavior.BeanPropertyBuilder_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.constraints.PresentationReferentConstraintContext;

public class BeanPropertyBuilder_setter_ReferentConstraint extends BaseNodeReferenceSearchScopeProvider implements IModelConstraints {
  public BeanPropertyBuilder_setter_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("jetbrains.mps.baseLanguage.builders.structure.BeanPropertyBuilder", "setter", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("jetbrains.mps.baseLanguage.builders.structure.BeanPropertyBuilder", "setter");
  }

  public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    SNode contextBuilder = Builder_Behavior.getContextBuilder_7057666463730366732(_context.getEnclosingNode());
    SNode classifierType = TypeChecker.getInstance().getRuntimeSupport().coerce_(Builder_Behavior.call_getResultType_7057666463730718251(contextBuilder), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.structure.ClassifierType"), false);
    if (classifierType == null) {
      return new ArrayList<SNode>();
    }
    List<SNode> methods = new ArrayList<SNode>();
    for (SNode m : Classifier_Behavior.call_getVisibleMembers_1213877306257(SLinkOperations.getTarget(classifierType, "classifier", false), _context.getEnclosingNode(), IClassifiersSearchScope.INSTANCE_METHOD)) {

      SNode method = SNodeOperations.cast(m, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration");
      if (ListSequence.fromList(SLinkOperations.getTargets(method, "parameter", true)).count() == 1 && BeanPropertyBuilder_Behavior.getPropertyName_2679357232284040711(SPropertyOperations.getString(method, "name")) != null) {
        ListSequence.fromList(methods).addElement(method);
      }
    }
    return methods;
  }

  public SNodePointer getSearchScopeFactoryNodePointer() {
    return new SNodePointer("r:971d5c35-6139-4f76-9019-ac96d9713d41(jetbrains.mps.baseLanguage.builders.constraints)", "2679357232283837712");
  }

  public boolean hasPresentation() {
    return true;
  }

  public String getPresentation(final IOperationContext operationContext, final PresentationReferentConstraintContext _context) {
    return BeanPropertyBuilder_Behavior.getPropertyName_2679357232284040711(SPropertyOperations.getString(_context.getParameterNode(), "name"));
  }
}
