package jetbrains.mps.baseLanguage.builders.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Statement;
import jetbrains.mps.baseLanguage.structure.IContainsStatementList;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.baseLanguage.structure.StatementList;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.Attribute;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class AsBuilderStatement extends Statement implements IContainsStatementList, BuilderContainer {
  public static final String concept = "jetbrains.mps.baseLanguage.builders.structure.AsBuilderStatement";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String EXPRESSION = "expression";
  public static final String BUILDER = "builder";
  public static final String BODY = "body";
  public static final String _$ATTRIBUTE = "_$attribute";

  public AsBuilderStatement(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(AsBuilderStatement.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(AsBuilderStatement.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(AsBuilderStatement.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(AsBuilderStatement.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(AsBuilderStatement.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(AsBuilderStatement.VIRTUAL_PACKAGE, value);
  }

  public Expression getExpression() {
    return (Expression) this.getChild(Expression.class, AsBuilderStatement.EXPRESSION);
  }

  public void setExpression(Expression node) {
    super.setChild(AsBuilderStatement.EXPRESSION, node);
  }

  public Builder getBuilder() {
    return (Builder) this.getChild(Builder.class, AsBuilderStatement.BUILDER);
  }

  public void setBuilder(Builder node) {
    super.setChild(AsBuilderStatement.BUILDER, node);
  }

  public StatementList getBody() {
    return (StatementList) this.getChild(StatementList.class, AsBuilderStatement.BODY);
  }

  public void setBody(StatementList node) {
    super.setChild(AsBuilderStatement.BODY, node);
  }

  public int get_$attributesCount() {
    return this.getChildCount(AsBuilderStatement._$ATTRIBUTE);
  }

  public Iterator<Attribute> _$attributes() {
    return this.children(Attribute.class, AsBuilderStatement._$ATTRIBUTE);
  }

  public List<Attribute> get_$attributes() {
    return this.getChildren(Attribute.class, AsBuilderStatement._$ATTRIBUTE);
  }

  public void add_$attribute(Attribute node) {
    this.addChild(AsBuilderStatement._$ATTRIBUTE, node);
  }

  public void insert_$attribute(Attribute prev, Attribute node) {
    this.insertChild(prev, AsBuilderStatement._$ATTRIBUTE, node);
  }

  public static AsBuilderStatement newInstance(SModel sm, boolean init) {
    return (AsBuilderStatement) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.builders.structure.AsBuilderStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AsBuilderStatement newInstance(SModel sm) {
    return AsBuilderStatement.newInstance(sm, false);
  }
}
