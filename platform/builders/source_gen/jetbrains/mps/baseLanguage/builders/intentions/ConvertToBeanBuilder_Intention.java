package jetbrains.mps.baseLanguage.builders.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class ConvertToBeanBuilder_Intention extends BaseIntention {
  public ConvertToBeanBuilder_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.ClassCreator";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Convert To Bean Builder";
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode creator = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.builders.structure.BuilderCreator", null);
    SNode builder = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.builders.structure.BeanBuilder", null);
    SLinkOperations.setTarget(builder, "baseMethodDeclaration", SLinkOperations.getTarget(node, "baseMethodDeclaration", false), false);
    for (SNode arg : SLinkOperations.getTargets(node, "actualArgument", true)) {
      SLinkOperations.addChild(builder, "actualArgument", arg);
    }
    SLinkOperations.setTarget(creator, "builder", builder, true);
    SNodeOperations.replaceWithAnother(node, creator);

    editorContext.select(SLinkOperations.getTarget(creator, "body", true));
  }

  public String getLocationString() {
    return "jetbrains.mps.baseLanguage.builders.intentions";
  }
}
