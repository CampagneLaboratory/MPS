package jetbrains.mps.quickQueryLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.quickQueryLanguage.runtime.Query;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.view.UsagesViewTool;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.ide.findusages.model.holders.NodeHolder;
import jetbrains.mps.ide.findusages.findalgorithm.finders.BaseFinder;
import jetbrains.mps.ide.findusages.view.FindUtils;

public class QueryExecutor {
  public static final String GENERATED_QUERY_NAME = "QueryImpl";

  private String myClassName;
  private ClassLoader myLoader;
  private SNode myModelQuery;
  protected Query myQuery;
  protected IOperationContext myContext;
  protected SearchQuery mySearchQuery;
  protected SearchResults myResult;

  public QueryExecutor(IOperationContext context, Query query) {
    this.myContext = context;
    this.myQuery = query;
  }

  public void setSNode(SNode node) {
    this.myModelQuery = node;
  }

  public void showResults() {
    UsagesViewTool tool = this.myContext.getProject().getComponent(UsagesViewTool.class);
    tool.showResults(this.mySearchQuery, this.myResult);
  }

  public void execute(@NotNull() final ProgressIndicator indicator, final IScope scope) {
    ModelAccess.instance().runReadAction(new Runnable() {

      public void run() {
        try {
          if (SLinkOperations.getTarget(QueryExecutor.this.myModelQuery, "conceptDeclaration", false) != null) {
            QueryExecutor.this.mySearchQuery = new SearchQuery(new NodeHolder(SLinkOperations.getTarget(QueryExecutor.this.myModelQuery, "conceptDeclaration", false)), scope);
          } else {
            QueryExecutor.this.mySearchQuery = new SearchQuery(scope);
          }
          BaseFinder[] finders = new BaseFinder[1];
          finders[0] = new QueryFinder(QueryExecutor.this.myQuery);
          QueryExecutor.this.myResult = FindUtils.getSearchResults(indicator, QueryExecutor.this.mySearchQuery, finders);
        } catch (Throwable t) {
          t.printStackTrace();
        }
      }

    });
  }

}
