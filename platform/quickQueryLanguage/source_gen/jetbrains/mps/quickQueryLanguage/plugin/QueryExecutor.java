package jetbrains.mps.quickQueryLanguage.plugin;

/*Generated by MPS */

import com.intellij.openapi.project.Project;
import jetbrains.mps.quickQueryLanguage.runtime.Query;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.ide.findusages.model.holders.NodeHolder;
import jetbrains.mps.ide.findusages.view.UsagesViewTool;
import jetbrains.mps.ide.findusages.view.FindUtils;

public class QueryExecutor {
  public static final String GENERATED_QUERY_NAME = "QueryImpl";

  public QueryExecutor() {
  }

  public void execute(Project project, Query query, final SNode queryNode, final IScope scope) {
    final Wrappers._T<SearchQuery> searchQuery = new Wrappers._T<SearchQuery>();
    ModelAccess.instance().runReadAction(new Runnable() {

      public void run() {
        if (SLinkOperations.getTarget(queryNode, "conceptDeclaration", false) != null) {
          searchQuery.value = new SearchQuery(new NodeHolder(SLinkOperations.getTarget(queryNode, "conceptDeclaration", false)), scope);
        } else
        {
          searchQuery.value = new SearchQuery(scope);
        }
      }

    });
    UsagesViewTool tool = project.getComponent(UsagesViewTool.class);
    tool.findUsages(FindUtils.makeProvider(new QueryFinder(query)), searchQuery.value, false, false, false, "No usages for that node");
  }

}
