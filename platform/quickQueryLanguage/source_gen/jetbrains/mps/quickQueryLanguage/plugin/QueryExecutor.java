package jetbrains.mps.quickQueryLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.ide.embeddableEditor.GenerateResult;
import jetbrains.mps.ide.embeddableEditor.EditorGenerateType;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.closures.runtime.Wrappers;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.ModelOwner;
import jetbrains.mps.smodel.ProjectModels;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.GeneratorManager;
import java.util.Arrays;
import jetbrains.mps.smodel.SModelRepository;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.ide.findusages.model.holders.NodeHolder;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.ide.findusages.findalgorithm.finders.BaseFinder;
import jetbrains.mps.bootstrap.structureLanguage.findUsages.ConceptInstances_Finder;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.quickQueryLanguage.runtime.Query;
import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResult;
import java.util.Iterator;
import jetbrains.mps.ide.findusages.view.UsagesViewTool;

public class QueryExecutor {

  private final String myClassType = ".Query";
  private String myClassName;
  private ClassLoader myLoader;
  private SNode myModelQuery;
  private IOperationContext myContext;

  public QueryExecutor(GenerateResult generateResult) {
    this.setFields(generateResult);
    this.generateModels();
  }
  public QueryExecutor(GenerateResult generateResult, final EditorGenerateType type) {
    this.setFields(generateResult);
    this.myClassName = generateResult.getModelDescriptor().getLongName() + this.myClassType;
    ModelAccess.instance().runReadAction(new Runnable() {

      public void run() {
        QueryExecutor.this.myLoader = type.getClassLoader(QueryExecutor.this.getClass().getClassLoader());
      }

    });
  }

  private void setFields(GenerateResult result) {
    this.myModelQuery = result.getSNode();
    this.myContext = result.getOperationContext();
  }

  private void generateModels() {
    EditorGenerateType type = new EditorGenerateType();
    final Wrappers._T<SModelDescriptor> model = new Wrappers._T<SModelDescriptor>();
    final ModelOwner owner = new ModelOwner() {
    };
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {

      public void run() {
        model.value = ProjectModels.createDescriptorFor(owner);
        model.value.getSModel().addRoot(SNodeOperations.copyNode(QueryExecutor.this.myModelQuery));
      }

    });
    this.myClassName = model.value.getLongName() + this.myClassType;
    GeneratorManager manager = this.myContext.getComponent(GeneratorManager.class);
    manager.generateModelsWithProgressWindow(Arrays.asList(model.value), this.myContext, type, false);
    SModelRepository.getInstance().unRegisterModelDescriptors(owner);
  }

  public void run(@NotNull() final ProgressIndicator indicator, final IScope scope) {
    ModelAccess.instance().runReadAction(new Runnable() {

      public void run() {
        try {
          SearchQuery searchQuery = new SearchQuery(new NodeHolder(SLinkOperations.getTarget(QueryExecutor.this.myModelQuery, "conceptDeclaration", false)), scope);
          BaseFinder[] finders = new BaseFinder[1];
          finders[0] = new ConceptInstances_Finder();
          SearchResults instances = FindUtils.getSearchResults(indicator, searchQuery, finders);
          Query queryInstance = (Query)Class.forName(QueryExecutor.this.myClassName, true, QueryExecutor.this.myLoader).newInstance();
          List<SearchResult<SNode>> instancesList = instances.getSearchResults();
          Iterator<SearchResult<SNode>> it = instancesList.iterator();
          while (it.hasNext()) {
            SearchResult<SNode> current = it.next();
            if (!(queryInstance.isSatisfies(current.getObject()))) {
              it.remove();
            }
          }
          QueryExecutor.this.myContext.getProject().getComponent(UsagesViewTool.class).showResults(searchQuery, new SearchResults(instances.getSearchedNodes(), instancesList));
        } catch (Throwable t) {
          t.printStackTrace();
        }
      }

    });
  }

}
