package jetbrains.mps.quickQueryLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.dialogs.BaseDialog;
import jetbrains.mps.ide.embeddableEditor.EmbeddableEditor;
import jetbrains.mps.ide.findusages.view.optionseditor.components.ScopeEditor;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.SNode;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.ModelOwner;
import jetbrains.mps.ide.findusages.view.optionseditor.options.ScopeOptions;
import jetbrains.mps.closures.runtime.Wrappers;
import java.util.List;
import java.awt.Dimension;
import javax.swing.JComponent;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.ide.embeddableEditor.GenerationResult;
import jetbrains.mps.quickQueryLanguage.runtime.Query;
import jetbrains.mps.smodel.IScope;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;

public class ReplaceDialog extends BaseDialog {

  private EmbeddableEditor myEditor;
  private ScopeEditor myScope;
  private IOperationContext myContext;
  private SNode myNode;
  private JPanel myPanel = new JPanel(new BorderLayout());

  public ReplaceDialog(final IOperationContext context, final Language language) {
    super(context.getMainFrame(), "Replace");
    this.myContext = context;
    ModelAccess.instance().runWriteAction(new Runnable() {

      public void run() {
        ReplaceDialog.this.myNode = SConceptOperations.createNewNode("jetbrains.mps.quickQueryLanguage.structure.ReplaceModelQuery", null);
        ReplaceDialog.this.myEditor = new EmbeddableEditor(context, new ModelOwner() {
        }, ReplaceDialog.this.myNode);
        ReplaceDialog.this.myScope = new ScopeEditor(new ScopeOptions());
        ReplaceDialog.this.myPanel.add(ReplaceDialog.this.myScope.getComponent(), BorderLayout.SOUTH);
      }

    });
    this.myEditor.addLanguage(language);
    final Wrappers._T<List<Language>> languageList = new Wrappers._T<List<Language>>();
    ModelAccess.instance().runReadAction(new Runnable() {

      public void run() {
        languageList.value = language.getAllExtendedLanguages();
      }

    });
    for(Language extendedLanguage : languageList.value) {
      this.myEditor.addLanguage(extendedLanguage);
    }
    this.myPanel.add(this.myEditor.getComponenet(), BorderLayout.CENTER);
    this.setSize(new Dimension(500, 500));
    this.setModal(false);
  }

  protected JComponent getMainComponent() {
    return this.myPanel;
  }

  public void setConceptDeclaration(final SNode declaration) {
    ModelAccess.instance().runWriteActionInCommand(new Runnable() {

      public void run() {
        SLinkOperations.setTarget(ReplaceDialog.this.myNode, "conceptDeclaration", declaration, false);
      }

    });
  }

  @BaseDialog.Button(position = 0, name = "Replace", defaultButton = true)
  public void buttonReplace() {
    try {
      final GenerationResult result = this.myEditor.generate();
      String fqName = result.getModelDescriptor().getLongName() + "." + QueryConstants.GENERATED_QUERY_NAME;
      ClassLoader loader = result.getLoader(ReplacementExecutor.class.getClassLoader());
      Query query = (Query)Class.forName(fqName, true, loader).newInstance();
      final ReplacementExecutor executor = new ReplacementExecutor(this.myContext, query);
      final IScope scope = this.myScope.getOptions().getScope(this.myContext, result.getModelDescriptor());
      ProgressManager.getInstance().run(new Task.Modal(ReplaceDialog.this.myContext.getProject(), "Executing query", false) {

        public void run(@NotNull() ProgressIndicator indicator) {
          ModelAccess.instance().runReadAction(new Runnable() {

            public void run() {
              executor.setSNode(result.getSNode());
            }

          });
          executor.execute(indicator, scope);
        }

      });
      executor.showResults();
      this.myEditor.disposeEditor();
      this.dispose();
    } catch (Throwable t) {
      t.printStackTrace();
    }
  }

  @BaseDialog.Button(position = 1, name = "Cancel", defaultButton = false)
  public void buttonCancel() {
    this.myEditor.disposeEditor();
    this.dispose();
  }

}
