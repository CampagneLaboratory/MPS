package jetbrains.mps.quickQueryLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.view.UsagesView;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import javax.swing.JButton;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.findusages.model.IResultProvider;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.quickQueryLanguage.runtime.Query;
import jetbrains.mps.ide.findusages.view.treeholder.treeview.ViewOptions;
import java.awt.FlowLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.ModelAccess;
import javax.swing.JOptionPane;
import javax.swing.JComponent;
import java.util.ArrayList;
import jetbrains.mps.ide.findusages.model.SearchResult;

public class ReplacementView {

  private UsagesView myUsagesView;
  private RunReplacement_Tool myTool;
  private JPanel myMainPanel = new JPanel(new BorderLayout());
  private JButton myButton = new JButton("Do replace");

  public ReplacementView(RunReplacement_Tool tool, MPSProject project, IResultProvider provider, SearchQuery searchQuery, final SearchResults results, final Query query) {
    this.myTool = tool;
    this.myUsagesView = new UsagesView(project, new ViewOptions()) {

      public void close() {
        ReplacementView.this.myTool.closeTab(ReplacementView.this);
      }

    };
    JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
    this.myButton.addActionListener(new ActionListener() {

      public void actionPerformed(ActionEvent event) {
        final List<SNode> replaceNodes = ReplacementView.this.getExecuteResult(results);
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {

          public void run() {
            try {
              for(SNode node : replaceNodes) {
                query.doReplace(node);
              }
              JOptionPane.showMessageDialog(null, "Replacement completed successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
            } catch (Throwable t) {
              JOptionPane.showMessageDialog(null, "Replacement failed", "Warning", JOptionPane.ERROR_MESSAGE);
            }
          }

        });
      }

    });
    this.myUsagesView.setRunOptions(provider, searchQuery, new UsagesView.ButtonConfiguration(true, true, true), results);
    buttonPanel.add(this.myButton);
    this.myMainPanel.add(buttonPanel, BorderLayout.SOUTH);
    this.myMainPanel.add(this.myUsagesView.getComponent(), BorderLayout.CENTER);
  }

  public JComponent getComponent() {
    return this.myMainPanel;
  }

  public List<SNode> getExecuteResult(SearchResults searchResults) {
    List<SNode> results = new ArrayList<SNode>();
    List<SearchResult<SNode>> resultsList = searchResults.getSearchResults();
    for(SearchResult<SNode> nodeResult : resultsList) {
      results.add(nodeResult.getObject());
    }
    return results;
  }

}
