package jetbrains.mps.quickQueryLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.StructureDescriptor;
import com.google.common.collect.ImmutableList;
import java.util.Set;
import java.util.List;
import java.util.HashSet;
import jetbrains.mps.smodel.structure.ConceptRegistry;
import java.util.Collections;

public class StructureAspectDescriptor extends DescriptorProvider<StructureDescriptor> {
  public StructureAspectDescriptor() {
  }

  public StructureDescriptor getDescriptor(String conceptFqName) {
    switch ((conceptFqName).hashCode()) {
      case -1790847041:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.quickQueryLanguage.structure.ModelQuery", new String[]{"jetbrains.mps.quickQueryLanguage.structure.BaseQuery"}, new String[]{"jetbrains.mps.quickQueryLanguage.structure.BaseQuery"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 1125686739:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.quickQueryLanguage.structure.QueryCondition", new String[]{"jetbrains.mps.quickQueryLanguage.structure.AbstractQueryFunction"}, new String[]{"jetbrains.mps.quickQueryLanguage.structure.AbstractQueryFunction"}, new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
      case 915201667:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.quickQueryLanguage.structure.Query_node_Parameter", new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"}, new String[]{}, new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"});
      case 1669099603:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.quickQueryLanguage.structure.ReplaceModelQuery", new String[]{"jetbrains.mps.quickQueryLanguage.structure.BaseQuery"}, new String[]{"jetbrains.mps.quickQueryLanguage.structure.BaseQuery"}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case -995053204:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.quickQueryLanguage.structure.QueryReplace", new String[]{"jetbrains.mps.quickQueryLanguage.structure.AbstractQueryFunction"}, new String[]{"jetbrains.mps.quickQueryLanguage.structure.AbstractQueryFunction"}, new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
      case 1509101527:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.quickQueryLanguage.structure.BaseQuery", new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"});
      case 1780609822:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.quickQueryLanguage.structure.AbstractQueryFunction", new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"}, new String[]{}, new String[]{"jetbrains.mps.baseLanguage.structure.ConceptFunction"});
      default:
        return null;
    }
  }

  public static class DataBasedStructureDescriptor extends StructureDescriptor {
    private ImmutableList<String> parents;
    private Set<String> ancestors;

    public DataBasedStructureDescriptor(String fqName, String[] parents, String[] ancestorsInLanguage, String[] ancestorsNotInLanguage) {
      this.parents = ImmutableList.copyOf(parents);
      this.ancestors = getAncestors(fqName, ancestorsInLanguage, ancestorsNotInLanguage);
    }

    public Set<String> getAncestorsNames() {
      return ancestors;
    }

    public boolean isAssignableTo(String toConceptFqName) {
      return ancestors.contains(toConceptFqName);
    }

    public List<String> getParentsNames() {
      return parents;
    }

    private static Set<String> getAncestors(String conceptFqName, String[] ancestorsInLanguage, String[] ancestorsNotInLanguage) {
      Set<String> result = new HashSet(ancestorsInLanguage.length + 1);

      result.add(conceptFqName);
      for (String ancestor : ancestorsInLanguage) {
        result.add(ancestor);
      }

      ConceptRegistry registry = ConceptRegistry.getInstance();
      for (String parent : ancestorsNotInLanguage) {
        if (!(result.contains(parent))) {
          result.addAll(registry.getStructureDescriptor(parent).getAncestorsNames());
        }
      }

      return Collections.unmodifiableSet(result);
    }
  }
}
