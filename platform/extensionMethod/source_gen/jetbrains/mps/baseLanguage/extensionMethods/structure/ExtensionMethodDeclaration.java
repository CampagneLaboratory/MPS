package jetbrains.mps.baseLanguage.extensionMethods.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration;
import jetbrains.mps.baseLanguage.structure.ClassifierMember;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Type;
import jetbrains.mps.baseLanguage.structure.Visibility;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.Attribute;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ExtensionMethodDeclaration extends BaseMethodDeclaration implements ClassifierMember {
  public static final String concept = "jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionMethodDeclaration";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String EXTENDED_TYPE = "extendedType";
  public static final String VISIBILITY = "visibility";
  public static final String _$ATTRIBUTE = "_$attribute";

  public ExtensionMethodDeclaration(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(ExtensionMethodDeclaration.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(ExtensionMethodDeclaration.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(ExtensionMethodDeclaration.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(ExtensionMethodDeclaration.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(ExtensionMethodDeclaration.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(ExtensionMethodDeclaration.VIRTUAL_PACKAGE, value);
  }

  public Type getExtendedType() {
    return (Type) this.getChild(Type.class, ExtensionMethodDeclaration.EXTENDED_TYPE);
  }

  public void setExtendedType(Type node) {
    super.setChild(ExtensionMethodDeclaration.EXTENDED_TYPE, node);
  }

  public Visibility getVisibility() {
    return (Visibility) this.getChild(Visibility.class, ExtensionMethodDeclaration.VISIBILITY);
  }

  public void setVisibility(Visibility node) {
    super.setChild(ExtensionMethodDeclaration.VISIBILITY, node);
  }

  public int get_$attributesCount() {
    return this.getChildCount(ExtensionMethodDeclaration._$ATTRIBUTE);
  }

  public Iterator<Attribute> _$attributes() {
    return this.children(Attribute.class, ExtensionMethodDeclaration._$ATTRIBUTE);
  }

  public List<Attribute> get_$attributes() {
    return this.getChildren(Attribute.class, ExtensionMethodDeclaration._$ATTRIBUTE);
  }

  public void add_$attribute(Attribute node) {
    this.addChild(ExtensionMethodDeclaration._$ATTRIBUTE, node);
  }

  public void insert_$attribute(Attribute prev, Attribute node) {
    this.insertChild(prev, ExtensionMethodDeclaration._$ATTRIBUTE, node);
  }

  public static ExtensionMethodDeclaration newInstance(SModel sm, boolean init) {
    return (ExtensionMethodDeclaration) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionMethodDeclaration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ExtensionMethodDeclaration newInstance(SModel sm) {
    return ExtensionMethodDeclaration.newInstance(sm, false);
  }
}
