package jetbrains.mps.baseLanguage.extensionMethods.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.GenericDeclaration;
import jetbrains.mps.baseLanguage.structure.IValidIdentifier;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Type;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class TypeExtension extends GenericDeclaration implements IValidIdentifier {
  public static final String concept = "jetbrains.mps.baseLanguage.extensionMethods.structure.TypeExtension";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String TYPE = "type";
  public static final String METHODS = "methods";

  public TypeExtension(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(TypeExtension.NAME);
  }

  public void setName(String value) {
    this.setProperty(TypeExtension.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(TypeExtension.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(TypeExtension.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(TypeExtension.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(TypeExtension.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(TypeExtension.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(TypeExtension.VIRTUAL_PACKAGE, value);
  }

  public Type getType() {
    return (Type)this.getChild(Type.class, TypeExtension.TYPE);
  }

  public void setType(Type node) {
    super.setChild(TypeExtension.TYPE, node);
  }

  public int getMethodsesCount() {
    return this.getChildCount(TypeExtension.METHODS);
  }

  public Iterator<ExtensionMethodDeclaration> methodses() {
    return this.children(ExtensionMethodDeclaration.class, TypeExtension.METHODS);
  }

  public List<ExtensionMethodDeclaration> getMethodses() {
    return this.getChildren(ExtensionMethodDeclaration.class, TypeExtension.METHODS);
  }

  public void addMethods(ExtensionMethodDeclaration node) {
    this.addChild(TypeExtension.METHODS, node);
  }

  public void insertMethods(ExtensionMethodDeclaration prev, ExtensionMethodDeclaration node) {
    this.insertChild(prev, TypeExtension.METHODS, node);
  }

  public static TypeExtension newInstance(SModel sm, boolean init) {
    return (TypeExtension)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.extensionMethods.structure.TypeExtension", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static TypeExtension newInstance(SModel sm) {
    return TypeExtension.newInstance(sm, false);
  }
}
