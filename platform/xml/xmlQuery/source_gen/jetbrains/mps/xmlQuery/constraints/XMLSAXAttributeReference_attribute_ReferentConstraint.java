package jetbrains.mps.xmlQuery.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;

public class XMLSAXAttributeReference_attribute_ReferentConstraint extends BaseNodeReferenceSearchScopeProvider implements IModelConstraints {
  public XMLSAXAttributeReference_attribute_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("jetbrains.mps.xmlQuery.structure.XMLSAXAttributeReference", "attribute", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("jetbrains.mps.xmlQuery.structure.XMLSAXAttributeReference", "attribute");
  }

  public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    SNode creator = SNodeOperations.getAncestor(_context.getEnclosingNode(), "jetbrains.mps.xmlQuery.structure.XMLSAXNodeCreator", true, false);
    List<SNode> n = ListSequence.fromList(new ArrayList<SNode>());
    if ((creator != null) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(creator), "jetbrains.mps.xmlQuery.structure.XMLSAXNodeRule")) {
      ListSequence.fromList(n).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(SNodeOperations.getParent(creator), "jetbrains.mps.xmlQuery.structure.XMLSAXNodeRule"), "attrs", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getBoolean(it, "isRequired");
        }
      }));
    }
    return n;
  }

  public SNodePointer getSearchScopeValidatorNodePointer() {
    return new SNodePointer("r:e79b58b4-ea58-4c9d-b43b-c3a260addf6a(jetbrains.mps.xmlQuery.constraints)", "2286463592495228153");
  }
}
