package jetbrains.mps.xmlInternal.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.nodeEditor.cellMenu.DefaultReferenceSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class Comment_Editor extends DefaultNodeEditor {

  /* package */AbstractCellListHandler myListHandler_1174840274050;
  /* package */AbstractCellListHandler myListHandler_1174840274067;

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createAlternation1174840274047(context, node);
  }

  public EditorCell createAlternation1174840274047(EditorContext context, SNode node) {
    boolean alternationCondition = true;
    alternationCondition = Comment_Editor.renderingCondition3245_0(node, context, context.getOperationContext().getScope());
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = this.createCollection1174840274048(context, node);
    } else
    {
      editorCell = this.createCollection1174840274063(context, node);
    }
    setupBasic_Alternation_11748402740471174840274047(editorCell, node, context);
    return editorCell;
  }

  public EditorCell createCollection1174840274048(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_11748402740481174840274048(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1174840274049(context, node, "<!--"));
    editorCell.addEditorCell(this.createRefNodeList1174840274050(context, node));
    editorCell.addEditorCell(this.createConstant1174840274052(context, node, "-->"));
    return editorCell;
  }

  public EditorCell createCollection1174840274063(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_11748402740631174840274063(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1174840274064(context, node, "<!--"));
    editorCell.addEditorCell(this.createCollection1174840274065(context, node));
    editorCell.addEditorCell(this.createConstant1174840274068(context, node, "-->"));
    return editorCell;
  }

  public EditorCell createCollection1174840274065(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_11748402740651174840274065(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1174840274066(context, node, "  "));
    editorCell.addEditorCell(this.createRefNodeList1174840274067(context, node));
    return editorCell;
  }

  public EditorCell createConstant1174840274049(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11748402740491174840274049(editorCell, node, context);
    setupLabel_Constant_1174840274049_1174840274049(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1174840274052(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11748402740521174840274052(editorCell, node, context);
    setupLabel_Constant_1174840274052_1174840274052(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1174840274064(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11748402740641174840274064(editorCell, node, context);
    setupLabel_Constant_1174840274064_1174840274064(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1174840274066(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11748402740661174840274066(editorCell, node, context);
    setupLabel_Constant_1174840274066_1174840274066(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1174840274068(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11748402740681174840274068(editorCell, node, context);
    setupLabel_Constant_1174840274068_1174840274068(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createRefNodeList1174840274050(EditorContext context, SNode node) {
    if (this.myListHandler_1174840274050 == null) {
      this.myListHandler_1174840274050 = new Comment_Editor.textListHandler_3245_0(node, "text", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1174840274050.createCells(context, new CellLayout_Horizontal(), false);
    setupBasic_refNodeList_text1174840274050(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.putUserObject(EditorCell.ROLE, this.myListHandler_1174840274050.getElementRole());
    return editorCell;
  }

  public EditorCell createRefNodeList1174840274067(EditorContext context, SNode node) {
    if (this.myListHandler_1174840274067 == null) {
      this.myListHandler_1174840274067 = new Comment_Editor.textListHandler_3245_1(node, "text", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1174840274067.createCells(context, new CellLayout_Vertical(), false);
    setupBasic_refNodeList_text1174840274067(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.putUserObject(EditorCell.ROLE, this.myListHandler_1174840274067.getElementRole());
    return editorCell;
  }


  private static void setupBasic_Alternation_11748402740471174840274047(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Alternation_1174840274047");
  }

  private static void setupBasic_Collection_11748402740481174840274048(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1174840274048");
  }

  private static void setupBasic_Constant_11748402740491174840274049(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1174840274049");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.FONT_STYLE, MPSFonts.ITALIC);
          this.set(StyleAttributes.TEXT_COLOR, MPSColors.gray);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_refNodeList_text1174840274050(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_text");
  }

  private static void setupBasic_Constant_11748402740521174840274052(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1174840274052");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.FONT_STYLE, MPSFonts.ITALIC);
          this.set(StyleAttributes.TEXT_COLOR, MPSColors.gray);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_11748402740631174840274063(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1174840274063");
  }

  private static void setupBasic_Constant_11748402740641174840274064(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1174840274064");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.FONT_STYLE, MPSFonts.ITALIC);
          this.set(StyleAttributes.TEXT_COLOR, MPSColors.gray);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_11748402740651174840274065(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1174840274065");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Constant_11748402740661174840274066(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1174840274066");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_refNodeList_text1174840274067(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_text");
  }

  private static void setupBasic_Constant_11748402740681174840274068(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1174840274068");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.FONT_STYLE, MPSFonts.ITALIC);
          this.set(StyleAttributes.TEXT_COLOR, MPSColors.gray);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupLabel_Constant_1174840274049_1174840274049(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_text_1174840274050(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1174840274052_1174840274052(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1174840274064_1174840274064(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1174840274066_1174840274066(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_text_1174840274067(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1174840274068_1174840274068(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  public static boolean renderingCondition3245_0(SNode node, EditorContext editorContext, IScope scope) {
    return SLinkOperations.getCount(node, "text") <= 1;
  }

  public static class textListHandler_3245_0 extends RefNodeListHandler {

    public textListHandler_3245_0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = this.createEmptyCell_internal(context, this.getOwner());
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public EditorCell createEmptyCell_internal(EditorContext context, SNode node) {
      return this.createConstant1174840274051(context, node, "");
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      return super.createSeparatorCell(context);
    }

    public EditorCell createConstant1174840274051(EditorContext context, SNode node, String text) {
      EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
      setupBasic_Constant_11748402740511174840274051(editorCell, node, context);
      setupLabel_Constant_1174840274051_1174840274051(editorCell, node, context);
      editorCell.setDefaultText("");
      return editorCell;
    }


    private static void setupBasic_Constant_11748402740511174840274051(EditorCell editorCell, SNode node, EditorContext context) {
      editorCell.setCellId("Constant_1174840274051");
    }

    private static void setupLabel_Constant_1174840274051_1174840274051(EditorCell_Label editorCell, SNode node, EditorContext context) {
    }

}
  public static class textListHandler_3245_1 extends RefNodeListHandler {

    public textListHandler_3245_1(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(context);
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      return super.createSeparatorCell(context);
    }

}

}
