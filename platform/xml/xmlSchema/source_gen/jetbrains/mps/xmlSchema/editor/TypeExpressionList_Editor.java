package jetbrains.mps.xmlSchema.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandlerElementKeyMap;
import jetbrains.mps.nodeEditor.cellMenu.DefaultReferenceSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;

public class TypeExpressionList_Editor extends DefaultNodeEditor {

  /* package */AbstractCellListHandler myListHandler_1167845614863;
  /* package */AbstractCellListHandler myListHandler_1167845738464;

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createAlternation1167845612916(context, node);
  }

  public EditorCell createAlternation1167845612916(EditorContext context, SNode node) {
    boolean alternationCondition = true;
    alternationCondition = TypeExpressionList_Editor.renderingCondition3028_0(node, context, context.getOperationContext().getScope());
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = this.createRefNodeList1167845738464(context, node);
    } else
    {
      editorCell = this.createRefNodeList1167845614863(context, node);
    }
    setupBasic_Alternation_11678456129161167845612916(editorCell, node, context);
    return editorCell;
  }

  public EditorCell createRefNodeList1167845614863(EditorContext context, SNode node) {
    if (this.myListHandler_1167845614863 == null) {
      this.myListHandler_1167845614863 = new TypeExpressionList_Editor.typeExpressionListHandler_3028_0(node, "typeExpression", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1167845614863.createCells(context, new CellLayout_Horizontal(), false);
    setupBasic_refNodeList_typeExpression1167845614863(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.putUserObject(EditorCell.ROLE, this.myListHandler_1167845614863.getElementRole());
    return editorCell;
  }

  public EditorCell createRefNodeList1167845738464(EditorContext context, SNode node) {
    if (this.myListHandler_1167845738464 == null) {
      this.myListHandler_1167845738464 = new TypeExpressionList_Editor.typeExpressionListHandler_3028_1(node, "typeExpression", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1167845738464.createCells(context, new CellLayout_Vertical(), false);
    setupBasic_refNodeList_typeExpression1167845738464(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.putUserObject(EditorCell.ROLE, this.myListHandler_1167845738464.getElementRole());
    return editorCell;
  }


  private static void setupBasic_Alternation_11678456129161167845612916(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Alternation_1167845612916");
  }

  private static void setupBasic_refNodeList_typeExpression1167845614863(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_typeExpression");
  }

  private static void setupBasic_refNodeList_typeExpression1167845738464(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_typeExpression");
  }

  private static void setupLabel_refNodeList_typeExpression_1167845614863(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_typeExpression_1167845738464(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  public static boolean renderingCondition3028_0(SNode node, EditorContext editorContext, IScope scope) {
    return SPropertyOperations.getBoolean(node, "isVertical");
  }

  public static class typeExpressionListHandler_3028_0 extends RefNodeListHandler {

    public typeExpressionListHandler_3028_0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = this.createEmptyCell_internal(context, this.getOwner());
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public EditorCell createEmptyCell_internal(EditorContext context, SNode node) {
      return this.createConstant1167845614864(context, node, "");
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
          elementCell.addKeyMap(new RefNodeListHandlerElementKeyMap(this, ","));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      {
        EditorCell_Constant editorCell = new EditorCell_Constant(context, this.getOwner(), ",");
        editorCell.setSelectable(false);
        return editorCell;
      }
    }

    public EditorCell createConstant1167845614864(EditorContext context, SNode node, String text) {
      EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
      setupBasic_Constant_11678456148641167845614864(editorCell, node, context);
      setupLabel_Constant_1167845614864_1167845614864(editorCell, node, context);
      editorCell.setDefaultText("");
      return editorCell;
    }


    private static void setupBasic_Constant_11678456148641167845614864(EditorCell editorCell, SNode node, EditorContext context) {
      editorCell.setCellId("Constant_1167845614864");
      {
        Style inlineStyle = new Style(editorCell) {
          {
            this.set(StyleAttributes.EDITABLE, true);
          }

        };
        inlineStyle.apply(editorCell);
      }
    }

    private static void setupLabel_Constant_1167845614864_1167845614864(EditorCell_Label editorCell, SNode node, EditorContext context) {
    }

}
  public static class typeExpressionListHandler_3028_1 extends RefNodeListHandler {

    public typeExpressionListHandler_3028_1(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = this.createEmptyCell_internal(context, this.getOwner());
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public EditorCell createEmptyCell_internal(EditorContext context, SNode node) {
      return this.createConstant1167845741762(context, node, "");
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      return super.createSeparatorCell(context);
    }

    public EditorCell createConstant1167845741762(EditorContext context, SNode node, String text) {
      EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
      setupBasic_Constant_11678457417621167845741762(editorCell, node, context);
      setupLabel_Constant_1167845741762_1167845741762(editorCell, node, context);
      editorCell.setDefaultText("");
      return editorCell;
    }


    private static void setupBasic_Constant_11678457417621167845741762(EditorCell editorCell, SNode node, EditorContext context) {
      editorCell.setCellId("Constant_1167845741762");
      {
        Style inlineStyle = new Style(editorCell) {
          {
            this.set(StyleAttributes.EDITABLE, true);
          }

        };
        inlineStyle.apply(editorCell);
      }
    }

    private static void setupLabel_Constant_1167845741762_1167845741762(EditorCell_Label editorCell, SNode node, EditorContext context) {
    }

}

}
