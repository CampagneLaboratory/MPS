package jetbrains.mps.uiLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.core.structure.BaseConcept;
import jetbrains.mps.baseLanguage.classifiers.structure.IClassifier;
import jetbrains.mps.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.baseLanguage.classifiers.structure.DefaultClassifierMethodDeclaration;
import jetbrains.mps.baseLanguage.structure.ConstructorDeclaration;

public class BeanDeclaration extends BaseConcept implements IClassifier, INamedConcept {
  public static final String concept = "jetbrains.mps.uiLanguage.structure.BeanDeclaration";
  public static String NAME = "name";
  public static String SHORT_DESCRIPTION = "shortDescription";
  public static String ALIAS = "alias";
  public static String VIRTUAL_PACKAGE = "virtualPackage";
  public static String ATTRIBUTE = "attribute";
  public static String METHOD = "method";
  public static String CONSTRUCTOR = "constructor";

  public BeanDeclaration(SNode node) {
    super(node);
  }

  public static BeanDeclaration newInstance(SModel sm, boolean init) {
    return (BeanDeclaration)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.uiLanguage.structure.BeanDeclaration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static BeanDeclaration newInstance(SModel sm) {
    return BeanDeclaration.newInstance(sm, false);
  }


  public String getName() {
    return this.getProperty(BeanDeclaration.NAME);
  }

  public void setName(String value) {
    this.setProperty(BeanDeclaration.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(BeanDeclaration.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(BeanDeclaration.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(BeanDeclaration.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(BeanDeclaration.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(BeanDeclaration.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(BeanDeclaration.VIRTUAL_PACKAGE, value);
  }

  public int getAttributesCount() {
    return this.getChildCount(BeanDeclaration.ATTRIBUTE);
  }

  public Iterator<AttributeDeclaration> attributes() {
    return this.children(BeanDeclaration.ATTRIBUTE);
  }

  public List<AttributeDeclaration> getAttributes() {
    return this.getChildren(BeanDeclaration.ATTRIBUTE);
  }

  public void addAttribute(AttributeDeclaration node) {
    this.addChild(BeanDeclaration.ATTRIBUTE, node);
  }

  public void insertAttribute(AttributeDeclaration prev, AttributeDeclaration node) {
    this.insertChild(prev, BeanDeclaration.ATTRIBUTE, node);
  }

  public int getMethodsCount() {
    return this.getChildCount(BeanDeclaration.METHOD);
  }

  public Iterator<DefaultClassifierMethodDeclaration> methods() {
    return this.children(BeanDeclaration.METHOD);
  }

  public List<DefaultClassifierMethodDeclaration> getMethods() {
    return this.getChildren(BeanDeclaration.METHOD);
  }

  public void addMethod(DefaultClassifierMethodDeclaration node) {
    this.addChild(BeanDeclaration.METHOD, node);
  }

  public void insertMethod(DefaultClassifierMethodDeclaration prev, DefaultClassifierMethodDeclaration node) {
    this.insertChild(prev, BeanDeclaration.METHOD, node);
  }

  public int getConstructorsCount() {
    return this.getChildCount(BeanDeclaration.CONSTRUCTOR);
  }

  public Iterator<ConstructorDeclaration> constructors() {
    return this.children(BeanDeclaration.CONSTRUCTOR);
  }

  public List<ConstructorDeclaration> getConstructors() {
    return this.getChildren(BeanDeclaration.CONSTRUCTOR);
  }

  public void addConstructor(ConstructorDeclaration node) {
    this.addChild(BeanDeclaration.CONSTRUCTOR, node);
  }

  public void insertConstructor(ConstructorDeclaration prev, ConstructorDeclaration node) {
    this.insertChild(prev, BeanDeclaration.CONSTRUCTOR, node);
  }

}
