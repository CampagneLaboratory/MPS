package jetbrains.mps.uiLanguage.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_GenericNewExpression_InferenceRule implements InferenceRule_Runtime {

  public typeof_GenericNewExpression_InferenceRule() {
  }

  public void applyRule(final SNode expression) {
    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(expression, "jetbrains.mps.uiLanguage.helgins", "1207754534577", true), TypeChecker.getInstance().getRuntimeSupport().typeOf(SNodeOperations.getAncestor(SLinkOperations.getTarget(SLinkOperations.getTarget(expression, "creator", true), "constructor", false), "jetbrains.mps.uiLanguage.structure.BeanDeclaration", false, false), "jetbrains.mps.uiLanguage.helgins", "1207754534568", true), expression, null, "jetbrains.mps.uiLanguage.helgins", "1207754534566");
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.baseLanguage.structure.GenericNewExpression";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return true;
  }

}
