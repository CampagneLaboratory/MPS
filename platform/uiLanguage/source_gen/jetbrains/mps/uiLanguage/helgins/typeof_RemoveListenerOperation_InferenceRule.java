package jetbrains.mps.uiLanguage.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.SNode;

public class typeof_RemoveListenerOperation_InferenceRule implements InferenceRule_Runtime {

  public typeof_RemoveListenerOperation_InferenceRule() {
  }

  public void applyRule(final SNode operation) {
    SNode eventNode = SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(operation, "leftExpression", true), "operation", true), "member", false);
    SNode methodNode = SLinkOperations.getTarget(SLinkOperations.getTarget(operation, "rightExpression", true), "handler", false);
    if (SLinkOperations.getCount(methodNode, "parameter") != 1) {
      {
        BaseIntentionProvider intentionProvider = null;
        TypeChecker.getInstance().reportTypeError(methodNode, "handler must have 1 parameter", "jetbrains.mps.uiLanguage.helgins@24_0", "1216903410899", intentionProvider);
      }
    }
    {
      SNode _nodeToCheck_1029348928467 = SNodeOperations.getAncestor(operation, "jetbrains.mps.baseLanguage.structure.Statement", false, false);
      BaseIntentionProvider intentionProvider = null;
      TypeChecker.getInstance().getRuntimeSupport().createLessThanInequationStrong(SLinkOperations.getTarget(SLinkOperations.getTarget(eventNode, "parameter", true), "type", true), TypeChecker.getInstance().getRuntimeSupport().typeOf(ListSequence.fromList(SLinkOperations.getTargets(methodNode, "parameter", true)).first(), "jetbrains.mps.uiLanguage.helgins", "1208689441026", true), _nodeToCheck_1029348928467, "parameter types do not match", "jetbrains.mps.uiLanguage.helgins", "1208689441024", true, 0, intentionProvider);
    }
    {
      SNode _nodeToCheck_1029348928467 = SNodeOperations.getAncestor(operation, "jetbrains.mps.baseLanguage.structure.Statement", false, false);
      BaseIntentionProvider intentionProvider = null;
      TypeChecker.getInstance().getRuntimeSupport().createEquation(SLinkOperations.getTarget(methodNode, "returnType", true), new QuotationClass_6().createNode(), _nodeToCheck_1029348928467, "handler return type must be void", "jetbrains.mps.uiLanguage.helgins", "1208689441044", intentionProvider);
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.uiLanguage.structure.RemoveListenerOperation";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
