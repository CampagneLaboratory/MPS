package jetbrains.mps.uiLanguage.generator.baseLanguage.template.util;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.LanguageID;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class Util {
  public Util() {
  }

  public static SNode getClassByName(IModule module, String fqName, SModel last) {
    int lastDot = fqName.lastIndexOf(".");

    String model = fqName.substring(0, lastDot);
    String stereo = SModelStereotype.getStubStereotypeForId(LanguageID.JAVA);
    final String className = fqName.substring(lastDot + 1);

    if (lastDot >= 0) {
      for (SModelDescriptor m : module.getScope().getModelDescriptors()) {
        if (m.getLongName().equals(model)) {
          SNode cls = ListSequence.fromList(SModelOperations.getRoots(((SModel) m.getSModel()), "jetbrains.mps.baseLanguage.structure.ClassConcept")).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return eq_sd8x_a0a0a0a0a0a0a0a0a0g0a(SPropertyOperations.getString(it, "name"), className);
            }
          }).first();
          if ((cls != null)) {
            return cls;
          }
        }
      }
    }

    return ListSequence.fromList(SModelOperations.getRoots(last, "jetbrains.mps.baseLanguage.structure.ClassConcept")).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return eq_sd8x_a0a0a0a0a0a8a0(SPropertyOperations.getString(it, "name"), className);
      }
    }).first();
  }

  private static boolean eq_sd8x_a0a0a0a0a0a0a0a0a0g0a(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_sd8x_a0a0a0a0a0a8a0(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
