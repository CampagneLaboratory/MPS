package jetbrains.mps.uiLanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.projectplugins.BaseProjectPlugin;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.workbench.editors.MPSEditorOpenHandler;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.ide.IEditor;
import java.util.List;
import jetbrains.mps.plugins.pluginparts.tool.GeneratedTool;
import com.intellij.openapi.project.Project;
import java.util.ArrayList;
import jetbrains.mps.plugins.pluginparts.custom.BaseCustomProjectPlugin;

public class UiLanguage_ProjectPlugin extends BaseProjectPlugin {

  public void initEditors(MPSProject project) {
    this.addEditorOpenHandler(new MPSEditorOpenHandler() {

      public SNode getBaseNode(IOperationContext context, SNode node) {
        if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.uiLanguage.structure.ComponentController")) {
          return SLinkOperations.getTarget(node, "component", false);
        }
        return null;
      }

      public boolean canOpen(IOperationContext context, SNode node) {
        return node.isInstanceOfConcept("jetbrains.mps.uiLanguage.structure.ComponentDeclaration");
      }

      public IEditor open(IOperationContext context, SNode node) {
        return new ComponentEditor_TabbedEditor(context, node);
      }

    });
  }

  public List<GeneratedTool> initTools(Project project) {
    List<GeneratedTool> tools = new ArrayList<GeneratedTool>();
    return tools;
  }

  public List<BaseCustomProjectPlugin> initCustomParts(MPSProject project) {
    List<BaseCustomProjectPlugin> res = new ArrayList<BaseCustomProjectPlugin>();
    return res;
  }

  public void init(MPSProject project) {
    super.init(project);
  }

  public void dispose() {
    super.dispose();
  }

}
