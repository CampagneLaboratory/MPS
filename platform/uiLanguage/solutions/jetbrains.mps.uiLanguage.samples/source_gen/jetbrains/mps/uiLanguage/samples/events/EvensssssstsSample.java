package jetbrains.mps.uiLanguage.samples.events;

/*Generated by MPS */

import jetbrains.mps.uiLanguage.runtime.events.Event;
import jetbrains.mps.uiLanguage.runtime.events.Events;
import jetbrains.mps.uiLanguage.runtime.events.IListener;
import jetbrains.mps.uiLanguage.runtime.events.ListenerId;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.Property;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class EvensssssstsSample extends JDialog {

  public EvensssssstsSample myThis;
  private JLabel myComponent0;
  private JButton myBtn0;
  private Integer myMyCount;
  public List<AutoBinding> myBindings = new ArrayList<AutoBinding>();
  private Events myEvents = new Events(null) {
    {
      this.addEvent(new Event("onAction"));
    }


    public void initialize() {
      myThis.myBtn0.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
          myEvents.getEvent("onAction").raise(e);
        }

      });
    }

  };

  public EvensssssstsSample() {
    this.myThis = this;
    EvensssssstsSample component = this;
    component.setLayout(new FlowLayout());
    component.add(this.createComponent0());
    component.add(this.createComponent1());
    this.myEvents.initialize();
    myThis.getEvents().getEvent("onAction").addListener(new IListener() {

      public void invoke(Object o) {
        if (!(o instanceof ActionEvent)) {
          throw new IllegalArgumentException();
        }
        myThis.pressHandler((ActionEvent) o);
      }

    }, new ListenerId(this, "pressHandler"));
    myThis.setMyCount(new Integer(0));
  }

  public Events getEvents() {
    return this.myEvents;
  }

  public void addNotify() {
    super.addNotify();
    this.bind();
  }

  public void removeNotify() {
    this.unbind();
    super.removeNotify();
  }

  private void bind() {
    {
      Object sourceObject = myThis;
      Property sourceProperty = BeanProperty.create("myCount");
      Object targetObject = this.myComponent0;
      Property targetProperty = BeanProperty.create("text");
      AutoBinding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, sourceObject, sourceProperty, targetObject, targetProperty);
      binding.bind();
      this.myBindings.add(binding);
    }
  }

  private void unbind() {
    for (AutoBinding binding : this.myBindings) {
      if (binding.isBound()) {
        binding.unbind();
      }
    }
  }

  private JLabel createComponent0() {
    JLabel component = new JLabel();
    this.myComponent0 = component;
    return component;
  }

  private JButton createComponent1() {
    JButton component = new JButton();
    this.myBtn0 = component;
    component.setText("click me");
    return component;
  }

  public Integer getMyCount() {
    return this.myMyCount;
  }

  public void setMyCount(Integer newValue) {
    Integer oldValue = this.myMyCount;
    this.myMyCount = newValue;
    this.firePropertyChange("myCount", oldValue, newValue);
  }

  /* package */void pressHandler(ActionEvent event) {
    myThis.setMyCount(myThis.getMyCount() + 1);
  }

}
