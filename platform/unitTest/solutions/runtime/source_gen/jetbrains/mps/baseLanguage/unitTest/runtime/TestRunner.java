package jetbrains.mps.baseLanguage.unitTest.runtime;

/*Generated by MPS */

import junit.runner.BaseTestRunner;
import java.util.List;
import junit.framework.Test;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import junit.framework.TestResult;
import junit.framework.TestCase;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import org.junit.Ignore;
import java.io.PrintStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import junit.framework.TestSuite;
import java.io.File;
import java.io.LineNumberReader;
import java.io.FileReader;
import org.apache.commons.lang.StringUtils;

public class TestRunner extends BaseTestRunner {
  public TestRunner() {
  }

  public void start(String[] argv) throws Throwable {
    List<Test> tests = ListSequence.fromList(new ArrayList<Test>());
    this.loadTests(argv, tests);
    TestResult testResult = new TestResult() {
      protected void run(TestCase test) {
        try {
          Method method = test.getClass().getMethod(test.getName());
          boolean isAbstractClass = Modifier.isAbstract(method.getDeclaringClass().getModifiers());
          boolean isIgnored = method.getAnnotation(Ignore.class) != null;
          if (isAbstractClass || isIgnored) {
            return;
          }
        } catch (NoSuchMethodException e) {
          e.printStackTrace();
          return;
        }
        super.run(test);
      }
    };
    CommandOutputStream out = new CommandOutputStream(System.out);
    CommandOutputStream err = new CommandOutputStream(System.err);
    System.setOut(new PrintStream(out));
    System.setErr(new PrintStream(err));
    testResult.addListener(new MyTestListener(out, err));
    for (Test test : ListSequence.fromList(tests)) {
      if (test == null) {
        System.err.println("Can't run. Test is Null");
        continue;
      }
      if (test.countTestCases() == 0) {
        System.err.println("No tests found in " + test.getClass().getName());
        continue;
      }
      test.run(testResult);
    }
  }

  private void loadTests(String[] argv, List<Test> tests) throws ClassNotFoundException, FileNotFoundException, IOException {
    for (int i = 0; i < argv.length; i++) {
      if ("-c".equals(argv[i])) {
        i++;
        Test test = this.getTest(argv[i]);
        ListSequence.fromList(tests).addElement(test);
      } else if ("-m".equals(argv[i])) {
        i++;
        String s = argv[i];
        int index = s.lastIndexOf('.');
        String testCase = s.substring(0, index);
        String method = s.substring(index + 1);
        Class<? extends TestCase> testClass = (Class<? extends TestCase>) this.loadSuiteClass(testCase);
        Test test = TestSuite.createTest(testClass, method);
        ListSequence.fromList(tests).addElement(test);
      } else if ("-f".equals(argv[i])) {
        i++;
        String filename = argv[i];
        new File(filename).deleteOnExit();
        LineNumberReader reader = new LineNumberReader(new FileReader(filename));
        List<String> fileContents = ListSequence.fromList(new ArrayList<String>());
        while (true) {
          String line = reader.readLine();
          if (line == null) {
            break;
          }
          if (StringUtils.isEmpty(line)) {
            continue;
          }
          ListSequence.fromList(fileContents).addElement(line);
        }
        loadTests(ListSequence.fromList(fileContents).toGenericArray(String.class), tests);
      }
    }
  }

  public void testFailed(int status, Test test, Throwable t) {
  }

  public void testStarted(String testName) {
  }

  public void testEnded(String testName) {
  }

  public void runFailed(String message) {
  }

  public static void main(String[] argv) {
    TestRunner runner = new TestRunner();
    try {
      runner.start(argv);
    } catch (Throwable t) {
      t.printStackTrace(System.err);
      System.exit(1);
    }
  }
}
