package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.core.constraints.INamedConcept_Behavior;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.MapOperations;

public class TestNameMap <C, M> {

  private Map<String, C> classToTestCase;
  private Map<String, Map<String, M>> classToMethodToMethodTest;

  public TestNameMap() {
    this.classToTestCase = new HashMap<String, C>();
    this.classToMethodToMethodTest = new HashMap<String, Map<String, M>>();
  }

  public void put(SNode testCaseNode, C testCase) {
    this.classToTestCase.put(INamedConcept_Behavior.call_getFqName_1184686272576(testCaseNode), testCase);
  }

  public C get(String testCaseName) {
    return this.classToTestCase.get(testCaseName);
  }

  public void put(SNode testCaseNode, SNode testMethodNode, M testMethod) {
    String testCaseName = INamedConcept_Behavior.call_getFqName_1184686272576(testCaseNode);
    Map<String, M> testMethods = this.classToMethodToMethodTest.get(testCaseName);
    if (testMethods == null) {
      testMethods = new HashMap<String, M>();
      this.classToMethodToMethodTest.put(testCaseName, testMethods);
    }
    testMethods.put(SPropertyOperations.getString(testMethodNode, "name"), testMethod);
  }

  public M get(String testCaseName, String testMethodName) {
    M testMethod = null;
    Map<String, M> testMethods = this.classToMethodToMethodTest.get(testCaseName);
    if (testMethods != null) {
      testMethod = testMethods.get(testMethodName);
    }
    return testMethod;
  }

  public void clear() {
    MapOperations.clear(this.classToTestCase);
    MapOperations.clear(this.classToMethodToMethodTest);
  }

}
