package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import javax.swing.JPanel;
import javax.swing.JList;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import java.util.ArrayList;
import java.awt.event.ActionListener;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestCase_Behavior;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestMethod_Behavior;
import jetbrains.mps.lang.core.behavior.BaseConcept_Behavior;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.findUsages.FindUsagesManager;
import jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.project.GlobalScope;
import com.intellij.openapi.progress.EmptyProgressIndicator;
import java.awt.BorderLayout;
import com.intellij.openapi.actionSystem.AnAction;
import jetbrains.mps.workbench.dialogs.project.components.parts.actions.ListAddAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.workbench.dialogs.choosers.CommonChoosers;
import jetbrains.mps.workbench.dialogs.project.components.parts.actions.ListRemoveAction;
import javax.swing.border.TitledBorder;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import jetbrains.mps.workbench.action.ActionUtils;
import com.intellij.openapi.actionSystem.ActionToolbar;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import javax.swing.JScrollPane;
import javax.swing.JLabel;
import javax.swing.AbstractListModel;

public class ListPanel extends JPanel {
  private JList myList;
  private List<SNode> myValues = new ArrayList<SNode>();
  private List<SNode> myCandidates;
  private boolean myIsTestMethods;
  private ActionListener myListener;
  private ListPanel.MyAbstractListModel myListModel;

  public ListPanel() {
  }

  private String getPresentation(final SNode value) {
    final StringBuilder sb = new StringBuilder();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        if (SNodeOperations.isInstanceOf(value, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase")) {
          sb.append(ITestCase_Behavior.call_getClassName_1216136193905(SNodeOperations.cast(value, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase")));
        } else if (SNodeOperations.isInstanceOf(value, "jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod")) {
          SNode testCase = ITestMethod_Behavior.call_getTestCase_1216134500045(SNodeOperations.cast(value, "jetbrains.mps.baseLanguage.unitTest.structure.ITestMethod"));
          sb.append(ITestCase_Behavior.call_getClassName_1216136193905(testCase) + '.' + BaseConcept_Behavior.call_getPresentation_1213877396640(value));
        }
      }
    });
    return sb.toString();
  }

  private void collectCandidates() {
    final Wrappers._T<List<SNode>> nodesList = new Wrappers._T<List<SNode>>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        nodesList.value = ListSequence.fromListWithValues(new ArrayList<SNode>(), FindUsagesManager.getInstance().findInstances(((AbstractConceptDeclaration) SNodeOperations.getAdapter(SConceptOperations.findConceptDeclaration("jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"))), GlobalScope.getInstance(), new FindUsagesManager.ProgressAdapter(new EmptyProgressIndicator()), false));
      }
    });
    if (this.myIsTestMethods) {
      final List<SNode> methodsList = new ArrayList<SNode>();
      for (final SNode testCase : nodesList.value) {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            ListSequence.fromList(methodsList).addSequence(ListSequence.fromList(ITestCase_Behavior.call_getTestMethods_2148145109766218395(SNodeOperations.cast(testCase, "jetbrains.mps.baseLanguage.unitTest.structure.ITestCase"))));
          }
        });
      }
      this.myCandidates = methodsList;
    } else {
      this.myCandidates = nodesList.value;
    }
  }

  public void addItem(SNode item) {
    ListSequence.fromList(this.myValues).addElement(item);
    this.myList.updateUI();
  }

  public void addActionListener(ActionListener listener) {
    this.myListener = listener;
  }

  public Object getItems() {
    return this.myValues;
  }

  public void clear() {
    ListSequence.fromList(this.myValues).removeSequence(ListSequence.fromList(this.myValues));
    this.myList.updateUI();
  }

  public void init(List<SNode> nodes, final boolean isTestMethods) {
    this.myIsTestMethods = isTestMethods;
    this.setLayout(new BorderLayout());
    this.myValues = nodes;
    this.myListModel = new ListPanel.MyAbstractListModel();
    this.myList = new JList(this.myListModel);
    AnAction add = new ListAddAction(this.myList) {
      protected int doAdd(AnActionEvent p0) {
        if (ListPanel.this.myCandidates == null) {
          ListPanel.this.collectCandidates();
        }
        ListSequence.fromList(ListPanel.this.myCandidates).removeSequence(ListSequence.fromList(ListPanel.this.myValues));
        final SNode resultNode = (SNode) CommonChoosers.showDialogNodeChooser(ListPanel.this, ListPanel.this.myCandidates);
        if (resultNode == null) {
          return -1;
        }
        ListSequence.fromList(ListPanel.this.myValues).addElement(resultNode);
        if (ListPanel.this.myListener != null) {
          ListPanel.this.myListener.actionPerformed(null);
        }
        ListPanel.this.myList.updateUI();
        ListPanel.this.myListModel.fireSomethingChanged();
        return ListSequence.fromList(ListPanel.this.myValues).indexOf(resultNode);
      }
    };
    AnAction remove = new ListRemoveAction(this.myList) {
      protected void doRemove(AnActionEvent p0) {
        for (Object value : ListPanel.this.myList.getSelectedValues()) {
          for (SNode node : ListPanel.this.myValues) {
            if (ListPanel.this.getPresentation(node).equals(value)) {
              ListSequence.fromList(ListPanel.this.myValues).removeElement(node);
              break;
            }
          }
        }
        if (ListPanel.this.myListener != null) {
          ListPanel.this.myListener.actionPerformed(null);
        }
        ListPanel.this.myList.updateUI();
        ListPanel.this.myListModel.fireSomethingChanged();
      }
    };

    this.setBorder(new TitledBorder("Test"));

    DefaultActionGroup group = ActionUtils.groupFromActions(add, remove);
    ActionToolbar toolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, group, false);
    this.add(toolbar.getComponent(), BorderLayout.WEST);

    JScrollPane comp = new JScrollPane(this.myList);
    comp.doLayout();
    this.add(comp, BorderLayout.CENTER);

    this.add(new JLabel((this.myIsTestMethods ?
      "Methods" :
      "Classes"
    )), BorderLayout.PAGE_START);
    this.myList.updateUI();
  }

  private class MyAbstractListModel extends AbstractListModel {
    public MyAbstractListModel() {
    }

    public Object getElementAt(int p0) {
      return ListPanel.this.getPresentation(ListSequence.fromList(ListPanel.this.myValues).getElement(p0));
    }

    public int getSize() {
      return ListSequence.fromList(ListPanel.this.myValues).count();
    }

    public void fireSomethingChanged() {
      fireContentsChanged(this, 0, ListSequence.fromList(myValues).count());
    }
  }
}
