package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.ui.MPSTreeNode;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.ide.command.CommandProcessor;
import jetbrains.mps.closures.runtime.Wrappers;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.constraints.INamedConcept_Behavior;
import jetbrains.mps.workbench.editors.MPSEditorOpener;

public class TestMethodTreeNode extends MPSTreeNode {

  protected SNode testMethod;
  private TestState state = TestState.NOT_RAN;

  public TestMethodTreeNode(IOperationContext operationContext, SNode testMethod) {
    super(operationContext);
    this.testMethod = testMethod;
    this.updatePresentation();
  }

  public void updatePresentation() {
    this.setIcon(this.state.getIcon());
    this.setNodeIdentifier(this.testMethod.getId());
    this.setText(SPropertyOperations.getString(this.testMethod, "name"));
  }

  public TestState getState() {
    return this.state;
  }

  public void setState(TestState state) {
    this.state = state;
    CommandProcessor.instance().executeLightweightCommandInEDT(new Runnable() {

      public void run() {
        TestMethodTreeNode.this.updatePresentation();
        TestMethodTreeNode.this.updateNodePresentationInTree();
      }

    });
  }

  public String getClassName() {
    final Wrappers._T<String> className = new Wrappers._T<String>(null);
    CommandProcessor.instance().executeLightweightCommand(new Runnable() {

      public void run() {
        SNode classConcept = SNodeOperations.getAncestor(TestMethodTreeNode.this.testMethod, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
        if (classConcept != null) {
          className.value = INamedConcept_Behavior.call_getFqName_1184686272576(classConcept);
        }
      }

    });
    return className.value;
  }

  public String getMethodName() {
    final Wrappers._T<String> methodName = new Wrappers._T<String>(null);
    CommandProcessor.instance().executeLightweightCommand(new Runnable() {

      public void run() {
        methodName.value = SPropertyOperations.getString(TestMethodTreeNode.this.testMethod, "name");
      }

    });
    return methodName.value;
  }

  public boolean isLeaf() {
    return true;
  }

  public void doubleClick() {
    this.getOperationContext().getComponent(MPSEditorOpener.class).openNode(this.testMethod);
  }

}
