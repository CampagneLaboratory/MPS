package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.ui.MPSTreeNode;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.ide.command.CommandProcessor;
import jetbrains.mps.util.Calculable;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.constraints.INamedConcept_Behavior;
import jetbrains.mps.ide.IDEProjectFrame;
import jetbrains.mps.ide.AbstractProjectFrame;

public class TestMethodTreeNode extends MPSTreeNode {

  private SNode testMethod;
  private TestState state = TestState.NOT_RAN;
  private PresentationUpdater updater;

  public  TestMethodTreeNode(IOperationContext operationContext, SNode testMethod) {
    super(operationContext);
    this.testMethod = testMethod;
    this.updater = new PresentationUpdater(this);
    this.updatePresentation();
  }

  public void updatePresentation() {
    this.setIcon(this.state.getIcon());
    this.setNodeIdentifier(this.testMethod.getId());
    this.setText(SPropertyOperations.getString(this.testMethod, "name"));
  }

  public TestState getState() {
    return this.state;
  }

  public void setState(TestState state) {
    this.state = state;
    this.updater.start();
  }

  public String getClassName() {
    return CommandProcessor.instance().executeLightweightCommand(new Calculable <String>() {

      public String calculate() {
        SNode classConcept = SNodeOperations.getAncestor(TestMethodTreeNode.this.testMethod, "jetbrains.mps.baseLanguage.structure.ClassConcept", false, false);
        String className = null;
        if (classConcept != null) {
          className = INamedConcept_Behavior.call_getFqName_1184686272576(classConcept);
        }
        return className;
      }

    });
  }

  public String getMethodName() {
    return CommandProcessor.instance().executeLightweightCommand(new Calculable <String>() {

      public String calculate() {
        return SPropertyOperations.getString(TestMethodTreeNode.this.testMethod, "name");
      }

    });
  }

  public boolean isLeaf() {
    return true;
  }

  public void doubleClick() {
    IDEProjectFrame ide = (IDEProjectFrame)this.getOperationContext().getComponent(AbstractProjectFrame.class);
    ide.openNode(this.testMethod, this.getOperationContext());
  }

}
