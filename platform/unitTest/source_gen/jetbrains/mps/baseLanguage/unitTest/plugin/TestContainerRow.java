package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;

public abstract class TestContainerRow implements TestStatisticsRow {

  private String text;
  private String additionalText;
  private List<TestStatisticsRow> rows = ListOperations.<TestStatisticsRow>createList();

  public  TestContainerRow(String text, String additionalText) {
    this.text = text;
    this.additionalText = additionalText;
  }

  public String getText() {
    return this.text;
  }

  public String getAdditionalText() {
    return this.additionalText;
  }

  public long getElapsedTime() {
    long elapsedTime = 0;
    {
      ICursor<TestStatisticsRow> _zCursor11 = CursorFactory.createCursor(this.rows);
      try {
        while(_zCursor11.moveToNext()) {
          TestStatisticsRow row = _zCursor11.getCurrent();
          {
            long methodTime = row.getElapsedTime();
            if (methodTime >= 0) {
              elapsedTime = elapsedTime + methodTime;
            }
          }
        }
      } finally {
        _zCursor11.release();
      }
    }
    return elapsedTime;
  }

  public long getUsageBefore() {
    long usageBefore = -1;
    TestStatisticsRow row = SequenceOperations.getFirst(this.rows);
    if (row != null) {
      long methodUsageBefore = row.getUsageBefore();
      if (methodUsageBefore >= 0) {
        usageBefore = methodUsageBefore;
      }
    }
    return usageBefore;
  }

  public long getUsageAfter() {
    long usageAfter = -1;
    TestStatisticsRow row = SequenceOperations.getLast(this.rows);
    if (row != null) {
      long methodUsageAfter = row.getUsageAfter();
      if (methodUsageAfter >= 0) {
        usageAfter = methodUsageAfter;
      }
    }
    return usageAfter;
  }

  public long getUsageDelta() {
    long usageBefore = this.getUsageBefore();
    long usageAfter = this.getUsageAfter();
    long usageDelta = -1;
    if (usageAfter >= 0 && usageBefore >= 0) {
      usageDelta = usageAfter - usageBefore;
    }
    return usageDelta;
  }

  public int getSuccessful() {
    int count = 0;
    {
      ICursor<TestStatisticsRow> _zCursor12 = CursorFactory.createCursor(this.rows);
      try {
        while(_zCursor12.moveToNext()) {
          TestStatisticsRow row = _zCursor12.getCurrent();
          count = count + row.getSuccessful();
        }
      } finally {
        _zCursor12.release();
      }
    }
    return count;
  }

  public int getErrored() {
    int count = 0;
    {
      ICursor<TestStatisticsRow> _zCursor13 = CursorFactory.createCursor(this.rows);
      try {
        while(_zCursor13.moveToNext()) {
          TestStatisticsRow row = _zCursor13.getCurrent();
          count = count + row.getErrored();
        }
      } finally {
        _zCursor13.release();
      }
    }
    return count;
  }

  public int getFailed() {
    int count = 0;
    {
      ICursor<TestStatisticsRow> _zCursor14 = CursorFactory.createCursor(this.rows);
      try {
        while(_zCursor14.moveToNext()) {
          TestStatisticsRow row = _zCursor14.getCurrent();
          count = count + row.getFailed();
        }
      } finally {
        _zCursor14.release();
      }
    }
    return count;
  }

  public void addRow(TestStatisticsRow row) {
    ListOperations.addElement(this.rows, row);
  }

}
