package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import javax.swing.table.DefaultTableCellRenderer;
import java.awt.Component;
import javax.swing.JTable;

public class StatisticsRowRenderer extends DefaultTableCellRenderer {

  public  StatisticsRowRenderer() {
  }

  public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
    super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
    TestStatisticsRow rowValue = (TestStatisticsRow)value;
    String text = "";
    switch (column) {
      case 0:
        // Test
        this.setText(rowValue.getText());
        break;
      case 1:
        // Time elapsed
        long time = rowValue.getElapsedTime();
        if (time >= 0) {
          text = String.format("%.3f s", time / 1000.0);
        }
        this.setText(text);
        break;
      case 2:
        // Usage Delta
        this.setMemoryUsage(rowValue.getUsageDelta());
        break;
      case 3:
        // Usage Before
        this.setMemoryUsage(rowValue.getUsageBefore());
        break;
      case 4:
        // Usage After
        this.setMemoryUsage(rowValue.getUsageAfter());
        break;
      case 5:
        // Results
        int s = rowValue.getSuccessful();
        int f = rowValue.getFailed();
        int e = rowValue.getErrored();
        int sum = s + f + e;
        if (sum == 0) {
        } else if (sum == 1) {
          if (s == 1) {
            text = "Passed";
          } else if (f == 1) {
            text = "Failed";
          } else if (e == 1) {
            text = "Error";
          }
        } else
        {
          StringBuilder builder = new StringBuilder();
          if (s > 0) {
            builder.append(" P:").append(s);
          }
          if (f > 0) {
            builder.append(" F:").append(f);
          }
          if (e > 0) {
            builder.append(" E:").append(e);
          }
          text = builder.toString();
        }
        this.setText(text);
        break;
      default:
    }
    return this;
  }

  private void setMemoryUsage(long usage) {
    String s = "";
    if (usage >= 0) {
      s = String.format("%d Kb", usage / 1024);
    }
    this.setText(s);
  }

}
