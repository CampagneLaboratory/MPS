package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import javax.swing.JComponent;

import jetbrains.mps.ide.output.OutputPane;

import java.util.List;

import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;

import java.awt.Color;
import javax.swing.JScrollPane;

import org.apache.commons.lang.ObjectUtils;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;

public class TestOutputComponent {

  private JComponent component;
  private OutputPane output;
  private List<TestOutputComponent.Message> messages;
  private String curClass;
  private String curMethod;
  private String filterClass;
  private String filterMethod;

  public TestOutputComponent(JComponent parentComponent) {
    this.messages = ListOperations.<TestOutputComponent.Message>createList();
    this.output = new OutputPane(parentComponent);
    this.output.setEditable(false);
    this.output.setBackground(Color.WHITE);
    this.component = new JScrollPane(this.output);
  }

  public JComponent getComponent() {
    return this.component;
  }

  public void filter(String filterClass, String filterMethod) {
    if (!(ObjectUtils.equals(filterClass, this.filterClass)) || !(ObjectUtils.equals(filterMethod, this.filterMethod))) {
      this.filterClass = filterClass;
      this.filterMethod = filterMethod;
      this.output.clear();
      {
        ICursor<TestOutputComponent.Message> _zCursor6 = CursorFactory.createCursor(this.messages);
        try {
          while (_zCursor6.moveToNext()) {
            TestOutputComponent.Message message = _zCursor6.getCurrent();
            this.append(message);
          }
        } finally {
          _zCursor6.release();
        }
      }
    }
  }

  public void start(String testClass, String testMethod) {
    this.curClass = testClass;
    this.curMethod = testMethod;
  }

  public void end(String testClass, String testMethod) {
    this.curClass = null;
    this.curMethod = null;
  }

  public void append(String message, boolean error, boolean internal) {
    TestOutputComponent.Message newMessage = new TestOutputComponent.Message(this.curClass, this.curMethod, message, error, internal);
    ListOperations.addElement(this.messages, newMessage);
    this.append(newMessage);
  }

  public void clear() {
    this.messages = ListOperations.<TestOutputComponent.Message>createList();
    this.output.clear();
  }

  private void append(TestOutputComponent.Message message) {
    if (message.matches(this.filterClass, this.filterMethod)) {
      if (message.isError()) {
        this.output.appendError(message.getMessage());
      } else if (message.isInternal()) {
        this.output.appendInternal(message.getMessage());
      } else {
        this.output.append(message.getMessage());
      }
    }
  }

  private static class Message {

    private String testClass;
    private String testMethod;
    private String message;
    private boolean error;
    private boolean internal;

    public Message(String testClass, String testMethod, String message, boolean error, boolean internal) {
      this.testClass = testClass;
      this.testMethod = testMethod;
      this.message = message;
      this.error = error;
      this.internal = internal;
    }

    public boolean matches(String testClass, String testMethod) {
      return testClass == null || (testClass.equals(this.testClass) && (testMethod == null || testMethod.equals(this.testMethod)));
    }

    public String getMessage() {
      return this.message;
    }

    public boolean isError() {
      return this.error;
    }

    public boolean isInternal() {
      return this.internal;
    }

  }

}
