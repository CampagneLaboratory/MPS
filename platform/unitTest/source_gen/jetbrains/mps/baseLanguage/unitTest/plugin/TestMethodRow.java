package jetbrains.mps.baseLanguage.unitTest.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestCase_Behavior;
import jetbrains.mps.baseLanguage.unitTest.behavior.ITestMethod_Behavior;

public class TestMethodRow implements TestStatisticsRow {
  private static final int UNDEFINED = -1;
  private static final int SUCCEED = 0;
  private static final int FAILED = 1;
  private static final int ERRORED = 2;

  private final String myTestCaseName;
  private final String myTestMethodName;
  private long myStartTime = -1;
  private long myFinishTime = -1;
  private long myUsageBefore = -1;
  private long myUsageAfter = -1;
  private int myState = UNDEFINED;

  public TestMethodRow(SNode testMethod) {
    this.myTestCaseName = ITestCase_Behavior.call_getClassName_1216136193905(ITestMethod_Behavior.call_getTestCase_1216134500045(testMethod));
    this.myTestMethodName = ITestMethod_Behavior.call_getTestName_1216136419751(testMethod);
  }

  public String getText() {
    return this.myTestMethodName;
  }

  public String getAdditionalText() {
    return null;
  }

  public long getElapsedTime() {
    long elapsedTime = -1;
    if (this.myStartTime >= 0 && this.myFinishTime >= 0) {
      elapsedTime = this.myFinishTime - this.myStartTime;
    }
    return elapsedTime;
  }

  public void setStartTime(long startTime) {
    this.myStartTime = startTime;
  }

  public void setFinishTime(long finishTime) {
    this.myFinishTime = finishTime;
  }

  public long getUsageBefore() {
    return this.myUsageBefore;
  }

  public void setUsageBefore(long usageBefore) {
    this.myUsageBefore = usageBefore;
  }

  public long getUsageAfter() {
    return this.myUsageAfter;
  }

  public void setUsageAfter(long usageAfter) {
    this.myUsageAfter = usageAfter;
  }

  public long getUsageDelta() {
    long usageDelta = -1;
    if (this.myUsageAfter >= 0 && this.myUsageBefore >= 0) {
      usageDelta = this.myUsageAfter - this.myUsageBefore;
    }
    return usageDelta;
  }

  public void setSucceed() {
    this.myState = SUCCEED;
  }

  public void setFailed() {
    this.myState = FAILED;
  }

  public void setErrored() {
    this.myState = ERRORED;
  }

  public int getSuccessful() {
    return (this.myState == SUCCEED ?
      1 :
      0
    );
  }

  public int getErrored() {
    return (this.myState == ERRORED ?
      1 :
      0
    );
  }

  public int getFailed() {
    return (this.myState == FAILED ?
      1 :
      0
    );
  }

  public boolean matches(String testCase, String testMethod) {
    return testCase == null || (eq_52sp5f_a0a0a0a61(testCase, this.myTestCaseName) && (testMethod == null || eq_52sp5f_a0a0a0a0a61(testMethod, this.myTestMethodName)));
  }

  private static boolean eq_52sp5f_a0a0a0a0a61(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }

  private static boolean eq_52sp5f_a0a0a0a61(Object a, Object b) {
    return (a != null ?
      a.equals(b) :
      a == b
    );
  }
}
