package jetbrains.mps.ypath.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class ITreePathExpression_Behavior {

  public static void init(SNode thisNode) {
  }

  public static SNode call_getTreePath_1213877496973(SNode thisNode) {
    Iterable<SNode> nodes = ListSequence.fromList(SNodeOperations.getDescendants(thisNode, null, false)).where(new IWhereFilter <SNode>() {

      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.ypath.structure.TreePathAdapterExpression");
      }

    });
    SNode exp = thisNode;
    while (Sequence.fromIterable(nodes).isEmpty()) {
      Iterable<SNode> varRefs = ListSequence.fromList(SNodeOperations.getDescendants(exp, null, false)).where(new IWhereFilter <SNode>() {

        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.VariableReference");
        }

      });
      if (Sequence.fromIterable(varRefs).isNotEmpty()) {
        SNode varDecl = SLinkOperations.getTarget(Sequence.fromIterable(varRefs).first(), "variableDeclaration", false);
        nodes = ListSequence.fromList(SNodeOperations.getDescendants(varDecl, null, false)).where(new IWhereFilter <SNode>() {

          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, "jetbrains.mps.ypath.structure.TreePathAdapterExpression");
          }

        });
        exp = SLinkOperations.getTarget(varDecl, "initializer", true);
      } else
      {
        break;
      }
    }
    SNode tpae = Sequence.fromIterable(nodes).first();
    return SLinkOperations.getTarget(tpae, "treepathAspect", false);
  }

}
