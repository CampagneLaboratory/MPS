package jetbrains.mps.ypath.treepaths;

/*Generated by MPS */

import jetbrains.mps.ypath.runtime.TreePath;
import java.io.File;
import jetbrains.mps.ypath.runtime.IFilter;

public class FileTreePath extends TreePath<File> {

  public FileTreePath() {
  }

  public File parent(File node) {
    return FileTreePath.Parent.parent(node);
  }

  public File[] childrenArray(File n) {
    return FileTreePath.Children.childrenArray(n);
  }

  private static class Parent {

    /* package */Object _enclosingClass;
    /* package */Object _closureContext;

    public Parent(Object enclosingClass, Object closureContext) {
      this._enclosingClass = enclosingClass;
      this._closureContext = (Object)closureContext;
    }

    public static File parent(File node) {
      return node.getParentFile();
    }

}
  private static class Children {

    /* package */Object _enclosingClass;
    /* package */Object _closureContext;

    public Children(Object enclosingClass, Object closureContext) {
      this._enclosingClass = enclosingClass;
      this._closureContext = (Object)closureContext;
    }

    public static File[] childrenArray(File node) {
      return node.listFiles();
    }

}
  public static class DIR_NodeKindTrigger implements IFilter<File> {
    private static FileTreePath.DIR_NodeKindTrigger instance;

    /* package */Object _enclosingClass;
    /* package */Object _closureContext;

    private DIR_NodeKindTrigger() {
    }
    public DIR_NodeKindTrigger(Object enclosingClass, Object closureContext) {
      this._enclosingClass = enclosingClass;
      this._closureContext = (Object)closureContext;
    }

    public boolean accept(File node) {
      return node.isDirectory();
    }


    public static IFilter<File> getInstance() {
      if (instance == null) {
        instance = new FileTreePath.DIR_NodeKindTrigger();
      }
      return instance;
    }

}
  public static class FILE_NodeKindTrigger implements IFilter<File> {
    private static FileTreePath.FILE_NodeKindTrigger instance;

    /* package */Object _enclosingClass;
    /* package */Object _closureContext;

    private FILE_NodeKindTrigger() {
    }
    public FILE_NodeKindTrigger(Object enclosingClass, Object closureContext) {
      this._enclosingClass = enclosingClass;
      this._closureContext = (Object)closureContext;
    }

    public boolean accept(File node) {
      return node.isFile();
    }


    public static IFilter<File> getInstance() {
      if (instance == null) {
        instance = new FileTreePath.FILE_NodeKindTrigger();
      }
      return instance;
    }

}
  public static class FILE_relativeName_Property {

    public static IFilter<File> getMatcher(final String matchValue) {
      IFilter filter;
      if (matchValue != null) {
        filter = new IFilter() {

          public boolean accept(Object n) {
            File node = (File)n;
            String actualValue = FileTreePath.FILE_relativeName_Property.Getter.getValue(node);
            return matchValue.equals(actualValue);
          }
        };
      } else
      {
        filter = new IFilter() {

          public boolean accept(Object n) {
            File node = (File)n;
            String actualValue = FileTreePath.FILE_relativeName_Property.Getter.getValue(node);
            return actualValue == null;
          }
        };
      }
      return (IFilter<File>)filter;
    }

    private static class Getter {

      /* package */Object _enclosingClass;
      /* package */Object _closureContext;

      public Getter(Object enclosingClass, Object closureContext) {
        this._enclosingClass = enclosingClass;
        this._closureContext = (Object)closureContext;
      }

      public static String getValue(File node) {
        return node.getName();
      }

}

}
  public static class FILE_extension_Property {

    public static IFilter<File> getMatcher(final String matchValue) {
      IFilter filter;
      if (matchValue != null) {
        filter = new IFilter() {

          public boolean accept(Object n) {
            File node = (File)n;
            String actualValue = FileTreePath.FILE_extension_Property.Getter.getValue(node);
            return matchValue.equals(actualValue);
          }
        };
      } else
      {
        filter = new IFilter() {

          public boolean accept(Object n) {
            File node = (File)n;
            String actualValue = FileTreePath.FILE_extension_Property.Getter.getValue(node);
            return actualValue == null;
          }
        };
      }
      return (IFilter<File>)filter;
    }

    private static class Getter {

      /* package */Object _enclosingClass;
      /* package */Object _closureContext;

      public Getter(Object enclosingClass, Object closureContext) {
        this._enclosingClass = enclosingClass;
        this._closureContext = (Object)closureContext;
      }

      public static String getValue(File node) {
        String name = node.getName();
        int indexOfLastDot = name.lastIndexOf(".");
        String ext = "";
        if (indexOfLastDot >= 0 && indexOfLastDot < name.length()) {
          ext = name.substring(indexOfLastDot);
        }
        return ext;
      }

}

}

}
