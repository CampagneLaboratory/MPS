package jetbrains.mps.ypath.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.ConstraintsDataHolder;
import java.util.Map;
import jetbrains.mps.smodel.constraints.INodePropertySetter;
import java.util.HashMap;
import jetbrains.mps.smodel.constraints.BaseNodePropertySetter;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class TreeNodeKindProperty_Constraints extends ConstraintsDataHolder {
  public TreeNodeKindProperty_Constraints() {
  }

  public String getConceptFqName() {
    return "jetbrains.mps.ypath.structure.TreeNodeKindProperty";
  }

  public Map<String, INodePropertySetter> getNodePropertySetters() {
    HashMap<String, INodePropertySetter> result = new HashMap<String, INodePropertySetter>();
    result.put("default", new BaseNodePropertySetter() {
      public void execPropertySet(final SNode node, final String propertyName, final String propertyValue, final IScope scope) {
        if ((SPropertyOperations.getBoolean(propertyValue)) == true) {
          SNode treepath = SNodeOperations.getAncestor(node, "jetbrains.mps.ypath.structure.TreePathAspect", false, false);
          for (SNode desc : SNodeOperations.getDescendants(treepath, null, false, new String[]{})) {
            if (SNodeOperations.isInstanceOf(desc, "jetbrains.mps.ypath.structure.TreeNodeKindProperty")) {
              SPropertyOperations.set(SNodeOperations.cast(desc, "jetbrains.mps.ypath.structure.TreeNodeKindProperty"), "default", "" + (false));
            }
          }
        }
        SPropertyOperations.set(node, "default", "" + ((SPropertyOperations.getBoolean(propertyValue))));
      }
    });
    return result;
  }
}
