package jetbrains.mps.ypath.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.helgins.inference.TypeChecker;

public class typeof_TreePathOperation_InferenceRule implements InferenceRule_Runtime {

  public typeof_TreePathOperation_InferenceRule() {
  }

  public void applyRule(final SNode op) {
    SNode parent = SNodeOperations.getParent(op);
    do {
      SNode matchedNode_0 = parent;
      {
        boolean matches_0 = false;
        {
          SNode matchingNode_0 = parent;
          if (matchingNode_0 != null) {
            matches_0 = SModelUtil_new.isAssignableConcept(matchingNode_0.getConceptFqName(), "jetbrains.mps.ypath.structure.TreePathOperationExpression");
          }
        }
        if (matches_0) {
          {
            SNode _nodeToCheck_1029348928467 = op;
            BaseIntentionProvider intentionProvider = null;
            TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(op, "r:1222075024810(jetbrains.mps.ypath.helgins)", "1178551167102", true), TypeChecker.getInstance().getRuntimeSupport().typeOf(matchedNode_0, "r:1222075024810(jetbrains.mps.ypath.helgins)", "1178551167104", true), _nodeToCheck_1029348928467, null, "r:1222075024810(jetbrains.mps.ypath.helgins)", "1178551167101", intentionProvider);
          }
          break;
        }
      }
      {
        BaseIntentionProvider intentionProvider = null;
        TypeChecker.getInstance().reportTypeError(op, "Error in model structure: wrong parent type", "r:1222172353246(jetbrains.mps.ypath.helgins@22_0)", "1222174732255", intentionProvider);
      }
    } while(false);
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.ypath.structure.TreePathOperation";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
