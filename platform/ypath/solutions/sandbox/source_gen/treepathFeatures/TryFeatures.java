package treepathFeatures;

/*Generated by MPS */

import jetbrains.mps.ypath.runtime.TreePath;
import org.w3c.dom.Node;
import jetbrains.mps.ypath.runtime.IFilter;
import treepathFeatures.TryFeatures.foo_BAR_Property;
import treepathFeatures.TryFeatures.foo_BAZ_Property;
import java.util.AbstractList;
import java.util.AbstractCollection;
import jetbrains.mps.baseLanguage.ext.collections.internal.SequenceWithSupplier;
import java.util.Iterator;
import jetbrains.mps.ypath.runtime.IFeatureDescriptor;

public class TryFeatures extends TreePath<Node> {

  public  TryFeatures() {
    this.registerFeature(new TryFeatures.Desc_Feature_nodes());
    this.registerFeature(new TryFeatures.Desc_Feature_attributes());
  }

  public Node parent(Node node) {
    return TryFeatures.Parent.parent(node);
  }

  private static class Parent {

    /* package */Object _enclosingClass;
    /* package */Object _closureContext;

    public  Parent(Object enclosingClass, Object closureContext) {
      this._enclosingClass = enclosingClass;
      this._closureContext = (Object)closureContext;
    }

    public static Node parent(Node node) {
      return node.getParentNode();
    }

}
  private static class Children {

    /* package */Object _enclosingClass;
    /* package */Object _closureContext;

    public  Children(Object enclosingClass, Object closureContext) {
      this._enclosingClass = enclosingClass;
      this._closureContext = (Object)closureContext;
    }
}
  public static class foo_NodeKindTrigger implements IFilter<Node> {
    public static TryFeatures.foo_NodeKindTrigger instance;

    /* package */Object _enclosingClass;
    /* package */Object _closureContext;

    private  foo_NodeKindTrigger() {
    }
    public  foo_NodeKindTrigger(Object enclosingClass, Object closureContext) {
      this._enclosingClass = enclosingClass;
      this._closureContext = (Object)closureContext;
    }

    public static IFilter<Node> getInstance() {
      if(TryFeatures.foo_NodeKindTrigger.instance == null) {
        TryFeatures.foo_NodeKindTrigger.instance = new TryFeatures.foo_NodeKindTrigger();
      }
      return TryFeatures.foo_NodeKindTrigger.instance;
    }


    public boolean accept(Node node) {
      return true;
    }

}
  public static class foo_BAR_Property {

    public static IFilter<Node> getMatcher(final String matchValue) {
      IFilter filter;
      if(matchValue != null) {
        filter = new IFilter() {

          public boolean accept(Object n) {
            Node node = (Node)n;
            String actualValue = TryFeatures.foo_BAR_Property.Getter.getValue(node);
            return matchValue.equals(actualValue);
          }

        };
      } else
      {
        filter = new IFilter() {

          public boolean accept(Object n) {
            Node node = (Node)n;
            String actualValue = TryFeatures.foo_BAR_Property.Getter.getValue(node);
            return actualValue == null;
          }

        };
      }
      return (IFilter<Node>)filter;
    }

    private static class Getter {

      /* package */Object _enclosingClass;
      /* package */Object _closureContext;

      public  Getter(Object enclosingClass, Object closureContext) {
        this._enclosingClass = enclosingClass;
        this._closureContext = (Object)closureContext;
      }

      public static String getValue(Node node) {
        return "";
      }

}

}
  public static class foo_BAZ_Property {

    public static IFilter<Node> getMatcher(final String matchValue) {
      IFilter filter;
      if(matchValue != null) {
        filter = new IFilter() {

          public boolean accept(Object n) {
            Node node = (Node)n;
            String actualValue = TryFeatures.foo_BAZ_Property.Getter.getValue(node);
            return matchValue.equals(actualValue);
          }

        };
      } else
      {
        filter = new IFilter() {

          public boolean accept(Object n) {
            Node node = (Node)n;
            String actualValue = TryFeatures.foo_BAZ_Property.Getter.getValue(node);
            return actualValue == null;
          }

        };
      }
      return (IFilter<Node>)filter;
    }

    private static class Getter {

      /* package */Object _enclosingClass;
      /* package */Object _closureContext;

      public  Getter(Object enclosingClass, Object closureContext) {
        this._enclosingClass = enclosingClass;
        this._closureContext = (Object)closureContext;
      }

      public static String getValue(Node node) {
        return "";
      }

}

}
  private static class Feature_nodes extends AbstractList<Node> {

    private Node thisNode;

    public  Feature_nodes(Node thisNode) {
      this.thisNode = thisNode;
    }

    public Node get(int idx) {
      if(idx < 0 || idx >= this.size()) {
        throw new IndexOutOfBoundsException();
      }
      return this.thisNode.getChildNodes().item(idx);
    }

    public int size() {
      return this.thisNode.getChildNodes().getLength();
    }

    public Node set(int idx, Node value) {
      if(idx < 0 || idx >= this.size()) {
        throw new IndexOutOfBoundsException();
      }
      Node __oldValue__ = this.get(idx);
      this.thisNode.replaceChild(this.thisNode.getChildNodes().item(idx), value);
      return __oldValue__;
    }

    public void add(int idx, Node value) {
      if(idx < 0 || idx > this.size()) {
        throw new IndexOutOfBoundsException();
      }
      if(idx < this.thisNode.getChildNodes().getLength()) {
        this.thisNode.insertBefore(this.thisNode.getChildNodes().item(idx), value);
      } else
      {
        this.thisNode.appendChild(value);
      }
    }

    public Node remove(int idx) {
      if(idx < 0 || idx >= this.size()) {
        throw new IndexOutOfBoundsException();
      }
      Node __oldValue__ = this.get(idx);
      this.thisNode.removeChild(this.thisNode.getChildNodes().item(idx));
      return __oldValue__;
    }

}
  private static class Feature_attributes extends AbstractCollection<Node> {

    private Node thisNode;

    public  Feature_attributes(Node thisNode) {
      this.thisNode = thisNode;
    }

    public Iterable<Node> sequence() {
      final zClosureContext _zClosureContext = new zClosureContext();
      _zClosureContext._node = this.thisNode;
      return new SequenceWithSupplier<Node>(new zValueSupplier(null, _zClosureContext));
    }

    public Iterator<Node> iterator() {
      return this.sequence().iterator();
    }

    public int size() {
      return this.thisNode.getAttributes().getLength();
    }

    public boolean add(Node value) {
      boolean __alreadyContains__ = this.contains(value);
      this.thisNode.getAttributes().setNamedItem(value);
      return __alreadyContains__;
    }

}
  public static class Desc_Feature_nodes extends IFeatureDescriptor.Stub<Node> implements IFeatureDescriptor<Node> {

    public  Desc_Feature_nodes() {
    }

    public Iterable<Node> getContents(Node node) {
      return new TryFeatures.Feature_nodes(node);
    }

    public String getOpposite() {
      return null;
    }

    public String getName() {
      return "nodes";
    }

    public boolean isDefault() {
      return false;
    }

    public boolean isAscending() {
      return false;
    }

}
  public static class Desc_Feature_attributes extends IFeatureDescriptor.Stub<Node> implements IFeatureDescriptor<Node> {

    public  Desc_Feature_attributes() {
    }

    public Iterable<Node> getContents(Node node) {
      return new TryFeatures.Feature_attributes(node);
    }

    public String getOpposite() {
      return null;
    }

    public String getName() {
      return "attributes";
    }

    public boolean isDefault() {
      return false;
    }

    public boolean isAscending() {
      return false;
    }

}

}
