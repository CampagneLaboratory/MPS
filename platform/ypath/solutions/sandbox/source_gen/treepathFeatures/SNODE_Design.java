package treepathFeatures;

/*Generated by MPS */

import jetbrains.mps.ypath.design.IParameterizedFeatureDesign;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.project.GlobalScope;

public class SNODE_Design {
  public static class Design_Feature_child extends IParameterizedFeatureDesign.Stub<String> implements IParameterizedFeatureDesign<String> {
    public Iterable<String> getParameters(SNode nodeType) {
      return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(nodeType, "jetbrains.mps.lang.smodel.structure.SNodeType"), "concept", false), "linkDeclaration", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return "aggregation".equals(SPropertyOperations.getString_def(it, "metaClass", "reference"));
        }
      }).select(new ISelector<SNode, String>() {
        public String select(SNode it) {
          return SPropertyOperations.getString(it, "role");
        }
      });
    }

    public SNode getTargetType(String param, SNode nodeType) {
      final String _param = param;
      SNode ld = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(nodeType, "jetbrains.mps.lang.smodel.structure.SNodeType"), "concept", false), "linkDeclaration", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getString(it, "role").equals(_param);
        }
      }).first();
      SNode trg = SLinkOperations.getTarget(ld, "target", false);
      return new SNODE_Design.Design_Feature_child.QuotationClass_7688_0().createNode(trg);
    }

    public String parameterToString(String param) {
      return param;
    }

    public static class QuotationClass_7688_0 {
      public QuotationClass_7688_0() {
      }

      public SNode createNode(Object parameter_4037_0) {
        SNode result = null;
        Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
        SNode quotedNode_4037_0 = null;
        {
          quotedNode_4037_0 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_4037_0 = quotedNode_4037_0;
          quotedNode1_4037_0.setReferent("concept", (SNode) parameter_4037_0);
          result = quotedNode1_4037_0;
        }
        return result;
      }
    }
  }

  public static class Design_Feature_link extends IParameterizedFeatureDesign.Stub<String> implements IParameterizedFeatureDesign<String> {
    public Iterable<String> getParameters(SNode nodeType) {
      return ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(nodeType, "jetbrains.mps.lang.smodel.structure.SNodeType"), "concept", false), "linkDeclaration", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getString_def(it, "metaClass", "reference") == null || "reference".equals(SPropertyOperations.getString_def(it, "metaClass", "reference"));
        }
      }).select(new ISelector<SNode, String>() {
        public String select(SNode it) {
          return SPropertyOperations.getString(it, "role");
        }
      });
    }

    public SNode getTargetType(String param, SNode nodeType) {
      final String _param = param;
      SNode ld = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SNodeOperations.cast(nodeType, "jetbrains.mps.lang.smodel.structure.SNodeType"), "concept", false), "linkDeclaration", true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getString(it, "role").equals(_param);
        }
      }).first();
      SNode trg = SLinkOperations.getTarget(ld, "target", false);
      return new SNODE_Design.Design_Feature_link.QuotationClass_7688_1().createNode(trg);
    }

    public String parameterToString(String param) {
      return param;
    }

    public static class QuotationClass_7688_1 {
      public QuotationClass_7688_1() {
      }

      public SNode createNode(Object parameter_4037_1) {
        SNode result = null;
        Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
        SNode quotedNode_4037_1 = null;
        {
          quotedNode_4037_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.lang.smodel.structure.SNodeType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
          SNode quotedNode1_4037_1 = quotedNode_4037_1;
          quotedNode1_4037_1.setReferent("concept", (SNode) parameter_4037_1);
          result = quotedNode1_4037_1;
        }
        return result;
      }
    }
  }
}
