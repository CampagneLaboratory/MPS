package sample1;

/*Generated by MPS */

import sample1._FunctionTypes._void;
import sample1._FunctionTypes._int_int;
import sample1._FunctionTypes._sequence1_Integer;
import java.util.Iterator;

public class TestClosure {

  public static void main(String[] args) {
    _void closure;
    _int_int fib = new _FunctionTypes._int_int() {

      public int invoke(int n) {
        return (n <= 1 ?
          n :
          this.invoke(n - 1) + this.invoke(n - 2)
        );
      }

    };
    System.out.println("fib(8)=" + fib.invoke(8));
    System.out.println("fib(9)=" + new _FunctionTypes._int_int() {

      public int invoke(int n) {
        return (n <= 1 ?
          n :
          this.invoke(n - 1) + this.invoke(n - 2)
        );
      }

    }.invoke(9));
    int calc = new _FunctionTypes._int() {

      public int invoke() {
        return 2 + 2;
      }

    }.invoke();
    System.out.println("2+2=" + calc);
    System.out.println("fact(5)=" + new _FunctionTypes._int_int() {

      public int invoke(int n) {
        int res = 1;
        while(n > 1) {
          res = res * n;
          n = n - 1;
        }
        return res;
      }

    }.invoke(5));
    _sequence1_Integer fun = new _FunctionTypes._sequence1_Integer() {

      public Iterable<Integer> invoke() {
        return new Iterable <Integer>() {

          public Iterator<Integer> iterator() {
            return new _FunctionTypes.YieldingIterator <Integer>() {

              private int __CP__ = 0;
              private int _1_foo;
              private int _4_bar;
              private int _11_bar;
              private int _18_bar;

              protected boolean moveToNext() {
__loop__:
                do {
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                    case 4:
                      this._4_bar = 0;
                    case 5:
                      if(!(this._4_bar < 5)) {
                        this.__CP__ = 10;
                        break;
                      }
                      this.__CP__ = 6;
                      break;
                    case 7:
                      this._4_bar = this._4_bar + 2;
                      this.__CP__ = 5;
                      break;
                    case 11:
                      this._11_bar = 6;
                    case 12:
                      if(!(this._11_bar < 13)) {
                        this.__CP__ = 18;
                        break;
                      }
                      this.__CP__ = 13;
                      break;
                    case 14:
                      this._11_bar = this._11_bar + 3;
                      this.__CP__ = 12;
                      break;
                    case 18:
                      this._18_bar = 13;
                    case 19:
                      if(!(this._18_bar < 20)) {
                        this.__CP__ = 23;
                        break;
                      }
                      this.__CP__ = 20;
                      break;
                    case 21:
                      this._18_bar = this._18_bar + 1;
                      this.__CP__ = 19;
                      break;
                    case 2:
                      this.__CP__ = 3;
                      this.yield((Integer)this._1_foo);
                      return true;
                    case 8:
                      this.__CP__ = 9;
                      this.yield((Integer)this._4_bar);
                      return true;
                    case 9:
                      this.__CP__ = 7;
                      this.yield((Integer)this._4_bar + this._1_foo);
                      return true;
                    case 15:
                      this.__CP__ = 16;
                      this.yield((Integer)this._11_bar);
                      return true;
                    case 16:
                      this.__CP__ = 17;
                      this.yield((Integer)this._11_bar + 1);
                      return true;
                    case 17:
                      this.__CP__ = 14;
                      this.yield((Integer)this._11_bar + this._1_foo);
                      return true;
                    case 22:
                      this.__CP__ = 21;
                      this.yield((Integer)this._18_bar);
                      return true;
                    case 6:
                      this.__CP__ = 8;
                      break;
                    case 13:
                      this.__CP__ = 15;
                      break;
                    case 20:
                      this.__CP__ = 22;
                      break;
                    case 0:
                      this._1_foo = -1;
                      this.__CP__ = 2;
                      break;
                    case 3:
                      this._1_foo = 1;
                      this.__CP__ = 4;
                      break;
                    case 10:
                      this._1_foo = 2;
                      this.__CP__ = 11;
                      break;
                    default:
                      break __loop__;
                  }
                } while(true);
                return false;
              }

            };
          }

        };
      }

    };
    Iterable<Integer> seq = fun.invoke();
    for(int i : seq) {
      System.out.println("yielded: " + i);
    }
    seq = new _FunctionTypes._sequence1_Integer() {

      public Iterable<Integer> invoke() {
        return new Iterable <Integer>() {

          public Iterator<Integer> iterator() {
            return new _FunctionTypes.YieldingIterator <Integer>() {

              private int __CP__ = 0;
              private int _1_i;
              private int _5_j;

              protected boolean moveToNext() {
__loop__:
                do {
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                    case 5:
                      this._5_j = 2;
                    case 6:
                      if(!(this._5_j < 5)) {
                        this.__CP__ = 4;
                        break;
                      }
                      this.__CP__ = 7;
                      break;
                    case 8:
                      this._5_j = this._5_j + 1;
                      this.__CP__ = 6;
                      break;
                    case 1:
                      this._1_i = 1;
                    case 2:
                      if(!(this._1_i < 10)) {
                        this.__CP__ = 13;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 4:
                      this._1_i = this._1_i + 1;
                      this.__CP__ = 2;
                      break;
                    case 9:
                      if(this._1_i % this._5_j == 0) {
                        this.__CP__ = 10;
                        break;
                      }
                      this.__CP__ = 8;
                      break;
                    case 12:
                      this.__CP__ = 8;
                      this.yield((Integer)this._1_i * this._5_j);
                      return true;
                    case 10:
                      this.__CP__ = 12;
                      break;
                    case 7:
                      this.__CP__ = 9;
                      break;
                    case 3:
                      this.__CP__ = 5;
                      break;
                    case 0:
                      this.__CP__ = 1;
                      break;
                    default:
                      break __loop__;
                  }
                } while(true);
                return false;
              }

            };
          }

        };
      }

    }.invoke();
    for(int i : seq) {
      System.out.println("yielded: " + i);
    }
    seq = new _FunctionTypes._sequence1_Integer() {

      public Iterable<Integer> invoke() {
        return new Iterable <Integer>() {

          public Iterator<Integer> iterator() {
            return new _FunctionTypes.YieldingIterator <Integer>() {

              private int __CP__ = 0;
              private int _1_i;
              private int _4_j;

              protected boolean moveToNext() {
__loop__:
                do {
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                    case 2:
                      if(this._1_i > 0) {
                        this.__CP__ = 3;
                        break;
                      }
                      this.__CP__ = 10;
                      break;
                    case 6:
                      if(this._4_j > 0) {
                        this.__CP__ = 5;
                        break;
                      }
                      this.__CP__ = 9;
                      break;
                    case 7:
                      this.__CP__ = 8;
                      this.yield((Integer)this._1_i * this._4_j);
                      return true;
                    case 5:
                      this.__CP__ = 7;
                      break;
                    case 8:
                      this._4_j = this._4_j - 1;
                      this.__CP__ = 6;
                      break;
                    case 3:
                      this._4_j = 3;
                      this.__CP__ = 5;
                      break;
                    case 9:
                      this._1_i = this._1_i - 1;
                      this.__CP__ = 2;
                      break;
                    case 0:
                      this._1_i = 3;
                      this.__CP__ = 2;
                      break;
                    default:
                      break __loop__;
                  }
                } while(true);
                return false;
              }

            };
          }

        };
      }

    }.invoke();
    for(int i : seq) {
      System.out.println("yielded: " + i);
    }
    final Iterable<Integer> si = new _FunctionTypes._sequence1_Integer() {

      public Iterable<Integer> invoke() {
        return new Iterable <Integer>() {

          public Iterator<Integer> iterator() {
            return new _FunctionTypes.YieldingIterator <Integer>() {

              private int __CP__ = 0;
              private int _1_i;

              protected boolean moveToNext() {
__loop__:
                do {
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                    case 1:
                      this._1_i = 0;
                    case 2:
                      if(!(this._1_i < 5)) {
                        this.__CP__ = 6;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 4:
                      this._1_i = this._1_i + 1;
                      this.__CP__ = 2;
                      break;
                    case 5:
                      this.__CP__ = 4;
                      this.yield((Integer)this._1_i);
                      return true;
                    case 3:
                      this.__CP__ = 5;
                      break;
                    case 0:
                      this.__CP__ = 1;
                      break;
                    default:
                      break __loop__;
                  }
                } while(true);
                return false;
              }

            };
          }

        };
      }

    }.invoke();
    for(int i : new _FunctionTypes._sequence1_Integer() {

      public Iterable<Integer> invoke() {
        return new Iterable <Integer>() {

          public Iterator<Integer> iterator() {
            return new _FunctionTypes.YieldingIterator <Integer>() {

              private int __CP__ = 0;
              private Integer _1_i;
              private Iterator<Integer> _1_i_it;

              protected boolean moveToNext() {
__loop__:
                do {
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                    case 1:
                      this._1_i_it = si.iterator();
                    case 2:
                      if(!(this._1_i_it.hasNext())) {
                        this.__CP__ = 5;
                        break;
                      }
                      this._1_i = this._1_i_it.next();
                      this.__CP__ = 3;
                      break;
                    case 4:
                      this.__CP__ = 2;
                      this.yield((Integer)this._1_i);
                      return true;
                    case 3:
                      this.__CP__ = 4;
                      break;
                    case 0:
                      this.__CP__ = 1;
                      break;
                    default:
                      break __loop__;
                  }
                } while(true);
                return false;
              }

            };
          }

        };
      }

    }.invoke()) {
      System.out.println("i=" + i);
    }
  }

}
