/*
 * Copyright 2003-2008 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ypath_test1;

/*Generated by MPS */

import junit.framework.TestCase;
import org.junit.Test;
import org.w3c.dom.Document;
import jetbrains.mps.ypath.runtime.ITreeTraversal;
import org.w3c.dom.Node;
import treepath_dom.DOM;
import junit.framework.Assert;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.ypath.runtime.TreeTraversalFactory;
import jetbrains.mps.ypath.runtime.CompositeFilter;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import javax.xml.parsers.DocumentBuilderFactory;

public class XMLTreeSimple_Test extends TestCase {
private    static String SINGLE_NODE = "<foo/>";
private    static String SIMPLE_TREE = "<root><a1><b1/><b2/></a1><a2><b3><c1/></b3></a2></root>";

  @Test()
  public void test_single() throws Exception {
    Document doc = this.parse(SINGLE_NODE);
    ITreeTraversal<Node> tp = new DOM().startTraversal(doc);
    Assert.assertSame(Sequence.fromIterable(tp).count(), 1);
    Assert.assertEquals(Sequence.fromIterable(tp).first(), doc);
  }

  @Test()
  public void test_children() throws Exception {
    Document doc = this.parse(SIMPLE_TREE);
    ITreeTraversal<Node> nodes1 = TreeTraversalFactory.Traverse(new DOM().startTraversal(doc), TreeTraversalFactory.Axis("CHILDREN"));
    Assert.assertSame(Sequence.fromIterable(nodes1).count(), 1);
    Assert.assertEquals("root", this.toString(nodes1));
    ITreeTraversal<Node> nodes2 = TreeTraversalFactory.Traverse(TreeTraversalFactory.Traverse(new DOM().startTraversal(doc), TreeTraversalFactory.Axis("CHILDREN")), TreeTraversalFactory.Axis("CHILDREN"));
    Assert.assertSame(Sequence.fromIterable(nodes2).count(), 2);
    Assert.assertEquals("a1, a2", this.toString(nodes2));
  }

  @Test()
  public void test_descendants() throws Exception {
    Document doc = this.parse(SIMPLE_TREE);
    ITreeTraversal<Node> nodes = TreeTraversalFactory.Traverse(new DOM().startTraversal(doc), TreeTraversalFactory.Axis("DESCENDANTS"));
    Assert.assertSame(Sequence.fromIterable(nodes).count(), 7);
    Assert.assertEquals("root, a1, b1, b2, a2, b3, c1", this.toString(nodes));
  }

  @Test()
  public void test_defautProperty() throws Exception {
    Document doc = this.parse(SIMPLE_TREE);
    ITreeTraversal<Node> nodes = TreeTraversalFactory.Filter(TreeTraversalFactory.Traverse(new DOM().startTraversal(doc), TreeTraversalFactory.Axis("DESCENDANTS")), new CompositeFilter<Node>(DOM.ELEMENT_NodeKindTrigger.getInstance(), DOM.ELEMENT_tag_Property.getMatcher("b3")));
    Assert.assertSame(Sequence.fromIterable(nodes).count(), 1);
    Assert.assertEquals("b3", this.toString(nodes));
  }

  @Test()
  public void test_sibling_descendants() throws Exception {
    Document doc = this.parse(SIMPLE_TREE);
    Node a1 = Sequence.fromIterable(TreeTraversalFactory.Traverse(TreeTraversalFactory.Traverse(new DOM().startTraversal(doc), TreeTraversalFactory.Axis("CHILDREN")), TreeTraversalFactory.Axis("CHILDREN"))).first();
    Assert.assertEquals("a1", a1.getNodeName());
    Iterable<Node> nodes = TreeTraversalFactory.Traverse(TreeTraversalFactory.Traverse(new DOM().startTraversal(a1), TreeTraversalFactory.Axis("SELF_FOLLOWING_SIBLINGS")), TreeTraversalFactory.Axis("SELF_DESCENDANTS"));
    Assert.assertSame(6, Sequence.fromIterable(nodes).count());
    Assert.assertEquals("a1, b1, b2, a2, b3, c1", this.toString(nodes));
  }

  public Document parse(String xml) throws Exception {
    InputStream is = new ByteArrayInputStream(xml.getBytes());
    Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(is);
    return doc;
  }

  public String toString(Iterable<Node> nodes) {
    StringBuilder sb = new StringBuilder();
    String sep = "";
    for(Node n : nodes) {
      sb.append(sep).append(n.getNodeName());
      sep = ", ";
    }
    return sb.toString();
  }

}
