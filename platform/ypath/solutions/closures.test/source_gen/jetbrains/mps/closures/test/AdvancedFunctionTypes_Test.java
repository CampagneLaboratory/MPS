package jetbrains.mps.closures.test;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.closures.test._FunctionTypes.__Integer;
import jetbrains.mps.closures.test._FunctionTypes._Integer;
import jetbrains.mps.closures.test._FunctionTypes.___Integer;
import jetbrains.mps.closures.test._FunctionTypes.__Number;
import jetbrains.mps.closures.test._FunctionTypes._Integer_from__Integer;
import jetbrains.mps.closures.test._FunctionTypes._Integer_from_Integer_and_Integer;
import jetbrains.mps.closures.test._FunctionTypes._Integer_from_Integer;
import junit.framework.Assert;

public class AdvancedFunctionTypes_Test extends TestCase {

  public void test_returnsFunction() throws Exception {
    __Integer fun1 = new _FunctionTypes.__Integer() {

      public _Integer invoke() {
        return new _FunctionTypes._Integer() {

          public Integer invoke() {
            return 1;
          }

        };
      }

    };
    ___Integer fun2 = new _FunctionTypes.___Integer() {

      public __Integer invoke() {
        return new _FunctionTypes.__Integer() {

          public _Integer invoke() {
            return new _FunctionTypes._Integer() {

              public Integer invoke() {
                return 1;
              }

            };
          }

        };
      }

    };
    __Integer fun3;
    __Number fun4;
    fun1 = fun2.invoke();
    fun3 = fun1;
    // TODO: support for adapters for function that accepts/returns function
    // fun4 = fun3
    // fun4 = fun2.invoke()
  }

  public void test_acceptsFunction() throws Exception {
    _Integer_from__Integer fun = new _FunctionTypes._Integer_from__Integer() {

      public Integer invoke(_Integer f) {
        return f.invoke();
      }

    };
    _Integer_from_Integer_and_Integer add = new _FunctionTypes._Integer_from_Integer_and_Integer() {

      public Integer invoke(Integer x, Integer y) {
        return x + y;
      }

    };
    _Integer_from_Integer plusThree = new _FunctionTypes._Integer_from_Integer() {

      public Integer invoke(Integer x) {
        return x + 3;
      }

    };
    _Integer_from_Integer curriedPlusThree = this.curry(add, 3);
    Assert.assertEquals(plusThree.invoke(1), curriedPlusThree.invoke(1));
  }

  public _Integer_from_Integer curry(final _Integer_from_Integer_and_Integer fun, final int y) {
    return new _FunctionTypes._Integer_from_Integer() {

      public Integer invoke(Integer x) {
        return fun.invoke(x, y);
      }

    };
  }

}
