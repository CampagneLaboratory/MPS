package jetbrains.mps.closures.test;

/*Generated by MPS */

import java.util.List;
import java.util.Iterator;

public class YieldClosures_Test extends ClosuresBase_Test {

  public void test_ifStatement() throws Exception {
    this.assertResultsEqual(new _FunctionTypes._void_from_List_of_Integer() {

      public void invoke(List<Integer> exp) {
        exp.add(1);
        if(true) {
          exp.add(2);
        }
        if(false) {
          exp.add(3);
        } else
        {
          exp.add(4);
        }
        exp.add(5);
        if(false) {
          exp.add(6);
        }
      }

    }, new _FunctionTypes._Iterable_of_Integer() {

      public Iterable<Integer> invoke() {
        return new Iterable <Integer>() {

          public Iterator<Integer> iterator() {
            return new _FunctionTypes.YieldingIterator <Integer>() {

              private int __CP__ = 0;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 3:
                      if(true) {
                        this.__CP__ = 4;
                        break;
                      }
                      this.__CP__ = 5;
                      break;
                    case 5:
                      if(false) {
                        this.__CP__ = 7;
                        break;
                      }
                      this.__CP__ = 8;
                      break;
                    case 12:
                      if(false) {
                        this.__CP__ = 13;
                        break;
                      }
                      this.__CP__ = 1;
                      break;
                    case 2:
                      this.__CP__ = 3;
                      this.yield((Integer)1);
                      return true;
                    case 6:
                      this.__CP__ = 5;
                      this.yield((Integer)2);
                      return true;
                    case 10:
                      this.__CP__ = 9;
                      this.yield((Integer)3);
                      return true;
                    case 11:
                      this.__CP__ = 9;
                      this.yield((Integer)4);
                      return true;
                    case 9:
                      this.__CP__ = 12;
                      this.yield((Integer)5);
                      return true;
                    case 14:
                      this.__CP__ = 1;
                      this.yield((Integer)6);
                      return true;
                    case 4:
                      this.__CP__ = 6;
                      break;
                    case 7:
                      this.__CP__ = 10;
                      break;
                    case 8:
                      this.__CP__ = 11;
                      break;
                    case 13:
                      this.__CP__ = 14;
                      break;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    default:
                      break __loop__;
                  }
                } while(true);
                return false;
              }

            };
          }

        };
      }

    });
  }

  public void test_whileStatement() throws Exception {
    this.assertResultsEqual(new _FunctionTypes._void_from_List_of_Integer() {

      public void invoke(List<Integer> exp) {
        int i = 3;
        exp.add(i);
        while(i > 0) {
          int j = 1;
          exp.add(j);
          while(j <= 3) {
            exp.add(i * j);
            j = j + 1;
          }
          exp.add(j);
          i = i - 1;
        }
        exp.add(i);
        i = 0;
      }

    }, new _FunctionTypes._Iterable_of_Integer() {

      public Iterable<Integer> invoke() {
        return new Iterable <Integer>() {

          public Iterator<Integer> iterator() {
            return new _FunctionTypes.YieldingIterator <Integer>() {

              private int __CP__ = 0;
              private int _3_i;
              private int _8_j;

              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 10:
                      if(this._8_j <= 3) {
                        this.__CP__ = 11;
                        break;
                      }
                      this.__CP__ = 14;
                      break;
                    case 5:
                      if(this._3_i > 0) {
                        this.__CP__ = 6;
                        break;
                      }
                      this.__CP__ = 16;
                      break;
                    case 4:
                      this.__CP__ = 5;
                      this.yield((Integer)this._3_i);
                      return true;
                    case 9:
                      this.__CP__ = 10;
                      this.yield((Integer)this._8_j);
                      return true;
                    case 12:
                      this.__CP__ = 13;
                      this.yield((Integer)this._3_i * this._8_j);
                      return true;
                    case 14:
                      this.__CP__ = 15;
                      this.yield((Integer)this._8_j);
                      return true;
                    case 16:
                      this.__CP__ = 17;
                      this.yield((Integer)this._3_i);
                      return true;
                    case 11:
                      this.__CP__ = 12;
                      break;
                    case 13:
                      this._8_j = this._8_j + 1;
                      this.__CP__ = 10;
                      break;
                    case 6:
                      this._8_j = 1;
                      this.__CP__ = 9;
                      break;
                    case 15:
                      this._3_i = this._3_i - 1;
                      this.__CP__ = 5;
                      break;
                    case 0:
                      this._3_i = 3;
                      this.__CP__ = 4;
                      break;
                    case 17:
                      this._3_i = 0;
                      this.__CP__ = 1;
                      break;
                    default:
                      break __loop__;
                  }
                } while(true);
                return false;
              }

            };
          }

        };
      }

    });
  }

}
