package jetbrains.mps.ypath.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.INodeReferentSetEventHandler;
import jetbrains.mps.smodel.constraints.INodeReferentSearchScopeProvider;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.search.ISearchScope;
import jetbrains.mps.smodel.search.SimpleSearchScope;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;

public class IFeature_opposite_ReferentConstraint implements IModelConstraints, INodeReferentSetEventHandler, INodeReferentSearchScopeProvider {

  public  IFeature_opposite_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSetEventHandler("jetbrains.mps.ypath.structure.IFeature", "opposite", this);
    manager.registerNodeReferentSearchScopeProvider("jetbrains.mps.ypath.structure.IFeature", "opposite", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSetEventHandler("jetbrains.mps.ypath.structure.IFeature", "opposite");
    manager.unRegisterNodeReferentSearchScopeProvider("jetbrains.mps.ypath.structure.IFeature", "opposite");
  }

  public void processReferentSetEvent(SNode referenceNode, SNode oldReferentNode, SNode newReferentNode, IScope scope) {
    if((oldReferentNode != null) && oldReferentNode != newReferentNode) {
      SLinkOperations.setTarget(oldReferentNode, "opposite", null, false);
    }
  }

  public boolean canCreateNodeReferentSearchScope(SModel model, SNode enclosingNode, SNode referenceNode, IScope scope) {
    return true;
  }

  public ISearchScope createNodeReferentSearchScope(final SModel model, final SNode enclosingNode, final SNode referenceNode, final IScope scope) {
    final zClosureContext2 _zClosureContext2 = new zClosureContext2();
    _zClosureContext2.feature = referenceNode;
    return new SimpleSearchScope(SequenceOperations.toList(SequenceOperations.where(SLinkOperations.getTargets(SNodeOperations.getParent(_zClosureContext2.feature, null, false, false), "features", true), new zPredicate(null, _zClosureContext2))));
  }

  public String getNodeReferentSearchScopeDescription() {
    return "<no description>";
  }

}
