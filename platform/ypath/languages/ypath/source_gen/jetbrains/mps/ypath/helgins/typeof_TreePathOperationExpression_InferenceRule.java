package jetbrains.mps.ypath.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.ypath.constraints.FeatureTargetTypeUtil;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_TreePathOperationExpression_InferenceRule implements InferenceRule_Runtime {

  public  typeof_TreePathOperationExpression_InferenceRule() {
  }

  public void applyRule(SNode argument) {
    if(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(argument, "operation", true), "jetbrains.mps.ypath.structure.IterateOperation")) {
      SNode op = SLinkOperations.getTarget(argument, "operation", true);
      if(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(op, "usedFeature", false), "jetbrains.mps.ypath.structure.IParamFeature")) {
        if(SPropertyOperations.getString(SLinkOperations.getTarget(op, "paramName", true), "name") != null) {
          Object parameter = FeatureTargetTypeUtil.getParameter(SLinkOperations.getTarget(op, "usedFeature", false), SPropertyOperations.getString(SLinkOperations.getTarget(op, "paramName", true), "name"));
          SNode sourceType = TypeChecker.getInstance().getRuntimeSupport().checkedTypeOf(SLinkOperations.getTarget(argument, "expression", true));
          SNode targetType = FeatureTargetTypeUtil.getTargetType(SLinkOperations.getTarget(op, "usedFeature", false), SLinkOperations.getTarget(sourceType, "nodeType", true), parameter);
          TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_1().createNode(targetType), argument, "jetbrains.mps.ypath.helgins", "1185013411106");
        }
      } else
      {
        TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(argument), TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(argument, "expression", true)), argument, null, "jetbrains.mps.ypath.helgins", "1184841160981");
      }
    } else
    {
      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(argument), TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(argument, "expression", true)), argument, null, "jetbrains.mps.ypath.helgins", "1184588384882");
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.ypath.structure.TreePathOperationExpression";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
