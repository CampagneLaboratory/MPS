package jetbrains.mps.ypath.editor;

/*Generated by MPS */

import jetbrains.mps.bootstrap.editorLanguage.generator.internal.AbstractCellMenuComponent;
import jetbrains.mps.nodeEditor.cellMenu.ISubstituteInfoPart;
import jetbrains.mps.bootstrap.editorLanguage.generator.internal.AbstractCellMenuPart_Generic_Group;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.util.Pair;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.ypath.constraints.IFeature_Behavior;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;

public class menu_FeatureSetOpposite extends AbstractCellMenuComponent {

  public  menu_FeatureSetOpposite() {
    super(new ISubstituteInfoPart[]{new menu_FeatureSetOpposite.IFeature_generic_cellMenu()});
  }
  public static class IFeature_generic_cellMenu extends AbstractCellMenuPart_Generic_Group {

    public  IFeature_generic_cellMenu() {
    }

    public List createParameterObjects(SNode node, IScope scope, IOperationContext operationContext) {
      final zClosureContext _zClosureContext = new zClosureContext();
      List<Pair> res = ListOperations.createList(new Pair[]{});
      _zClosureContext.srcNode = node;
      _zClosureContext.isGeneric = SNodeOperations.isInstanceOf(_zClosureContext.srcNode, "jetbrains.mps.ypath.structure.IGenericFeature");
      {
        ICursor<SNode> _zCursor5 = CursorFactory.createCursor(SequenceOperations.where(SLinkOperations.getTargets(SNodeOperations.getParent(_zClosureContext.srcNode, null, false, false), "features", true), new zPredicate(null, _zClosureContext)));
        try {
          while(_zCursor5.moveToNext()) {
            SNode fe = _zCursor5.getCurrent();
            ListOperations.addElement(res, new Pair(fe, Boolean.TRUE));
            ListOperations.addElement(res, new Pair(fe, Boolean.FALSE));
          }
        } finally {
          _zCursor5.release();
        }
      }
      return res;
    }

    public void handleAction(Object parameterObject, SNode node, SModel model, IScope scope, IOperationContext operationContext) {
      this.handleAction_impl((Pair)parameterObject, node, model, scope, operationContext);
    }

    public void handleAction_impl(Pair parameterObject, SNode node, SModel model, IScope scope, IOperationContext operationContext) {
      SNode fe = (SNode)parameterObject.o1;
      Boolean mu = (Boolean)parameterObject.o2;
      IFeature_Behavior.call_setOpposite_1197913839765(node, fe, mu);
    }

    public boolean isReferentPresentation() {
      return false;
    }

    public String getMatchingText(Object parameterObject) {
      return this.getMatchingText_internal((Pair)parameterObject);
    }

    public String getMatchingText_internal(Pair parameterObject) {
      SNode fe = (SNode)parameterObject.o1;
      Boolean mu = (Boolean)parameterObject.o2;
      return (mu ?
        "<-> " + SPropertyOperations.getString(fe, "name") :
        "<-  " + SPropertyOperations.getString(fe, "name")
      );
    }

    public String getDescriptionText(Object parameterObject) {
      return this.getDescriptionText_internal((Pair)parameterObject);
    }

    public String getDescriptionText_internal(Pair parameterObject) {
      SNode fe = (SNode)parameterObject.o1;
      Boolean mu = (Boolean)parameterObject.o2;
      return (mu ?
        "set mutual opposite feature" :
        "set opposite feature"
      );
    }

}

}
