package jetbrains.mps.ypath.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_VisitNodesStatement_InferenceRule implements InferenceRule_Runtime {

  public  typeof_VisitNodesStatement_InferenceRule() {
  }

  public void applyRule(final SNode argument) {
    final SNode T_typevar_1180009898513 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);
    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(argument, "visitBlock", true), "expression", true)), new QuotationClass_7().createNode(TypeChecker.getInstance().getEquationManager().getRepresentator(T_typevar_1180009898513)), SLinkOperations.getTarget(SLinkOperations.getTarget(argument, "visitBlock", true), "expression", true), null, "jetbrains.mps.ypath.helgins", "1180009374907");
    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(argument), TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(argument, "visitBlock", true), "expression", true)), argument, null, "jetbrains.mps.ypath.helgins", "1180009862290");
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.ypath.structure.VisitNodesStatement";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
