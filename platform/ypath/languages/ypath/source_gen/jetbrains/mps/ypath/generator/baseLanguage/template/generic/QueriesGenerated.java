package jetbrains.mps.ypath.generator.baseLanguage.template.generic;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.generator.template.ITemplateGenerator;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.ypath.constraints.IRange_Behavior;
import jetbrains.mps.ypath.constraints.IGenericFeature_Behavior;
import jetbrains.mps.generator.JavaNameUtil;
import jetbrains.mps.ypath.constraints.ReplaceWritePathStatement_Behavior;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.patterns.IMatchingPattern;
import jetbrains.mps.bootstrap.helgins.runtime.HUtil;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.generator.newGenerator.CloneUtil;

public class QueriesGenerated {

  public static boolean baseMappingRule_Condition_1191842720188(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "operation", true), "jetbrains.mps.ypath.structure.IterateOperation") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature");
  }

  public static boolean baseMappingRule_Condition_1196100060391(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    SNode tpoe = SNodeOperations.getAncestor(node, "jetbrains.mps.ypath.structure.TreePathOperationExpression", false, false);
    if((tpoe != null)) {
      if(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(tpoe, "operation", true), "jetbrains.mps.ypath.structure.IterateOperation")) {
        return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(tpoe, "operation", true), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature");
      }
    }
    List<SNode> features = SLinkOperations.getTargets(SLinkOperations.getTarget(node, "treepathAspect", false), "features", true);
    return SequenceOperations.isEmpty(SequenceOperations.where(features, new zPredicate(null, null))) && !(SequenceOperations.isEmpty(features));
  }

  public static boolean baseMappingRule_Condition_1196091747822(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SequenceOperations.isEmpty(SequenceOperations.where(SNodeOperations.getDescendants(node, null, false), new zPredicate1(null, null)));
  }

  public static boolean baseMappingRule_Condition_1196092164894(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SequenceOperations.isEmpty(SequenceOperations.where(SNodeOperations.getDescendants(node, null, false), new zPredicate2(null, null))));
  }

  public static boolean baseMappingRule_Condition_1194727667091(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    SNode type = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node, "expression", true));
    SNode targType = SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node, "writePath", true)), "targetType", true);
    return !(TypeChecker.getInstance().getSubtypingManager().isSubtype(type, new QuotationClass_().createNode(targType)));
  }

  public static boolean baseMappingRule_Condition_1194727970307(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    SNode type = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node, "expression", true));
    SNode targType = SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node, "writePath", true)), "targetType", true);
    return TypeChecker.getInstance().getSubtypingManager().isSubtype(type, new QuotationClass_1().createNode(targType));
  }

  public static boolean baseMappingRule_Condition_1194727311425(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(node, "before");
  }

  public static boolean baseMappingRule_Condition_1194727359444(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SPropertyOperations.getBoolean(node, "before"));
  }

  public static boolean baseMappingRule_Condition_1194728309348(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(node, "before");
  }

  public static boolean baseMappingRule_Condition_1194728474411(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SPropertyOperations.getBoolean(node, "before"));
  }

  public static boolean baseMappingRule_Condition_1191841928731(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SNodeOperations.isInstanceOf(node, "jetbrains.mps.ypath.structure.ReplaceWritePathStatement"));
  }

  public static boolean baseMappingRule_Condition_1196615333614(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression")) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && IRange_Behavior.call_isSelection_1194716132256(SLinkOperations.getTarget(node, "range", true)) && IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
  }

  public static boolean baseMappingRule_Condition_1196615259322(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression")) && IRange_Behavior.call_isAll_1196442108666(SLinkOperations.getTarget(node, "range", true)) && IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
  }

  public static boolean baseMappingRule_Condition_1196615277190(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression")) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.IndexRange") && IRange_Behavior.call_isSelection_1194716132256(SLinkOperations.getTarget(node, "range", true)) && IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
  }

  public static boolean baseMappingRule_Condition_1196600366364(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && IRange_Behavior.call_isSelection_1194716132256(SLinkOperations.getTarget(node, "range", true)) && IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
  }

  public static boolean baseMappingRule_Condition_1196599064098(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression") && IRange_Behavior.call_isAll_1196442108666(SLinkOperations.getTarget(node, "range", true)) && IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
  }

  public static boolean baseMappingRule_Condition_1196598097973(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.IndexRange") && IRange_Behavior.call_isSelection_1194716132256(SLinkOperations.getTarget(node, "range", true)) && IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
  }

  public static boolean baseMappingRule_Condition_1196621431671(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && IRange_Behavior.call_isInsertionPoint_1194716377388(SLinkOperations.getTarget(node, "range", true)) && IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
  }

  public static boolean baseMappingRule_Condition_1196619372541(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.IndexRange") && IRange_Behavior.call_isInsertionPoint_1194716377388(SLinkOperations.getTarget(node, "range", true)) && IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
  }

  public static boolean baseMappingRule_Condition_1196092584522(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return IGenericFeature_Behavior.call_isSingleCardinality_1191862685760(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true));
  }

  public static boolean baseMappingRule_Condition_1196092614299(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(IGenericFeature_Behavior.call_isSingleCardinality_1191862685760(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true)));
  }

  public static boolean baseMappingRule_Condition_1196093067844(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return IGenericFeature_Behavior.call_isSingleCardinality_1191862685760(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true));
  }

  public static boolean baseMappingRule_Condition_1196093087802(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(IGenericFeature_Behavior.call_isSingleCardinality_1191862685760(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true)));
  }

  public static boolean baseMappingRule_Condition_1196716093597(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SequenceOperations.isEmpty(SequenceOperations.where(SLinkOperations.getTargets(node, "candidates", true), new zPredicate3(null, null))));
  }

  public static boolean baseMappingRule_Condition_1196714937715(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SequenceOperations.isEmpty(SequenceOperations.where(SLinkOperations.getTargets(node, "candidates", true), new zPredicate4(null, null))) && (SNodeOperations.getAncestor(node, "jetbrains.mps.ypath.structure.StatementAggregator", false, false) == null);
  }

  public static boolean baseMappingRule_Condition_1196718701655(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression")) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && (IRange_Behavior.call_isSelection_1194716132256(SLinkOperations.getTarget(node, "range", true)) || IRange_Behavior.call_isSingle_1194716995764(SLinkOperations.getTarget(node, "range", true)));
  }

  public static boolean baseMappingRule_Condition_1196719029525(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression")) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && IRange_Behavior.call_isAll_1196442108666(SLinkOperations.getTarget(node, "range", true));
  }

  public static boolean baseMappingRule_Condition_1196783265231(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && (IRange_Behavior.call_isSelection_1194716132256(SLinkOperations.getTarget(node, "range", true)) || IRange_Behavior.call_isSingle_1194716995764(SLinkOperations.getTarget(node, "range", true)));
  }

  public static boolean baseMappingRule_Condition_1196783340935(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && IRange_Behavior.call_isAll_1196442108666(SLinkOperations.getTarget(node, "range", true));
  }

  public static boolean baseMappingRule_Condition_1196783429400(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && IRange_Behavior.call_isInsertionPoint_1194716377388(SLinkOperations.getTarget(node, "range", true)) && SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "includes_start");
  }

  public static boolean baseMappingRule_Condition_1196783466482(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && IRange_Behavior.call_isInsertionPoint_1194716377388(SLinkOperations.getTarget(node, "range", true)) && SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "includes_end");
  }

  public static boolean baseMappingRule_Condition_1196783508882(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && IRange_Behavior.call_isInsertionPoint_1194716377388(SLinkOperations.getTarget(node, "range", true)) && (SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_start") || SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end"));
  }

  public static boolean baseMappingRule_Condition_1196785676096(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    String tokenKey = "aggregate_byIndex" + ((SNode)node).getId();
    Object token = generator.getGeneratorSessionContext().getTransientObject(tokenKey);
    if(Boolean.TRUE.equals(token)) {
      return false;
    }
    SNode wrp = SNodeOperations.getAncestor(node, "jetbrains.mps.ypath.structure.StatementWrapper", false, false);
    return (wrp == null) || SPropertyOperations.getInteger(wrp, "priority") < -50;
  }

  public static boolean baseMappingRule_Condition_1196790455741(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression")) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && (IRange_Behavior.call_isSelection_1194716132256(SLinkOperations.getTarget(node, "range", true)) || IRange_Behavior.call_isSingle_1194716995764(SLinkOperations.getTarget(node, "range", true)));
  }

  public static boolean baseMappingRule_Condition_1196791992775(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression")) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.IndexRange") && (IRange_Behavior.call_isSelection_1194716132256(SLinkOperations.getTarget(node, "range", true)) || IRange_Behavior.call_isSingle_1194716995764(SLinkOperations.getTarget(node, "range", true)));
  }

  public static boolean baseMappingRule_Condition_1196790354833(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    String tokenKey = "aggregate_replaceDemux" + ((SNode)node).getId();
    Object token = generator.getGeneratorSessionContext().getTransientObject(tokenKey);
    if(Boolean.TRUE.equals(token)) {
      return false;
    }
    SNode wrp = SNodeOperations.getAncestor(node, "jetbrains.mps.ypath.structure.StatementWrapper", false, false);
    return (wrp == null) || SPropertyOperations.getInteger(wrp, "priority") < -30;
  }

  public static boolean baseMappingRule_Condition_1196800572603(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.IndexRange") && IRange_Behavior.call_isInsertionPoint_1194716377388(SLinkOperations.getTarget(node, "range", true)) && SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "includes_start");
  }

  public static boolean baseMappingRule_Condition_1196800682646(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.IndexRange") && IRange_Behavior.call_isInsertionPoint_1194716377388(SLinkOperations.getTarget(node, "range", true)) && SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "includes_end");
  }

  public static boolean baseMappingRule_Condition_1196800803497(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.IndexRange") && IRange_Behavior.call_isInsertionPoint_1194716377388(SLinkOperations.getTarget(node, "range", true)) && SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_start");
  }

  public static boolean baseMappingRule_Condition_1196800298471(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    String tokenKey = "aggregate_insertBefore" + ((SNode)node).getId();
    Object token = generator.getGeneratorSessionContext().getTransientObject(tokenKey);
    if(Boolean.TRUE.equals(token)) {
      return false;
    }
    SNode wrp = SNodeOperations.getAncestor(node, "jetbrains.mps.ypath.structure.StatementWrapper", false, false);
    return (wrp == null) || SPropertyOperations.getInteger(wrp, "priority") < -20;
  }

  public static boolean baseMappingRule_Condition_1196804029368(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.IndexRange") && IRange_Behavior.call_isLeftOpenSelection_1195414499574(SLinkOperations.getTarget(node, "range", true));
  }

  public static boolean baseMappingRule_Condition_1196804531531(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.IndexRange") && IRange_Behavior.call_isRightOpenSelection_1195414510642(SLinkOperations.getTarget(node, "range", true));
  }

  public static boolean baseMappingRule_Condition_1196803954971(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    String tokenKey = "aggregate_removeSingle" + ((SNode)node).getId();
    Object token = generator.getGeneratorSessionContext().getTransientObject(tokenKey);
    if(Boolean.TRUE.equals(token)) {
      return false;
    }
    SNode wrp = SNodeOperations.getAncestor(node, "jetbrains.mps.ypath.structure.StatementWrapper", false, false);
    return (wrp == null) || SPropertyOperations.getInteger(wrp, "priority") < -10;
  }

  public static Object propertyMacro_GetPropertyValue_1195654147085(SNode node, String templateValue, SNode templateNode, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return JavaNameUtil.fqClassName(sourceModel, "_Replace");
  }

  public static Object propertyMacro_GetPropertyValue_1195654147090(SNode node, String templateValue, SNode templateNode, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return ReplaceWritePathStatement_Behavior.call_getReplaceMethodName_1195503897285(node);
  }

  public static Object propertyMacro_GetPropertyValue_1195503710697(SNode node, String templateValue, SNode templateNode, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return ReplaceWritePathStatement_Behavior.call_getReplaceMethodName_1195503897285(node);
  }

  public static SNode referenceMacro_GetReferent_1195501610661(SNode node, SNode templateNode, SNode outputNode, SModel sourceModel, ITemplateGenerator generator) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
  }

  public static SNode referenceMacro_GetReferent_1196718724629(SNode node, SNode templateNode, SNode outputNode, SModel sourceModel, ITemplateGenerator generator) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
  }

  public static SNode referenceMacro_GetReferent_1196718724708(SNode node, SNode templateNode, SNode outputNode, SModel sourceModel, ITemplateGenerator generator) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
  }

  public static SNode referenceMacro_GetReferent_1196783283185(SNode node, SNode templateNode, SNode outputNode, SModel sourceModel, ITemplateGenerator generator) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
  }

  public static SNode referenceMacro_GetReferent_1196783283264(SNode node, SNode templateNode, SNode outputNode, SModel sourceModel, ITemplateGenerator generator) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
  }

  public static SNode referenceMacro_GetReferent_1196783519926(SNode node, SNode templateNode, SNode outputNode, SModel sourceModel, ITemplateGenerator generator) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
  }

  public static SNode referenceMacro_GetReferent_1196783520005(SNode node, SNode templateNode, SNode outputNode, SModel sourceModel, ITemplateGenerator generator) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
  }

  public static SNode referenceMacro_GetReferent_1196803315068(SNode node, SNode templateNode, SNode outputNode, SModel sourceModel, ITemplateGenerator generator) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
  }

  public static SNode referenceMacro_GetReferent_1196804824650(SNode node, SNode templateNode, SNode outputNode, SModel sourceModel, ITemplateGenerator generator) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
  }

  public static boolean ifMacro_Condition_1191863129014(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return IGenericFeature_Behavior.call_isSingleCardinality_1191862685760(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true));
  }

  public static boolean ifMacro_Condition_1193757842704(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(IGenericFeature_Behavior.call_isSingleCardinality_1191862685760(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true)));
  }

  public static boolean ifMacro_Condition_1191864519940(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return IGenericFeature_Behavior.call_isSingleCardinality_1191862685760(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true));
  }

  public static boolean ifMacro_Condition_1191864550814(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(IGenericFeature_Behavior.call_isSingleCardinality_1191862685760(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true)));
  }

  public static boolean ifMacro_Condition_1195654147013(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_start");
  }

  public static boolean ifMacro_Condition_1195654147035(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end");
  }

  public static boolean ifMacro_Condition_1195654147067(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return (SLinkOperations.getTarget(node, "expression", true) != null) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression"));
  }

  public static boolean ifMacro_Condition_1195503585146(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return false;
  }

  public static boolean ifMacro_Condition_1195503097903(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_start");
  }

  public static boolean ifMacro_Condition_1195503127467(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end");
  }

  public static boolean ifMacro_Condition_1195503081328(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_start") || SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end");
  }

  public static boolean ifMacro_Condition_1195502928974(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end"));
  }

  public static boolean ifMacro_Condition_1195502863185(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_start");
  }

  public static boolean ifMacro_Condition_1195502827468(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end");
  }

  public static boolean ifMacro_Condition_1195502962500(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_start") || SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end");
  }

  public static boolean ifMacro_Condition_1195675187255(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return IRange_Behavior.call_isSelection_1194716132256(SLinkOperations.getTarget(node, "range", true)) || IRange_Behavior.call_isSingle_1194716995764(SLinkOperations.getTarget(node, "range", true));
  }

  public static boolean ifMacro_Condition_1195675293859(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression"));
  }

  public static boolean ifMacro_Condition_1196718724671(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_start");
  }

  public static boolean ifMacro_Condition_1196718724750(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end");
  }

  public static boolean ifMacro_Condition_1196783283227(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_start");
  }

  public static boolean ifMacro_Condition_1196783283306(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end");
  }

  public static boolean ifMacro_Condition_1196783519968(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_start");
  }

  public static boolean ifMacro_Condition_1196783520047(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end");
  }

  public static boolean ifMacro_Condition_1196804978674(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "includes_start");
  }

  public static boolean ifMacro_Condition_1196804999466(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "includes_start"));
  }

  public static List sourceNodesQuery_1195429203097(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    List<SNode> stmts = SModelOperations.getNodes(sourceModel, "jetbrains.mps.ypath.structure.ReplaceWritePathStatement");
    return SequenceOperations.toList(SequenceOperations.where(stmts, new zPredicate5(null, null)));
  }

  public static List sourceNodesQuery_1196716118756(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    List<SNode> newCandidates = ListOperations.createList(new SNode[]{});
    {
      ICursor<SNode> _zCursor = CursorFactory.createCursor(SLinkOperations.getTargets(node, "candidates", true));
      try {
        while(_zCursor.moveToNext()) {
          SNode foo = _zCursor.getCurrent();
          if(SNodeOperations.isInstanceOf(foo, "jetbrains.mps.ypath.structure.StatementAggregator")) {
            ListOperations.addAllElements(newCandidates, SLinkOperations.getTargets(foo, "candidates", true));
          } else
          {
            ListOperations.addElement(newCandidates, foo);
          }
        }
      } finally {
        _zCursor.release();
      }
    }
    return newCandidates;
  }

  public static SNode sourceNodeQuery_1196100177621(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1195737098123(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return node;
  }

  public static SNode sourceNodeQuery_1191861038777(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1195738527370(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    SNode expression = SLinkOperations.getTarget(node, "expression", true);
    return SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(expression), "nodeType", true);
  }

  public static SNode sourceNodeQuery_1195737740039(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    SNode expression = SLinkOperations.getTarget(node, "expression", true);
    return SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(expression), "nodeType", true);
  }

  public static SNode sourceNodeQuery_1194654504117(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1194654807657(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1194654778371(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "anchor", true);
  }

  public static SNode sourceNodeQuery_1194655235957(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1194655235966(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1194655237996(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1194655238005(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1194655239447(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1194729639536(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1194655241373(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1194655241383(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "anchor", true);
  }

  public static SNode sourceNodeQuery_1194727296294(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1194727341086(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1194727382535(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1194728257034(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1194728447046(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1194728504533(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1195654147024(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "notBefore", true);
  }

  public static SNode sourceNodeQuery_1195654147046(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "notAfter", true);
  }

  public static SNode sourceNodeQuery_1195654147057(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true);
  }

  public static SNode sourceNodeQuery_1195654147076(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1195501689419(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true);
  }

  public static SNode sourceNodeQuery_1196088141332(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196882865647 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196882865646 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true)), pattern_1196882865647);
      if(coercedNode_1196882865646 != null) {
        return SLinkOperations.getTarget(coercedNode_1196882865646, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1196097920623(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196882865864 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196882865863 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true)), pattern_1196882865864);
      if(coercedNode_1196882865863 != null) {
        return SLinkOperations.getTarget(coercedNode_1196882865863, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1195515931100(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196882866229 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196882866228 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node, "expression", true)), pattern_1196882866229);
      if(coercedNode_1196882866228 != null) {
        return SLinkOperations.getTarget(coercedNode_1196882866228, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1196092774624(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196093464818(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196093195256(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    SNode expression = SLinkOperations.getTarget(node, "expression", true);
    return SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(expression), "nodeType", true);
  }

  public static SNode sourceNodeQuery_1196716148727(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    SNode cand = SequenceOperations.getFirst(SequenceOperations.sort(SLinkOperations.getTargets(node, "candidates", true), new zComparator(null, null), false));
    if(SPropertyOperations.getInteger(cand, "priority") > 0) {
      return SLinkOperations.getTarget(cand, "statement", true);
    }
    return new QuotationClass_2().createNode();
  }

  public static SNode sourceNodeQuery_1196718841132(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    generator.getGeneratorSessionContext().putTransientObject("aggregate_byIndex" + ((SNode)node).getId(), Boolean.TRUE);
    return node;
  }

  public static SNode sourceNodeQuery_1196718724607(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "notBefore", true);
  }

  public static SNode sourceNodeQuery_1196718724620(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true);
  }

  public static SNode sourceNodeQuery_1196718724642(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196882866464 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196882866463 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true)), pattern_1196882866464);
      if(coercedNode_1196882866463 != null) {
        return SLinkOperations.getTarget(coercedNode_1196882866463, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1196718724662(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true);
  }

  public static SNode sourceNodeQuery_1196718724686(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "notAfter", true);
  }

  public static SNode sourceNodeQuery_1196718724699(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true);
  }

  public static SNode sourceNodeQuery_1196718724721(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196882866559 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196882866558 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true)), pattern_1196882866559);
      if(coercedNode_1196882866558 != null) {
        return SLinkOperations.getTarget(coercedNode_1196882866558, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1196718724741(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true);
  }

  public static SNode sourceNodeQuery_1196718724761(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196718724770(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196719429177(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    generator.getGeneratorSessionContext().putTransientObject("aggregate_byIndex" + ((SNode)node).getId(), Boolean.TRUE);
    return node;
  }

  public static SNode sourceNodeQuery_1196719089012(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196719089021(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196783300855(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    generator.getGeneratorSessionContext().putTransientObject("aggregate_byIndex" + ((SNode)node).getId(), Boolean.TRUE);
    return node;
  }

  public static SNode sourceNodeQuery_1196783283163(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "notBefore", true);
  }

  public static SNode sourceNodeQuery_1196783283176(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true);
  }

  public static SNode sourceNodeQuery_1196783283198(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196882866788 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196882866787 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true)), pattern_1196882866788);
      if(coercedNode_1196882866787 != null) {
        return SLinkOperations.getTarget(coercedNode_1196882866787, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1196783283218(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true);
  }

  public static SNode sourceNodeQuery_1196783283242(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "notAfter", true);
  }

  public static SNode sourceNodeQuery_1196783283255(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true);
  }

  public static SNode sourceNodeQuery_1196783283277(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196882866882 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196882866881 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true)), pattern_1196882866882);
      if(coercedNode_1196882866881 != null) {
        return SLinkOperations.getTarget(coercedNode_1196882866881, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1196783283297(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true);
  }

  public static SNode sourceNodeQuery_1196783283317(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196783283327(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196783368568(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    generator.getGeneratorSessionContext().putTransientObject("aggregate_byIndex" + ((SNode)node).getId(), Boolean.TRUE);
    return node;
  }

  public static SNode sourceNodeQuery_1196783360195(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196783360204(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196783452121(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    generator.getGeneratorSessionContext().putTransientObject("aggregate_byIndex" + ((SNode)node).getId(), Boolean.TRUE);
    return node;
  }

  public static SNode sourceNodeQuery_1196783441900(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196783441909(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196783484901(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    generator.getGeneratorSessionContext().putTransientObject("aggregate_byIndex" + ((SNode)node).getId(), Boolean.TRUE);
    return node;
  }

  public static SNode sourceNodeQuery_1196783477707(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196783477716(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196783529500(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    generator.getGeneratorSessionContext().putTransientObject("aggregate_byIndex" + ((SNode)node).getId(), Boolean.TRUE);
    return node;
  }

  public static SNode sourceNodeQuery_1196783519904(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "notBefore", true);
  }

  public static SNode sourceNodeQuery_1196783519917(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true);
  }

  public static SNode sourceNodeQuery_1196783519939(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196882867240 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196882867239 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true)), pattern_1196882867240);
      if(coercedNode_1196882867239 != null) {
        return SLinkOperations.getTarget(coercedNode_1196882867239, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1196783519959(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true);
  }

  public static SNode sourceNodeQuery_1196783519983(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "notAfter", true);
  }

  public static SNode sourceNodeQuery_1196783519996(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true);
  }

  public static SNode sourceNodeQuery_1196783520018(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196882867335 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196882867334 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true)), pattern_1196882867335);
      if(coercedNode_1196882867334 != null) {
        return SLinkOperations.getTarget(coercedNode_1196882867334, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1196783520038(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true);
  }

  public static SNode sourceNodeQuery_1196783520058(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196783520067(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196790455793(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    generator.getGeneratorSessionContext().putTransientObject("aggregate_replaceDemux" + ((SNode)node).getId(), Boolean.TRUE);
    return node;
  }

  public static SNode sourceNodeQuery_1196791423501(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196791401072(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196791283362(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196791378065(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "range", true);
  }

  public static SNode sourceNodeQuery_1196791992827(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    generator.getGeneratorSessionContext().putTransientObject("aggregate_replaceDemux" + ((SNode)node).getId(), Boolean.TRUE);
    return node;
  }

  public static SNode sourceNodeQuery_1196791992850(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196791992858(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196791992955(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196791992965(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "range", true);
  }

  public static SNode sourceNodeQuery_1196800634034(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    generator.getGeneratorSessionContext().putTransientObject("aggregate_insertBefore" + ((SNode)node).getId(), Boolean.TRUE);
    return node;
  }

  public static SNode sourceNodeQuery_1196800719237(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196800719246(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196800682672(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    generator.getGeneratorSessionContext().putTransientObject("aggregate_insertBefore" + ((SNode)node).getId(), Boolean.TRUE);
    return node;
  }

  public static SNode sourceNodeQuery_1196800682692(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196800682701(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196803315059(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true);
  }

  public static SNode sourceNodeQuery_1196803315081(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196882867785 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196882867784 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true)), pattern_1196882867785);
      if(coercedNode_1196882867784 != null) {
        return SLinkOperations.getTarget(coercedNode_1196882867784, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1196803315101(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true);
  }

  public static SNode sourceNodeQuery_1196800803523(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    generator.getGeneratorSessionContext().putTransientObject("aggregate_insertBefore" + ((SNode)node).getId(), Boolean.TRUE);
    return node;
  }

  public static SNode sourceNodeQuery_1196800873043(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196800873052(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196804029394(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    generator.getGeneratorSessionContext().putTransientObject("aggregate_removeSingle" + ((SNode)node).getId(), Boolean.TRUE);
    return node;
  }

  public static SNode sourceNodeQuery_1196804270807(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "end", true);
  }

  public static SNode sourceNodeQuery_1196804163843(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196804163853(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196804531551(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    generator.getGeneratorSessionContext().putTransientObject("aggregate_removeSingle" + ((SNode)node).getId(), Boolean.TRUE);
    return node;
  }

  public static SNode sourceNodeQuery_1196804864198(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "start", true);
  }

  public static SNode sourceNodeQuery_1196804990662(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "start", true);
  }

  public static SNode sourceNodeQuery_1196804824641(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true);
  }

  public static SNode sourceNodeQuery_1196804824664(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196882868089 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196882868088 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true)), pattern_1196882868089);
      if(coercedNode_1196882868088 != null) {
        return SLinkOperations.getTarget(coercedNode_1196882868088, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1196804824684(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true);
  }

  public static SNode sourceNodeQuery_1196804824697(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196804824706(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode mapSrcMacro_mapper_1195738527397(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode cp = SLinkOperations.getTarget(SNodeOperations.getAncestor(parentOutputNode, "jetbrains.mps.baseLanguage.ext.collections.lang.structure.MapperBlock", false, false), "defaultInputElement", true);
    SNode cpr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClosureParameterReference", null);
    SLinkOperations.setTarget(cpr, "closureParameter", cp, false);
    return cpr;
  }

  public static SNode mapSrcMacro_mapper_1191922729830(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode refIt = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(refIt, "variableDeclaration", SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getDescendants(SNodeOperations.getAncestor(parentOutputNode, "jetbrains.mps.baseLanguage.structure.StatementList", false, false), null, false), new zPredicate7(null, null))), false);
    SNode ge = IGenericFeature_Behavior.call_getterExpression_1191865774161(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), refIt, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true), generator);
    return CloneUtil.cloneNotPreservingId(ge, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1193757829951(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode refIt = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(refIt, "variableDeclaration", SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getDescendants(SNodeOperations.getAncestor(parentOutputNode, "jetbrains.mps.baseLanguage.structure.StatementList", false, false), null, false), new zPredicate8(null, null))), false);
    SNode ge = IGenericFeature_Behavior.call_getterExpression_1191865774161(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), refIt, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true), generator);
    return CloneUtil.cloneNotPreservingId(ge, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1195737976269(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode expression = SLinkOperations.getTarget(node, "expression", true);
    if(SNodeOperations.isInstanceOf(expression, "jetbrains.mps.ypath.structure.TreePathAdapterExpression")) {
      expression = SLinkOperations.getTarget(expression, "expression", true);
    }
    return CloneUtil.cloneNotPreservingId(expression, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1191922016311(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode refIt = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(refIt, "variableDeclaration", SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getDescendants(SNodeOperations.getAncestor(parentOutputNode, "jetbrains.mps.baseLanguage.structure.StatementList", false, false), null, false), new zPredicate9(null, null))), false);
    SNode ge = IGenericFeature_Behavior.call_getterExpression_1191865774161(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), refIt, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true), generator);
    return CloneUtil.cloneNotPreservingId(ge, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1191922089607(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode refIt = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(refIt, "variableDeclaration", SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getDescendants(SNodeOperations.getAncestor(parentOutputNode, "jetbrains.mps.baseLanguage.structure.StatementList", false, false), null, false), new zPredicate10(null, null))), false);
    SNode ge = IGenericFeature_Behavior.call_getterExpression_1191865774161(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), refIt, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true), generator);
    return CloneUtil.cloneNotPreservingId(ge, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1195670453347(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode gf = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
    return IGenericFeature_Behavior.call_replaceStatement_1194808495467(gf, SNodeOperations.copyNode(SLinkOperations.getTarget(node, "expression", true)), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true), SNodeOperations.copyNode(SLinkOperations.getTarget(node, "range", true)), SNodeOperations.copyNode(SLinkOperations.getTarget(node, "expression", true)), generator);
  }

  public static SNode mapSrcMacro_mapper_1195675204390(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode rwps = node;
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(rwps, "writePath", true), "usedFeature", false);
    SNode protoRange = SLinkOperations.getTarget(node, "range", true);
    SNode removeRange = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.ElementRange", protoRange);
    SPropertyOperations.set(removeRange, "has_start", "" + (SPropertyOperations.getBoolean(protoRange, "has_start")));
    SPropertyOperations.set(removeRange, "has_end", "" + (SPropertyOperations.getBoolean(protoRange, "has_end")));
    SPropertyOperations.set(removeRange, "includes_start", "" + (SPropertyOperations.getBoolean(protoRange, "includes_start")));
    SPropertyOperations.set(removeRange, "includes_end", "" + (SPropertyOperations.getBoolean(protoRange, "includes_end")));
    if(SPropertyOperations.getBoolean(removeRange, "has_start")) {
      SLinkOperations.setNewChild(removeRange, "notBefore", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(removeRange, "notBefore", true), "name", "notBefore");
    }
    if(SPropertyOperations.getBoolean(removeRange, "has_end")) {
      SLinkOperations.setNewChild(removeRange, "notAfter", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(removeRange, "notAfter", true), "name", "notAfter");
    }
    SNode rs = IGenericFeature_Behavior.call_removeStatement_1195432050864(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(rwps, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(rwps, "writePath", true), "paramObject", true), removeRange, generator);
    return CloneUtil.cloneNotPreservingId(rs, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1195675305931(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode rwps = node;
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(rwps, "writePath", true), "usedFeature", false);
    SNode protoRange = SLinkOperations.getTarget(node, "range", true);
    SNode insertRange = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.ElementRange", protoRange);
    SPropertyOperations.set(insertRange, "has_start", "" + (SPropertyOperations.getBoolean(protoRange, "has_start")));
    SPropertyOperations.set(insertRange, "has_end", "" + (SPropertyOperations.getBoolean(protoRange, "has_end")));
    SPropertyOperations.set(insertRange, "includes_start", "" + (SPropertyOperations.getBoolean(protoRange, "includes_start")));
    SPropertyOperations.set(insertRange, "includes_end", "" + (SPropertyOperations.getBoolean(protoRange, "includes_end")));
    if(SPropertyOperations.getBoolean(insertRange, "has_start")) {
      SLinkOperations.setNewChild(insertRange, "notBefore", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(insertRange, "notBefore", true), "name", "__l_");
    }
    if(SPropertyOperations.getBoolean(insertRange, "has_end")) {
      SLinkOperations.setNewChild(insertRange, "notAfter", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(insertRange, "notAfter", true), "name", "_r__");
    }
    SNode pr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference", null);
    SPropertyOperations.set(pr, "name", "replaceExp");
    SNode is = IGenericFeature_Behavior.call_insertStatement_1195432326179(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(rwps, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(rwps, "writePath", true), "paramObject", true), insertRange, pr, generator);
    return CloneUtil.cloneNotPreservingId(is, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196615333654(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
    SNode rs = IGenericFeature_Behavior.call_replaceStatement_1194808495467(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true), generator);
    if(rs == null) {
      return SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.NotAStatement", null);
    }
    return CloneUtil.cloneNotPreservingId(rs, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196615259356(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
    SNode rs = IGenericFeature_Behavior.call_replaceStatement_1194808495467(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true), generator);
    if(rs == null) {
      return SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.NotAStatement", null);
    }
    return CloneUtil.cloneNotPreservingId(rs, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196615277216(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
    SNode rs = IGenericFeature_Behavior.call_replaceStatement_1194808495467(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true), generator);
    if(rs == null) {
      return SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.NotAStatement", null);
    }
    return CloneUtil.cloneNotPreservingId(rs, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196600423556(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
    SNode rs = IGenericFeature_Behavior.call_removeStatement_1195432050864(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true), SLinkOperations.getTarget(node, "range", true), generator);
    if(rs == null) {
      return SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.NotAStatement", null);
    }
    return CloneUtil.cloneNotPreservingId(rs, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196599101382(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
    SNode rs = IGenericFeature_Behavior.call_removeStatement_1195432050864(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true), SLinkOperations.getTarget(node, "range", true), generator);
    if(rs == null) {
      return SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.NotAStatement", null);
    }
    return CloneUtil.cloneNotPreservingId(rs, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196598547056(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
    SNode rs = IGenericFeature_Behavior.call_removeStatement_1195432050864(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true), SLinkOperations.getTarget(node, "range", true), generator);
    if(rs == null) {
      return SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.NotAStatement", null);
    }
    return CloneUtil.cloneNotPreservingId(rs, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196621431704(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
    SNode is = IGenericFeature_Behavior.call_insertStatement_1195432326179(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true), generator);
    if(is == null) {
      return SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.NotAStatement", null);
    }
    return CloneUtil.cloneNotPreservingId(is, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196619981661(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
    SNode is = IGenericFeature_Behavior.call_insertStatement_1195432326179(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true), generator);
    if(is == null) {
      return SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.NotAStatement", null);
    }
    return CloneUtil.cloneNotPreservingId(is, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196092852763(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode cp = SLinkOperations.getTarget(SNodeOperations.getAncestor(parentOutputNode, "jetbrains.mps.baseLanguage.ext.collections.lang.structure.MapperBlock", false, false), "defaultInputElement", true);
    SNode cpr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClosureParameterReference", null);
    SLinkOperations.setTarget(cpr, "closureParameter", cp, false);
    SNode ge = IGenericFeature_Behavior.call_getterExpression_1191865774161(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), cpr, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true), generator);
    return CloneUtil.cloneNotPreservingId(ge, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196093464947(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode cp = SLinkOperations.getTarget(SNodeOperations.getAncestor(parentOutputNode, "jetbrains.mps.baseLanguage.ext.collections.lang.structure.MapperBlock", false, false), "defaultInputElement", true);
    SNode cpr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClosureParameterReference", null);
    SLinkOperations.setTarget(cpr, "closureParameter", cp, false);
    SNode ge = IGenericFeature_Behavior.call_getterExpression_1191865774161(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), cpr, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true), generator);
    return CloneUtil.cloneNotPreservingId(ge, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196093195273(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode expression = SLinkOperations.getTarget(node, "expression", true);
    if(SNodeOperations.isInstanceOf(expression, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression")) {
      expression = SLinkOperations.getTarget(expression, "expression", true);
    }
    if(SNodeOperations.isInstanceOf(expression, "jetbrains.mps.ypath.structure.TreePathAdapterExpression")) {
      expression = SLinkOperations.getTarget(expression, "expression", true);
    }
    if(SNodeOperations.isInstanceOf(expression, "jetbrains.mps.baseLanguage.structure.CastExpression")) {
      expression = SLinkOperations.getTarget(expression, "expression", true);
    }
    return CloneUtil.cloneNotPreservingId(expression, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196093195304(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode refIt = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(refIt, "variableDeclaration", SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getDescendants(SNodeOperations.getAncestor(parentOutputNode, "jetbrains.mps.baseLanguage.structure.StatementList", false, false), null, false), new zPredicate11(null, null))), false);
    SNode ge = IGenericFeature_Behavior.call_getterExpression_1191865774161(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), refIt, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true), generator);
    return CloneUtil.cloneNotPreservingId(ge, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196093301789(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode expression = SLinkOperations.getTarget(node, "expression", true);
    if(SNodeOperations.isInstanceOf(expression, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression")) {
      expression = SLinkOperations.getTarget(expression, "expression", true);
    }
    if(SNodeOperations.isInstanceOf(expression, "jetbrains.mps.ypath.structure.TreePathAdapterExpression")) {
      expression = SLinkOperations.getTarget(expression, "expression", true);
    }
    if(SNodeOperations.isInstanceOf(expression, "jetbrains.mps.baseLanguage.structure.CastExpression")) {
      expression = SLinkOperations.getTarget(expression, "expression", true);
    }
    SNode srcExp = CloneUtil.cloneNotPreservingId(expression, generator.getTargetModel(), generator.getScope());
    SNode ge = IGenericFeature_Behavior.call_getterExpression_1191865774161(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), srcExp, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true), generator);
    return CloneUtil.cloneNotPreservingId(ge, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196718724780(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode protoRange = SLinkOperations.getTarget(node, "range", true);
    SNode removeRange = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.IndexRange", null);
    SPropertyOperations.set(removeRange, "has_start", "" + (SPropertyOperations.getBoolean(protoRange, "has_start")));
    SPropertyOperations.set(removeRange, "has_end", "" + (SPropertyOperations.getBoolean(protoRange, "has_end")));
    SPropertyOperations.set(removeRange, "includes_start", "" + (SPropertyOperations.getBoolean(protoRange, "includes_start")));
    SPropertyOperations.set(removeRange, "includes_end", "" + (SPropertyOperations.getBoolean(protoRange, "includes_end")));
    if(SPropertyOperations.getBoolean(removeRange, "has_start")) {
      SLinkOperations.setNewChild(removeRange, "start", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(removeRange, "end", true), "name", "startIdx");
    }
    if(SPropertyOperations.getBoolean(removeRange, "has_end")) {
      SLinkOperations.setNewChild(removeRange, "end", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(removeRange, "end", true), "name", "endIdx");
    }
    return removeRange;
  }

  public static SNode mapSrcMacro_mapper_1196783283337(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode protoRange = SLinkOperations.getTarget(node, "range", true);
    SNode removeRange = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.IndexRange", null);
    SPropertyOperations.set(removeRange, "has_start", "" + (SPropertyOperations.getBoolean(protoRange, "has_start")));
    SPropertyOperations.set(removeRange, "has_end", "" + (SPropertyOperations.getBoolean(protoRange, "has_end")));
    SPropertyOperations.set(removeRange, "includes_start", "" + (SPropertyOperations.getBoolean(protoRange, "includes_start")));
    SPropertyOperations.set(removeRange, "includes_end", "" + (SPropertyOperations.getBoolean(protoRange, "includes_end")));
    if(SPropertyOperations.getBoolean(removeRange, "has_start")) {
      SLinkOperations.setNewChild(removeRange, "start", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(removeRange, "end", true), "name", "startIdx");
    }
    if(SPropertyOperations.getBoolean(removeRange, "has_end")) {
      SLinkOperations.setNewChild(removeRange, "end", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(removeRange, "end", true), "name", "endIdx");
    }
    return removeRange;
  }

  public static SNode mapSrcMacro_mapper_1196783520077(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode protoRange = SLinkOperations.getTarget(node, "range", true);
    SNode insertRange = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.IndexRange", null);
    SPropertyOperations.set(insertRange, "has_start", "" + (SPropertyOperations.getBoolean(protoRange, "has_start")));
    SPropertyOperations.set(insertRange, "has_end", "" + (SPropertyOperations.getBoolean(protoRange, "has_end")));
    SPropertyOperations.set(insertRange, "includes_start", "" + (SPropertyOperations.getBoolean(protoRange, "includes_start")));
    SPropertyOperations.set(insertRange, "includes_end", "" + (SPropertyOperations.getBoolean(protoRange, "includes_end")));
    if(SPropertyOperations.getBoolean(insertRange, "has_start")) {
      SLinkOperations.setNewChild(insertRange, "start", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(insertRange, "end", true), "name", "startIdx");
    }
    if(SPropertyOperations.getBoolean(insertRange, "has_end")) {
      SLinkOperations.setNewChild(insertRange, "end", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(insertRange, "end", true), "name", "endIdx");
    }
    return insertRange;
  }

  public static SNode mapSrcMacro_mapper_1196791449866(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode protoRange = SLinkOperations.getTarget(node, "range", true);
    SNode insertionPoint = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.ElementRange", null);
    SPropertyOperations.set(insertionPoint, "has_start", "" + (IRange_Behavior.call_isLeftOpenSelection_1195414499574(protoRange)));
    SPropertyOperations.set(insertionPoint, "has_end", "" + (!(IRange_Behavior.call_isLeftOpenSelection_1195414499574(protoRange))));
    SPropertyOperations.set(insertionPoint, "includes_start", "" + (false));
    SPropertyOperations.set(insertionPoint, "includes_end", "" + (false));
    if(SPropertyOperations.getBoolean(insertionPoint, "has_start")) {
      SLinkOperations.setTarget(insertionPoint, "notBefore", SNodeOperations.copyNode(SLinkOperations.getTarget(protoRange, "notAfter", true)), true);
    }
    if(SPropertyOperations.getBoolean(insertionPoint, "has_end")) {
      SLinkOperations.setTarget(insertionPoint, "notAfter", SNodeOperations.copyNode(SLinkOperations.getTarget(protoRange, "notBefore", true)), true);
    }
    return insertionPoint;
  }

  public static SNode mapSrcMacro_mapper_1196791992868(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode protoRange = SLinkOperations.getTarget(node, "range", true);
    SNode insertionPoint = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.IndexRange", null);
    SPropertyOperations.set(insertionPoint, "has_start", "" + (IRange_Behavior.call_isLeftOpenSelection_1195414499574(protoRange)));
    SPropertyOperations.set(insertionPoint, "has_end", "" + (!(IRange_Behavior.call_isLeftOpenSelection_1195414499574(protoRange))));
    SPropertyOperations.set(insertionPoint, "includes_start", "" + (false));
    SPropertyOperations.set(insertionPoint, "includes_end", "" + (false));
    if(SPropertyOperations.getBoolean(insertionPoint, "has_start")) {
      SLinkOperations.setTarget(insertionPoint, "start", SNodeOperations.copyNode(SLinkOperations.getTarget(protoRange, "end", true)), true);
    }
    if(SPropertyOperations.getBoolean(insertionPoint, "has_end")) {
      SLinkOperations.setTarget(insertionPoint, "end", SNodeOperations.copyNode(SLinkOperations.getTarget(protoRange, "start", true)), true);
    }
    return insertionPoint;
  }

  public static SNode mapSrcMacro_mapper_1196801597997(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode pe = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.PlusExpression", null);
    SLinkOperations.setTarget(pe, "leftExpression", SNodeOperations.copyNode(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "start", true)), true);
    SLinkOperations.setNewChild(pe, "rightExpression", "jetbrains.mps.baseLanguage.structure.IntegerConstant");
    SPropertyOperations.set(SLinkOperations.getTarget(pe, "rightExpression", true), "value", "" + (1));
    return pe;
  }

  public static SNode mapSrcMacro_mapper_1196804396551(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode zeroOrOne = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IntegerConstant", null);
    SPropertyOperations.set(zeroOrOne, "value", "" + ((SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "includes_end") ?
      0 :
      1
    )));
    return zeroOrOne;
  }

}
