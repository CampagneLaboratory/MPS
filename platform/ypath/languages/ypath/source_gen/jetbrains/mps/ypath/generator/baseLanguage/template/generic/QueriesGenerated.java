package jetbrains.mps.ypath.generator.baseLanguage.template.generic;

/*Generated by MPS */

import jetbrains.mps.smodel.SModel;
import jetbrains.mps.generator.template.ITemplateGenerator;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.ypath.constraints.IRange_Behavior;
import jetbrains.mps.ypath.constraints.IGenericFeature_Behavior;
import jetbrains.mps.generator.JavaNameUtil;
import jetbrains.mps.ypath.constraints.ReplaceWritePathStatement_Behavior;
import jetbrains.mps.patterns.IMatchingPattern;
import jetbrains.mps.bootstrap.helgins.runtime.HUtil;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.generator.newGenerator.CloneUtil;

public class QueriesGenerated {

  public static boolean createRootRule_Condition_1195732611871(SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SequenceOperations.isEmpty(SModelOperations.getNodes(sourceModel, "jetbrains.mps.ypath.structure.ReplaceWritePathStatement")));
  }

  public static boolean baseMappingRule_Condition_1191842720188(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "operation", true), "jetbrains.mps.ypath.structure.IterateOperation") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature");
  }

  public static boolean baseMappingRule_Condition_1196100060391(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    SNode tpoe = SNodeOperations.getAncestor(node, "jetbrains.mps.ypath.structure.TreePathOperationExpression", false, false);
    if((tpoe != null)) {
      if(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(tpoe, "operation", true), "jetbrains.mps.ypath.structure.IterateOperation")) {
        return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(tpoe, "operation", true), "usedFeature", false), "jetbrains.mps.ypath.structure.IGenericFeature");
      }
    }
    List<SNode> features = SLinkOperations.getTargets(SLinkOperations.getTarget(node, "treepathAspect", false), "features", true);
    return SequenceOperations.isEmpty(SequenceOperations.where(features, new zPredicate(null, null))) && !(SequenceOperations.isEmpty(features));
  }

  public static boolean baseMappingRule_Condition_1196091747822(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SequenceOperations.isEmpty(SequenceOperations.where(SNodeOperations.getDescendants(node, null, false), new zPredicate1(null, null)));
  }

  public static boolean baseMappingRule_Condition_1196092164894(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SequenceOperations.isEmpty(SequenceOperations.where(SNodeOperations.getDescendants(node, null, false), new zPredicate2(null, null))));
  }

  public static boolean baseMappingRule_Condition_1194727667091(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    SNode type = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node, "expression", true));
    SNode targType = SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node, "writePath", true)), "targetType", true);
    return !(TypeChecker.getInstance().getSubtypingManager().isSubtype(type, new QuotationClass_().createNode(targType)));
  }

  public static boolean baseMappingRule_Condition_1194727970307(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    SNode type = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node, "expression", true));
    SNode targType = SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node, "writePath", true)), "targetType", true);
    return TypeChecker.getInstance().getSubtypingManager().isSubtype(type, new QuotationClass_1().createNode(targType));
  }

  public static boolean baseMappingRule_Condition_1194727311425(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(node, "before");
  }

  public static boolean baseMappingRule_Condition_1194727359444(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SPropertyOperations.getBoolean(node, "before"));
  }

  public static boolean baseMappingRule_Condition_1194728309348(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(node, "before");
  }

  public static boolean baseMappingRule_Condition_1194728474411(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SPropertyOperations.getBoolean(node, "before"));
  }

  public static boolean baseMappingRule_Condition_1191841928731(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SNodeOperations.isInstanceOf(node, "jetbrains.mps.ypath.structure.ReplaceWritePathStatement"));
  }

  public static boolean baseMappingRule_Condition_1196615333614(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression")) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && IRange_Behavior.call_isSelection_1194716132256(SLinkOperations.getTarget(node, "range", true)) && IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
  }

  public static boolean baseMappingRule_Condition_1196615148391(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression")) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && IRange_Behavior.call_isSelection_1194716132256(SLinkOperations.getTarget(node, "range", true)) && !(IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true)));
  }

  public static boolean baseMappingRule_Condition_1196615259322(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression")) && IRange_Behavior.call_isAll_1196442108666(SLinkOperations.getTarget(node, "range", true)) && IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
  }

  public static boolean baseMappingRule_Condition_1196615296646(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression")) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && IRange_Behavior.call_isAll_1196442108666(SLinkOperations.getTarget(node, "range", true)) && !(IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true)));
  }

  public static boolean baseMappingRule_Condition_1196615277190(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression")) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.IndexRange") && IRange_Behavior.call_isSelection_1194716132256(SLinkOperations.getTarget(node, "range", true));
  }

  public static boolean baseMappingRule_Condition_1196600366364(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && IRange_Behavior.call_isSelection_1194716132256(SLinkOperations.getTarget(node, "range", true)) && IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
  }

  public static boolean baseMappingRule_Condition_1196600744681(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && IRange_Behavior.call_isSelection_1194716132256(SLinkOperations.getTarget(node, "range", true)) && !(IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true)));
  }

  public static boolean baseMappingRule_Condition_1196599064098(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression") && IRange_Behavior.call_isAll_1196442108666(SLinkOperations.getTarget(node, "range", true)) && IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
  }

  public static boolean baseMappingRule_Condition_1196605998674(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && IRange_Behavior.call_isAll_1196442108666(SLinkOperations.getTarget(node, "range", true)) && !(IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true)));
  }

  public static boolean baseMappingRule_Condition_1196598097973(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.IndexRange") && IRange_Behavior.call_isSelection_1194716132256(SLinkOperations.getTarget(node, "range", true)) && IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
  }

  public static boolean baseMappingRule_Condition_1196621431671(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && IRange_Behavior.call_isInsertionPoint_1194716377388(SLinkOperations.getTarget(node, "range", true)) && IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
  }

  public static boolean baseMappingRule_Condition_1196621100860(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && IRange_Behavior.call_isInsertionPoint_1194716377388(SLinkOperations.getTarget(node, "range", true)) && SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "includes_start") && !(IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true)));
  }

  public static boolean baseMappingRule_Condition_1196621148786(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && IRange_Behavior.call_isInsertionPoint_1194716377388(SLinkOperations.getTarget(node, "range", true)) && SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "includes_end") && !(IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true)));
  }

  public static boolean baseMappingRule_Condition_1196621584657(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.ElementRange") && IRange_Behavior.call_isInsertionPoint_1194716377388(SLinkOperations.getTarget(node, "range", true)) && (SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_start") || SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end")) && !(IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true)));
  }

  public static boolean baseMappingRule_Condition_1196619372541(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.IndexRange") && IRange_Behavior.call_isInsertionPoint_1194716377388(SLinkOperations.getTarget(node, "range", true)) && IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
  }

  public static boolean baseMappingRule_Condition_1196620037172(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.IndexRange") && IRange_Behavior.call_isInsertionPoint_1194716377388(SLinkOperations.getTarget(node, "range", true)) && SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "includes_start") && !(IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true)));
  }

  public static boolean baseMappingRule_Condition_1196620283775(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "range", true), "jetbrains.mps.ypath.structure.IndexRange") && IRange_Behavior.call_isInsertionPoint_1194716377388(SLinkOperations.getTarget(node, "range", true)) && SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "includes_end") && !(IGenericFeature_Behavior.call_hasModifyStatement_1196599220969(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true)));
  }

  public static boolean baseMappingRule_Condition_1196092584522(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return IGenericFeature_Behavior.call_isSingleCardinality_1191862685760(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true));
  }

  public static boolean baseMappingRule_Condition_1196092614299(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(IGenericFeature_Behavior.call_isSingleCardinality_1191862685760(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true)));
  }

  public static boolean baseMappingRule_Condition_1196093067844(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return IGenericFeature_Behavior.call_isSingleCardinality_1191862685760(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true));
  }

  public static boolean baseMappingRule_Condition_1196093087802(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(IGenericFeature_Behavior.call_isSingleCardinality_1191862685760(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true)));
  }

  public static Object propertyMacro_GetPropertyValue_1195654147085(SNode node, String templateValue, SNode templateNode, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return JavaNameUtil.fqClassName(sourceModel, "_Replace");
  }

  public static Object propertyMacro_GetPropertyValue_1195654147090(SNode node, String templateValue, SNode templateNode, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return ReplaceWritePathStatement_Behavior.call_getReplaceMethodName_1195503897285(node);
  }

  public static Object propertyMacro_GetPropertyValue_1195503710697(SNode node, String templateValue, SNode templateNode, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return ReplaceWritePathStatement_Behavior.call_getReplaceMethodName_1195503897285(node);
  }

  public static SNode referenceMacro_GetReferent_1195501610661(SNode node, SNode templateNode, SNode outputNode, SModel sourceModel, ITemplateGenerator generator) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
  }

  public static SNode referenceMacro_GetReferent_1196615148461(SNode node, SNode templateNode, SNode outputNode, SModel sourceModel, ITemplateGenerator generator) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
  }

  public static SNode referenceMacro_GetReferent_1196615148541(SNode node, SNode templateNode, SNode outputNode, SModel sourceModel, ITemplateGenerator generator) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
  }

  public static SNode referenceMacro_GetReferent_1196614436704(SNode node, SNode templateNode, SNode outputNode, SModel sourceModel, ITemplateGenerator generator) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
  }

  public static SNode referenceMacro_GetReferent_1196614445352(SNode node, SNode templateNode, SNode outputNode, SModel sourceModel, ITemplateGenerator generator) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
  }

  public static SNode referenceMacro_GetReferent_1196621584727(SNode node, SNode templateNode, SNode outputNode, SModel sourceModel, ITemplateGenerator generator) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
  }

  public static SNode referenceMacro_GetReferent_1196621584806(SNode node, SNode templateNode, SNode outputNode, SModel sourceModel, ITemplateGenerator generator) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
  }

  public static SNode referenceMacro_GetReferent_1196621026755(SNode node, SNode templateNode, SNode outputNode, SModel sourceModel, ITemplateGenerator generator) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
  }

  public static boolean ifMacro_Condition_1191863129014(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return IGenericFeature_Behavior.call_isSingleCardinality_1191862685760(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true));
  }

  public static boolean ifMacro_Condition_1193757842704(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(IGenericFeature_Behavior.call_isSingleCardinality_1191862685760(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true)));
  }

  public static boolean ifMacro_Condition_1191864519940(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return IGenericFeature_Behavior.call_isSingleCardinality_1191862685760(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true));
  }

  public static boolean ifMacro_Condition_1191864550814(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(IGenericFeature_Behavior.call_isSingleCardinality_1191862685760(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true)));
  }

  public static boolean ifMacro_Condition_1195654147013(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_start");
  }

  public static boolean ifMacro_Condition_1195654147035(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end");
  }

  public static boolean ifMacro_Condition_1195654147067(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return (SLinkOperations.getTarget(node, "expression", true) != null) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression"));
  }

  public static boolean ifMacro_Condition_1195503585146(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return false;
  }

  public static boolean ifMacro_Condition_1195503097903(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_start");
  }

  public static boolean ifMacro_Condition_1195503127467(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end");
  }

  public static boolean ifMacro_Condition_1195503081328(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_start") || SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end");
  }

  public static boolean ifMacro_Condition_1195502928974(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end"));
  }

  public static boolean ifMacro_Condition_1195502863185(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_start");
  }

  public static boolean ifMacro_Condition_1195502827468(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end");
  }

  public static boolean ifMacro_Condition_1195502962500(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_start") || SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end");
  }

  public static boolean ifMacro_Condition_1195675187255(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return IRange_Behavior.call_isSelection_1194716132256(SLinkOperations.getTarget(node, "range", true)) || IRange_Behavior.call_isSingleselection_1194716995764(SLinkOperations.getTarget(node, "range", true));
  }

  public static boolean ifMacro_Condition_1195675293859(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "expression", true), "jetbrains.mps.ypath.structure.EmptySequenceExpression"));
  }

  public static boolean ifMacro_Condition_1196615148504(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_start");
  }

  public static boolean ifMacro_Condition_1196615148583(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end");
  }

  public static boolean ifMacro_Condition_1196614673286(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_start");
  }

  public static boolean ifMacro_Condition_1196614690097(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end");
  }

  public static boolean ifMacro_Condition_1196621584769(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_start");
  }

  public static boolean ifMacro_Condition_1196621584849(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getBoolean(SLinkOperations.getTarget(node, "range", true), "has_end");
  }

  public static List sourceNodesQuery_1195429203097(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    List<SNode> stmts = SModelOperations.getNodes(sourceModel, "jetbrains.mps.ypath.structure.ReplaceWritePathStatement");
    return SequenceOperations.toList(SequenceOperations.where(stmts, new zPredicate3(null, null)));
  }

  public static SNode sourceNodeQuery_1196100177621(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1195737098123(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return node;
  }

  public static SNode sourceNodeQuery_1191861038777(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1195738527370(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    SNode expression = SLinkOperations.getTarget(node, "expression", true);
    return SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(expression), "nodeType", true);
  }

  public static SNode sourceNodeQuery_1195737740039(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    SNode expression = SLinkOperations.getTarget(node, "expression", true);
    return SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(expression), "nodeType", true);
  }

  public static SNode sourceNodeQuery_1194654504117(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1194654807657(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1194654778371(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "anchor", true);
  }

  public static SNode sourceNodeQuery_1194655235957(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1194655235966(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1194655237996(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1194655238005(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1194655239447(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1194729639536(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1194655241373(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1194655241383(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "anchor", true);
  }

  public static SNode sourceNodeQuery_1194727296294(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1194727341086(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1194727382535(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1194728257034(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1194728447046(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1194728504533(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1195654147024(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "notBefore", true);
  }

  public static SNode sourceNodeQuery_1195654147046(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "notAfter", true);
  }

  public static SNode sourceNodeQuery_1195654147057(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true);
  }

  public static SNode sourceNodeQuery_1195654147076(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1195501689419(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true);
  }

  public static SNode sourceNodeQuery_1196088141332(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196695069258 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196695069257 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true)), pattern_1196695069258);
      if(coercedNode_1196695069257 != null) {
        return SLinkOperations.getTarget(coercedNode_1196695069257, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1196097920623(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196695069289 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196695069288 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true)), pattern_1196695069289);
      if(coercedNode_1196695069288 != null) {
        return SLinkOperations.getTarget(coercedNode_1196695069288, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1195515931100(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196695069319 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196695069318 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node, "expression", true)), pattern_1196695069319);
      if(coercedNode_1196695069318 != null) {
        return SLinkOperations.getTarget(coercedNode_1196695069318, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1196615148439(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "notBefore", true);
  }

  public static SNode sourceNodeQuery_1196615148452(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true);
  }

  public static SNode sourceNodeQuery_1196615148475(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196695069389 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196695069388 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true)), pattern_1196695069389);
      if(coercedNode_1196695069388 != null) {
        return SLinkOperations.getTarget(coercedNode_1196695069388, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1196615148495(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true);
  }

  public static SNode sourceNodeQuery_1196615148519(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "notAfter", true);
  }

  public static SNode sourceNodeQuery_1196615148532(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true);
  }

  public static SNode sourceNodeQuery_1196615148554(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196695069481 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196695069480 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true)), pattern_1196695069481);
      if(coercedNode_1196695069480 != null) {
        return SLinkOperations.getTarget(coercedNode_1196695069480, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1196615148574(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true);
  }

  public static SNode sourceNodeQuery_1196615148594(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196615148603(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196615296689(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196615296698(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196614327628(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "notBefore", true);
  }

  public static SNode sourceNodeQuery_1196614436695(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true);
  }

  public static SNode sourceNodeQuery_1196614436718(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196695069646 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196695069645 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true)), pattern_1196695069646);
      if(coercedNode_1196695069645 != null) {
        return SLinkOperations.getTarget(coercedNode_1196695069645, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1196614547789(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true);
  }

  public static SNode sourceNodeQuery_1196614352391(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "notAfter", true);
  }

  public static SNode sourceNodeQuery_1196614445343(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true);
  }

  public static SNode sourceNodeQuery_1196614445366(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196695069739 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196695069738 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true)), pattern_1196695069739);
      if(coercedNode_1196695069738 != null) {
        return SLinkOperations.getTarget(coercedNode_1196695069738, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1196614605568(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true);
  }

  public static SNode sourceNodeQuery_1196600890438(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196600844113(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196606115833(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196606099320(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196621100902(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196621100911(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196621148827(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196621148836(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196621584705(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "notBefore", true);
  }

  public static SNode sourceNodeQuery_1196621584718(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true);
  }

  public static SNode sourceNodeQuery_1196621584740(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196695069977 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196695069976 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true)), pattern_1196695069977);
      if(coercedNode_1196695069976 != null) {
        return SLinkOperations.getTarget(coercedNode_1196695069976, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1196621584760(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true);
  }

  public static SNode sourceNodeQuery_1196621584784(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "range", true), "notAfter", true);
  }

  public static SNode sourceNodeQuery_1196621584797(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true);
  }

  public static SNode sourceNodeQuery_1196621584820(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196695070069 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196695070068 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true)), pattern_1196695070069);
      if(coercedNode_1196695070068 != null) {
        return SLinkOperations.getTarget(coercedNode_1196695070068, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1196621584840(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true);
  }

  public static SNode sourceNodeQuery_1196621584860(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196621584869(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196620125287(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196620125296(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196620283815(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196620283824(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "writePath", true);
  }

  public static SNode sourceNodeQuery_1196621026746(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true);
  }

  public static SNode sourceNodeQuery_1196621026768(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    {
      IMatchingPattern pattern_1196695070250 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1196695070249 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true)), pattern_1196695070250);
      if(coercedNode_1196695070249 != null) {
        return SLinkOperations.getTarget(coercedNode_1196695070249, "elementType", true);
      }
    }
    return null;
  }

  public static SNode sourceNodeQuery_1196621026788(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true);
  }

  public static SNode sourceNodeQuery_1196092774624(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196093464818(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "expression", true);
  }

  public static SNode sourceNodeQuery_1196093195256(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    SNode expression = SLinkOperations.getTarget(node, "expression", true);
    return SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(expression), "nodeType", true);
  }

  public static SNode mapSrcMacro_mapper_1195738527397(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode cp = SLinkOperations.getTarget(SNodeOperations.getAncestor(parentOutputNode, "jetbrains.mps.baseLanguage.ext.collections.lang.structure.MapperBlock", false, false), "defaultInputElement", true);
    SNode cpr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClosureParameterReference", null);
    SLinkOperations.setTarget(cpr, "closureParameter", cp, false);
    return cpr;
  }

  public static SNode mapSrcMacro_mapper_1191922729830(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode refIt = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(refIt, "variableDeclaration", SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getDescendants(SNodeOperations.getAncestor(parentOutputNode, "jetbrains.mps.baseLanguage.structure.StatementList", false, false), null, false), new zPredicate4(null, null))), false);
    SNode ge = IGenericFeature_Behavior.call_getterExpression_1191865774161(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), refIt, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true));
    return CloneUtil.cloneNotPreservingId(ge, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1193757829951(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode refIt = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(refIt, "variableDeclaration", SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getDescendants(SNodeOperations.getAncestor(parentOutputNode, "jetbrains.mps.baseLanguage.structure.StatementList", false, false), null, false), new zPredicate5(null, null))), false);
    SNode ge = IGenericFeature_Behavior.call_getterExpression_1191865774161(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), refIt, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true));
    return CloneUtil.cloneNotPreservingId(ge, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1195737976269(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode expression = SLinkOperations.getTarget(node, "expression", true);
    if(SNodeOperations.isInstanceOf(expression, "jetbrains.mps.ypath.structure.TreePathAdapterExpression")) {
      expression = SLinkOperations.getTarget(expression, "expression", true);
    }
    return CloneUtil.cloneNotPreservingId(expression, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1191922016311(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode refIt = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(refIt, "variableDeclaration", SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getDescendants(SNodeOperations.getAncestor(parentOutputNode, "jetbrains.mps.baseLanguage.structure.StatementList", false, false), null, false), new zPredicate6(null, null))), false);
    SNode ge = IGenericFeature_Behavior.call_getterExpression_1191865774161(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), refIt, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true));
    return CloneUtil.cloneNotPreservingId(ge, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1191922089607(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode refIt = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(refIt, "variableDeclaration", SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getDescendants(SNodeOperations.getAncestor(parentOutputNode, "jetbrains.mps.baseLanguage.structure.StatementList", false, false), null, false), new zPredicate7(null, null))), false);
    SNode ge = IGenericFeature_Behavior.call_getterExpression_1191865774161(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), refIt, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true));
    return CloneUtil.cloneNotPreservingId(ge, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1195670453347(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode gf = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
    return IGenericFeature_Behavior.call_replaceStatement_1194808495467(gf, SNodeOperations.copyNode(SLinkOperations.getTarget(node, "expression", true)), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true), SNodeOperations.copyNode(SLinkOperations.getTarget(node, "range", true)), SNodeOperations.copyNode(SLinkOperations.getTarget(node, "expression", true)));
  }

  public static SNode mapSrcMacro_mapper_1195675204390(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode rwps = node;
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(rwps, "writePath", true), "usedFeature", false);
    SNode protoRange = SLinkOperations.getTarget(node, "range", true);
    SNode removeRange = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.ElementRange", protoRange);
    SPropertyOperations.set(removeRange, "has_start", "" + (SPropertyOperations.getBoolean(protoRange, "has_start")));
    SPropertyOperations.set(removeRange, "has_end", "" + (SPropertyOperations.getBoolean(protoRange, "has_end")));
    SPropertyOperations.set(removeRange, "includes_start", "" + (SPropertyOperations.getBoolean(protoRange, "includes_start")));
    SPropertyOperations.set(removeRange, "includes_end", "" + (SPropertyOperations.getBoolean(protoRange, "includes_end")));
    if(SPropertyOperations.getBoolean(removeRange, "has_start")) {
      SLinkOperations.setNewChild(removeRange, "notBefore", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(removeRange, "notBefore", true), "name", "notBefore");
    }
    if(SPropertyOperations.getBoolean(removeRange, "has_end")) {
      SLinkOperations.setNewChild(removeRange, "notAfter", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(removeRange, "notAfter", true), "name", "notAfter");
    }
    SNode rs = IGenericFeature_Behavior.call_removeStatement_1195432050864(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(rwps, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(rwps, "writePath", true), "paramObject", true), removeRange);
    return CloneUtil.cloneNotPreservingId(rs, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1195675305931(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode rwps = node;
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(rwps, "writePath", true), "usedFeature", false);
    SNode protoRange = SLinkOperations.getTarget(node, "range", true);
    SNode insertRange = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.ElementRange", protoRange);
    SPropertyOperations.set(insertRange, "has_start", "" + (SPropertyOperations.getBoolean(protoRange, "has_start")));
    SPropertyOperations.set(insertRange, "has_end", "" + (SPropertyOperations.getBoolean(protoRange, "has_end")));
    SPropertyOperations.set(insertRange, "includes_start", "" + (SPropertyOperations.getBoolean(protoRange, "includes_start")));
    SPropertyOperations.set(insertRange, "includes_end", "" + (SPropertyOperations.getBoolean(protoRange, "includes_end")));
    if(SPropertyOperations.getBoolean(insertRange, "has_start")) {
      SLinkOperations.setNewChild(insertRange, "notBefore", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(insertRange, "notBefore", true), "name", "__l_");
    }
    if(SPropertyOperations.getBoolean(insertRange, "has_end")) {
      SLinkOperations.setNewChild(insertRange, "notAfter", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(insertRange, "notAfter", true), "name", "_r__");
    }
    SNode pr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference", null);
    SPropertyOperations.set(pr, "name", "replaceExp");
    SNode is = IGenericFeature_Behavior.call_insertStatement_1195432326179(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(rwps, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(rwps, "writePath", true), "paramObject", true), insertRange, pr);
    return CloneUtil.cloneNotPreservingId(is, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196615333654(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
    SNode rs = IGenericFeature_Behavior.call_replaceStatement_1194808495467(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
    return CloneUtil.cloneNotPreservingId(rs, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196615148613(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode protoRange = SLinkOperations.getTarget(node, "range", true);
    SNode removeRange = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.IndexRange", null);
    SPropertyOperations.set(removeRange, "has_start", "" + (SPropertyOperations.getBoolean(protoRange, "has_start")));
    SPropertyOperations.set(removeRange, "has_end", "" + (SPropertyOperations.getBoolean(protoRange, "has_end")));
    SPropertyOperations.set(removeRange, "includes_start", "" + (SPropertyOperations.getBoolean(protoRange, "includes_start")));
    SPropertyOperations.set(removeRange, "includes_end", "" + (SPropertyOperations.getBoolean(protoRange, "includes_end")));
    if(SPropertyOperations.getBoolean(removeRange, "has_start")) {
      SLinkOperations.setNewChild(removeRange, "start", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(removeRange, "end", true), "name", "startIdx");
    }
    if(SPropertyOperations.getBoolean(removeRange, "has_end")) {
      SLinkOperations.setNewChild(removeRange, "end", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(removeRange, "end", true), "name", "endIdx");
    }
    return removeRange;
  }

  public static SNode mapSrcMacro_mapper_1196615259356(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
    SNode rs = IGenericFeature_Behavior.call_replaceStatement_1194808495467(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
    return CloneUtil.cloneNotPreservingId(rs, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196615277216(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
    SNode rs = IGenericFeature_Behavior.call_replaceStatement_1194808495467(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
    return CloneUtil.cloneNotPreservingId(rs, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196600423556(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
    SNode rs = IGenericFeature_Behavior.call_removeStatement_1195432050864(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true), SLinkOperations.getTarget(node, "range", true));
    return CloneUtil.cloneNotPreservingId(rs, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196613644209(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode protoRange = SLinkOperations.getTarget(node, "range", true);
    SNode removeRange = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.IndexRange", null);
    SPropertyOperations.set(removeRange, "has_start", "" + (SPropertyOperations.getBoolean(protoRange, "has_start")));
    SPropertyOperations.set(removeRange, "has_end", "" + (SPropertyOperations.getBoolean(protoRange, "has_end")));
    SPropertyOperations.set(removeRange, "includes_start", "" + (SPropertyOperations.getBoolean(protoRange, "includes_start")));
    SPropertyOperations.set(removeRange, "includes_end", "" + (SPropertyOperations.getBoolean(protoRange, "includes_end")));
    if(SPropertyOperations.getBoolean(removeRange, "has_start")) {
      SLinkOperations.setNewChild(removeRange, "start", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(removeRange, "end", true), "name", "startIdx");
    }
    if(SPropertyOperations.getBoolean(removeRange, "has_end")) {
      SLinkOperations.setNewChild(removeRange, "end", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(removeRange, "end", true), "name", "endIdx");
    }
    return removeRange;
  }

  public static SNode mapSrcMacro_mapper_1196599101382(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
    SNode rs = IGenericFeature_Behavior.call_removeStatement_1195432050864(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true), SLinkOperations.getTarget(node, "range", true));
    return CloneUtil.cloneNotPreservingId(rs, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196598547056(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
    SNode rs = IGenericFeature_Behavior.call_removeStatement_1195432050864(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true), SLinkOperations.getTarget(node, "range", true));
    return CloneUtil.cloneNotPreservingId(rs, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196621431704(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
    SNode rs = IGenericFeature_Behavior.call_insertStatement_1195432326179(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
    return CloneUtil.cloneNotPreservingId(rs, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196621584879(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode protoRange = SLinkOperations.getTarget(node, "range", true);
    SNode insertRange = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.IndexRange", null);
    SPropertyOperations.set(insertRange, "has_start", "" + (SPropertyOperations.getBoolean(protoRange, "has_start")));
    SPropertyOperations.set(insertRange, "has_end", "" + (SPropertyOperations.getBoolean(protoRange, "has_end")));
    SPropertyOperations.set(insertRange, "includes_start", "" + (SPropertyOperations.getBoolean(protoRange, "includes_start")));
    SPropertyOperations.set(insertRange, "includes_end", "" + (SPropertyOperations.getBoolean(protoRange, "includes_end")));
    if(SPropertyOperations.getBoolean(insertRange, "has_start")) {
      SLinkOperations.setNewChild(insertRange, "start", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(insertRange, "end", true), "name", "startIdx");
    }
    if(SPropertyOperations.getBoolean(insertRange, "has_end")) {
      SLinkOperations.setNewChild(insertRange, "end", "jetbrains.mps.baseLanguageInternal.structure.InternalVariableReference");
      SPropertyOperations.set(SLinkOperations.getTarget(insertRange, "end", true), "name", "endIdx");
    }
    return insertRange;
  }

  public static SNode mapSrcMacro_mapper_1196619981661(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode feature = SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "usedFeature", false);
    SNode rs = IGenericFeature_Behavior.call_insertStatement_1195432326179(feature, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "expression", true), SLinkOperations.getTarget(SLinkOperations.getTarget(node, "writePath", true), "paramObject", true), SLinkOperations.getTarget(node, "range", true), SLinkOperations.getTarget(node, "expression", true));
    return CloneUtil.cloneNotPreservingId(rs, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196092852763(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode cp = SLinkOperations.getTarget(SNodeOperations.getAncestor(parentOutputNode, "jetbrains.mps.baseLanguage.ext.collections.lang.structure.MapperBlock", false, false), "defaultInputElement", true);
    SNode cpr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClosureParameterReference", null);
    SLinkOperations.setTarget(cpr, "closureParameter", cp, false);
    SNode ge = IGenericFeature_Behavior.call_getterExpression_1191865774161(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), cpr, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true));
    return CloneUtil.cloneNotPreservingId(ge, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196093464947(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode cp = SLinkOperations.getTarget(SNodeOperations.getAncestor(parentOutputNode, "jetbrains.mps.baseLanguage.ext.collections.lang.structure.MapperBlock", false, false), "defaultInputElement", true);
    SNode cpr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ClosureParameterReference", null);
    SLinkOperations.setTarget(cpr, "closureParameter", cp, false);
    SNode ge = IGenericFeature_Behavior.call_getterExpression_1191865774161(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), cpr, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true));
    return CloneUtil.cloneNotPreservingId(ge, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196093195273(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode expression = SLinkOperations.getTarget(node, "expression", true);
    if(SNodeOperations.isInstanceOf(expression, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression")) {
      expression = SLinkOperations.getTarget(expression, "expression", true);
    }
    if(SNodeOperations.isInstanceOf(expression, "jetbrains.mps.ypath.structure.TreePathAdapterExpression")) {
      expression = SLinkOperations.getTarget(expression, "expression", true);
    }
    if(SNodeOperations.isInstanceOf(expression, "jetbrains.mps.baseLanguage.structure.CastExpression")) {
      expression = SLinkOperations.getTarget(expression, "expression", true);
    }
    return CloneUtil.cloneNotPreservingId(expression, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196093195304(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode refIt = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
    SLinkOperations.setTarget(refIt, "variableDeclaration", SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getDescendants(SNodeOperations.getAncestor(parentOutputNode, "jetbrains.mps.baseLanguage.structure.StatementList", false, false), null, false), new zPredicate8(null, null))), false);
    SNode ge = IGenericFeature_Behavior.call_getterExpression_1191865774161(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), refIt, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true));
    return CloneUtil.cloneNotPreservingId(ge, generator.getTargetModel(), generator.getScope());
  }

  public static SNode mapSrcMacro_mapper_1196093301789(SNode node, SNode parentOutputNode, ITemplateGenerator generator) {
    SNode expression = SLinkOperations.getTarget(node, "expression", true);
    if(SNodeOperations.isInstanceOf(expression, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression")) {
      expression = SLinkOperations.getTarget(expression, "expression", true);
    }
    if(SNodeOperations.isInstanceOf(expression, "jetbrains.mps.ypath.structure.TreePathAdapterExpression")) {
      expression = SLinkOperations.getTarget(expression, "expression", true);
    }
    if(SNodeOperations.isInstanceOf(expression, "jetbrains.mps.baseLanguage.structure.CastExpression")) {
      expression = SLinkOperations.getTarget(expression, "expression", true);
    }
    SNode srcExp = CloneUtil.cloneNotPreservingId(expression, generator.getTargetModel(), generator.getScope());
    SNode ge = IGenericFeature_Behavior.call_getterExpression_1191865774161(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "usedFeature", false), srcExp, SLinkOperations.getTarget(SLinkOperations.getTarget(node, "operation", true), "paramObject", true));
    return CloneUtil.cloneNotPreservingId(ge, generator.getTargetModel(), generator.getScope());
  }

}
