package jetbrains.mps.ypath.editor;

/*Generated by MPS */

import jetbrains.mps.bootstrap.editorLanguage.generator.internal.AbstractCellMenuComponent;
import jetbrains.mps.nodeEditor.cellMenu.ISubstituteInfoPart;
import jetbrains.mps.bootstrap.editorLanguage.generator.internal.AbstractCellMenuPart_Generic_Group;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.util.Pair;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.ypath.constraints.TreePath_Behavior;
import jetbrains.mps.ypath.constraints.ITreePathExpression_Behavior;
import jetbrains.mps.ypath.constraints.IParamFeature_Behavior;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;

public class menu_SubstituteFeatureAndParameter extends AbstractCellMenuComponent {

  public  menu_SubstituteFeatureAndParameter() {
    super(new ISubstituteInfoPart[]{new menu_SubstituteFeatureAndParameter.IterateOperation_generic_cellMenu1()});
  }
  public static class IterateOperation_generic_cellMenu1 extends AbstractCellMenuPart_Generic_Group {

    public  IterateOperation_generic_cellMenu1() {
    }

    public List createParameterObjects(SNode node, IScope scope, IOperationContext operationContext) {
      List<Pair<SNode, SNode>> res = ListOperations.createList(new Pair[]{});
      SNode tpoe = SNodeOperations.getAncestor(node, "jetbrains.mps.ypath.structure.TreePathOperationExpression", false, false);
      if(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(tpoe, "expression", true)), "jetbrains.mps.ypath.structure.TreePathType")) {
        SNode nodeType = SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(tpoe, "expression", true)), "nodeType", true);
        {
          ICursor<SNode> _zCursor = CursorFactory.createCursor(TreePath_Behavior.call_getFeature_1184591220431(ITreePathExpression_Behavior.call_getTreePath_1194366873089(tpoe), nodeType));
          try {
            while(_zCursor.moveToNext()) {
              SNode foo = _zCursor.getCurrent();
              if(SNodeOperations.isInstanceOf(foo, "jetbrains.mps.ypath.structure.IParamFeature")) {
                {
                  ICursor<SNode> _zCursor1 = CursorFactory.createCursor(IParamFeature_Behavior.call_getParameterObjects_1197461148674(foo, nodeType));
                  try {
                    while(_zCursor1.moveToNext()) {
                      SNode bar = _zCursor1.getCurrent();
                      ListOperations.addElement(res, new Pair<SNode, SNode>(foo, bar));
                    }
                  } finally {
                    _zCursor1.release();
                  }
                }
              } else
              {
                ListOperations.addElement(res, new Pair<SNode, SNode>(foo, null));
              }
            }
          } finally {
            _zCursor.release();
          }
        }
      }
      return res;
    }

    public void handleAction(Object parameterObject, SNode node, SModel model, IScope scope, IOperationContext operationContext) {
      this.handleAction_impl((Pair<SNode, SNode>)parameterObject, node, model, scope, operationContext);
    }

    public void handleAction_impl(Pair<SNode, SNode> parameterObject, SNode node, SModel model, IScope scope, IOperationContext operationContext) {
      SNode fe = (SNode)parameterObject.o1;
      SNode pw = (SNode)parameterObject.o2;
      SLinkOperations.setTarget(node, "paramObject", pw, true);
      SLinkOperations.setTarget(node, "usedFeature", fe, false);
    }

    public boolean isReferentPresentation() {
      return false;
    }

    public String getMatchingText(Object parameterObject) {
      return this.getMatchingText_internal((Pair<SNode, SNode>)parameterObject);
    }

    public String getMatchingText_internal(Pair<SNode, SNode> parameterObject) {
      SNode fe = (SNode)parameterObject.o1;
      SNode pw = (SNode)parameterObject.o2;
      if((pw != null)) {
        return SPropertyOperations.getString(pw, "name") + " | " + SPropertyOperations.getString(fe, "name");
      } else
      {
        return SPropertyOperations.getString(fe, "name");
      }
    }

    public String getDescriptionText(Object parameterObject) {
      return this.getDescriptionText_internal((Pair<SNode, SNode>)parameterObject);
    }

    public String getDescriptionText_internal(Pair<SNode, SNode> parameterObject) {
      SNode fe = (SNode)parameterObject.o1;
      if(SNodeOperations.isInstanceOf(fe, "jetbrains.mps.ypath.structure.IParamFeature")) {
        return "parameterized feature in " + SPropertyOperations.getString(SNodeOperations.getParent(fe, null, false, false), "name");
      } else
      {
        return "feature in " + SPropertyOperations.getString(SNodeOperations.getParent(fe, null, false, false), "name");
      }
    }

}

}
