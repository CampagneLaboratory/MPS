package jetbrains.mps.ypath.editor;

/*Generated by MPS */

import jetbrains.mps.bootstrap.editorLanguage.generator.internal.AbstractCellMenuComponent;
import jetbrains.mps.nodeEditor.cellMenu.ISubstituteInfoPart;
import jetbrains.mps.bootstrap.editorLanguage.generator.internal.AbstractCellMenuPart_Generic_Group;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.util.Triplet;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.ypath.runtime.TraversalAxis;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.ypath.constraints.TreePath_Behavior;
import jetbrains.mps.ypath.constraints.ITreePathExpression_Behavior;
import jetbrains.mps.ypath.actions.TraversalAxisUtil;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.ypath.constraints.IParamFeature_Behavior;
import jetbrains.mps.smodel.SModel;

public class menu_SubstituteIterateOperationAxis extends AbstractCellMenuComponent {

  public  menu_SubstituteIterateOperationAxis() {
    super(new ISubstituteInfoPart[]{new menu_SubstituteIterateOperationAxis.IterateOperation_generic_cellMenu1()});
  }
  public static class IterateOperation_generic_cellMenu1 extends AbstractCellMenuPart_Generic_Group {

    public  IterateOperation_generic_cellMenu1() {
    }

    public List createParameterObjects(SNode node, IScope scope, IOperationContext operationContext) {
      SNode tpoe = SNodeOperations.getAncestor(node, "jetbrains.mps.ypath.structure.TreePathOperationExpression", false, false);
      List<Triplet> res = ListOperations.<Triplet>createList();
      if(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(tpoe, "expression", true)), "jetbrains.mps.ypath.structure.TreePathType")) {
        SNode nodeType = SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(tpoe, "expression", true)), "nodeType", true);
        {
          ICursor<TraversalAxis> _zCursor8 = CursorFactory.createCursor(TraversalAxis.getConstants());
          try {
            while(_zCursor8.moveToNext()) {
              TraversalAxis axis = _zCursor8.getCurrent();
              ListOperations.addElement(res, new Triplet(axis, null, null));
              {
                ICursor<SNode> _zCursor9 = CursorFactory.createCursor(TreePath_Behavior.call_getFeature_1184591220431(ITreePathExpression_Behavior.call_getTreePath_1194366873089(tpoe), nodeType));
                try {
                  while(_zCursor9.moveToNext()) {
                    SNode feat = _zCursor9.getCurrent();
                    if(TraversalAxisUtil.isAcceptableFeatureForAxis(feat, axis)) {
                      if(SPropertyOperations.getBoolean(feat, "default")) {
                        ListOperations.addElement(res, new Triplet(axis, feat, null));
                      } else
                      if(SNodeOperations.isInstanceOf(feat, "jetbrains.mps.ypath.structure.IParamFeature")) {
                        {
                          ICursor<SNode> _zCursor10 = CursorFactory.createCursor(IParamFeature_Behavior.call_getParameterObjects_1197461148674(feat, nodeType));
                          try {
                            while(_zCursor10.moveToNext()) {
                              SNode pw = _zCursor10.getCurrent();
                              ListOperations.addElement(res, new Triplet(axis, feat, pw));
                            }
                          } finally {
                            _zCursor10.release();
                          }
                        }
                      } else
                      {
                        ListOperations.addElement(res, new Triplet(axis, feat, null));
                      }
                    }
                  }
                } finally {
                  _zCursor9.release();
                }
              }
            }
          } finally {
            _zCursor8.release();
          }
        }
      }
      return res;
    }

    public void handleAction(Object parameterObject, SNode node, SModel model, IScope scope, IOperationContext operationContext) {
      this.handleAction_impl((Triplet)parameterObject, node, model, scope, operationContext);
    }

    public void handleAction_impl(Triplet parameterObject, SNode node, SModel model, IScope scope, IOperationContext operationContext) {
      TraversalAxis axis = (TraversalAxis)parameterObject.first();
      SNode feat = (SNode)parameterObject.second();
      SNode pw = (SNode)parameterObject.third();
      SPropertyOperations.set(node, "axis", axis.getValue());
      SLinkOperations.setTarget(node, "usedFeature", feat, false);
      SLinkOperations.setTarget(node, "paramObject", pw, true);
    }

    public boolean isReferentPresentation() {
      return false;
    }

    public String getMatchingText(Object parameterObject) {
      return this.getMatchingText_internal((Triplet)parameterObject);
    }

    public String getMatchingText_internal(Triplet parameterObject) {
      TraversalAxis axis = (TraversalAxis)parameterObject.first();
      SNode feat = (SNode)parameterObject.second();
      SNode pw = (SNode)parameterObject.third();
      String suffix = "";
      if((feat == null)) {
        suffix = " *";
      } else
      {
        if(SPropertyOperations.getBoolean(feat, "default")) {
          suffix = "";
        } else
        if((pw != null)) {
          suffix = SPropertyOperations.getString(pw, "name");
        } else
        {
          suffix = SPropertyOperations.getString(feat, "name");
        }
      }
      return TraversalAxisUtil.getOperationSign(axis) + suffix;
    }

    public String getDescriptionText(Object parameterObject) {
      return this.getDescriptionText_internal((Triplet)parameterObject);
    }

    public String getDescriptionText_internal(Triplet parameterObject) {
      TraversalAxis axis = (TraversalAxis)parameterObject.first();
      SNode feat = (SNode)parameterObject.second();
      SNode pw = (SNode)parameterObject.third();
      String suffix = "";
      if((feat == null)) {
        suffix = "all";
      } else
      {
        if(SPropertyOperations.getBoolean(feat, "default")) {
          suffix = "default";
        } else
        if((pw != null)) {
          suffix = SPropertyOperations.getString(pw, "name") + " " + SPropertyOperations.getString(feat, "name");
        } else
        {
          suffix = SPropertyOperations.getString(feat, "name");
        }
      }
      return "iterate " + axis.getName() + " @" + suffix;
    }

}

}
