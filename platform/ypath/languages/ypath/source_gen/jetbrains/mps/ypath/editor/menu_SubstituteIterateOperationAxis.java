package jetbrains.mps.ypath.editor;

/*Generated by MPS */

import jetbrains.mps.bootstrap.editorLanguage.generator.internal.AbstractCellMenuComponent;
import jetbrains.mps.nodeEditor.cellMenu.ISubstituteInfoPart;
import jetbrains.mps.bootstrap.editorLanguage.generator.internal.AbstractCellMenuPart_Generic_Group;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.util.Pair;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.ypath.runtime.TraversalAxis;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.ypath.actions.TraversalAxisUtil;

public class menu_SubstituteIterateOperationAxis extends AbstractCellMenuComponent {

  public  menu_SubstituteIterateOperationAxis() {
    super(new ISubstituteInfoPart[]{new menu_SubstituteIterateOperationAxis.IterateOperation_generic_cellMenu1()});
  }
  public static class IterateOperation_generic_cellMenu1 extends AbstractCellMenuPart_Generic_Group {

    public  IterateOperation_generic_cellMenu1() {
    }

    public List createParameterObjects(SNode node, IScope scope, IOperationContext operationContext) {
      SNode tpa = SNodeOperations.getAncestor(node, "jetbrains.mps.ypath.structure.TreePathAspect", false, false);
      boolean hasDefault = !(SequenceOperations.isEmpty(SequenceOperations.where(SLinkOperations.getTargets(tpa, "features", true), new zPredicate(null, null))));
      List<Pair> res = ListOperations.createList(new Pair[]{});
      {
        ICursor<TraversalAxis> _zCursor2 = CursorFactory.createCursor(TraversalAxis.getConstants());
        try {
          while(_zCursor2.moveToNext()) {
            TraversalAxis axis = _zCursor2.getCurrent();
            ListOperations.addElement(res, new Pair(axis, Boolean.FALSE));
            if(hasDefault) {
              ListOperations.addElement(res, new Pair(axis, Boolean.TRUE));
            }
          }
        } finally {
          _zCursor2.release();
        }
      }
      return res;
    }

    public void handleAction(Object parameterObject, SNode node, SModel model, IScope scope, IOperationContext operationContext) {
      this.handleAction_impl((Pair)parameterObject, node, model, scope, operationContext);
    }

    public void handleAction_impl(Pair parameterObject, SNode node, SModel model, IScope scope, IOperationContext operationContext) {
      TraversalAxis axis = (TraversalAxis)parameterObject.o1;
      Boolean defFeature = (Boolean)parameterObject.o2;
      SPropertyOperations.set(node, "axis", axis.getValue());
      SPropertyOperations.set(node, "useDefault", "" + (defFeature));
    }

    public boolean isReferentPresentation() {
      return false;
    }

    public String getMatchingText(Object parameterObject) {
      return this.getMatchingText_internal((Pair)parameterObject);
    }

    public String getMatchingText_internal(Pair parameterObject) {
      TraversalAxis axis = (TraversalAxis)parameterObject.o1;
      Boolean defFeature = (Boolean)parameterObject.o2;
      return (defFeature ?
        TraversalAxisUtil.getOperationSign(axis) + "<default>" :
        TraversalAxisUtil.getOperationSign(axis)
      );
    }

    public String getDescriptionText(Object parameterObject) {
      return this.getDescriptionText_internal((Pair)parameterObject);
    }

    public String getDescriptionText_internal(Pair parameterObject) {
      TraversalAxis axis = (TraversalAxis)parameterObject.o1;
      Boolean defFeature = (Boolean)parameterObject.o2;
      return (defFeature ?
        "iterate " + axis.getName() + " with default feature" :
        "iterate " + axis.getName()
      );
    }

}

}
