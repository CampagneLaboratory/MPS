package jetbrains.mps.ypath.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.INodePropertySetter;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;

public class IFeature_default_PropertyConstraint implements IModelConstraints, INodePropertySetter {

  public  IFeature_default_PropertyConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodePropertySetter("jetbrains.mps.ypath.structure.IFeature", "default", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodePropertySetter("jetbrains.mps.ypath.structure.IFeature", "default");
  }

  public void execPropertySet(SNode node, String propertyName, String propertyValue, IScope scope) {
    if((SPropertyOperations.getBoolean(node, "default"))) {
      {
        ICursor<SNode> _zCursor1 = CursorFactory.createCursor(SLinkOperations.getTargets(SNodeOperations.getParent(node, null, false, false), "features", true));
        try {
          while(_zCursor1.moveToNext()) {
            SNode foo = _zCursor1.getCurrent();
            if(foo != node) {
              SPropertyOperations.set(foo, "default", "" + (false));
            }
          }
        } finally {
          _zCursor1.release();
        }
      }
    }
    SPropertyOperations.set(node, "default", "" + ((SPropertyOperations.getBoolean(node, "default"))));
  }

}
