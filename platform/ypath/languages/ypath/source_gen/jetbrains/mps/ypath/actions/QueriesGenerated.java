package jetbrains.mps.ypath.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSubstitutePrecondition_ParameterObject;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.RTransformPrecondition_ParameterObject;
import java.util.List;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.smodel.action.NodeSetup_ParameterObject;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration;
import jetbrains.mps.smodel.action.IChildNodeSetter;
import java.util.ArrayList;
import jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.action.ChildSubstituteActionsHelper;
import jetbrains.mps.smodel.action.AbstractChildNodeSetter;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.action.ModelActions;
import jetbrains.mps.util.Calculable;
import jetbrains.mps.ypath.constraints.FeatureTargetTypeUtil;
import jetbrains.mps.smodel.action.DefaultChildNodeSubstituteAction;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.action.DefaultSimpleSubstituteAction;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.smodel.BaseAdapter;
import jetbrains.mps.ypath.structure.FragmentTypeEnum;
import jetbrains.mps.smodel.action.AbstractRTransformHintSubstituteAction;
import jetbrains.mps.ypath.constraints.ITreePathExpression_Behavior;
import jetbrains.mps.util.Pair;
import jetbrains.mps.ypath.constraints.IFeature_Behavior;
import jetbrains.mps.util.Triplet;
import jetbrains.mps.ypath.runtime.TraversalAxis;
import jetbrains.mps.ypath.constraints.TreePath_Behavior;
import jetbrains.mps.ypath.constraints.IParamFeature_Behavior;
import jetbrains.mps.util.Quadruplet;
import java.util.Iterator;
import jetbrains.mps.util.Condition;

public class QueriesGenerated {

  public static boolean nodeSubstituteActionsBuilder_Precondition_TreePathOperation_1169038348122(final IOperationContext operationContext, final NodeSubstitutePrecondition_ParameterObject _parameterObject) {
    if(SNodeOperations.isInstanceOf(_parameterObject.getParentNode(), "jetbrains.mps.ypath.structure.TreePathOperationExpression")) {
      SNode exp = _parameterObject.getParentNode();
      return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(exp, "expression", true), "jetbrains.mps.ypath.structure.TreePathOperationExpression")) && !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(exp, "expression", true), "jetbrains.mps.ypath.structure.TreePathAdapterExpression"));
    }
    return false;
  }

  public static boolean nodeSubstituteActionsBuilder_Precondition_TreePathOperation_1169038722084(final IOperationContext operationContext, final NodeSubstitutePrecondition_ParameterObject _parameterObject) {
    if(SNodeOperations.isInstanceOf(_parameterObject.getParentNode(), "jetbrains.mps.ypath.structure.TreePathOperationExpression")) {
      SNode exp = _parameterObject.getParentNode();
      if(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(exp, "expression", true), "jetbrains.mps.ypath.structure.TreePathAdapterExpression")) {
        return true;
      }
    }
    return false;
  }

  public static boolean nodeSubstituteActionsBuilder_Precondition_TreePathOperation_1169039090800(final IOperationContext operationContext, final NodeSubstitutePrecondition_ParameterObject _parameterObject) {
    if(SNodeOperations.isInstanceOf(_parameterObject.getParentNode(), "jetbrains.mps.ypath.structure.TreePathOperationExpression")) {
      SNode exp = _parameterObject.getParentNode();
      return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(exp, "expression", true), "jetbrains.mps.ypath.structure.TreePathOperationExpression");
    }
    return false;
  }

  public static boolean nodeSubstituteActionsBuilder_Precondition_Expression_1180011271328(final IOperationContext operationContext, final NodeSubstitutePrecondition_ParameterObject _parameterObject) {
    return (SNodeOperations.getAncestor(_parameterObject.getParentNode(), "jetbrains.mps.ypath.structure.VisitNodesStatement", true, false) != null);
  }

  public static boolean nodeSubstituteActionsBuilder_Precondition_Statement_1180026445925(final IOperationContext operationContext, final NodeSubstitutePrecondition_ParameterObject _parameterObject) {
    return (SNodeOperations.getAncestor(_parameterObject.getParentNode(), "jetbrains.mps.ypath.structure.VisitNodesStatement", true, false) != null);
  }

  public static boolean nodeSubstituteActionsBuilder_Precondition_ParameterWrapper_1197462321701(final IOperationContext operationContext, final NodeSubstitutePrecondition_ParameterObject _parameterObject) {
    return false;
  }

  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_Expression_1168893690367(final IOperationContext operationContext, final RTransformPrecondition_ParameterObject _parameterObject) {
    SNode nono = SNodeOperations.getAncestorWhereConceptInList(_parameterObject.getSourceNode(), new String[]{"jetbrains.mps.ypath.structure.ParentBlock","jetbrains.mps.ypath.structure.ChildrenBlock","jetbrains.mps.ypath.structure.WhereBlock","jetbrains.mps.ypath.structure.TreePathAdapterExpression","jetbrains.mps.ypath.structure.TreePathOperationExpression"}, true, false);
    if(nono != null) {
      return false;
    }
    List<SNode> aspects = TreePathAspectUtil.getTreePathAspects(_parameterObject.getSourceNode(), operationContext.getScope());
    return SequenceOperations.getSize(aspects) > 0;
  }

  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_TreeNodeKindOccurrence_1175170178382(final IOperationContext operationContext, final RTransformPrecondition_ParameterObject _parameterObject) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(_parameterObject.getSourceNode(), null, false, false), "jetbrains.mps.ypath.structure.MatchKindOperation");
  }

  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_Expression_1194616749686(final IOperationContext operationContext, final RTransformPrecondition_ParameterObject _parameterObject) {
    return TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getTypeOf(_parameterObject.getSourceNode()), new QuotationClass_().createNode(), false, false);
  }

  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_Expression_1198013650814(final IOperationContext operationContext, final RTransformPrecondition_ParameterObject _parameterObject) {
    return SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(_parameterObject.getSourceNode()), "jetbrains.mps.ypath.structure.TreePathType");
  }

  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_Expression_1198013650824(final IOperationContext operationContext, final RTransformPrecondition_ParameterObject _parameterObject) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(_parameterObject.getSourceNode(), null, false, false), "jetbrains.mps.ypath.structure.TreePathAdapterExpression");
  }

  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_Expression_1198013853577(final IOperationContext operationContext, final RTransformPrecondition_ParameterObject _parameterObject) {
    SNode nono = SNodeOperations.getAncestorWhereConceptInList(_parameterObject.getSourceNode(), new String[]{"jetbrains.mps.ypath.structure.ParentBlock","jetbrains.mps.ypath.structure.ChildrenBlock","jetbrains.mps.ypath.structure.WhereBlock","jetbrains.mps.ypath.structure.TreePathAdapterExpression","jetbrains.mps.ypath.structure.TreePathOperationExpression"}, true, false);
    if(nono != null) {
      return false;
    }
    List<SNode> aspects = TreePathAspectUtil.getTreePathAspects(_parameterObject.getSourceNode(), operationContext.getScope());
    return SequenceOperations.getSize(aspects) > 0;
  }

  public static void nodeFactory_NodeSetup_GenericParamFeature_1196870541068(final IOperationContext operationContext, final NodeSetup_ParameterObject _parameterObject) {
    SLinkOperations.setNewChild(_parameterObject.getNewNode(), "getter", "jetbrains.mps.ypath.structure.GFGetterParamFun");
    SLinkOperations.setNewChild(_parameterObject.getNewNode(), "cardinal", "jetbrains.mps.ypath.structure.GFCardinalParamFun");
  }

  public static void nodeFactory_NodeSetup_GFReplaceFunWrapper_1197319789956(final IOperationContext operationContext, final NodeSetup_ParameterObject _parameterObject) {
    if((SNodeOperations.getAncestor(_parameterObject.getEnclosingNode(), "jetbrains.mps.ypath.structure.GenericParamFeature", false, false) != null)) {
      SLinkOperations.setNewChild(_parameterObject.getNewNode(), "fun", "jetbrains.mps.ypath.structure.GFReplacerParamFun");
    }
  }

  public static void nodeFactory_NodeSetup_GFRemoveFunWrapper_1197319781736(final IOperationContext operationContext, final NodeSetup_ParameterObject _parameterObject) {
    if((SNodeOperations.getAncestor(_parameterObject.getEnclosingNode(), "jetbrains.mps.ypath.structure.GenericParamFeature", false, false) != null)) {
      SLinkOperations.setNewChild(_parameterObject.getNewNode(), "fun", "jetbrains.mps.ypath.structure.GFRemoverParamFun");
    }
  }

  public static void nodeFactory_NodeSetup_GFInsertFunWrapper_1197319762200(final IOperationContext operationContext, final NodeSetup_ParameterObject _parameterObject) {
    if((SNodeOperations.getAncestor(_parameterObject.getEnclosingNode(), "jetbrains.mps.ypath.structure.GenericParamFeature", false, false) != null)) {
      SLinkOperations.setNewChild(_parameterObject.getNewNode(), "fun", "jetbrains.mps.ypath.structure.GFInserterParamFun");
    }
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_TreePathOperation_1169037620751(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_TreePathOperation_1169038110957(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_TreePathOperation_1169038203232(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Expression_1180011230210(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration conceptToAdd = SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.VisitChildrenExpression", operationContext.getScope());
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, parentNode, currentTargetNode, childSetter, operationContext.getScope());
      result.addAll(defaultActions);
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Statement_1180026401346(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration conceptToAdd = SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.SwitchNodeKindStatement", operationContext.getScope());
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, parentNode, currentTargetNode, childSetter, operationContext.getScope());
      result.addAll(defaultActions);
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_VisitParameterDeclaration_1180018851746(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.VisitParameterDeclaration", operationContext.getScope());
      ConceptDeclaration wrappedConcept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Type", operationContext.getScope());
      IChildNodeSetter setter = new AbstractChildNodeSetter() {

        public SNode wrapNode(SNode nodeToWrap, SModel model) {
          SNode vpd = SModelOperations.createNewNode(model, "jetbrains.mps.ypath.structure.VisitParameterDeclaration", null);
          SLinkOperations.setTarget(vpd, "type", nodeToWrap, true);
          return vpd;
        }

        public SNode doExecute(SNode pn, SNode oc, SNode nc, IScope sc) {
          SNode wrappedNode = this.wrapNode(nc, nc.getModel());
          childSetter.execute(parentNode, currentTargetNode, wrappedNode, operationContext.getScope());
          return wrappedNode;
        }

      };
      result.addAll(ModelActions.createChildSubstituteActions(parentNode, currentTargetNode, wrappedConcept, setter, operationContext));
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_IFeature_1184067774388(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration conceptToAdd = SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.ListFeature", operationContext.getScope());
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, parentNode, currentTargetNode, childSetter, operationContext.getScope());
      result.addAll(defaultActions);
    }
    {
      ConceptDeclaration conceptToAdd = SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.SequenceFeature", operationContext.getScope());
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, parentNode, currentTargetNode, childSetter, operationContext.getScope());
      result.addAll(defaultActions);
    }
    {
      ConceptDeclaration conceptToAdd = SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.ParamListFeature", operationContext.getScope());
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, parentNode, currentTargetNode, childSetter, operationContext.getScope());
      result.addAll(defaultActions);
    }
    {
      ConceptDeclaration conceptToAdd = SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.ParamSequenceFeature", operationContext.getScope());
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, parentNode, currentTargetNode, childSetter, operationContext.getScope());
      result.addAll(defaultActions);
    }
    {
      ConceptDeclaration conceptToAdd = SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.GenericFeature", operationContext.getScope());
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, parentNode, currentTargetNode, childSetter, operationContext.getScope());
      result.addAll(defaultActions);
    }
    {
      ConceptDeclaration conceptToAdd = SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.GenericParamFeature", operationContext.getScope());
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, parentNode, currentTargetNode, childSetter, operationContext.getScope());
      result.addAll(defaultActions);
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_ParameterWrapper_1184768393149(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.ParameterWrapper", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          SNode op = parentNode;
          SNode tpoe = SNodeOperations.getParent(parentNode, null, false, false);
          return FeatureTargetTypeUtil.getParameterObjects(SLinkOperations.getTarget(op, "usedFeature", false), SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(tpoe, "expression", true)), "nodeType", true));
        }

      };
      Iterable<SNode> queryResult = (Iterable)calc.calculate();
      assert queryResult != null;
      for(SNode item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            return ((SNode)this.getParameterObject());
          }

          public String getMatchingText(String pattern) {
            return SPropertyOperations.getString(((SNode)this.getParameterObject()), "name");
          }

        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_IAnchor_1194436439282(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration conceptToAdd = SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.IndexAnchor", operationContext.getScope());
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, parentNode, currentTargetNode, childSetter, operationContext.getScope());
      result.addAll(defaultActions);
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.ElementAnchor", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode anchor = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.ElementAnchor", null);
          SPropertyOperations.set(anchor, "before", "" + (true));
          return anchor;
        }

        public String getMatchingText(String pattern) {
          return "BEFORE";
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.ElementAnchor", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode anchor = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.ElementAnchor", null);
          SPropertyOperations.set(anchor, "before", "" + (false));
          return anchor;
        }

        public String getMatchingText(String pattern) {
          return "AFTER";
        }

      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_IGenericFeatureFun_1196420410543(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("null", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          List<SNode> res = ListOperations.createList(new SNode[]{SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.GFReplaceFunWrapper"),SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.GFRemoveFunWrapper"),SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.GFInsertFunWrapper")});
          if(SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.ypath.structure.GenericFeatureFunHolder")) {
            {
              ICursor<SNode> _zCursor = CursorFactory.createCursor(SLinkOperations.getTargets(parentNode, "functions", true));
              try {
                while(_zCursor.moveToNext()) {
                  SNode foo = _zCursor.getCurrent();
                  if(SNodeOperations.isInstanceOf(foo, "jetbrains.mps.ypath.structure.IGenericFeatureReplaceFun")) {
                    ListOperations.removeElement(res, SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.GFReplaceFunWrapper"));
                  } else
                  if(SNodeOperations.isInstanceOf(foo, "jetbrains.mps.ypath.structure.IGenericFeatureRemoveFun")) {
                    ListOperations.removeElement(res, SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.GFRemoveFunWrapper"));
                  } else
                  if(SNodeOperations.isInstanceOf(foo, "jetbrains.mps.ypath.structure.IGenericFeatureInsertFun")) {
                    ListOperations.removeElement(res, SConceptOperations.findConceptDeclaration("jetbrains.mps.ypath.structure.GFInsertFunWrapper"));
                  }
                }
              } finally {
                _zCursor.release();
              }
            }
          }
          return res;
        }

      };
      Iterable queryResult = (Iterable)calc.calculate();
      assert queryResult != null;
      for(Object item : queryResult) {
        List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions((ConceptDeclaration)BaseAdapter.fromNode((SNode)item), parentNode, currentTargetNode, childSetter, operationContext.getScope());
        result.addAll(defaultActions);
      }
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("null", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          List<FragmentTypeEnum> types = ListOperations.createList(new FragmentTypeEnum[]{FragmentTypeEnum.replace_single,FragmentTypeEnum.replace_selection,FragmentTypeEnum.replace_all,FragmentTypeEnum.remove_single,FragmentTypeEnum.remove_selection,FragmentTypeEnum.remove_all,FragmentTypeEnum.insert_at_start,FragmentTypeEnum.insert_at_end,FragmentTypeEnum.insert_before,FragmentTypeEnum.insert_after});
          if(SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.ypath.structure.GenericFeatureFunHolder")) {
            {
              ICursor<SNode> _zCursor1 = CursorFactory.createCursor(SLinkOperations.getTargets(parentNode, "functions", true));
              try {
                while(_zCursor1.moveToNext()) {
                  SNode foo = _zCursor1.getCurrent();
                  if(SNodeOperations.isInstanceOf(foo, "jetbrains.mps.ypath.structure.IGenericFeatureFunFragment")) {
                    ListOperations.removeElement(types, FragmentTypeEnum.parseValue(SPropertyOperations.getString_def(foo, "fragmentType", "REPLACE_SINGLE")));
                  } else
                  if(SNodeOperations.isInstanceOf(foo, "jetbrains.mps.ypath.structure.IGenericFeatureReplaceFun")) {
                    ListOperations.removeElement(types, FragmentTypeEnum.replace_single);
                    ListOperations.removeElement(types, FragmentTypeEnum.replace_selection);
                    ListOperations.removeElement(types, FragmentTypeEnum.replace_all);
                  } else
                  if(SNodeOperations.isInstanceOf(foo, "jetbrains.mps.ypath.structure.IGenericFeatureRemoveFun")) {
                    ListOperations.removeElement(types, FragmentTypeEnum.remove_single);
                    ListOperations.removeElement(types, FragmentTypeEnum.remove_selection);
                    ListOperations.removeElement(types, FragmentTypeEnum.remove_all);
                  } else
                  if(SNodeOperations.isInstanceOf(foo, "jetbrains.mps.ypath.structure.IGenericFeatureInsertFun")) {
                    ListOperations.removeElement(types, FragmentTypeEnum.insert_at_start);
                    ListOperations.removeElement(types, FragmentTypeEnum.insert_at_end);
                    ListOperations.removeElement(types, FragmentTypeEnum.insert_before);
                    ListOperations.removeElement(types, FragmentTypeEnum.insert_after);
                  }
                }
              } finally {
                _zCursor1.release();
              }
            }
          }
          return types;
        }

      };
      Iterable<FragmentTypeEnum> queryResult = (Iterable)calc.calculate();
      assert queryResult != null;
      for(FragmentTypeEnum item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            FragmentTypeEnum type = ((FragmentTypeEnum)this.getParameterObject());
            SNode fragment = null;
            if(type == FragmentTypeEnum.replace_single || type == FragmentTypeEnum.replace_selection || type == FragmentTypeEnum.replace_all) {
              fragment = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.GFReplaceFunFragment", null);
              SPropertyOperations.set(fragment, "fragmentType", type.getValue());
              if((SNodeOperations.getAncestor(parentNode, "jetbrains.mps.ypath.structure.GenericParamFeature", false, false) != null)) {
                SLinkOperations.setNewChild(fragment, "fragmentFun", "jetbrains.mps.ypath.structure.GFReplacerParamFun");
              }
            } else
            if(type == FragmentTypeEnum.remove_single || type == FragmentTypeEnum.remove_selection || type == FragmentTypeEnum.remove_all) {
              fragment = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.GFRemoveFunFragment", null);
              SPropertyOperations.set(fragment, "fragmentType", type.getValue());
              if((SNodeOperations.getAncestor(parentNode, "jetbrains.mps.ypath.structure.GenericParamFeature", false, false) != null)) {
                SLinkOperations.setNewChild(fragment, "fragmentFun", "jetbrains.mps.ypath.structure.GFRemoverParamFun");
              }
            } else
            if(type == FragmentTypeEnum.insert_at_start || type == FragmentTypeEnum.insert_at_end || type == FragmentTypeEnum.insert_before || type == FragmentTypeEnum.insert_after) {
              fragment = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.GFInsertFunFragment", null);
              SPropertyOperations.set(fragment, "fragmentType", type.getValue());
              if((SNodeOperations.getAncestor(parentNode, "jetbrains.mps.ypath.structure.GenericParamFeature", false, false) != null)) {
                SLinkOperations.setNewChild(fragment, "fragmentFun", "jetbrains.mps.ypath.structure.GFInserterParamFun");
              }
            }
            return fragment;
          }

          public String getMatchingText(String pattern) {
            return ((FragmentTypeEnum)this.getParameterObject()).getName();
          }

        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_GenericFeatureFunHolder_1196424373003(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("null", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode hld = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.GenericFeatureFunHolder", null);
          SPropertyOperations.set(hld, "byIndex", "" + (true));
          return hld;
        }

        public String getMatchingText(String pattern) {
          return "by index";
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("null", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          SNode hld = SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.GenericFeatureFunHolder", null);
          SPropertyOperations.set(hld, "byIndex", "" + (false));
          return hld;
        }

        public String getMatchingText(String pattern) {
          return "byelement";
        }

      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Expression_1196791152384(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("null", operationContext.getScope());
      result.add(new DefaultSimpleSubstituteAction(concept, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

        public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
          return SConceptOperations.createNewNode("jetbrains.mps.ypath.structure.EmptySequenceExpression", null);
        }

        public boolean hasSubstitute() {
          return true;
        }

        public boolean canSubstitute_internal(String pattern) {
          return SNodeOperations.isInstanceOf(parentNode, "jetbrains.mps.ypath.structure.ReplaceWritePathStatement");
        }

        public String getMatchingText(String pattern) {
          return "NOTHING";
        }

      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1168893677147(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("null", operationContext.getScope());
      Calculable calculable = new Calculable() {

        public Object calculate() {
          return TreePathAspectUtil.getTreePathAspects(sourceNode, operationContext.getScope());
        }

      };
      Iterable<SNode> parameterObjects = (Iterable<SNode>)calculable.calculate();
      assert parameterObjects != null;
      for(SNode parameter : parameterObjects) {
        result.add(new AbstractRTransformHintSubstituteAction(parameter, sourceNode) {

          public SNode doSubstitute(String pattern) {
            SNode tpaExp = SNodeOperations.replaceWithNewChild(sourceNode, "jetbrains.mps.ypath.structure.TreePathAdapterExpression");
            SLinkOperations.setTarget(tpaExp, "expression", sourceNode, true);
            SLinkOperations.setTarget(tpaExp, "treepathAspect", ((SNode)this.getParameterObject()), false);
            return tpaExp;
          }

          public String getMatchingText(String text) {
            return ":" + SPropertyOperations.getString(((SNode)this.getParameterObject()), "name");
          }

          public String getDescriptionText(String text) {
            return "[OBSOLETE] cast to treepath expression";
          }

        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_TreeNodeKindOccurrence_1175164446140(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.MatchPropertyOperation", operationContext.getScope());
      Calculable calculable = new Calculable() {

        public Object calculate() {
          SNode tpoe = SNodeOperations.getAncestor(sourceNode, "jetbrains.mps.ypath.structure.TreePathOperationExpression", true, false);
          return SequenceOperations.toList(SequenceOperations.where(SNodeOperations.getDescendants(ITreePathExpression_Behavior.call_getTreePath_1194366873089(tpoe), null, false), new zPredicate(null, null)));
        }

      };
      Iterable<SNode> parameterObjects = (Iterable<SNode>)calculable.calculate();
      assert parameterObjects != null;
      for(SNode parameter : parameterObjects) {
        result.add(new AbstractRTransformHintSubstituteAction(parameter, sourceNode) {

          public SNode doSubstitute(String pattern) {
            SNode tnko = sourceNode;
            SNode mko = SNodeOperations.getParent(tnko, null, false, false);
            SNode mpo = SModelOperations.createNewNode(model, "jetbrains.mps.ypath.structure.MatchPropertyOperation", null);
            SNodeOperations.replaceWithAnother(mko, mpo);
            SLinkOperations.setTarget(SLinkOperations.getTarget(mpo, "nodeKindOccurrence", true), "nodeKind", SLinkOperations.getTarget(tnko, "nodeKind", false), false);
            SLinkOperations.setTarget(mpo, "property", ((SNode)this.getParameterObject()), false);
            return mpo;
          }

          public String getMatchingText(String text) {
            return "." + SPropertyOperations.getString(((SNode)this.getParameterObject()), "name");
          }

          public String getDescriptionText(String text) {
            return "match property value";
          }

        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1194616742213(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode res = SNodeOperations.replaceWithNewChild(sourceNode, "jetbrains.mps.ypath.structure.IsWithinRangeExpression");
          SLinkOperations.setTarget(res, "range", sourceNode, true);
          return res;
        }

        public String getMatchingText(String pattern) {
          return ".isWithinRange ()";
        }

        public String getDescriptionText(String pattern) {
          return "IRange expression";
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode res = SNodeOperations.replaceWithNewChild(sourceNode, "jetbrains.mps.ypath.structure.IsAtInsertionPointExpression");
          SLinkOperations.setTarget(res, "range", sourceNode, true);
          return res;
        }

        public String getMatchingText(String pattern) {
          return ".isAtInsertionPoint ()";
        }

        public String getDescriptionText(String pattern) {
          return "IRange expression";
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.Statement", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode res = SNodeOperations.replaceWithNewChild(sourceNode, "jetbrains.mps.ypath.structure.NextElementStatement");
          SLinkOperations.setTarget(res, "range", sourceNode, true);
          return res;
        }

        public String getMatchingText(String pattern) {
          return ".next ()";
        }

        public String getDescriptionText(String pattern) {
          return "IRange statement";
        }

      });
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_IFeature_1197904809758(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("null", operationContext.getScope());
      Calculable calculable = new Calculable() {

        public Object calculate() {
          final zClosureContext1 _zClosureContext1 = new zClosureContext1();
          List<Pair> res = ListOperations.createList(new Pair[]{});
          _zClosureContext1.srcNode = sourceNode;
          _zClosureContext1.isGeneric = SNodeOperations.isInstanceOf(_zClosureContext1.srcNode, "jetbrains.mps.ypath.structure.IGenericFeature");
          {
            ICursor<SNode> _zCursor2 = CursorFactory.createCursor(SequenceOperations.where(SLinkOperations.getTargets(SNodeOperations.getParent(_zClosureContext1.srcNode, null, false, false), "features", true), new zPredicate2(null, _zClosureContext1)));
            try {
              while(_zCursor2.moveToNext()) {
                SNode fe = _zCursor2.getCurrent();
                ListOperations.addElement(res, new Pair(fe, Boolean.TRUE));
                ListOperations.addElement(res, new Pair(fe, Boolean.FALSE));
              }
            } finally {
              _zCursor2.release();
            }
          }
          return res;
        }

      };
      Iterable<Pair> parameterObjects = (Iterable<Pair>)calculable.calculate();
      assert parameterObjects != null;
      for(Pair parameter : parameterObjects) {
        result.add(new AbstractRTransformHintSubstituteAction(parameter, sourceNode) {

          public SNode doSubstitute(String pattern) {
            SNode fe = (SNode)((Pair)this.getParameterObject()).o1;
            Boolean mu = (Boolean)((Pair)this.getParameterObject()).o2;
            IFeature_Behavior.call_setOpposite_1197913839765(sourceNode, fe, mu);
            return sourceNode;
          }

          public String getMatchingText(String text) {
            SNode fe = (SNode)((Pair)this.getParameterObject()).o1;
            Boolean mu = (Boolean)((Pair)this.getParameterObject()).o2;
            return (mu ?
              "<-> " + SPropertyOperations.getString(fe, "name") :
              "<-  " + SPropertyOperations.getString(fe, "name")
            );
          }

          public String getDescriptionText(String text) {
            SNode fe = (SNode)((Pair)this.getParameterObject()).o1;
            Boolean mu = (Boolean)((Pair)this.getParameterObject()).o2;
            return (mu ?
              "set mutual opposite feature" :
              "set opposite feature"
            );
          }

        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1198013650231(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathOperationExpression", operationContext.getScope());
      Calculable calculable = new Calculable() {

        public Object calculate() {
          List<Triplet> res = ListOperations.createList(new Triplet[]{});
          SNode tpoe = SNodeOperations.getAncestor(sourceNode, "jetbrains.mps.ypath.structure.TreePathOperationExpression", true, false);
          if((tpoe == null)) {
            return res;
          }
          SNode nodeType = SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(sourceNode), "nodeType", true);
          {
            ICursor<TraversalAxis> _zCursor3 = CursorFactory.createCursor(TraversalAxis.getConstants());
            try {
              while(_zCursor3.moveToNext()) {
                TraversalAxis axis = _zCursor3.getCurrent();
                ListOperations.addElement(res, new Triplet(axis, null, null));
                {
                  ICursor<SNode> _zCursor4 = CursorFactory.createCursor(TreePath_Behavior.call_getFeature_1184591220431(ITreePathExpression_Behavior.call_getTreePath_1194366873089(tpoe), nodeType));
                  try {
                    while(_zCursor4.moveToNext()) {
                      SNode feat = _zCursor4.getCurrent();
                      if(SPropertyOperations.getBoolean(feat, "default")) {
                        ListOperations.addElement(res, new Triplet(axis, feat, null));
                      } else
                      if(SNodeOperations.isInstanceOf(feat, "jetbrains.mps.ypath.structure.IParamFeature")) {
                        {
                          ICursor<SNode> _zCursor5 = CursorFactory.createCursor(IParamFeature_Behavior.call_getParameterObjects_1197461148674(feat, nodeType));
                          try {
                            while(_zCursor5.moveToNext()) {
                              SNode pw = _zCursor5.getCurrent();
                              ListOperations.addElement(res, new Triplet(axis, feat, pw));
                            }
                          } finally {
                            _zCursor5.release();
                          }
                        }
                      } else
                      {
                        ListOperations.addElement(res, new Triplet(axis, feat, null));
                      }
                    }
                  } finally {
                    _zCursor4.release();
                  }
                }
              }
            } finally {
              _zCursor3.release();
            }
          }
          return res;
        }

      };
      Iterable<Triplet> parameterObjects = (Iterable<Triplet>)calculable.calculate();
      assert parameterObjects != null;
      for(Triplet parameter : parameterObjects) {
        result.add(new AbstractRTransformHintSubstituteAction(parameter, sourceNode) {

          public SNode doSubstitute(String pattern) {
            TraversalAxis axis = (TraversalAxis)((Triplet)this.getParameterObject()).first();
            SNode feat = (SNode)((Triplet)this.getParameterObject()).second();
            SNode pw = (SNode)((Triplet)this.getParameterObject()).third();
            SNode tpoExp = SNodeOperations.replaceWithNewChild(sourceNode, "jetbrains.mps.ypath.structure.TreePathOperationExpression");
            SLinkOperations.setTarget(tpoExp, "expression", sourceNode, true);
            SNode op = SModelOperations.createNewNode(model, "jetbrains.mps.ypath.structure.IterateOperation", null);
            SPropertyOperations.set(SLinkOperations.setNewChild(tpoExp, "operation", "jetbrains.mps.ypath.structure.IterateOperation"), "axis", axis.getValue());
            if((feat != null)) {
              SLinkOperations.setTarget(SLinkOperations.getTarget(tpoExp, "operation", true), "usedFeature", feat, false);
              if(SPropertyOperations.getBoolean(feat, "default")) {
                /*
                  SPropertyOperations.set(SLinkOperations.getTarget(tpoExp, "operation", true), "useDefault", "" + (true));
                */
              } else
              if((pw != null)) {
                SLinkOperations.setTarget(SLinkOperations.getTarget(tpoExp, "operation", true), "paramObject", pw, true);
              }
            }
            return tpoExp;
          }

          public String getMatchingText(String text) {
            TraversalAxis axis = (TraversalAxis)((Triplet)this.getParameterObject()).first();
            SNode feat = (SNode)((Triplet)this.getParameterObject()).second();
            SNode pw = (SNode)((Triplet)this.getParameterObject()).third();
            String suffix = "";
            if((feat == null)) {
              suffix = " *";
            } else
            {
              if(SPropertyOperations.getBoolean(feat, "default")) {
                suffix = "";
              } else
              if((pw != null)) {
                suffix = SPropertyOperations.getString(pw, "name");
              } else
              {
                suffix = SPropertyOperations.getString(feat, "name");
              }
            }
            return TraversalAxisUtil.getOperationSign(axis) + suffix;
          }

          public String getDescriptionText(String text) {
            TraversalAxis axis = (TraversalAxis)((Triplet)this.getParameterObject()).first();
            SNode feat = (SNode)((Triplet)this.getParameterObject()).second();
            SNode pw = (SNode)((Triplet)this.getParameterObject()).third();
            String suffix = "";
            if((feat == null)) {
              suffix = "all";
            } else
            {
              if(SPropertyOperations.getBoolean(feat, "default")) {
                suffix = "default";
              } else
              if((pw != null)) {
                suffix = SPropertyOperations.getString(pw, "name") + " " + SPropertyOperations.getString(feat, "name");
              } else
              {
                suffix = SPropertyOperations.getString(feat, "name");
              }
            }
            return "iterate " + axis.getName() + " @" + suffix;
          }

        });
      }
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathOperationExpression", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode tpoExp = SNodeOperations.replaceWithNewChild(sourceNode, "jetbrains.mps.ypath.structure.TreePathOperationExpression");
          SLinkOperations.setTarget(tpoExp, "expression", sourceNode, true);
          SLinkOperations.setNewChild(tpoExp, "operation", "jetbrains.mps.ypath.structure.WhereOperation");
          return tpoExp;
        }

        public String getMatchingText(String pattern) {
          return "[";
        }

        public String getDescriptionText(String pattern) {
          return "where condition";
        }

      });
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathOperationExpression", operationContext.getScope());
      Calculable calculable = new Calculable() {

        public Object calculate() {
          SNode tpoe = SNodeOperations.getAncestor(sourceNode, "jetbrains.mps.ypath.structure.TreePathOperationExpression", true, false);
          return SequenceOperations.toList(SequenceOperations.where(SNodeOperations.getDescendants(ITreePathExpression_Behavior.call_getTreePath_1194366873089(tpoe), null, false), new zPredicate3(null, null)));
        }

      };
      Iterable<SNode> parameterObjects = (Iterable<SNode>)calculable.calculate();
      assert parameterObjects != null;
      for(SNode parameter : parameterObjects) {
        result.add(new AbstractRTransformHintSubstituteAction(parameter, sourceNode) {

          public SNode doSubstitute(String pattern) {
            SNode tpoExp = SNodeOperations.replaceWithNewChild(sourceNode, "jetbrains.mps.ypath.structure.TreePathOperationExpression");
            SLinkOperations.setTarget(tpoExp, "expression", sourceNode, true);
            SNode mnko = SLinkOperations.setNewChild(tpoExp, "operation", "jetbrains.mps.ypath.structure.MatchKindOperation");
            SLinkOperations.setTarget(SLinkOperations.getTarget(mnko, "nodeKindOccurrence", true), "nodeKind", ((SNode)this.getParameterObject()), false);
            return tpoExp;
          }

          public String getMatchingText(String text) {
            return "[ " + SPropertyOperations.getString(((SNode)this.getParameterObject()), "name");
          }

          public String getDescriptionText(String text) {
            return "match node kind";
          }

        });
      }
    }
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("jetbrains.mps.ypath.structure.TreePathOperationExpression", operationContext.getScope());
      Calculable calculable = new Calculable() {

        public Object calculate() {
          SNode tpoe = SNodeOperations.getAncestor(sourceNode, "jetbrains.mps.ypath.structure.TreePathOperationExpression", true, false);
          return SequenceOperations.toList(SequenceOperations.where(SNodeOperations.getDescendants(ITreePathExpression_Behavior.call_getTreePath_1194366873089(tpoe), null, false), new zPredicate4(null, null)));
        }

      };
      Iterable<SNode> parameterObjects = (Iterable<SNode>)calculable.calculate();
      assert parameterObjects != null;
      for(SNode parameter : parameterObjects) {
        result.add(new AbstractRTransformHintSubstituteAction(parameter, sourceNode) {

          public SNode doSubstitute(String pattern) {
            SNode tpoExp = SNodeOperations.replaceWithNewChild(sourceNode, "jetbrains.mps.ypath.structure.TreePathOperationExpression");
            SLinkOperations.setTarget(tpoExp, "expression", sourceNode, true);
            SNode mdpo = SLinkOperations.setNewChild(tpoExp, "operation", "jetbrains.mps.ypath.structure.MatchDefaultPropertyOperation");
            return tpoExp;
          }

          public String getMatchingText(String text) {
            return "[[ " + SPropertyOperations.getString(SNodeOperations.getParent(((SNode)this.getParameterObject()), null, false, false), "name") + "." + SPropertyOperations.getString(((SNode)this.getParameterObject()), "name");
          }

          public String getDescriptionText(String text) {
            return "match default property";
          }

        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1198013650823(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      Calculable calc = new Calculable() {

        public Object calculate() {
          return SNodeOperations.getParent(sourceNode, null, false, false);
        }

      };
      SNode node = (SNode)calc.calculate();
      result.addAll(ModelActions.createRightTransformHintSubstituteActions(node, transformationTag, operationContext));
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_TreePathOperation_1198013650840(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      Calculable calc = new Calculable() {

        public Object calculate() {
          return SNodeOperations.getParent(sourceNode, null, false, false);
        }

      };
      SNode node = (SNode)calc.calculate();
      result.addAll(ModelActions.createRightTransformHintSubstituteActions(node, transformationTag, operationContext));
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_ParameterWrapper_1198013650848(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      Calculable calc = new Calculable() {

        public Object calculate() {
          return SNodeOperations.getParent(sourceNode, null, false, false);
        }

      };
      SNode node = (SNode)calc.calculate();
      result.addAll(ModelActions.createRightTransformHintSubstituteActions(node, transformationTag, operationContext));
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1198013853576(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("null", operationContext.getScope());
      Calculable calculable = new Calculable() {

        public Object calculate() {
          List<Quadruplet> res = ListOperations.createList(new Quadruplet[]{});
          SNode nodeType = (SNode)TypeChecker.getInstance().getTypeOf(sourceNode);
          {
            ICursor<SNode> _zCursor6 = CursorFactory.createCursor(TreePathAspectUtil.getTreePathAspects(sourceNode, operationContext.getScope()));
            try {
              while(_zCursor6.moveToNext()) {
                SNode aspect = _zCursor6.getCurrent();
                {
                  ICursor<TraversalAxis> _zCursor7 = CursorFactory.createCursor(TraversalAxis.getConstants());
                  try {
                    while(_zCursor7.moveToNext()) {
                      TraversalAxis axis = _zCursor7.getCurrent();
                      ListOperations.addElement(res, new Quadruplet(aspect, axis, null, null));
                      {
                        ICursor<SNode> _zCursor8 = CursorFactory.createCursor(TreePath_Behavior.call_getFeature_1184591220431(aspect, nodeType));
                        try {
                          while(_zCursor8.moveToNext()) {
                            SNode feat = _zCursor8.getCurrent();
                            if(SPropertyOperations.getBoolean(feat, "default")) {
                              ListOperations.addElement(res, new Quadruplet(aspect, axis, feat, null));
                            } else
                            if(SNodeOperations.isInstanceOf(feat, "jetbrains.mps.ypath.structure.IParamFeature")) {
                              {
                                ICursor<SNode> _zCursor9 = CursorFactory.createCursor(IParamFeature_Behavior.call_getParameterObjects_1197461148674(feat, nodeType));
                                try {
                                  while(_zCursor9.moveToNext()) {
                                    SNode pw = _zCursor9.getCurrent();
                                    ListOperations.addElement(res, new Quadruplet(aspect, axis, feat, pw));
                                  }
                                } finally {
                                  _zCursor9.release();
                                }
                              }
                            } else
                            {
                              ListOperations.addElement(res, new Quadruplet(aspect, axis, feat, null));
                            }
                          }
                        } finally {
                          _zCursor8.release();
                        }
                      }
                    }
                  } finally {
                    _zCursor7.release();
                  }
                }
              }
            } finally {
              _zCursor6.release();
            }
          }
          return res;
        }

      };
      Iterable<Quadruplet> parameterObjects = (Iterable<Quadruplet>)calculable.calculate();
      assert parameterObjects != null;
      for(Quadruplet parameter : parameterObjects) {
        result.add(new AbstractRTransformHintSubstituteAction(parameter, sourceNode) {

          public SNode doSubstitute(String pattern) {
            SNode aspect = (SNode)((Quadruplet)this.getParameterObject()).first();
            TraversalAxis axis = (TraversalAxis)((Quadruplet)this.getParameterObject()).second();
            SNode feat = (SNode)((Quadruplet)this.getParameterObject()).third();
            SNode pw = (SNode)((Quadruplet)this.getParameterObject()).fourth();
            SNode tpoExp = SNodeOperations.replaceWithNewChild(sourceNode, "jetbrains.mps.ypath.structure.TreePathOperationExpression");
            SLinkOperations.setNewChild(tpoExp, "expression", "jetbrains.mps.ypath.structure.TreePathAdapterExpression");
            SLinkOperations.setTarget(SLinkOperations.getTarget(tpoExp, "expression", true), "expression", sourceNode, true);
            SLinkOperations.setTarget(SLinkOperations.getTarget(tpoExp, "expression", true), "treepathAspect", aspect, false);
            SPropertyOperations.set(SLinkOperations.setNewChild(tpoExp, "operation", "jetbrains.mps.ypath.structure.IterateOperation"), "axis", axis.getValue());
            if((feat != null)) {
              SLinkOperations.setTarget(SLinkOperations.getTarget(tpoExp, "operation", true), "usedFeature", feat, false);
              if(SPropertyOperations.getBoolean(feat, "default")) {
                /*
                  SPropertyOperations.set(SLinkOperations.getTarget(tpoExp, "operation", true), "useDefault", "" + (true));
                */
              } else
              if((pw != null)) {
                SLinkOperations.setTarget(SLinkOperations.getTarget(tpoExp, "operation", true), "paramObject", pw, true);
              }
            }
            return tpoExp;
          }

          public String getMatchingText(String text) {
            SNode aspect = (SNode)((Quadruplet)this.getParameterObject()).first();
            TraversalAxis axis = (TraversalAxis)((Quadruplet)this.getParameterObject()).second();
            SNode feat = (SNode)((Quadruplet)this.getParameterObject()).third();
            SNode pw = (SNode)((Quadruplet)this.getParameterObject()).fourth();
            String suffix = "";
            if((feat == null)) {
              suffix = " *";
            } else
            {
              if(SPropertyOperations.getBoolean(feat, "default")) {
                suffix = "";
              } else
              if((pw != null)) {
                suffix = SPropertyOperations.getString(pw, "name");
              } else
              {
                suffix = SPropertyOperations.getString(feat, "name");
              }
            }
            return TraversalAxisUtil.getOperationSign(axis) + suffix;
          }

          public String getDescriptionText(String text) {
            SNode aspect = (SNode)((Quadruplet)this.getParameterObject()).first();
            TraversalAxis axis = (TraversalAxis)((Quadruplet)this.getParameterObject()).second();
            SNode feat = (SNode)((Quadruplet)this.getParameterObject()).third();
            SNode pw = (SNode)((Quadruplet)this.getParameterObject()).fourth();
            String suffix = "";
            if((feat == null)) {
              suffix = "all";
            } else
            {
              if(SPropertyOperations.getBoolean(feat, "default")) {
                suffix = "default";
              } else
              if((pw != null)) {
                suffix = SPropertyOperations.getString(pw, "name") + " " + SPropertyOperations.getString(feat, "name");
              } else
              {
                suffix = SPropertyOperations.getString(feat, "name");
              }
            }
            return "iterate " + axis.getName() + " @" + suffix + " using " + SPropertyOperations.getString(aspect, "name");
          }

        });
      }
    }
    return result;
  }

  public static void removeActionsByCondition_1178108596882(Iterator<INodeSubstituteAction> actions, final SNode parentNode, final SNode currentChild, final SNode childConcept, final IOperationContext operationContext) {
    while(actions.hasNext()) {
      INodeSubstituteAction current = actions.next();
      if(!(current.getParameterObject() instanceof SNode)) {
        continue;
      }
      final SNode concept = (SNode)current.getParameterObject();
      Condition cond = new Condition() {

        public boolean met(Object object) {
          return !(SConceptOperations.isExactly(childConcept, "jetbrains.mps.ypath.structure.FromOperation"));
        }

      };
      if(cond.met(null)) {
        actions.remove();
      }
    }
  }

  public static void removeActionsByCondition_1178108370239(Iterator<INodeSubstituteAction> actions, final SNode parentNode, final SNode currentChild, final SNode childConcept, final IOperationContext operationContext) {
    while(actions.hasNext()) {
      INodeSubstituteAction current = actions.next();
      if(!(current.getParameterObject() instanceof SNode)) {
        continue;
      }
      final SNode concept = (SNode)current.getParameterObject();
      Condition cond = new Condition() {

        public boolean met(Object object) {
          return !(SConceptOperations.isExactly(childConcept, "jetbrains.mps.ypath.structure.IterateOperation"));
        }

      };
      if(cond.met(null)) {
        actions.remove();
      }
    }
  }

  public static void removeRTActionsByCondition_1198013650232(final Iterator<INodeSubstituteAction> actions, final SNode sourceNode, final IOperationContext operationContext) {
    while(actions.hasNext()) {
      INodeSubstituteAction current = actions.next();
      if(!(current.getParameterObject() instanceof SNode) || !(((SNode)current.getParameterObject()).isInstanceOfConcept("jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration"))) {
        continue;
      }
      final SNode concept = (SNode)current.getParameterObject();
      Condition condition = new Condition() {

        public boolean met(Object p0) {
          return !(SConceptOperations.isSubConceptOf(concept, "jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceOperation") || SConceptOperations.isSubConceptOf(concept, "jetbrains.mps.ypath.structure.TreePathOperationExpression"));
        }

      };
      if(condition.met(null)) {
        actions.remove();
      }
    }
  }

}
