package jetbrains.mps.ypath.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorCellKeyMap;
import jetbrains.mps.nodeEditor.EditorCellKeyMapAction;
import java.awt.event.KeyEvent;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.nodeEditor.EditorCell;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;

public class keymap_ListFeature extends EditorCellKeyMap {

  public  keymap_ListFeature() {
    this.setApplicableToEveryModel(false);
    EditorCellKeyMapAction action;
    this.putAction("alt", "VK_D", new keymap_ListFeature.keymap_ListFeature_Action0());
  }
  public static class keymap_ListFeature_Action0 extends EditorCellKeyMapAction {

    public  keymap_ListFeature_Action0() {
      this.setShownInPopupMenu(false);
    }

    public String getDescriptionText() {
      return "make this feature the default";
    }

    public boolean isMenuAlwaysShown() {
      return false;
    }

    public boolean canExecute(KeyEvent keyEvent, EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if(contextNode == null) {
        return false;
      }
      if(contextNode.isInstanceOfConcept("jetbrains.mps.ypath.structure.ListFeature", editorContext.getOperationContext().getScope())) {
        return true;
      }
      return false;
    }

    public void execute(KeyEvent keyEvent, EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(keyEvent, editorContext, contextCell.getSNode());
    }

    public void execute_internal(KeyEvent keyEvent, EditorContext editorContext, SNode node) {
      SNode tp = SNodeOperations.getAncestor(node, "jetbrains.mps.ypath.structure.TreePath", false, false);
      boolean isDefault = SPropertyOperations.getBoolean(node, "default");
      for(SNode fe : SLinkOperations.getTargets(tp, "features", true)) {
        SPropertyOperations.set(fe, "default", "" + (!(isDefault) && fe == node));
      }
    }

    public String getKeyStroke() {
      return "alt D";
    }

}

}
