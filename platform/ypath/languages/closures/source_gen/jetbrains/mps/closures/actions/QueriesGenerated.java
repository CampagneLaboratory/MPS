package jetbrains.mps.closures.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.bootstrap.structureLanguage.structure.AbstractConceptDeclaration;
import jetbrains.mps.smodel.action.IChildNodeSetter;
import java.util.ArrayList;
import jetbrains.mps.bootstrap.structureLanguage.structure.ConceptDeclaration;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.util.Calculable;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.DefaultChildNodeSubstituteAction;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.action.ChildSubstituteActionsHelper;
import jetbrains.mps.smodel.action.AbstractRTransformHintSubstituteAction;
import jetbrains.mps.smodel.BaseAdapter;

public class QueriesGenerated {

  public static boolean nodeSubstituteActionsBuilder_Precondition_ParameterReference_1199622452307(SNode parentNode, SNode childConcept, IScope scope, IOperationContext operationContext) {
    return (SNodeOperations.getAncestor(parentNode, "jetbrains.mps.closures.structure.ClosureLiteral", false, false) != null);
  }

  public static boolean nodeSubstituteActionsBuilder_Precondition_LocalVariableReference_1199641696225(SNode parentNode, SNode childConcept, IScope scope, IOperationContext operationContext) {
    return !(SequenceOperations.isEmpty(SequenceOperations.where(SNodeOperations.getAncestors(parentNode, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", true), new zPredicate1(null, null))));
  }

  public static boolean nodeSubstituteActionsBuilder_Precondition_ThisExpression_1199651311977(SNode parentNode, SNode childConcept, IScope scope, IOperationContext operationContext) {
    return (SNodeOperations.getAncestor(parentNode, "jetbrains.mps.closures.structure.ClosureLiteral", true, false) != null);
  }

  public static boolean rightTransformHintSubstituteActionsBuilder_Precondition_Expression_1199547343806(SNode sourceNode, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(sourceNode), "jetbrains.mps.closures.structure.FunctionType");
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_ParameterReference_1199622421675(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("null", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          SNode cl = SNodeOperations.getAncestor(parentNode, "jetbrains.mps.closures.structure.ClosureLiteral", false, false);
          return SLinkOperations.getTargets(cl, "parameter", true);
        }

      };
      Iterable<SNode> queryResult = (Iterable)calc.calculate();
      assert queryResult != null;
      for(SNode item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode pr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ParameterReference", null);
            SLinkOperations.setTarget(pr, "variableDeclaration", ((SNode)this.getParameterObject()), false);
            return pr;
          }

          public String getMatchingText(String pattern) {
            return SPropertyOperations.getString(((SNode)this.getParameterObject()), "name");
          }

        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_LocalVariableReference_1199641481621(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("null", operationContext.getScope());
      Calculable calc = new Calculable() {

        public Object calculate() {
          return SequenceOperations.toList(SequenceOperations.where(SNodeOperations.getAncestors(parentNode, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration", true), new zPredicate(null, null)));
        }

      };
      Iterable<SNode> queryResult = (Iterable)calc.calculate();
      assert queryResult != null;
      for(SNode item : queryResult) {
        result.add(new DefaultChildNodeSubstituteAction(item, parentNode, currentTargetNode, childSetter, operationContext.getScope()) {

          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode lvr = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.LocalVariableReference", null);
            SLinkOperations.setTarget(lvr, "variableDeclaration", ((SNode)this.getParameterObject()), false);
            return lvr;
          }

          public String getMatchingText(String pattern) {
            return SPropertyOperations.getString(((SNode)this.getParameterObject()), "name");
          }

        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_ThisExpression_1199651306154(final SNode parentNode, final SNode currentTargetNode, final AbstractConceptDeclaration childConcept, final IChildNodeSetter childSetter, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration conceptToAdd = SModelUtil_new.findConceptDeclaration("jetbrains.mps.baseLanguage.structure.ThisExpression", operationContext.getScope());
      List<INodeSubstituteAction> defaultActions = ChildSubstituteActionsHelper.createDefaultActions(conceptToAdd, parentNode, currentTargetNode, childSetter, operationContext.getScope());
      result.addAll(defaultActions);
    }
    return result;
  }

  public static List<INodeSubstituteAction> rightTransform_ActionsFactory_Expression_1199547332187(final SNode sourceNode, final SModel model, String transformationTag, final IOperationContext operationContext) {
    List<INodeSubstituteAction> result = new ArrayList<INodeSubstituteAction>();
    {
      ConceptDeclaration concept = SModelUtil_new.findConceptDeclaration("null", operationContext.getScope());
      result.add(new AbstractRTransformHintSubstituteAction(BaseAdapter.fromAdapter(concept), sourceNode) {

        public SNode doSubstitute(String pattern) {
          SNode invoke = SNodeOperations.replaceWithNewChild(sourceNode, "jetbrains.mps.closures.structure.InvokeFunctionExpression");
          SLinkOperations.setTarget(invoke, "function", sourceNode, true);
          return invoke;
        }

        public String getMatchingText(String pattern) {
          return ".invoke";
        }

      });
    }
    return result;
  }

}
