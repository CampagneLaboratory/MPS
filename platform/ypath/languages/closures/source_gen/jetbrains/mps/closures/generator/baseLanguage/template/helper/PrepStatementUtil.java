package jetbrains.mps.closures.generator.baseLanguage.template.helper;

/*Generated by MPS */

import jetbrains.mps.generator.template.ITemplateGenerator;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;

public class PrepStatementUtil {

  private PrepStatementUtil.Context ctx;
  private ITemplateGenerator generator;

  private  PrepStatementUtil(ITemplateGenerator generator) {
    this.ctx = new PrepStatementUtil.Context();
    this.generator = generator;
  }

  public static void prepStatementList(SNode slist, ITemplateGenerator generator) {
    PrepStatementUtil psu = new PrepStatementUtil(generator);
    psu.prepTopStatementList(slist);
  }

  public static void putPrepData(SNode sn, Object data, ITemplateGenerator generator) {
    generator.getGeneratorSessionContext().putSessionObject("closure_data_" + ((SNode)sn).getId(), data);
  }

  public static Object getPrepData(SNode sn, ITemplateGenerator generator) {
    return generator.getGeneratorSessionContext().getSessionObject("closure_data_" + ((SNode)sn).getId());
  }


  private void prepTopStatementList(SNode slist) {
    int beginLabel = this.ctx.label;
    this.prepStatementList(slist);
    int endLabel = this.ctx.label + 1;
    PrepStatementUtil.putPrepData(slist, new Integer[]{beginLabel,endLabel}, this.generator);
  }

  private void prepStatementList(SNode slist) {
    for(SNode stmt : SLinkOperations.getTargets(slist, "statement", true)) {
      this.prepStatement(stmt);
    }
  }

  private void prepStatement(SNode stmt) {
    if(SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.baseLanguage.structure.WhileStatement")) {
      this.prepWhileStatement(stmt);
    } else
    if(SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.baseLanguage.structure.DoWhileStatement")) {
      this.prepDoWhileStatement(stmt);
    } else
    if(SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.baseLanguage.structure.ForStatement")) {
      this.prepForStatement(stmt);
    } else
    if(SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.baseLanguage.structure.IfStatement")) {
      this.prepIfStatement(stmt);
    } else
    if(SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")) {
      this.prepLocalvariableDeclarationStatement(stmt);
    } else
    if(SNodeOperations.isInstanceOf(stmt, "jetbrains.mps.closures.structure.YieldStatement")) {
      this.prepYieldStatement(stmt);
    }
  }

  private void prepWhileStatement(SNode wstmt) {
    this.ctx.incrementLabel();
    int beginLabel = this.ctx.label;
    this.ctx.incrementLabel();
    int blockLabel = this.ctx.label;
    this.prepStatementList(SLinkOperations.getTarget(wstmt, "body", true));
    PrepStatementUtil.putPrepData(SLinkOperations.getTarget(wstmt, "body", true), new Integer[]{blockLabel,beginLabel}, this.generator);
    int endLabel = this.ctx.label + 1;
    if((SNodeOperations.getNextSibling(wstmt) != null) && !(StatementListUtil.isControlStatement(SNodeOperations.getNextSibling(wstmt)))) {
      this.ctx.incrementLabel();
    }
    PrepStatementUtil.putPrepData(wstmt, new Integer[]{beginLabel,blockLabel,endLabel}, this.generator);
  }

  public void prepDoWhileStatement(SNode dwstmt) {
    this.ctx.incrementLabel();
    int beginLabel = this.ctx.label;
    this.prepStatementList(SLinkOperations.getTarget(dwstmt, "body", true));
    this.ctx.incrementLabel();
    int condLabel = this.ctx.label;
    PrepStatementUtil.putPrepData(SLinkOperations.getTarget(dwstmt, "body", true), new Integer[]{beginLabel,condLabel}, this.generator);
    int endLabel = this.ctx.label + 1;
    if((SNodeOperations.getNextSibling(dwstmt) != null) && !(StatementListUtil.isControlStatement(SNodeOperations.getNextSibling(dwstmt)))) {
      this.ctx.incrementLabel();
    }
    PrepStatementUtil.putPrepData(dwstmt, new Integer[]{beginLabel,condLabel,endLabel}, this.generator);
  }

  private void prepForStatement(SNode fstmt) {
    this.ctx.incrementLabel();
    int beginLabel = this.ctx.label;
    this.prepLocalVariableDeclaration(SLinkOperations.getTarget(fstmt, "variable", true));
    this.ctx.incrementLabel();
    int condLabel = this.ctx.label;
    // ctx.incrementLabel()
    this.ctx.incrementLabel();
    int blockLabel = this.ctx.label;
    this.prepStatementList(SLinkOperations.getTarget(fstmt, "body", true));
    this.ctx.incrementLabel();
    int postLabel = this.ctx.label;
    PrepStatementUtil.putPrepData(SLinkOperations.getTarget(fstmt, "body", true), new Integer[]{blockLabel,postLabel}, this.generator);
    int endLabel = this.ctx.label + 1;
    if((SNodeOperations.getNextSibling(fstmt) != null) && !(StatementListUtil.isControlStatement(SNodeOperations.getNextSibling(fstmt)))) {
      this.ctx.incrementLabel();
    }
    PrepStatementUtil.putPrepData(fstmt, new Integer[]{beginLabel,condLabel,blockLabel,postLabel,endLabel}, this.generator);
  }

  private void prepIfStatement(SNode ifstmt) {
    this.ctx.incrementLabel();
    int beginLabel = this.ctx.label;
    this.ctx.incrementLabel();
    int ifTrueLabel = this.ctx.label;
    this.prepStatementList(SLinkOperations.getTarget(ifstmt, "ifTrue", true));
    Integer[] trueLabels = new Integer[]{ifTrueLabel,-1};
    PrepStatementUtil.putPrepData(SLinkOperations.getTarget(ifstmt, "ifTrue", true), trueLabels, this.generator);
    int ifFalseLabel = this.ctx.label + 1;
    Integer[] falseLabels = null;
    if((SLinkOperations.getTarget(ifstmt, "ifFalseStatement", true) != null)) {
      if(!(StatementListUtil.isControlStatement(SLinkOperations.getTarget(ifstmt, "ifFalseStatement", true)))) {
        this.ctx.incrementLabel();
      }
      if(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ifstmt, "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.StatementList")) {
        this.prepStatementList(SLinkOperations.getTarget(ifstmt, "ifFalseStatement", true));
        falseLabels = new Integer[]{ifFalseLabel,-1};
        PrepStatementUtil.putPrepData(SLinkOperations.getTarget(ifstmt, "ifFalseStatement", true), falseLabels, this.generator);
      } else
      {
        this.prepStatement(SLinkOperations.getTarget(ifstmt, "ifFalseStatement", true));
      }
    }
    int endLabel = this.ctx.label + 1;
    if((SNodeOperations.getNextSibling(ifstmt) != null) && !(StatementListUtil.isControlStatement(SNodeOperations.getNextSibling(ifstmt)))) {
      this.ctx.incrementLabel();
    }
    PrepStatementUtil.putPrepData(ifstmt, new Integer[]{beginLabel,ifTrueLabel,ifFalseLabel,endLabel}, this.generator);
    trueLabels[1] = endLabel;
    if(falseLabels != null) {
      falseLabels[1] = endLabel;
    }
  }

  private void prepLocalvariableDeclarationStatement(SNode lstmt) {
    this.ctx.incrementLabel();
    PrepStatementUtil.putPrepData(lstmt, this.ctx.label, this.generator);
    this.prepLocalVariableDeclaration(SLinkOperations.getTarget(lstmt, "localVariableDeclaration", true));
  }

  private void prepLocalVariableDeclaration(SNode lvd) {
    String name = "_" + this.ctx.label + "_" + SPropertyOperations.getString(lvd, "name");
    PrepStatementUtil.putPrepData(lvd, name, this.generator);
  }

  public void prepYieldStatement(SNode ystmt) {
    this.ctx.incrementLabel();
    int beginLabel = this.ctx.label;
    this.ctx.incrementLabel();
    int endLabel = this.ctx.label + 1;
    if((SNodeOperations.getNextSibling(ystmt) != null) && !(StatementListUtil.isControlStatement(SNodeOperations.getNextSibling(ystmt)))) {
      this.ctx.incrementLabel();
    }
    PrepStatementUtil.putPrepData(ystmt, new Integer[]{beginLabel,endLabel}, this.generator);
  }

  private static class Context {

    public int label;

    public  Context() {
      this.label = 0;
    }

    public void incrementLabel() {
      this.label = this.label + 1;
    }

}

}
