package jetbrains.mps.closures.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_InvokeFunctionExpression_InferenceRule implements InferenceRule_Runtime {

  public  typeof_InvokeFunctionExpression_InferenceRule() {
  }

  public void applyRule(final SNode invoke) {
    TypeChecker.getInstance().getRuntimeSupport().whenConcrete(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(invoke, "function", true), "jetbrains.mps.closures.helgins", "1199567116884", true), new Runnable() {

      public void run() {
        SNode ft = TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(invoke, "function", true), "jetbrains.mps.closures.helgins", "1199567532549", true);
        TypeChecker.getInstance().getRuntimeSupport().givetype(SLinkOperations.getTarget(ft, "resultType", true), invoke, "jetbrains.mps.closures.helgins", "1199567134945");
        int count = SequenceOperations.count(SLinkOperations.getTargets(invoke, "parameter", true));
        if(!(SequenceOperations.count(SLinkOperations.getTargets(ft, "parameterType", true)) == SequenceOperations.count(SLinkOperations.getTargets(invoke, "parameter", true)))) {
          TypeChecker.getInstance().reportTypeError(invoke, "Wrong parameters number", "jetbrains.mps.closures.helgins", "1199568419784");
        }
      }

    }, "jetbrains.mps.closures.helgins", "1199567113016");
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.closures.structure.InvokeFunctionExpression";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
