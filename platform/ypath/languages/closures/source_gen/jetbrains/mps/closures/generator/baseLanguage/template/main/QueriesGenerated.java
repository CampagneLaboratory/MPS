package jetbrains.mps.closures.generator.baseLanguage.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.CreateRootRuleContext;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.closures.generator.baseLanguage.template.helper.PrepStatementUtil;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.closures.generator.baseLanguage.template.helper.FunctionTypeUtil;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.closures.constraints.FunctionType_Behavior;
import jetbrains.mps.generator.JavaNameUtil;
import jetbrains.mps.patterns.IMatchingPattern;
import jetbrains.mps.bootstrap.helgins.runtime.HUtil;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.core.constraints.BaseConcept_Behavior;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import java.util.List;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import jetbrains.mps.generator.template.IfMacroContext;
import jetbrains.mps.closures.generator.baseLanguage.template.helper.StatementListUtil;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.closures.constraints.ClassifierTypeUtil;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import java.util.ArrayList;
import jetbrains.mps.generator.template.WeavingMappingRuleContext;
import jetbrains.mps.generator.template.MappingScriptContext;

public class QueriesGenerated {

  public static boolean createRootRule_Condition_1199624188477(final IOperationContext operationContext, final CreateRootRuleContext _context) {
    return !(SequenceOperations.isEmpty(SModelOperations.getNodes(_context.getSourceModel(), "jetbrains.mps.closures.structure.ClosureLiteral")));
  }

  public static boolean baseMappingRule_Condition_1201018816706(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201026182242(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201359295364(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201288202981(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201389225625(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201293003300(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201293028247(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201026184426(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201193354452(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201194112613(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201204773236(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "initializer", true) != null);
  }

  public static boolean baseMappingRule_Condition_1201017719800(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201390750887(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201390755365(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201017688485(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201093930999(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return PrepStatementUtil.getPrepData(SLinkOperations.getTarget(_context.getNode(), "variableDeclaration", false), _context.getGenerator()) != null;
  }

  public static boolean baseMappingRule_Condition_1201016704101(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    final zClosureContext _zClosureContext = new zClosureContext();
    SNode cl;
    return SequenceOperations.isEmpty(SequenceOperations.select(SequenceOperations.where(SNodeOperations.getDescendants(_context.getNode(), null, false), new zPredicate(null, _zClosureContext)), new zSelector(null, _zClosureContext)));
  }

  public static boolean baseMappingRule_Condition_1201016795856(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    final zClosureContext1 _zClosureContext1 = new zClosureContext1();
    SNode cl;
    return !(SequenceOperations.isEmpty(SequenceOperations.select(SequenceOperations.where(SNodeOperations.getDescendants(_context.getNode(), null, false), new zPredicate1(null, _zClosureContext1)), new zSelector1(null, _zClosureContext1))));
  }

  public static boolean baseMappingRule_Condition_1201695574384(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    // process only after necessary substitutions have taken place
    boolean hasPrep = FunctionTypeUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
    boolean hasPost = FunctionTypeUtil.getPostData(_context.getNode(), _context.getGenerator()) != null;
    return !(hasPrep) || hasPost;
  }

  public static boolean baseMappingRule_Condition_1201687995672(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    boolean hasPrep = FunctionTypeUtil.getPrepData(_context.getNode(), _context.getGenerator()) != null;
    boolean hasPost = FunctionTypeUtil.getPostData(_context.getNode(), _context.getGenerator()) != null;
    return hasPrep && !(hasPost);
  }

  public static Object propertyMacro_GetPropertyValue_1201095804027(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201204858049(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return (String)PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
  }

  public static Object propertyMacro_GetPropertyValue_1201390868590(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201390896232(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201093988343(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return (String)PrepStatementUtil.getPrepData(SLinkOperations.getTarget(_context.getNode(), "variableDeclaration", false), _context.getGenerator());
  }

  public static Object propertyMacro_GetPropertyValue_1199652367054(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String shortName = "_FunctionTypes." + FunctionType_Behavior.call_getSignature_1199633062014(_context.getNode());
    return JavaNameUtil.fqClassName(_context.getSourceModel(), shortName);
  }

  public static Object propertyMacro_GetPropertyValue_1199624292228(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return FunctionType_Behavior.call_getSignature_1199633062014(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1201649573116(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode target = _context.getNode();
    SNode adaptable = (SNode)((SNode)_context.getNode()).getUserObject("adaptable");
    return FunctionType_Behavior.call_getSignature_1199633062014(adaptable);
  }

  public static Object propertyMacro_GetPropertyValue_1201649554941(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode target = _context.getNode();
    SNode adaptable = (SNode)((SNode)_context.getNode()).getUserObject("adaptable");
    return FunctionType_Behavior.call_getSignature_1199633062014(adaptable) + "_to" + FunctionType_Behavior.call_getSignature_1199633062014(target) + "_adapter";
  }

  public static Object propertyMacro_GetPropertyValue_1201649509432(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode target = _context.getNode();
    SNode adaptable = (SNode)((SNode)_context.getNode()).getUserObject("adaptable");
    return FunctionType_Behavior.call_getSignature_1199633062014(adaptable);
  }

  public static Object propertyMacro_GetPropertyValue_1201649257654(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode target = _context.getNode();
    return FunctionType_Behavior.call_getSignature_1199633062014(target);
  }

  public static Object propertyMacro_GetPropertyValue_1201649129613(final IOperationContext operationContext, final PropertyMacroContext _context) {
    SNode target = _context.getNode();
    SNode adaptable = (SNode)((SNode)_context.getNode()).getUserObject("adaptable");
    return FunctionType_Behavior.call_getSignature_1199633062014(adaptable) + "_to" + FunctionType_Behavior.call_getSignature_1199633062014(target) + "_adapter";
  }

  public static Object propertyMacro_GetPropertyValue_1201048297671(final IOperationContext operationContext, final PropertyMacroContext _context) {
    {
      IMatchingPattern pattern_1201705626189 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1201705626171 = TypeChecker.getInstance().getRuntimeSupport().coerce(SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(_context.getNode()), "resultType", true), pattern_1201705626189);
      if(coercedNode_1201705626171 != null) {
        return BaseConcept_Behavior.call_getPresentation_1180102203531(SLinkOperations.getTarget(coercedNode_1201705626171, "elementType", true));
      }
    }
    return null;
  }

  public static Object propertyMacro_GetPropertyValue_1201048260874(final IOperationContext operationContext, final PropertyMacroContext _context) {
    {
      IMatchingPattern pattern_1201705626218 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType");
      SNode coercedNode_1201705626200 = TypeChecker.getInstance().getRuntimeSupport().coerce(SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(_context.getNode()), "resultType", true), pattern_1201705626218);
      if(coercedNode_1201705626200 != null) {
        return BaseConcept_Behavior.call_getPresentation_1180102203531(SLinkOperations.getTarget(coercedNode_1201705626200, "elementType", true));
      }
    }
    return null;
  }

  public static Object propertyMacro_GetPropertyValue_1201019320624(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return (String)PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
  }

  public static Object propertyMacro_GetPropertyValue_1201359405039(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String varName = (String)PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return varName + "_it";
  }

  public static Object propertyMacro_GetPropertyValue_1201023446586(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201093772964(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return (String)PrepStatementUtil.getPrepData(SLinkOperations.getTarget(_context.getNode(), "variable", true), _context.getGenerator());
  }

  public static Object propertyMacro_GetPropertyValue_1201023446649(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[3];
  }

  public static Object propertyMacro_GetPropertyValue_1201023446682(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[4];
  }

  public static Object propertyMacro_GetPropertyValue_1201094822855(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[2];
  }

  public static Object propertyMacro_GetPropertyValue_1201023446713(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[1];
  }

  public static Object propertyMacro_GetPropertyValue_1201023446743(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[3];
  }

  public static Object propertyMacro_GetPropertyValue_1201024123512(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201025995317(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[1];
  }

  public static Object propertyMacro_GetPropertyValue_1201191004478(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201190969333(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[1];
  }

  public static Object propertyMacro_GetPropertyValue_1201275380390(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201275443501(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[1];
  }

  public static Object propertyMacro_GetPropertyValue_1201275469014(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[((SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true) != null) ?
      2 :
      3
    )];
  }

  public static Object propertyMacro_GetPropertyValue_1201291955078(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201291955110(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[2];
  }

  public static Object propertyMacro_GetPropertyValue_1201291955141(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[3];
  }

  public static Object propertyMacro_GetPropertyValue_1201292912731(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[1];
  }

  public static Object propertyMacro_GetPropertyValue_1201292912754(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201292912793(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[2];
  }

  public static Object propertyMacro_GetPropertyValue_1201358206156(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201358877325(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String varName = (String)PrepStatementUtil.getPrepData(SLinkOperations.getTarget(_context.getNode(), "variable", true), _context.getGenerator());
    return varName + "_it";
  }

  public static Object propertyMacro_GetPropertyValue_1201358206210(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[1];
  }

  public static Object propertyMacro_GetPropertyValue_1201359082835(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String varName = (String)PrepStatementUtil.getPrepData(SLinkOperations.getTarget(_context.getNode(), "variable", true), _context.getGenerator());
    return varName + "_it";
  }

  public static Object propertyMacro_GetPropertyValue_1201358206242(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[3];
  }

  public static Object propertyMacro_GetPropertyValue_1201359122203(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return (String)PrepStatementUtil.getPrepData(SLinkOperations.getTarget(_context.getNode(), "variable", true), _context.getGenerator());
  }

  public static Object propertyMacro_GetPropertyValue_1201359158800(final IOperationContext operationContext, final PropertyMacroContext _context) {
    String varName = (String)PrepStatementUtil.getPrepData(SLinkOperations.getTarget(_context.getNode(), "variable", true), _context.getGenerator());
    return varName + "_it";
  }

  public static Object propertyMacro_GetPropertyValue_1201358206273(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[2];
  }

  public static Object propertyMacro_GetPropertyValue_1201382497207(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201382561130(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(SLinkOperations.getTarget(_context.getNode(), "body", true), _context.getGenerator());
    return labels[0];
  }

  public static Object propertyMacro_GetPropertyValue_1201382704160(final IOperationContext operationContext, final PropertyMacroContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(SLinkOperations.getTarget(_context.getNode(), "defaultBlock", true), _context.getGenerator());
    return labels[0];
  }

  public static Object referenceMacro_GetReferent_1201692320656(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    List<SNode> targets = FunctionTypeUtil.getAdaptableFunctionTypeTargets(TypeChecker.getInstance().getTypeOf(_context.getNode()), _context.getGenerator());
    String trgSig = (String)FunctionTypeUtil.getPrepData(_context.getNode(), _context.getGenerator());
    SNode trg = null;
    for(SNode ft : targets) {
      if(trgSig.equals(FunctionType_Behavior.call_getSignature_1199633062014(ft))) {
        trg = ft;
        break;
      }
    }
    if((trg != null)) {
      SNode cc = _context.getGenerator().findOutputNodeByInputNodeAndMappingName(trg, "functionType_adapter");
      List<SNode> cds = SLinkOperations.getTargets(cc, "constructor", true);
      return ListOperations.getElement(cds, 0);
    }
    return null;
  }

  public static Object referenceMacro_GetReferent_1199624866931(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    final zClosureContext2 _zClosureContext2 = new zClosureContext2();
    SNode ft = TypeChecker.getInstance().getTypeOf(_context.getNode());
    _zClosureContext2.sig = FunctionType_Behavior.call_getSignature_1199633062014(ft);
    SNode fts = _context.getGenerator().getOutputModel().getRootByName("_FunctionTypes");
    return SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getChildren(fts), new zPredicate2(null, _zClosureContext2)));
  }

  public static Object referenceMacro_GetReferent_1201049158321(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    SNode fts = _context.getGenerator().getOutputModel().getRootByName("_FunctionTypes");
    return SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getChildren(fts), new zPredicate3(null, null)));
  }

  public static Object referenceMacro_GetReferent_1201044570620(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    final zClosureContext3 _zClosureContext3 = new zClosureContext3();
    _zClosureContext3.sig = FunctionType_Behavior.call_getSignature_1199633062014(TypeChecker.getInstance().getTypeOf(_context.getNode()));
    SNode fts = _context.getGenerator().getOutputModel().getRootByName("_FunctionTypes");
    return SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getChildren(fts), new zPredicate4(null, _zClosureContext3)));
  }

  public static boolean ifMacro_Condition_1201049059863(final IOperationContext operationContext, final IfMacroContext _context) {
    return Boolean.TRUE.equals(_context.getGenerator().getGeneratorSessionContext().getSessionObject("foundClosureLiteralsWithYield"));
  }

  public static boolean ifMacro_Condition_1201359373031(final IOperationContext operationContext, final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(_context.getNode(), null, false, false), "jetbrains.mps.baseLanguage.structure.ForeachStatement");
  }

  public static boolean ifMacro_Condition_1201421585183(final IOperationContext operationContext, final IfMacroContext _context) {
    List<SNode> stmts = SLinkOperations.getTargets(_context.getNode(), "statement", true);
    return stmts.size() == 0 || !(SNodeOperations.isInstanceOf(stmts.get(stmts.size() - 1), "jetbrains.mps.baseLanguage.structure.BreakStatement") || SNodeOperations.isInstanceOf(stmts.get(stmts.size() - 1), "jetbrains.mps.baseLanguage.structure.ContinueStatement"));
  }

  public static boolean ifMacro_Condition_1201421814921(final IOperationContext operationContext, final IfMacroContext _context) {
    List<SNode> stmts = SLinkOperations.getTargets(_context.getNode(), "statement", true);
    return stmts.size() == 0 || !(SNodeOperations.isInstanceOf(stmts.get(stmts.size() - 1), "jetbrains.mps.baseLanguage.structure.BreakStatement") || SNodeOperations.isInstanceOf(stmts.get(stmts.size() - 1), "jetbrains.mps.baseLanguage.structure.ContinueStatement"));
  }

  public static boolean ifMacro_Condition_1201276700612(final IOperationContext operationContext, final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true) != null) && !(StatementListUtil.isControlStatement(SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true)) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.BlockStatement"));
  }

  public static boolean ifMacro_Condition_1201378781869(final IOperationContext operationContext, final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true) == null) || StatementListUtil.isControlStatement(SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true)) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.BlockStatement");
  }

  public static boolean ifMacro_Condition_1201378852034(final IOperationContext operationContext, final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true) == null) || StatementListUtil.isControlStatement(SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true)) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true), "jetbrains.mps.baseLanguage.structure.BlockStatement");
  }

  public static boolean ifMacro_Condition_1201382524702(final IOperationContext operationContext, final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "defaultBlock", true) != null);
  }

  public static SNode sourceNodeQuery_1201204863526(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "initializer", true);
  }

  public static SNode sourceNodeQuery_1201019808021(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "localVariableDeclaration", true);
  }

  public static SNode sourceNodeQuery_1201693029479(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    FunctionTypeUtil.putPostData(_context.getNode(), "done", _context.getGenerator());
    return _context.getNode();
  }

  public static SNode sourceNodeQuery_1199644437387(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "function", true)), "resultType", true);
  }

  public static SNode sourceNodeQuery_1199646374717(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "function", true);
  }

  public static SNode sourceNodeQuery_1199712173382(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false)), "resultType", true);
  }

  public static SNode sourceNodeQuery_1199712173395(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.ThisExpression", null);
  }

  public static SNode sourceNodeQuery_1199638621010(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedReturnType_1201526153722(_context.getNode());
  }

  public static SNode sourceNodeQuery_1201649283179(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    SNode target = _context.getNode();
    return SLinkOperations.getTarget(target, "resultType", true);
  }

  public static SNode sourceNodeQuery_1199624915150(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedReturnType_1201526153722(TypeChecker.getInstance().getTypeOf(_context.getNode()));
  }

  public static SNode sourceNodeQuery_1199625045481(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "body", true);
  }

  public static SNode sourceNodeQuery_1201045061496(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedSequenceParameterReturnType_1201527054112(TypeChecker.getInstance().getTypeOf(_context.getNode()));
  }

  public static SNode sourceNodeQuery_1201290358773(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedSequenceParameterReturnType_1201527054112(TypeChecker.getInstance().getTypeOf(_context.getNode()));
  }

  public static SNode sourceNodeQuery_1201290332323(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedSequenceParameterReturnType_1201527054112(TypeChecker.getInstance().getTypeOf(_context.getNode()));
  }

  public static SNode sourceNodeQuery_1201435446113(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return FunctionType_Behavior.call_getNormalizedSequenceParameterReturnType_1201527054112(TypeChecker.getInstance().getTypeOf(_context.getNode()));
  }

  public static SNode sourceNodeQuery_1201019303193(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "type", true);
  }

  public static SNode sourceNodeQuery_1201359394958(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return ClassifierTypeUtil.getTypeCoercedToClassifierType(SLinkOperations.getTarget(_context.getNode(), "type", true));
  }

  public static SNode sourceNodeQuery_1201093791966(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "variable", true), "initializer", true);
  }

  public static SNode sourceNodeQuery_1201023446671(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "condition", true);
  }

  public static SNode sourceNodeQuery_1201023446733(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "iteration", true);
  }

  public static SNode sourceNodeQuery_1201026062018(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_1201275418502(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "condition", true);
  }

  public static SNode sourceNodeQuery_1201279870277(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "ifFalseStatement", true);
  }

  public static SNode sourceNodeQuery_1201292104349(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "condition", true);
  }

  public static SNode sourceNodeQuery_1201292912783(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "condition", true);
  }

  public static SNode sourceNodeQuery_1201360662183(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "iterable", true);
  }

  public static SNode sourceNodeQuery_1201382468148(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static SNode sourceNodeQuery_1201382502829(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "expression", true);
  }

  public static List sourceNodesQuery_1199644424783(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "parameter", true);
  }

  public static List sourceNodesQuery_1199712173374(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "parameter", true);
  }

  public static List sourceNodesQuery_1199638584204(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    final zClosureContext4 _zClosureContext4 = new zClosureContext4();
    _zClosureContext4.idx = 1;
    SNode ft = _context.getNode();
    return SequenceOperations.toList(SequenceOperations.select(FunctionType_Behavior.call_getNormalizedParameterTypes_1201526194584(_context.getNode()), new zSelector2(null, _zClosureContext4)));
  }

  public static List sourceNodesQuery_1199624603942(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return FunctionTypeUtil.getAllFunctionTypes(_context.getSourceModel());
  }

  public static List sourceNodesQuery_1201649410581(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    final zClosureContext5 _zClosureContext5 = new zClosureContext5();
    _zClosureContext5.idx = 1;
    SNode target = _context.getNode();
    return SequenceOperations.toList(SequenceOperations.select(FunctionType_Behavior.call_getNormalizedParameterTypes_1201526194584(_context.getNode()), new zSelector3(null, _zClosureContext5)));
  }

  public static List sourceNodesQuery_1201650125685(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    final zClosureContext6 _zClosureContext6 = new zClosureContext6();
    _zClosureContext6.idx = 1;
    SNode target = _context.getNode();
    return SequenceOperations.toList(SequenceOperations.select(SLinkOperations.getTargets(target, "parameterType", true), new zSelector4(null, _zClosureContext6)));
  }

  public static List sourceNodesQuery_1201647430339(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return FunctionTypeUtil.getAllFunctionTypes(_context.getSourceModel());
  }

  public static List sourceNodesQuery_1201647516654(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return FunctionTypeUtil.getAdaptableFunctionTypeTargets(_context.getNode(), _context.getGenerator());
  }

  public static List sourceNodesQuery_1199624932349(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    final zClosureContext7 _zClosureContext7 = new zClosureContext7();
    _zClosureContext7.paramDecls = SLinkOperations.getTargets(_context.getNode(), "parameter", true);
    _zClosureContext7.idx = 0;
    return SequenceOperations.toList(SequenceOperations.select(FunctionType_Behavior.call_getNormalizedParameterTypes_1201526194584(TypeChecker.getInstance().getTypeOf(_context.getNode())), new zSelector5(null, _zClosureContext7)));
  }

  public static List sourceNodesQuery_1201044612684(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    final zClosureContext8 _zClosureContext8 = new zClosureContext8();
    _zClosureContext8.paramDecls = SLinkOperations.getTargets(_context.getNode(), "parameter", true);
    _zClosureContext8.idx = 0;
    return SequenceOperations.toList(SequenceOperations.select(FunctionType_Behavior.call_getNormalizedParameterTypes_1201526194584(TypeChecker.getInstance().getTypeOf(_context.getNode())), new zSelector6(null, _zClosureContext8)));
  }

  public static List sourceNodesQuery_1201190892393(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "statement", true);
  }

  public static List sourceNodesQuery_1201187449746(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    Integer[] labels = (Integer[])PrepStatementUtil.getPrepData(_context.getNode(), _context.getGenerator());
    int BEGIN = labels[0];
    int END = labels[1];
    List<SNode> results = new ArrayList<SNode>();
    List<SNode> stmts = StatementListUtil.selectStatementsUntilControlStatement(_context.getNode());
    do {
      int beginLabel = BEGIN;
      int endLabel = END;
      SNode lastStmt = null;
      SNode slist = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StatementList", null);
      for(SNode stmt : stmts) {
        SNode tmp = SNodeOperations.copyNode(stmt);
        SLinkOperations.addChild(slist, "statement", tmp);
        PrepStatementUtil.putPrepData(tmp, PrepStatementUtil.getPrepData(stmt, _context.getGenerator()), _context.getGenerator());
        if(SNodeOperations.isInstanceOf(tmp, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement")) {
          SNode lvd = SLinkOperations.getTarget(tmp, "localVariableDeclaration", true);
          PrepStatementUtil.putPrepData(lvd, PrepStatementUtil.getPrepData(SLinkOperations.getTarget(stmt, "localVariableDeclaration", true), _context.getGenerator()), _context.getGenerator());
        }
        lastStmt = stmt;
      }
      SNode cstmt = null;
      if((lastStmt != null)) {
        cstmt = SNodeOperations.getNextSibling(lastStmt);
      } else
      {
        List<SNode> allstmts = (List<SNode>)SLinkOperations.getTargets(_context.getNode(), "statement", true);
        cstmt = (allstmts.size() > 0 ?
          allstmts.get(0) :
          null
        );
      }
      stmts = null;
      if((cstmt != null)) {
        labels = (Integer[])PrepStatementUtil.getPrepData(cstmt, _context.getGenerator());
        endLabel = (labels != null ?
          labels[0] :
          -1
        );
        lastStmt = SNodeOperations.getNextSibling(cstmt);
        while((lastStmt != null)) {
          stmts = StatementListUtil.selectStatementsUntilControlStatement(_context.getNode(), lastStmt);
          if(stmts.size() == 0) {
            cstmt = lastStmt;
            lastStmt = SNodeOperations.getNextSibling(lastStmt);
          } else
          {
            labels = (Integer[])PrepStatementUtil.getPrepData(cstmt, _context.getGenerator());
            BEGIN = (labels != null ?
              labels[labels.length - 1] :
              -1
            );
            break;
          }
        }
      }
      results.add(slist);
      PrepStatementUtil.putPrepData(slist, new Integer[]{beginLabel,endLabel}, _context.getGenerator());
    } while(stmts != null && stmts.size() > 0);
    return results;
  }

  public static List sourceNodesQuery_1201382476594(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "case", true);
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201018804729(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    SNode gne = _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false), "closure_class");
    return SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getDescendants(gne, null, false), new zPredicate5(null, null)));
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201023865086(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201359280410(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201288191966(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201389219923(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201292996398(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201293019491(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201026203690(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1201193348813(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    return _context.getGenerator().findOutputNodeByInputNodeAndMappingName(SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.closures.structure.ClosureLiteral", false, false), "closure_switch");
  }

  public static void mappingScript_CodeBlock_1201011417446(final IOperationContext operationContext, final MappingScriptContext _context) {
    final zClosureContext9 _zClosureContext9 = new zClosureContext9();
    Iterable<SNode> closures = SequenceOperations.where(SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.closures.structure.ClosureLiteral"), new zPredicate7(null, _zClosureContext9));
    boolean found = false;
    for(SNode cl : closures) {
      PrepStatementUtil.prepStatementList(SLinkOperations.getTarget(cl, "body", true), _context.getGenerator());
      found = true;
    }
    if(found) {
      _context.getGenerator().getGeneratorSessionContext().putSessionObject("foundClosureLiteralsWithYield", Boolean.TRUE);
    }
  }

  public static void mappingScript_CodeBlock_1201686683809(final IOperationContext operationContext, final MappingScriptContext _context) {
    List<SNode> bmcs = SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.structure.BaseMethodCall");
    for(SNode bmc : bmcs) {
      List<SNode> args = SLinkOperations.getTargets(bmc, "actualArgument", true);
      List<SNode> pdecls = SLinkOperations.getTargets(SLinkOperations.getTarget(bmc, "baseMethodDeclaration", false), "parameter", true);
      int idx = 0;
      for(SNode pdecl : pdecls) {
        if(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(pdecl, "type", true), "jetbrains.mps.closures.structure.FunctionType")) {
          SNode arg = ListOperations.getElement(args, idx);
          {
            IMatchingPattern pattern_1201705629335 = HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.closures.structure.FunctionType");
            SNode coercedNode_1201705629334 = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(arg), pattern_1201705629335);
            if(coercedNode_1201705629334 != null) {
              SNode ptype = SLinkOperations.getTarget(pdecl, "type", true);
              if(SNodeOperations.isInstanceOf(ptype, "jetbrains.mps.closures.structure.FunctionType") && !(FunctionType_Behavior.call_getSignature_1199633062014(coercedNode_1201705629334).equals(FunctionType_Behavior.call_getSignature_1199633062014(ptype)))) {
                FunctionTypeUtil.addAdaptableFunctionTypeTarget(coercedNode_1201705629334, ptype, _context.getGenerator());
                FunctionTypeUtil.putPrepData(ListOperations.getElement(args, idx), FunctionType_Behavior.call_getSignature_1199633062014(ptype), _context.getGenerator());
              }
            }
          }
        }
        idx = idx + 1;
      }
    }
  }

  public static void mappingScript_CodeBlock_1201703119163(final IOperationContext operationContext, final MappingScriptContext _context) {
    List<SNode> aes = SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.structure.AssignmentExpression");
    for(SNode ae : aes) {
      SNode ltype = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(ae, "lValue", true)), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.closures.structure.FunctionType"), true);
      SNode rtype = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(ae, "rValue", true)), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.closures.structure.FunctionType"), true);
      if((ltype != null) && (rtype != null)) {
        if(!(FunctionType_Behavior.call_getSignature_1199633062014(ltype).equals(FunctionType_Behavior.call_getSignature_1199633062014(rtype)))) {
          FunctionTypeUtil.addAdaptableFunctionTypeTarget(rtype, ltype, _context.getGenerator());
          FunctionTypeUtil.putPrepData(SLinkOperations.getTarget(ae, "rValue", true), FunctionType_Behavior.call_getSignature_1199633062014(ltype), _context.getGenerator());
        }
      }
    }
  }

  public static void mappingScript_CodeBlock_1201705474278(final IOperationContext operationContext, final MappingScriptContext _context) {
    List<SNode> vds = SModelOperations.getNodes(_context.getModel(), "jetbrains.mps.baseLanguage.structure.VariableDeclaration");
    for(SNode vd : vds) {
      if(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(vd, "type", true), "jetbrains.mps.closures.structure.FunctionType")) {
        SNode vdType = SLinkOperations.getTarget(vd, "type", true);
        SNode initType = TypeChecker.getInstance().getRuntimeSupport().coerce(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(vd, "initializer", true)), HUtil.createMatchingPatternByConceptFQName("jetbrains.mps.closures.structure.FunctionType"), true);
        if((initType != null)) {
          if(!(FunctionType_Behavior.call_getSignature_1199633062014(vdType).equals(FunctionType_Behavior.call_getSignature_1199633062014(initType)))) {
            FunctionTypeUtil.addAdaptableFunctionTypeTarget(initType, vdType, _context.getGenerator());
            FunctionTypeUtil.putPrepData(SLinkOperations.getTarget(vd, "initializer", true), FunctionType_Behavior.call_getSignature_1199633062014(vdType), _context.getGenerator());
          }
        }
      }
    }
  }

}
