package jetbrains.mps.closures.generator.baseLanguage.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.SModel;
import jetbrains.mps.generator.template.ITemplateGenerator;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.closures.constraints.FunctionType_Behavior;
import jetbrains.mps.generator.JavaNameUtil;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;
import java.text.Collator;
import java.util.Iterator;

public class QueriesGenerated {

  public static boolean createRootRule_Condition_1199624188477(SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return !(SequenceOperations.isEmpty(SModelOperations.getNodes(sourceModel, "jetbrains.mps.closures.structure.ClosureLiteral")));
  }

  public static boolean baseMappingRule_Condition_1199650394849(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "type", true), "jetbrains.mps.closures.structure.FunctionType") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "initializer", true), "jetbrains.mps.closures.structure.ClosureLiteral");
  }

  public static boolean baseMappingRule_Condition_1199650433722(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "type", true), "jetbrains.mps.closures.structure.FunctionType") && (SLinkOperations.getTarget(node, "initializer", true) == null);
  }

  public static boolean baseMappingRule_Condition_1199652422931(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return false;
  }

  public static Object propertyMacro_GetPropertyValue_1199652367054(SNode node, String templateValue, SNode templateNode, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    String shortName = "_FunctionTypes." + FunctionType_Behavior.call_getSignature_1199633062014(node);
    return JavaNameUtil.fqClassName(sourceModel, shortName);
  }

  public static Object propertyMacro_GetPropertyValue_1199624292228(SNode node, String templateValue, SNode templateNode, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return FunctionType_Behavior.call_getSignature_1199633062014(node);
  }

  public static Object propertyMacro_GetPropertyValue_1199647030748(SNode node, String templateValue, SNode templateNode, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    String shortName = "_FunctionTypes." + FunctionType_Behavior.call_getSignature_1199633062014(SLinkOperations.getTarget(node, "type", true));
    return JavaNameUtil.fqClassName(sourceModel, shortName);
  }

  public static Object propertyMacro_GetPropertyValue_1199647030781(SNode node, String templateValue, SNode templateNode, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    String shortName = "_FunctionTypes." + FunctionType_Behavior.call_getSignature_1199633062014(SLinkOperations.getTarget(node, "type", true));
    return JavaNameUtil.fqClassName(sourceModel, shortName);
  }

  public static Object propertyMacro_GetPropertyValue_1199647030801(SNode node, String templateValue, SNode templateNode, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getString(node, "name");
  }

  public static Object propertyMacro_GetPropertyValue_1199650324387(SNode node, String templateValue, SNode templateNode, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    String shortName = "_FunctionTypes." + FunctionType_Behavior.call_getSignature_1199633062014(SLinkOperations.getTarget(node, "type", true));
    return JavaNameUtil.fqClassName(sourceModel, shortName);
  }

  public static Object propertyMacro_GetPropertyValue_1199650358458(SNode node, String templateValue, SNode templateNode, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    String shortName = "_FunctionTypes." + FunctionType_Behavior.call_getSignature_1199633062014(SLinkOperations.getTarget(node, "type", true));
    return JavaNameUtil.fqClassName(sourceModel, shortName);
  }

  public static Object propertyMacro_GetPropertyValue_1199650324434(SNode node, String templateValue, SNode templateNode, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SPropertyOperations.getString(node, "name");
  }

  public static Object referenceMacro_GetReferent_1199624866931(SNode node, SNode templateNode, SNode outputNode, SModel sourceModel, ITemplateGenerator generator) {
    final zClosureContext _zClosureContext = new zClosureContext();
    _zClosureContext.sig = FunctionType_Behavior.call_getSignature_1199633062014(TypeChecker.getInstance().getTypeOf(node));
    SNode fts = generator.getOutputModel().getRootByName("_FunctionTypes");
    return SequenceOperations.getFirst(SequenceOperations.where(SNodeOperations.getChildren(fts), new zPredicate(null, _zClosureContext)));
  }

  public static List sourceNodesQuery_1199644424783(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTargets(node, "parameter", true);
  }

  public static List sourceNodesQuery_1199638584204(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    final zClosureContext1 _zClosureContext1 = new zClosureContext1();
    _zClosureContext1.idx = 1;
    return SequenceOperations.toList(SequenceOperations.select(SLinkOperations.getTargets(node, "parameterType", true), new zSelector(null, _zClosureContext1)));
  }

  public static List sourceNodesQuery_1199624603942(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    Iterable<SNode> clTypes = SequenceOperations.select(SModelOperations.getNodes(sourceModel, "jetbrains.mps.closures.structure.ClosureLiteral"), new zSelector1(null, null));
    List<SNode> funTypes = SModelOperations.getNodes(sourceModel, "jetbrains.mps.closures.structure.FunctionType");
    List<SNode> typesList = SequenceOperations.toList(SequenceOperations.union(clTypes, funTypes));
    Collections.sort(typesList, new Comparator() {

      public int compare(Object x, Object y) {
        return Collator.getInstance().compare(FunctionType_Behavior.call_getSignature_1199633062014(((SNode)x)), FunctionType_Behavior.call_getSignature_1199633062014(((SNode)y)));
      }

    });
    SNode prev = null;
    for(Iterator it = ((List)typesList).iterator() ; it.hasNext() ; ) {
      SNode next = ((SNode)it.next());
      if(Collator.getInstance().compare(FunctionType_Behavior.call_getSignature_1199633062014(((SNode)prev)), FunctionType_Behavior.call_getSignature_1199633062014(((SNode)next))) == 0) {
        it.remove();
      } else
      {
        prev = next;
      }
    }
    return typesList;
  }

  public static List sourceNodesQuery_1199624932349(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTargets(node, "parameter", true);
  }

  public static SNode sourceNodeQuery_1199644437387(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node, "function", true)), "resultType", true);
  }

  public static SNode sourceNodeQuery_1199646374717(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "function", true);
  }

  public static SNode sourceNodeQuery_1199638621010(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "resultType", true);
  }

  public static SNode sourceNodeQuery_1199624915150(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(TypeChecker.getInstance().getTypeOf(node), "resultType", true);
  }

  public static SNode sourceNodeQuery_1199625045481(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "body", true);
  }

  public static SNode sourceNodeQuery_1199647030771(SNode node, SModel sourceModel, ITemplateGenerator generator, IScope scope, IOperationContext operationContext) {
    return SLinkOperations.getTarget(node, "initializer", true);
  }

}
