package jetbrains.mps.baseLanguage.logging.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandlerElementKeyMap;
import jetbrains.mps.nodeEditor.cellMenu.DefaultReferenceSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class PrintStatement_Editor extends DefaultNodeEditor {

  /* package */AbstractCellListHandler myListHandler_1168401913942;

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createCollection1168401889745(context, node);
  }

  public EditorCell createCollection1168401889745(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_11684018897451168401889745(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1168401893043(context, node, "print"));
    editorCell.addEditorCell(this.createConstant1168401896077(context, node, "("));
    editorCell.addEditorCell(this.createRefNodeList1168401913942(context, node));
    editorCell.addEditorCell(this.createConstant1168401899172(context, node, ")"));
    editorCell.addEditorCell(this.createConstant1168401902190(context, node, ";"));
    return editorCell;
  }

  public EditorCell createConstant1168401893043(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11684018930431168401893043(editorCell, node, context);
    setupLabel_Constant_1168401893043_1168401893043(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1168401896077(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11684018960771168401896077(editorCell, node, context);
    setupLabel_Constant_1168401896077_1168401896077(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1168401899172(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11684018991721168401899172(editorCell, node, context);
    setupLabel_Constant_1168401899172_1168401899172(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1168401902190(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11684019021901168401902190(editorCell, node, context);
    setupLabel_Constant_1168401902190_1168401902190(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createRefNodeList1168401913942(EditorContext context, SNode node) {
    if (this.myListHandler_1168401913942 == null) {
      this.myListHandler_1168401913942 = new PrintStatement_Editor.textExpressionListHandler_8438_0(node, "textExpression", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1168401913942.createCells(context, new CellLayout_Horizontal(), false);
    setupBasic_refNodeList_textExpression1168401913942(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.putUserObject(EditorCell.ROLE, this.myListHandler_1168401913942.getElementRole());
    return editorCell;
  }


  private static void setupBasic_Collection_11684018897451168401889745(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1168401889745");
  }

  private static void setupBasic_Constant_11684018930431168401893043(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1168401893043");
  }

  private static void setupBasic_Constant_11684018960771168401896077(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1168401896077");
  }

  private static void setupBasic_Constant_11684018991721168401899172(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1168401899172");
  }

  private static void setupBasic_Constant_11684019021901168401902190(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1168401902190");
  }

  private static void setupBasic_refNodeList_textExpression1168401913942(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_textExpression");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, true);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupLabel_Constant_1168401893043_1168401893043(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1168401896077_1168401896077(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1168401899172_1168401899172(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1168401902190_1168401902190(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_textExpression_1168401913942(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  public static class textExpressionListHandler_8438_0 extends RefNodeListHandler {

    public textExpressionListHandler_8438_0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = this.createEmptyCell_internal(context, this.getOwner());
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public EditorCell createEmptyCell_internal(EditorContext context, SNode node) {
      return this.createConstant1168401922068(context, node, "");
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
          elementCell.addKeyMap(new RefNodeListHandlerElementKeyMap(this, "+"));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      {
        EditorCell_Constant editorCell = new EditorCell_Constant(context, this.getOwner(), "+");
        editorCell.setSelectable(false);
        return editorCell;
      }
    }

    public EditorCell createConstant1168401922068(EditorContext context, SNode node, String text) {
      EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
      setupBasic_Constant_11684019220681168401922068(editorCell, node, context);
      setupLabel_Constant_1168401922068_1168401922068(editorCell, node, context);
      editorCell.setDefaultText("");
      return editorCell;
    }


    private static void setupBasic_Constant_11684019220681168401922068(EditorCell editorCell, SNode node, EditorContext context) {
      editorCell.setCellId("Constant_1168401922068");
      {
        Style inlineStyle = new Style(editorCell) {
          {
            this.set(StyleAttributes.EDITABLE, true);
          }

        };
        inlineStyle.apply(editorCell);
      }
    }

    private static void setupLabel_Constant_1168401922068_1168401922068(EditorCell_Label editorCell, SNode node, EditorContext context) {
    }

}

}
