package jetbrains.mps.buildlanguage;

/*Generated by MPS */

import jetbrains.mps.buildlanguage.TaskImporter.IWalker;
import jetbrains.mps.buildlanguage.structure.Type;
import junit.framework.Assert;
import junit.framework.TestCase;
import org.apache.tools.ant.Task;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;

public class TaskImporterTestCase extends TestCase {
  private static final String ANT_PATH = System.getProperty("user.dir")+"/lib/ant-1.7.0";
  private static final String TEST_FOLDER = "platform/buildlanguage/tests";

  public void testTestTask1(){
    try {
      Map<String, Class<?>> attrs = TaskImporter.getInstance().getAttributesFromTask(ANT_PATH, TEST_FOLDER,"jetbrains.mps.buildlanguage.resource.TestTask", Task.class);
      assertTrue(attrs.get("booleanattribute").equals(boolean.class));
      assertTrue(attrs.get("intattribute").equals(int.class));
      assertTrue(attrs.get("stringattribute").equals(String.class));
      assertEquals(3, attrs.size());
    } catch (IOException e) {
      fail(e);
    } catch (ClassNotFoundException e) {
      fail(e);
    }
  }

  public void testGenerateTasks1(){
    try {
      TaskImporterTestCase.TestWalker testWalker = new TestWalker();
      TaskImporter.getInstance().generateHierarchy(ANT_PATH, "platform/buildlanguage/tests/testTasks.jar", testWalker);
      assertEquals("declarations {child=false, datatype=true, parent=false, task=true}\n" +
                   "nesteds {}\n" +
                   "parents {child=parent, parent=task}\n" +
                   "attributes {intattribute=int, stringattribute=class java.lang.String}", testWalker.toString());
    } catch (IOException e) {
      fail(e);
    } catch (ClassNotFoundException e) {
      fail(e);
    }
  }

  public void testGenerateTasks2NestedElements(){
    try {
      TaskImporterTestCase.TestWalker testWalker = new TestWalker();
      TaskImporter.getInstance().generateHierarchy(ANT_PATH, "platform/buildlanguage/tests/testNested.jar", testWalker);
      assertEquals("declarations {bigtask=false, datatype=true, inner1=false, task=true}\n" +
                   "nesteds {bigtask=inner1}\n" +
                   "parents {bigtask=task}\n" +
                   "attributes {}", testWalker.toString());
    } catch (IOException e) {
      fail(e);
    } catch (ClassNotFoundException e) {
      fail(e);
    }
  }

  private static void fail(Exception e) {
    StringWriter writer = new StringWriter();
    e.printStackTrace(new PrintWriter(writer));
    Assert.fail(writer.toString());
  }

  private class TestWalker implements IWalker {

    private Map<String, Boolean> myDecls = new TreeMap<String, Boolean>();
    private Map<String, String> myNesteds = new TreeMap<String, String>();
    private Map<String, String> myParents = new TreeMap<String, String>();
    private Map<String, Class<?>> myAttributes = new TreeMap<String, Class<?>>();

    @Override
    public String toString(){
      StringBuffer sb = new StringBuffer();
      sb.append("declarations ");
      sb.append(myDecls);
      sb.append("\n");
      sb.append("nesteds ");
      sb.append(myNesteds);
      sb.append("\n");
      sb.append("parents ");
      sb.append(myParents);
      sb.append("\n");
      sb.append("attributes ");
      sb.append(myAttributes);
      return sb.toString();
    }

    public void createDeclaration(String declName, boolean isAbstract) {
      myDecls.put(declName, isAbstract);
    }

    public void addParent(String declName, String parentName) {
      assertTrue(declName, myDecls.containsKey(declName));
      assertTrue(parentName, myDecls.containsKey(parentName));
      myParents.put(declName, parentName);
    }

    public void addNested(String declName, Set<String> nestedNames) {
      assertTrue(declName, myDecls.containsKey(declName));
      for (String nestedName : nestedNames){
        assertTrue(nestedName, myDecls.containsKey(nestedName));
        myNesteds.put(declName, nestedName);
      }
    }

    public void addAttribute(String declName, String attrName, Class<?> type) {
      assertTrue(declName, myDecls.containsKey(declName));
      myAttributes.put(attrName, type);
    }
  }
}
