package jetbrains.mps.buildlanguage;

/*Generated by MPS */

import jetbrains.mps.buildlanguage.TaskImporter.IWalker;
import junit.framework.Assert;
import junit.framework.TestCase;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Map;

public class TaskImporterTestCase extends TestCase {
  private static final String ANT_PATH = System.getProperty("user.dir")+"/lib/ant-1.7.0";
  private static final String TEST_FOLDER = "platform/buildlanguage/tests";

  public void testTestTask1(){
    try {
      Map<String, Class<?>> attrs = TaskImporter.getAttributesFromTask(ANT_PATH, TEST_FOLDER,"jetbrains.mps.buildlanguage.resource.TestTask");
      assertTrue(attrs.get("booleanattribute").equals(boolean.class));
      assertTrue(attrs.get("intattribute").equals(int.class));
      assertTrue(attrs.get("stringattribute").equals(String.class));
      assertEquals(3, attrs.size());
    } catch (IOException e) {
      fail(e);
    } catch (ClassNotFoundException e) {
      fail(e);
    }
  }

  //TODO  Tets loading from jar

  public void testGenerateTasks1(){
    try {
      TaskImporterTestCase.TestWalker testWalker = new TestWalker();
      TaskImporter.generateTasks(ANT_PATH, "platform/buildlanguage/tests/testTasks.jar", testWalker);
      System.out.println(testWalker.toString());
      assertEquals("parent extends null is abstract false\n" +
                   "    attribute stringattribute : class java.lang.String"+
                   "child extends parent is abstract false\n" +
                   "    attribute intattribute : " + int.class, testWalker.toString());
    } catch (IOException e) {
      fail(e);
    } catch (ClassNotFoundException e) {
      fail(e);
    }
  }

  private static void fail(Exception e) {
    StringWriter writer = new StringWriter();
    e.printStackTrace(new PrintWriter(writer));
    Assert.fail(writer.toString());
  }

  private class TestWalker implements IWalker {

    private final StringBuffer myLog = new StringBuffer();

    public void createTask(String name, String parentName, boolean isAbstract) {
      myLog.append(name);
      myLog.append(" extends ");
      myLog.append(parentName);
      myLog.append(" is abstract ");
      myLog.append(isAbstract);
      myLog.append("\n");
    }

    public void addAttribute(String name, Class<?> type) {
      myLog.append("    attribute ");
      myLog.append(name);
      myLog.append(" : ");
      myLog.append(type);
      myLog.append("\n");
    }

    @Override
    public String toString(){
      return myLog.toString();
    }
  }
}
