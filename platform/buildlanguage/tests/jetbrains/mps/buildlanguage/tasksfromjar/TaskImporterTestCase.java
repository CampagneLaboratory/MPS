package jetbrains.mps.buildlanguage.tasksfromjar;

/*Generated by MPS */

import jetbrains.mps.buildlanguage.resource.Child;
import jetbrains.mps.buildlanguage.resource.Parent;
import jetbrains.mps.buildlanguage.tasksfromjar.ClassInfo.Attribute;
import junit.framework.Assert;
import junit.framework.TestCase;
import org.apache.tools.ant.Task;
import org.apache.tools.ant.taskdefs.Exec;
import org.apache.tools.ant.taskdefs.Zip;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.*;
import java.util.jar.JarFile;

public class TaskImporterTestCase extends TestCase {
  private static final String ANT_PATH = System.getProperty("user.dir")+"/lib/ant-1.7.0";
  private static final String TEST_FOLDER = "platform/buildlanguage/tests";

  public void testTestTask1(){
    /*try {
      ClassLoader loader = JarAntStuffImporter.getInstance().createClassLoader(ANT_PATH, TEST_FOLDER);
      ClassInfo classInfo = new ClassInfo(loader.loadClass("jetbrains.mps.buildlanguage.resource.TestTask"));
      Set<Attribute> attrs = classInfo.getAttributes();
      assertTrue(attrs.contains(new Attribute("booleanattribute")));
      assertTrue(attrs.contains(new Attribute("booleanattribute")));
      assertTrue(attrs.contains(new Attribute("stringattribute")));
      // TODO check types
      assertEquals(3, attrs.size());
    } catch (IOException e) {
      throw new RuntimeException(e);
    } catch (ClassNotFoundException e) {
      throw new RuntimeException(e);
    }*/
  }

  public void testGetTaskClasses(){
    /*try {
      ClassLoader cl = JarAntStuffImporter.getInstance().createClassLoader(ANT_PATH, "platform/buildlanguage/tests/testTasks.jar");
      Set<Class<? extends Task>> taskClasses = JarAntStuffImporter.getInstance().getTaskClasses(new JarFile("platform/buildlanguage/tests/testTasks.jar"), cl, Task.class).keySet();
      assertTrue(taskClasses.contains(cl.loadClass(Parent.class.getName())));
      assertTrue(taskClasses.contains(cl.loadClass(Child.class.getName())));
      assertEquals(2, taskClasses.size());
    } catch (IOException e) {
      throw new RuntimeException(e);
    } catch (ClassNotFoundException e) {
      throw new RuntimeException(e);
    }*/
  }

  public void testGenerateTasks1(){
    /*try {
      TaskImporterTestCase.TestWalker testWalker = new TestWalker();
      JarAntStuffImporter.getInstance().generateHierarchy(ANT_PATH, "platform/buildlanguage/tests/testTasks.jar", testWalker);
      assertEquals("declarations {child=false, datatype=true, parent=false, task=true}\n" +
                   "interfaces {}\n" +
                   "nesteds {}\n" +
                   "parents {child=parent, parent=task}\n" +
                   "attributes {intattribute=int, stringattribute=class java.lang.String}", testWalker.toString());
    } catch (IOException e) {
      fail(e);
    } catch (ClassNotFoundException e) {
      fail(e);
    }*/
  }

  public void testGenerateTasks2NestedElements(){
    /*try {
      TaskImporterTestCase.TestWalker testWalker = new TestWalker();
      JarAntStuffImporter.getInstance().generateHierarchy(ANT_PATH, "platform/buildlanguage/tests/testNested.jar", testWalker);
      assertEquals("declarations {bigtask=false, datatype=true, inner1=false, inner2=false, inner3=false, task=true}\n" +
                   "interfaces {}\n" +
                   "nesteds {bigtask=[inner2, inner3, inner1]}\n" +
                   "parents {bigtask=task, inner1=datatype, inner2=datatype, inner3=datatype}\n" +
                   "attributes {}", testWalker.toString());
    } catch (IOException e) {
      fail(e);
    } catch (ClassNotFoundException e) {
      fail(e);
    }*/
  }

  private static void fail(Exception e) {
    StringWriter writer = new StringWriter();
    e.printStackTrace(new PrintWriter(writer));
    Assert.fail(writer.toString());
  }

  public void testDeprecated(){
    ClassInfo ci = new ClassInfo(Exec.class);
    assertTrue(ci.isDeprecated());
  }

  public void testNotDeprecated(){
    ClassInfo ci = new ClassInfo(Zip.class);
    assertFalse(ci.isDeprecated());
  }

  /*private class TestWalker implements IWalker {

    private Map<String, Boolean> myDecls = new TreeMap<String, Boolean>();
    private Map<String, Boolean> myInterfaces = new TreeMap<String, Boolean>();
    private Map<String, LinkedList<String>> myNesteds = new TreeMap<String, LinkedList<String>>();
    private Map<String, String> myParents = new TreeMap<String, String>();
    private Map<String, Class<?>> myAttributes = new TreeMap<String, Class<?>>();

    @Override
    public String toString(){
      StringBuffer sb = new StringBuffer();
      sb.append("declarations ");
      sb.append(myDecls);
      sb.append("\n");
      sb.append("interfaces ");
      sb.append(myInterfaces);
      sb.append("\n");
      sb.append("nesteds ");
      sb.append(myNesteds);
      sb.append("\n");
      sb.append("parents ");
      sb.append(myParents);
      sb.append("\n");
      sb.append("attributes ");
      sb.append(myAttributes);
      return sb.toString();
    }

    public void createDeclaration(String declName, boolean isAbstract, boolean canHaveInternalText, boolean isDeprecated) {
      myDecls.put(declName, isAbstract);
    }

    public void createInterfaceDeclaration(String declName) {
      //To change body of implemented methods use File | Settings | File Templates.
    }

    public void addParent(String declName, String parentName) {
      assertTrue(declName, myDecls.containsKey(declName));
      assertTrue(parentName, myDecls.containsKey(parentName));
      myParents.put(declName, parentName);
    }

    public void addNested(String declName, String nestedName, String pseudonym) {
      assertTrue(declName, myDecls.containsKey(declName));
      assertTrue(nestedName, myDecls.containsKey(nestedName));
      LinkedList<String> nesteds = myNesteds.get(declName);
      if (nesteds == null){
        nesteds = new LinkedList<String>();
        myNesteds.put(declName, nesteds);
      }
      nesteds.add(nestedName);
    }

    public void addAttribute(String declName, String attrName, Class<?> type, boolean isDeprecated) {
      assertTrue(declName, myDecls.containsKey(declName));
      myAttributes.put(attrName, type);
    }

    public void addImplemented(String declName, String intName) {
      //To change body of implemented methods use File | Settings | File Templates.
    }

    public Collection<String> getExisting() {
      return Collections.EMPTY_SET;  //To change body of implemented methods use File | Settings | File Templates.
    }
  }*/
}
