package jetbrains.mps.build.ant.generation.workers;

/*Generated by MPS */

import jetbrains.mps.build.ant.MpsWorker;
import jetbrains.mps.build.ant.WhatToDo;
import org.apache.tools.ant.ProjectComponent;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.build.ant.generation.GenerateTask;
import jetbrains.mps.ide.generator.GenerationSettings;
import org.apache.tools.ant.BuildException;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.ProjectOperationContext;
import jetbrains.mps.make.resources.IResource;
import com.intellij.ide.IdeEventQueue;
import jetbrains.mps.ide.ThreadUtils;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.smodel.resources.ModelsToResources;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.generator.GeneratorManager;
import java.io.File;
import jetbrains.mps.messages.IMessageHandler;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.messages.IMessage;

public class GeneratorWorker extends MpsWorker {
  private final GeneratorWorker.MyMessageHandler myMessageHandler = new GeneratorWorker.MyMessageHandler();

  public GeneratorWorker(WhatToDo whatToDo) {
    super(whatToDo);
  }

  public GeneratorWorker(WhatToDo whatToDo, ProjectComponent component) {
    super(whatToDo, component);
  }

  public GeneratorWorker(WhatToDo whatToDo, MpsWorker.AntLogger logger) {
    super(whatToDo, logger);
  }

  protected void executeTask(final MPSProject project, MpsWorker.ObjectsToProcess go) {
    setGenerationProperties();
    if (go.hasAnythingToGenerate()) {
      generate(project, go);
    }
  }

  private void setGenerationProperties() {
    if (myWhatToDo.getProperty(GenerateTask.PER_ROOT_GENERATION) != null) {
      boolean perRootGeneration = Boolean.parseBoolean(myWhatToDo.getProperty(GenerateTask.PER_ROOT_GENERATION));
      GenerationSettings.getInstance().setParallelGenerator(perRootGeneration);
      GenerationSettings.getInstance().setStrictMode(perRootGeneration);
      info("Per-root generation set to " + perRootGeneration);
    }
  }

  protected void showStatistic() {
    if (!(myErrors.isEmpty()) && myWhatToDo.getFailOnError()) {
      StringBuffer sb = new StringBuffer();
      sb.append(myErrors.size());
      sb.append(" errors during generation:\n");
      for (String error : myErrors) {
        sb.append(error);
        sb.append("\n");
      }
      throw new BuildException(sb.toString());
    }
  }

  private void generate(MPSProject project, MpsWorker.ObjectsToProcess go) {
    StringBuffer s = new StringBuffer("Generating:");
    for (MPSProject p : go.getProjects()) {
      s.append("\n    ");
      s.append(p);
    }
    for (IModule m : go.getModules()) {
      s.append("\n    ");
      s.append(m);
    }
    for (SModelDescriptor m : go.getModels()) {
      s.append("\n    ");
      s.append(m);
    }
    info(s.toString());
    final ProjectOperationContext ctx = ProjectOperationContext.get(project.getProject());
    final Iterable<IResource> resources = collectResources(ctx, go);
    IdeEventQueue.getInstance().flushQueue();
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
      }
    });
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
        new BuildMakeService(ctx, myMessageHandler).make(resources);
      }
    });
    IdeEventQueue.getInstance().flushQueue();
    ThreadUtils.runInUIThreadAndWait(new Runnable() {
      public void run() {
      }
    });
  }

  private Iterable<IResource> collectResources(IOperationContext context, final MpsWorker.ObjectsToProcess go) {
    final Wrappers._T<Iterable<SModelDescriptor>> models = new Wrappers._T<Iterable<SModelDescriptor>>(null);
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        for (MPSProject p : go.getProjects()) {
          for (IModule mod : p.getModules()) {
            models.value = Sequence.fromIterable(models.value).concat(ListSequence.fromList(mod.getEditableUserModels()));
          }
        }
        for (IModule mod : go.getModules()) {
          models.value = Sequence.fromIterable(models.value).concat(ListSequence.fromList(mod.getEditableUserModels()));
        }
        if (go.getModels() != null) {
          models.value = Sequence.fromIterable(models.value).concat(SetSequence.fromSet(go.getModels()));
        }
      }
    });
    return new ModelsToResources(context, Sequence.fromIterable(models.value).where(new IWhereFilter<SModelDescriptor>() {
      public boolean accept(SModelDescriptor smd) {
        return !(GeneratorManager.isDoNotGenerate(smd));
      }
    })).resources(false);
  }

  public static void main(String[] args) {
    MpsWorker mpsWorker = new GeneratorWorker(WhatToDo.fromDumpInFile(new File(args[0])), new MpsWorker.LogLogger());
    mpsWorker.workFromMain();
  }

  private class MyMessageHandler implements IMessageHandler {
    private final List<String> myGenerationErrors = new ArrayList<String>();
    private final List<String> myGenerationWarnings = new ArrayList<String>();

    /*package*/ MyMessageHandler() {
    }

    public void handle(IMessage msg) {
      switch (msg.getKind()) {
        case ERROR:
          GeneratorWorker.this.error(msg.getText());
          if (msg.getException() != null) {
            myGenerationErrors.add(MpsWorker.extractStackTrace(msg.getException()).toString());
          } else {
            myGenerationErrors.add(msg.getText());
          }
          break;
        case WARNING:
          GeneratorWorker.this.warning(msg.getText());
          myGenerationWarnings.add(msg.getText());
          break;
        case INFORMATION:
          GeneratorWorker.this.verbose(msg.getText());
          break;
        default:
      }
    }

    public List<String> getGenerationErrors() {
      return myGenerationErrors;
    }

    public List<String> getGenerationWarnings() {
      return myGenerationWarnings;
    }

    public void clean() {
      myGenerationErrors.clear();
      myGenerationWarnings.clear();
    }

    public void clear() {
    }
  }
}
