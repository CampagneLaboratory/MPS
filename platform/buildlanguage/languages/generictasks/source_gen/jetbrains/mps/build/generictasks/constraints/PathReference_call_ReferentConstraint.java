package jetbrains.mps.build.generictasks.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.build.generictasks.behavior.GenericCall_Behavior;

public class PathReference_call_ReferentConstraint extends BaseNodeReferenceSearchScopeProvider implements IModelConstraints {

  public PathReference_call_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("jetbrains.mps.build.generictasks.structure.PathReference", "call", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("jetbrains.mps.build.generictasks.structure.PathReference", "call");
  }

  public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    List<SNode> importedNodes = SModelOperations.getNodesIncludingImported(_context.getModel(), operationContext.getScope(), "jetbrains.mps.build.generictasks.structure.GenericCall");
    List<SNode> newScope = ListSequence.fromList(new ArrayList<SNode>());
    for(SNode node : ListSequence.fromList(importedNodes)) {
      SNode gcall = SNodeOperations.cast(node, "jetbrains.mps.build.generictasks.structure.GenericCall");
      if (GenericCall_Behavior.call_isReferencedAndOfDeclaration_353793545802644027(gcall, "path")) {
        ListSequence.fromList(newScope).addElement(gcall);
      }
    }
    return newScope;
  }

}
