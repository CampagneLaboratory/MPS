package jetbrains.mps.build.generictasks.taskfromjar;

/*Generated by MPS */

import jetbrains.mps.build.generictasks.structure.TaskInterfaceDeclaration;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.build.generictasks.structure.BuiltInTaskDeclaration;
import jetbrains.mps.build.generictasks.structure.TaskReference;
import jetbrains.mps.buildlanguage.structure.StringLiteral;
import jetbrains.mps.build.generictasks.structure.AttributeDeclaration;
import jetbrains.mps.buildlanguage.structure.PropertyType;
import jetbrains.mps.build.generictasks.structure.NestedDeclaration;

public class BuildLanguageGenerator {
  private static final BuildLanguageGenerator INSTANCE = new BuildLanguageGenerator();

  private BuildLanguageGenerator() {
  }

  public TaskInterfaceDeclaration createInterfaceDeclaration(SModel model, String declName, String className, boolean isDeprecated, boolean addAsRoot) {
    TaskInterfaceDeclaration decl = TaskInterfaceDeclaration.newInstance(model, true);
    decl.setName(declName);
    decl.setClassname(className);
    if (addAsRoot) {
      model.addRoot(decl.getNode());
    }
    decl.setDepracated(isDeprecated);
    return decl;
  }

  public BuiltInTaskDeclaration createDeclaration(SModel model, String declName, String className, boolean isAbstract, boolean canHaveInternalText, boolean isDeprecated, boolean addAsRoot) {
    BuiltInTaskDeclaration decl = BuiltInTaskDeclaration.newInstance(model, true);
    this.fillTaskDeclaration(declName, className, isAbstract, canHaveInternalText, isDeprecated, decl);
    if (addAsRoot) {
      model.addRoot(decl.getNode());
    }
    return decl;
  }

  private void fillTaskDeclaration(String declName, String className, boolean isAbstract, boolean canHaveInternalText, boolean isDeprecated, BuiltInTaskDeclaration decl) {
    decl.setName(declName);
    decl.setClassname(className);
    decl.setAbstract(isAbstract);
    decl.setCanHaveInternalText(canHaveInternalText);
    decl.setDepracated(isDeprecated);
  }

  public TaskReference createDeclarationReference(SModel model, BuiltInTaskDeclaration decl) {
    TaskReference ref = TaskReference.newInstance(model, true);
    ref.setDeclaration(decl);
    return ref;
  }

  public StringLiteral createStringLiteral(SModel model, String value) {
    StringLiteral lit = StringLiteral.newInstance(model, true);
    lit.setValue(value);
    return lit;
  }

  public AttributeDeclaration createAttributeDeclaration(SModel model, String name, PropertyType type) {
    AttributeDeclaration attrDecl = AttributeDeclaration.newInstance(model, true);
    attrDecl.setName(name);
    attrDecl.setAttributeType(type);
    return attrDecl;
  }

  public NestedDeclaration createNestedReference(SModel model, BuiltInTaskDeclaration nestedDeclaration) {
    NestedDeclaration nref = NestedDeclaration.newInstance(model, true);
    nref.setDeclaration(nestedDeclaration);
    return nref;
  }

  public static BuildLanguageGenerator getInstance() {
    return BuildLanguageGenerator.INSTANCE;
  }
}
