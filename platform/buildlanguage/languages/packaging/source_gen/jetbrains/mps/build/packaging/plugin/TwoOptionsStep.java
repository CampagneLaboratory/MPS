package jetbrains.mps.build.packaging.plugin;

/*Generated by MPS */

import com.intellij.openapi.project.Project;
import javax.swing.JTextField;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JPanel;
import java.awt.GridBagLayout;
import javax.swing.JLabel;
import javax.swing.AbstractAction;
import java.awt.event.ActionEvent;
import javax.swing.ComboBoxModel;
import java.util.Arrays;
import javax.swing.DefaultComboBoxModel;
import jetbrains.mps.util.CollectionUtil;
import jetbrains.mps.util.Mapper;

public abstract class TwoOptionsStep <M> extends AbstractStep {

  protected final BuildGenerator myGenerator;
  protected final Project myProject;
  private JTextField myTextField;
  private JCheckBox myOptionsCheckBox;
  private JComboBox mySelectComboBox;
  protected M[] myVariantsArray;

  public TwoOptionsStep(Project project, BuildGenerator buildGenerator) {
    this.myProject = project;
    this.myGenerator = buildGenerator;
  }

  protected abstract M[] getVariants();

  protected abstract String getCheckBoxName();

  protected abstract String getVariantName(M variant);

  protected abstract String getTextFieldName();

  protected abstract String getComboBoxName();

  protected abstract boolean getChecked();

  protected abstract String getTextFieldText();

  protected abstract void setChecked(boolean checked);

  protected abstract void setTextFieldText(String text);

  protected abstract void setVariant(M m);

  protected abstract boolean isCheckBoxEnabled();

  public JComponent createMainComponent() {
    JPanel panel = new JPanel(new GridBagLayout());
    // 
    this.myOptionsCheckBox = this.createOptionsCheckBox();
    this.mySelectComboBox = this.createSelectComboBox();
    this.myTextField = this.createTextField();
    // 
    panel.add(this.myOptionsCheckBox, this.createConstraint(0, 0));
    panel.add(new JLabel(this.getTextFieldName()), this.createConstraint(1, 0));
    panel.add(this.myTextField, this.createConstraint(2, 0));
    panel.add(new JLabel(this.getComboBoxName()), this.createConstraint(3, 0));
    panel.add(this.mySelectComboBox, this.createConstraint(4, 0));
    return panel;
  }

  public void _init() {
    this.mySelectComboBox.setModel(this.updateComboBoxModel());
    this.myOptionsCheckBox.setSelected(this.getChecked());
    this.myOptionsCheckBox.setEnabled(this.isCheckBoxEnabled());
    this.myTextField.setText(this.getTextFieldText());
    this.setEnabledState(this.myOptionsCheckBox.isSelected());
  }

  public void _commit(boolean finish) {
    this.setChecked(this.myOptionsCheckBox.isSelected());
    this.setTextFieldText(this.myTextField.getText());
    int index = this.mySelectComboBox.getSelectedIndex();
    if (index >= 0) {
      this.setVariant(this.myVariantsArray[index]);
    }
  }

  private JCheckBox createOptionsCheckBox() {
    return new JCheckBox(new AbstractAction(TwoOptionsStep.this.getCheckBoxName()) {

      public void actionPerformed(ActionEvent event) {
        boolean checkBoxSelected = TwoOptionsStep.this.myOptionsCheckBox.isSelected();
        TwoOptionsStep.this.setEnabledState(checkBoxSelected);
      }

    });
  }

  private JComboBox createSelectComboBox() {
    return new JComboBox(this.updateComboBoxModel());
  }

  private JTextField createTextField() {
    return new JTextField();
  }

  private void setEnabledState(boolean checkBoxSelected) {
    this.myTextField.setEnabled(checkBoxSelected);
    this.mySelectComboBox.setEnabled(!(checkBoxSelected));
  }

  private ComboBoxModel updateComboBoxModel() {
    M[] newVariants = this.getVariants();
    if (!(this.mySelectComboBox == null) && Arrays.deepEquals(newVariants, this.myVariantsArray)) {
      return this.mySelectComboBox.getModel();
    }
    this.myVariantsArray = newVariants;
    return new DefaultComboBoxModel(CollectionUtil.map(Arrays.asList(this.myVariantsArray), new Mapper <M, String>() {

      public String map(final M variant) {
        return TwoOptionsStep.this.getVariantName(variant);
      }

    }).toArray());
  }

}
