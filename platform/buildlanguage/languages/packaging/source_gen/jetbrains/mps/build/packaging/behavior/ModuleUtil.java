package jetbrains.mps.build.packaging.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.reloading.IClassPathItem;
import java.util.ArrayList;
import jetbrains.mps.reloading.CommonPaths;
import jetbrains.mps.reloading.EachClassPathItemVisitor;
import jetbrains.mps.reloading.FileClassPathItem;
import jetbrains.mps.reloading.JarFileClassPathItem;

public class ModuleUtil {
  public ModuleUtil() {
  }

  public static String getRelativePath(String path, String basedir) {
    if (path == null) {
      return "";
    }
    if (basedir == null || basedir.length() == 0 || !(path.startsWith(basedir))) {
      return path;
    }
    if (basedir.endsWith("/") || basedir.endsWith("\\")) {
      basedir = basedir.substring(0, basedir.length() - 1);
    }
    return path.substring(basedir.length() + 1);
  }

  public static void findMacro(SNode pathHolder, List<SNode> macro) {
    for (SNode m : ListSequence.fromList(macro)) {
      if (SPropertyOperations.getString(pathHolder, "fullPath").startsWith(SPropertyOperations.getString(m, "path"))) {
        SLinkOperations.setTarget(pathHolder, "macro", m, false);
        SPropertyOperations.set(pathHolder, "fullPath", getRelativePath(SPropertyOperations.getString(pathHolder, "fullPath"), SPropertyOperations.getString(m, "path")));
        break;
      }
    }
  }

  public static List<String> retrieveClassPath(IClassPathItem cpitem) {
    final List<String> result = ListSequence.fromList(new ArrayList<String>());
    final List<String> jdk = CommonPaths.getJDKPath();
    cpitem.accept(new EachClassPathItemVisitor() {
      public void visit(FileClassPathItem p0) {
        // filter out JDK 
        if (jdk.contains(p0.getClassPath())) {
          return;
        }
        ListSequence.fromList(result).addElement(p0.getClassPath());
      }

      public void visit(JarFileClassPathItem p0) {
        // filter out JDK 
        if (jdk.contains(p0.getIFile().getAbsolutePath())) {
          return;
        }
        ListSequence.fromList(result).addElement(p0.getIFile().getAbsolutePath());
      }
    });
    return result;
  }
}
