package jetbrains.mps.build.packaging.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.project.Solution;
import jetbrains.mps.smodel.SModelFqName;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import java.io.File;
import jetbrains.mps.vfs.MPSExtentions;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.project.structure.modules.ModuleReference;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.projectLanguage.DescriptorsPersistence;
import jetbrains.mps.projectLanguage.structure.SolutionDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.Language;

public class BuildGeneratorUtil {

  public BuildGeneratorUtil() {
  }

  public static SModelDescriptor createModel(String modelName, Solution solution) {
    SModelFqName newModelFQName = SModelFqName.fromString(modelName);
    List<SModelDescriptor> ownModelDescriptors = solution.getOwnModelDescriptors();
    SModelDescriptor modelDescriptor = null;
    for(SModelDescriptor descriptor : ListSequence.fromList(ownModelDescriptors)) {
      if (descriptor.getSModelFqName().equals(newModelFQName)) {
        modelDescriptor = descriptor;
        break;
      }
    }
    if (modelDescriptor == null) {
      modelDescriptor = solution.createModel(newModelFQName, solution.getSModelRoots().get(0));
    }
    modelDescriptor.getSModel().addLanguage(getPackagingLanguageReference());
    return modelDescriptor;
  }

  public static Solution createSolution(MPSProject mpsProject, String solutionName, String solutionBaseDir) {
    IFile baseDirFile = FileSystem.getFile(solutionBaseDir);
    if (!(baseDirFile.exists())) {
      baseDirFile.mkdirs();
    }
    String solutionFilePath = solutionBaseDir + File.separator + solutionName + MPSExtentions.DOT_SOLUTION;
    IFile solutionFile = FileSystem.getFile(solutionFilePath);
    Solution solution;
    if (solutionFile.exists()) {
      IModule module = MPSModuleRepository.getInstance().getModuleByFile(solutionFile.toFile());
      if (!(module instanceof Solution)) {
        return null;
      }
      solution = (Solution)module;
    } else
    {
      solution = BuildGeneratorUtil.createSolutionFormFile(mpsProject, solutionFile);
    }
    ModuleReference packagingLanguageRef = BuildGeneratorUtil.getPackagingLanguageReference();
    solution.addDependency(packagingLanguageRef, false);
    solution.addUsedLangauge(packagingLanguageRef);
    return solution;
  }

  public static Solution createSolutionFormFile(MPSProject mpsProject, IFile solutionDescriptorFile) {
    SNode solutionDescriptor = SConceptOperations.createNewNode("jetbrains.mps.projectLanguage.structure.SolutionDescriptor", null);
    SPropertyOperations.set(solutionDescriptor, "externallyVisible", "" + (true));
    SPropertyOperations.set(solutionDescriptor, "compileInMPS", "" + (true));
    String fileName = solutionDescriptorFile.getName();
    SPropertyOperations.set(solutionDescriptor, "name", fileName.substring(0, fileName.length() - 4));
    SNode modelRoot = SConceptOperations.createNewNode("jetbrains.mps.projectLanguage.structure.ModelRoot", null);
    SPropertyOperations.set(modelRoot, "prefix", "");
    SPropertyOperations.set(modelRoot, "path", solutionDescriptorFile.getParent().getAbsolutePath());
    SLinkOperations.addChild(solutionDescriptor, "modelRoot", modelRoot);
    DescriptorsPersistence.saveSolutionDescriptor(solutionDescriptorFile, ((SolutionDescriptor)SNodeOperations.getAdapter(solutionDescriptor)));
    return mpsProject.addProjectSolution(solutionDescriptorFile.toFile());
  }

  private static ModuleReference getPackagingLanguageReference() {
    Language packagingLanguage = MPSModuleRepository.getInstance().getLanguage("jetbrains.mps.build.packaging");
    return packagingLanguage.getModuleReference();
  }

}
