package jetbrains.mps.build.packaging.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.runconfigs.BaseConfigCreator;
import jetbrains.mps.smodel.SNode;
import com.intellij.execution.configurations.RunConfiguration;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.extensions.Extensions;
import com.intellij.execution.configurations.ConfigurationType;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.plugins.pluginparts.runconfigs.MPSPsiElement;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.annotations.Nullable;
import com.intellij.execution.configurations.ConfigurationFactory;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class DefaultPackagingLanguageConfigurationFromMPSLayout extends BaseConfigCreator<SNode> implements Cloneable {
  private RunConfiguration myConfig;

  public DefaultPackagingLanguageConfigurationFromMPSLayout() {
    super(ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), new _FunctionTypes._return_P0_E0<Class<ConfigurationType>>() {
      public Class<ConfigurationType> invoke() {
        try {
          return (Class<ConfigurationType>) getClass().getClassLoader().loadClass("jetbrains.mps.buildlanguage.plugin.BuildLanguage_ConfigurationType");
        } catch (ClassNotFoundException cl) {
          return (Class<ConfigurationType>) null;
        }
      }
    }.invoke()));
  }

  protected RunConfiguration doCreateConfiguration(SNode node) {
    this.createConfig(node);
    return this.myConfig;
  }

  private void createConfig(final SNode parameter) {
    final Wrappers._boolean isApplicable = new Wrappers._boolean();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        isApplicable.value = !(ListSequence.fromList(SNodeOperations.getDescendants(parameter, "jetbrains.mps.build.packaging.structure.INotBuildableComponent", false, new String[]{})).isNotEmpty());
      }
    });
    if (!(isApplicable.value)) {
      return;
    }

    final Wrappers._T<String> id = new Wrappers._T<String>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        id.value = ListSequence.fromList(SLinkOperations.getTargets(parameter, "configuration", true)).first().getId();
      }
    });

    DefaultPackagingLanguageConfigurationFromMPSLayout.this.setSourceElement(new MPSPsiElement(parameter));
    {
      ConfigurationType configType = ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), new _FunctionTypes._return_P0_E0<Class<ConfigurationType>>() {
        public Class<ConfigurationType> invoke() {
          try {
            return (Class<ConfigurationType>) getClass().getClassLoader().loadClass("jetbrains.mps.buildlanguage.plugin.BuildLanguage_ConfigurationType");
          } catch (ClassNotFoundException cl) {
            return (Class<ConfigurationType>) null;
          }
        }
      }.invoke());
      DefaultPackagingLanguageApplication_Configuration _config = new DefaultPackagingLanguageApplication_Configuration(DefaultPackagingLanguageConfigurationFromMPSLayout.this.getContext().getProject(), findFactory(configType, "DefaultPackagingLanguageApplication"), "NewConfig");
      _config.setName(SPropertyOperations.getString(parameter, "name"));
      _config.getStateObject().nodeId = parameter.getId();
      _config.getStateObject().modelId = parameter.getModel().getModelDescriptor().getSModelReference().toString();
      _config.getStateObject().configurationId = id.value;
      DefaultPackagingLanguageConfigurationFromMPSLayout.this.myConfig = _config;
    }
  }

  @Override
  public DefaultPackagingLanguageConfigurationFromMPSLayout clone() {
    return ((DefaultPackagingLanguageConfigurationFromMPSLayout) super.clone());
  }

  protected boolean isApplicable(final Object element) {
    return element instanceof SNode && SNodeOperations.isInstanceOf(((SNode) element), "jetbrains.mps.build.packaging.structure.MPSLayout");
  }

  @Nullable
  public ConfigurationFactory findFactory(ConfigurationType configurationType, String configurationName) {
    for (ConfigurationFactory factory : Sequence.fromIterable(Sequence.fromArray(configurationType.getConfigurationFactories()))) {
      if (factory.getClass().getName().contains(configurationName)) {
        return factory;
      }
    }
    return null;
  }
}
