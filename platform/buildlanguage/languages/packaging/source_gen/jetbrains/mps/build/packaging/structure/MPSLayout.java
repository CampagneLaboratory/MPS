package jetbrains.mps.build.packaging.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MPSLayout extends BaseConcept implements ILayoutComponent, INamedConcept {
  public static final String concept = "jetbrains.mps.build.packaging.structure.MPSLayout";
  public static final String SCRIPTS_FOLDER = "scriptsFolder";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String NAME = "name";
  public static final String COMPILE = "compile";
  public static final String BASE_DIRECTORY = "baseDirectory";
  public static final String CONFIGURATION = "configuration";
  public static final String COMPONENT = "component";
  public static final String VARIABLE = "variable";
  public static final String BUILT_IN_VARIABLE = "builtInVariable";
  public static final String CYCLE = "cycle";
  public static final String MACRO = "macro";

  public MPSLayout(SNode node) {
    super(node);
  }

  public String getScriptsFolder() {
    return this.getProperty(MPSLayout.SCRIPTS_FOLDER);
  }

  public void setScriptsFolder(String value) {
    this.setProperty(MPSLayout.SCRIPTS_FOLDER, value);
  }

  public String getShortDescription() {
    return this.getProperty(MPSLayout.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(MPSLayout.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(MPSLayout.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(MPSLayout.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(MPSLayout.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(MPSLayout.VIRTUAL_PACKAGE, value);
  }

  public String getName() {
    return this.getProperty(MPSLayout.NAME);
  }

  public void setName(String value) {
    this.setProperty(MPSLayout.NAME, value);
  }

  public boolean getCompile() {
    return this.getBooleanProperty(MPSLayout.COMPILE);
  }

  public void setCompile(boolean value) {
    this.setBooleanProperty(MPSLayout.COMPILE, value);
  }

  public BaseDirPath getBaseDirectory() {
    return (BaseDirPath)this.getChild(MPSLayout.BASE_DIRECTORY);
  }

  public void setBaseDirectory(BaseDirPath node) {
    super.setChild(MPSLayout.BASE_DIRECTORY, node);
  }

  public int getConfigurationsCount() {
    return this.getChildCount(MPSLayout.CONFIGURATION);
  }

  public Iterator<Configuration> configurations() {
    return this.children(MPSLayout.CONFIGURATION);
  }

  public List<Configuration> getConfigurations() {
    return this.getChildren(MPSLayout.CONFIGURATION);
  }

  public void addConfiguration(Configuration node) {
    this.addChild(MPSLayout.CONFIGURATION, node);
  }

  public void insertConfiguration(Configuration prev, Configuration node) {
    this.insertChild(prev, MPSLayout.CONFIGURATION, node);
  }

  public int getComponentsCount() {
    return this.getChildCount(MPSLayout.COMPONENT);
  }

  public Iterator<AbstractProjectComponent> components() {
    return this.children(MPSLayout.COMPONENT);
  }

  public List<AbstractProjectComponent> getComponents() {
    return this.getChildren(MPSLayout.COMPONENT);
  }

  public void addComponent(AbstractProjectComponent node) {
    this.addChild(MPSLayout.COMPONENT, node);
  }

  public void insertComponent(AbstractProjectComponent prev, AbstractProjectComponent node) {
    this.insertChild(prev, MPSLayout.COMPONENT, node);
  }

  public int getVariablesCount() {
    return this.getChildCount(MPSLayout.VARIABLE);
  }

  public Iterator<Variable> variables() {
    return this.children(MPSLayout.VARIABLE);
  }

  public List<Variable> getVariables() {
    return this.getChildren(MPSLayout.VARIABLE);
  }

  public void addVariable(Variable node) {
    this.addChild(MPSLayout.VARIABLE, node);
  }

  public void insertVariable(Variable prev, Variable node) {
    this.insertChild(prev, MPSLayout.VARIABLE, node);
  }

  public int getBuiltInVariablesCount() {
    return this.getChildCount(MPSLayout.BUILT_IN_VARIABLE);
  }

  public Iterator<Variable> builtInVariables() {
    return this.children(MPSLayout.BUILT_IN_VARIABLE);
  }

  public List<Variable> getBuiltInVariables() {
    return this.getChildren(MPSLayout.BUILT_IN_VARIABLE);
  }

  public void addBuiltInVariable(Variable node) {
    this.addChild(MPSLayout.BUILT_IN_VARIABLE, node);
  }

  public void insertBuiltInVariable(Variable prev, Variable node) {
    this.insertChild(prev, MPSLayout.BUILT_IN_VARIABLE, node);
  }

  public int getCyclesCount() {
    return this.getChildCount(MPSLayout.CYCLE);
  }

  public Iterator<ModuleCycle> cycles() {
    return this.children(MPSLayout.CYCLE);
  }

  public List<ModuleCycle> getCycles() {
    return this.getChildren(MPSLayout.CYCLE);
  }

  public void addCycle(ModuleCycle node) {
    this.addChild(MPSLayout.CYCLE, node);
  }

  public void insertCycle(ModuleCycle prev, ModuleCycle node) {
    this.insertChild(prev, MPSLayout.CYCLE, node);
  }

  public int getMacrosCount() {
    return this.getChildCount(MPSLayout.MACRO);
  }

  public Iterator<Macro> macros() {
    return this.children(MPSLayout.MACRO);
  }

  public List<Macro> getMacros() {
    return this.getChildren(MPSLayout.MACRO);
  }

  public void addMacro(Macro node) {
    this.addChild(MPSLayout.MACRO, node);
  }

  public void insertMacro(Macro prev, Macro node) {
    this.insertChild(prev, MPSLayout.MACRO, node);
  }


  public static MPSLayout newInstance(SModel sm, boolean init) {
    return (MPSLayout)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.packaging.structure.MPSLayout", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static MPSLayout newInstance(SModel sm) {
    return MPSLayout.newInstance(sm, false);
  }

}
