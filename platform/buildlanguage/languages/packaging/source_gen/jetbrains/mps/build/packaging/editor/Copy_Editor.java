package jetbrains.mps.build.packaging.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.ConceptPropertyCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.lang.editor.cellProviders.RefNodeCellProvider;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.style.Padding;
import jetbrains.mps.nodeEditor.style.Measure;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class Copy_Editor extends DefaultNodeEditor {

  /* package */AbstractCellProvider myConfigurationReferencesEditorComponent2873_0;
  /* package */AbstractCellProvider myConfigurationReferencesEditorComponent2873_1;

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createCollection_2873_0(context, node);
  }

  public EditorCell createInspectedCell(EditorContext context, SNode node) {
    return this.createCollection_2873_1(context, node);
  }

  public EditorCell createCollection_2873_0(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_2873_0(editorCell, node, context);
    editorCell.addEditorCell(this.createConceptProperty_2873_1(context, node));
    editorCell.addEditorCell(this.createConstant_2873_0(context, node, "from"));
    editorCell.addEditorCell(this.createRefNode_2873_1(context, node));
    editorCell.addEditorCell(this.createCollection_2873_4(context, node));
    editorCell.addEditorCell(this.createComponent_2873_1(context, node));
    return editorCell;
  }

  public EditorCell createCollection_2873_1(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_2873_1(editorCell, node, context);
    editorCell.addEditorCell(this.createCollection_2873_2(context, node));
    editorCell.addEditorCell(this.createCollection_2873_3(context, node));
    editorCell.addEditorCell(this.createComponent_2873_0(context, node));
    return editorCell;
  }

  public EditorCell createCollection_2873_2(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_2873_2(editorCell, node, context);
    editorCell.addEditorCell(this.createConstant_2873_1(context, node, "excludes"));
    editorCell.addEditorCell(this.createProperty_2873_1(context, node));
    return editorCell;
  }

  public EditorCell createCollection_2873_3(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_2873_3(editorCell, node, context);
    editorCell.addEditorCell(this.createConstant_2873_2(context, node, "includes"));
    editorCell.addEditorCell(this.createProperty_2873_3(context, node));
    return editorCell;
  }

  public EditorCell createCollection_2873_4(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_2873_4(editorCell, node, context);
    if (renderingCondition2873_0(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection_2873_5(context, node));
    }
    if (renderingCondition2873_1(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection_2873_6(context, node));
    }
    return editorCell;
  }

  public EditorCell createCollection_2873_5(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_2873_5(editorCell, node, context);
    editorCell.addEditorCell(this.createConstant_2873_3(context, node, "excludes"));
    editorCell.addEditorCell(this.createProperty_2873_5(context, node));
    return editorCell;
  }

  public EditorCell createCollection_2873_6(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_2873_6(editorCell, node, context);
    editorCell.addEditorCell(this.createConstant_2873_4(context, node, "includes"));
    editorCell.addEditorCell(this.createProperty_2873_7(context, node));
    return editorCell;
  }

  public EditorCell createComponent_2873_0(EditorContext context, SNode node) {
    if (this.myConfigurationReferencesEditorComponent2873_0 == null) {
      this.myConfigurationReferencesEditorComponent2873_0 = new ConfigurationReferencesEditorComponent(node);
    }
    EditorCell editorCell = this.myConfigurationReferencesEditorComponent2873_0.createEditorCell(context);
    setupBasic_Component_2873_0(editorCell, node, context);
    return editorCell;
  }

  public EditorCell createComponent_2873_1(EditorContext context, SNode node) {
    if (this.myConfigurationReferencesEditorComponent2873_1 == null) {
      this.myConfigurationReferencesEditorComponent2873_1 = new ConfigurationReferencesEditorComponent(node);
    }
    EditorCell editorCell = this.myConfigurationReferencesEditorComponent2873_1.createEditorCell(context);
    setupBasic_Component_2873_1(editorCell, node, context);
    return editorCell;
  }

  public EditorCell createConstant_2873_0(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_2873_0(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_2873_1(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_2873_1(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_2873_2(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_2873_2(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_2873_3(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_2873_3(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_2873_4(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_2873_4(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConceptProperty_2873_0_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_ConceptProperty_2873_0(editorCell, node, context);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createConceptProperty_2873_1(EditorContext context, SNode node) {
    CellProviderWithRole provider = new ConceptPropertyCellProvider(node, context);
    provider.setRole("alias");
    provider.setNoTargetText("<no alias>");
    EditorCell cellWithRole = this.createConceptProperty_2873_0_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createProperty_2873_0_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_Property_2873_0(editorCell, node, context);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createProperty_2873_1(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("excludes");
    provider.setNoTargetText("<no excludes>");
    provider.setAllowsEmptyTarget(true);
    EditorCell cellWithRole = this.createProperty_2873_0_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createProperty_2873_2_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_Property_2873_1(editorCell, node, context);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createProperty_2873_3(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("includes");
    provider.setNoTargetText("<no includes>");
    provider.setAllowsEmptyTarget(true);
    EditorCell cellWithRole = this.createProperty_2873_2_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createRefNode_2873_0_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_RefNode_2873_0(editorCell, node, context);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode_2873_1(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("sourcePath");
    provider.setNoTargetText("<no sourcePath>");
    EditorCell cellWithRole = this.createRefNode_2873_0_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createProperty_2873_4_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_Property_2873_2(editorCell, node, context);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createProperty_2873_5(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("excludes");
    provider.setNoTargetText("<no excludes>");
    provider.setAllowsEmptyTarget(true);
    EditorCell cellWithRole = this.createProperty_2873_4_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createProperty_2873_6_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_Property_2873_3(editorCell, node, context);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createProperty_2873_7(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("includes");
    provider.setNoTargetText("<no includes>");
    provider.setAllowsEmptyTarget(true);
    EditorCell cellWithRole = this.createProperty_2873_6_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }


  private static void setupBasic_Collection_2873_0(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_2873_0");
  }

  private static void setupBasic_ConceptProperty_2873_0(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("conceptProperty_alias");
    PackagingStyles_StyleSheet.getProjectComponent(editorCell).apply(editorCell);
  }

  private static void setupBasic_Constant_2873_0(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_2873_0");
    PackagingStyles_StyleSheet.getKeyword(editorCell).apply(editorCell);
  }

  private static void setupBasic_Collection_2873_1(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_2873_1");
  }

  private static void setupBasic_Collection_2873_2(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_2873_2");
  }

  private static void setupBasic_Constant_2873_1(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_2873_1");
    PackagingStyles_StyleSheet.getKeyword(editorCell).apply(editorCell);
  }

  private static void setupBasic_Property_2873_0(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("property_excludes");
  }

  private static void setupBasic_Component_2873_0(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Component_2873_1(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Collection_2873_3(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_2873_3");
  }

  private static void setupBasic_Constant_2873_2(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_2873_2");
    PackagingStyles_StyleSheet.getKeyword(editorCell).apply(editorCell);
  }

  private static void setupBasic_Property_2873_1(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("property_includes");
  }

  private static void setupBasic_RefNode_2873_0(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Collection_2873_4(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_2873_4");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
      style.set(StyleAttributes.SELECTABLE, false);
    }
  }

  private static void setupBasic_Collection_2873_5(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_2873_5");
  }

  private static void setupBasic_Constant_2873_3(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_2873_3");
    PackagingStyles_StyleSheet.getKeyword(editorCell).apply(editorCell);
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.PADDING_LEFT, new Padding(1.0, Measure.SPACES));
    }
  }

  private static void setupBasic_Property_2873_2(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("property_excludes_1");
  }

  private static void setupBasic_Collection_2873_6(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_2873_6");
  }

  private static void setupBasic_Constant_2873_4(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_2873_4");
    PackagingStyles_StyleSheet.getKeyword(editorCell).apply(editorCell);
  }

  private static void setupBasic_Property_2873_3(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("property_includes_1");
  }

  public static boolean renderingCondition2873_0(SNode node, EditorContext editorContext, IScope scope) {
    return SPropertyOperations.getString(node, "excludes") != null && SPropertyOperations.getString(node, "excludes").length() > 0;
  }

  public static boolean renderingCondition2873_1(SNode node, EditorContext editorContext, IScope scope) {
    return SPropertyOperations.getString(node, "includes") != null && SPropertyOperations.getString(node, "includes").length() > 0;
  }

}
