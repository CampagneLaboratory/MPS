/*
 * Copyright 2003-2009 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.build.packaging.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BehaviorManager;

public class IVariableHolder_Behavior {
  private static Class[] PARAMETERS_1234864693585 = {SNode.class};

  public static void init(SNode thisNode) {
  }

  public static SNode call_findVariable_1234876428215(SNode thisNode, String name, String antName) {
    List<SNode> allVars = IVariableHolder_Behavior.call_getAllVariable_1234864693585(thisNode);
    for(SNode var : ListSequence.fromList(allVars)) {
      if (SPropertyOperations.getString(var, "name").equals(name) && SPropertyOperations.getString(var, "antName").equals(antName)) {
        return var;
      }
    }
    return null;
  }

  public static List<SNode> call_getAllVariable_1234864693585(SNode thisNode) {
    return (List<SNode>)BehaviorManager.getInstance().invoke(Object.class, thisNode, "virtual_getAllVariable_1234864693585", PARAMETERS_1234864693585);
  }

  public static List<SNode> callSuper_getAllVariable_1234864693585(SNode thisNode, String callerConceptFqName) {
    return (List<SNode>)BehaviorManager.getInstance().invokeSuper(Object.class, thisNode, callerConceptFqName, "virtual_getAllVariable_1234864693585", PARAMETERS_1234864693585);
  }

}
