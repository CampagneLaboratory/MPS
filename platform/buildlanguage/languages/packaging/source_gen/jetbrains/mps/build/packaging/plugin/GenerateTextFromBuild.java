package jetbrains.mps.build.packaging.plugin;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import java.io.File;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.openapi.util.Computable;
import jetbrains.mps.build.packaging.behavior.MPSLayout_Behavior;
import jetbrains.mps.generator.GeneratorManager;
import jetbrains.mps.build.packaging.plugin.GenerateTextFromBuildGenerationType;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.intellij.openapi.progress.EmptyProgressIndicator;
import jetbrains.mps.ide.messages.IMessageHandler;
import jetbrains.mps.ide.messages.Message;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class GenerateTextFromBuild {
  private static Logger LOG = Logger.getLogger(GenerateTextFromBuild.class);

  public GenerateTextFromBuild() {
  }

  public static File generate(final SNode mpsLayout, SModelDescriptor descriptor, IOperationContext context, MPSProject project, boolean showWindow) {
    String basedir = ModelAccess.instance().runReadAction(new Computable <String>() {

      public String compute() {
        return MPSLayout_Behavior.call_getFolderToGenerate_1229522949966(mpsLayout);
      }
    });
    // generate files
    final GeneratorManager generatorManager = project.getComponentSafe(GeneratorManager.class);
    GenerateTextFromBuildGenerationType generationType = new GenerateTextFromBuildGenerationType(generatorManager, basedir, mpsLayout);
    if (showWindow) {
      generatorManager.generateModelsWithProgressWindow(ListSequence.<SModelDescriptor>fromArray(descriptor), context, generationType, true);
    } else
    {
      generatorManager.generateModels(ListSequence.<SModelDescriptor>fromArray(descriptor), context, generationType, new EmptyProgressIndicator(), new IMessageHandler() {

        public void handle(Message message) {
          switch (message.getKind()) {
            case ERROR:
              System.err.println("error: " + message.getText());
            case WARNING:
              System.out.println("warning: " + message.getText());
            case INFORMATION:
              System.out.println("info: " + message.getText());
            default:
          }
        }
      });
    }
    return generationType.getLayoutFile();
  }

  public static SNode getLayout(SModelDescriptor descriptor) {
    final List<SNode> roots = descriptor.getSModel().getRoots();
    final Wrappers._T<SNode> layout = new Wrappers._T<SNode>();
    ModelAccess.instance().runReadAction(new Runnable() {

      public void run() {
        for(SNode root : ListSequence.fromList(roots)) {
          if (SNodeOperations.isInstanceOf(root, "jetbrains.mps.build.packaging.structure.MPSLayout")) {
            layout.value = SNodeOperations.cast(root, "jetbrains.mps.build.packaging.structure.MPSLayout");
            return;
          }
        }
      }
    });
    return layout.value;
  }

}
