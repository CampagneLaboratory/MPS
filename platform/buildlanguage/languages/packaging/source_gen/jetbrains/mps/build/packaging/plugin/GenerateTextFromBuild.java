package jetbrains.mps.build.packaging.plugin;

/*Generated by MPS */

import jetbrains.mps.logging.Logger;
import java.io.File;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.openapi.util.Computable;
import jetbrains.mps.build.packaging.behavior.Layout_Behavior;
import jetbrains.mps.build.packaging.behavior.Configuration_Behavior;
import jetbrains.mps.smodel.IOperationContext;
import com.intellij.openapi.project.Project;
import jetbrains.mps.generator.generationTypes.TextGenerationHandler;
import jetbrains.mps.textGen.TextGenerationResult;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.ide.generator.GeneratorUIFacade;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.generator.GenerationFacade;
import com.intellij.openapi.progress.EmptyProgressIndicator;
import jetbrains.mps.ide.messages.DefaultMessageHandler;
import jetbrains.mps.generator.GenerationOptions;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.application.ModalityState;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;

@Deprecated
public class GenerateTextFromBuild {
  private static Logger LOG = Logger.getLogger(GenerateTextFromBuild.class);

  @Deprecated
  public GenerateTextFromBuild() {
  }

  public static File getGeneratedFile(final SNode configuration, SModelDescriptor descriptor) {
    final String fileName = ModelAccess.instance().runReadAction(new Computable<String>() {
      public String compute() {
        return Layout_Behavior.call_getFolderToGenerate_1229522949966(Configuration_Behavior.call_getLayout_1213877261819(configuration)) + File.separator + Configuration_Behavior.call_getBuildFileName_1230217425313(configuration) + ".xml";
      }
    });
    return new File(fileName);
  }

  public static File generate(final SNode configuration, final SModelDescriptor descriptor, final IOperationContext context, final Project project, final boolean showWindow) {
    final String basedir = ModelAccess.instance().runReadAction(new Computable<String>() {
      public String compute() {
        return Layout_Behavior.call_getFolderToGenerate_1229522949966(Configuration_Behavior.call_getLayout_1213877261819(configuration));
      }
    });
    // generate files 
    final File[] fileToRun = new File[]{null};
    final TextGenerationHandler generationHandler = new TextGenerationHandler() {
      @Override
      protected void fileGenerated(String targetDir, String fileName, TextGenerationResult result) {
        File target = new File(basedir + File.separator + fileName);
        new File(basedir + File.separator).mkdirs();
        Object value = result.getResult();
        if (value instanceof String) {
          FileUtil.write(target, (String) value);
        } else {
          FileUtil.write(target, (byte[]) value);
        }
        if (target.getName().equals(Configuration_Behavior.call_getBuildFileName_1230217425313(configuration) + ".xml")) {
          fileToRun[0] = target;
        }
      }
    };
    Runnable generate = new Runnable() {
      public void run() {
        if (showWindow) {
          GeneratorUIFacade.getInstance().generateModels(context, ListSequence.fromListAndArray(new ArrayList<SModelDescriptor>(), descriptor), generationHandler, true, true);
        } else {
          GenerationFacade.generateModels(project, ListSequence.fromListAndArray(new ArrayList<SModelDescriptor>(), descriptor), context, generationHandler, new EmptyProgressIndicator(), new DefaultMessageHandler(project), GenerationOptions.getDefaults().create());
        }
      }
    };
    if (ApplicationManager.getApplication().isDispatchThread()) {
      generate.run();
    } else {
      ApplicationManager.getApplication().invokeAndWait(generate, ModalityState.NON_MODAL);
    }
    return fileToRun[0];
  }

  public static SNode getLayout(final SModelDescriptor descriptor) {
    final Wrappers._T<SNode> layout = new Wrappers._T<SNode>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        SModel model = descriptor.getSModel();
        layout.value = ListSequence.fromList(SModelOperations.getRoots(model, "jetbrains.mps.build.packaging.structure.Layout")).first();
      }
    });
    return layout.value;
  }
}
