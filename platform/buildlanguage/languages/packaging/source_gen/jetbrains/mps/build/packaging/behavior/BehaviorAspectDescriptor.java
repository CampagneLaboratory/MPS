package jetbrains.mps.build.packaging.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.BehaviorDescriptor;
import java.util.Arrays;

public class BehaviorAspectDescriptor extends DescriptorProvider<BehaviorDescriptor> {
  private static String[] stringSwitchCases_846f5o_a0a0a = new String[]{"jetbrains.mps.build.packaging.structure.AbstractProjectComponent", "jetbrains.mps.build.packaging.structure.Antcall", "jetbrains.mps.build.packaging.structure.BaseDirPath", "jetbrains.mps.build.packaging.structure.Block", "jetbrains.mps.build.packaging.structure.BlockReference", "jetbrains.mps.build.packaging.structure.BuildLanguageTargetReference", "jetbrains.mps.build.packaging.structure.ComponentsList", "jetbrains.mps.build.packaging.structure.CompositePathComponent", "jetbrains.mps.build.packaging.structure.CompositeString", "jetbrains.mps.build.packaging.structure.Configuration", "jetbrains.mps.build.packaging.structure.ConfigurationReference", "jetbrains.mps.build.packaging.structure.Copy", "jetbrains.mps.build.packaging.structure.Delete", "jetbrains.mps.build.packaging.structure.Echo", "jetbrains.mps.build.packaging.structure.File", "jetbrains.mps.build.packaging.structure.FileExistsCondition", "jetbrains.mps.build.packaging.structure.Folder", "jetbrains.mps.build.packaging.structure.IAbstractCompositeComponent", "jetbrains.mps.build.packaging.structure.ICompositeComponent", "jetbrains.mps.build.packaging.structure.ICondition", "jetbrains.mps.build.packaging.structure.ILayoutComponent", "jetbrains.mps.build.packaging.structure.IMacroHolder", "jetbrains.mps.build.packaging.structure.INotBuildableComponent", "jetbrains.mps.build.packaging.structure.IPath", "jetbrains.mps.build.packaging.structure.IStringExpression", "jetbrains.mps.build.packaging.structure.ITransparentProjectComponent", "jetbrains.mps.build.packaging.structure.IVariableHolder", "jetbrains.mps.build.packaging.structure.Jar", "jetbrains.mps.build.packaging.structure.Layout", "jetbrains.mps.build.packaging.structure.MPSLayoutConfigurationReferencePropertyValueExpression", "jetbrains.mps.build.packaging.structure.Macro", "jetbrains.mps.build.packaging.structure.MacroReference", "jetbrains.mps.build.packaging.structure.Manifest", "jetbrains.mps.build.packaging.structure.ManifestAttribute", "jetbrains.mps.build.packaging.structure.Module", "jetbrains.mps.build.packaging.structure.ModuleCycle", "jetbrains.mps.build.packaging.structure.ModuleCycleReference", "jetbrains.mps.build.packaging.structure.NewModuleReference", "jetbrains.mps.build.packaging.structure.NonExistingPath", "jetbrains.mps.build.packaging.structure.NotCondition", "jetbrains.mps.build.packaging.structure.Pair", "jetbrains.mps.build.packaging.structure.Path", "jetbrains.mps.build.packaging.structure.PathComponent", "jetbrains.mps.build.packaging.structure.PathHolder", "jetbrains.mps.build.packaging.structure.Plugin", "jetbrains.mps.build.packaging.structure.PostProcessingTask", "jetbrains.mps.build.packaging.structure.PropertiesImport", "jetbrains.mps.build.packaging.structure.PropertyFileImport", "jetbrains.mps.build.packaging.structure.PropertyNodeImport", "jetbrains.mps.build.packaging.structure.Replace", "jetbrains.mps.build.packaging.structure.SimpleString", "jetbrains.mps.build.packaging.structure.Space", "jetbrains.mps.build.packaging.structure.Variable", "jetbrains.mps.build.packaging.structure.VariableReference", "jetbrains.mps.build.packaging.structure.Zip"};

  public BehaviorAspectDescriptor() {
  }

  public BehaviorDescriptor getDescriptor(String fqName) {
    switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0a, fqName)) {
      case 28:
        return new Layout_BehaviorDescriptor();
      case 20:
        // interface or abstract concept behavior jetbrains.mps.build.packaging.structure.ILayoutComponent 
        return null;
      case 0:
        // interface or abstract concept behavior jetbrains.mps.build.packaging.structure.AbstractProjectComponent 
        return null;
      case 14:
        return new File_BehaviorDescriptor();
      case 27:
        return new Jar_BehaviorDescriptor();
      case 16:
        return new Folder_BehaviorDescriptor();
      case 34:
        return new Module_BehaviorDescriptor();
      case 18:
        // interface or abstract concept behavior jetbrains.mps.build.packaging.structure.ICompositeComponent 
        return null;
      case 11:
        return new Copy_BehaviorDescriptor();
      case 54:
        return new Zip_BehaviorDescriptor();
      case 9:
        return new Configuration_BehaviorDescriptor();
      case 10:
        return new ConfigurationReference_BehaviorDescriptor();
      case 12:
        return new Delete_BehaviorDescriptor();
      case 45:
        // interface or abstract concept behavior jetbrains.mps.build.packaging.structure.PostProcessingTask 
        return null;
      case 43:
        return new PathHolder_BehaviorDescriptor();
      case 13:
        return new Echo_BehaviorDescriptor();
      case 52:
        return new Variable_BehaviorDescriptor();
      case 50:
        return new SimpleString_BehaviorDescriptor();
      case 24:
        // interface or abstract concept behavior jetbrains.mps.build.packaging.structure.IStringExpression 
        return null;
      case 53:
        return new VariableReference_BehaviorDescriptor();
      case 8:
        return new CompositeString_BehaviorDescriptor();
      case 1:
        return new Antcall_BehaviorDescriptor();
      case 5:
        return new BuildLanguageTargetReference_BehaviorDescriptor();
      case 49:
        return new Replace_BehaviorDescriptor();
      case 40:
        return new Pair_BehaviorDescriptor();
      case 35:
        return new ModuleCycle_BehaviorDescriptor();
      case 37:
        return new NewModuleReference_BehaviorDescriptor();
      case 30:
        return new Macro_BehaviorDescriptor();
      case 41:
        return new Path_BehaviorDescriptor();
      case 42:
        return new PathComponent_BehaviorDescriptor();
      case 7:
        return new CompositePathComponent_BehaviorDescriptor();
      case 31:
        return new MacroReference_BehaviorDescriptor();
      case 2:
        return new BaseDirPath_BehaviorDescriptor();
      case 29:
        return new MPSLayoutConfigurationReferencePropertyValueExpression_BehaviorDescriptor();
      case 19:
        // interface or abstract concept behavior jetbrains.mps.build.packaging.structure.ICondition 
        return null;
      case 15:
        return new FileExistsCondition_BehaviorDescriptor();
      case 39:
        return new NotCondition_BehaviorDescriptor();
      case 38:
        return new NonExistingPath_BehaviorDescriptor();
      case 23:
        // interface or abstract concept behavior jetbrains.mps.build.packaging.structure.IPath 
        return null;
      case 51:
        return new Space_BehaviorDescriptor();
      case 26:
        // interface or abstract concept behavior jetbrains.mps.build.packaging.structure.IVariableHolder 
        return null;
      case 21:
        // interface or abstract concept behavior jetbrains.mps.build.packaging.structure.IMacroHolder 
        return null;
      case 17:
        // interface or abstract concept behavior jetbrains.mps.build.packaging.structure.IAbstractCompositeComponent 
        return null;
      case 32:
        return new Manifest_BehaviorDescriptor();
      case 33:
        return new ManifestAttribute_BehaviorDescriptor();
      case 6:
        return new ComponentsList_BehaviorDescriptor();
      case 25:
        // interface or abstract concept behavior jetbrains.mps.build.packaging.structure.ITransparentProjectComponent 
        return null;
      case 22:
        // interface or abstract concept behavior jetbrains.mps.build.packaging.structure.INotBuildableComponent 
        return null;
      case 46:
        // interface or abstract concept behavior jetbrains.mps.build.packaging.structure.PropertiesImport 
        return null;
      case 48:
        return new PropertyNodeImport_BehaviorDescriptor();
      case 47:
        return new PropertyFileImport_BehaviorDescriptor();
      case 4:
        return new BlockReference_BehaviorDescriptor();
      case 3:
        return new Block_BehaviorDescriptor();
      case 36:
        return new ModuleCycleReference_BehaviorDescriptor();
      case 44:
        return new Plugin_BehaviorDescriptor();
      default:
        return null;
    }
  }
}
