package jetbrains.mps.build.packaging.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.util.PathManager;
import java.io.File;
import java.util.Set;
import com.intellij.openapi.application.PathMacros;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class MPSLayout_Behavior {

  public static void init(SNode thisNode) {
    SPropertyOperations.set(thisNode, "basedir", ".");
    SPropertyOperations.set(thisNode, "setBasedir", "" + (false));
    Map<String, String> vars = MapSequence.fromMap(new HashMap<String, String>());
    MapSequence.fromMap(vars).put("basedir", "basedir");
    MapSequence.fromMap(vars).put("\\n", "line.separator");
    MapSequence.fromMap(vars).put("/", "file.separator");
    MapSequence.fromMap(vars).put(":", "path.separator");
    MapSequence.fromMap(vars).put("date", "DSTAMP");
    SPropertyOperations.set(ListSequence.fromList(SLinkOperations.getTargets(thisNode, "configuration", true)).first(), "name", "default");
    for(String s : Sequence.fromIterable(MapSequence.fromMap(vars).keySet())) {
      SNode var = SConceptOperations.createNewNode("jetbrains.mps.build.packaging.structure.Variable", null);
      SPropertyOperations.set(var, "name", s);
      SPropertyOperations.set(var, "antName", MapSequence.fromMap(vars).get(s));
      SLinkOperations.addChild(thisNode, "builtInVariable", var);
    }
  }

  public static String virtual_getPath_1213877230696(SNode thisNode) {
    // check for MPS_HOME
    String mpsHomeWithBucks = "$MPS_HOME$";
    if (SPropertyOperations.getString(thisNode, "basedir").startsWith(mpsHomeWithBucks)) {
      String pathEnd = SPropertyOperations.getString(thisNode, "basedir").substring(mpsHomeWithBucks.length());
      if (pathEnd.equals("")) {
        return PathManager.getHomePath();
      }
      return PathManager.getHomePath() + File.separator + pathEnd;
    }
    // check for some macro name
    Set<String> macroNames = PathMacros.getInstance().getAllMacroNames();
    for(String macroName : Sequence.fromIterable(macroNames)) {
      String macroNameWithBuckString = "$" + macroName + "$";
      if (SPropertyOperations.getString(thisNode, "basedir").startsWith(macroNameWithBuckString)) {
        String pathEnd = SPropertyOperations.getString(thisNode, "basedir").substring(macroNameWithBuckString.length());
        if (pathEnd.equals("")) {
          return PathMacros.getInstance().getValue(macroName);
        }
        return PathMacros.getInstance().getValue(macroName) + File.separator + pathEnd;
      }
    }
    // .
    if (SPropertyOperations.getString(thisNode, "basedir").equals(".")) {
      return "";
    }
    // none of the above, then this is just a directory
    return SPropertyOperations.getString(thisNode, "basedir");
  }

  public static void call_proceedAbstractProjectComponent_1213877228237(SNode thisNode, SNode component, List<SNode> list) {
    if (SNodeOperations.isInstanceOf(component, "jetbrains.mps.build.packaging.structure.ICompositeComponent")) {
      for(SNode entry : Sequence.fromIterable(SLinkOperations.getTargets(((SNode)component), "entry", true))) {
        MPSLayout_Behavior.call_proceedAbstractProjectComponent_1213877228237(thisNode, entry, list);
      }
    }
    ListSequence.fromList(list).addElement(component);
  }

  public static List<SNode> call_getTopologicalSortedComponents_1213877228271(SNode thisNode) {
    List<SNode> result = ListSequence.<SNode>fromArray();
    for(SNode component : Sequence.fromIterable(SLinkOperations.getTargets(thisNode, "component", true))) {
      MPSLayout_Behavior.call_proceedAbstractProjectComponent_1213877228237(thisNode, component, result);
    }
    return result;
  }

  public static List<SNode> call_getTopologicalSortedComponents_1213877228296(SNode thisNode, SNode config) {
    List<SNode> result = ListSequence.<SNode>fromArray();
    List<SNode> all = MPSLayout_Behavior.call_getTopologicalSortedComponents_1213877228271(thisNode);
    for(SNode component : Sequence.fromIterable(all)) {
      if (AbstractProjectComponent_Behavior.call_included_1213877333807(component, config)) {
        ListSequence.fromList(result).addElement(component);
        ListSequence.fromList(result).addSequence(ListSequence.fromList(AbstractProjectComponent_Behavior.call_getPostProcessingTasks_1213877333861(component)));
      }
    }
    return result;
  }

  public static List<SNode> call_getModules_1213877228340(SNode thisNode) {
    List<SNode> result = ListSequence.<SNode>fromArray();
    for(SNode component : Sequence.fromIterable(SLinkOperations.getTargets(thisNode, "component", true))) {
      if (SNodeOperations.isInstanceOf(component, "jetbrains.mps.build.packaging.structure.ICompositeComponent")) {
        ListSequence.fromList(result).addSequence(ListSequence.fromList(MPSLayout_Behavior.call_getModules_1213877228389(thisNode, ((SNode)component))));
      } else
      if (SNodeOperations.isInstanceOf(component, "jetbrains.mps.build.packaging.structure.Module")) {
        ListSequence.fromList(result).addElement((SNode)component);
      }
    }
    return result;
  }

  public static List<SNode> call_getModules_1213877228389(SNode thisNode, SNode component) {
    List<SNode> result = ListSequence.<SNode>fromArray();
    for(SNode entry : Sequence.fromIterable(SLinkOperations.getTargets(component, "entry", true))) {
      if (SNodeOperations.isInstanceOf(entry, "jetbrains.mps.build.packaging.structure.ICompositeComponent")) {
        ListSequence.fromList(result).addSequence(ListSequence.fromList(MPSLayout_Behavior.call_getModules_1213877228389(thisNode, ((SNode)entry))));
      } else
      if (SNodeOperations.isInstanceOf(entry, "jetbrains.mps.build.packaging.structure.Module")) {
        ListSequence.fromList(result).addElement((SNode)entry);
      }
    }
    return result;
  }

  public static List<String> call_getAllMacroNames_1220980057360(SNode thisNode) {
    List<String> names = ListSequence.<String>fromArray("basedir", "mps.home");
    ListSequence.fromList(names).addSequence(Sequence.fromIterable(PathMacros.getInstance().getUserMacroNames()));
    return names;
  }

  public static String call_evaluateMacro_1220980091008(SNode thisNode, String macroName) {
    if (macroName.equals("basedir")) {
      return ILayoutComponent_Behavior.call_getPath_1213877230696(thisNode);
    }
    if (macroName.equals("mps.home")) {
      return PathManager.getHomePath();
    }
    return PathMacros.getInstance().getValue(macroName);
  }

}
