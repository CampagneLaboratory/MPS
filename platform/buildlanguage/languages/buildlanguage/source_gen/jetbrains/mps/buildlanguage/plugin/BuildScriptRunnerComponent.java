package jetbrains.mps.buildlanguage.plugin;

/*Generated by MPS */

import javax.swing.JPanel;
import com.intellij.openapi.actionSystem.DataProvider;
import com.intellij.execution.ui.ConsoleView;
import com.intellij.openapi.project.Project;
import java.awt.BorderLayout;
import com.intellij.execution.impl.ConsoleViewImpl;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import com.intellij.openapi.actionSystem.ActionToolbar;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import com.intellij.execution.ui.ConsoleViewContentType;
import com.intellij.openapi.util.Disposer;
import javax.swing.Icon;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.mps.plugins.MacrosUtil;
import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.actionSystem.DataKey;

public class BuildScriptRunnerComponent extends JPanel implements DataProvider {
  private static final String BUILD_STATE_CONSTANT = "buildStateDataProvider";

  private ConsoleView myConsoleView;
  private BuildScriptRunnerComponent.RunnerActions myRunnerActions;
  private final BuildScriptRunnerComponent.ToolCloseAction myCloseAction;
  private BuildScriptRunnerComponent.BuildState myState = BuildScriptRunnerComponent.BuildState.RUNNING;

  public BuildScriptRunnerComponent(Project project, BuildScriptRunnerComponent.ToolCloseAction close) {
    super(new BorderLayout());
    this.setLayout(new BorderLayout());
    this.myCloseAction = close;
    this.myConsoleView = new ConsoleViewImpl(project, false);
    DefaultActionGroup group = this.createActions();
    ActionToolbar toolBar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, group, false);
    this.add(toolBar.getComponent(), BorderLayout.WEST);
    this.add(this.myConsoleView.getComponent(), BorderLayout.CENTER);
  }

  public void addError(String text) {
    this.myConsoleView.print(text + "\n", ConsoleViewContentType.ERROR_OUTPUT);
  }

  public void addMessage(String text) {
    this.myConsoleView.print(text + "\n", ConsoleViewContentType.NORMAL_OUTPUT);
  }

  public void clean() {
    this.myConsoleView.clear();
  }

  public void dispose() {
    Disposer.dispose(this.myConsoleView);
  }

  public void setRunnerActions(BuildScriptRunnerComponent.RunnerActions actions) {
    if (actions != null) {
      this.myState = BuildScriptRunnerComponent.BuildState.RUNNING;
    }
    this.myRunnerActions = actions;
  }

  private Icon loadIcon(String name) {
    return IconManager.loadIcon(MacrosUtil.expandPath("${language_descriptor}\\icons\\" + name + ".png", "jetbrains.mps.buildlanguage"), true);
  }

  private DefaultActionGroup createActions() {
    DefaultActionGroup group = new DefaultActionGroup();
    group.add(new AnAction("Stop", "Stop executing ant task.", BuildScriptRunnerComponent.this.loadIcon("suspend")) {
      public void actionPerformed(AnActionEvent p0) {
        BuildScriptRunnerComponent.this.stop();
      }

      public void update(AnActionEvent e) {
        BuildScriptRunnerComponent.BuildState state = ((BuildScriptRunnerComponent.BuildState)e.getData(DataKey.create(BuildScriptRunnerComponent.BUILD_STATE_CONSTANT)));
        if (state != null) {
          e.getPresentation().setEnabled(state.equals(BuildScriptRunnerComponent.BuildState.RUNNING));
        }
      }
    });
    group.add(new AnAction("Close", "Stop executing ant task and close tool.", BuildScriptRunnerComponent.this.loadIcon("close")) {
      public void actionPerformed(AnActionEvent p0) {
        BuildScriptRunnerComponent.this.stop();
        BuildScriptRunnerComponent.this.myCloseAction.close();
      }
    });
    return group;
  }

  public BuildScriptRunnerComponent.BuildState getData(String dataID) {
    if (dataID.equals(BUILD_STATE_CONSTANT)) {
      return this.myState;
    }
    return null;
  }

  private void stop() {
    if (BuildScriptRunnerComponent.this.myRunnerActions != null) {
      BuildScriptRunnerComponent.this.myRunnerActions.kill();
      BuildScriptRunnerComponent.this.myState = BuildScriptRunnerComponent.BuildState.STOPPED;
    }
  }

  public static interface RunnerActions {
    public void kill();
    public void pause();
    public void play();
  }

  public static interface ToolCloseAction {
    public void close();
  }

  public static   enum BuildState {
    RUNNING(),
    STOPPED();

    BuildState() {
    }
  }
}
