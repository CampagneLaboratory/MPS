package jetbrains.mps.buildlanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import jetbrains.mps.smodel.SNode;
import java.io.File;
import jetbrains.mps.workbench.tools.BaseTool;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.MPSProjectHolder;

public class AntRunner {

  public static void runAntScript(MPSProject mpsProject, final SNode antScript, File file, BaseTool buildTool) {
    BuildScriptRunnerComponent component = (BuildScriptRunnerComponent)buildTool.getComponent();
    component.clean();
    BuildScriptRunner runner = new BuildScriptRunner(component);
    final Wrappers._T<SNodePointer> pointer = new Wrappers._T<SNodePointer>();
    ModelAccess.instance().runReadAction(new Runnable() {

      public void run() {
        pointer.value = new SNodePointer(antScript);
      }
    });
    String commandLine = MapSequence.fromMap(mpsProject.getComponent(MPSProjectHolder.class).getMPSProject().getPluginManager().getPrefsComponent(AntRunnerPreferences_PreferencesComponent.class).getStateObject().data).get(BuildTableModel.pointerToString(pointer.value));
    runner.run(file, commandLine);
    buildTool.openToolLater(true);
  }

}
