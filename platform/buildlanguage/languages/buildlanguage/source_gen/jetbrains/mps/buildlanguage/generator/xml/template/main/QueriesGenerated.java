package jetbrains.mps.buildlanguage.generator.xml.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.buildlanguage.behavior.PropertyValueExpression_Behavior;
import jetbrains.mps.buildlanguage.behavior.Project_Behavior;
import jetbrains.mps.build.property.behavior.PropertyNode_Behavior;
import jetbrains.mps.generator.template.IfMacroContext;
import org.apache.commons.lang.StringUtils;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.buildlanguage.behavior.TargetDeclaration_Behavior;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class QueriesGenerated {

  public static boolean baseMappingRule_Condition_1224769157301(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return (SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.buildlanguage.structure.Project", false, true) != null);
  }

  public static boolean baseMappingRule_Condition_1224769231960(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return (SNodeOperations.getAncestor(_context.getNode(), "jetbrains.mps.buildlanguage.structure.Project", false, true) != null);
  }

  public static Object propertyMacro_GetPropertyValue_1197041696784(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1197041984406(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1197043097344(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1197043134402(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "default", true), "targetDeclaration", false), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1197047737338(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return PropertyValueExpression_Behavior.call_toString_1213877472569(SLinkOperations.getTarget(_context.getNode(), "propertyValue", true));
  }

  public static Object propertyMacro_GetPropertyValue_1197113195048(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "declaration", false), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1197725505264(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return PropertyValueExpression_Behavior.call_toString_1213877472569(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1199645638495(final IOperationContext operationContext, final PropertyMacroContext _context) {
    if (SPropertyOperations.getString(_context.getNode(), "id") == null) {
      return _context.createUniqueName(SPropertyOperations.getString(_context.getNode(), "name"), null);
    }
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1199647316381(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return Project_Behavior.call_getDocumentName_1213877351812(_context.getNode());
  }

  public static Object propertyMacro_GetPropertyValue_1200145395655(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return PropertyValueExpression_Behavior.call_toString_1213877472569(SLinkOperations.getTarget(_context.getNode(), "basedir", true));
  }

  public static Object propertyMacro_GetPropertyValue_1201017147787(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "${ant.file}/../" + PropertyNode_Behavior.call_getFileName_1213877341757(SLinkOperations.getTarget(_context.getNode(), "propertyNode", false));
  }

  public static Object propertyMacro_GetPropertyValue_1201709830416(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "${ant.file}/../" + Project_Behavior.call_getFileName_1213877351819(SLinkOperations.getTarget(_context.getNode(), "project", false));
  }

  public static Object propertyMacro_GetPropertyValue_1219150196232(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static Object propertyMacro_GetPropertyValue_1219153881551(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return "Property " + SPropertyOperations.getString(_context.getNode(), "name") + " unspecified.";
  }

  public static Object propertyMacro_GetPropertyValue_1229186338304(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "if");
  }

  public static Object propertyMacro_GetPropertyValue_1229186668950(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "unless");
  }

  public static boolean ifMacro_Condition_1200145212723(final IOperationContext operationContext, final IfMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "id") != null;
  }

  public static boolean ifMacro_Condition_1200145404081(final IOperationContext operationContext, final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), "basedir", true) != null);
  }

  public static boolean ifMacro_Condition_1219774096052(final IOperationContext operationContext, final IfMacroContext _context) {
    return SPropertyOperations.getBoolean(_context.getNode(), "checkOnStart");
  }

  public static boolean ifMacro_Condition_1229186350652(final IOperationContext operationContext, final IfMacroContext _context) {
    return StringUtils.isNotEmpty(SPropertyOperations.getString(_context.getNode(), "if"));
  }

  public static boolean ifMacro_Condition_1229186682042(final IOperationContext operationContext, final IfMacroContext _context) {
    return StringUtils.isNotEmpty(SPropertyOperations.getString(_context.getNode(), "unless"));
  }

  public static SNode sourceNodeQuery_1197045463934(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    if (SLinkOperations.getCount(_context.getNode(), "depends") == 0) {
      return null;
    }
    SNode attribute = SConceptOperations.createNewNode("jetbrains.mps.xml.deprecated.structure.Attribute", null);
    SPropertyOperations.set(attribute, "name", "depends");
    SPropertyOperations.set(attribute, "value", TargetDeclaration_Behavior.call_getDependanceString_1213877231974(_context.getNode()));
    return attribute;
  }

  public static SNode sourceNodeQuery_1197725188422(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "internalText", true);
  }

  public static SNode sourceNodeQuery_1219774104894(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return _context.getNode();
  }

  public static Iterable sourceNodesQuery_1197043378055(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "target", true);
  }

  public static Iterable sourceNodesQuery_1197043380401(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "property", true)).where(new IWhereFilter <SNode>() {

      public boolean accept(SNode it) {
        return !(SNodeOperations.isInstanceOf(it, "jetbrains.mps.buildlanguage.structure.ExternalPropertyDeclaration"));
      }

    });
  }

  public static Iterable sourceNodesQuery_1197045140155(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "propertyList", true);
  }

  public static Iterable sourceNodesQuery_1197045203873(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "taskCall", true);
  }

  public static Iterable sourceNodesQuery_1197113312020(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> xmlattributes = new ArrayList<SNode>();
    for(SNode attr : SLinkOperations.getTargets(_context.getNode(), "atributes", true)) {
      SNode newAttr = SConceptOperations.createNewNode("jetbrains.mps.xml.deprecated.structure.Attribute", null);
      SPropertyOperations.set(newAttr, "name", SPropertyOperations.getString(SLinkOperations.getTarget(attr, "attributeDeclaration", false), "name"));
      SPropertyOperations.set(newAttr, "value", PropertyValueExpression_Behavior.call_toString_1213877472569(SLinkOperations.getTarget(attr, "value", true)));
      ListSequence.fromList(xmlattributes).addElement(newAttr);
    }
    return xmlattributes;
  }

  public static Iterable sourceNodesQuery_1197395852854(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "nested", true);
  }

  public static Iterable sourceNodesQuery_1199029853220(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "paths", true);
  }

  public static Iterable sourceNodesQuery_1219152731276(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    List<SNode> references = SNodeOperations.getDescendants(_context.getNode(), "jetbrains.mps.buildlanguage.structure.PropertyReference", false);
    Iterable<SNode> externalReferences = ListSequence.fromList(references).where(new IWhereFilter <SNode>() {

      public boolean accept(SNode it) {
        SNode propertyDeclaration = SLinkOperations.getTarget(it, "propertyDeclaration", false);
        return SNodeOperations.isInstanceOf(propertyDeclaration, "jetbrains.mps.buildlanguage.structure.ExternalPropertyDeclaration") && !(ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "propertyList", true)).contains(propertyDeclaration)) && !(SPropertyOperations.getBoolean(propertyDeclaration, "checkOnStart"));
      }

    });
    Iterable<SNode> decls = Sequence.fromIterable(externalReferences).select(new ISelector <SNode, SNode>() {

      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, "propertyDeclaration", false);
      }

    });
    return Sequence.fromIterable(decls).distinct();
  }

  public static Iterable sourceNodesQuery_1219774083522(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "property", true)).where(new IWhereFilter <SNode>() {

      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.buildlanguage.structure.ExternalPropertyDeclaration");
      }

    });
  }

  public static Iterable sourceNodesQuery_1220365505588(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "importProperties", true);
  }

  public static Iterable sourceNodesQuery_1221832362895(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(_context.getNode(), "importProject", true);
  }

}
