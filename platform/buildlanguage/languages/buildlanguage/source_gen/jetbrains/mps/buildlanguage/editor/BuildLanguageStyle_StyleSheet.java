package jetbrains.mps.buildlanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.style.AttributeCalculator;
import java.awt.Color;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.nodeEditor.MPSColors;

public class BuildLanguageStyle_StyleSheet {
  public static final Style STRING_LITERAL = new Style() {
    {
      this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

        public Color calculate(EditorCell cell) {
          return BuildLanguageStyle_StyleSheet.calculateColor(cell);
        }

      });
    }

  };
  public static final Style BOOLEAN_LITERAL = new Style() {
    {
      this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

        public Color calculate(EditorCell cell) {
          return BuildLanguageStyle_StyleSheet.calculateColor1(cell);
        }

      });
      this.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
    }

  };
  public static final Style INTEGER_LITERAL = new Style() {
    {
    }

  };
  public static final Style KEYWORD = new Style() {
    {
      this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

        public Color calculate(EditorCell cell) {
          return BuildLanguageStyle_StyleSheet.calculateColor2(cell);
        }

      });
      this.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
    }

  };
  public static final Style TARGET = new Style() {
    {
      this.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
      this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

        public Color calculate(EditorCell cell) {
          return BuildLanguageStyle_StyleSheet.calculateColor5(cell);
        }

      });
    }

  };
  public static final Style TASK = new Style() {
    {
      this.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
      this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

        public Color calculate(EditorCell cell) {
          return BuildLanguageStyle_StyleSheet.calculateColor6(cell);
        }

      });
    }

  };
  public static final Style PROPERTY = new Style() {
    {
    }

  };
  public static final Style ATTRIBUTE_NAME = new Style() {
    {
      this.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    }

  };
  public static final Style DEPRACTAED_ATTRIBUTE_NAME = new Style() {
    {
      this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

        public Color calculate(EditorCell cell) {
          return BuildLanguageStyle_StyleSheet.calculateColor3(cell);
        }

      });
    }

  };
  public static final Style PROMPTING = new Style() {
    {
      this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

        public Color calculate(EditorCell cell) {
          return BuildLanguageStyle_StyleSheet.calculateColor4(cell);
        }

      });
    }

  };
  public static final Style COMMENT = new Style() {
    {
      this.set(StyleAttributes.TEXT_COLOR, new AttributeCalculator <Color>() {

        public Color calculate(EditorCell cell) {
          return BuildLanguageStyle_StyleSheet.calculateColor7(cell);
        }

      });
    }

  };

  private static Color calculateColor(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_GREEN;
    return result;
  }

  private static Color calculateColor1(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_MAGENTA;
    return result;
  }

  private static Color calculateColor2(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_BLUE;
    return result;
  }

  private static Color calculateColor3(EditorCell cell) {
    Color result;
    result = Color.red;
    return result;
  }

  private static Color calculateColor4(EditorCell cell) {
    Color result;
    result = Color.lightGray;
    return result;
  }

  private static Color calculateColor5(EditorCell cell) {
    Color result;
    result = Color.darkGray;
    return result;
  }

  private static Color calculateColor6(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_BLUE;
    return result;
  }

  private static Color calculateColor7(EditorCell cell) {
    Color result;
    result = Color.gray;
    return result;
  }

}
