package jetbrains.mps.buildlanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.IStyle;
import jetbrains.mps.nodeEditor.EditorCell;
import jetbrains.mps.nodeEditor.EditorCell_Label;
import java.awt.Color;
import jetbrains.mps.nodeEditor.EditorCell_Collection;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.nodeEditor.MPSColors;

public class BuildLanguageStyle_StyleSheet {
  public static final IStyle STRING_LITERAL = new IStyle() {

    public void apply(EditorCell cell) {
      if(cell instanceof EditorCell_Label) {
        EditorCell_Label labelCell = (EditorCell_Label)cell;
        Color color = BuildLanguageStyle_StyleSheet.calculateColor(cell);
        labelCell.getTextLine().setTextColorIfNotSet(color);
      }
      if(cell instanceof EditorCell_Collection) {
        EditorCell_Collection collection = (EditorCell_Collection)cell;
        for(EditorCell child : collection) {
          this.apply(child);
        }
      }
    }

  };
  public static final IStyle BOOLEAN_LITERAL = new IStyle() {

    public void apply(EditorCell cell) {
      if(cell instanceof EditorCell_Label) {
        EditorCell_Label labelCell = (EditorCell_Label)cell;
        Color color = BuildLanguageStyle_StyleSheet.calculateColor1(cell);
        labelCell.getTextLine().setTextColorIfNotSet(color);
      }
      cell.setFontType(MPSFonts.BOLD);
      if(cell instanceof EditorCell_Collection) {
        EditorCell_Collection collection = (EditorCell_Collection)cell;
        for(EditorCell child : collection) {
          this.apply(child);
        }
      }
    }

  };
  public static final IStyle INTEGER_LITERAL = new IStyle() {

    public void apply(EditorCell cell) {
      if(cell instanceof EditorCell_Collection) {
        EditorCell_Collection collection = (EditorCell_Collection)cell;
        for(EditorCell child : collection) {
          this.apply(child);
        }
      }
    }

  };
  public static final IStyle KEYWORD = new IStyle() {

    public void apply(EditorCell cell) {
      if(cell instanceof EditorCell_Label) {
        EditorCell_Label labelCell = (EditorCell_Label)cell;
        Color color = BuildLanguageStyle_StyleSheet.calculateColor2(cell);
        labelCell.getTextLine().setTextColorIfNotSet(color);
      }
      cell.setFontType(MPSFonts.BOLD);
      if(cell instanceof EditorCell_Collection) {
        EditorCell_Collection collection = (EditorCell_Collection)cell;
        for(EditorCell child : collection) {
          this.apply(child);
        }
      }
    }

  };
  public static final IStyle TASK_TARGET = new IStyle() {

    public void apply(EditorCell cell) {
      cell.setFontType(MPSFonts.PLAIN);
      if(cell instanceof EditorCell_Collection) {
        EditorCell_Collection collection = (EditorCell_Collection)cell;
        for(EditorCell child : collection) {
          this.apply(child);
        }
      }
    }

  };
  public static final IStyle PROPERTY = new IStyle() {

    public void apply(EditorCell cell) {
      if(cell instanceof EditorCell_Collection) {
        EditorCell_Collection collection = (EditorCell_Collection)cell;
        for(EditorCell child : collection) {
          this.apply(child);
        }
      }
    }

  };
  public static final IStyle ATTRIBUTE_NAME = new IStyle() {

    public void apply(EditorCell cell) {
      cell.setFontType(MPSFonts.PLAIN);
      if(cell instanceof EditorCell_Collection) {
        EditorCell_Collection collection = (EditorCell_Collection)cell;
        for(EditorCell child : collection) {
          this.apply(child);
        }
      }
    }

  };
  public static final IStyle DEPRACTAED_ATTRIBUTE_NAME = new IStyle() {

    public void apply(EditorCell cell) {
      if(cell instanceof EditorCell_Label) {
        EditorCell_Label labelCell = (EditorCell_Label)cell;
        Color color = BuildLanguageStyle_StyleSheet.calculateColor3(cell);
        labelCell.getTextLine().setTextColorIfNotSet(color);
      }
      if(cell instanceof EditorCell_Collection) {
        EditorCell_Collection collection = (EditorCell_Collection)cell;
        for(EditorCell child : collection) {
          this.apply(child);
        }
      }
    }

  };

  private static Color calculateColor(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_GREEN;
    return result;
  }

  private static Color calculateColor1(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_MAGENTA;
    return result;
  }

  private static Color calculateColor2(EditorCell cell) {
    Color result;
    result = MPSColors.DARK_BLUE;
    return result;
  }

  private static Color calculateColor3(EditorCell cell) {
    Color result;
    result = Color.red;
    return result;
  }

}
