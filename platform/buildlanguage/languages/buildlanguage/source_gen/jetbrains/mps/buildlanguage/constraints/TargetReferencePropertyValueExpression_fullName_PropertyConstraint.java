package jetbrains.mps.buildlanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.INodePropertyGetter;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class TargetReferencePropertyValueExpression_fullName_PropertyConstraint implements IModelConstraints, INodePropertyGetter {

  public TargetReferencePropertyValueExpression_fullName_PropertyConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodePropertyGetter("jetbrains.mps.buildlanguage.structure.TargetReferencePropertyValueExpression", "fullName", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodePropertyGetter("jetbrains.mps.buildlanguage.structure.TargetReferencePropertyValueExpression", "fullName");
  }

  public Object execPropertyGet(SNode node, String propertyName, IScope scope) {
    if ((SLinkOperations.getTarget(node, "declaration", false) == null)) {
      return null;
    }
    return SLinkOperations.getTarget(node, "declaration", false) + "@" + SNodeOperations.getAncestor(SLinkOperations.getTarget(node, "declaration", false), "jetbrains.mps.buildlanguage.structure.Project", false, true);
  }

}
