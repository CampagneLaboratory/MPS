package jetbrains.mps.buildlanguage.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.helgins.inference.TypeChecker;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_Enum_InferenceRule implements InferenceRule_Runtime {

  public typeof_Enum_InferenceRule() {
  }

  public void applyRule(final SNode nodeToCheck) {
    {
      ICursor<SNode> _zCursor = CursorFactory.createCursor(SLinkOperations.getTargets(nodeToCheck, "constants", true));
      try {
        while(_zCursor.moveToNext()) {
          SNode element = _zCursor.getCurrent();
          TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(element, "jetbrains.mps.buildlanguage.helgins", "1197401239298", true), SequenceOperations.getFirst(SLinkOperations.getConceptLinkTargets(nodeToCheck, "type")), element, null, "jetbrains.mps.buildlanguage.helgins", "1197401256457", false);
        }
      } finally {
        _zCursor.release();
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.buildlanguage.structure.Enum";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
