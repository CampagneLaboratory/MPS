package jetbrains.mps.buildlanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.INodePropertyGetter;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.buildlanguage.behavior.PropertyValueExpression_Behavior;

public class MultiLineString_name_PropertyConstraint implements IModelConstraints, INodePropertyGetter {

  public MultiLineString_name_PropertyConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodePropertyGetter("jetbrains.mps.buildlanguage.structure.MultiLineString", "name", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodePropertyGetter("jetbrains.mps.buildlanguage.structure.MultiLineString", "name");
  }

  public Object execPropertyGet(SNode node, String propertyName, IScope scope) {
    String result = "";
    for(SNode lit : Sequence.fromIterable(SLinkOperations.getTargets(node, "stringExpression", true))) {
      result += PropertyValueExpression_Behavior.call_toString_1213877472569(lit);
      result += " ";
    }
    return (result.length() > 0 ?
      result.substring(0, result.length() - 1) :
      ""
    );
  }

}
