package jetbrains.mps.buildlanguage.helgins;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.buildlanguage.behavior.Enum_Behavior;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class chechAttributeDeclarationDefaultValueIsInEnum_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {

  public chechAttributeDeclarationDefaultValueIsInEnum_NonTypesystemRule() {
  }

  public void applyRule(final SNode genericAttributeDeclaration, final TypeCheckingContext typeCheckingContext) {
    if ((SLinkOperations.getTarget(genericAttributeDeclaration, "default", true) != null) && (SLinkOperations.getTarget(genericAttributeDeclaration, "enum", true) != null)) {
      if (!(Enum_Behavior.call_inEnum_1213877413964(SLinkOperations.getTarget(genericAttributeDeclaration, "enum", true), SLinkOperations.getTarget(genericAttributeDeclaration, "default", true)))) {
        {
          BaseIntentionProvider intentionProvider = null;
          typeCheckingContext.reportTypeError(genericAttributeDeclaration, "Default value of attribute \"" + SPropertyOperations.getString(genericAttributeDeclaration, "name") + "\" must be in " + Enum_Behavior.call_toString_1213877413898(SLinkOperations.getTarget(genericAttributeDeclaration, "enum", true)), "r:00000000-0000-4000-0000-011c895904c4(jetbrains.mps.buildlanguage.helgins)", "1197486669295", intentionProvider);
        }
      }
    }
    if (SPropertyOperations.getString(genericAttributeDeclaration, "name").contains(" ")) {
      {
        BaseIntentionProvider intentionProvider = null;
        typeCheckingContext.reportTypeError(genericAttributeDeclaration, "Attribute name contains whitespaces!", "r:00000000-0000-4000-0000-011c895904c4(jetbrains.mps.buildlanguage.helgins)", "1197739496234", intentionProvider);
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.buildlanguage.structure.GenericAttributeDeclaration";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
