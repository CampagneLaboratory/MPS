package jetbrains.mps.buildlanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.buildlanguage.structure.TargetReference;
import jetbrains.mps.buildlanguage.structure.FileName;
import java.util.Iterator;
import jetbrains.mps.buildlanguage.structure.TargetDeclaration;
import java.util.List;
import jetbrains.mps.buildlanguage.structure.AbstractImportProject;
import jetbrains.mps.buildlanguage.structure.GenericCall;
import jetbrains.mps.buildlanguage.structure.ImportProperties;
import jetbrains.mps.buildlanguage.structure.PropertyDeclaration;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Project extends jetbrains.mps.lang.core.structure.BaseConcept implements jetbrains.mps.lang.core.structure.INamedConcept, jetbrains.mps.buildlanguage.structure.IPropertyHolder {
  public static final String concept = "jetbrains.mps.buildlanguage.structure.Project";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String DEFAULT = "default";
  public static final String BASEDIR = "basedir";
  public static final String TARGET = "target";
  public static final String IMPORT_PROJECT = "importProject";
  public static final String PATHS = "paths";
  public static final String IMPORT_PROPERTIES = "importProperties";
  public static final String PROPERTY = "property";

  public Project(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Project.NAME);
  }

  public void setName(String value) {
    this.setProperty(Project.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Project.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Project.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Project.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Project.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Project.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Project.VIRTUAL_PACKAGE, value);
  }

  public jetbrains.mps.buildlanguage.structure.TargetReference getDefault() {
    return (jetbrains.mps.buildlanguage.structure.TargetReference)this.getChild(TargetReference.class, Project.DEFAULT);
  }

  public void setDefault(jetbrains.mps.buildlanguage.structure.TargetReference node) {
    super.setChild(Project.DEFAULT, node);
  }

  public jetbrains.mps.buildlanguage.structure.FileName getBasedir() {
    return (jetbrains.mps.buildlanguage.structure.FileName)this.getChild(FileName.class, Project.BASEDIR);
  }

  public void setBasedir(jetbrains.mps.buildlanguage.structure.FileName node) {
    super.setChild(Project.BASEDIR, node);
  }

  public int getTargetsCount() {
    return this.getChildCount(Project.TARGET);
  }

  public Iterator<jetbrains.mps.buildlanguage.structure.TargetDeclaration> targets() {
    return this.children(TargetDeclaration.class, Project.TARGET);
  }

  public List<jetbrains.mps.buildlanguage.structure.TargetDeclaration> getTargets() {
    return this.getChildren(TargetDeclaration.class, Project.TARGET);
  }

  public void addTarget(jetbrains.mps.buildlanguage.structure.TargetDeclaration node) {
    this.addChild(Project.TARGET, node);
  }

  public void insertTarget(jetbrains.mps.buildlanguage.structure.TargetDeclaration prev, jetbrains.mps.buildlanguage.structure.TargetDeclaration node) {
    this.insertChild(prev, Project.TARGET, node);
  }

  public int getImportProjectsCount() {
    return this.getChildCount(Project.IMPORT_PROJECT);
  }

  public Iterator<jetbrains.mps.buildlanguage.structure.AbstractImportProject> importProjects() {
    return this.children(AbstractImportProject.class, Project.IMPORT_PROJECT);
  }

  public List<jetbrains.mps.buildlanguage.structure.AbstractImportProject> getImportProjects() {
    return this.getChildren(AbstractImportProject.class, Project.IMPORT_PROJECT);
  }

  public void addImportProject(jetbrains.mps.buildlanguage.structure.AbstractImportProject node) {
    this.addChild(Project.IMPORT_PROJECT, node);
  }

  public void insertImportProject(jetbrains.mps.buildlanguage.structure.AbstractImportProject prev, jetbrains.mps.buildlanguage.structure.AbstractImportProject node) {
    this.insertChild(prev, Project.IMPORT_PROJECT, node);
  }

  public int getPathsesCount() {
    return this.getChildCount(Project.PATHS);
  }

  public Iterator<jetbrains.mps.buildlanguage.structure.GenericCall> pathses() {
    return this.children(GenericCall.class, Project.PATHS);
  }

  public List<jetbrains.mps.buildlanguage.structure.GenericCall> getPathses() {
    return this.getChildren(GenericCall.class, Project.PATHS);
  }

  public void addPaths(jetbrains.mps.buildlanguage.structure.GenericCall node) {
    this.addChild(Project.PATHS, node);
  }

  public void insertPaths(jetbrains.mps.buildlanguage.structure.GenericCall prev, jetbrains.mps.buildlanguage.structure.GenericCall node) {
    this.insertChild(prev, Project.PATHS, node);
  }

  public int getImportPropertiesesCount() {
    return this.getChildCount(Project.IMPORT_PROPERTIES);
  }

  public Iterator<jetbrains.mps.buildlanguage.structure.ImportProperties> importPropertieses() {
    return this.children(ImportProperties.class, Project.IMPORT_PROPERTIES);
  }

  public List<jetbrains.mps.buildlanguage.structure.ImportProperties> getImportPropertieses() {
    return this.getChildren(ImportProperties.class, Project.IMPORT_PROPERTIES);
  }

  public void addImportProperties(jetbrains.mps.buildlanguage.structure.ImportProperties node) {
    this.addChild(Project.IMPORT_PROPERTIES, node);
  }

  public void insertImportProperties(jetbrains.mps.buildlanguage.structure.ImportProperties prev, jetbrains.mps.buildlanguage.structure.ImportProperties node) {
    this.insertChild(prev, Project.IMPORT_PROPERTIES, node);
  }

  public int getPropertiesCount() {
    return this.getChildCount(Project.PROPERTY);
  }

  public Iterator<jetbrains.mps.buildlanguage.structure.PropertyDeclaration> properties() {
    return this.children(PropertyDeclaration.class, Project.PROPERTY);
  }

  public List<jetbrains.mps.buildlanguage.structure.PropertyDeclaration> getProperties() {
    return this.getChildren(PropertyDeclaration.class, Project.PROPERTY);
  }

  public void addProperty(jetbrains.mps.buildlanguage.structure.PropertyDeclaration node) {
    this.addChild(Project.PROPERTY, node);
  }

  public void insertProperty(jetbrains.mps.buildlanguage.structure.PropertyDeclaration prev, jetbrains.mps.buildlanguage.structure.PropertyDeclaration node) {
    this.insertChild(prev, Project.PROPERTY, node);
  }


  public static Project newInstance(SModel sm, boolean init) {
    return (Project)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.buildlanguage.structure.Project", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Project newInstance(SModel sm) {
    return Project.newInstance(sm, false);
  }

}
