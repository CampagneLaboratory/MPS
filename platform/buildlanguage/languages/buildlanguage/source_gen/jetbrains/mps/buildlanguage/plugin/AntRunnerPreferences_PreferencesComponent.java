package jetbrains.mps.buildlanguage.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.prefs.BaseProjectPrefsComponent;
import com.intellij.util.xmlb.annotations.Tag;
import com.intellij.openapi.project.Project;
import org.jdom.Element;
import com.intellij.util.xmlb.XmlSerializer;
import jetbrains.mps.plugins.pluginparts.prefs.BasePrefsPage;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.intellij.openapi.options.ConfigurationException;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.ide.IdeMain;
import jetbrains.mps.project.Solution;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNodePointer;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;

public class AntRunnerPreferences_PreferencesComponent extends BaseProjectPrefsComponent {
  @Tag(value = "state")
  private AntRunnerPreferences_PreferencesComponent.MyState myState = new AntRunnerPreferences_PreferencesComponent.MyState();

  public AntRunnerPreferences_PreferencesComponent(Project project) {
    super(project);
  }


  public void loadState(Element state) {
    XmlSerializer.deserializeInto(this.myState, state);
    this.afterRead(this.getMPSProject());
    for (BasePrefsPage page : ListSequence.fromList(this.getPages())) {
      page.reset();
    }
  }

  public Element getState() {
    for (BasePrefsPage page : ListSequence.fromList(this.getPages())) {
      try {
        page.apply();
      } catch (ConfigurationException e) {
      }
    }
    this.beforeWrite(this.getMPSProject());
    return XmlSerializer.serialize(this.myState);
  }

  public void afterRead(MPSProject project) {
    if (AntRunnerPreferences_PreferencesComponent.this.getStateObject().data == null) {
      AntRunnerPreferences_PreferencesComponent.this.getStateObject().data = MapSequence.fromMap(new HashMap<String, String>());
    }
    if (IdeMain.getTestMode() == IdeMain.TestMode.CORE_TEST) {
      return;
    }
    for (Solution sln : ListSequence.fromList(project.getProjectSolutions())) {
      for (final SModelDescriptor descriptor : ListSequence.fromList(sln.getOwnModelDescriptors())) {
        if (!(SModelStereotype.isUserModel(descriptor))) {
          continue;
        }
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            SModel sModel = descriptor.getSModel();
            for (SNode root : ListSequence.fromList(sModel.getRoots())) {
              if (SNodeOperations.isInstanceOf(((SNode)root), "jetbrains.mps.buildlanguage.structure.IAntScript")) {
                SNodePointer pointer = new SNodePointer(root);
                String pointerString = BuildTableModel.pointerToString(pointer);
                if (!(MapSequence.fromMap(AntRunnerPreferences_PreferencesComponent.this.getStateObject().data).containsKey(pointerString))) {
                  MapSequence.fromMap(AntRunnerPreferences_PreferencesComponent.this.getStateObject().data).put(pointerString, "");
                }
              }
            }
          }
        });
      }
    }
  }

  public void beforeWrite(MPSProject project) {
  }

  public AntRunnerPreferences_PreferencesComponent.MyState getStateObject() {
    return this.myState;
  }

  public List<BasePrefsPage> createPages() {
    List<BasePrefsPage> result = ListSequence.fromList(new ArrayList<BasePrefsPage>());
    ListSequence.fromList(result).addElement(new AntRunnerPreferences_AntRunner_PreferencesPage(this.getProject(), this));
    return result;
  }

  public static class MyState {
    public Map<String, String> data = MapSequence.fromMap(new HashMap<String, String>());

    public MyState() {
    }
  }
}
