package jetbrains.mps.buildlanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class AbstractCall extends BaseConcept implements IProjectComponent, ICommented {
  public static final String concept = "jetbrains.mps.buildlanguage.structure.AbstractCall";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String INTERNAL_TEXT = "internalText";
  public static final String NESTED = "nested";
  public static final String _$ATTRIBUTE = "_$attribute";

  public AbstractCall(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(AbstractCall.NAME);
  }

  public void setName(String value) {
    this.setProperty(AbstractCall.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(AbstractCall.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(AbstractCall.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(AbstractCall.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(AbstractCall.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(AbstractCall.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(AbstractCall.VIRTUAL_PACKAGE, value);
  }

  public PropertyValueExpression getInternalText() {
    return (PropertyValueExpression) this.getChild(PropertyValueExpression.class, AbstractCall.INTERNAL_TEXT);
  }

  public void setInternalText(PropertyValueExpression node) {
    super.setChild(AbstractCall.INTERNAL_TEXT, node);
  }

  public int getNestedsCount() {
    return this.getChildCount(AbstractCall.NESTED);
  }

  public Iterator<AbstractCall> nesteds() {
    return this.children(AbstractCall.class, AbstractCall.NESTED);
  }

  public List<AbstractCall> getNesteds() {
    return this.getChildren(AbstractCall.class, AbstractCall.NESTED);
  }

  public void addNested(AbstractCall node) {
    this.addChild(AbstractCall.NESTED, node);
  }

  public void insertNested(AbstractCall prev, AbstractCall node) {
    this.insertChild(prev, AbstractCall.NESTED, node);
  }

  public int get_$attributesCount() {
    return this.getChildCount(AbstractCall._$ATTRIBUTE);
  }

  public Iterator<Attribute> _$attributes() {
    return this.children(Attribute.class, AbstractCall._$ATTRIBUTE);
  }

  public List<Attribute> get_$attributes() {
    return this.getChildren(Attribute.class, AbstractCall._$ATTRIBUTE);
  }

  public void add_$attribute(Attribute node) {
    this.addChild(AbstractCall._$ATTRIBUTE, node);
  }

  public void insert_$attribute(Attribute prev, Attribute node) {
    this.insertChild(prev, AbstractCall._$ATTRIBUTE, node);
  }

  public static AbstractCall newInstance(SModel sm, boolean init) {
    return (AbstractCall) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.buildlanguage.structure.AbstractCall", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AbstractCall newInstance(SModel sm) {
    return AbstractCall.newInstance(sm, false);
  }
}
