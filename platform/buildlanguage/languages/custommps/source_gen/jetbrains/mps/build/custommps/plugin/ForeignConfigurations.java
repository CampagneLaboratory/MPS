/*
 * Copyright 2003-2010 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package jetbrains.mps.build.custommps.plugin;

/*Generated by MPS */

import com.intellij.execution.configurations.ConfigurationType;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.extensions.Extensions;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.buildlanguage.plugin.BuildLanguage_ConfigurationType;

public class ForeignConfigurations {
  public ForeignConfigurations() {
  }

  public static void connectForeignConfigurations() {
    ConfigurationType configurationType = ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), new _FunctionTypes._return_P0_E0<Class<ConfigurationType>>() {
      public Class<ConfigurationType> invoke() {
        try {
          return (Class<ConfigurationType>) getClass().getClassLoader().loadClass("jetbrains.mps.buildlanguage.plugin.BuildLanguage_ConfigurationType");
        } catch (ClassNotFoundException cl) {
          return (Class<ConfigurationType>) null;
        }
      }
    }.invoke());
    ((BuildLanguage_ConfigurationType) configurationType).addForeignFactory(new DefaultCustomMpsApplication_Factory(configurationType));
  }
}
