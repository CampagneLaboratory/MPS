package jetbrains.mps.build.custommps.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.pluginparts.runconfigs.BaseConfigCreator;
import jetbrains.mps.smodel.SNode;
import com.intellij.execution.configurations.RunConfiguration;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.extensions.Extensions;
import com.intellij.execution.configurations.ConfigurationType;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.plugins.pluginparts.runconfigs.MPSPsiElement;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.annotations.Nullable;
import com.intellij.execution.configurations.ConfigurationFactory;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class DefaultCustomMpsLanguageConfigurationFromConfiguration extends BaseConfigCreator<SNode> implements Cloneable {
  private RunConfiguration myConfig;

  public DefaultCustomMpsLanguageConfigurationFromConfiguration() {
    super(ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), new _FunctionTypes._return_P0_E0<Class<ConfigurationType>>() {
      public Class<ConfigurationType> invoke() {
        try {
          return (Class<ConfigurationType>) getClass().getClassLoader().loadClass("jetbrains.mps.buildlanguage.plugin.BuildLanguage_ConfigurationType");
        } catch (ClassNotFoundException cl) {
          return (Class<ConfigurationType>) null;
        }
      }
    }.invoke()));
  }

  protected RunConfiguration doCreateConfiguration(SNode node) {
    this.createConfig(node);
    return this.myConfig;
  }

  private void createConfig(final SNode parameter) {
    final Wrappers._T<SNode> layout = new Wrappers._T<SNode>();
    final Wrappers._boolean isApplicable = new Wrappers._boolean();
    final Wrappers._T<String> configurationId = new Wrappers._T<String>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        layout.value = SNodeOperations.getAncestor(parameter, "jetbrains.mps.build.packaging.structure.MPSLayout", false, true);
        isApplicable.value = (layout.value != null) && (ListSequence.fromList(SNodeOperations.getDescendants(layout.value, "jetbrains.mps.build.custommps.structure.MPSBuild", false, new String[]{})).isNotEmpty() || ListSequence.fromList(SNodeOperations.getDescendants(layout.value, "jetbrains.mps.build.custommps.structure.MPSDistribution", false, new String[]{})).isNotEmpty());
        configurationId.value = parameter.getId();
      }
    });
    if (!(isApplicable.value)) {
      return;
    }

    DefaultCustomMpsLanguageConfigurationFromConfiguration.this.setSourceElement(new MPSPsiElement(parameter));
    {
      ConfigurationType configType = ContainerUtil.findInstance(Extensions.getExtensions(ConfigurationType.CONFIGURATION_TYPE_EP), new _FunctionTypes._return_P0_E0<Class<ConfigurationType>>() {
        public Class<ConfigurationType> invoke() {
          try {
            return (Class<ConfigurationType>) getClass().getClassLoader().loadClass("jetbrains.mps.buildlanguage.plugin.BuildLanguage_ConfigurationType");
          } catch (ClassNotFoundException cl) {
            return (Class<ConfigurationType>) null;
          }
        }
      }.invoke());
      DefaultCustomMpsApplication_Configuration _config = new DefaultCustomMpsApplication_Configuration(DefaultCustomMpsLanguageConfigurationFromConfiguration.this.getContext().getProject(), findFactory(configType, "DefaultCustomMpsApplication"), "NewConfig");
      _config.setName(SPropertyOperations.getString(layout.value, "name") + "." + SPropertyOperations.getString(parameter, "name"));
      _config.getStateObject().nodeId = layout.value.getId();
      _config.getStateObject().modelId = layout.value.getModel().getModelDescriptor().getSModelReference().toString();
      _config.getStateObject().configurationId = configurationId.value;
      DefaultCustomMpsLanguageConfigurationFromConfiguration.this.myConfig = _config;
    }
  }

  @Override
  public DefaultCustomMpsLanguageConfigurationFromConfiguration clone() {
    return ((DefaultCustomMpsLanguageConfigurationFromConfiguration) super.clone());
  }

  protected boolean isApplicable(final Object element) {
    return element instanceof SNode && SNodeOperations.isInstanceOf(((SNode) element), "jetbrains.mps.build.packaging.structure.Configuration");
  }

  @Nullable
  public ConfigurationFactory findFactory(ConfigurationType configurationType, String configurationName) {
    for (ConfigurationFactory factory : Sequence.fromIterable(Sequence.fromArray(configurationType.getConfigurationFactories()))) {
      if (factory.getClass().getName().contains(configurationName)) {
        return factory;
      }
    }
    return null;
  }
}
