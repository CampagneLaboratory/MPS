package jetbrains.mps.build.custommps.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.build.packaging.editor.IncludeExcludeEditorComponent;
import jetbrains.mps.build.packaging.editor.IncludeExcludeInInspector;
import jetbrains.mps.build.packaging.editor.ConfigurationReferencesEditorComponent;
import jetbrains.mps.build.packaging.editor.CompositecomponentEntriesEditorComponent;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.build.packaging.editor.PackagingStyles_StyleSheet;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.ConceptPropertyCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.editor.cellProviders.RefNodeCellProvider;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.smodel.MPSModuleRepository;

public class MPSBuild_Editor extends DefaultNodeEditor {

  /* package */AbstractCellProvider myIncludeExcludeEditorComponent2334_0;
  /* package */AbstractCellProvider myIncludeExcludeInInspector2334_0;
  /* package */AbstractCellProvider myConfigurationReferencesEditorComponent2334_0;
  /* package */AbstractCellProvider myConfigurationReferencesEditorComponent2334_1;
  /* package */AbstractCellProvider myCompositecomponentEntriesEditorComponent2334_0;

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createCollection_2334_0(context, node);
  }

  public EditorCell createInspectedCell(EditorContext context, SNode node) {
    return this.createCollection_2334_2(context, node);
  }

  public EditorCell createCollection_2334_0(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    editorCell.setCellId("Collection_2334_0");
    editorCell.addEditorCell(this.createCollection_2334_1(context, node));
    editorCell.addEditorCell(this.createComponent_2334_4(context, node));
    return editorCell;
  }

  public EditorCell createCollection_2334_1(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    editorCell.setCellId("Collection_2334_1");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
      style.set(StyleAttributes.SELECTABLE, false);
    }
    editorCell.addEditorCell(this.createConceptProperty_2334_1(context, node));
    editorCell.addEditorCell(this.createComponent_2334_0(context, node));
    editorCell.addEditorCell(this.createComponent_2334_3(context, node));
    return editorCell;
  }

  public EditorCell createCollection_2334_2(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    editorCell.setCellId("Collection_2334_2");
    if (renderingCondition2334_0(node, context, context.getOperationContext().getScope())) {
      editorCell.addEditorCell(this.createCollection_2334_3(context, node));
    }
    editorCell.addEditorCell(this.createCollection_2334_4(context, node));
    editorCell.addEditorCell(this.createComponent_2334_1(context, node));
    editorCell.addEditorCell(this.createComponent_2334_2(context, node));
    return editorCell;
  }

  public EditorCell createCollection_2334_3(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    editorCell.setCellId("Collection_2334_3");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
      style.set(StyleAttributes.SELECTABLE, false);
    }
    editorCell.addEditorCell(this.createConstant_2334_0(context, node, "path to mps build tools"));
    editorCell.addEditorCell(this.createRefNode_2334_1(context, node));
    return editorCell;
  }

  public EditorCell createCollection_2334_4(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    editorCell.setCellId("Collection_2334_4");
    {
      Style style = editorCell.getStyle();
      style.set(StyleAttributes.SELECTABLE, false);
      style.set(StyleAttributes.SELECTABLE, false);
    }
    editorCell.addEditorCell(this.createConstant_2334_1(context, node, "path to license"));
    editorCell.addEditorCell(this.createRefNode_2334_3(context, node));
    return editorCell;
  }

  public EditorCell createComponent_2334_0(EditorContext context, SNode node) {
    if (this.myIncludeExcludeEditorComponent2334_0 == null) {
      this.myIncludeExcludeEditorComponent2334_0 = new IncludeExcludeEditorComponent(node);
    }
    EditorCell editorCell = this.myIncludeExcludeEditorComponent2334_0.createEditorCell(context);
    return editorCell;
  }

  public EditorCell createComponent_2334_1(EditorContext context, SNode node) {
    if (this.myIncludeExcludeInInspector2334_0 == null) {
      this.myIncludeExcludeInInspector2334_0 = new IncludeExcludeInInspector(node);
    }
    EditorCell editorCell = this.myIncludeExcludeInInspector2334_0.createEditorCell(context);
    return editorCell;
  }

  public EditorCell createComponent_2334_2(EditorContext context, SNode node) {
    if (this.myConfigurationReferencesEditorComponent2334_0 == null) {
      this.myConfigurationReferencesEditorComponent2334_0 = new ConfigurationReferencesEditorComponent(node);
    }
    EditorCell editorCell = this.myConfigurationReferencesEditorComponent2334_0.createEditorCell(context);
    return editorCell;
  }

  public EditorCell createComponent_2334_3(EditorContext context, SNode node) {
    if (this.myConfigurationReferencesEditorComponent2334_1 == null) {
      this.myConfigurationReferencesEditorComponent2334_1 = new ConfigurationReferencesEditorComponent(node);
    }
    EditorCell editorCell = this.myConfigurationReferencesEditorComponent2334_1.createEditorCell(context);
    return editorCell;
  }

  public EditorCell createComponent_2334_4(EditorContext context, SNode node) {
    if (this.myCompositecomponentEntriesEditorComponent2334_0 == null) {
      this.myCompositecomponentEntriesEditorComponent2334_0 = new CompositecomponentEntriesEditorComponent(node);
    }
    EditorCell editorCell = this.myCompositecomponentEntriesEditorComponent2334_0.createEditorCell(context);
    return editorCell;
  }

  public EditorCell createConstant_2334_0(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    editorCell.setCellId("Constant_2334_0");
    PackagingStyles_StyleSheet.getKeyword(editorCell).apply(editorCell);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant_2334_1(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    editorCell.setCellId("Constant_2334_1");
    PackagingStyles_StyleSheet.getKeyword(editorCell).apply(editorCell);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConceptProperty_2334_0_internal(EditorContext context, SNode node, CellProviderWithRole provider) {
    EditorCell editorCell = provider.createEditorCell(context);
    editorCell.setCellId("conceptProperty_alias");
    PackagingStyles_StyleSheet.getProjectComponent(editorCell).apply(editorCell);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createConceptProperty_2334_1(EditorContext context, SNode node) {
    CellProviderWithRole provider = new ConceptPropertyCellProvider(node, context);
    provider.setRole("alias");
    provider.setNoTargetText("<no alias>");
    EditorCell cellWithRole = this.createConceptProperty_2334_0_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createRefNode_2334_0_internal(EditorContext context, SNode node, CellProviderWithRole provider) {
    EditorCell editorCell = provider.createEditorCell(context);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode_2334_1(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("pathToBuildToolsZip");
    provider.setNoTargetText("<no pathToBuildToolsZip>");
    EditorCell cellWithRole = this.createRefNode_2334_0_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createRefNode_2334_2_internal(EditorContext context, SNode node, CellProviderWithRole provider) {
    EditorCell editorCell = provider.createEditorCell(context);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode_2334_3(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("licencePath");
    provider.setNoTargetText("<no licencePath>");
    EditorCell cellWithRole = this.createRefNode_2334_2_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }


  public static boolean renderingCondition2334_0(SNode node, EditorContext editorContext, IScope scope) {
    return MPSModuleRepository.getInstance().getLanguage("jetbrains.mps.build.packaging").isPackaged();
  }

}
