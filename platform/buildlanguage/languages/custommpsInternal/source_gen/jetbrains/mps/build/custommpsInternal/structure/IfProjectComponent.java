package jetbrains.mps.build.custommpsInternal.structure;

/*Generated by MPS */

import jetbrains.mps.build.packaging.structure.AbstractProjectComponent;
import jetbrains.mps.build.packaging.structure.IAbstractCompositeComponent;
import jetbrains.mps.build.packaging.structure.ITransparentProjectComponent;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.build.packaging.structure.ICondition;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class IfProjectComponent extends AbstractProjectComponent implements IAbstractCompositeComponent, ITransparentProjectComponent {
  public static final String concept = "jetbrains.mps.build.custommpsInternal.structure.IfProjectComponent";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String CONDITION = "condition";
  public static final String IF_TRUE = "ifTrue";
  public static final String IF_FAULSE = "ifFaulse";

  public IfProjectComponent(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(IfProjectComponent.NAME);
  }

  public void setName(String value) {
    this.setProperty(IfProjectComponent.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(IfProjectComponent.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(IfProjectComponent.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(IfProjectComponent.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(IfProjectComponent.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(IfProjectComponent.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(IfProjectComponent.VIRTUAL_PACKAGE, value);
  }

  public ICondition getCondition() {
    return (ICondition) this.getChild(ICondition.class, IfProjectComponent.CONDITION);
  }

  public void setCondition(ICondition node) {
    super.setChild(IfProjectComponent.CONDITION, node);
  }

  public AbstractProjectComponent getIfTrue() {
    return (AbstractProjectComponent) this.getChild(AbstractProjectComponent.class, IfProjectComponent.IF_TRUE);
  }

  public void setIfTrue(AbstractProjectComponent node) {
    super.setChild(IfProjectComponent.IF_TRUE, node);
  }

  public AbstractProjectComponent getIfFaulse() {
    return (AbstractProjectComponent) this.getChild(AbstractProjectComponent.class, IfProjectComponent.IF_FAULSE);
  }

  public void setIfFaulse(AbstractProjectComponent node) {
    super.setChild(IfProjectComponent.IF_FAULSE, node);
  }

  public static IfProjectComponent newInstance(SModel sm, boolean init) {
    return (IfProjectComponent) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.custommpsInternal.structure.IfProjectComponent", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static IfProjectComponent newInstance(SModel sm) {
    return IfProjectComponent.newInstance(sm, false);
  }
}
