package jetbrains.mps.build.custommpsInternal.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.project.IModule;
import jetbrains.mps.build.packaging.behavior.Module_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import java.io.File;
import jetbrains.mps.util.Macros;
import jetbrains.mps.util.PathManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class MPSModule_Behavior {

  public static void init(SNode thisNode) {
  }

  public static boolean call_isPackaged_1240033962874(SNode thisNode) {
    IModule module = Module_Behavior.call_getModule_1213877515148(thisNode);
    if (module != null) {
      return module.isPackaged();
    }
    return false;
  }

  public static SNode call_createPathFromMPSHome_1240033962895(SNode thisNode) {
    SNode compositePath = SConceptOperations.createNewNode("jetbrains.mps.build.packaging.structure.CompositePathComponent", null);
    IModule module = Module_Behavior.call_getModule_1213877515148(thisNode);
    File moduleHome = module.getBundleHome();
    String relativePath = Macros.mpsHomeMacros().shrinkPath(moduleHome.getAbsolutePath(), new File(PathManager.getHomePath()));
    relativePath = relativePath.substring(relativePath.indexOf("}" + Macros.SEPARATOR_CHAR) + 2);
    SNode pathComponent = SConceptOperations.createNewNode("jetbrains.mps.build.packaging.structure.PathComponent", null);
    SPropertyOperations.set(pathComponent, "path", relativePath);
    SLinkOperations.addChild(compositePath, "pathComponent", pathComponent);
    return compositePath;
  }

}
