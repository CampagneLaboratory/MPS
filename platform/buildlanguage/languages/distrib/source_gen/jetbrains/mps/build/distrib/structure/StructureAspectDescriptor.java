package jetbrains.mps.build.distrib.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.StructureDescriptor;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.structure.ConceptRegistry;

public class StructureAspectDescriptor extends DescriptorProvider<StructureDescriptor> {
  public StructureAspectDescriptor() {
  }

  public StructureDescriptor getDescriptor(String conceptFqName) {
    int hash = conceptFqName.hashCode();
    if (hash == 1656771275) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.build.distrib.structure.DistribConfiguration", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.build.packaging.structure.IVariableHolder", "jetbrains.mps.build.packaging.structure.IMacroHolder");
    }
    if (hash == -575647101) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.build.distrib.structure.ClassPath", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == 699866337) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.build.distrib.structure.AbstractPath", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -1792201487) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.build.distrib.structure.SimplePath", "jetbrains.mps.build.distrib.structure.AbstractPath");
    }
    if (hash == -1453554019) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.build.distrib.structure.SystemSpecificConfig", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -1035379349) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.build.distrib.structure.WindowsConfig", "jetbrains.mps.build.distrib.structure.SystemSpecificConfig");
    }
    if (hash == -1687721549) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.build.distrib.structure.UniversalConfig", "jetbrains.mps.build.distrib.structure.SystemSpecificConfig");
    }
    if (hash == 997126221) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.build.distrib.structure.DigitalSignatureWindowsConfiguration", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -1583026122) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.build.distrib.structure.AbstractCommandLinePart", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == 581017063) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.build.distrib.structure.StringCommandLinePart", "jetbrains.mps.build.distrib.structure.AbstractCommandLinePart");
    }
    if (hash == -1525950445) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.build.distrib.structure.ArtifactReferenceCommandLinePart", "jetbrains.mps.build.distrib.structure.AbstractCommandLinePart");
    }
    if (hash == 1231612471) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.build.distrib.structure.MacConfig", "jetbrains.mps.build.distrib.structure.SystemSpecificConfig");
    }
    if (hash == 1472406634) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.build.distrib.structure.ExternalVariableReference", "jetbrains.mps.buildlanguage.structure.PropertyValueExpression", "jetbrains.mps.build.packaging.structure.IStringExpression");
    }
    if (hash == 1298311595) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.build.distrib.structure.FileAssociation", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept");
    }
    if (hash == 1372736716) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.build.distrib.structure.MacOsFileAssociation", "jetbrains.mps.build.distrib.structure.FileAssociation");
    }
    if (hash == -1304965136) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.build.distrib.structure.Role", "jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept");
    }
    if (hash == 380934371) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.build.distrib.structure.PathCommantLinePart", "jetbrains.mps.build.distrib.structure.AbstractCommandLinePart");
    }
    if (hash == 627527396) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.build.distrib.structure.UnixConfig", "jetbrains.mps.build.distrib.structure.SystemSpecificConfig");
    }
    return null;
  }

  public static class DataBasedStructureDescriptor extends StructureDescriptor {
    private ImmutableList<String> parents;
    private ImmutableSet<String> ancestors;

    public DataBasedStructureDescriptor(String fqName, String... parents) {
      this.parents = ImmutableList.copyOf(parents);
      this.ancestors = getAncestors(fqName, parents);
    }

    public Set<String> getAncestorsNames() {
      return ancestors;
    }

    public boolean isAssignableTo(String toConceptFqName) {
      return ancestors.contains(toConceptFqName);
    }

    public List<String> getParentsNames() {
      return parents;
    }

    private static ImmutableSet<String> getAncestors(String conceptFqName, String... parents) {
      List<String> result = new ArrayList();

      result.add(conceptFqName);
      ConceptRegistry registry = ConceptRegistry.getInstance();
      for (String parent : parents) {
        result.addAll(registry.getStructureDescriptor(parent).getAncestorsNames());
      }
      return ImmutableSet.copyOf(result);
    }
  }
}
