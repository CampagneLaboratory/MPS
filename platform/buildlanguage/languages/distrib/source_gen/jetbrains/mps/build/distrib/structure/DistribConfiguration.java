package jetbrains.mps.build.distrib.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.build.packaging.structure.Configuration;
import jetbrains.mps.build.packaging.structure.Folder;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class DistribConfiguration extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.build.distrib.structure.DistribConfiguration";
  public static final String STARTUP_CLASS = "startupClass";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String BUILD_SCRIPT_CONFIGURATION = "buildScriptConfiguration";
  public static final String PROJECT_FOLDER = "projectFolder";
  public static final String CLASS_PATH = "classPath";
  public static final String SYSTEM_SPECIFIC_CONFIG = "systemSpecificConfig";

  public DistribConfiguration(SNode node) {
    super(node);
  }

  public String getStartupClass() {
    return this.getProperty(DistribConfiguration.STARTUP_CLASS);
  }

  public void setStartupClass(String value) {
    this.setProperty(DistribConfiguration.STARTUP_CLASS, value);
  }

  public String getName() {
    return this.getProperty(DistribConfiguration.NAME);
  }

  public void setName(String value) {
    this.setProperty(DistribConfiguration.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(DistribConfiguration.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(DistribConfiguration.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(DistribConfiguration.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(DistribConfiguration.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(DistribConfiguration.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(DistribConfiguration.VIRTUAL_PACKAGE, value);
  }

  public Configuration getBuildScriptConfiguration() {
    return (Configuration)this.getReferent(DistribConfiguration.BUILD_SCRIPT_CONFIGURATION);
  }

  public void setBuildScriptConfiguration(Configuration node) {
    super.setReferent(DistribConfiguration.BUILD_SCRIPT_CONFIGURATION, node);
  }

  public Folder getProjectFolder() {
    return (Folder)this.getReferent(DistribConfiguration.PROJECT_FOLDER);
  }

  public void setProjectFolder(Folder node) {
    super.setReferent(DistribConfiguration.PROJECT_FOLDER, node);
  }

  public ClassPath getClassPath() {
    return (ClassPath)this.getChild(DistribConfiguration.CLASS_PATH);
  }

  public void setClassPath(ClassPath node) {
    super.setChild(DistribConfiguration.CLASS_PATH, node);
  }

  public int getSystemSpecificConfigsCount() {
    return this.getChildCount(DistribConfiguration.SYSTEM_SPECIFIC_CONFIG);
  }

  public Iterator<SystemSpecificConfig> systemSpecificConfigs() {
    return this.children(DistribConfiguration.SYSTEM_SPECIFIC_CONFIG);
  }

  public List<SystemSpecificConfig> getSystemSpecificConfigs() {
    return this.getChildren(DistribConfiguration.SYSTEM_SPECIFIC_CONFIG);
  }

  public void addSystemSpecificConfig(SystemSpecificConfig node) {
    this.addChild(DistribConfiguration.SYSTEM_SPECIFIC_CONFIG, node);
  }

  public void insertSystemSpecificConfig(SystemSpecificConfig prev, SystemSpecificConfig node) {
    this.insertChild(prev, DistribConfiguration.SYSTEM_SPECIFIC_CONFIG, node);
  }


  public static DistribConfiguration newInstance(SModel sm, boolean init) {
    return (DistribConfiguration)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.build.distrib.structure.DistribConfiguration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static DistribConfiguration newInstance(SModel sm) {
    return DistribConfiguration.newInstance(sm, false);
  }

}
