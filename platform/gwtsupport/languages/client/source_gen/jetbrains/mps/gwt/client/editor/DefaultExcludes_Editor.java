package jetbrains.mps.gwt.client.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cellMenu.CompositeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.BasicCellContext;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteInfoPart;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.ConceptPropertyCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.editor.generator.internal.AbstractCellMenuPart_Generic_Item;
import jetbrains.mps.smodel.SModel;

public class DefaultExcludes_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_7362_0(editorContext, node);
  }

  private EditorCell createAlternation_7362_0(EditorContext editorContext, SNode node) {
    boolean alternationCondition = true;
    alternationCondition = DefaultExcludes_Editor.renderingCondition7362_0(node, editorContext, editorContext.getOperationContext().getScope());
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = this.createConstant_7362_1(editorContext, node);
    } else {
      editorCell = this.createConstant_7362_2(editorContext, node);
    }
    editorCell.setSubstituteInfo(new CompositeSubstituteInfo(editorContext, new BasicCellContext(node), new SubstituteInfoPart[]{new DefaultExcludes_Editor.DefaultExcludes_generic_cellMenu0(),new DefaultExcludes_Editor.DefaultExcludes_generic_cellMenu1()}));
    return editorCell;
  }

  private EditorCell createCollection_7362_0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_7362_0");
    editorCell.addEditorCell(this.createConceptProperty_7362_0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_7362_0(editorContext, node));
    editorCell.addEditorCell(this.createAlternation_7362_0(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_7362_0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "=");
    editorCell.setCellId("Constant_7362_0");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_7362_1(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "yes");
    editorCell.setCellId("Constant_7362_1");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_7362_2(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "no");
    editorCell.setCellId("Constant_7362_2");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConceptProperty_7362_0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new ConceptPropertyCellProvider(node, editorContext);
    provider.setRole("alias");
    provider.setNoTargetText("<no alias>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("conceptProperty_alias");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  private static boolean renderingCondition7362_0(SNode node, EditorContext editorContext, IScope scope) {
    return SPropertyOperations.getBoolean(node, "value");
  }

  public static class DefaultExcludes_generic_cellMenu0 extends AbstractCellMenuPart_Generic_Item {
    public DefaultExcludes_generic_cellMenu0() {
    }

    public void handleAction(SNode node, SModel model, IScope scope, IOperationContext operationContext) {
      SPropertyOperations.set(node, "value", "" + true);
    }

    public String getMatchingText() {
      return "yes";
    }
  }

  public static class DefaultExcludes_generic_cellMenu1 extends AbstractCellMenuPart_Generic_Item {
    public DefaultExcludes_generic_cellMenu1() {
    }

    public void handleAction(SNode node, SModel model, IScope scope, IOperationContext operationContext) {
      SPropertyOperations.set(node, "value", "" + false);
    }

    public String getMatchingText() {
      return "no";
    }
  }
}
