package jetbrains.mps.gwt.client.stubs;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import java.io.File;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.io.InputStream;
import java.io.IOException;
import jetbrains.mps.vfs.IFileNameFilter;
import jetbrains.mps.vfs.FileSystemFile;
import java.io.OutputStream;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;

public abstract class PathItem {
  private static List<String> EMPTY_LIST = ListSequence.fromList(new ArrayList<String>());

  private IFile file;

  public PathItem(String path) {
    IFile container = null;
    for (String p : path.split("!")) {
      if (container == null) {
        container = FileSystem.getFile((this.isJar(p) ?
          p + "!/" :
          p
        ));
      } else {
        File cf = asFile(FileSystem.getFile(container.getAbsolutePath() + p));
        // '!' would have been added by JarFileEntryFile 
        container = FileSystem.getFile(cf.getPath() + "!/");
        // can't simply pass a file, must be a path with a '!' at the end 
      }
    }
    this.file = container;
  }

  public List<String> subpackages(final String pkg) {
    if (!(this.file.exists())) {
      return PathItem.EMPTY_LIST;
    }
    IFile fld = this.packageToFile(pkg);
    if (fld == null) {
      return PathItem.EMPTY_LIST;
    }
    List<IFile> lst = fld.list();
    return ListSequence.fromList(lst).where(new IWhereFilter<IFile>() {
      public boolean accept(IFile f) {
        return f.isDirectory();
      }
    }).select(new ISelector<IFile, String>() {
      public String select(IFile dir) {
        return PathItem.this.compose(pkg, dir.getName());
      }
    }).toListSequence();
  }

  public List<String> resources(String pkg) {
    if (!(this.file.exists())) {
      return PathItem.EMPTY_LIST;
    }
    IFile fld = this.packageToFile(pkg);
    if (fld == null) {
      return PathItem.EMPTY_LIST;
    }
    List<IFile> lst = fld.list(this.filter());
    return ListSequence.fromList(lst).select(new ISelector<IFile, String>() {
      public String select(IFile f) {
        return (String) f.getName();
      }
    }).toListSequence();
  }

  public InputStream openResource(String pkg, final String resName) throws IOException {
    if (!(this.file.exists())) {
      throw new IOException();
    }
    IFile fld = this.packageToFile(pkg);
    if (fld == null) {
      throw new IOException();
    }
    List<IFile> lst = fld.list();
    IFile file = ListSequence.fromList(lst).findFirst(new IWhereFilter<IFile>() {
      public boolean accept(IFile f) {
        return resName.equals(f.getName()) && f.isFile();
      }
    });
    if (file == null) {
      throw new IOException();
    }
    return file.openInputStream();
  }

  protected abstract IFileNameFilter filter();

  public abstract String baseName(String res);

  private IFile packageToFile(String pkg) {
    if (pkg.length() == 0) {
      return this.file;
    }
    IFile fld = this.file;
    for (final String p : pkg.split("\\.")) {
      if (p.length() == 0) {
        continue;
      }
      List<IFile> lst = fld.list();
      fld = ListSequence.fromList(lst).findFirst(new IWhereFilter<IFile>() {
        public boolean accept(IFile f) {
          return p.equals(f.getName()) && f.isDirectory();
        }
      });
      if (fld == null) {
        break;
      }
    }
    return fld;
  }

  private String compose(String pkg, String name) {
    return (pkg.length() == 0 ?
      name :
      pkg + "." + name
    );
  }

  public boolean isJar(String path) {
    return path.endsWith(".jar") || path.endsWith(".JAR");
  }

  private static File asFile(IFile ifile) {
    if (ifile instanceof FileSystemFile) {
      return ((FileSystemFile) ifile).getFile();
    }
    OutputStream os = null;
    InputStream is = null;
    try {
      File tmpFile = File.createTempFile(ifile.getName(), "tmp");
      tmpFile.deleteOnExit();
      is = new BufferedInputStream(ifile.openInputStream());
      os = new BufferedOutputStream(new FileOutputStream(tmpFile));
      int c;
      while ((c = is.read()) != -1) {
        os.write(c);
      }
      return tmpFile;
    } catch (IOException ex) {
      throw new RuntimeException(ex);
    } finally {
      try {
        if (is != null) {
          is.close();
        }
      } catch (IOException ignore) {
      }
      try {
        if (os != null) {
          os.close();
        }
      } catch (IOException ignore) {
      }
    }
  }
}
