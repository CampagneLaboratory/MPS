package webr.xml.constraints;

/*Generated by MPS  */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.INodeReferentSearchScopeProvider;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.search.ISearchScope;
import java.util.List;
import webr.xml.util.ElementUtil;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import jetbrains.mps.smodel.search.SModelSearchUtil_new;
import jetbrains.mps.smodel.search.SimpleSearchScope;

public class Element_elementDeclaration_ReferentConstraint implements IModelConstraints, INodeReferentSearchScopeProvider {

  public  Element_elementDeclaration_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("webr.xml.structure.Element", "elementDeclaration", this);
  }
  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("webr.xml.structure.Element", "elementDeclaration");
  }
  public boolean canCreateNodeReferentSearchScope(SModel model, SNode enclosingNode, SNode referenceNode, IScope scope) {
    SNode baseElement = SNodeOperations.getAncestor(enclosingNode, "webr.xml.structure.BaseElement", false, false);
    return baseElement == null || SNodeOperations.isInstanceOf(baseElement, "webr.xml.structure.Element");
  }
  public ISearchScope createNodeReferentSearchScope(SModel model, SNode enclosingNode, SNode referenceNode, IScope scope) {
    ISearchScope searchScope;
    SNode knownElement = SNodeOperations.getAncestor(enclosingNode, "webr.xml.structure.Element", false, false);
    List<SNode> elementDeclarations = ElementUtil.getElementDeclarations(knownElement, enclosingNode);
    if(SequenceOperations.isEmpty(elementDeclarations)) {
      searchScope = SModelSearchUtil_new.createModelAndImportedModelsScope(model, scope);
    } else 
    {
      searchScope = new SimpleSearchScope(elementDeclarations);
    }
    return searchScope;
  }
  public String getNodeReferentSearchScopeDescription() {
    return "<no description>";
  }
}
