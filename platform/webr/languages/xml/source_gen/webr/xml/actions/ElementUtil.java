package webr.xml.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.ICursor;
import jetbrains.mps.baseLanguage.ext.collections.internal.CursorFactory;

public class ElementUtil {

  public static SNode getParentElement(SNode node) {
    SNode elementDeclaration = null;
    while(true) {
      if((node == null)) {
        break;
      }
      if(SNodeOperations.isInstanceOf(node, "webr.xml.structure.Element")) {
        elementDeclaration = SLinkOperations.getTarget(node, "elementDeclaration", false);
        break;
      }
      if(SNodeOperations.isInstanceOf(node, "webr.xml.structure.Content")) {
        SNode content = node;
        elementDeclaration = SequenceOperations.getFirst(SLinkOperations.getConceptLinkTargets(content, "elementForChildren"));
        if((elementDeclaration != null)) {
          break;
        }
        elementDeclaration = SequenceOperations.getFirst(SLinkOperations.getConceptLinkTargets(content, "correspondingElement"));
        if((elementDeclaration != null)) {
          break;
        }
      }
      node = SNodeOperations.getParent(node, null, false, false);
    }
    return elementDeclaration;
  }
  public static SNode findSchema(SNode node) {
    SNode schema = null;
    SNode element = SNodeOperations.getAncestor(node, "webr.xml.structure.Element", true, false);
    if((element == null)) {
      SNode containingRoot = SNodeOperations.getContainingRoot(node);
      if(SNodeOperations.isInstanceOf(containingRoot, "webr.xmlInternal.structure.XmlFile")) {
        schema = SLinkOperations.getTarget(containingRoot, "schema", false);
      }
    } else
    {
      schema = SNodeOperations.getAncestor(SLinkOperations.getTarget(element, "elementDeclaration", false), "webr.xmlSchema.structure.Schema", false, false);
    }
    return schema;
  }
  public static List<SNode> getElementDeclarations(SNode schema, SNode elementDeclaration) {
    List<SNode> elementDeclarations = new ArrayList<SNode>();
    if((elementDeclaration == null)) {
      if((schema != null) && SPropertyOperations.getBoolean(schema, "alwaysUseRoot")) {
        ListOperations.addElement(elementDeclarations, SLinkOperations.getTarget(SLinkOperations.getTarget(schema, "rootElementReference", true), "elementDeclaration", false));
      }
    } else
    {
    }
    return elementDeclarations;
  }
  public static void checkElement(List<SNode> elementDeclarations, SNode elementDeclaration) {
    if(SNodeOperations.isInstanceOf(elementDeclaration, "webr.xmlSchema.structure.ElementWithContent")) {
      SNode elementWithContent = elementDeclaration;
      ElementUtil.checkComplexType(elementDeclarations, SLinkOperations.getTarget(elementWithContent, "complexType", true));
    } else
    if(SNodeOperations.isInstanceOf(elementDeclaration, "webr.xmlSchema.structure.ElementWithType")) {
      SNode elementWithType = elementDeclaration;
      ElementUtil.checkComplexTypeReference(elementDeclarations, SLinkOperations.getTarget(elementWithType, "complexTypeReference", true));
    }
  }
  public static void checkComplexType(List<SNode> elementDeclarations, SNode complexType) {
    if((complexType != null)) {
      ElementUtil.checkTypeExpressionList(elementDeclarations, SLinkOperations.getTarget(complexType, "typeExpressionList", true));
    }
  }
  public static void checkComplexTypeReference(List<SNode> elementDeclarations, SNode complexTypeReference) {
    ElementUtil.checkComplexType(elementDeclarations, SLinkOperations.getTarget(complexTypeReference, "complextType", false));
  }
  public static void checkTypeExpressionList(List<SNode> elementDeclarations, SNode typeExpressionList) {
    List<SNode> typeExpressions = SLinkOperations.getTargets(typeExpressionList, "typeExpression", true);
    {
      ICursor<SNode> _zCursor = CursorFactory.createCursor(typeExpressions);
      try {
        while(_zCursor.moveToNext()) {
          SNode typeExpression = _zCursor.getCurrent();
          ElementUtil.checkTypeExpression(elementDeclarations, typeExpression);
        }
      } finally {
        _zCursor.release();
      }
    }
  }
  public static void checkTypeExpression(List<SNode> elementDeclarations, SNode typeExpression) {
  }
}
