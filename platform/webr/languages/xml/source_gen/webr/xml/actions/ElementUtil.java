package webr.xml.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.SequenceOperations;
import webr.xmlInternal.constraints.IContentRoot_Behavior;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import webr.xmlSchema.constraints.ElementDeclaration_Behavior;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;

public class ElementUtil {

  public static SNode getParentElement(SNode node) {
    SNode elementDeclaration = null;
    SNode currentNode = node;
    while(true) {
      if((currentNode == null)) {
        break;
      }
      if(SNodeOperations.isInstanceOf(currentNode, "webr.xml.structure.Element")) {
        elementDeclaration = SLinkOperations.getTarget(currentNode, "elementDeclaration", false);
        break;
      }
      if(SNodeOperations.isInstanceOf(currentNode, "webr.xml.structure.Content")) {
        SNode content = currentNode;
        elementDeclaration = SequenceOperations.getFirst(SLinkOperations.getConceptLinkTargets(content, "elementForChildren"));
        if((elementDeclaration != null)) {
          break;
        }
        elementDeclaration = SequenceOperations.getFirst(SLinkOperations.getConceptLinkTargets(content, "correspondingElement"));
        if((elementDeclaration != null)) {
          break;
        }
      }
      currentNode = SNodeOperations.getParent(currentNode, null, false, false);
    }
    if((elementDeclaration == null)) {
      SNode containingRoot = SNodeOperations.getContainingRoot(node);
      if(SNodeOperations.isInstanceOf(containingRoot, "webr.xmlInternal.structure.IContentRoot")) {
        SNode contentRoot = containingRoot;
        elementDeclaration = IContentRoot_Behavior.callVirtual_getElementDeclaration_1183736275398(contentRoot);
      }
    }
    return elementDeclaration;
  }
  public static SNode findSchema(SNode node) {
    SNode schema = null;
    SNode element = SNodeOperations.getAncestor(node, "webr.xml.structure.Element", true, false);
    if((element == null)) {
      SNode containingRoot = SNodeOperations.getContainingRoot(node);
      if(SNodeOperations.isInstanceOf(containingRoot, "webr.xmlInternal.structure.XmlFile")) {
        schema = SLinkOperations.getTarget(containingRoot, "schema", false);
      }
    } else
    {
      schema = SNodeOperations.getAncestor(SLinkOperations.getTarget(element, "elementDeclaration", false), "webr.xmlSchema.structure.Schema", false, false);
    }
    return schema;
  }
  public static List<SNode> getElementDeclarations(SNode elementDeclaration, SNode node) {
    SNode schema = ElementUtil.findSchema(node);
    Set elementDeclarationSet = new HashSet();
    if((elementDeclaration == null)) {
      if((schema != null) && SPropertyOperations.getBoolean(schema, "alwaysUseRoot")) {
        elementDeclarationSet.add(SLinkOperations.getTarget(SLinkOperations.getTarget(schema, "rootElementReference", true), "elementDeclaration", false));
      }
    } else
    {
      ElementDeclaration_Behavior.checkElements_ed_1183596572563(elementDeclaration, elementDeclarationSet);
    }
    List<SNode> elementDeclarations = new ArrayList<SNode>();
    ListOperations.addAllElements(elementDeclarations, elementDeclarationSet);
    return elementDeclarations;
  }
}
