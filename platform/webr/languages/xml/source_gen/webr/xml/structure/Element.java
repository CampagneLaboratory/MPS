package webr.xml.structure;

/*Generated by MPS */

import webr.xml.structure.Content;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import webr.xml.structure.ContentList;
import webr.xml.structure.ElementDeclarationReference;
import java.util.Iterator;
import webr.xml.structure.BaseAttribute;
import java.util.List;
import webr.xmlSchema.structure.ElementDeclaration;

public class Element extends Content {
  public static String CONTENT_LIST = "contentList";
  public static String ELEMENT_DECLARATION_REFERENCE = "elementDeclarationReference";
  public static String ATTRIBUTE = "attribute";
  public static String IS_EMPTY = "isEmpty";
  public static String ELEMENT_DECLARATION = "elementDeclaration";

  public  Element(SNode node) {
    super(node);
  }

  public static Element newInstance(SModel sm, boolean init) {
    return (Element)SModelUtil_new.instantiateConceptDeclaration("webr.xml.Element", sm, GlobalScope.getInstance(), init).getAdapter();
  }
  public static Element newInstance(SModel sm) {
    return Element.newInstance(sm, false);
  }

  public ContentList getContentList() {
    return (ContentList)this.getChild(Element.CONTENT_LIST);
  }
  public void setContentList(ContentList node) {
    super.setChild(Element.CONTENT_LIST, node);
  }
  public ElementDeclarationReference getElementDeclarationReference() {
    return (ElementDeclarationReference)this.getChild(Element.ELEMENT_DECLARATION_REFERENCE);
  }
  public void setElementDeclarationReference(ElementDeclarationReference node) {
    super.setChild(Element.ELEMENT_DECLARATION_REFERENCE, node);
  }
  public int getAttributesCount() {
    return this.getChildCount(Element.ATTRIBUTE);
  }
  public Iterator<BaseAttribute> attributes() {
    return this.children(Element.ATTRIBUTE);
  }
  public List<BaseAttribute> getAttributes() {
    return this.getChildren(Element.ATTRIBUTE);
  }
  public void addAttribute(BaseAttribute node) {
    this.addChild(Element.ATTRIBUTE, node);
  }
  public void insertAttribute(BaseAttribute prev, BaseAttribute node) {
    this.insertChild(prev, Element.ATTRIBUTE, node);
  }
  public boolean getIsEmpty() {
    return this.getBooleanProperty(Element.IS_EMPTY);
  }
  public void setIsEmpty(boolean value) {
    this.setBooleanProperty(Element.IS_EMPTY, value);
  }
  public ElementDeclaration getElementDeclaration() {
    return (ElementDeclaration)this.getReferent(Element.ELEMENT_DECLARATION);
  }
  public void setElementDeclaration(ElementDeclaration node) {
    super.setReferent(Element.ELEMENT_DECLARATION, node);
  }
}
