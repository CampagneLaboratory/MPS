package jetbrains.mps.baseLanguage.logging.generator.baseLanguage.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.baseLanguage.logging.generator.baseLanguage.template.util.LoggingGenerationUtil;
import jetbrains.mps.generator.template.WeavingMappingRuleContext;

public class QueriesGenerated {

  public static boolean baseMappingRule_Condition_1169464530672(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return ListSequence.fromList(SNodeOperations.getDescendants(_context.getNode(), "jetbrains.mps.baseLanguage.logging.structure.LogStatement", false)).isNotEmpty();
  }

  public static boolean baseMappingRule_Condition_1210168710480(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SPropertyOperations.hasValue(_context.getNode(), "severity", "fatal", "debug");
  }

  public static boolean baseMappingRule_Condition_1210168774349(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SPropertyOperations.hasValue(_context.getNode(), "severity", "error", "debug");
  }

  public static boolean baseMappingRule_Condition_1210168776377(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SPropertyOperations.hasValue(_context.getNode(), "severity", "warn", "debug");
  }

  public static boolean baseMappingRule_Condition_1210168778612(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SPropertyOperations.hasValue(_context.getNode(), "severity", "debug", "debug");
  }

  public static boolean baseMappingRule_Condition_1210168779832(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SPropertyOperations.hasValue(_context.getNode(), "severity", "info", "debug");
  }

  public static boolean baseMappingRule_Condition_1210168780744(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SPropertyOperations.hasValue(_context.getNode(), "severity", "trace", "debug");
  }

  public static Object referenceMacro_GetReferent_1169471975875(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    SNode method = null;
    if (SPropertyOperations.hasValue(_context.getNode(), "severity", "fatal", "debug")) {
      method = SLinkOperations.getTarget(new QuotationClass_0().createNode(), "baseMethodDeclaration", false);
    } else if (SPropertyOperations.hasValue(_context.getNode(), "severity", "error", "debug")) {
      method = SLinkOperations.getTarget(new QuotationClass_1().createNode(), "baseMethodDeclaration", false);
    } else if (SPropertyOperations.hasValue(_context.getNode(), "severity", "warn", "debug")) {
      method = SLinkOperations.getTarget(new QuotationClass_2().createNode(), "baseMethodDeclaration", false);
    } else if (SPropertyOperations.hasValue(_context.getNode(), "severity", "debug", "debug")) {
      method = SLinkOperations.getTarget(new QuotationClass_3().createNode(), "baseMethodDeclaration", false);
    } else if (SPropertyOperations.hasValue(_context.getNode(), "severity", "info", "debug")) {
      method = SLinkOperations.getTarget(new QuotationClass_4().createNode(), "baseMethodDeclaration", false);
    } else if (SPropertyOperations.hasValue(_context.getNode(), "severity", "trace", "debug")) {
      method = SLinkOperations.getTarget(new QuotationClass_5().createNode(), "baseMethodDeclaration", false);
    }
    return method;
  }

  public static Object referenceMacro_GetReferent_1210169044888(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(ListSequence.fromList(SNodeOperations.getAncestors(_context.getNode(), "jetbrains.mps.baseLanguage.structure.ClassConcept", false)).last(), "logFieldDeclaration");
  }

  public static Object referenceMacro_GetReferent_1210169054074(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(ListSequence.fromList(SNodeOperations.getAncestors(_context.getNode(), "jetbrains.mps.baseLanguage.structure.ClassConcept", false)).last(), "logFieldDeclaration");
  }

  public static SNode sourceNodeQuery_1168402886104(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return LoggingGenerationUtil.toPlus(SLinkOperations.getTargets(_context.getNode(), "textExpression", true));
  }

  public static SNode sourceNodeQuery_1169467171807(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "logExpression", true);
  }

  public static SNode sourceNodeQuery_1217888364925(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "exception", true);
  }

  public static SNode weaving_MappingRule_ContextNodeQuery_1187224198430(final IOperationContext opereationContext, final WeavingMappingRuleContext _context) {
    SNode outputNode = _context.getCopiedOutputNodeForInputNode(_context.getNode());
    if (outputNode == null) {
      _context.showErrorMessage(_context.getNode(), "Can't find copy of the class concept in the target model");
    }
    return outputNode;
  }

}
