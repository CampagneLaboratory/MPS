package jetbrains.mpslite.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.BehaviorDescriptor;
import java.util.Arrays;

public class BehaviorAspectDescriptor extends DescriptorProvider<BehaviorDescriptor> {
  private static String[] stringSwitchCases_846f5o_a0a0a = new String[]{"jetbrains.mpslite.structure.AbstractConceptReference", "jetbrains.mpslite.structure.BinaryOperationConcept", "jetbrains.mpslite.structure.BlockBodyPart", "jetbrains.mpslite.structure.BlockConcept", "jetbrains.mpslite.structure.BlockReference", "jetbrains.mpslite.structure.ChildPart", "jetbrains.mpslite.structure.ConceptContainer", "jetbrains.mpslite.structure.ConcreteChildPart", "jetbrains.mpslite.structure.ConcretePropertyPart", "jetbrains.mpslite.structure.ConcreteReferencePart", "jetbrains.mpslite.structure.ConstantLinePart", "jetbrains.mpslite.structure.ExpressionConcept", "jetbrains.mpslite.structure.FeatureAccessConcept", "jetbrains.mpslite.structure.IMPSLiteConcept", "jetbrains.mpslite.structure.IndentLinePart", "jetbrains.mpslite.structure.Line", "jetbrains.mpslite.structure.LineList", "jetbrains.mpslite.structure.LinePart", "jetbrains.mpslite.structure.MPSLiteConceptDeclaration", "jetbrains.mpslite.structure.MPSLiteConceptReference", "jetbrains.mpslite.structure.NamePropertyNamePart", "jetbrains.mpslite.structure.OptionalPart", "jetbrains.mpslite.structure.PropertyPart", "jetbrains.mpslite.structure.ReferencePart", "jetbrains.mpslite.structure.RegularConceptReference", "jetbrains.mpslite.structure.StatementConcept", "jetbrains.mpslite.structure.TypePart", "jetbrains.mpslite.structure.VariableConcept"};

  public BehaviorAspectDescriptor() {
  }

  public BehaviorDescriptor getDescriptor(String fqName) {
    switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0a, fqName)) {
      case 15:
        return new Line_BehaviorDescriptor();
      case 17:
        // interface or abstract concept behavior jetbrains.mpslite.structure.LinePart 
        return null;
      case 10:
        return new ConstantLinePart_BehaviorDescriptor();
      case 14:
        return new IndentLinePart_BehaviorDescriptor();
      case 9:
        return new ConcreteReferencePart_BehaviorDescriptor();
      case 5:
        // interface or abstract concept behavior jetbrains.mpslite.structure.ChildPart 
        return null;
      case 21:
        return new OptionalPart_BehaviorDescriptor();
      case 7:
        return new ConcreteChildPart_BehaviorDescriptor();
      case 23:
        // interface or abstract concept behavior jetbrains.mpslite.structure.ReferencePart 
        return null;
      case 18:
        return new MPSLiteConceptDeclaration_BehaviorDescriptor();
      case 16:
        return new LineList_BehaviorDescriptor();
      case 22:
        // interface or abstract concept behavior jetbrains.mpslite.structure.PropertyPart 
        return null;
      case 8:
        return new ConcretePropertyPart_BehaviorDescriptor();
      case 0:
        // interface or abstract concept behavior jetbrains.mpslite.structure.AbstractConceptReference 
        return null;
      case 19:
        return new MPSLiteConceptReference_BehaviorDescriptor();
      case 24:
        return new RegularConceptReference_BehaviorDescriptor();
      case 13:
        // interface or abstract concept behavior jetbrains.mpslite.structure.IMPSLiteConcept 
        return null;
      case 1:
        return new BinaryOperationConcept_BehaviorDescriptor();
      case 12:
        return new FeatureAccessConcept_BehaviorDescriptor();
      case 27:
        return new VariableConcept_BehaviorDescriptor();
      case 20:
        return new NamePropertyNamePart_BehaviorDescriptor();
      case 26:
        return new TypePart_BehaviorDescriptor();
      case 6:
        return new ConceptContainer_BehaviorDescriptor();
      case 25:
        return new StatementConcept_BehaviorDescriptor();
      case 11:
        return new ExpressionConcept_BehaviorDescriptor();
      case 3:
        return new BlockConcept_BehaviorDescriptor();
      case 2:
        return new BlockBodyPart_BehaviorDescriptor();
      case 4:
        return new BlockReference_BehaviorDescriptor();
      default:
        return null;
    }
  }
}
