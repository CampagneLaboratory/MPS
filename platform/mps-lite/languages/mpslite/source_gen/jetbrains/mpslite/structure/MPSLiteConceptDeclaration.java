package jetbrains.mpslite.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.Attribute;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class MPSLiteConceptDeclaration extends BaseConcept implements IMPSLiteConcept {
  public static final String concept = "jetbrains.mpslite.structure.MPSLiteConceptDeclaration";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String ROOT = "root";
  public static final String ABSTRACT = "abstract";
  public static final String LINE_LIST = "lineList";
  public static final String EXTENDS = "extends";
  public static final String _$ATTRIBUTE = "_$attribute";

  public MPSLiteConceptDeclaration(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(MPSLiteConceptDeclaration.NAME);
  }

  public void setName(String value) {
    this.setProperty(MPSLiteConceptDeclaration.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(MPSLiteConceptDeclaration.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(MPSLiteConceptDeclaration.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(MPSLiteConceptDeclaration.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(MPSLiteConceptDeclaration.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(MPSLiteConceptDeclaration.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(MPSLiteConceptDeclaration.VIRTUAL_PACKAGE, value);
  }

  public boolean getRoot() {
    return this.getBooleanProperty(MPSLiteConceptDeclaration.ROOT);
  }

  public void setRoot(boolean value) {
    this.setBooleanProperty(MPSLiteConceptDeclaration.ROOT, value);
  }

  public boolean getAbstract() {
    return this.getBooleanProperty(MPSLiteConceptDeclaration.ABSTRACT);
  }

  public void setAbstract(boolean value) {
    this.setBooleanProperty(MPSLiteConceptDeclaration.ABSTRACT, value);
  }

  public LineList getLineList() {
    return (LineList) this.getChild(LineList.class, MPSLiteConceptDeclaration.LINE_LIST);
  }

  public void setLineList(LineList node) {
    super.setChild(MPSLiteConceptDeclaration.LINE_LIST, node);
  }

  public AbstractConceptReference getExtends() {
    return (AbstractConceptReference) this.getChild(AbstractConceptReference.class, MPSLiteConceptDeclaration.EXTENDS);
  }

  public void setExtends(AbstractConceptReference node) {
    super.setChild(MPSLiteConceptDeclaration.EXTENDS, node);
  }

  public int get_$attributesCount() {
    return this.getChildCount(MPSLiteConceptDeclaration._$ATTRIBUTE);
  }

  public Iterator<Attribute> _$attributes() {
    return this.children(Attribute.class, MPSLiteConceptDeclaration._$ATTRIBUTE);
  }

  public List<Attribute> get_$attributes() {
    return this.getChildren(Attribute.class, MPSLiteConceptDeclaration._$ATTRIBUTE);
  }

  public void add_$attribute(Attribute node) {
    this.addChild(MPSLiteConceptDeclaration._$ATTRIBUTE, node);
  }

  public void insert_$attribute(Attribute prev, Attribute node) {
    this.insertChild(prev, MPSLiteConceptDeclaration._$ATTRIBUTE, node);
  }

  public static MPSLiteConceptDeclaration newInstance(SModel sm, boolean init) {
    return (MPSLiteConceptDeclaration) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mpslite.structure.MPSLiteConceptDeclaration", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static MPSLiteConceptDeclaration newInstance(SModel sm) {
    return MPSLiteConceptDeclaration.newInstance(sm, false);
  }
}
