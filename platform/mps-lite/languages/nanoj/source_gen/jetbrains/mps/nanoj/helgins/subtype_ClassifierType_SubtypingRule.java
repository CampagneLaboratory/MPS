package jetbrains.mps.nanoj.helgins;

/*Generated by MPS */

import jetbrains.mps.bootstrap.helgins.runtime.SubtypingRule_Runtime;
import jetbrains.mps.bootstrap.helgins.runtime.ISubtypingRule_Runtime;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.baseLanguage.ext.collections.internal.query.ListOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class subtype_ClassifierType_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {

  public  subtype_ClassifierType_SubtypingRule() {
  }

  public List<SNode> getSubOrSuperTypes(SNode type) {
    if(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(type, "classifier", false), "extends", true), "classifier", false) != null) {
      SNode t = SConceptOperations.createNewNode("jetbrains.mps.nanoj.structure.ClassifierType", null);
      SLinkOperations.setTarget(t, "classifier", SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(type, "classifier", false), "extends", true), "classifier", false), false);
      return ListOperations.createList(new SNode[]{t});
    }
    return ListOperations.createList(new SNode[]{});
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.nanoj.structure.ClassifierType";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean isWeak() {
    return false;
  }

}
