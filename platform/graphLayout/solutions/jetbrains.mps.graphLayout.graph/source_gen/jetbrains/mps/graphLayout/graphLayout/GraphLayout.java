package jetbrains.mps.graphLayout.graphLayout;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graph.Graph;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import java.awt.Rectangle;
import jetbrains.mps.graphLayout.graph.Edge;
import java.util.List;
import java.awt.Point;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.graphLayout.util.GeomUtil;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class GraphLayout {
  private Graph myGraph;
  private Map<Node, Rectangle> myNodeLayout;
  private Map<Edge, List<Point>> myEdgeLayout;
  private Map<Edge, Rectangle> myLabelLayout;

  public GraphLayout(Graph graph) {
    myGraph = graph;
    myNodeLayout = MapSequence.fromMap(new HashMap<Node, Rectangle>());
    myEdgeLayout = MapSequence.fromMap(new HashMap<Edge, List<Point>>());
    myLabelLayout = MapSequence.fromMap(new HashMap<Edge, Rectangle>());
  }

  public Map<Node, Rectangle> getNodeLayout() {
    return this.myNodeLayout;
  }

  public void setNodeLayout(Map<Node, Rectangle> nodeLayout) {
    this.myNodeLayout = nodeLayout;
  }

  public Map<Edge, List<Point>> getEdgeLayout() {
    return this.myEdgeLayout;
  }

  public void setEdgeLayout(Map<Edge, List<Point>> edgeLayout) {
    this.myEdgeLayout = edgeLayout;
  }

  public void setLayoutFor(Node node, Rectangle rect) {
    MapSequence.fromMap(myNodeLayout).put(node, rect);
  }

  public Rectangle getLayoutFor(Node node) {
    return MapSequence.fromMap(myNodeLayout).get(node);
  }

  public void setLayoutFor(Edge edge, List<Point> points) {
    MapSequence.fromMap(myEdgeLayout).put(edge, points);
  }

  public List<Point> getLayoutFor(Edge edge) {
    return MapSequence.fromMap(myEdgeLayout).get(edge);
  }

  public void setLabelLayout(Edge edge, Rectangle rectangle) {
    MapSequence.fromMap(myLabelLayout).put(edge, rectangle);
  }

  public Rectangle getLabelLayout(Edge edge) {
    return MapSequence.fromMap(myLabelLayout).get(edge);
  }

  public Map<Edge, Rectangle> getLabelLayout() {
    return myLabelLayout;
  }

  public Graph getGraph() {
    return this.myGraph;
  }

  public void refineEdgeLayout() {
    for (Edge edge : SetSequence.fromSet(MapSequence.fromMap(myEdgeLayout).keySet())) {
      this.shiftEdgeLayoutAlongEndsBorder(edge);
    }
    for (Edge edge : SetSequence.fromSet(MapSequence.fromMap(myEdgeLayout).keySet())) {
      this.removeStraightBends(edge);
    }
  }

  public void removeStraightBends(Edge edge) {
    List<Point> path = MapSequence.fromMap(myEdgeLayout).get(edge);
    boolean ver = ListSequence.fromList(path).getElement(0).x == ListSequence.fromList(path).getElement(1).x;
    int i = 2;
    while (i < ListSequence.fromList(path).count()) {
      boolean curVer = ListSequence.fromList(path).getElement(i - 1).x == ListSequence.fromList(path).getElement(i).x;
      if (curVer == ver) {
        ListSequence.fromList(path).removeElementAt(i - 1);
      } else {
        i++;
        ver = curVer;
      }
    }
  }

  public void shiftEdgeLayoutAlongEndsBorder(Edge edge) {
    Rectangle rect = MapSequence.fromMap(myNodeLayout).get(edge.getSource());
    List<Point> path = MapSequence.fromMap(myEdgeLayout).get(edge);
    Point p = GeomUtil.moveToBorder(rect, ListSequence.fromList(path).getElement(0), ListSequence.fromList(path).getElement(1));
    if (p != null) {
      ListSequence.fromList(path).setElement(0, p);
    }
    rect = MapSequence.fromMap(myNodeLayout).get(edge.getTarget());
    p = GeomUtil.moveToBorder(rect, ListSequence.fromList(path).getElement(ListSequence.fromList(path).count() - 1), ListSequence.fromList(path).getElement(ListSequence.fromList(path).count() - 2));
    if (p != null) {
      ListSequence.fromList(path).setElement(ListSequence.fromList(path).count() - 1, p);
    }
  }

  public Rectangle getContainingRectangle() {
    int minX = Integer.MAX_VALUE;
    int minY = Integer.MAX_VALUE;
    int maxX = Integer.MIN_VALUE;
    int maxY = Integer.MIN_VALUE;
    for (Rectangle rect : Sequence.fromIterable(MapSequence.fromMap(myNodeLayout).values()).concat(Sequence.fromIterable(MapSequence.fromMap(myLabelLayout).values()))) {
      minX = Math.min(minX, rect.x);
      minY = Math.min(minY, rect.y);
      maxX = Math.max(maxX, rect.x + rect.width);
      maxY = Math.max(maxY, rect.x + rect.height);
    }
    for (List<Point> path : Sequence.fromIterable(MapSequence.fromMap(myEdgeLayout).values())) {
      for (Point p : ListSequence.fromList(path)) {
        minX = Math.min(minX, p.x);
        minY = Math.min(minY, p.y);
        maxX = Math.max(maxX, p.x);
        maxY = Math.max(maxY, p.y);
      }
    }
    return new Rectangle(minX, minY, maxX - minX, maxY - minY);
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append("Layout: \n");
    for (Node node : SetSequence.fromSet(MapSequence.fromMap(myNodeLayout).keySet())) {
      builder.append("  for node: " + node + ": " + MapSequence.fromMap(myNodeLayout).get(node) + "\n");
    }
    for (Edge edge : SetSequence.fromSet(MapSequence.fromMap(myEdgeLayout).keySet())) {
      builder.append("  for edge: " + edge + ": " + MapSequence.fromMap(myEdgeLayout).get(edge) + "\n");
    }
    return builder.toString();
  }
}
