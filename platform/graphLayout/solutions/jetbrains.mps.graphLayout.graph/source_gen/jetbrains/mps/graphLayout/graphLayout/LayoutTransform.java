package jetbrains.mps.graphLayout.graphLayout;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graph.INode;
import jetbrains.mps.graphLayout.intGeom2D.Rectangle;
import jetbrains.mps.graphLayout.graph.IEdge;
import java.util.List;
import jetbrains.mps.graphLayout.intGeom2D.Point;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.graphLayout.graph.Graph;

public class LayoutTransform {
  public static GraphLayout shift(IGraphLayout layout, int xShift, int yShift) {
    GraphLayout newLayout = new GraphLayout((layout.getGraph()));
    for (INode node : layout.getLayoutedNodes()) {
      Rectangle rect = layout.getNodeLayout(node);
      int newX = rect.x + xShift;
      int newY = rect.y + yShift;
      newLayout.setLayoutFor(node, new Rectangle(newX, newY, rect.width, rect.height));
    }
    for (IEdge edge : layout.getLayoutedEdges()) {
      List<Point> newList = ListSequence.fromList(new ArrayList<Point>());
      for (Point p : Sequence.fromIterable(layout.getEdgeLayout(edge))) {
        ListSequence.fromList(newList).addElement(new Point(p.x + xShift, p.y + yShift));
      }
      newLayout.setLayoutFor(edge, newList);
    }
    for (IEdge edge : layout.getLayoutedLabels()) {
      Rectangle rect = layout.getLabelLayout(edge);
      int newX = rect.x + xShift;
      int newY = rect.y + yShift;
      newLayout.setLabelLayout(edge, new Rectangle(newX, newY, rect.width, rect.height));
    }
    return newLayout;
  }

  public static GraphLayout scale(IGraphLayout layout, double xScale, double yScale) {
    GraphLayout newLayout = new GraphLayout(((Graph) layout.getGraph()));
    for (INode node : layout.getLayoutedNodes()) {
      Rectangle rect = layout.getNodeLayout(node);
      int newX = (int) (rect.x * xScale);
      int newY = (int) (rect.y * yScale);
      int newWidth = (int) (rect.width * xScale);
      int newHeight = (int) (rect.height * yScale);
      newLayout.setLayoutFor(node, new Rectangle(newX, newY, newWidth, newHeight));
    }
    for (IEdge edge : layout.getLayoutedEdges()) {
      List<Point> newList = ListSequence.fromList(new ArrayList<Point>());
      for (Point p : Sequence.fromIterable(layout.getEdgeLayout(edge))) {
        ListSequence.fromList(newList).addElement(new Point((int) (p.x * xScale), (int) (p.y * yScale)));
      }
      newLayout.setLayoutFor(edge, newList);
    }
    for (IEdge edge : layout.getLayoutedLabels()) {
      Rectangle rect = layout.getLabelLayout(edge);
      int newX = (int) (rect.x * xScale);
      int newY = (int) (rect.y * yScale);
      int newWidth = (int) (rect.width * xScale);
      int newHeight = (int) (rect.height * yScale);
      newLayout.setLabelLayout(edge, new Rectangle(newX, newY, newWidth, newHeight));
    }
    return newLayout;
  }
}
