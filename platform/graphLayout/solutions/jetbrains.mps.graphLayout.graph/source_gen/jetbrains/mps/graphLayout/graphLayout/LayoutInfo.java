package jetbrains.mps.graphLayout.graphLayout;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graph.Graph;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.graphLayout.intGeom2D.Dimension;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedHashMap;
import java.util.Set;

public class LayoutInfo {
  private Graph myGraph;
  private Map<Node, Dimension> myNodeSizes;
  private Map<Edge, Dimension> myLabelSizes;

  public LayoutInfo(Graph graph) {
    myGraph = graph;
    myNodeSizes = MapSequence.fromMap(new LinkedHashMap<Node, Dimension>(16, (float) 0.75, false));
    myLabelSizes = MapSequence.fromMap(new LinkedHashMap<Edge, Dimension>(16, (float) 0.75, false));
  }

  public void setNodeSize(Node node, Dimension size) {
    MapSequence.fromMap(myNodeSizes).put(node, size);
  }

  public void setLabelSize(Edge labeledEdge, Dimension size) {
    MapSequence.fromMap(myLabelSizes).put(labeledEdge, size);
  }

  public Dimension getSize(Node node) {
    return MapSequence.fromMap(myNodeSizes).get(node);
  }

  public Dimension getSize(Edge edge) {
    return MapSequence.fromMap(myLabelSizes).get(edge);
  }

  public Graph getGraph() {
    return myGraph;
  }

  public Set<Edge> getLabeledEdges() {
    return MapSequence.fromMap(myLabelSizes).keySet();
  }

  public Set<Node> getNodesWithSize() {
    return MapSequence.fromMap(myNodeSizes).keySet();
  }
}
