package jetbrains.mps.graphLayout.graph;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Iterator;

public class Graph implements IGraph {
  private List<Node> myNodes;
  private int myNextNum;

  public Graph() {
    myNodes = ListSequence.fromList(new ArrayList<Node>());
    myNextNum = 0;
  }

  public List<Node> getNodes() {
    return myNodes;
  }

  public Iterator<Node> getNodesIterator() {
    return ListSequence.fromList(getNodes()).iterator();
  }

  public Iterator<Edge> getEdgesIterator() {
    return ListSequence.fromList(getEdges()).iterator();
  }

  public Node createNode() {
    return addNode();
  }

  public Edge connect(INode source, INode target) {
    Node sourceNode = (Node) source;
    Node targetNode = (Node) target;
    return sourceNode.addEdgeTo(targetNode);
  }

  public List<Edge> getEdges() {
    List<Edge> allEdges = ListSequence.fromList(new ArrayList<Edge>());
    for (Node node : ListSequence.fromList(getNodes())) {
      ListSequence.fromList(allEdges).addSequence(ListSequence.fromList(node.getOutEdges()));
    }
    return allEdges;
  }

  public Node getNode(int index) {
    return ListSequence.fromList(myNodes).getElement(index);
  }

  public int getNumNodes() {
    return ListSequence.fromList(myNodes).count();
  }

  public Node addNode() {
    return ListSequence.fromList(myNodes).addElement(new Node(myNextNum++, false));
  }

  public Node addDummyNode() {
    return ListSequence.fromList(myNodes).addElement(new Node(myNextNum++, true));
  }

  public void addEdge(Edge edge) {
    edge.addToGraph();
  }

  public Edge addEdgeByIndex(int sourceIndex, int targetIndex) {
    return getNode(sourceIndex).addEdgeTo(getNode(targetIndex));
  }

  public void remove(Node node) {
    for (Edge edge : ListSequence.fromList(node.getEdges())) {
      edge.removeFromGraph();
    }
    ListSequence.fromList(myNodes).removeElement(node);
  }

  @Override
  public String toString() {
    StringBuilder result = new StringBuilder();
    result.append("Graph " + super.toString() + " with " + this.getNumNodes() + " nodes:\n");
    for (Node node : ListSequence.fromList(this.getNodes())) {
      result.append("node " + node + ": \n");
      result.append("  out edges:\n");
      for (Edge edge : ListSequence.fromList(node.getOutEdges())) {
        result.append(edge + ", ");
      }
      result.append("\n");
      result.append("  in edges:\n");
      for (Edge edge : ListSequence.fromList(node.getInEdges())) {
        result.append(edge + ", ");
      }
      result.append("\n");
    }
    result.append("end " + super.toString());
    return result.toString();
  }
}
