package jetbrains.mps.graphLayout.graph;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class ClusteredGraph extends Graph implements IClusteredGraph {
  private Graph myInclusionTree;
  private Map<Node, Node> myLeafClusters;
  private Node myRoot;

  public ClusteredGraph() {
    super();
    myInclusionTree = new Graph();
    myLeafClusters = MapSequence.fromMap(new HashMap<Node, Node>());
  }

  public Iterable<Node> getNodesInCluster(INode cluster) {
    Set<Node> nodes = SetSequence.fromSet(new HashSet<Node>());
    getNodesInCluster(((Node) cluster), nodes);
    return nodes;
  }

  public void setNodeInCluster(Node cluster, Node node) {
    MapSequence.fromMap(myLeafClusters).put(cluster, node);
  }

  private void getNodesInCluster(Node cluster, Set<Node> nodes) {
    Iterable<Node> subclusters = ListSequence.fromList(cluster.getOutEdges()).select(new ISelector<Edge, Node>() {
      public Node select(Edge it) {
        return it.getTarget();
      }
    });
    for (Node subcluster : Sequence.fromIterable(subclusters)) {
      getNodesInCluster(subcluster, nodes);
    }
    Node node = MapSequence.fromMap(myLeafClusters).get(cluster);
    if (node != null) {
      SetSequence.fromSet(nodes).addElement(node);
    }
  }

  public void setRoot(Node root) {
    myRoot = root;
  }

  public Node getRoot() {
    return myRoot;
  }

  public Graph getUnderlyingGraph() {
    return this;
  }

  public Graph getInclusionTree() {
    return myInclusionTree;
  }
}
