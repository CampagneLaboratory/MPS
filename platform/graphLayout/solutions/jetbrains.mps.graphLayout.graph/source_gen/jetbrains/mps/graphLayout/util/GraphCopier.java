package jetbrains.mps.graphLayout.util;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graph.Graph;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Set;

public class GraphCopier {
  private Graph myGraph;
  private Graph myCopy;
  private Map<Node, Node> myNodeMap;
  private Map<Edge, Edge> myEdgeMap;

  public GraphCopier(Graph graph) {
    myGraph = graph;
    myCopy = new Graph();
    myNodeMap = MapSequence.fromMap(new HashMap<Node, Node>());
    myEdgeMap = MapSequence.fromMap(new HashMap<Edge, Edge>());
  }

  public Node copyNode(Node node) {
    Node copyNode = myCopy.addNode();
    MapSequence.fromMap(myNodeMap).put(node, copyNode);
    return copyNode;
  }

  public Edge copyEdge(Edge edge) {
    Node copySource = MapSequence.fromMap(myNodeMap).get(edge.getSource());
    Node copyTarget = MapSequence.fromMap(myNodeMap).get(edge.getTarget());
    Edge copyEdge = copySource.addEdgeTo(copyTarget);
    MapSequence.fromMap(myEdgeMap).put(edge, copyEdge);
    return copyEdge;
  }

  public Graph copy() {
    return copySubgraph(new DefaultFilter<Node>());
  }

  public Graph copySubgraph(Filter<Node> nodeFilter) {
    for (Node node : ListSequence.fromList(myGraph.getNodes())) {
      if (nodeFilter.accept(node)) {
        copyNode(node);
      }
    }
    for (Edge edge : ListSequence.fromList(myGraph.getEdges())) {
      if (this.acceptEdge(nodeFilter, edge)) {
        copyEdge(edge);
      }
    }
    return myCopy;
  }

  protected boolean acceptEdge(Filter<Node> nodeFilter, Edge edge) {
    return nodeFilter.accept(edge.getSource()) && nodeFilter.accept(edge.getTarget());
  }

  public Graph getCopy() {
    return myCopy;
  }

  public Node getNodeCopy(Node node) {
    return MapSequence.fromMap(myNodeMap).get(node);
  }

  public Edge getEdgeCopy(Edge edge) {
    return MapSequence.fromMap(myEdgeMap).get(edge);
  }

  public Set<Node> getCopiedNodes() {
    return MapSequence.fromMap(myNodeMap).keySet();
  }

  public Set<Edge> getCopiedEdges() {
    return MapSequence.fromMap(myEdgeMap).keySet();
  }
}
