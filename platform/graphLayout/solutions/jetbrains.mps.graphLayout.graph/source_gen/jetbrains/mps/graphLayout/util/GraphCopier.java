package jetbrains.mps.graphLayout.util;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graph.IGraph;
import jetbrains.mps.graphLayout.graph.Graph;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.INode;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.graphLayout.graph.IEdge;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.Set;

public class GraphCopier {
  private IGraph myGraph;
  private Graph myCopy;
  private Map<INode, Node> myNodeMap;
  private Map<IEdge, Edge> myEdgeMap;

  public GraphCopier(IGraph graph) {
    myGraph = graph;
    myCopy = new Graph();
    myNodeMap = MapSequence.fromMap(new HashMap<INode, Node>());
    myEdgeMap = MapSequence.fromMap(new HashMap<IEdge, Edge>());
  }

  public Node copyNode(INode node) {
    Node copyNode = myCopy.createNode();
    MapSequence.fromMap(myNodeMap).put(node, copyNode);
    return copyNode;
  }

  public Edge copyEdge(IEdge edge) {
    Node copySource = MapSequence.fromMap(myNodeMap).get(edge.getSource());
    Node copyTarget = MapSequence.fromMap(myNodeMap).get(edge.getTarget());
    Edge copyEdge = myCopy.connect(copySource, copyTarget);
    MapSequence.fromMap(myEdgeMap).put(edge, copyEdge);
    return copyEdge;
  }

  public Graph copy() {
    return copySubgraph(new DefaultFilter<INode>());
  }

  public Graph copySubgraph(Filter<INode> nodeFilter) {
    for (INode node : myGraph.getNodes()) {
      if (nodeFilter.accept(node)) {
        copyNode(node);
      }
    }
    for (IEdge edge : myGraph.getEdges()) {
      if (acceptEdge(nodeFilter, edge)) {
        copyEdge(edge);
      }
    }
    return myCopy;
  }

  protected boolean acceptEdge(Filter<INode> nodeFilter, IEdge edge) {
    return nodeFilter.accept(edge.getSource()) && nodeFilter.accept(edge.getTarget());
  }

  public Graph getCopy() {
    return myCopy;
  }

  public Node getNodeCopy(INode node) {
    return MapSequence.fromMap(myNodeMap).get(node);
  }

  public Edge getEdgeCopy(IEdge edge) {
    return MapSequence.fromMap(myEdgeMap).get(edge);
  }

  public Set<INode> getCopiedNodes() {
    return MapSequence.fromMap(myNodeMap).keySet();
  }

  public Set<IEdge> getCopiedEdges() {
    return MapSequence.fromMap(myEdgeMap).keySet();
  }
}
