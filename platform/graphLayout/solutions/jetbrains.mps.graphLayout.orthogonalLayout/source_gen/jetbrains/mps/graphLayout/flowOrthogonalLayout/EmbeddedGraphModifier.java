package jetbrains.mps.graphLayout.flowOrthogonalLayout;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graph.Graph;
import jetbrains.mps.graphLayout.planarGraph.EmbeddedGraph;
import java.util.Map;
import jetbrains.mps.graphLayout.planarGraph.Dart;
import jetbrains.mps.graphLayout.util.Direction2D;
import jetbrains.mps.graphLayout.graph.Node;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;
import jetbrains.mps.graphLayout.planarGraph.Face;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;

public class EmbeddedGraphModifier {
  private Graph myGraph;
  private EmbeddedGraph myEmbeddedGraph;
  private Map<Dart, Direction2D> myDartDirections;

  public EmbeddedGraphModifier(EmbeddedGraph embeddedGraph) {
    myGraph = embeddedGraph.getGraph();
    myEmbeddedGraph = embeddedGraph;
  }

  public void setDartDirections(Map<Dart, Direction2D> dartDirections) {
    myDartDirections = dartDirections;
  }

  public void makeRectanglesForNodes(Map<Node, List<Node>> nodesToProcess) {
    for (Node node : SetSequence.fromSet(MapSequence.fromMap(nodesToProcess).keySet())) {
      List<Node> nodes = MapSequence.fromMap(nodesToProcess).get(node);
      if (ListSequence.fromList(nodes).count() == 0) {
        makeRectangleForSingleNode(node);
      } else {
        makeRectangleForSplittedNode(MapSequence.fromMap(nodesToProcess).get(node));
      }
    }
  }

  public void makeRectangleForSplittedNode(final List<Node> nodes) {
    final Wrappers._T<Node> prev = new Wrappers._T<Node>(ListSequence.fromList(nodes).getElement(ListSequence.fromList(nodes).count() - 2));
    final Wrappers._T<Node> cur = new Wrappers._T<Node>(ListSequence.fromList(nodes).getElement(ListSequence.fromList(nodes).count() - 1));
    Edge prevToCurEdge = ListSequence.fromList(prev.value.getEdges()).findFirst(new IWhereFilter<Edge>() {
      public boolean accept(Edge edge) {
        return edge.getOpposite(prev.value) == cur.value;
      }
    });
    Map<Edge, Integer> toSplit = MapSequence.fromMap(new HashMap<Edge, Integer>());
    for (final Node next : ListSequence.fromList(nodes)) {
      Edge curToNextEdge = ListSequence.fromList(cur.value.getEdges()).findFirst(new IWhereFilter<Edge>() {
        public boolean accept(Edge edge) {
          return edge.getOpposite(cur.value) == next;
        }
      });
      Dart prevToCurDart = myEmbeddedGraph.getSourceDart(prevToCurEdge, prev.value);
      Dart curToNextDart = myEmbeddedGraph.getSourceDart(curToNextEdge, cur.value);
      Direction2D prevToCurDir = MapSequence.fromMap(myDartDirections).get(prevToCurDart);
      Direction2D curToNextDir = MapSequence.fromMap(myDartDirections).get(curToNextDart);
      if (prevToCurDir != curToNextDir) {
        Edge curRealEdge = ListSequence.fromList(cur.value.getEdges()).findFirst(new IWhereFilter<Edge>() {
          public boolean accept(Edge edge) {
            return !(ListSequence.fromList(nodes).contains(edge.getOpposite(cur.value)));
          }
        });
        Dart curRealDart = myEmbeddedGraph.getSourceDart(curRealEdge, cur.value);
        Edge edgeToSplit;
        if (MapSequence.fromMap(myDartDirections).get(curRealDart) == prevToCurDir) {
          edgeToSplit = prevToCurEdge;
        } else {
          edgeToSplit = curToNextEdge;
        }
        if (MapSequence.fromMap(toSplit).containsKey(edgeToSplit)) {
          MapSequence.fromMap(toSplit).put(edgeToSplit, MapSequence.fromMap(toSplit).get(edgeToSplit) + 1);
        } else {
          MapSequence.fromMap(toSplit).put(edgeToSplit, 1);
        }
      }
      prev.value = cur.value;
      cur.value = next;
      prevToCurEdge = curToNextEdge;
    }
    for (Edge edge : SetSequence.fromSet(MapSequence.fromMap(toSplit).keySet())) {
      int splitNum = MapSequence.fromMap(toSplit).get(edge);
      final Wrappers._T<Edge> curEdge = new Wrappers._T<Edge>(edge);
      Direction2D curDirection = null;
      for (int i = 0; i < splitNum; i++) {
        List<Dart> toRemove = ListSequence.fromList(new ArrayList<Dart>());
        ListSequence.fromList(toRemove).addSequence(ListSequence.fromList(myEmbeddedGraph.getDarts(curEdge.value)));
        if (curDirection == null) {
          final Node curSource = curEdge.value.getSource();
          Edge realEdge = ListSequence.fromList(curSource.getEdges()).findFirst(new IWhereFilter<Edge>() {
            public boolean accept(Edge edge) {
              return !(ListSequence.fromList(nodes).contains(edge.getOpposite(curSource)));
            }
          });
          curDirection = MapSequence.fromMap(myDartDirections).get(myEmbeddedGraph.getSourceDart(realEdge, curSource)).turnClockwise(1);
        }
        List<Edge> newEdges = ListSequence.fromList(new ArrayList<Edge>());
        myEmbeddedGraph.splitEdge(curEdge.value, newEdges);
        Dart firstDart = ListSequence.fromList(myEmbeddedGraph.getDarts(ListSequence.fromList(newEdges).getElement(0))).findFirst(new IWhereFilter<Dart>() {
          public boolean accept(Dart dart) {
            return dart.getSource() == curEdge.value.getSource();
          }
        });
        MapSequence.fromMap(myDartDirections).put(firstDart, curDirection);
        MapSequence.fromMap(myDartDirections).put(myEmbeddedGraph.getOpposite(firstDart), curDirection.opposite());
        Dart secondDart = ListSequence.fromList(myEmbeddedGraph.getDarts(ListSequence.fromList(newEdges).getElement(1))).findFirst(new IWhereFilter<Dart>() {
          public boolean accept(Dart dart) {
            return dart.getTarget() == curEdge.value.getTarget();
          }
        });
        Direction2D nextDirection = curDirection.turnClockwise(1);
        MapSequence.fromMap(myDartDirections).put(secondDart, nextDirection);
        MapSequence.fromMap(myDartDirections).put(myEmbeddedGraph.getOpposite(secondDart), nextDirection.opposite());
        for (Dart dartToRemove : ListSequence.fromList(toRemove)) {
          MapSequence.fromMap(myDartDirections).removeKey(dartToRemove);
        }
        curEdge.value = ListSequence.fromList(newEdges).getElement(1);
        curDirection = nextDirection;
      }
    }
  }

  public void makeRectangleForSingleNode(Node node) {
    List<Direction2D> allDirections = Arrays.asList(Direction2D.values());
    List<Dart> darts = myEmbeddedGraph.getDartWithSource(node);
    Face nodeInnerFace = new Face(myGraph);
    Node firstCornerNode = myGraph.addDummyNode();
    Node curCornerNode = firstCornerNode;
    Map<Dart, Edge> edgesFromNode = MapSequence.fromMap(new HashMap<Dart, Edge>());
    List<Dart> nodeOuterDarts = ListSequence.fromList(new LinkedList<Dart>());
    for (final Direction2D dir : ListSequence.fromList(allDirections)) {
      Node nextCornerNode;
      if (dir == ListSequence.fromList(allDirections).last()) {
        nextCornerNode = firstCornerNode;
      } else {
        nextCornerNode = myGraph.addDummyNode();
      }
      Dart dirDart = ListSequence.fromList(darts).findFirst(new IWhereFilter<Dart>() {
        public boolean accept(Dart dart) {
          return MapSequence.fromMap(myDartDirections).get(dart) == dir;
        }
      });
      if (dirDart == null) {
        addToNodeFace(nodeInnerFace, curCornerNode.addEdgeTo(nextCornerNode), dir, nodeOuterDarts);
      } else {
        Node newNode = myGraph.addDummyNode();
        MapSequence.fromMap(edgesFromNode).put(dirDart, newNode.addEdgeTo(dirDart.getTarget()));
        addToNodeFace(nodeInnerFace, curCornerNode.addEdgeTo(newNode), dir, nodeOuterDarts);
        addToNodeFace(nodeInnerFace, newNode.addEdgeTo(nextCornerNode), dir, nodeOuterDarts);
      }
      curCornerNode = nextCornerNode;
    }
    Map<Dart, Edge> endEdges = MapSequence.fromMap(new HashMap<Dart, Edge>());
    for (Dart dart : ListSequence.fromList(darts)) {
      List<Dart> faceDarts = myEmbeddedGraph.getFace(dart).getDarts();
      int prevIndex = ListSequence.fromList(faceDarts).indexOf(dart) - 1;
      if (prevIndex == -1) {
        prevIndex = ListSequence.fromList(faceDarts).count() - 1;
      }
      MapSequence.fromMap(endEdges).put(dart, MapSequence.fromMap(edgesFromNode).get(myEmbeddedGraph.getOpposite(ListSequence.fromList(faceDarts).getElement(prevIndex))));
    }
    for (Dart dart : ListSequence.fromList(darts)) {
      Face face = myEmbeddedGraph.getFace(dart);
      List<Dart> faceDarts = face.getDarts();
      int dartIndex = ListSequence.fromList(faceDarts).indexOf(dart);
      int prevIndex = dartIndex - 1;
      if (prevIndex == -1) {
        prevIndex = ListSequence.fromList(faceDarts).count() - 1;
      }
      Dart prevDart = ListSequence.fromList(faceDarts).getElement(prevIndex);
      Edge startEdge = MapSequence.fromMap(edgesFromNode).get(dart);
      Edge endEdge = MapSequence.fromMap(endEdges).get(dart);
      Node start = startEdge.getSource();
      Node end = endEdge.getSource();
      List<Dart> newDarts = ListSequence.fromList(new LinkedList<Dart>());
      Iterator<Dart> dartItr = ListSequence.fromList(nodeOuterDarts).iterator();
      Dart cur;
      do {
        cur = dartItr.next();
      } while (cur.getTarget() != start);
      do {
        ListSequence.fromList(newDarts).insertElement(0, cur);
        if (!(dartItr.hasNext())) {
          dartItr = ListSequence.fromList(nodeOuterDarts).iterator();
        }
        cur = dartItr.next();
      } while (cur.getTarget() != end);
      Dart newStartDart = new Dart(startEdge, start);
      ListSequence.fromList(newDarts).addElement(newStartDart);
      MapSequence.fromMap(myDartDirections).put(newStartDart, MapSequence.fromMap(myDartDirections).get(dart));
      Dart newEndDart = new Dart(endEdge, endEdge.getTarget());
      ListSequence.fromList(newDarts).insertElement(0, newEndDart);
      MapSequence.fromMap(myDartDirections).put(newEndDart, MapSequence.fromMap(myDartDirections).get(prevDart));
      myEmbeddedGraph.removeDart(face, dart);
      face.makeEndsWith(prevDart);
      myEmbeddedGraph.removeDart(face, prevDart);
      for (Dart newDart : ListSequence.fromList(newDarts)) {
        myEmbeddedGraph.addLastDart(face, newDart);
      }
      MapSequence.fromMap(myDartDirections).removeKey(dart);
      MapSequence.fromMap(myDartDirections).removeKey(prevDart);
    }
    myEmbeddedGraph.addFace(nodeInnerFace);
    myGraph.remove(node);
  }

  private void addToNodeFace(Face nodeFace, Edge edge, Direction2D dir, List<Dart> outerDarts) {
    Dart innerDart = new Dart(edge, edge.getSource());
    nodeFace.addLast(innerDart);
    MapSequence.fromMap(myDartDirections).put(innerDart, dir.turnClockwise(1));
    Dart outerDart = new Dart(edge, edge.getTarget());
    MapSequence.fromMap(myDartDirections).put(outerDart, MapSequence.fromMap(myDartDirections).get(innerDart).opposite());
    ListSequence.fromList(outerDarts).addElement(outerDart);
  }

  public Set<Edge> reduceNodesDegree(Map<Node, List<Node>> nodeMap, Map<Edge, Edge> edgeMap) {
    Set<Edge> addedEdges = SetSequence.fromSet(new HashSet<Edge>());
    List<Node> realNodes = ListSequence.fromList(new ArrayList<Node>());
    ListSequence.fromList(realNodes).addSequence(ListSequence.fromList(myGraph.getNodes()));
    for (final Node node : ListSequence.fromList(realNodes)) {
      List<Edge> edges = node.getEdges();
      if (ListSequence.fromList(edges).count() <= 4) {
        continue;
      }
      List<Node> newNodes = ListSequence.fromList(new ArrayList<Node>());
      MapSequence.fromMap(nodeMap).put(node, newNodes);
      Edge firstEdge = ListSequence.fromList(edges).first();
      Dart firstDart = ListSequence.fromList(myEmbeddedGraph.getDarts(firstEdge)).findFirst(new IWhereFilter<Dart>() {
        public boolean accept(Dart dart) {
          return dart.getSource() == node;
        }
      });
      Dart curDart = firstDart;
      Node firstNewNode = myGraph.addDummyNode();
      Node curNewNode = firstNewNode;
      Edge firstNewEdge = firstNewNode.addEdgeTo(firstEdge.getOpposite(node));
      if (firstEdge.getSource() == node) {
        firstEdge.revert();
      }
      ListSequence.fromList(newNodes).addElement(firstNewNode);
      MapSequence.fromMap(edgeMap).put(firstEdge, firstNewEdge);
      Edge curNewEdge = firstNewEdge;
      Face newFace = new Face(myGraph);
      do {
        Face curFace = myEmbeddedGraph.getFace(curDart);
        List<Dart> darts = curFace.getDarts();
        int curPos = ListSequence.fromList(darts).indexOf(curDart);
        int nextPos = curPos - 1;
        if (nextPos == -1) {
          nextPos = ListSequence.fromList(darts).count() - 1;
        }
        Dart nextDart = myEmbeddedGraph.getOpposite(ListSequence.fromList(darts).getElement(nextPos));
        if (nextDart == null) {
          nextDart = firstDart;
        }
        Node oppositeNode = nextDart.getEdge().getOpposite(node);
        Node nextNewNode;
        if (nextDart == firstDart) {
          nextNewNode = firstNewNode;
        } else {
          nextNewNode = myGraph.addDummyNode();
          ListSequence.fromList(newNodes).addElement(nextNewNode);
        }
        Edge nextNewEdge;
        if (nextDart == firstDart) {
          nextNewEdge = firstNewEdge;
        } else {
          nextNewEdge = nextNewNode.addEdgeTo(oppositeNode);
          if (firstEdge.getSource() == node) {
            firstEdge.revert();
          }
          MapSequence.fromMap(edgeMap).put(nextDart.getEdge(), nextNewEdge);
        }
        Edge edgeBetweenNewNodes = curNewNode.addEdgeTo(nextNewNode);
        SetSequence.fromSet(addedEdges).addElement(edgeBetweenNewNodes);
        newFace.addLast(new Dart(edgeBetweenNewNodes, curNewNode));
        myEmbeddedGraph.setDart(curFace, nextPos, new Dart(nextNewEdge, oppositeNode));
        myEmbeddedGraph.setDart(curFace, curPos, new Dart(curNewEdge, curNewNode));
        myEmbeddedGraph.insertDart(curFace, nextPos + 1, new Dart(edgeBetweenNewNodes, nextNewNode));
        curDart = nextDart;
        curNewNode = nextNewNode;
        curNewEdge = nextNewEdge;
      } while (curDart != firstDart);
      myEmbeddedGraph.addFace(newFace);
      myGraph.remove(node);
    }
    return addedEdges;
  }

  public EmbeddedGraph getEmbeddedGraph() {
    return myEmbeddedGraph;
  }

  public Map<Dart, Direction2D> getDartDirections() {
    return myDartDirections;
  }
}
