package jetbrains.mps.graphLayout.flowOrthogonalLayout;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graphLayout.GraphLayout;
import jetbrains.mps.graphLayout.graph.Graph;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import java.awt.Dimension;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.LinkedHashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.List;
import java.awt.Point;
import java.awt.Rectangle;
import jetbrains.mps.graphLayout.graphLayout.LayoutTransform;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.graphLayout.algorithms.BiconnectAugmentation;
import jetbrains.mps.graphLayout.planarGraph.EmbeddedGraph;
import jetbrains.mps.graphLayout.planarization.ShortestPathEmbeddingFinder;
import jetbrains.mps.graphLayout.planarization.PQPlanarizationFinder;
import java.util.ArrayList;
import jetbrains.mps.graphLayout.util.Direction2D;
import jetbrains.mps.graphLayout.planarGraph.Dart;
import jetbrains.mps.graphLayout.util.GeomUtil;
import java.util.Iterator;

public abstract class AbstractOrthogonalFlowLayouter {
  private static int DEFAULT_UNIT_LENGTH = 20;
  protected static int SHOW_INFO = 0;

  private int myUnitLength = DEFAULT_UNIT_LENGTH;

  public AbstractOrthogonalFlowLayouter() {
  }

  public GraphLayout doLayout(Graph graph, Map<Node, Dimension> nodeSizes, Map<Edge, Dimension> edgeSizes) {
    Graph copy = new Graph();
    Map<Node, Node> nodeMap = MapSequence.fromMap(new HashMap<Node, Node>());
    Map<Edge, Edge> edgeMap = MapSequence.fromMap(new HashMap<Edge, Edge>());
    Map<Node, Dimension> copyNodeSizes = MapSequence.fromMap(new LinkedHashMap<Node, Dimension>(16, (float) 0.75, false));
    Map<Edge, Dimension> copyEdgeSizes = MapSequence.fromMap(new LinkedHashMap<Edge, Dimension>(16, (float) 0.75, false));
    for (Node node : ListSequence.fromList(graph.getNodes())) {
      Node copyNode = copy.addNode();
      MapSequence.fromMap(nodeMap).put(node, copyNode);
      MapSequence.fromMap(copyNodeSizes).put(copyNode, MapSequence.fromMap(nodeSizes).get(node));
    }
    for (Edge edge : ListSequence.fromList(graph.getEdges())) {
      MapSequence.fromMap(edgeMap).put(edge, MapSequence.fromMap(nodeMap).get(edge.getSource()).addEdgeTo(MapSequence.fromMap(nodeMap).get(edge.getTarget())));
    }
    for (Edge edge : SetSequence.fromSet(MapSequence.fromMap(edgeSizes).keySet())) {
      MapSequence.fromMap(copyEdgeSizes).put(MapSequence.fromMap(edgeMap).get(edge), MapSequence.fromMap(edgeSizes).get(edge));
    }
    GraphLayout copyLayout = getLayoutCorruptGraph(copy, copyNodeSizes, copyEdgeSizes);
    GraphLayout layout = new GraphLayout(graph);
    for (Node node : ListSequence.fromList(graph.getNodes())) {
      layout.setLayoutFor(node, copyLayout.getLayoutFor(MapSequence.fromMap(nodeMap).get(node)));
    }
    for (Edge edge : ListSequence.fromList(graph.getEdges())) {
      Edge copyEdge = MapSequence.fromMap(edgeMap).get(edge);
      List<Point> copyEdgeLayout = copyLayout.getLayoutFor(copyEdge);
      // copyEdge can be reverted 
      if (copyEdge.getSource() != MapSequence.fromMap(nodeMap).get(edge.getSource())) {
        copyEdgeLayout = ListSequence.fromList(copyEdgeLayout).reversedList();
      }
      layout.setLayoutFor(edge, copyEdgeLayout);
    }
    for (Edge edge : SetSequence.fromSet(MapSequence.fromMap(edgeSizes).keySet())) {
      layout.setLabelLayout(edge, copyLayout.getLabelLayout(MapSequence.fromMap(edgeMap).get(edge)));
    }
    Rectangle rect = layout.getContainingRectangle();
    layout = LayoutTransform.shift(layout, 20 - rect.x, 20 - rect.y);
    return layout;
  }

  private GraphLayout getLayoutCorruptGraph(Graph graph, Map<Node, Dimension> nodeSizes, Map<Edge, Dimension> edgeSizes) {
    Set<Node> initialNodes = SetSequence.fromSet(new HashSet<Node>());
    SetSequence.fromSet(initialNodes).addSequence(ListSequence.fromList(graph.getNodes()));
    Set<Edge> initialEdges = SetSequence.fromSet(new HashSet<Edge>());
    SetSequence.fromSet(initialEdges).addSequence(ListSequence.fromList(graph.getEdges()));
    BiconnectAugmentation.smartMakeBiconnected(graph);
    EmbeddedGraph embeddedGraph = new ShortestPathEmbeddingFinder(new PQPlanarizationFinder()).find(graph);
    Map<Edge, List<Edge>> history = MapSequence.fromMap(new HashMap<Edge, List<Edge>>());
    for (Edge edge : SetSequence.fromSet(initialEdges)) {
      MapSequence.fromMap(history).put(edge, embeddedGraph.findFullHistory(edge));
    }
    Map<Edge, Edge> labeledEdges = MapSequence.fromMap(new HashMap<Edge, Edge>());
    Map<Edge, Dimension> labeledEdgeSizes = MapSequence.fromMap(new HashMap<Edge, Dimension>());
    for (Edge edge : SetSequence.fromSet(MapSequence.fromMap(edgeSizes).keySet())) {
      Edge labeledEdge = getLabeledEdge(MapSequence.fromMap(history).get(edge));
      MapSequence.fromMap(labeledEdges).put(edge, labeledEdge);
      MapSequence.fromMap(labeledEdgeSizes).put(labeledEdge, MapSequence.fromMap(edgeSizes).get(edge));
    }
    GraphLayout layout = getLayoutFromEmbeddedGraph(embeddedGraph, nodeSizes, labeledEdgeSizes);
    GraphLayout initialLayout = new GraphLayout(graph);
    for (Node node : SetSequence.fromSet(initialNodes)) {
      initialLayout.setLayoutFor(node, layout.getLayoutFor(node));
    }
    for (Edge edge : SetSequence.fromSet(initialEdges)) {
      List<Point> edgeLayout = ListSequence.fromList(new ArrayList<Point>());
      Node cur = edge.getSource();
      for (Edge historyEdge : ListSequence.fromList(MapSequence.fromMap(history).get(edge))) {
        List<Point> historyLayout = layout.getLayoutFor(historyEdge);
        if (historyEdge.getSource() != cur) {
          historyLayout = ListSequence.fromList(historyLayout).reversedList();
        }
        ListSequence.fromList(edgeLayout).addSequence(ListSequence.fromList(historyLayout));
        cur = historyEdge.getOpposite(cur);
      }
      initialLayout.setLayoutFor(edge, edgeLayout);
    }
    for (Edge edge : SetSequence.fromSet(MapSequence.fromMap(edgeSizes).keySet())) {
      initialLayout.setLabelLayout(edge, layout.getLabelLayout(MapSequence.fromMap(labeledEdges).get(edge)));
    }
    return initialLayout;
  }

  public abstract Edge getLabeledEdge(List<Edge> edges);

  public abstract GraphLayout getLayoutFromEmbeddedGraph(EmbeddedGraph embeddedGraph, Map<Node, Dimension> nodeSizes, Map<Edge, Dimension> edgeSizes);

  protected Map<Node, Map<Direction2D, Integer>> getNodeDirectionSizes(List<Node> oldNodes, Map<Node, Dimension> nodeSizes) {
    Map<Node, Map<Direction2D, Integer>> nodeDirectionSizes = MapSequence.fromMap(new HashMap<Node, Map<Direction2D, Integer>>());
    for (Node node : ListSequence.fromList(oldNodes)) {
      Map<Direction2D, Integer> directionSizes = MapSequence.fromMap(new HashMap<Direction2D, Integer>());
      Dimension size = MapSequence.fromMap(nodeSizes).get(node);
      int horSize = size.height;
      MapSequence.fromMap(directionSizes).put(Direction2D.UP, horSize / 2);
      MapSequence.fromMap(directionSizes).put(Direction2D.DOWN, horSize - MapSequence.fromMap(directionSizes).get(Direction2D.UP));
      int verSize = size.width;
      MapSequence.fromMap(directionSizes).put(Direction2D.LEFT, verSize / 2);
      MapSequence.fromMap(directionSizes).put(Direction2D.RIGHT, verSize - MapSequence.fromMap(directionSizes).get(Direction2D.LEFT));
      MapSequence.fromMap(nodeDirectionSizes).put(node, directionSizes);
    }
    return nodeDirectionSizes;
  }

  protected Map<Edge, Integer> getEdgesShifts(List<QuasiRepresentationModifier.Modification> modifications, Map<Dart, Direction2D> directions, Map<Node, Dimension> nodeSizes) {
    Map<Edge, Integer> edgeShifts = MapSequence.fromMap(new HashMap<Edge, Integer>());
    for (QuasiRepresentationModifier.Modification modification : ListSequence.fromList(modifications)) {
      List<Edge> edges = modification.getNewEdges();
      Node node = modification.getSource();
      Direction2D dir = MapSequence.fromMap(directions).get(modification.getSourceDart());
      int nodeLength;
      if (dir.isVertical()) {
        nodeLength = MapSequence.fromMap(nodeSizes).get(node).width / 2;
      } else {
        nodeLength = MapSequence.fromMap(nodeSizes).get(node).height / 2;
      }
      nodeLength = Math.min(nodeLength, myUnitLength);
      int unitShift = nodeLength / ListSequence.fromList(edges).count();
      int curShift = 0;
      for (Edge edge : ListSequence.fromList(edges)) {
        MapSequence.fromMap(edgeShifts).put(edge, curShift);
        curShift += unitShift;
      }
    }
    return edgeShifts;
  }

  protected void splitEdges(GraphLayout layout, QuasiRepresentationModifier.Modification modification, Map<Edge, Integer> edgeShifts) {
    List<Edge> edges = modification.getModifiedEdges();
    Edge firstEdge = ListSequence.fromList(edges).first();
    List<Point> path = layout.getLayoutFor(firstEdge);
    Node node = modification.getSource();
    Direction2D dartsDir;
    if (firstEdge.getSource() == node) {
      dartsDir = GeomUtil.getDirection(ListSequence.fromList(path).getElement(0), ListSequence.fromList(path).getElement(1));
    } else {
      int last = ListSequence.fromList(path).count() - 1;
      dartsDir = GeomUtil.getDirection(ListSequence.fromList(path).getElement(last), ListSequence.fromList(path).getElement(last - 1));
    }
    Direction2D shiftDir = dartsDir.turnClockwise(3);
    int dx = shiftDir.dx();
    int dy = shiftDir.dy();
    Iterator<Edge> newEdgeItr = ListSequence.fromList(modification.getNewEdges()).iterator();
    for (Edge edge : ListSequence.fromList(edges)) {
      layout.removeStraightBends(edge);
      List<Point> edgeLayout = layout.getLayoutFor(edge);
      List<Point> pointsToShift;
      if (edge.getSource() == node) {
        pointsToShift = ListSequence.fromListAndArray(new ArrayList<Point>(), ListSequence.fromList(edgeLayout).getElement(0), ListSequence.fromList(edgeLayout).getElement(1));
      } else {
        int last = ListSequence.fromList(edgeLayout).count() - 1;
        pointsToShift = ListSequence.fromListAndArray(new ArrayList<Point>(), ListSequence.fromList(edgeLayout).getElement(last), ListSequence.fromList(edgeLayout).getElement(last - 1));
      }
      Edge newEdge = newEdgeItr.next();
      for (Point point : ListSequence.fromList(pointsToShift)) {
        point.translate(dx * MapSequence.fromMap(edgeShifts).get(newEdge), dy * MapSequence.fromMap(edgeShifts).get(newEdge));
      }
    }
  }

  public void setUnitLength(int unitLength) {
    myUnitLength = unitLength;
  }

  public int getUnitLength() {
    return myUnitLength;
  }
}
