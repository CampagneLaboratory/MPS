package jetbrains.mps.graphLayout.flowOrthogonalLayout;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graphLayout.GraphLayout;
import jetbrains.mps.graphLayout.graph.Graph;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import java.awt.Dimension;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.List;
import java.awt.Point;
import java.awt.Rectangle;
import jetbrains.mps.graphLayout.graphLayout.LayoutTransform;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.graphLayout.algorithms.BiconnectAugmentation;
import jetbrains.mps.graphLayout.planarGraph.EmbeddedGraph;
import jetbrains.mps.graphLayout.planarization.ShortestPathEmbeddingFinder;
import jetbrains.mps.graphLayout.planarization.PQPlanarizationFinder;
import java.util.ArrayList;
import jetbrains.mps.graphLayout.planarGraph.Dart;
import jetbrains.mps.graphLayout.util.Direction2D;
import jetbrains.mps.internal.collections.runtime.backports.LinkedList;
import java.util.Iterator;
import jetbrains.mps.graphLayout.util.GeomUtil;
import jetbrains.mps.graphLayout.graphLayout.GraphPointLayout;

public class OrthogonalFlowLayouter {
  private static int DEFAULT_UNIT_LENGTH = 20;
  private static int SHOW_INFO = 1;

  private int myUnitLength = DEFAULT_UNIT_LENGTH;

  public OrthogonalFlowLayouter() {
  }

  public GraphLayout doLayout(Graph graph, Map<Node, Dimension> nodeSizes) {
    Graph copy = new Graph();
    Map<Node, Node> nodeMap = MapSequence.fromMap(new HashMap<Node, Node>());
    Map<Edge, Edge> edgeMap = MapSequence.fromMap(new HashMap<Edge, Edge>());
    Map<Node, Dimension> copySizes = MapSequence.fromMap(new HashMap<Node, Dimension>());
    for (Node node : ListSequence.fromList(graph.getNodes())) {
      Node copyNode = copy.addNode();
      MapSequence.fromMap(nodeMap).put(node, copyNode);
      MapSequence.fromMap(copySizes).put(copyNode, MapSequence.fromMap(nodeSizes).get(node));
    }
    for (Edge edge : ListSequence.fromList(graph.getEdges())) {
      MapSequence.fromMap(edgeMap).put(edge, MapSequence.fromMap(nodeMap).get(edge.getSource()).addEdgeTo(MapSequence.fromMap(nodeMap).get(edge.getTarget())));
    }
    GraphLayout copyLayout = getLayoutCorruptGraph(copy, copySizes);
    GraphLayout layout = new GraphLayout(graph);
    for (Node node : ListSequence.fromList(graph.getNodes())) {
      layout.setLayoutFor(node, copyLayout.getLayoutFor(MapSequence.fromMap(nodeMap).get(node)));
    }
    for (Edge edge : ListSequence.fromList(graph.getEdges())) {
      Edge copyEdge = MapSequence.fromMap(edgeMap).get(edge);
      List<Point> copyEdgeLayout = copyLayout.getLayoutFor(copyEdge);
      // copyEdge can be reverted 
      if (copyEdge.getSource() != MapSequence.fromMap(nodeMap).get(edge.getSource())) {
        copyEdgeLayout = ListSequence.fromList(copyEdgeLayout).reversedList();
      }
      layout.setLayoutFor(edge, copyEdgeLayout);
    }
    Rectangle rect = layout.getContainingRectangle();
    layout = LayoutTransform.shift(layout, 20 - rect.x, 20 - rect.y);
    return layout;
  }

  private GraphLayout getLayoutCorruptGraph(Graph graph, Map<Node, Dimension> nodeSizes) {
    Set<Node> initialNodes = SetSequence.fromSet(new HashSet<Node>());
    SetSequence.fromSet(initialNodes).addSequence(ListSequence.fromList(graph.getNodes()));
    Set<Edge> initialEdges = SetSequence.fromSet(new HashSet<Edge>());
    SetSequence.fromSet(initialEdges).addSequence(ListSequence.fromList(graph.getEdges()));
    BiconnectAugmentation.smartMakeBiconnected(graph);
    EmbeddedGraph embeddedGraph = new ShortestPathEmbeddingFinder(new PQPlanarizationFinder()).find(graph);
    Map<Edge, List<Edge>> history = MapSequence.fromMap(new HashMap<Edge, List<Edge>>());
    for (Edge edge : SetSequence.fromSet(initialEdges)) {
      MapSequence.fromMap(history).put(edge, embeddedGraph.findFullHistory(edge));
    }
    GraphLayout layout = getLayoutFromEmbeddedGraph(embeddedGraph, nodeSizes);
    GraphLayout initialLayout = new GraphLayout(graph);
    for (Node node : SetSequence.fromSet(initialNodes)) {
      initialLayout.setLayoutFor(node, layout.getLayoutFor(node));
    }
    for (Edge edge : SetSequence.fromSet(initialEdges)) {
      List<Point> edgeLayout = ListSequence.fromList(new ArrayList<Point>());
      Node cur = edge.getSource();
      for (Edge historyEdge : ListSequence.fromList(MapSequence.fromMap(history).get(edge))) {
        List<Point> historyLayout = layout.getLayoutFor(historyEdge);
        if (historyEdge.getSource() != cur) {
          historyLayout = ListSequence.fromList(historyLayout).reversedList();
        }
        ListSequence.fromList(edgeLayout).addSequence(ListSequence.fromList(historyLayout));
        cur = historyEdge.getOpposite(cur);
      }
      initialLayout.setLayoutFor(edge, edgeLayout);
    }
    return initialLayout;
  }

  private GraphLayout getLayoutFromEmbeddedGraph(EmbeddedGraph embeddedGraph, Map<Node, Dimension> nodeSizes) {
    Graph graph = embeddedGraph.getGraph();
    List<Edge> oldEdges = ListSequence.fromList(new ArrayList<Edge>());
    ListSequence.fromList(oldEdges).addSequence(ListSequence.fromList(graph.getEdges()));
    List<Node> oldNodes = ListSequence.fromList(new ArrayList<Node>());
    ListSequence.fromList(oldNodes).addSequence(SetSequence.fromSet(MapSequence.fromMap(nodeSizes).keySet()));
    Map<Dart, Integer> bends = MapSequence.fromMap(new HashMap<Dart, Integer>());
    Map<Dart, Integer> angles = MapSequence.fromMap(new HashMap<Dart, Integer>());
    QuasiOrthogonalRepresentation.getRepresentation(embeddedGraph, bends, angles);
    QuasiRepresentationModifier quasiModifier = new QuasiRepresentationModifier(embeddedGraph, bends, angles);
    quasiModifier.reduceToOrthogonalRepresentation();
    List<List<Edge>> modifiedEdges = quasiModifier.getModifiedEdges();
    if (SHOW_INFO > 0) {
      System.out.println("merged edges: ");
      for (List<Edge> list : ListSequence.fromList(modifiedEdges)) {
        System.out.println(list);
      }
    }
    OrthogonalRepresentation.replaceBendsByNodes(embeddedGraph, bends, angles);
    Map<Dart, Direction2D> directions = OrthogonalRepresentation.getDirections(embeddedGraph, angles);
    EmbeddedGraphModifier modifier = new EmbeddedGraphModifier(embeddedGraph);
    modifier.setDartDirections(directions);
    modifier.makeRectangularFaces();
    modifier.connectSpecialNodes(oldNodes);
    if (SHOW_INFO > 0) {
      System.out.println("modified graph: " + embeddedGraph);
    }
    Map<Node, Map<Direction2D, Integer>> nodeDirectionSizes = MapSequence.fromMap(new HashMap<Node, Map<Direction2D, Integer>>());
    for (Node node : ListSequence.fromList(oldNodes)) {
      Map<Direction2D, Integer> directionSizes = MapSequence.fromMap(new HashMap<Direction2D, Integer>());
      Dimension size = MapSequence.fromMap(nodeSizes).get(node);
      int horSize = size.height;
      MapSequence.fromMap(directionSizes).put(Direction2D.UP, horSize / 2);
      MapSequence.fromMap(directionSizes).put(Direction2D.DOWN, horSize - MapSequence.fromMap(directionSizes).get(Direction2D.UP));
      int verSize = size.width;
      MapSequence.fromMap(directionSizes).put(Direction2D.LEFT, verSize / 2);
      MapSequence.fromMap(directionSizes).put(Direction2D.RIGHT, verSize - MapSequence.fromMap(directionSizes).get(Direction2D.LEFT));
      MapSequence.fromMap(nodeDirectionSizes).put(node, directionSizes);
    }

    Map<Edge, Integer> lenghts = MapSequence.fromMap(new HashMap<Edge, Integer>());
    for (Edge edge : ListSequence.fromList(graph.getEdges())) {
      int edgeLength = myUnitLength;
      Node source = edge.getSource();
      if (MapSequence.fromMap(nodeDirectionSizes).containsKey(source)) {
        Dart sourceDart = embeddedGraph.getSourceDart(edge, source);
        edgeLength += MapSequence.fromMap(MapSequence.fromMap(nodeDirectionSizes).get(source)).get(MapSequence.fromMap(directions).get(sourceDart));
      }
      Node target = edge.getTarget();
      if (MapSequence.fromMap(nodeDirectionSizes).containsKey(target)) {
        Dart targetDart = embeddedGraph.getSourceDart(edge, target);
        edgeLength += MapSequence.fromMap(MapSequence.fromMap(nodeDirectionSizes).get(target)).get(MapSequence.fromMap(directions).get(targetDart));
      }
      MapSequence.fromMap(lenghts).put(edge, edgeLength);
    }
    EdgeLengthComputer lengthComputer = new EdgeLengthComputer();
    Map<Edge, Integer> lengths = lengthComputer.compute(embeddedGraph, directions, lenghts);
    CoordinatePlacer placer = new CoordinatePlacer(embeddedGraph, lengths, directions);
    Map<Node, Point> coordinates = placer.getCoordinates();
    GraphLayout graphLayout = new GraphLayout(graph);
    for (Node node : ListSequence.fromList(oldNodes)) {
      Point center = MapSequence.fromMap(coordinates).get(node);
      Map<Direction2D, Integer> sizes = MapSequence.fromMap(nodeDirectionSizes).get(node);
      Dimension nodeSize = MapSequence.fromMap(nodeSizes).get(node);
      Rectangle rect = new Rectangle(center.x - MapSequence.fromMap(sizes).get(Direction2D.LEFT), center.y - MapSequence.fromMap(sizes).get(Direction2D.DOWN), nodeSize.width, nodeSize.height);
      graphLayout.setLayoutFor(node, rect);
    }
    for (Edge edge : ListSequence.fromList(oldEdges)) {
      List<Edge> history = embeddedGraph.findFullHistory(edge);
      List<Point> edgeLayout = ListSequence.fromList(new LinkedList<Point>());
      Node cur = edge.getSource();
      ListSequence.fromList(edgeLayout).addElement(new Point(MapSequence.fromMap(coordinates).get(cur)));
      for (Edge historyEdge : ListSequence.fromList(history)) {
        Node next = historyEdge.getOpposite(cur);
        ListSequence.fromList(edgeLayout).addElement(new Point(MapSequence.fromMap(coordinates).get(next)));
        cur = next;
      }
      shiftEnd(edge.getSource(), ListSequence.fromList(history).first(), ListSequence.fromList(edgeLayout).first(), nodeDirectionSizes, embeddedGraph, directions);
      shiftEnd(edge.getTarget(), ListSequence.fromList(history).last(), ListSequence.fromList(edgeLayout).last(), nodeDirectionSizes, embeddedGraph, directions);
      graphLayout.setLayoutFor(edge, edgeLayout);
    }
    List<Node> modificationSources = quasiModifier.getModificationSources();
    Iterator<List<Edge>> modifiedEdgesItr = ListSequence.fromList(modifiedEdges).iterator();
    Iterator<Node> sourcesItr = ListSequence.fromList(modificationSources).iterator();
    while (sourcesItr.hasNext()) {
      List<Edge> edges = modifiedEdgesItr.next();
      Node source = sourcesItr.next();
      splitEdges(graphLayout, edges, source);
    }
    return graphLayout;
  }

  private void splitEdges(GraphLayout layout, List<Edge> edges, Node node) {
    Edge firstEdge = ListSequence.fromList(edges).first();
    List<Point> path = layout.getLayoutFor(firstEdge);
    Direction2D dartsDir;
    if (firstEdge.getSource() == node) {
      dartsDir = GeomUtil.getDirection(ListSequence.fromList(path).getElement(0), ListSequence.fromList(path).getElement(1));
    } else {
      int last = ListSequence.fromList(path).count() - 1;
      dartsDir = GeomUtil.getDirection(ListSequence.fromList(path).getElement(last), ListSequence.fromList(path).getElement(last - 1));
    }
    Direction2D shiftDir = dartsDir.turnClockwise(3);
    int dx = shiftDir.dx();
    int dy = shiftDir.dy();
    int nodeLenght;
    if (dx > 0) {
      nodeLenght = layout.getLayoutFor(node).width;
    } else {
      nodeLenght = layout.getLayoutFor(node).height;
    }
    int unitShift = nodeLenght / (2 * ListSequence.fromList(edges).count());
    int curShift = 0;
    for (Edge edge : ListSequence.fromList(edges).reversedList()) {
      if (edge != ListSequence.fromList(edges).last()) {
        layout.removeStraightBends(edge);
        List<Point> edgeLayout = layout.getLayoutFor(edge);
        List<Point> pointsToShift;
        if (edge.getSource() == node) {
          pointsToShift = ListSequence.fromListAndArray(new ArrayList<Point>(), ListSequence.fromList(edgeLayout).getElement(0), ListSequence.fromList(edgeLayout).getElement(1));
        } else {
          int last = ListSequence.fromList(edgeLayout).count() - 1;
          pointsToShift = ListSequence.fromListAndArray(new ArrayList<Point>(), ListSequence.fromList(edgeLayout).getElement(last), ListSequence.fromList(edgeLayout).getElement(last - 1));
        }
        for (Point point : ListSequence.fromList(pointsToShift)) {
          point.translate(dx * curShift, dy * curShift);
        }
      }
      curShift += unitShift;
    }
  }

  private GraphLayout getLayoutFromEmbeddedGraphByPulling(EmbeddedGraph embeddedGraph, Map<Node, Dimension> nodeSizes) {
    Graph graph = embeddedGraph.getGraph();
    List<Edge> oldEdges = ListSequence.fromList(new ArrayList<Edge>());
    ListSequence.fromList(oldEdges).addSequence(ListSequence.fromList(graph.getEdges()));
    List<Node> oldNodes = ListSequence.fromList(new ArrayList<Node>());
    ListSequence.fromList(oldNodes).addSequence(SetSequence.fromSet(MapSequence.fromMap(nodeSizes).keySet()));
    Map<Dart, Integer> bends = MapSequence.fromMap(new HashMap<Dart, Integer>());
    Map<Dart, Integer> angles = MapSequence.fromMap(new HashMap<Dart, Integer>());
    QuasiOrthogonalRepresentation.getRepresentation(embeddedGraph, bends, angles);
    new QuasiRepresentationModifier(embeddedGraph, bends, angles).reduceToOrthogonalRepresentation();
    OrthogonalRepresentation.replaceBendsByNodes(embeddedGraph, bends, angles);
    Map<Dart, Direction2D> directions = OrthogonalRepresentation.getDirections(embeddedGraph, angles);
    EmbeddedGraphModifier modifier = new EmbeddedGraphModifier(embeddedGraph);
    modifier.setDartDirections(directions);
    modifier.makeRectangularFaces();
    if (SHOW_INFO > 0) {
      System.out.println("modified graph: " + embeddedGraph);
    }
    EdgeLengthComputer lengthComputer = new EdgeLengthComputer();
    lengthComputer.setUnitLength(myUnitLength);
    Map<Edge, Integer> lengths = lengthComputer.compute(embeddedGraph, directions);
    CoordinatePlacer placer = new CoordinatePlacer(embeddedGraph, lengths, directions);
    Map<Node, Point> coordinates = placer.getCoordinates();
    GraphPointLayout graphPointLayout = new GraphPointLayout(graph);
    for (Node node : ListSequence.fromList(oldNodes)) {
      graphPointLayout.setLayoutFor(node, MapSequence.fromMap(coordinates).get(node));
    }
    for (Edge edge : ListSequence.fromList(oldEdges)) {
      List<Edge> history = embeddedGraph.findFullHistory(edge);
      List<Point> edgeLayout = ListSequence.fromList(new LinkedList<Point>());
      Node cur = edge.getSource();
      ListSequence.fromList(edgeLayout).addElement(new Point(MapSequence.fromMap(coordinates).get(cur)));
      for (Edge historyEdge : ListSequence.fromList(history)) {
        Node next = historyEdge.getOpposite(cur);
        ListSequence.fromList(edgeLayout).addElement(new Point(MapSequence.fromMap(coordinates).get(next)));
        cur = next;
      }
      graphPointLayout.setLayoutFor(edge, edgeLayout);
    }

    Map<Node, Map<Direction2D, Integer>> nodeDirectionSizes = MapSequence.fromMap(new HashMap<Node, Map<Direction2D, Integer>>());
    for (Node node : ListSequence.fromList(oldNodes)) {
      Map<Direction2D, Integer> directionSizes = MapSequence.fromMap(new HashMap<Direction2D, Integer>());
      Dimension size = MapSequence.fromMap(nodeSizes).get(node);
      int horSize = size.height;
      MapSequence.fromMap(directionSizes).put(Direction2D.UP, horSize / 2);
      MapSequence.fromMap(directionSizes).put(Direction2D.DOWN, horSize - MapSequence.fromMap(directionSizes).get(Direction2D.UP));
      int verSize = size.width;
      MapSequence.fromMap(directionSizes).put(Direction2D.LEFT, verSize / 2);
      MapSequence.fromMap(directionSizes).put(Direction2D.RIGHT, verSize - MapSequence.fromMap(directionSizes).get(Direction2D.LEFT));
      MapSequence.fromMap(nodeDirectionSizes).put(node, directionSizes);
    }

    for (Node node : ListSequence.fromList(oldNodes)) {
      graphPointLayout = pullPointLayout(graphPointLayout, graphPointLayout.getLayoutFor(node), MapSequence.fromMap(nodeDirectionSizes).get(node));
    }
    GraphLayout graphLayout = new GraphLayout(graph);
    for (Node node : ListSequence.fromList(oldNodes)) {
      Point center = graphPointLayout.getLayoutFor(node);
      Map<Direction2D, Integer> sizes = MapSequence.fromMap(nodeDirectionSizes).get(node);
      Dimension nodeSize = MapSequence.fromMap(nodeSizes).get(node);
      Rectangle rect = new Rectangle(center.x - MapSequence.fromMap(sizes).get(Direction2D.LEFT), center.y - MapSequence.fromMap(sizes).get(Direction2D.DOWN), nodeSize.width, nodeSize.height);
      graphLayout.setLayoutFor(node, rect);
    }
    for (Edge edge : ListSequence.fromList(oldEdges)) {
      List<Edge> history = embeddedGraph.findFullHistory(edge);
      List<Point> edgeLayout = graphPointLayout.getLayoutFor(edge);
      /*
        shiftEnd(edge.getSource(), ListSequence.fromList(history).first(), ListSequence.fromList(edgeLayout).first(), nodeDirectionSizes, embeddedGraph, directions);
        shiftEnd(edge.getTarget(), ListSequence.fromList(history).last(), ListSequence.fromList(edgeLayout).last(), nodeDirectionSizes, embeddedGraph, directions);
      */
      graphLayout.setLayoutFor(edge, edgeLayout);
    }
    return graphLayout;
  }

  private void shiftEnd(Node node, Edge edge, Point end, Map<Node, Map<Direction2D, Integer>> nodeDirectionSizes, EmbeddedGraph embeddedGraph, Map<Dart, Direction2D> directions) {
    if (MapSequence.fromMap(nodeDirectionSizes).containsKey(node)) {
      Dart dart = embeddedGraph.getSourceDart(edge, node);
      Direction2D dir = MapSequence.fromMap(directions).get(dart);
      int shift = MapSequence.fromMap(MapSequence.fromMap(nodeDirectionSizes).get(node)).get(dir);
      end.translate(shift * dir.dx(), shift * dir.dy());
    }
  }

  public GraphPointLayout pullPointLayout(GraphPointLayout layout, Point center, Map<Direction2D, Integer> shift) {
    Graph graph = layout.getGraph();
    GraphPointLayout pulledLayout = new GraphPointLayout(graph);
    Map<Node, Point> nodeLayout = layout.getNodeLayout();
    for (Node node : SetSequence.fromSet(MapSequence.fromMap(nodeLayout).keySet())) {
      Point nodePoint = MapSequence.fromMap(nodeLayout).get(node);
      pulledLayout.setLayoutFor(node, GeomUtil.pull(nodePoint, center, shift));
    }
    Map<Edge, List<Point>> edgeLayout = layout.getEdgeLayout();
    for (Edge edge : SetSequence.fromSet(MapSequence.fromMap(edgeLayout).keySet())) {
      List<Point> path = MapSequence.fromMap(edgeLayout).get(edge);
      List<Point> newPath = ListSequence.fromList(new LinkedList<Point>());
      for (Point point : ListSequence.fromList(path)) {
        ListSequence.fromList(newPath).addElement(GeomUtil.pull(point, center, shift));
      }
      pulledLayout.setLayoutFor(edge, newPath);
    }
    return pulledLayout;
  }
}
