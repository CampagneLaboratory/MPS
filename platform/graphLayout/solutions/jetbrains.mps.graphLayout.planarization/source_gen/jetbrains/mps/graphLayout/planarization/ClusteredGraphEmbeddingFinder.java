package jetbrains.mps.graphLayout.planarization;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import java.util.List;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.graphLayout.planarGraph.EmbeddedGraph;
import jetbrains.mps.graphLayout.graph.Graph;
import jetbrains.mps.graphLayout.graph.ClusteredGraph;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.graphLayout.planarGraph.CheckEmbeddedGraph;

public class ClusteredGraphEmbeddingFinder implements IEmbeddingFinder {
  private Map<Node, List<Edge>> myClusterBorderMap;

  public ClusteredGraphEmbeddingFinder() {
  }

  public EmbeddedGraph find(Graph graph) {
    if (graph instanceof ClusteredGraph) {
      ClusteredGraph clusteredGraph = ((ClusteredGraph) graph);
      Node root = clusteredGraph.getRoot();
      myClusterBorderMap = MapSequence.fromMap(new HashMap<Node, List<Edge>>());
      ClusterEmbeddingConstructor constructor = new ClusterEmbeddingConstructor(clusteredGraph, root, null);
      constructor.setClusterBorderMap(myClusterBorderMap);
      EmbeddedGraph embeddedGraph = constructor.constructEmbedding();
      CheckEmbeddedGraph.checkEmbeddedGraph(embeddedGraph);
      return embeddedGraph;
    } else {
      throw new RuntimeException("can find embedding of clustered graphs only");
    }
  }

  public Map<Node, List<Edge>> getClusterBorderMap() {
    return myClusterBorderMap;
  }
}
