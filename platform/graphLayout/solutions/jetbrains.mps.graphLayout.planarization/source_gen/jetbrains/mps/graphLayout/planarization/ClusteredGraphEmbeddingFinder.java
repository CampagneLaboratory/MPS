package jetbrains.mps.graphLayout.planarization;

/*Generated by MPS */

import jetbrains.mps.graphLayout.planarGraph.EmbeddedGraph;
import jetbrains.mps.graphLayout.graph.IClusteredGraph;
import jetbrains.mps.graphLayout.graph.INode;
import java.util.List;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.graphLayout.graph.IEdge;
import jetbrains.mps.graphLayout.graph.Graph;
import java.util.Map;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.graphLayout.algorithms.ConnectivityComponents;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.graphLayout.planarGraph.Face;
import jetbrains.mps.graphLayout.planarGraph.Dart;
import jetbrains.mps.graphLayout.planarGraph.CheckEmbeddedGraph;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class ClusteredGraphEmbeddingFinder {
  private static int DEBUG = 1;

  public ClusteredGraphEmbeddingFinder() {
  }

  public EmbeddedGraph find(IClusteredGraph clusteredGraph) {
    return find(clusteredGraph, clusteredGraph.getRoot(), null);
  }

  private EmbeddedGraph find(IClusteredGraph graph, INode cluster, List<Edge> outerEdges) {
    Iterable<INode> subclusters = Sequence.fromIterable(cluster.getOutEdges()).select(new ISelector<IEdge, INode>() {
      public INode select(IEdge edge) {
        return edge.getTarget();
      }
    });
    if (Sequence.fromIterable(subclusters).count() == 0) {
      // single node 
    } else {
      Graph clusterGraph = new Graph();
      Map<INode, Node> nodeMap = MapSequence.fromMap(new HashMap<INode, Node>());
      for (INode subcluster : Sequence.fromIterable(subclusters)) {
        Node clusterNode = clusterGraph.createNode();
        for (INode node : graph.getNodesInCluster(subcluster)) {
          MapSequence.fromMap(nodeMap).put(node, clusterNode);
        }
      }
      final Set<INode> clusterNodes = MapSequence.fromMap(nodeMap).keySet();
      for (INode source : SetSequence.fromSet(clusterNodes)) {
        for (IEdge edge : source.getOutEdges()) {
          INode target = edge.getTarget();
          if (SetSequence.fromSet(clusterNodes).contains(target)) {
            clusterGraph.connect(MapSequence.fromMap(nodeMap).get(source), MapSequence.fromMap(nodeMap).get(target));
          }
        }
      }
      Set<Edge> addedEdges = ConnectivityComponents.makeConnected(clusterGraph);
      EmbeddedGraph embeddedGraph = EmbeddingFinderFactory.getFinder().find(clusterGraph);
      List<Edge> circle = ListSequence.fromList(new ArrayList<Edge>(ListSequence.fromList(outerEdges).count()));
      Node prev = null;
      Face outerFace = new Face(clusterGraph);
      for (Edge edge : ListSequence.fromList(outerEdges)) {
        Node node = clusterGraph.addNode();
        if (prev != null) {
          Edge newEdge = clusterGraph.connect(prev, node);
          ListSequence.fromList(circle).addElement(newEdge);
          outerFace.addLast(new Dart(newEdge, node));
        }
        prev = node;
      }
      Node first = ListSequence.fromList(circle).first().getSource();
      Edge lastEdge = clusterGraph.connect(prev, first);
      ListSequence.fromList(circle).addElement(lastEdge);
      outerFace.addLast(new Dart(lastEdge, first));
      Face clusterOuterFace = embeddedGraph.getOuterFace();
      Node clusterFirstNode = ListSequence.fromList(clusterOuterFace.getDarts()).first().getSource();
      Edge bridge = clusterGraph.connect(first, clusterFirstNode);
      Face ringFace = new Face(clusterGraph);
      ringFace.addLast(new Dart(bridge, clusterFirstNode));
      for (Edge edge : ListSequence.fromList(circle)) {
        ringFace.addLast(new Dart(edge, edge.getSource()));
      }
      ringFace.addLast(new Dart(bridge, first));
      for (Dart dart : ListSequence.fromList(clusterOuterFace.getDarts())) {
        ringFace.addLast(dart);
      }
      embeddedGraph.removeFace(outerFace);
      embeddedGraph.addFace(ringFace);
      embeddedGraph.addFace(outerFace);
      if (DEBUG > 0) {
        CheckEmbeddedGraph.checkEmbeddedGraph(embeddedGraph);
      }
      int i = 0;
      for (Edge outerEdge : ListSequence.fromList(outerEdges)) {
        Node outerNode = ListSequence.fromList(circle).getElement(i++).getSource();
        Node clusterNode = ListSequence.fromList(outerEdge.getAdjacentNodes()).findFirst(new IWhereFilter<Node>() {
          public boolean accept(Node it) {
            return SetSequence.fromSet(clusterNodes).contains(it);
          }
        });
        Edge edge = clusterGraph.connect(outerNode, clusterNode);
        edge.removeFromGraph();
        ShortestPathEmbeddingFinder.restoreEdge(embeddedGraph, edge);
      }

    }
    return null;
  }
}
