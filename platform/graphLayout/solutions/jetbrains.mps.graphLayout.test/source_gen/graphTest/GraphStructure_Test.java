package graphTest;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.graphLayout.graph.Graph;
import sampleGraphs.SimpleDirectedGraphs;
import jetbrains.mps.graphLayout.graph.Edge;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.graphLayout.graph.Node;
import junit.framework.Assert;

public class GraphStructure_Test extends TestCase {
  public void test_chain3() throws Exception {
    Graph chain = SimpleDirectedGraphs.chain(3);
    testStructure(chain);
    Edge e = ListSequence.fromList(chain.getNode(0).getOutEdges()).getElement(0);
    e.removeFromGraph();
    testStructure(chain);
    chain.addEdge(e);
    testStructure(chain);
    chain.addEdgeByIndex(2, 0);
    testStructure(chain);
  }

  public void test_cycle5() throws Exception {
    Graph cycle = SimpleDirectedGraphs.cycle(5);
    testStructure(cycle);
    Edge e = cycle.addEdgeByIndex(4, 0);
    cycle.addEdgeByIndex(0, 4);
    e.removeFromGraph();
    testStructure(cycle);
  }

  public void testStructure(Graph g) {
    Set<Integer> index = SetSequence.fromSet(new HashSet<Integer>());
    for (Node node : ListSequence.fromList(g.getNodes())) {
      int nodeIndex = node.getIndex();
      Assert.assertTrue(nodeIndex >= 0);
      Assert.assertTrue(nodeIndex < g.getNumNodes());
      Assert.assertFalse(SetSequence.fromSet(index).contains(nodeIndex));
      SetSequence.fromSet(index).addElement(nodeIndex);
      for (Edge edge : ListSequence.fromList(node.getOutEdges())) {
        Assert.assertTrue(ListSequence.fromList(edge.getSource().getOutEdges()).contains(edge));
        Assert.assertTrue(ListSequence.fromList(edge.getTarget().getInEdges()).contains(edge));
      }
    }
  }
}
