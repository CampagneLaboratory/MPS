package graphLayoutTest;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graphLayout.GraphLayout;
import jetbrains.mps.graphLayout.graph.Graph;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import junit.framework.Assert;
import jetbrains.mps.graphLayout.graph.Edge;
import java.util.List;
import java.awt.Point;
import java.awt.Rectangle;
import jetbrains.mps.graphLayout.util.GeomUtil;

public class GraphLayoutChecker {
  public static void checkLayout(GraphLayout layout) {
    Graph graph = layout.getGraph();
    for (Node node : ListSequence.fromList(graph.getNodes())) {
      Assert.assertFalse(layout.getLayoutFor(node) == null);
    }
    for (Edge edge : ListSequence.fromList(graph.getEdges())) {
      List<Point> edgeLayout = layout.getLayoutFor(edge);
      Assert.assertFalse(edgeLayout == null);
    }
    checkEdgeEnds(layout);
  }

  public static void checkEdgeEnds(GraphLayout layout) {
    Graph graph = layout.getGraph();
    for (Edge edge : ListSequence.fromList(graph.getEdges())) {
      List<Point> edgeLayout = layout.getLayoutFor(edge);
      Rectangle sourceRect = layout.getLayoutFor(edge.getSource());
      Assert.assertTrue(GeomUtil.onBorder(ListSequence.fromList(edgeLayout).first(), sourceRect));
      Rectangle targetRect = layout.getLayoutFor(edge.getTarget());
      Assert.assertTrue(GeomUtil.onBorder(ListSequence.fromList(edgeLayout).last(), targetRect));
    }
  }
}
