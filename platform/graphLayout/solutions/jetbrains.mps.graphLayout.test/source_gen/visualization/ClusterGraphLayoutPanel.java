package visualization;

/*Generated by MPS */

import jetbrains.mps.graphLayout.graph.Graph;
import java.util.Scanner;
import jetbrains.mps.graphLayout.graph.ClusteredGraph;
import jetbrains.mps.graphLayout.graph.Node;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.graphLayout.flowOrthogonalLayout.ClusterOrthogonalFlowLayouter;
import javax.swing.SwingUtilities;

public class ClusterGraphLayoutPanel extends OrthogonalLayoutTestPanel {
  public ClusterGraphLayoutPanel() {
    super();
  }

  @Override
  protected Graph readGraph(Scanner scanner) {
    ClusteredGraph graph = new ClusteredGraph();
    GraphIO.scanGraph(scanner, graph);
    Graph tree = graph.getInclusionTree();
    GraphIO.scanGraph(scanner, tree);
    int cur = 0;
    for (Node cluster : ListSequence.fromList(tree.getNodes())) {
      if (ListSequence.fromList(cluster.getOutEdges()).count() == 0) {
        graph.setNodeInCluster(cluster, graph.getNode(cur++));
      }
    }
    graph.setRoot(tree.getNode(0));
    return graph;
  }

  @Override
  protected void initLayout() {
    myLayouter = new ClusterOrthogonalFlowLayouter();
    myPainter = new ClusterLayoutPainter();
  }

  public static void main(String[] args) {
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new ClusterGraphLayoutPanel().create();
      }
    });
  }
}
