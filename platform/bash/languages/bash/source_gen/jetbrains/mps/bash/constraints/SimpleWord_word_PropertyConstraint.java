package jetbrains.mps.bash.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.INodePropertySetter;
import jetbrains.mps.smodel.constraints.INodePropertyValidator;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.bash.behavior.SimpleWord_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class SimpleWord_word_PropertyConstraint implements IModelConstraints, INodePropertySetter, INodePropertyValidator {
  public SimpleWord_word_PropertyConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodePropertySetter("jetbrains.mps.bash.structure.SimpleWord", "word", this);
    manager.registerNodePropertyValidator("jetbrains.mps.bash.structure.SimpleWord", "word", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodePropertySetter("jetbrains.mps.bash.structure.SimpleWord", "word");
    manager.unRegisterNodePropertyValidator("jetbrains.mps.bash.structure.SimpleWord", "word");
  }

  public void execPropertySet(final SNode node, final String propertyName, final String propertyValue, final IScope scope) {
    if (!(SimpleWord_Behavior.call_splitValue_3147078024759753598(node, (SPropertyOperations.getString(propertyValue)), scope))) {
      SPropertyOperations.set(node, "word", (SPropertyOperations.getString(propertyValue)));
    }
  }

  public boolean checkPropertyValue(final SNode node, final String propertyName, final String propertyValue, final IScope scope) {
    if ((SPropertyOperations.getString(propertyValue)).contains("#")) {
      return false;
    }
    if ((SPropertyOperations.getString(propertyValue)).contains(";")) {
      return false;
    }
    return true;
  }
}
