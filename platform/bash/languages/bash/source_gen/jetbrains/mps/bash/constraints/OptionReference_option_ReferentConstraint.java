package jetbrains.mps.bash.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bash.behavior.ExternalCommandCall_Behavior;
import jetbrains.mps.smodel.search.ISearchScope;
import jetbrains.mps.smodel.constraints.ProviderGeneratedSearchScope;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ISequence;
import jetbrains.mps.smodel.SNodePointer;

public class OptionReference_option_ReferentConstraint extends BaseNodeReferenceSearchScopeProvider implements IModelConstraints {
  public OptionReference_option_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("jetbrains.mps.bash.structure.OptionReference", "option", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("jetbrains.mps.bash.structure.OptionReference", "option");
  }

  public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    SNode call = SNodeOperations.getAncestor(_context.getEnclosingNode(), "jetbrains.mps.bash.structure.ExternalCommandCall", false, false);
    return ExternalCommandCall_Behavior.call_getAvailableOptions_7803330421062325454(call);
  }

  public ISearchScope createNodeReferentSearchScope(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    return new ProviderGeneratedSearchScope(this, operationContext, _context) {
      public boolean isInScope(SNode checkedNode) {
        SNode call = SNodeOperations.getAncestor(_context.getEnclosingNode(), "jetbrains.mps.bash.structure.ExternalCommandCall", false, false);
        Iterable<SNode> optionSetReferences = ListSequence.fromList(SLinkOperations.getTargets(call, "refToOptions", true)).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, "jetbrains.mps.bash.structure.OptionSetReference");
          }
        });
        return Sequence.fromIterable(optionSetReferences).<Iterable<SNode>>select(new ISelector<SNode, ISequence<SNode>>() {
          public ISequence<SNode> select(SNode it) {
            return ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(it, "jetbrains.mps.bash.structure.OptionSetReference"), "refToOptions", true)).where(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return (SLinkOperations.getTarget(it, "option", false) != null);
              }
            }).<SNode>select(new ISelector<SNode, SNode>() {
              public SNode select(SNode it) {
                return SLinkOperations.getTarget(it, "option", false);
              }
            });
          }
        }).distinct().count() == Sequence.fromIterable(optionSetReferences).count();
      }
    };
  }

  public SNodePointer getSearchScopeValidatorNodePointer() {
    return new SNodePointer("r:32c4fb44-9e66-4976-aa43-e37da5fe27dd(jetbrains.mps.bash.constraints)", "5969077637214426941");
  }
}
