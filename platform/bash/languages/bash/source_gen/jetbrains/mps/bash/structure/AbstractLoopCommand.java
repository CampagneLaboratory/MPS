package jetbrains.mps.bash.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class AbstractLoopCommand extends AbstractCommand implements ICompoundCommand {
  public static final String concept = "jetbrains.mps.bash.structure.AbstractLoopCommand";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String COMMANDS = "commands";

  public AbstractLoopCommand(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(AbstractLoopCommand.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(AbstractLoopCommand.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(AbstractLoopCommand.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(AbstractLoopCommand.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(AbstractLoopCommand.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(AbstractLoopCommand.VIRTUAL_PACKAGE, value);
  }

  public InputLines getCommands() {
    return (InputLines) this.getChild(InputLines.class, AbstractLoopCommand.COMMANDS);
  }

  public void setCommands(InputLines node) {
    super.setChild(AbstractLoopCommand.COMMANDS, node);
  }

  public static AbstractLoopCommand newInstance(SModel sm, boolean init) {
    return (AbstractLoopCommand) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.bash.structure.AbstractLoopCommand", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static AbstractLoopCommand newInstance(SModel sm) {
    return AbstractLoopCommand.newInstance(sm, false);
  }
}
