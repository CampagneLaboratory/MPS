package jetbrains.mps.bash.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import jetbrains.mps.lang.core.structure.Attribute;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class CommentedText extends BaseConcept implements IComment {
  public static final String concept = "jetbrains.mps.bash.structure.CommentedText";
  public static final String COMMENT = "comment";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String _$ATTRIBUTE = "_$attribute";

  public CommentedText(SNode node) {
    super(node);
  }

  public String getComment() {
    return this.getProperty(CommentedText.COMMENT);
  }

  public void setComment(String value) {
    this.setProperty(CommentedText.COMMENT, value);
  }

  public String getShortDescription() {
    return this.getProperty(CommentedText.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(CommentedText.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(CommentedText.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(CommentedText.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(CommentedText.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(CommentedText.VIRTUAL_PACKAGE, value);
  }

  public int get_$attributesCount() {
    return this.getChildCount(CommentedText._$ATTRIBUTE);
  }

  public Iterator<Attribute> _$attributes() {
    return this.children(Attribute.class, CommentedText._$ATTRIBUTE);
  }

  public List<Attribute> get_$attributes() {
    return this.getChildren(Attribute.class, CommentedText._$ATTRIBUTE);
  }

  public void add_$attribute(Attribute node) {
    this.addChild(CommentedText._$ATTRIBUTE, node);
  }

  public void insert_$attribute(Attribute prev, Attribute node) {
    this.insertChild(prev, CommentedText._$ATTRIBUTE, node);
  }

  public static CommentedText newInstance(SModel sm, boolean init) {
    return (CommentedText) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.bash.structure.CommentedText", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static CommentedText newInstance(SModel sm) {
    return CommentedText.newInstance(sm, false);
  }
}
