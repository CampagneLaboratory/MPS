package jetbrains.mps.gtext.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class GConditionalLine extends GItem {
  public static final String concept = "jetbrains.mps.gtext.structure.GConditionalLine";
  public static String IS_SEPARATE = "isSeparate";
  public static String ITEM = "item";

  public GConditionalLine(SNode node) {
    super(node);
  }

  public boolean getIsSeparate() {
    return this.getBooleanProperty(GConditionalLine.IS_SEPARATE);
  }

  public void setIsSeparate(boolean value) {
    this.setBooleanProperty(GConditionalLine.IS_SEPARATE, value);
  }

  public int getItemsCount() {
    return this.getChildCount(GConditionalLine.ITEM);
  }

  public Iterator<GItem> items() {
    return this.children(GConditionalLine.ITEM);
  }

  public List<GItem> getItems() {
    return this.getChildren(GConditionalLine.ITEM);
  }

  public void addItem(GItem node) {
    this.addChild(GConditionalLine.ITEM, node);
  }

  public void insertItem(GItem prev, GItem node) {
    this.insertChild(prev, GConditionalLine.ITEM, node);
  }


  public static GConditionalLine newInstance(SModel sm, boolean init) {
    return (GConditionalLine)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.gtext.structure.GConditionalLine", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static GConditionalLine newInstance(SModel sm) {
    return GConditionalLine.newInstance(sm, false);
  }

}
