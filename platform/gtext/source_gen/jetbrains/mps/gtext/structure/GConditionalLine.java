package jetbrains.mps.gtext.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class GConditionalLine extends GItem implements GCompositeItem {
  public static final String concept = "jetbrains.mps.gtext.structure.GConditionalLine";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String IS_SEPARATE = "isSeparate";
  public static final String ITEM = "item";
  public static final String _$ATTRIBUTE = "_$attribute";

  public GConditionalLine(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(GConditionalLine.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(GConditionalLine.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(GConditionalLine.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(GConditionalLine.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(GConditionalLine.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(GConditionalLine.VIRTUAL_PACKAGE, value);
  }

  public boolean getIsSeparate() {
    return this.getBooleanProperty(GConditionalLine.IS_SEPARATE);
  }

  public void setIsSeparate(boolean value) {
    this.setBooleanProperty(GConditionalLine.IS_SEPARATE, value);
  }

  public int getItemsCount() {
    return this.getChildCount(GConditionalLine.ITEM);
  }

  public Iterator<GItem> items() {
    return this.children(GItem.class, GConditionalLine.ITEM);
  }

  public List<GItem> getItems() {
    return this.getChildren(GItem.class, GConditionalLine.ITEM);
  }

  public void addItem(GItem node) {
    this.addChild(GConditionalLine.ITEM, node);
  }

  public void insertItem(GItem prev, GItem node) {
    this.insertChild(prev, GConditionalLine.ITEM, node);
  }

  public int get_$attributesCount() {
    return this.getChildCount(GConditionalLine._$ATTRIBUTE);
  }

  public Iterator<Attribute> _$attributes() {
    return this.children(Attribute.class, GConditionalLine._$ATTRIBUTE);
  }

  public List<Attribute> get_$attributes() {
    return this.getChildren(Attribute.class, GConditionalLine._$ATTRIBUTE);
  }

  public void add_$attribute(Attribute node) {
    this.addChild(GConditionalLine._$ATTRIBUTE, node);
  }

  public void insert_$attribute(Attribute prev, Attribute node) {
    this.insertChild(prev, GConditionalLine._$ATTRIBUTE, node);
  }

  public static GConditionalLine newInstance(SModel sm, boolean init) {
    return (GConditionalLine) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.gtext.structure.GConditionalLine", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static GConditionalLine newInstance(SModel sm) {
    return GConditionalLine.newInstance(sm, false);
  }
}
