package jetbrains.mps.gtext.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import java.util.Iterator;
import java.util.List;

public class GSeparatorItemList extends GItem {
  public static final String concept = "webr.gtext.structure.GSeparatorItemList";
  public static String SEPARATOR = "separator";
  public static String ITEM = "item";

  public GSeparatorItemList(SNode node) {
    super(node);
  }

  public static GSeparatorItemList newInstance(SModel sm, boolean init) {
    return (GSeparatorItemList)SModelUtil_new.instantiateConceptDeclaration("webr.gtext.structure.GSeparatorItemList", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static GSeparatorItemList newInstance(SModel sm) {
    return GSeparatorItemList.newInstance(sm, false);
  }


  public GItem getSeparator() {
    return (GItem)this.getChild(GSeparatorItemList.SEPARATOR);
  }

  public void setSeparator(GItem node) {
    super.setChild(GSeparatorItemList.SEPARATOR, node);
  }

  public int getItemsCount() {
    return this.getChildCount(GSeparatorItemList.ITEM);
  }

  public Iterator<GItem> items() {
    return this.children(GSeparatorItemList.ITEM);
  }

  public List<GItem> getItems() {
    return this.getChildren(GSeparatorItemList.ITEM);
  }

  public void addItem(GItem node) {
    this.addChild(GSeparatorItemList.ITEM, node);
  }

  public void insertItem(GItem prev, GItem node) {
    this.insertChild(prev, GSeparatorItemList.ITEM, node);
  }

}
