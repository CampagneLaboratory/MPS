package jetbrains.mps.gtext.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.gtext.behavior.GItem_Behavior;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.nodeEditor.cellMenu.DefaultReferenceSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class GItemList_Editor extends DefaultNodeEditor {

  /* package */AbstractCellListHandler myListHandler_1184872998715;
  /* package */AbstractCellListHandler myListHandler_1184873058677;

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createAlternation1184872993737(context, node);
  }

  public EditorCell createAlternation1184872993737(EditorContext context, SNode node) {
    boolean alternationCondition = true;
    alternationCondition = GItemList_Editor.renderingCondition9588_0(node, context, context.getOperationContext().getScope());
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = this.createCollection1184873031702(context, node);
    } else
    {
      editorCell = this.createCollection1184872998713(context, node);
    }
    setupBasic_Alternation_11848729937371184872993737(editorCell, node, context);
    return editorCell;
  }

  public EditorCell createCollection1184872998713(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_11848729987131184872998713(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1184872998714(context, node, "*"));
    editorCell.addEditorCell(this.createRefNodeList1184872998715(context, node));
    return editorCell;
  }

  public EditorCell createCollection1184873031702(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_11848730317021184873031702(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1184873034765(context, node, "*"));
    editorCell.addEditorCell(this.createCollection1184873045252(context, node));
    return editorCell;
  }

  public EditorCell createCollection1184873045252(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_11848730452521184873045252(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1184873045253(context, node, "  "));
    editorCell.addEditorCell(this.createRefNodeList1184873058677(context, node));
    return editorCell;
  }

  public EditorCell createConstant1184872998714(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11848729987141184872998714(editorCell, node, context);
    setupLabel_Constant_1184872998714_1184872998714(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1184873034765(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11848730347651184873034765(editorCell, node, context);
    setupLabel_Constant_1184873034765_1184873034765(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1184873045253(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11848730452531184873045253(editorCell, node, context);
    setupLabel_Constant_1184873045253_1184873045253(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createRefNodeList1184872998715(EditorContext context, SNode node) {
    if (this.myListHandler_1184872998715 == null) {
      this.myListHandler_1184872998715 = new GItemList_Editor.itemListHandler_9588_0(node, "item", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1184872998715.createCells(context, new CellLayout_Horizontal(), false);
    setupBasic_refNodeList_item1184872998715(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.setRole(this.myListHandler_1184872998715.getElementRole());
    return editorCell;
  }

  public EditorCell createRefNodeList1184873058677(EditorContext context, SNode node) {
    if (this.myListHandler_1184873058677 == null) {
      this.myListHandler_1184873058677 = new GItemList_Editor.itemListHandler_9588_1(node, "item", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1184873058677.createCells(context, new CellLayout_Vertical(), false);
    setupBasic_refNodeList_item1184873058677(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.setRole(this.myListHandler_1184873058677.getElementRole());
    return editorCell;
  }


  private static void setupBasic_Alternation_11848729937371184872993737(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Alternation_1184872993737");
  }

  private static void setupBasic_Collection_11848729987131184872998713(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1184872998713");
  }

  private static void setupBasic_Constant_11848729987141184872998714(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1184872998714");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.TEXT_COLOR, MPSColors.blue);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_refNodeList_item1184872998715(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_item");
  }

  private static void setupBasic_Collection_11848730317021184873031702(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1184873031702");
  }

  private static void setupBasic_Constant_11848730347651184873034765(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1184873034765");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.TEXT_COLOR, MPSColors.blue);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_11848730452521184873045252(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1184873045252");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Constant_11848730452531184873045253(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1184873045253");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_refNodeList_item1184873058677(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_item");
  }

  private static void setupLabel_Constant_1184872998714_1184872998714(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_item_1184872998715(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1184873034765_1184873034765(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1184873045253_1184873045253(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_item_1184873058677(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  public static boolean renderingCondition9588_0(SNode node, EditorContext editorContext, IScope scope) {
    return GItem_Behavior.call_isComplex_1213877298853(node);
  }

  public static class itemListHandler_9588_0 extends RefNodeListHandler {

    public itemListHandler_9588_0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(context);
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      return super.createSeparatorCell(context);
    }

}
  public static class itemListHandler_9588_1 extends RefNodeListHandler {

    public itemListHandler_9588_1(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(context);
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      return super.createSeparatorCell(context);
    }

}

}
