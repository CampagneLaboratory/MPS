package jetbrains.mps.analyzers.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.lang.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class Instruction extends BaseConcept implements INamedConcept {
  public static final String concept = "jetbrains.mps.analyzers.structure.Instruction";
  public static final String NAME = "name";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String PARAMETER = "parameter";

  public Instruction(SNode node) {
    super(node);
  }

  public String getName() {
    return this.getProperty(Instruction.NAME);
  }

  public void setName(String value) {
    this.setProperty(Instruction.NAME, value);
  }

  public String getShortDescription() {
    return this.getProperty(Instruction.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(Instruction.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(Instruction.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(Instruction.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(Instruction.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(Instruction.VIRTUAL_PACKAGE, value);
  }

  public int getParametersCount() {
    return this.getChildCount(Instruction.PARAMETER);
  }

  public Iterator<InstructionParameter> parameters() {
    return this.children(InstructionParameter.class, Instruction.PARAMETER);
  }

  public List<InstructionParameter> getParameters() {
    return this.getChildren(InstructionParameter.class, Instruction.PARAMETER);
  }

  public void addParameter(InstructionParameter node) {
    this.addChild(Instruction.PARAMETER, node);
  }

  public void insertParameter(InstructionParameter prev, InstructionParameter node) {
    this.insertChild(prev, Instruction.PARAMETER, node);
  }

  public static Instruction newInstance(SModel sm, boolean init) {
    return (Instruction) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.analyzers.structure.Instruction", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static Instruction newInstance(SModel sm) {
    return Instruction.newInstance(sm, false);
  }
}
