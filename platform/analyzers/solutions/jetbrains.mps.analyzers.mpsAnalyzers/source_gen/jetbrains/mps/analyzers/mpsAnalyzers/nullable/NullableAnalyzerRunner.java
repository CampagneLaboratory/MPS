package jetbrains.mps.analyzers.mpsAnalyzers.nullable;

/*Generated by MPS */

import jetbrains.mps.analyzers.runtime.framework.CustomAnalyzerRunner;
import java.util.Map;
import jetbrains.mps.smodel.SNode;
import java.util.List;
import jetbrains.mps.analyzers.runtime.framework.DataFlowConstructor;
import java.util.HashMap;
import jetbrains.mps.lang.dataFlow.MPSProgramBuilder;
import jetbrains.mps.lang.dataFlow.DataFlowManager;
import jetbrains.mps.lang.dataFlow.framework.DataFlowAnalyzer;
import jetbrains.mps.lang.dataFlow.framework.Program;
import jetbrains.mps.lang.dataFlow.framework.ProgramState;
import jetbrains.mps.lang.dataFlow.framework.AnalysisDirection;

public class NullableAnalyzerRunner extends CustomAnalyzerRunner<Map<SNode, NullableState>> {
  private Map<String, List<DataFlowConstructor>> myApplicableMap = new HashMap<String, List<DataFlowConstructor>>();

  public NullableAnalyzerRunner(SNode node) {
    super(null, null);
    myNode = node;
    myProgram = new MPSProgramBuilder(DataFlowManager.getInstance()).buildProgram(myNode);
    prepareProgram();
    myAnalyzer = new NullableAnalyzerRunner.NullableAnalyzer();
  }

  private void prepareProgram() {
    for (SNode descendant : myNode.getDescendants()) {
      String key = descendant.getConceptFqName();
      if (myApplicableMap.containsKey(key)) {
        for (DataFlowConstructor rule : myApplicableMap.get(key)) {
          if (rule.isApplicable(descendant)) {
            rule.performActions(myProgram);
          }
        }
      }
    }
  }

  public static class NullableAnalyzer implements DataFlowAnalyzer<Map<SNode, NullableState>> {
    public NullableAnalyzer() {
    }

    public Map<SNode, NullableState> initial(Program program) {
      Map<SNode, NullableState> result = new HashMap<SNode, NullableState>();
      return result;
    }

    public Map<SNode, NullableState> merge(Program program, List<Map<SNode, NullableState>> list) {
      return null;
    }

    public Map<SNode, NullableState> fun(Map<SNode, NullableState> input, ProgramState state) {
      return null;
    }

    public AnalysisDirection getDirection() {
      return AnalysisDirection.FORWARD;
    }
  }
}
