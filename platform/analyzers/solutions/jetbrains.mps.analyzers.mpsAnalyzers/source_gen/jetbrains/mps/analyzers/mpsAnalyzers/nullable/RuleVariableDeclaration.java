package jetbrains.mps.analyzers.mpsAnalyzers.nullable;

/*Generated by MPS */

import jetbrains.mps.analyzers.runtime.framework.DataFlowConstructor;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.lang.core.behavior.INamedConcept_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.dataFlow.framework.Program;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.dataFlow.framework.instructions.Instruction;

public class RuleVariableDeclaration extends DataFlowConstructor {
  public RuleVariableDeclaration() {
  }

  public boolean isApplicable(SNode node) {
    return SModelUtil_new.isAssignableConcept(INamedConcept_Behavior.call_getFqName_1213877404258(SNodeOperations.getConceptDeclaration(node)), getApplicableConceptFqName());
  }

  public String getApplicableConceptFqName() {
    return "jetbrains.mps.baseLanguage.structure.VariableDeclaration";
  }

  public void performActions(Program o, SNode node) {
    if (SLinkOperations.getTargets(node, "annotation", true) != null) {
      for (SNode annotation : SLinkOperations.getTargets(node, "annotation", true)) {
        String name = SPropertyOperations.getString(SLinkOperations.getTarget(annotation, "annotation", false), "name");
        if (SLinkOperations.getTarget(annotation, "annotation", false) == SNodeOperations.getNode("f:java_stub#org.jetbrains.annotations(org.jetbrains.annotations@java_stub)", "~Nullable")) {
          {
            int position = ((Program) (o)).getEnd(node);
            Instruction instruction = new nullableInstruction(node);
            instruction.setSource(node);
            ((Program) (o)).insert(instruction, position, true);
          }
        }
        if (SLinkOperations.getTarget(annotation, "annotation", false) == SNodeOperations.getNode("f:java_stub#org.jetbrains.annotations(org.jetbrains.annotations@java_stub)", "~NotNull")) {
          {
            int position = ((Program) (o)).getEnd(node);
            Instruction instruction = new notNullInstruction(node);
            instruction.setSource(node);
            ((Program) (o)).insert(instruction, position, true);
          }
        }
      }
    }
  }
}
