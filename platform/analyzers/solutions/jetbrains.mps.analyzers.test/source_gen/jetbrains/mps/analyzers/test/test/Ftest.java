package jetbrains.mps.analyzers.test.test;

/*Generated by MPS */

import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class Ftest {
  @Nullable
  private static String INSTANCE;

  @NotNull
  private String myNotNull = "";
  @Nullable
  private String myNull = null;

  public Ftest() {
  }

  @Nullable
  public String nulFunc() {
    String s = "";
    if (s == null) {
      return "";
    }
    return "";
  }

  public void f(@Nullable String s4) {
    String s = nulFunc();
    String s3 = "";
    if (null != s) {
      String s2 = s;
      s2.charAt(2);
      s3 = null;
      s.charAt(2);
    }
    if (s3 == null) {

    } else {
    }
    nulFunc().charAt(2);
    s.charAt(2);
    s3.charAt(2);
    @NotNull String s5;
    s5 = s4;
  }

  public void sf(String s2) {
    String s = s2;
    s = null;
    if (s == null) {

    } else {
      s.charAt(2);
    }
    if (INSTANCE != null) {
      INSTANCE.charAt(2);
    }
  }

  public boolean testUninit() {
    final String str = "";
    Iterable<String> str2 = Sequence.fromIterable(Collections.<String>emptyList());
    Sequence.fromIterable(str2).any(new IWhereFilter<String>() {
      public boolean accept(String it) {
        return it != str;
      }
    });
    return true;
  }

  public void f() {
    String s = null;
    if (s != null) {
      s.isEmpty();
    }
  }

  static {
    INSTANCE = "";
  }
}
