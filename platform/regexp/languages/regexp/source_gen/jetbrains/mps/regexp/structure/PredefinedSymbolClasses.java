package jetbrains.mps.regexp.structure;

/*Generated by MPS  */

import jetbrains.mps.core.structure.BaseConcept;
import jetbrains.mps.core.structure.INamedConcept;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import java.util.Iterator;
import java.util.List;

public class PredefinedSymbolClasses extends BaseConcept implements INamedConcept {
  public static String NAME = "name";
  public static String SYMBOL_CLASS = "symbolClass";

  public  PredefinedSymbolClasses(SNode node) {
    super(node);
  }

  public static PredefinedSymbolClasses newInstance(SModel sm, boolean init) {
    return (PredefinedSymbolClasses)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.regexp.PredefinedSymbolClasses", sm, GlobalScope.getInstance(), init).getAdapter();
  }
  public static PredefinedSymbolClasses newInstance(SModel sm) {
    return PredefinedSymbolClasses.newInstance(sm, false);
  }

  public String getName() {
    return this.getProperty(PredefinedSymbolClasses.NAME);
  }
  public void setName(String value) {
    this.setProperty(PredefinedSymbolClasses.NAME, value);
  }
  public int getSymbolClassesCount() {
    return this.getChildCount(PredefinedSymbolClasses.SYMBOL_CLASS);
  }
  public Iterator<PredefinedSymbolClassDeclaration> symbolClasses() {
    return this.children(PredefinedSymbolClasses.SYMBOL_CLASS);
  }
  public List<PredefinedSymbolClassDeclaration> getSymbolClasses() {
    return this.getChildren(PredefinedSymbolClasses.SYMBOL_CLASS);
  }
  public void addSymbolClass(PredefinedSymbolClassDeclaration node) {
    this.addChild(PredefinedSymbolClasses.SYMBOL_CLASS, node);
  }
  public void insertSymbolClass(PredefinedSymbolClassDeclaration prev, PredefinedSymbolClassDeclaration node) {
    this.insertChild(prev, PredefinedSymbolClasses.SYMBOL_CLASS, node);
  }
}
