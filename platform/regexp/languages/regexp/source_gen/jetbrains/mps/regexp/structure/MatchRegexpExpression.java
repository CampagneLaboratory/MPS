package jetbrains.mps.regexp.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.regexp.structure.RegexpUsingConstruction;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.regexp.structure.RegexpExpression;

public class MatchRegexpExpression extends Expression implements RegexpUsingConstruction {
  public static String EXPRESSION = "expression";
  public static String REGEXP = "regexp";

  public  MatchRegexpExpression(SNode node) {
    super(node);
  }

  public static MatchRegexpExpression newInstance(SModel sm, boolean init) {
    return (MatchRegexpExpression)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.regexp.MatchRegexpExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }
  public static MatchRegexpExpression newInstance(SModel sm) {
    return MatchRegexpExpression.newInstance(sm, false);
  }

  public Expression getExpression() {
    return (Expression)this.getChild(MatchRegexpExpression.EXPRESSION);
  }
  public void setExpression(Expression node) {
    super.setChild(MatchRegexpExpression.EXPRESSION, node);
  }
  public RegexpExpression getRegexp() {
    return (RegexpExpression)this.getChild(MatchRegexpExpression.REGEXP);
  }
  public void setRegexp(RegexpExpression node) {
    super.setChild(MatchRegexpExpression.REGEXP, node);
  }
}
