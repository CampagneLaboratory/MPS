package jetbrains.mps.regexp.structure;

/*Generated by MPS  */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class SplitExpression extends Expression implements RegexpUsingConstruction {
  public static String EXPR = "expr";
  public static String REGEXP = "regexp";

  public  SplitExpression(SNode node) {
    super(node);
  }

  public static SplitExpression newInstance(SModel sm, boolean init) {
    return (SplitExpression)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.regexp.SplitExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }
  public static SplitExpression newInstance(SModel sm) {
    return SplitExpression.newInstance(sm, false);
  }

  public Expression getExpr() {
    return (Expression)this.getChild(SplitExpression.EXPR);
  }
  public void setExpr(Expression node) {
    super.setChild(SplitExpression.EXPR, node);
  }
  public RegexpExpression getRegexp() {
    return (RegexpExpression)this.getChild(SplitExpression.REGEXP);
  }
  public void setRegexp(RegexpExpression node) {
    super.setChild(SplitExpression.REGEXP, node);
  }
}
