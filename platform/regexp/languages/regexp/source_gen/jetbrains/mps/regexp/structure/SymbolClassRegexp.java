package jetbrains.mps.regexp.structure;

/*Generated by MPS */

import jetbrains.mps.regexp.structure.Regexp;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import java.util.Iterator;
import jetbrains.mps.regexp.structure.SymbolClassPart;
import java.util.List;

public class SymbolClassRegexp extends Regexp {
  public static String PART = "part";

  public  SymbolClassRegexp(SNode node) {
    super(node);
  }

  public static SymbolClassRegexp newInstance(SModel sm, boolean init) {
    return (SymbolClassRegexp)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.regexp.SymbolClassRegexp", sm, GlobalScope.getInstance(), init).getAdapter();
  }
  public static SymbolClassRegexp newInstance(SModel sm) {
    return SymbolClassRegexp.newInstance(sm, false);
  }

  public int getPartsCount() {
    return this.getChildCount(SymbolClassRegexp.PART);
  }
  public Iterator<SymbolClassPart> parts() {
    return this.children(SymbolClassRegexp.PART);
  }
  public List<SymbolClassPart> getParts() {
    return this.getChildren(SymbolClassRegexp.PART);
  }
  public void addPart(SymbolClassPart node) {
    this.addChild(SymbolClassRegexp.PART, node);
  }
  public void insertPart(SymbolClassPart prev, SymbolClassPart node) {
    this.insertChild(prev, SymbolClassRegexp.PART, node);
  }
}
