package jetbrains.mps.regexp.generator.baseLanguage.template.util;

/*Generated by MPS  */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.template.INodeBuilder;
import jetbrains.mps.generator.template.ITemplateGenerator;

public class GeneratorUtil {

  public static SNode findRegexpUsingConstructionFor(SNode ref) {
    SNode parens = SLinkOperations.getTarget(ref, "match", false);
    SNode ruc = SNodeOperations.getAncestor(parens, "jetbrains.mps.regexp.structure.RegexpUsingConstruction", false, false);
    if(ruc != null) {
      return ruc;
    } else 
    {
      SNode dcl = SNodeOperations.getAncestor(parens, "jetbrains.mps.regexp.structure.RegexpDeclaration", false, false);
      for(SNode parentRuc : SNodeOperations.getAncestors(ref, "jetbrains.mps.regexp.structure.RegexpUsingConstruction", false)) {
        for(SNode regref : SNodeOperations.getDescendants(parentRuc, "jetbrains.mps.regexp.structure.RegexpDeclarationReferenceRegexp")) {
          if(SLinkOperations.getTarget(regref, "regexp", false) == dcl) {
            return parentRuc;
          }
        }
      }
      return null;
    }
  }
  public static INodeBuilder findBuilderForMatcher(ITemplateGenerator generator, SNode ref) {
    return generator.findNodeBuilderForSource(findRegexpUsingConstructionFor(ref), "matcher");
  }
}
