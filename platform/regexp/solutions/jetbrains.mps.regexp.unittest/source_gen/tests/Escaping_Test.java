package tests;

/*Generated by MPS */

import junit.framework.TestCase;
import java.util.regex.Pattern;
import junit.framework.Assert;

public class Escaping_Test extends TestCase {
  private static Pattern REGEXP0 = Pattern.compile("(?:(\\[\\w+\\]|\\(\\w+\\)|\\{\\w+\\})+)", 0);
  private static Pattern REGEXP1 = Pattern.compile("(?:(\\[\\w+\\]|\\(\\w+\\)|\\{\\w+\\})+)", 0);
  private static Pattern REGEXP2 = Pattern.compile("(?:(\\[\\w+\\]|\\(\\w+\\)|\\{\\w+\\})+)", 0);
  private static Pattern REGEXP3 = Pattern.compile("(?:(\\[\\w+\\]|\\(\\w+\\)|\\{\\w+\\})+)", 0);
  private static Pattern REGEXP4 = Pattern.compile("\\s\\\\\\W[\\w\\D]\\b", 0);
  private static Pattern REGEXP5 = Pattern.compile("[ac-f\\d\\-]", 0);
  private static Pattern REGEXP6 = Pattern.compile("[1-9\\w&&[^d-f]]", 0);
  private static Pattern REGEXP7 = Pattern.compile("[\\w&&[^d-f]]", 0);
  private static Pattern REGEXP8 = Pattern.compile("'\\'\"\\\"", 0);
  private static Pattern REGEXP9 = Pattern.compile("^(\\w+)\\1$", 0);
  private static Pattern REGEXP10 = Pattern.compile("^(?:\\w\\w)+$", 0);
  private static Pattern REGEXP11 = Pattern.compile("^(?:\\w\\w){2,4}$", 0);
  private static Pattern REGEXP12 = Pattern.compile("^(?:\\w\\w){2,}$", 0);
  private static Pattern REGEXP13 = Pattern.compile("^(?:\\w\\w){2}$", 0);

  public void test_escapeInLiteral() throws Exception {
    Assert.assertTrue(REGEXP0.matcher("[asdsa]").matches());
    Assert.assertTrue(REGEXP1.matcher("(asdsa)").matches());
    Assert.assertTrue(REGEXP2.matcher("{qq}").matches());
    Assert.assertFalse(REGEXP3.matcher("s{qq}").matches());
  }

  public void test_testPredefined() throws Exception {
    Pattern p = REGEXP4;
    Assert.assertEquals("\\s\\\\\\W[\\w\\D]\\b", p.pattern());
  }

  public void test_range1() throws Exception {
    Pattern p = REGEXP5;
    Assert.assertEquals("[ac-f\\d\\-]", p.pattern());
  }

  public void test_rangeIntersection() throws Exception {
    Pattern p = REGEXP6;
    Assert.assertEquals("[1-9\\w&&[^d-f]]", p.pattern());
    Assert.assertTrue(p.matcher("1").matches());
    Assert.assertTrue(p.matcher("a").matches());
    Assert.assertTrue(p.matcher("g").matches());
    Assert.assertFalse(p.matcher("f").matches());
  }

  public void test_rangeIntersectionSimple() throws Exception {
    Pattern p = REGEXP7;
    Assert.assertEquals("[\\w&&[^d-f]]", p.pattern());
  }

  public void test_testStringLiteral() throws Exception {
    Pattern p = REGEXP8;
    Assert.assertEquals("'\\'\"\\\"", p.pattern());
    Assert.assertTrue(p.matcher("''\"\"").matches());
  }

  public void test_testBackref() throws Exception {
    Pattern p = REGEXP9;
    Assert.assertEquals("^(\\w+)\\1$", p.pattern());
    Assert.assertTrue(p.matcher("kbbbwkbbbw").matches());
    Assert.assertFalse(p.matcher("kbbbwkbbw").matches());
  }

  public void test_testAutoBrackets() throws Exception {
    Pattern p = REGEXP10;
    Assert.assertEquals("^(?:\\w\\w)+$", p.pattern());
    Assert.assertTrue(p.matcher("bwbb").matches());
    Assert.assertFalse(p.matcher("bbb").matches());
  }

  public void test_testAutoBrackets24() throws Exception {
    Pattern p = REGEXP11;
    Assert.assertEquals("^(?:\\w\\w){2,4}$", p.pattern());
    Assert.assertTrue(p.matcher("bwbbbb").matches());
    Assert.assertFalse(p.matcher("bbaabbaacc").matches());
  }

  public void test_testAutoBrackets2ormore() throws Exception {
    Pattern p = REGEXP12;
    Assert.assertEquals("^(?:\\w\\w){2,}$", p.pattern());
    Assert.assertTrue(p.matcher("bwbb").matches());
    Assert.assertFalse(p.matcher("bb").matches());
  }

  public void test_testAutoBrackets2exactly() throws Exception {
    Pattern p = REGEXP13;
    Assert.assertEquals("^(?:\\w\\w){2}$", p.pattern());
    Assert.assertTrue(p.matcher("bwbb").matches());
    Assert.assertFalse(p.matcher("bb").matches());
  }
}
