package tests;

/*Generated by MPS */

import junit.framework.TestCase;
import java.util.regex.Pattern;
import junit.framework.Assert;

public class PerlReplace_Test extends TestCase {
  private static Pattern REPLREGEXP0 = Pattern.compile("(\\w)\\1*(?:\\s*)", 0);
  private static Pattern REPLREGEXP1 = Pattern.compile("(\\w)\\1*(?:\\s*)", 0);
  private static Pattern REPLREGEXP2 = Pattern.compile("\\s*(\\w+)\\s+(\\w+)", 0);
  private static Pattern REPLREGEXP3 = Pattern.compile("(\\w)", 0);
  private static Pattern REPLREGEXP4 = Pattern.compile("a", 0);
  private static Pattern REPLREGEXP5 = Pattern.compile("a", 2);
  private static Pattern REPLREGEXP6 = Pattern.compile(".+", 0);
  private static Pattern REPLREGEXP7 = Pattern.compile(".+", 32);
  private static Pattern REPLREGEXP8 = Pattern.compile("^(\\w+):", 8);
  private static Pattern REPLREGEXP9 = Pattern.compile("^(\\w+):", 0);
  private static Pattern REPLREGEXP10 = Pattern.compile("\\w", 0);
  private static Pattern REPLREGEXP11 = Pattern.compile("\\w", 0);
  private static Pattern REPLREGEXP12 = Pattern.compile("\\w", 0);
  private static Pattern REPLREGEXP13 = Pattern.compile("\\w", 0);
  private static Pattern REPLREGEXP14 = Pattern.compile("\\w", 0);
  private static Pattern REPLREGEXP15 = Pattern.compile("\\w", 0);
  private static Pattern REPLREGEXP16 = Pattern.compile("\\w", 0);
  private static Pattern REPLREGEXP17 = Pattern.compile("\\w", 0);
  private static Pattern REPLREGEXP18 = Pattern.compile("\\w", 0);
  private static Pattern REPLREGEXP19 = Pattern.compile("\\w", 0);
  private static Pattern REPLREGEXP20 = Pattern.compile("\\w", 0);
  private static Pattern REPLREGEXP21 = Pattern.compile("\\w", 0);
  private static Pattern REPLREGEXP22 = Pattern.compile("\\w", 0);

  public void test_simple() throws Exception {
    String input = "aaabbccddeeffffffff";
    Assert.assertEquals("a!b!c!d!e!f!", REPLREGEXP0.matcher(input).replaceAll("$1!"));
    Assert.assertEquals("a!bbccddeeffffffff", REPLREGEXP1.matcher(input).replaceFirst("$1!"));
  }

  public void test_swap() throws Exception {
    Assert.assertEquals("word2 first", REPLREGEXP2.matcher("   first   word2").replaceFirst("$2 $1"));
    REPLREGEXP3.matcher("").replaceFirst("[$1]");
  }

  public void test_oneLetter() throws Exception {
    Assert.assertEquals("A", REPLREGEXP4.matcher("A").replaceFirst("AA"));
    Assert.assertEquals("AA", REPLREGEXP5.matcher("A").replaceFirst("AA"));
  }

  public void test_dotAllMode() throws Exception {
    Assert.assertEquals("!\n!\n!", REPLREGEXP6.matcher("aaaaa\nddddd\nwwwww").replaceAll("!"));
    Assert.assertEquals("!", REPLREGEXP7.matcher("aaaaa\nddddd\nwwwww").replaceAll("!"));
  }

  public void test_multiLine() throws Exception {
    Assert.assertEquals("sada\n[asdad]\nasda\n[asada]", REPLREGEXP8.matcher("sada\nasdad:\nasda\nasada:").replaceAll("[$1]"));
    Assert.assertEquals("sada\nasdad:\nasda\nasada:", REPLREGEXP9.matcher("sada\nasdad:\nasda\nasada:").replaceAll("[$1]"));
  }

  public void test_checkLiterals() throws Exception {
    Assert.assertEquals("\\", REPLREGEXP10.matcher("a").replaceFirst("\\\\"));
    Assert.assertEquals("[]", REPLREGEXP11.matcher("a").replaceFirst("[]"));
    Assert.assertEquals("$", REPLREGEXP12.matcher("a").replaceFirst("\\$"));
    Assert.assertEquals("\"", REPLREGEXP13.matcher("a").replaceFirst("\""));
    Assert.assertEquals("\"", REPLREGEXP14.matcher("a").replaceFirst("\""));
    Assert.assertEquals("()", REPLREGEXP15.matcher("a").replaceFirst("()"));
    Assert.assertEquals("{}", REPLREGEXP16.matcher("a").replaceFirst("{}"));
    Assert.assertEquals("\n", REPLREGEXP17.matcher("a").replaceFirst("\n"));
    Assert.assertEquals("^", REPLREGEXP18.matcher("a").replaceFirst("^"));
    Assert.assertEquals("'", REPLREGEXP19.matcher("a").replaceFirst("'"));
    Assert.assertEquals("'", REPLREGEXP20.matcher("a").replaceFirst("\'"));
    Assert.assertEquals("\u2606", REPLREGEXP21.matcher("a").replaceFirst("\u2606"));
    Assert.assertEquals("\r", REPLREGEXP22.matcher("a").replaceFirst("\r"));
  }
}
