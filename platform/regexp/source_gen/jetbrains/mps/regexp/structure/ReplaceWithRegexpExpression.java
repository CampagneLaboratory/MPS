package jetbrains.mps.regexp.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ReplaceWithRegexpExpression extends Expression implements RegexpUsingConstruction {
  public static String EXPR = "expr";
  public static String REPLACE_BLOCK = "replaceBlock";
  public static String REGEXP = "regexp";

  public  ReplaceWithRegexpExpression(SNode node) {
    super(node);
  }

  public static ReplaceWithRegexpExpression newInstance(SModel sm, boolean init) {
    return (ReplaceWithRegexpExpression)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.regexp.ReplaceWithRegexpExpression", sm, GlobalScope.getInstance(), init).getAdapter();
  }
  public static ReplaceWithRegexpExpression newInstance(SModel sm) {
    return ReplaceWithRegexpExpression.newInstance(sm, false);
  }

  public Expression getExpr() {
    return (Expression)this.getChild(ReplaceWithRegexpExpression.EXPR);
  }
  public void setExpr(Expression node) {
    super.setChild(ReplaceWithRegexpExpression.EXPR, node);
  }
  public ReplaceBlock getReplaceBlock() {
    return (ReplaceBlock)this.getChild(ReplaceWithRegexpExpression.REPLACE_BLOCK);
  }
  public void setReplaceBlock(ReplaceBlock node) {
    super.setChild(ReplaceWithRegexpExpression.REPLACE_BLOCK, node);
  }
  public RegexpExpression getRegexp() {
    return (RegexpExpression)this.getChild(ReplaceWithRegexpExpression.REGEXP);
  }
  public void setRegexp(RegexpExpression node) {
    super.setChild(ReplaceWithRegexpExpression.REGEXP, node);
  }
}
