package jetbrains.mps.regexp.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.INodeReferentSearchScopeProvider;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.search.ISearchScope;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.bootstrap.smodelLanguage.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.search.SimpleSearchScope;

public class MatchVariableReference_match_ReferentConstraint implements IModelConstraints, INodeReferentSearchScopeProvider {

  public MatchVariableReference_match_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("jetbrains.mps.regexp.structure.MatchVariableReference", "match", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("jetbrains.mps.regexp.structure.MatchVariableReference", "match");
  }

  public ISearchScope createNodeReferentSearchScope(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    List<SNode> matches = ListSequence.<SNode>fromArray();
    for(SNode ruc : SNodeOperations.getAncestors(_context.getEnclosingNode(), "jetbrains.mps.regexp.structure.RegexpUsingConstruction", false)) {
      for(SNode ref : SNodeOperations.getDescendants(ruc, "jetbrains.mps.regexp.structure.RegexpDeclarationReferenceRegexp", false)) {
        if (SLinkOperations.getTarget(ref, "regexp", false) != null) {
          for(SNode mpe : SNodeOperations.getDescendants(SLinkOperations.getTarget(ref, "regexp", false), "jetbrains.mps.regexp.structure.MatchParensRegexp", false)) {
            ListSequence.fromList(matches).addElement(mpe);
          }
        }
      }
      for(SNode mpe : SNodeOperations.getDescendants(ruc, "jetbrains.mps.regexp.structure.MatchParensRegexp", false)) {
        ListSequence.fromList(matches).addElement(mpe);
      }
    }
    return new SimpleSearchScope(matches);
  }

}
