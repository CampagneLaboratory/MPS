package jetbrains.mps.baseLanguage.regexp.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.lang.editor.cellProviders.RefNodeCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSColors;

public class FromNToMTimesRegexp_Editor extends DefaultNodeEditor {

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createCollection1174904641994(context, node);
  }

  public EditorCell createCollection1174904641994(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_11749046419941174904641994(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createRefNode1174904641995(context, node));
    editorCell.addEditorCell(this.createConstant1174904641996(context, node, "{"));
    editorCell.addEditorCell(this.createProperty1174904641997(context, node));
    editorCell.addEditorCell(this.createConstant1174904641998(context, node, ","));
    editorCell.addEditorCell(this.createProperty1174904650360(context, node));
    editorCell.addEditorCell(this.createConstant1174904641999(context, node, "}"));
    return editorCell;
  }

  public EditorCell createConstant1174904641996(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11749046419961174904641996(editorCell, node, context);
    setupLabel_Constant_1174904641996_1174904641996(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1174904641998(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11749046419981174904641998(editorCell, node, context);
    setupLabel_Constant_1174904641998_1174904641998(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1174904641999(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11749046419991174904641999(editorCell, node, context);
    setupLabel_Constant_1174904641999_1174904641999(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createRefNode1174904641995_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refNode_regexp1174904641995(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refNode_regexp_1174904641995((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefNode1174904641995(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefNodeCellProvider(node, context);
    provider.setRole("regexp");
    provider.setNoTargetText("<no regexp>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefNode1174904641995_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createProperty1174904641997_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_property_n1174904641997(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_property_n_1174904641997((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createProperty1174904641997(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("n");
    provider.setNoTargetText("<no n>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createProperty1174904641997_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createProperty1174904650360_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_property_m1174904650360(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_property_m_1174904650360((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createProperty1174904650360(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("m");
    provider.setNoTargetText("<no m>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createProperty1174904650360_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }


  private static void setupBasic_Collection_11749046419941174904641994(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1174904641994");
  }

  private static void setupBasic_refNode_regexp1174904641995(EditorCell editorCell, SNode node, EditorContext context) {
  }

  private static void setupBasic_Constant_11749046419961174904641996(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1174904641996");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.TEXT_COLOR, MPSColors.DARK_MAGENTA);
        }

      };
      inlineStyle.apply(editorCell);
    }
    UnaryRegexp_Regexp_actions.setCellActions(editorCell, node, context);
  }

  private static void setupBasic_property_n1174904641997(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("property_n");
  }

  private static void setupBasic_Constant_11749046419981174904641998(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1174904641998");
  }

  private static void setupBasic_Constant_11749046419991174904641999(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1174904641999");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.TEXT_COLOR, MPSColors.DARK_MAGENTA);
        }

      };
      inlineStyle.apply(editorCell);
    }
    UnaryRegexp_Regexp_actions.setCellActions(editorCell, node, context);
  }

  private static void setupBasic_property_m1174904650360(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("property_m");
  }

  private static void setupLabel_refNode_regexp_1174904641995(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1174904641996_1174904641996(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_property_n_1174904641997(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1174904641998_1174904641998(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1174904641999_1174904641999(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_property_m_1174904650360(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

}
