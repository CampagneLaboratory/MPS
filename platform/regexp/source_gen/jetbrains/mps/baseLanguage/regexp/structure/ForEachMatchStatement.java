package jetbrains.mps.baseLanguage.regexp.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.baseLanguage.structure.StatementList;
import jetbrains.mps.baseLanguage.regexp.structure.RegexpExpression;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ForEachMatchStatement extends jetbrains.mps.baseLanguage.structure.Statement implements jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction {
  public static final String concept = "jetbrains.mps.baseLanguage.regexp.structure.ForEachMatchStatement";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String EXPR = "expr";
  public static final String BODY = "body";
  public static final String REGEXP = "regexp";

  public ForEachMatchStatement(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(ForEachMatchStatement.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(ForEachMatchStatement.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(ForEachMatchStatement.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(ForEachMatchStatement.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(ForEachMatchStatement.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(ForEachMatchStatement.VIRTUAL_PACKAGE, value);
  }

  public jetbrains.mps.baseLanguage.structure.Expression getExpr() {
    return (jetbrains.mps.baseLanguage.structure.Expression)this.getChild(Expression.class, ForEachMatchStatement.EXPR);
  }

  public void setExpr(jetbrains.mps.baseLanguage.structure.Expression node) {
    super.setChild(ForEachMatchStatement.EXPR, node);
  }

  public jetbrains.mps.baseLanguage.structure.StatementList getBody() {
    return (jetbrains.mps.baseLanguage.structure.StatementList)this.getChild(StatementList.class, ForEachMatchStatement.BODY);
  }

  public void setBody(jetbrains.mps.baseLanguage.structure.StatementList node) {
    super.setChild(ForEachMatchStatement.BODY, node);
  }

  public jetbrains.mps.baseLanguage.regexp.structure.RegexpExpression getRegexp() {
    return (jetbrains.mps.baseLanguage.regexp.structure.RegexpExpression)this.getChild(RegexpExpression.class, ForEachMatchStatement.REGEXP);
  }

  public void setRegexp(jetbrains.mps.baseLanguage.regexp.structure.RegexpExpression node) {
    super.setChild(ForEachMatchStatement.REGEXP, node);
  }


  public static ForEachMatchStatement newInstance(SModel sm, boolean init) {
    return (ForEachMatchStatement)SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.ForEachMatchStatement", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ForEachMatchStatement newInstance(SModel sm) {
    return ForEachMatchStatement.newInstance(sm, false);
  }

}
