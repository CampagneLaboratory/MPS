package jetbrains.mps.baseLanguage.regexp.structure;

/*Generated by MPS */

import jetbrains.mps.lang.core.structure.BaseConcept;
import jetbrains.mps.baseLanguage.structure.IOperation;
import jetbrains.mps.smodel.SNode;
import java.util.Iterator;
import java.util.List;
import jetbrains.mps.lang.core.structure.Attribute;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ReplaceRegexpOperation extends BaseConcept implements IOperation {
  public static final String concept = "jetbrains.mps.baseLanguage.regexp.structure.ReplaceRegexpOperation";
  public static final String SHORT_DESCRIPTION = "shortDescription";
  public static final String ALIAS = "alias";
  public static final String VIRTUAL_PACKAGE = "virtualPackage";
  public static final String DOT_ALL = "dotAll";
  public static final String MULTI_LINE = "multiLine";
  public static final String CASE_INSENSITIVE = "caseInsensitive";
  public static final String GLOBAL_REPLACE = "globalReplace";
  public static final String SEARCH = "search";
  public static final String REPLACEMENT = "replacement";
  public static final String _$ATTRIBUTE = "_$attribute";

  public ReplaceRegexpOperation(SNode node) {
    super(node);
  }

  public String getShortDescription() {
    return this.getProperty(ReplaceRegexpOperation.SHORT_DESCRIPTION);
  }

  public void setShortDescription(String value) {
    this.setProperty(ReplaceRegexpOperation.SHORT_DESCRIPTION, value);
  }

  public String getAlias() {
    return this.getProperty(ReplaceRegexpOperation.ALIAS);
  }

  public void setAlias(String value) {
    this.setProperty(ReplaceRegexpOperation.ALIAS, value);
  }

  public String getVirtualPackage() {
    return this.getProperty(ReplaceRegexpOperation.VIRTUAL_PACKAGE);
  }

  public void setVirtualPackage(String value) {
    this.setProperty(ReplaceRegexpOperation.VIRTUAL_PACKAGE, value);
  }

  public boolean getDotAll() {
    return this.getBooleanProperty(ReplaceRegexpOperation.DOT_ALL);
  }

  public void setDotAll(boolean value) {
    this.setBooleanProperty(ReplaceRegexpOperation.DOT_ALL, value);
  }

  public boolean getMultiLine() {
    return this.getBooleanProperty(ReplaceRegexpOperation.MULTI_LINE);
  }

  public void setMultiLine(boolean value) {
    this.setBooleanProperty(ReplaceRegexpOperation.MULTI_LINE, value);
  }

  public boolean getCaseInsensitive() {
    return this.getBooleanProperty(ReplaceRegexpOperation.CASE_INSENSITIVE);
  }

  public void setCaseInsensitive(boolean value) {
    this.setBooleanProperty(ReplaceRegexpOperation.CASE_INSENSITIVE, value);
  }

  public boolean getGlobalReplace() {
    return this.getBooleanProperty(ReplaceRegexpOperation.GLOBAL_REPLACE);
  }

  public void setGlobalReplace(boolean value) {
    this.setBooleanProperty(ReplaceRegexpOperation.GLOBAL_REPLACE, value);
  }

  public Regexp getSearch() {
    return (Regexp) this.getChild(Regexp.class, ReplaceRegexpOperation.SEARCH);
  }

  public void setSearch(Regexp node) {
    super.setChild(ReplaceRegexpOperation.SEARCH, node);
  }

  public int getReplacementsCount() {
    return this.getChildCount(ReplaceRegexpOperation.REPLACEMENT);
  }

  public Iterator<Replacement> replacements() {
    return this.children(Replacement.class, ReplaceRegexpOperation.REPLACEMENT);
  }

  public List<Replacement> getReplacements() {
    return this.getChildren(Replacement.class, ReplaceRegexpOperation.REPLACEMENT);
  }

  public void addReplacement(Replacement node) {
    this.addChild(ReplaceRegexpOperation.REPLACEMENT, node);
  }

  public void insertReplacement(Replacement prev, Replacement node) {
    this.insertChild(prev, ReplaceRegexpOperation.REPLACEMENT, node);
  }

  public int get_$attributesCount() {
    return this.getChildCount(ReplaceRegexpOperation._$ATTRIBUTE);
  }

  public Iterator<Attribute> _$attributes() {
    return this.children(Attribute.class, ReplaceRegexpOperation._$ATTRIBUTE);
  }

  public List<Attribute> get_$attributes() {
    return this.getChildren(Attribute.class, ReplaceRegexpOperation._$ATTRIBUTE);
  }

  public void add_$attribute(Attribute node) {
    this.addChild(ReplaceRegexpOperation._$ATTRIBUTE, node);
  }

  public void insert_$attribute(Attribute prev, Attribute node) {
    this.insertChild(prev, ReplaceRegexpOperation._$ATTRIBUTE, node);
  }

  public static ReplaceRegexpOperation newInstance(SModel sm, boolean init) {
    return (ReplaceRegexpOperation) SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.regexp.structure.ReplaceRegexpOperation", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ReplaceRegexpOperation newInstance(SModel sm) {
    return ReplaceRegexpOperation.newInstance(sm, false);
  }
}
