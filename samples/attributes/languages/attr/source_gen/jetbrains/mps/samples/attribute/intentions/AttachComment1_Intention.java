package jetbrains.mps.samples.attribute.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.intentions.IntentionDescriptor;

public class AttachComment1_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public AttachComment1_Intention() {
  }
  public String getConcept() {
    return "jetbrains.mps.lang.core.structure.BaseConcept";
  }
  public String getPresentation() {
    return "AttachComment1";
  }
  public String getPersistentStateKey() {
    return "jetbrains.mps.samples.attribute.intentions.AttachComment1_Intention";
  }
  public String getLanguageFqName() {
    return "jetbrains.mps.samples.attribute";
  }
  public IntentionType getType() {
    return IntentionType.NORMAL;
  }
  public boolean isAvailableInChildNodes() {
    return false;
  }
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:72e47166-8f77-453a-8c51-48d556a5cc3b(jetbrains.mps.samples.attribute.intentions)", "7205391946760650912");
  }
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new AttachComment1_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Attach comment attribute 1";
    }
    public void execute(final SNode node, final EditorContext editorContext) {
      AttributeOperations.createAndAddAttribute(node, new IAttributeDescriptor.AllAttributes(), "jetbrains.mps.samples.attribute.structure.CommentAttribute");
    }
    public IntentionDescriptor getDescriptor() {
      return AttachComment1_Intention.this;
    }
  }
}
