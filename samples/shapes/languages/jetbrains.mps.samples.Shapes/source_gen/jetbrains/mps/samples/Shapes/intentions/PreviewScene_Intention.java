package jetbrains.mps.samples.Shapes.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.samples.Shapes.behavior.Canvas_Behavior;
import jetbrains.mps.intentions.IntentionDescriptor;

public class PreviewScene_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public PreviewScene_Intention() {
  }
  public String getConcept() {
    return "jetbrains.mps.samples.Shapes.structure.Canvas";
  }
  public String getPresentation() {
    return "PreviewScene";
  }
  public String getPersistentStateKey() {
    return "jetbrains.mps.samples.Shapes.intentions.PreviewScene_Intention";
  }
  public String getLanguageFqName() {
    return "jetbrains.mps.samples.Shapes";
  }
  public IntentionType getType() {
    return IntentionType.NORMAL;
  }
  public boolean isAvailableInChildNodes() {
    return true;
  }
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:9acda20f-f1e0-485f-bac0-18b2eef5c3e9(jetbrains.mps.samples.Shapes.intentions)", "1082824515535656124");
  }
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new PreviewScene_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Preview Scene";
    }
    public void execute(final SNode node, final EditorContext editorContext) {
      Canvas_Behavior.call_interpret_1082824515535528722(node);
    }
    public IntentionDescriptor getDescriptor() {
      return PreviewScene_Intention.this;
    }
  }
}
