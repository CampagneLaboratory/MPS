package jetbrains.mps.samples.Shapes.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class Square_Constraints extends BaseConstraintsDescriptor {
  public Square_Constraints() {
    super("jetbrains.mps.samples.Shapes.structure.Square");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("size", new BasePropertyConstraintsDescriptor("size", this) {
      @Override
      public boolean hasOwnSetter() {
        return true;
      }

      @Override
      public void setValue(SNode node, String propertyValue) {
        String propertyName = "size";
        SPropertyOperations.set(node, "size", "" + (111110));
        SPropertyOperations.set(node, "size", "" + ((SPropertyOperations.getInteger(propertyValue))));
      }
    });
    return properties;
  }
}
