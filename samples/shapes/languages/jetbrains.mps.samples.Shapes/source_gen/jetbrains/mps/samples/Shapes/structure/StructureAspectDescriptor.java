package jetbrains.mps.samples.Shapes.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptCanvas = new ConceptDescriptorBuilder("jetbrains.mps.samples.Shapes.structure.Canvas").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.execution.util.structure.IMainClass").children(new String[]{"shapes"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptCircle = new ConceptDescriptorBuilder("jetbrains.mps.samples.Shapes.structure.Circle").super_("jetbrains.mps.samples.Shapes.structure.Shape").parents("jetbrains.mps.samples.Shapes.structure.Shape").properties("x", "y", "radius").alias("circle", "").create();
  /*package*/ final ConceptDescriptor myConceptColorReference = new ConceptDescriptorBuilder("jetbrains.mps.samples.Shapes.structure.ColorReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("color").create();
  /*package*/ final ConceptDescriptor myConceptShape = new ConceptDescriptorBuilder("jetbrains.mps.samples.Shapes.structure.Shape").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"color"}, new boolean[]{false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptSquare = new ConceptDescriptorBuilder("jetbrains.mps.samples.Shapes.structure.Square").super_("jetbrains.mps.samples.Shapes.structure.Shape").parents("jetbrains.mps.samples.Shapes.structure.Shape").properties("upperLeftX", "upperLeftY", "size").alias("square", "").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptCanvas, myConceptCircle, myConceptColorReference, myConceptShape, myConceptSquare);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0i, conceptFqName)) {
      case 0:
        return myConceptCanvas;
      case 1:
        return myConceptCircle;
      case 2:
        return myConceptColorReference;
      case 3:
        return myConceptShape;
      case 4:
        return myConceptSquare;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0i = new String[]{"jetbrains.mps.samples.Shapes.structure.Canvas", "jetbrains.mps.samples.Shapes.structure.Circle", "jetbrains.mps.samples.Shapes.structure.ColorReference", "jetbrains.mps.samples.Shapes.structure.Shape", "jetbrains.mps.samples.Shapes.structure.Square"};
}
