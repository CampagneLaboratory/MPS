package jetbrains.mps.samples.plainText.stubs;

/*Generated by MPS */

import jetbrains.mps.smodel.BaseSModelDescriptorWithSource;
import jetbrains.mps.smodel.descriptor.EditableSModelDescriptor;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import java.io.OutputStream;
import org.jetbrains.mps.openapi.persistence.MultiStreamDataSource;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.io.IOException;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.io.InputStream;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.ide.ThreadUtils;

public class TextModelDescriptor extends BaseSModelDescriptorWithSource implements EditableSModelDescriptor {
  private SModel myModel = null;
  private boolean isChanged = false;

  public TextModelDescriptor(SModule module, TextModelDataSource source) {
    super(TextPersistenceUtil.refByModule(module.getModuleReference()), source);
    updateDiskTimestamp();
  }

  @Override
  protected void reloadFromDiskSafe() {
    reloadFromDisk();
  }

  @Override
  public boolean isChanged() {
    return isChanged;
  }

  @Override
  public void setChanged(boolean value) {
    isChanged = value;
    updateDiskTimestamp();
  }

  @Override
  public void save() {
    SModel model = getSModel();
    for (SNode tf : ListSequence.fromList(SModelOperations.getRoots(model, "jetbrains.mps.samples.plainText.structure.TextFile"))) {
      try {
        OutputStream os = ((MultiStreamDataSource) getSource()).openOutputStream(SPropertyOperations.getString(tf, "name"));
        os.write(SPropertyOperations.getString(tf, "text").getBytes());
        os.close();
      } catch (IOException e) {
        e.printStackTrace();
      }
    }

    isChanged = false;
    updateDiskTimestamp();
  }

  @Override
  public void rename(String newModelName, boolean changeFile) {
    throw new UnsupportedOperationException();
  }

  @Deprecated
  @Override
  public boolean isReadOnly() {
    return false;
  }

  @Override
  protected SModel getCurrentModelInternal() {
    return myModel;
  }

  @Override
  public synchronized SModel getSModel() {
    if (myModel == null) {
      myModel = loadSModel();
      ((jetbrains.mps.smodel.SModel) myModel).setModelDescriptor(this);
      fireModelStateChanged(ModelLoadingState.NOT_LOADED, ModelLoadingState.FULLY_LOADED);
    }
    return myModel;
  }

  public SModel loadSModel() {
    SModel m = new jetbrains.mps.smodel.SModel(getSModelReference());
    MultiStreamDataSource source = (MultiStreamDataSource) getSource();
    for (String child : Sequence.fromIterable(source.getAvailableStreams())) {
      SNode root = SModelOperations.createNewRootNode(m, "jetbrains.mps.samples.plainText.structure.TextFile", null);
      try {
        InputStream is = source.openInputStream(child);
        byte[] buf = new byte[1000000];
        int len = is.read(buf);
        SPropertyOperations.set(root, "name", child);
        SPropertyOperations.set(root, "text", new String(buf, 0, len));

      } catch (IOException e) {
        e.printStackTrace();
      }
    }

    return m;
  }

  @Override
  public boolean isLoaded() {
    return myModel != null;
  }

  @Override
  public void reloadFromDisk() {
    ModelAccess.assertLegalWrite();

    SModel old = myModel;
    notifyModelReplaced(old);

    check_bp2jat_a5a31(((jetbrains.mps.smodel.SModel) old));

    myModel = null;
    isChanged = false;
    updateDiskTimestamp();

    ThreadUtils.runInUIThreadNoWait(new Runnable() {
      public void run() {
        ModelAccess.instance().runWriteAction(new Runnable() {
          public void run() {
            fireModelStateChanged(ModelLoadingState.FULLY_LOADED, ModelLoadingState.NOT_LOADED);
          }
        });
      }
    });

  }

  private static void check_bp2jat_a5a31(jetbrains.mps.smodel.SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      checkedDotOperand.setModelDescriptor(null);
    }

  }
}
