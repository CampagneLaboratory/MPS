package jetbrains.mps.samples.plainText.stubs;

/*Generated by MPS */

import jetbrains.mps.extapi.model.EditableSModelBase;
import jetbrains.mps.smodel.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import java.io.OutputStream;
import org.jetbrains.mps.openapi.persistence.MultiStreamDataSource;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.io.IOException;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.io.InputStream;
import jetbrains.mps.smodel.ModelAccess;

public class TextModelDescriptor extends EditableSModelBase {
  private SModel myModel = null;

  public TextModelDescriptor(SModule module, TextModelDataSource source) {
    super(TextPersistenceUtil.refByModule(module.getModuleReference()), source);
  }

  @Override
  protected SModel getCurrentModelInternal() {
    return myModel;
  }

  @Override
  public synchronized SModel getSModelInternal() {
    if (myModel == null) {
      myModel = loadSModel();
      (myModel).setModelDescriptor(this);
      updateTimestamp();
      fireModelStateChanged(ModelLoadingState.FULLY_LOADED);
    }
    return myModel;
  }

  @Override
  public boolean isLoaded() {
    return myModel != null;
  }

  @Override
  public boolean saveModel() {
    SModel model = getSModelInternal();
    for (SNode tf : ListSequence.fromList(SModelOperations.getRoots(((org.jetbrains.mps.openapi.model.SModel) model.getModelDescriptor()), "jetbrains.mps.samples.plainText.structure.TextFile"))) {
      try {
        OutputStream os = ((MultiStreamDataSource) getSource()).openOutputStream(SPropertyOperations.getString(tf, "name"));
        os.write(SPropertyOperations.getString(tf, "text").getBytes());
        os.close();
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
    return false;
  }

  @Override
  public void rename(String newModelName, boolean changeFile) {
    throw new UnsupportedOperationException();
  }

  public SModel loadSModel() {
    SModel m = new SModel(getReference());
    MultiStreamDataSource source = (MultiStreamDataSource) getSource();
    for (String child : Sequence.fromIterable(source.getAvailableStreams())) {
      SNode root = SModelOperations.createNewRootNode(((org.jetbrains.mps.openapi.model.SModel) m.getModelDescriptor()), "jetbrains.mps.samples.plainText.structure.TextFile", null);
      try {
        InputStream is = source.openInputStream(child);
        byte[] buf = new byte[1000000];
        int len = is.read(buf);
        SPropertyOperations.set(root, "name", child);
        SPropertyOperations.set(root, "text", new String(buf, 0, len));

      } catch (IOException e) {
        e.printStackTrace();
      }
    }

    return m;
  }

  protected void reloadContents() {
    ModelAccess.assertLegalWrite();

    updateTimestamp();
    if (!(isLoaded())) {
      return;
    }

    final SModel model = loadSModel();
    setChanged(false);
    super.replaceModel(new Runnable() {
      public void run() {
        myModel = model;
      }
    });
  }
}
