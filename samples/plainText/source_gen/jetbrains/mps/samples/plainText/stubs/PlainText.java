package jetbrains.mps.samples.plainText.stubs;

/*Generated by MPS */

import jetbrains.mps.smodel.persistence.ModelRootManagerBase;
import java.util.Collection;
import jetbrains.mps.smodel.SModelDescriptor;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.SModelRoot;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.SModelFqName;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;

public class PlainText extends ModelRootManagerBase {
  public PlainText() {
  }

  @Override
  public Collection<SModelDescriptor> load(@NotNull SModelRoot modelRoot) {
    List<SModelDescriptor> res = ListSequence.fromList(new ArrayList<SModelDescriptor>());
    ListSequence.fromList(res).addElement(new TextModelDescriptor(modelRoot.getModule(), new TextModelDataSource(PlainText.this.getRootDir(modelRoot), modelRoot.getModule().getModuleReference())));
    return res;
  }

  @Override
  public boolean canCreateModel(@Nullable SModelRoot modelRoot, @Nullable SModelFqName fqName) {
    Iterable<SModel> models = modelRoot.getModule().getModels();
    return Sequence.fromIterable(models).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return it.getModelName().endsWith("@text");
      }
    }).isEmpty();
  }

  @Override
  public SModelDescriptor createModel(@NotNull SModelRoot modelRoot, @NotNull SModelFqName fqName) {
    IFile dir = PlainText.this.getRootDir(modelRoot);
    return new TextModelDescriptor(modelRoot.getModule(), new TextModelDataSource(dir, modelRoot.getModule().getModuleReference()));
  }

  private IFile getRootDir(SModelRoot root) {
    return FileSystem.getInstance().getFileByPath(root.getPath());
  }
}
