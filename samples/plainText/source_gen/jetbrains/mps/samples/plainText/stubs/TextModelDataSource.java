package jetbrains.mps.samples.plainText.stubs;

/*Generated by MPS */

import jetbrains.mps.extapi.persistence.FolderDataSource;
import jetbrains.mps.smodel.descriptor.source.ModelDataSource;
import jetbrains.mps.vfs.IFile;
import org.jetbrains.mps.openapi.persistence.ModelRoot;
import jetbrains.mps.smodel.loading.ModelLoadResult;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import java.io.InputStream;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.io.IOException;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.io.OutputStream;

public class TextModelDataSource extends FolderDataSource implements ModelDataSource {
  public TextModelDataSource(IFile folder, ModelRoot root) {
    super(folder, root);
  }

  @Override
  protected boolean isIncluded(IFile file) {
    return super.isIncluded(file) && file.getPath().endsWith(".txt");
  }

  public ModelLoadResult loadSModel(IModule module, SModelDescriptor descriptor, ModelLoadingState state) {
    SModel m = new SModel(descriptor.getSModelReference());
    for (String child : Sequence.fromIterable(getAvailableStreams())) {
      SNode root = SModelOperations.createNewRootNode(m, "jetbrains.mps.samples.plainText.structure.TextFile", null);
      try {
        InputStream is = openInputStream(child);
        byte[] buf = new byte[1000000];
        int len = is.read(buf);
        SPropertyOperations.set(root, "name", child);
        SPropertyOperations.set(root, "text", new String(buf, 0, len));

      } catch (IOException e) {
        e.printStackTrace();
      }
    }

    return new ModelLoadResult(m, ModelLoadingState.FULLY_LOADED);
  }

  public boolean saveModel(SModelDescriptor descriptor) {
    SModel model = descriptor.getSModel();
    for (SNode tf : ListSequence.fromList(SModelOperations.getRoots(model, "jetbrains.mps.samples.plainText.structure.TextFile"))) {
      try {
        OutputStream os = openOutputStream(SPropertyOperations.getString(tf, "name"));
        os.write(SPropertyOperations.getString(tf, "text").getBytes());
        os.close();
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
    return false;
  }

  public boolean hasModel(SModelDescriptor descriptor) {
    // TODO ?? 
    return getAvailableStreams().iterator().hasNext();
  }
}
