package jetbrains.mps.samples.plainText.stubs;

/*Generated by MPS */

import jetbrains.mps.smodel.descriptor.source.FileBasedModelDataSource;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.project.structure.modules.ModuleReference;
import java.util.Collection;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.persistence.def.DescriptorLoadResult;
import jetbrains.mps.project.IModule;
import jetbrains.mps.smodel.SModelFqName;
import jetbrains.mps.smodel.persistence.def.ModelReadException;
import jetbrains.mps.smodel.loading.ModelLoadResult;
import jetbrains.mps.smodel.SModelDescriptor;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import java.io.InputStream;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.io.IOException;
import java.io.OutputStream;

public class TextModelDataSource extends FileBasedModelDataSource {
  private IFile dir;

  public TextModelDataSource(IFile file, ModuleReference ref) {
    super(ref);
    this.dir = file;
  }

  public IFile getFile() {
    return dir;
  }

  public Collection<String> getFilesToListen() {
    return Collections.singleton(dir.getPath());
  }

  public long getTimestamp() {
    long res = 0;
    for (IFile child : ListSequence.fromList(dir.getChildren())) {
      if (!(child.getName().endsWith(".txt"))) {
        continue;
      }
      res = Math.max(res, child.lastModified());
    }
    return res;
  }

  public DescriptorLoadResult loadDescriptor(IModule module, SModelFqName name) throws ModelReadException {
    return new DescriptorLoadResult();
  }

  public ModelLoadResult loadSModel(IModule module, SModelDescriptor descriptor, ModelLoadingState state) {
    SModel m = new SModel(descriptor.getSModelReference());
    for (IFile child : ListSequence.fromList(dir.getChildren())) {
      if (!(child.getName().endsWith(".txt"))) {
        continue;
      }

      SNode root = SModelOperations.createNewRootNode(m, "jetbrains.mps.samples.plainText.structure.TextFile", null);
      try {
        InputStream is = child.openInputStream();
        byte[] buf = new byte[1000000];
        int len = is.read(buf);
        SPropertyOperations.set(root, "name", child.getName());
        SPropertyOperations.set(root, "text", new String(buf, 0, len));

      } catch (IOException e) {
        e.printStackTrace();
      }
    }

    return new ModelLoadResult(m, ModelLoadingState.FULLY_LOADED);
  }

  public boolean saveModel(SModelDescriptor descriptor) {
    SModel model = descriptor.getSModel();
    for (SNode tf : ListSequence.fromList(SModelOperations.getRoots(model, "jetbrains.mps.samples.plainText.structure.TextFile"))) {
      try {
        OutputStream os = dir.getDescendant(SPropertyOperations.getString(tf, "name")).openOutputStream();
        os.write(SPropertyOperations.getString(tf, "text").getBytes());
        os.close();
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
    return false;
  }

  public boolean hasModel(SModelDescriptor descriptor) {
    return descriptor.getSModelReference().equals(TextPersistenceUtil.refByModule(getOrigin()));
  }
}
