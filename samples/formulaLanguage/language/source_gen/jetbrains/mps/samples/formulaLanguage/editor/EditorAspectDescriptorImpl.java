package jetbrains.mps.samples.formulaLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.node.EditorAspectDescriptor;
import jetbrains.mps.openapi.editor.node.EditorAspect;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public EditorAspect getAspect(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return new AndOperation_Editor();
      case 1:
        return new Constant_Editor();
      case 2:
        return new EqualsOperation_Editor();
      case 3:
        return new Expression_Editor();
      case 4:
        return new FloatingPointConstant_Editor();
      case 5:
        return new Formula_Editor();
      case 6:
        return new Function_Editor();
      case 7:
        return new GreaterThanOperation_Editor();
      case 8:
        return new IfFunction_Editor();
      case 9:
        return new IntegerConstant_Editor();
      case 10:
        return new IsNullOperation_Editor();
      case 11:
        return new LessThanOperation_Editor();
      case 12:
        return new MinusOperation_Editor();
      case 13:
        return new MultOperation_Editor();
      case 14:
        return new NotOperation_Editor();
      case 15:
        return new NullConstant_Editor();
      case 16:
        return new Operation_Editor();
      case 17:
        return new OrOperation_Editor();
      case 18:
        return new ParenthisizedExpression_Editor();
      case 19:
        return new PlusOperation_Editor();
      case 20:
        return new Reference_Editor();
      case 21:
        return new StringConstant_Editor();
      default:
    }
    return null;
  }

  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.samples.formulaLanguage.structure.AndOperation", "jetbrains.mps.samples.formulaLanguage.structure.Constant", "jetbrains.mps.samples.formulaLanguage.structure.EqualsOperation", "jetbrains.mps.samples.formulaLanguage.structure.Expression", "jetbrains.mps.samples.formulaLanguage.structure.FloatingPointConstant", "jetbrains.mps.samples.formulaLanguage.structure.Formula", "jetbrains.mps.samples.formulaLanguage.structure.Function", "jetbrains.mps.samples.formulaLanguage.structure.GreaterThanOperation", "jetbrains.mps.samples.formulaLanguage.structure.IfFunction", "jetbrains.mps.samples.formulaLanguage.structure.IntegerConstant", "jetbrains.mps.samples.formulaLanguage.structure.IsNullOperation", "jetbrains.mps.samples.formulaLanguage.structure.LessThanOperation", "jetbrains.mps.samples.formulaLanguage.structure.MinusOperation", "jetbrains.mps.samples.formulaLanguage.structure.MultOperation", "jetbrains.mps.samples.formulaLanguage.structure.NotOperation", "jetbrains.mps.samples.formulaLanguage.structure.NullConstant", "jetbrains.mps.samples.formulaLanguage.structure.Operation", "jetbrains.mps.samples.formulaLanguage.structure.OrOperation", "jetbrains.mps.samples.formulaLanguage.structure.ParenthisizedExpression", "jetbrains.mps.samples.formulaLanguage.structure.PlusOperation", "jetbrains.mps.samples.formulaLanguage.structure.Reference", "jetbrains.mps.samples.formulaLanguage.structure.StringConstant"};
}
