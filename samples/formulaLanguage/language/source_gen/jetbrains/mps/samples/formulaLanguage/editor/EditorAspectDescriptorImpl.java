package jetbrains.mps.samples.formulaLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import jetbrains.mps.openapi.editor.descriptor.EditorAspect;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  private AndOperation_Editor myAndOperationEditorAspect;
  private Constant_Editor myConstantEditorAspect;
  private EqualsOperation_Editor myEqualsOperationEditorAspect;
  private Expression_Editor myExpressionEditorAspect;
  private FloatingPointConstant_Editor myFloatingPointConstantEditorAspect;
  private Formula_Editor myFormulaEditorAspect;
  private Function_Editor myFunctionEditorAspect;
  private GreaterThanOperation_Editor myGreaterThanOperationEditorAspect;
  private IfFunction_Editor myIfFunctionEditorAspect;
  private IntegerConstant_Editor myIntegerConstantEditorAspect;
  private IsNullOperation_Editor myIsNullOperationEditorAspect;
  private LessThanOperation_Editor myLessThanOperationEditorAspect;
  private MinusOperation_Editor myMinusOperationEditorAspect;
  private MultOperation_Editor myMultOperationEditorAspect;
  private NotOperation_Editor myNotOperationEditorAspect;
  private NullConstant_Editor myNullConstantEditorAspect;
  private Operation_Editor myOperationEditorAspect;
  private OrOperation_Editor myOrOperationEditorAspect;
  private ParenthisizedExpression_Editor myParenthisizedExpressionEditorAspect;
  private PlusOperation_Editor myPlusOperationEditorAspect;
  private Reference_Editor myReferenceEditorAspect;
  private StringConstant_Editor myStringConstantEditorAspect;

  public EditorAspect getAspect(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0w, descriptor.getConceptFqName())) {
      case 0:
        return getAndOperationEditorAspect();
      case 1:
        return getConstantEditorAspect();
      case 2:
        return getEqualsOperationEditorAspect();
      case 3:
        return getExpressionEditorAspect();
      case 4:
        return getFloatingPointConstantEditorAspect();
      case 5:
        return getFormulaEditorAspect();
      case 6:
        return getFunctionEditorAspect();
      case 7:
        return getGreaterThanOperationEditorAspect();
      case 8:
        return getIfFunctionEditorAspect();
      case 9:
        return getIntegerConstantEditorAspect();
      case 10:
        return getIsNullOperationEditorAspect();
      case 11:
        return getLessThanOperationEditorAspect();
      case 12:
        return getMinusOperationEditorAspect();
      case 13:
        return getMultOperationEditorAspect();
      case 14:
        return getNotOperationEditorAspect();
      case 15:
        return getNullConstantEditorAspect();
      case 16:
        return getOperationEditorAspect();
      case 17:
        return getOrOperationEditorAspect();
      case 18:
        return getParenthisizedExpressionEditorAspect();
      case 19:
        return getPlusOperationEditorAspect();
      case 20:
        return getReferenceEditorAspect();
      case 21:
        return getStringConstantEditorAspect();
      default:
    }
    return null;
  }

  public void initialize() {
    // Register editor extensions here 
  }

  public void deinitialize() {
    myAndOperationEditorAspect = null;
    myConstantEditorAspect = null;
    myEqualsOperationEditorAspect = null;
    myExpressionEditorAspect = null;
    myFloatingPointConstantEditorAspect = null;
    myFormulaEditorAspect = null;
    myFunctionEditorAspect = null;
    myGreaterThanOperationEditorAspect = null;
    myIfFunctionEditorAspect = null;
    myIntegerConstantEditorAspect = null;
    myIsNullOperationEditorAspect = null;
    myLessThanOperationEditorAspect = null;
    myMinusOperationEditorAspect = null;
    myMultOperationEditorAspect = null;
    myNotOperationEditorAspect = null;
    myNullConstantEditorAspect = null;
    myOperationEditorAspect = null;
    myOrOperationEditorAspect = null;
    myParenthisizedExpressionEditorAspect = null;
    myPlusOperationEditorAspect = null;
    myReferenceEditorAspect = null;
    myStringConstantEditorAspect = null;
  }

  private AndOperation_Editor getAndOperationEditorAspect() {
    if (myAndOperationEditorAspect == null) {
      myAndOperationEditorAspect = new AndOperation_Editor();
    }
    return myAndOperationEditorAspect;
  }

  private Constant_Editor getConstantEditorAspect() {
    if (myConstantEditorAspect == null) {
      myConstantEditorAspect = new Constant_Editor();
    }
    return myConstantEditorAspect;
  }

  private EqualsOperation_Editor getEqualsOperationEditorAspect() {
    if (myEqualsOperationEditorAspect == null) {
      myEqualsOperationEditorAspect = new EqualsOperation_Editor();
    }
    return myEqualsOperationEditorAspect;
  }

  private Expression_Editor getExpressionEditorAspect() {
    if (myExpressionEditorAspect == null) {
      myExpressionEditorAspect = new Expression_Editor();
    }
    return myExpressionEditorAspect;
  }

  private FloatingPointConstant_Editor getFloatingPointConstantEditorAspect() {
    if (myFloatingPointConstantEditorAspect == null) {
      myFloatingPointConstantEditorAspect = new FloatingPointConstant_Editor();
    }
    return myFloatingPointConstantEditorAspect;
  }

  private Formula_Editor getFormulaEditorAspect() {
    if (myFormulaEditorAspect == null) {
      myFormulaEditorAspect = new Formula_Editor();
    }
    return myFormulaEditorAspect;
  }

  private Function_Editor getFunctionEditorAspect() {
    if (myFunctionEditorAspect == null) {
      myFunctionEditorAspect = new Function_Editor();
    }
    return myFunctionEditorAspect;
  }

  private GreaterThanOperation_Editor getGreaterThanOperationEditorAspect() {
    if (myGreaterThanOperationEditorAspect == null) {
      myGreaterThanOperationEditorAspect = new GreaterThanOperation_Editor();
    }
    return myGreaterThanOperationEditorAspect;
  }

  private IfFunction_Editor getIfFunctionEditorAspect() {
    if (myIfFunctionEditorAspect == null) {
      myIfFunctionEditorAspect = new IfFunction_Editor();
    }
    return myIfFunctionEditorAspect;
  }

  private IntegerConstant_Editor getIntegerConstantEditorAspect() {
    if (myIntegerConstantEditorAspect == null) {
      myIntegerConstantEditorAspect = new IntegerConstant_Editor();
    }
    return myIntegerConstantEditorAspect;
  }

  private IsNullOperation_Editor getIsNullOperationEditorAspect() {
    if (myIsNullOperationEditorAspect == null) {
      myIsNullOperationEditorAspect = new IsNullOperation_Editor();
    }
    return myIsNullOperationEditorAspect;
  }

  private LessThanOperation_Editor getLessThanOperationEditorAspect() {
    if (myLessThanOperationEditorAspect == null) {
      myLessThanOperationEditorAspect = new LessThanOperation_Editor();
    }
    return myLessThanOperationEditorAspect;
  }

  private MinusOperation_Editor getMinusOperationEditorAspect() {
    if (myMinusOperationEditorAspect == null) {
      myMinusOperationEditorAspect = new MinusOperation_Editor();
    }
    return myMinusOperationEditorAspect;
  }

  private MultOperation_Editor getMultOperationEditorAspect() {
    if (myMultOperationEditorAspect == null) {
      myMultOperationEditorAspect = new MultOperation_Editor();
    }
    return myMultOperationEditorAspect;
  }

  private NotOperation_Editor getNotOperationEditorAspect() {
    if (myNotOperationEditorAspect == null) {
      myNotOperationEditorAspect = new NotOperation_Editor();
    }
    return myNotOperationEditorAspect;
  }

  private NullConstant_Editor getNullConstantEditorAspect() {
    if (myNullConstantEditorAspect == null) {
      myNullConstantEditorAspect = new NullConstant_Editor();
    }
    return myNullConstantEditorAspect;
  }

  private Operation_Editor getOperationEditorAspect() {
    if (myOperationEditorAspect == null) {
      myOperationEditorAspect = new Operation_Editor();
    }
    return myOperationEditorAspect;
  }

  private OrOperation_Editor getOrOperationEditorAspect() {
    if (myOrOperationEditorAspect == null) {
      myOrOperationEditorAspect = new OrOperation_Editor();
    }
    return myOrOperationEditorAspect;
  }

  private ParenthisizedExpression_Editor getParenthisizedExpressionEditorAspect() {
    if (myParenthisizedExpressionEditorAspect == null) {
      myParenthisizedExpressionEditorAspect = new ParenthisizedExpression_Editor();
    }
    return myParenthisizedExpressionEditorAspect;
  }

  private PlusOperation_Editor getPlusOperationEditorAspect() {
    if (myPlusOperationEditorAspect == null) {
      myPlusOperationEditorAspect = new PlusOperation_Editor();
    }
    return myPlusOperationEditorAspect;
  }

  private Reference_Editor getReferenceEditorAspect() {
    if (myReferenceEditorAspect == null) {
      myReferenceEditorAspect = new Reference_Editor();
    }
    return myReferenceEditorAspect;
  }

  private StringConstant_Editor getStringConstantEditorAspect() {
    if (myStringConstantEditorAspect == null) {
      myStringConstantEditorAspect = new StringConstant_Editor();
    }
    return myStringConstantEditorAspect;
  }

  private static String[] stringSwitchCases_xbvbvu_a0a0w = new String[]{"jetbrains.mps.samples.formulaLanguage.structure.AndOperation", "jetbrains.mps.samples.formulaLanguage.structure.Constant", "jetbrains.mps.samples.formulaLanguage.structure.EqualsOperation", "jetbrains.mps.samples.formulaLanguage.structure.Expression", "jetbrains.mps.samples.formulaLanguage.structure.FloatingPointConstant", "jetbrains.mps.samples.formulaLanguage.structure.Formula", "jetbrains.mps.samples.formulaLanguage.structure.Function", "jetbrains.mps.samples.formulaLanguage.structure.GreaterThanOperation", "jetbrains.mps.samples.formulaLanguage.structure.IfFunction", "jetbrains.mps.samples.formulaLanguage.structure.IntegerConstant", "jetbrains.mps.samples.formulaLanguage.structure.IsNullOperation", "jetbrains.mps.samples.formulaLanguage.structure.LessThanOperation", "jetbrains.mps.samples.formulaLanguage.structure.MinusOperation", "jetbrains.mps.samples.formulaLanguage.structure.MultOperation", "jetbrains.mps.samples.formulaLanguage.structure.NotOperation", "jetbrains.mps.samples.formulaLanguage.structure.NullConstant", "jetbrains.mps.samples.formulaLanguage.structure.Operation", "jetbrains.mps.samples.formulaLanguage.structure.OrOperation", "jetbrains.mps.samples.formulaLanguage.structure.ParenthisizedExpression", "jetbrains.mps.samples.formulaLanguage.structure.PlusOperation", "jetbrains.mps.samples.formulaLanguage.structure.Reference", "jetbrains.mps.samples.formulaLanguage.structure.StringConstant"};
}
