package jetbrains.mps.samples.formulaLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.StructureDescriptor;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.structure.ConceptRegistry;

public class StructureAspectDescriptor extends DescriptorProvider<StructureDescriptor> {
  public StructureAspectDescriptor() {
  }

  public StructureDescriptor getDescriptor(String conceptFqName) {
    int hash = conceptFqName.hashCode();
    if (hash == -1019858176) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.Formula", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == 1613959870) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.BaseConcept");
    }
    if (hash == -644561538) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.Function", "jetbrains.mps.samples.formulaLanguage.structure.Expression");
    }
    if (hash == 708846181) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.Reference", "jetbrains.mps.samples.formulaLanguage.structure.Expression");
    }
    if (hash == 1701655882) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.Constant", "jetbrains.mps.samples.formulaLanguage.structure.Expression");
    }
    if (hash == -998262655) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.Operation", "jetbrains.mps.samples.formulaLanguage.structure.Expression");
    }
    if (hash == -2104864100) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.IntegerConstant", "jetbrains.mps.samples.formulaLanguage.structure.Constant");
    }
    if (hash == -1065354488) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.FloatingPointConstant", "jetbrains.mps.samples.formulaLanguage.structure.Constant");
    }
    if (hash == 1724184635) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.IfFunction", "jetbrains.mps.samples.formulaLanguage.structure.Function");
    }
    if (hash == -872490233) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.PlusOperation", "jetbrains.mps.samples.formulaLanguage.structure.Operation");
    }
    if (hash == 1461782525) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.MinusOperation", "jetbrains.mps.samples.formulaLanguage.structure.Operation");
    }
    if (hash == -182827833) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.LessThanOperation", "jetbrains.mps.samples.formulaLanguage.structure.Operation");
    }
    if (hash == -34357199) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.MultOperation", "jetbrains.mps.samples.formulaLanguage.structure.Operation");
    }
    if (hash == -1442054254) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.GreaterThanOperation", "jetbrains.mps.samples.formulaLanguage.structure.Operation");
    }
    if (hash == -275643397) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.StringConstant", "jetbrains.mps.samples.formulaLanguage.structure.Constant");
    }
    if (hash == 120171510) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.AndOperation", "jetbrains.mps.samples.formulaLanguage.structure.Operation");
    }
    if (hash == -836543650) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.OrOperation", "jetbrains.mps.samples.formulaLanguage.structure.Operation");
    }
    if (hash == -956341246) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.EqualsOperation", "jetbrains.mps.samples.formulaLanguage.structure.Operation");
    }
    if (hash == -460077430) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.ParenthisizedExpression", "jetbrains.mps.samples.formulaLanguage.structure.Expression");
    }
    if (hash == -1274043151) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.NullConstant", "jetbrains.mps.samples.formulaLanguage.structure.Expression");
    }
    if (hash == -2012121552) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.IsNullOperation", "jetbrains.mps.samples.formulaLanguage.structure.Operation");
    }
    if (hash == 1152046714) {
      return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.formulaLanguage.structure.NotOperation", "jetbrains.mps.samples.formulaLanguage.structure.Operation");
    }
    return null;
  }

  public static class DataBasedStructureDescriptor extends StructureDescriptor {
    private ImmutableList<String> parents;
    private ImmutableSet<String> ancestors;

    public DataBasedStructureDescriptor(String fqName, String... parents) {
      this.parents = ImmutableList.copyOf(parents);
      this.ancestors = getAncestors(fqName, parents);
    }

    public Set<String> getAncestorsNames() {
      return ancestors;
    }

    public boolean isAssignableTo(String toConceptFqName) {
      return ancestors.contains(toConceptFqName);
    }

    public List<String> getParentsNames() {
      return parents;
    }

    private static ImmutableSet<String> getAncestors(String conceptFqName, String... parents) {
      List<String> result = new ArrayList();

      result.add(conceptFqName);
      ConceptRegistry registry = ConceptRegistry.getInstance();
      for (String parent : parents) {
        result.addAll(registry.getStructureDescriptor(parent).getAncestorsNames());
      }
      return ImmutableSet.copyOf(result);
    }
  }
}
