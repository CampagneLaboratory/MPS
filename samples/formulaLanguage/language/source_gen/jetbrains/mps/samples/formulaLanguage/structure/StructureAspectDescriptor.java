package jetbrains.mps.samples.formulaLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAndOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.AndOperation").super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").alias("&&", "and operation").create();
  /*package*/ final ConceptDescriptor myConceptConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Constant").super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptEqualsOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.EqualsOperation").super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").alias("==", "equals operation").create();
  /*package*/ final ConceptDescriptor myConceptExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Expression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptFloatingPointConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.FloatingPointConstant").super_("jetbrains.mps.samples.formulaLanguage.structure.Constant").parents("jetbrains.mps.samples.formulaLanguage.structure.Constant", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("", "floating point constant").create();
  /*package*/ final ConceptDescriptor myConceptFormula = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Formula").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"expression"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptFunction = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Function").super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptGreaterThanOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.GreaterThanOperation").super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").alias(">", "greater than operation").create();
  /*package*/ final ConceptDescriptor myConceptIfFunction = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.IfFunction").super_("jetbrains.mps.samples.formulaLanguage.structure.Function").parents("jetbrains.mps.samples.formulaLanguage.structure.Function").children(new String[]{"logicalTest", "valueIfTrue", "valueIfFalse"}, new boolean[]{false, false, false}).alias("IF(,,)", "if-function").create();
  /*package*/ final ConceptDescriptor myConceptIntegerConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.IntegerConstant").super_("jetbrains.mps.samples.formulaLanguage.structure.Constant").parents("jetbrains.mps.samples.formulaLanguage.structure.Constant", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("", "integer constant").create();
  /*package*/ final ConceptDescriptor myConceptIsNullOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.IsNullOperation").super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").alias(".isNull", "").create();
  /*package*/ final ConceptDescriptor myConceptLessThanOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.LessThanOperation").super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").alias("<", "less than operation").create();
  /*package*/ final ConceptDescriptor myConceptMinusOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.MinusOperation").super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").alias("-", "minus operation").create();
  /*package*/ final ConceptDescriptor myConceptMultOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.MultOperation").super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").alias("*", "multiply operation").create();
  /*package*/ final ConceptDescriptor myConceptNotOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.NotOperation").super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").alias("!", "not operation (formula language)").create();
  /*package*/ final ConceptDescriptor myConceptNullConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.NullConstant").super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").alias("null", "null expression").create();
  /*package*/ final ConceptDescriptor myConceptOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").children(new String[]{"leftOperand", "rightOperand"}, new boolean[]{false, false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptOrOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.OrOperation").super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").alias("||", "or operation").create();
  /*package*/ final ConceptDescriptor myConceptParenthisizedExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.ParenthisizedExpression").super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").children(new String[]{"expression"}, new boolean[]{false}).alias("(", "(expr)").create();
  /*package*/ final ConceptDescriptor myConceptPlusOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.PlusOperation").super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").alias("+", "plus operation").create();
  /*package*/ final ConceptDescriptor myConceptReference = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Reference").super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptStringConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.StringConstant").super_("jetbrains.mps.samples.formulaLanguage.structure.Constant").parents("jetbrains.mps.samples.formulaLanguage.structure.Constant").properties("value").alias("\"", "string constant").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAndOperation, myConceptConstant, myConceptEqualsOperation, myConceptExpression, myConceptFloatingPointConstant, myConceptFormula, myConceptFunction, myConceptGreaterThanOperation, myConceptIfFunction, myConceptIntegerConstant, myConceptIsNullOperation, myConceptLessThanOperation, myConceptMinusOperation, myConceptMultOperation, myConceptNotOperation, myConceptNullConstant, myConceptOperation, myConceptOrOperation, myConceptParenthisizedExpression, myConceptPlusOperation, myConceptReference, myConceptStringConstant);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0z, conceptFqName)) {
      case 0:
        return myConceptAndOperation;
      case 1:
        return myConceptConstant;
      case 2:
        return myConceptEqualsOperation;
      case 3:
        return myConceptExpression;
      case 4:
        return myConceptFloatingPointConstant;
      case 5:
        return myConceptFormula;
      case 6:
        return myConceptFunction;
      case 7:
        return myConceptGreaterThanOperation;
      case 8:
        return myConceptIfFunction;
      case 9:
        return myConceptIntegerConstant;
      case 10:
        return myConceptIsNullOperation;
      case 11:
        return myConceptLessThanOperation;
      case 12:
        return myConceptMinusOperation;
      case 13:
        return myConceptMultOperation;
      case 14:
        return myConceptNotOperation;
      case 15:
        return myConceptNullConstant;
      case 16:
        return myConceptOperation;
      case 17:
        return myConceptOrOperation;
      case 18:
        return myConceptParenthisizedExpression;
      case 19:
        return myConceptPlusOperation;
      case 20:
        return myConceptReference;
      case 21:
        return myConceptStringConstant;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0z = new String[]{"jetbrains.mps.samples.formulaLanguage.structure.AndOperation", "jetbrains.mps.samples.formulaLanguage.structure.Constant", "jetbrains.mps.samples.formulaLanguage.structure.EqualsOperation", "jetbrains.mps.samples.formulaLanguage.structure.Expression", "jetbrains.mps.samples.formulaLanguage.structure.FloatingPointConstant", "jetbrains.mps.samples.formulaLanguage.structure.Formula", "jetbrains.mps.samples.formulaLanguage.structure.Function", "jetbrains.mps.samples.formulaLanguage.structure.GreaterThanOperation", "jetbrains.mps.samples.formulaLanguage.structure.IfFunction", "jetbrains.mps.samples.formulaLanguage.structure.IntegerConstant", "jetbrains.mps.samples.formulaLanguage.structure.IsNullOperation", "jetbrains.mps.samples.formulaLanguage.structure.LessThanOperation", "jetbrains.mps.samples.formulaLanguage.structure.MinusOperation", "jetbrains.mps.samples.formulaLanguage.structure.MultOperation", "jetbrains.mps.samples.formulaLanguage.structure.NotOperation", "jetbrains.mps.samples.formulaLanguage.structure.NullConstant", "jetbrains.mps.samples.formulaLanguage.structure.Operation", "jetbrains.mps.samples.formulaLanguage.structure.OrOperation", "jetbrains.mps.samples.formulaLanguage.structure.ParenthisizedExpression", "jetbrains.mps.samples.formulaLanguage.structure.PlusOperation", "jetbrains.mps.samples.formulaLanguage.structure.Reference", "jetbrains.mps.samples.formulaLanguage.structure.StringConstant"};
}
