package jetbrains.mps.samples.formulaLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {

  /*package*/ final ConceptDescriptor myConceptAndOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.AndOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x108050a5816L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("&&", "and operation").create();
  /*package*/ final ConceptDescriptor myConceptConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Constant", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptEqualsOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.EqualsOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10809c54870L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("==", "equals operation").create();
  /*package*/ final ConceptDescriptor myConceptExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Expression", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptFloatingPointConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.FloatingPointConstant", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8bab3cL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Constant").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Constant", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(1113257000626L, "value")).properties("value").alias("", "floating point constant").create();
  /*package*/ final ConceptDescriptor myConceptFormula = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Formula", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db80c054L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).childDescriptors(new ConceptDescriptorBuilder.Link(1111784226798L, "expression", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), false, false, false)).children(new String[]{"expression"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptFunction = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Function", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8296fcL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptGreaterThanOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.GreaterThanOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x103009e5ee0L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias(">", "greater than operation").create();
  /*package*/ final ConceptDescriptor myConceptIfFunction = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.IfFunction", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8d4298L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Function").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8296fcL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Function").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8296fcL)).childDescriptors(new ConceptDescriptorBuilder.Link(1111785044750L, "logicalTest", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), false, false, false), new ConceptDescriptorBuilder.Link(1111785091720L, "valueIfTrue", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), false, false, false), new ConceptDescriptorBuilder.Link(1111785124143L, "valueIfFalse", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), false, false, false)).children(new String[]{"logicalTest", "valueIfTrue", "valueIfFalse"}, new boolean[]{false, false, false}).alias("IF(,,)", "if-function").create();
  /*package*/ final ConceptDescriptor myConceptIntegerConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.IntegerConstant", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8aa3f9L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Constant").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Constant", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(1111784874587L, "value")).properties("value").alias("", "integer constant").create();
  /*package*/ final ConceptDescriptor myConceptIsNullOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.IsNullOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10a037c6c0bL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias(".isNull", "").create();
  /*package*/ final ConceptDescriptor myConceptLessThanOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.LessThanOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102ea976b99L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("<", "less than operation").create();
  /*package*/ final ConceptDescriptor myConceptMinusOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.MinusOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102dba2244aL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("-", "minus operation").create();
  /*package*/ final ConceptDescriptor myConceptMultOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.MultOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102ff4441ddL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("*", "multiply operation").create();
  /*package*/ final ConceptDescriptor myConceptNotOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.NotOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10a04135987L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("!", "not operation (formula language)").create();
  /*package*/ final ConceptDescriptor myConceptNullConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.NullConstant", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10a036c79c0L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).alias("null", "null expression").create();
  /*package*/ final ConceptDescriptor myConceptOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Operation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).childDescriptors(new ConceptDescriptorBuilder.Link(1111784613299L, "leftOperand", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), false, false, false), new ConceptDescriptorBuilder.Link(1111784647019L, "rightOperand", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), false, false, false)).children(new String[]{"leftOperand", "rightOperand"}, new boolean[]{false, false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptOrOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.OrOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x108050ab746L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("||", "or operation").create();
  /*package*/ final ConceptDescriptor myConceptParenthisizedExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.ParenthisizedExpression", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10809d032baL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).childDescriptors(new ConceptDescriptorBuilder.Link(1134036114963L, "expression", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), true, false, false)).children(new String[]{"expression"}, new boolean[]{false}).alias("(", "(expr)").create();
  /*package*/ final ConceptDescriptor myConceptPlusOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.PlusOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102dba0a69dL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("+", "plus operation").create();
  /*package*/ final ConceptDescriptor myConceptReference = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Reference", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db83846eL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptStringConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.StringConstant", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10804f6f702L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Constant").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Constant").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(1133954700480L, "value")).properties("value").alias("\"", "string constant").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAndOperation, myConceptConstant, myConceptEqualsOperation, myConceptExpression, myConceptFloatingPointConstant, myConceptFormula, myConceptFunction, myConceptGreaterThanOperation, myConceptIfFunction, myConceptIntegerConstant, myConceptIsNullOperation, myConceptLessThanOperation, myConceptMinusOperation, myConceptMultOperation, myConceptNotOperation, myConceptNullConstant, myConceptOperation, myConceptOrOperation, myConceptParenthisizedExpression, myConceptPlusOperation, myConceptReference, myConceptStringConstant);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0ab, conceptFqName)) {
      case 0:
        return myConceptAndOperation;
      case 1:
        return myConceptConstant;
      case 2:
        return myConceptEqualsOperation;
      case 3:
        return myConceptExpression;
      case 4:
        return myConceptFloatingPointConstant;
      case 5:
        return myConceptFormula;
      case 6:
        return myConceptFunction;
      case 7:
        return myConceptGreaterThanOperation;
      case 8:
        return myConceptIfFunction;
      case 9:
        return myConceptIntegerConstant;
      case 10:
        return myConceptIsNullOperation;
      case 11:
        return myConceptLessThanOperation;
      case 12:
        return myConceptMinusOperation;
      case 13:
        return myConceptMultOperation;
      case 14:
        return myConceptNotOperation;
      case 15:
        return myConceptNullConstant;
      case 16:
        return myConceptOperation;
      case 17:
        return myConceptOrOperation;
      case 18:
        return myConceptParenthisizedExpression;
      case 19:
        return myConceptPlusOperation;
      case 20:
        return myConceptReference;
      case 21:
        return myConceptStringConstant;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0ab = new String[]{"jetbrains.mps.samples.formulaLanguage.structure.AndOperation", "jetbrains.mps.samples.formulaLanguage.structure.Constant", "jetbrains.mps.samples.formulaLanguage.structure.EqualsOperation", "jetbrains.mps.samples.formulaLanguage.structure.Expression", "jetbrains.mps.samples.formulaLanguage.structure.FloatingPointConstant", "jetbrains.mps.samples.formulaLanguage.structure.Formula", "jetbrains.mps.samples.formulaLanguage.structure.Function", "jetbrains.mps.samples.formulaLanguage.structure.GreaterThanOperation", "jetbrains.mps.samples.formulaLanguage.structure.IfFunction", "jetbrains.mps.samples.formulaLanguage.structure.IntegerConstant", "jetbrains.mps.samples.formulaLanguage.structure.IsNullOperation", "jetbrains.mps.samples.formulaLanguage.structure.LessThanOperation", "jetbrains.mps.samples.formulaLanguage.structure.MinusOperation", "jetbrains.mps.samples.formulaLanguage.structure.MultOperation", "jetbrains.mps.samples.formulaLanguage.structure.NotOperation", "jetbrains.mps.samples.formulaLanguage.structure.NullConstant", "jetbrains.mps.samples.formulaLanguage.structure.Operation", "jetbrains.mps.samples.formulaLanguage.structure.OrOperation", "jetbrains.mps.samples.formulaLanguage.structure.ParenthisizedExpression", "jetbrains.mps.samples.formulaLanguage.structure.PlusOperation", "jetbrains.mps.samples.formulaLanguage.structure.Reference", "jetbrains.mps.samples.formulaLanguage.structure.StringConstant"};
}
