package jetbrains.mps.baseLanguage.math.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myInIntervalExpression_BehaviorDescriptor = new InIntervalExpression_BehaviorDescriptor();
  private final BHDescriptor myIntervalContainsExpression_BehaviorDescriptor = new IntervalContainsExpression_BehaviorDescriptor();
  private final BHDescriptor myMathSymbol_BehaviorDescriptor = new MathSymbol_BehaviorDescriptor();
  private final BHDescriptor myBigProdExpression_BehaviorDescriptor = new BigProdExpression_BehaviorDescriptor();
  private final BHDescriptor myBigMaxExpression_BehaviorDescriptor = new BigMaxExpression_BehaviorDescriptor();
  private final BHDescriptor myBigMinExpression_BehaviorDescriptor = new BigMinExpression_BehaviorDescriptor();
  private final BHDescriptor myBigSumExpression_BehaviorDescriptor = new BigSumExpression_BehaviorDescriptor();
  private final BHDescriptor myDecimalBinaryOperation_BehaviorDescriptor = new DecimalBinaryOperation_BehaviorDescriptor();
  private final BHDescriptor myDecimalDivExpression_BehaviorDescriptor = new DecimalDivExpression_BehaviorDescriptor();
  private final BHDescriptor myDecimalMulExpression_BehaviorDescriptor = new DecimalMulExpression_BehaviorDescriptor();
  private final BHDescriptor myDecimalPlusExpression_BehaviorDescriptor = new DecimalPlusExpression_BehaviorDescriptor();
  private final BHDescriptor myDecimalMinusExpression_BehaviorDescriptor = new DecimalMinusExpression_BehaviorDescriptor();
  private final BHDescriptor myMatrixInverseOperation_BehaviorDescriptor = new MatrixInverseOperation_BehaviorDescriptor();
  private final BHDescriptor myMathContext_BehaviorDescriptor = new MathContext_BehaviorDescriptor();
  private final BHDescriptor myMatrixType_BehaviorDescriptor = new MatrixType_BehaviorDescriptor();
  private final BHDescriptor myMatrixConstructor_BehaviorDescriptor = new MatrixConstructor_BehaviorDescriptor();
  private final BHDescriptor myMatrixElementAccessExpression_BehaviorDescriptor = new MatrixElementAccessExpression_BehaviorDescriptor();
  private final BHDescriptor myExponentialOperation_BehaviorDescriptor = new ExponentialOperation_BehaviorDescriptor();
  private final BHDescriptor myMatrixExponentialOperation_BehaviorDescriptor = new MatrixExponentialOperation_BehaviorDescriptor();
  private final BHDescriptor myConjugateOperation_BehaviorDescriptor = new ConjugateOperation_BehaviorDescriptor();
  private final BHDescriptor myTransposeOperation_BehaviorDescriptor = new TransposeOperation_BehaviorDescriptor();

  private final long[] myConceptBehaviorIds;

  public BehaviorAspectDescriptor() {
    myConceptBehaviorIds = new long[21];
    myConceptBehaviorIds[0] = 0x11fb8483964L;
    myConceptBehaviorIds[1] = 0x11fb8483968L;
    myConceptBehaviorIds[2] = 0x11fe0ca1899L;
    myConceptBehaviorIds[3] = 0x11fe0e12aa0L;
    myConceptBehaviorIds[4] = 0x11fe0e16047L;
    myConceptBehaviorIds[5] = 0x11fe0e1674dL;
    myConceptBehaviorIds[6] = 0x11fe188eafbL;
    myConceptBehaviorIds[7] = 0x120568d9c5bL;
    myConceptBehaviorIds[8] = 0x1207697107bL;
    myConceptBehaviorIds[9] = 0x120769754c8L;
    myConceptBehaviorIds[10] = 0x1207697a328L;
    myConceptBehaviorIds[11] = 0x12076988136L;
    myConceptBehaviorIds[12] = 0x13afebc2af505abcL;
    myConceptBehaviorIds[13] = 0x1a6fbb5a434b008bL;
    myConceptBehaviorIds[14] = 0x42d5783a6267f776L;
    myConceptBehaviorIds[15] = 0x42d5783a626b0a85L;
    myConceptBehaviorIds[16] = 0x58aab8999c8f432aL;
    myConceptBehaviorIds[17] = 0x64b1e972e6443a20L;
    myConceptBehaviorIds[18] = 0x64b1e972e647ad7dL;
    myConceptBehaviorIds[19] = 0x64b1e972e64afe53L;
    myConceptBehaviorIds[20] = 0x7418107bdc9576d4L;
  }

  @Deprecated
  @Override
  public BehaviorDescriptor getDescriptor(String fqName) {
    return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
  }

  @Nullable
  @Override
  public BHDescriptor getDescriptor(@NotNull SConceptId conceptId) {
    int behaviorIndex = Arrays.binarySearch(myConceptBehaviorIds, conceptId.getIdValue());
    switch (behaviorIndex) {
      case 0:
        return myInIntervalExpression_BehaviorDescriptor;
      case 1:
        return myIntervalContainsExpression_BehaviorDescriptor;
      case 2:
        return myMathSymbol_BehaviorDescriptor;
      case 3:
        return myBigProdExpression_BehaviorDescriptor;
      case 4:
        return myBigMaxExpression_BehaviorDescriptor;
      case 5:
        return myBigMinExpression_BehaviorDescriptor;
      case 6:
        return myBigSumExpression_BehaviorDescriptor;
      case 7:
        return myDecimalBinaryOperation_BehaviorDescriptor;
      case 8:
        return myDecimalDivExpression_BehaviorDescriptor;
      case 9:
        return myDecimalMulExpression_BehaviorDescriptor;
      case 10:
        return myDecimalPlusExpression_BehaviorDescriptor;
      case 11:
        return myDecimalMinusExpression_BehaviorDescriptor;
      case 12:
        return myMatrixInverseOperation_BehaviorDescriptor;
      case 13:
        return myMathContext_BehaviorDescriptor;
      case 14:
        return myMatrixType_BehaviorDescriptor;
      case 15:
        return myMatrixConstructor_BehaviorDescriptor;
      case 16:
        return myMatrixElementAccessExpression_BehaviorDescriptor;
      case 17:
        return myExponentialOperation_BehaviorDescriptor;
      case 18:
        return myMatrixExponentialOperation_BehaviorDescriptor;
      case 19:
        return myConjugateOperation_BehaviorDescriptor;
      case 20:
        return myTransposeOperation_BehaviorDescriptor;
      default:
        return null;
    }
  }
}
