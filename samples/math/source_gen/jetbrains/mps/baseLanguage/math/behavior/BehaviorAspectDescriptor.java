package jetbrains.mps.baseLanguage.math.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myInIntervalExpression__BehaviorDescriptor = new InIntervalExpression__BehaviorDescriptor();
  private final BHDescriptor myIntervalContainsExpression__BehaviorDescriptor = new IntervalContainsExpression__BehaviorDescriptor();
  private final BHDescriptor myMathSymbol__BehaviorDescriptor = new MathSymbol__BehaviorDescriptor();
  private final BHDescriptor myBigProdExpression__BehaviorDescriptor = new BigProdExpression__BehaviorDescriptor();
  private final BHDescriptor myBigMaxExpression__BehaviorDescriptor = new BigMaxExpression__BehaviorDescriptor();
  private final BHDescriptor myBigMinExpression__BehaviorDescriptor = new BigMinExpression__BehaviorDescriptor();
  private final BHDescriptor myBigSumExpression__BehaviorDescriptor = new BigSumExpression__BehaviorDescriptor();
  private final BHDescriptor myDecimalBinaryOperation__BehaviorDescriptor = new DecimalBinaryOperation__BehaviorDescriptor();
  private final BHDescriptor myDecimalDivExpression__BehaviorDescriptor = new DecimalDivExpression__BehaviorDescriptor();
  private final BHDescriptor myDecimalMulExpression__BehaviorDescriptor = new DecimalMulExpression__BehaviorDescriptor();
  private final BHDescriptor myDecimalPlusExpression__BehaviorDescriptor = new DecimalPlusExpression__BehaviorDescriptor();
  private final BHDescriptor myDecimalMinusExpression__BehaviorDescriptor = new DecimalMinusExpression__BehaviorDescriptor();
  private final BHDescriptor myMatrixInverseOperation__BehaviorDescriptor = new MatrixInverseOperation__BehaviorDescriptor();
  private final BHDescriptor myMathContext__BehaviorDescriptor = new MathContext__BehaviorDescriptor();
  private final BHDescriptor myMatrixType__BehaviorDescriptor = new MatrixType__BehaviorDescriptor();
  private final BHDescriptor myMatrixConstructor__BehaviorDescriptor = new MatrixConstructor__BehaviorDescriptor();
  private final BHDescriptor myMatrixElementAccessExpression__BehaviorDescriptor = new MatrixElementAccessExpression__BehaviorDescriptor();
  private final BHDescriptor myExponentialOperation__BehaviorDescriptor = new ExponentialOperation__BehaviorDescriptor();
  private final BHDescriptor myMatrixExponentialOperation__BehaviorDescriptor = new MatrixExponentialOperation__BehaviorDescriptor();
  private final BHDescriptor myConjugateOperation__BehaviorDescriptor = new ConjugateOperation__BehaviorDescriptor();
  private final BHDescriptor myTransposeOperation__BehaviorDescriptor = new TransposeOperation__BehaviorDescriptor();

  private final long[] myConceptBehaviorIds;

  public BehaviorAspectDescriptor() {
    myConceptBehaviorIds = new long[21];
    myConceptBehaviorIds[0] = 0x11fb8483964L;
    myConceptBehaviorIds[1] = 0x11fb8483968L;
    myConceptBehaviorIds[2] = 0x11fe0ca1899L;
    myConceptBehaviorIds[3] = 0x11fe0e12aa0L;
    myConceptBehaviorIds[4] = 0x11fe0e16047L;
    myConceptBehaviorIds[5] = 0x11fe0e1674dL;
    myConceptBehaviorIds[6] = 0x11fe188eafbL;
    myConceptBehaviorIds[7] = 0x120568d9c5bL;
    myConceptBehaviorIds[8] = 0x1207697107bL;
    myConceptBehaviorIds[9] = 0x120769754c8L;
    myConceptBehaviorIds[10] = 0x1207697a328L;
    myConceptBehaviorIds[11] = 0x12076988136L;
    myConceptBehaviorIds[12] = 0x13afebc2af505abcL;
    myConceptBehaviorIds[13] = 0x1a6fbb5a434b008bL;
    myConceptBehaviorIds[14] = 0x42d5783a6267f776L;
    myConceptBehaviorIds[15] = 0x42d5783a626b0a85L;
    myConceptBehaviorIds[16] = 0x58aab8999c8f432aL;
    myConceptBehaviorIds[17] = 0x64b1e972e6443a20L;
    myConceptBehaviorIds[18] = 0x64b1e972e647ad7dL;
    myConceptBehaviorIds[19] = 0x64b1e972e64afe53L;
    myConceptBehaviorIds[20] = 0x7418107bdc9576d4L;
  }

  @Deprecated
  @Override
  public BehaviorDescriptor getDescriptor(String fqName) {
    return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
  }

  @Nullable
  @Override
  public BHDescriptor getDescriptor(@NotNull SConceptId conceptId) {
    int behaviorIndex = Arrays.binarySearch(myConceptBehaviorIds, conceptId.getIdValue());
    switch (behaviorIndex) {
      case 0:
        return myInIntervalExpression__BehaviorDescriptor;
      case 1:
        return myIntervalContainsExpression__BehaviorDescriptor;
      case 2:
        return myMathSymbol__BehaviorDescriptor;
      case 3:
        return myBigProdExpression__BehaviorDescriptor;
      case 4:
        return myBigMaxExpression__BehaviorDescriptor;
      case 5:
        return myBigMinExpression__BehaviorDescriptor;
      case 6:
        return myBigSumExpression__BehaviorDescriptor;
      case 7:
        return myDecimalBinaryOperation__BehaviorDescriptor;
      case 8:
        return myDecimalDivExpression__BehaviorDescriptor;
      case 9:
        return myDecimalMulExpression__BehaviorDescriptor;
      case 10:
        return myDecimalPlusExpression__BehaviorDescriptor;
      case 11:
        return myDecimalMinusExpression__BehaviorDescriptor;
      case 12:
        return myMatrixInverseOperation__BehaviorDescriptor;
      case 13:
        return myMathContext__BehaviorDescriptor;
      case 14:
        return myMatrixType__BehaviorDescriptor;
      case 15:
        return myMatrixConstructor__BehaviorDescriptor;
      case 16:
        return myMatrixElementAccessExpression__BehaviorDescriptor;
      case 17:
        return myExponentialOperation__BehaviorDescriptor;
      case 18:
        return myMatrixExponentialOperation__BehaviorDescriptor;
      case 19:
        return myConjugateOperation__BehaviorDescriptor;
      case 20:
        return myTransposeOperation__BehaviorDescriptor;
      default:
        return null;
    }
  }
}
