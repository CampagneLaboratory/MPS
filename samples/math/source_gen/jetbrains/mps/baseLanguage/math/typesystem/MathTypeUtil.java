package jetbrains.mps.baseLanguage.math.typesystem;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.pattern.util.MatchingUtil;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.baseLanguage.math.behavior.MathUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.SReference;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class MathTypeUtil {
  public static final SNode qBigComplex = _quotation_createNode_i9t80i_a0();
  public static final SNode qBCMatrix = _quotation_createNode_i9t80i_a1();
  public static final SNode qBigInteger = _quotation_createNode_i9t80i_a2();
  public static final SNode qBigDecimal = _quotation_createNode_i9t80i_a3();
  public static final SNode qLong = _quotation_createNode_i9t80i_a4();
  public static final SNode bLong = _quotation_createNode_i9t80i_a5();
  public static final SNode qBoolean = _quotation_createNode_i9t80i_a6();
  public static final SNode qComplex = _quotation_createNode_i9t80i_a7();
  public static final SNode qInt = _quotation_createNode_i9t80i_a8();
  public static final SNode bInt = _quotation_createNode_i9t80i_a9();
  public static final SNode qFloat = _quotation_createNode_i9t80i_a01();
  public static final SNode bFloat = _quotation_createNode_i9t80i_a11();
  public static final SNode qDouble = _quotation_createNode_i9t80i_a21();
  public static final SNode bDouble = _quotation_createNode_i9t80i_a31();

  public MathTypeUtil() {
  }

  public static SNode qMatrix(SNode elementType) {
    return _quotation_createNode_i9t80i_a0a51(elementType);
  }

  public static SNode qVector(SNode elementType) {
    return _quotation_createNode_i9t80i_a0a61(elementType);
  }

  public static boolean bigType(SNode t) {
    return SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.math.structure.BigIntegerType") || SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.math.structure.BigDecimalType") || SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.math.structure.BigComplexType");
  }

  public static boolean complexType(SNode t) {
    return SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.math.structure.ComplexType") || SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.math.structure.BigComplexType");
  }

  public static boolean floatType(SNode t) {
    return SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.structure.FloatType") || SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.structure.DoubleType") || SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.math.structure.ComplexType") || SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.math.structure.BigDecimalType") || SNodeOperations.isInstanceOf(t, "jetbrains.mps.baseLanguage.math.structure.BigComplexType") || MatchingUtil.matchNodes(t, _quotation_createNode_i9t80i_a0a0a0t()) || MatchingUtil.matchNodes(t, _quotation_createNode_i9t80i_a0a0a91());
  }

  public static SNode join(SNode t1, SNode t2) {
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(t1, t2)) {
      return t2;
    } else if (TypeChecker.getInstance().getSubtypingManager().isSubtype(t2, t1)) {
      return t1;
    } else {
      boolean bf = bigType(t1) || bigType(t2);
      boolean cf = complexType(t1) || complexType(t2);
      boolean ff = floatType(t1) || floatType(t2);
      if (bf && cf) {
        return SNodeOperations.copyNode(qBigComplex);
      }
      if (ff && bf) {
        return SNodeOperations.copyNode(qBigDecimal);
      }
      return null;
    }
  }

  public static SNode ML_matrixOp(SNode t1, SNode t2, boolean mul) {
    SNode eT = join(MathUtil.getUnboxedElementType(t1), MathUtil.getUnboxedElementType(t2));
    boolean v1 = SNodeOperations.isInstanceOf(t1, "jetbrains.mps.baseLanguage.math.structure.VectorType");
    boolean v2 = SNodeOperations.isInstanceOf(t2, "jetbrains.mps.baseLanguage.math.structure.VectorType");
    if (mul) {
      if (v2) {
        return qVector(SNodeOperations.copyNode(eT));
      } else {
        return qMatrix(SNodeOperations.copyNode(eT));
      }
    } else {
      if (v1 || v2) {
        return qVector(SNodeOperations.copyNode(eT));
      } else {
        return qMatrix(SNodeOperations.copyNode(eT));
      }
    }
  }

  public static int binaryOperationRequiresWidening(SNode binOp, SNode expr) {
    boolean left = SNodeOperations.hasRole(expr, "jetbrains.mps.baseLanguage.structure.BinaryOperation", "leftExpression");
    boolean right = SNodeOperations.hasRole(expr, "jetbrains.mps.baseLanguage.structure.BinaryOperation", "rightExpression");
    if (!(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(binOp), "jetbrains.mps.baseLanguage.structure.Type")) || !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(expr), "jetbrains.mps.baseLanguage.structure.Type"))) {
      return 0;
    }
    SNode opType = SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(binOp), "jetbrains.mps.baseLanguage.structure.Type");
    SNode exprType = SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(expr), "jetbrains.mps.baseLanguage.structure.Type");
    SNode oppositeOp = null;
    if (left) {
      oppositeOp = SLinkOperations.getTarget(binOp, "rightExpression", true);
    }
    if (right) {
      oppositeOp = SLinkOperations.getTarget(binOp, "leftExpression", true);
    }
    SNode oppExprType = SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(oppositeOp), "jetbrains.mps.baseLanguage.structure.Type");
    if (SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(binOp), "jetbrains.mps.baseLanguage.math.structure.MatrixType") && (SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.MulExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.PlusExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.MinusExpression"))) {
      return 0;
    } else {
      if (SNodeOperations.isInstanceOf(oppExprType, "jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType") || SNodeOperations.isInstanceOf(exprType, "jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType")) {
        if (SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.PlusExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.MinusExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.DivExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.MulExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.BitwiseAndExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.BitwiseXorExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.BitwiseOrExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation")) {
          return pickExplicitWidening(exprType, opType);
        } else if (SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.EqualsExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.NotEqualsExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.LessThanExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.GreaterThanExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression") || SNodeOperations.isInstanceOf(binOp, "jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression")) {
          if (SNodeOperations.isInstanceOf(oppositeOp, "jetbrains.mps.baseLanguage.structure.NullLiteral") || SNodeOperations.isInstanceOf(expr, "jetbrains.mps.baseLanguage.structure.NullLiteral")) {
            return 0;
          }
          return pickExplicitWidening(exprType, join(exprType, oppExprType));
        } else {
          return 0;
        }
      } else {
        return 0;
      }
    }
  }

  public static SNode getElementType(SNode t) {
    {
      SNode matchedNode_i9t80i_a0x = t;
      {
        boolean matches_i9t80i_a0a32 = false;
        {
          SNode matchingNode_i9t80i_a0a32 = t;
          if (matchingNode_i9t80i_a0a32 != null) {
            matches_i9t80i_a0a32 = SModelUtil_new.isAssignableConcept(matchingNode_i9t80i_a0a32.getConcept().getQualifiedName(), "jetbrains.mps.baseLanguage.math.structure.MatrixType");
          }
        }
        if (matches_i9t80i_a0a32) {
          return SLinkOperations.getTarget(matchedNode_i9t80i_a0x, "elementType", true);
        } else {
          boolean matches_i9t80i_b0a32 = false;
          {
            SNode matchingNode_i9t80i_b0a32 = t;
            if (matchingNode_i9t80i_b0a32 != null) {
              matches_i9t80i_b0a32 = SModelUtil_new.isAssignableConcept(matchingNode_i9t80i_b0a32.getConcept().getQualifiedName(), "jetbrains.mps.baseLanguage.math.structure.VectorType");
            }
          }
          if (matches_i9t80i_b0a32) {
            return SLinkOperations.getTarget(matchedNode_i9t80i_a0x, "elementType", true);
          } else
          return null;
        }
      }
    }
  }

  public static int pickExplicitWidening(SNode narrower, SNode wider) {
    if (!(SNodeOperations.isInstanceOf(narrower, "jetbrains.mps.baseLanguage.structure.Type"))) {
      return 0;
    }
    if (SNodeOperations.isInstanceOf(narrower, "jetbrains.mps.baseLanguage.structure.NullType")) {
      return 0;
    }
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(wider, qBCMatrix) && TypeChecker.getInstance().getSubtypingManager().isSubtype(narrower, qBCMatrix) && !(MatchingUtil.matchNodes(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) (Object.class)), getElementType(wider), "virtual_getUnboxedType_1213877337320", new Object[]{}), BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) (Object.class)), getElementType(narrower), "virtual_getUnboxedType_1213877337320", new Object[]{})))) {
      if (MatchingUtil.matchNodes(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) (Object.class)), getElementType(wider), "virtual_getUnboxedType_1213877337320", new Object[]{}), bInt)) {
        return 9;
      }
      if (MatchingUtil.matchNodes(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) (Object.class)), getElementType(wider), "virtual_getUnboxedType_1213877337320", new Object[]{}), bLong)) {
        return 10;
      }
      if (MatchingUtil.matchNodes(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) (Object.class)), getElementType(wider), "virtual_getUnboxedType_1213877337320", new Object[]{}), bFloat)) {
        return 11;
      }
      if (MatchingUtil.matchNodes(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) (Object.class)), getElementType(wider), "virtual_getUnboxedType_1213877337320", new Object[]{}), bDouble)) {
        return 12;
      }
      if (SNodeOperations.isInstanceOf(getElementType(wider), "jetbrains.mps.baseLanguage.math.structure.BigIntegerType")) {
        return 13;
      }
      if (SNodeOperations.isInstanceOf(getElementType(wider), "jetbrains.mps.baseLanguage.math.structure.BigDecimalType")) {
        return 14;
      }
      if (SNodeOperations.isInstanceOf(getElementType(wider), "jetbrains.mps.baseLanguage.math.structure.ComplexType")) {
        return 15;
      }
      if (SNodeOperations.isInstanceOf(getElementType(wider), "jetbrains.mps.baseLanguage.math.structure.BigComplexType")) {
        return 16;
      }
    }
    if (SNodeOperations.isInstanceOf(wider, "jetbrains.mps.baseLanguage.math.structure.BigIntegerType") && TypeChecker.getInstance().getSubtypingManager().isSubtype(narrower, qLong)) {
      return 1;
    }
    if (SNodeOperations.isInstanceOf(wider, "jetbrains.mps.baseLanguage.math.structure.ComplexType") && TypeChecker.getInstance().getSubtypingManager().isSubtype(narrower, qDouble)) {
      return 2;
    }
    if (SNodeOperations.isInstanceOf(wider, "jetbrains.mps.baseLanguage.math.structure.BigDecimalType") && TypeChecker.getInstance().getSubtypingManager().isSubtype(narrower, qDouble)) {
      return 3;
    }
    if (SNodeOperations.isInstanceOf(wider, "jetbrains.mps.baseLanguage.math.structure.BigDecimalType") && SNodeOperations.isInstanceOf(narrower, "jetbrains.mps.baseLanguage.math.structure.BigIntegerType")) {
      return 4;
    }
    if (SNodeOperations.isInstanceOf(wider, "jetbrains.mps.baseLanguage.math.structure.BigComplexType") && TypeChecker.getInstance().getSubtypingManager().isSubtype(narrower, qDouble)) {
      return 5;
    }
    if (SNodeOperations.isInstanceOf(wider, "jetbrains.mps.baseLanguage.math.structure.BigComplexType") && SNodeOperations.isInstanceOf(narrower, "jetbrains.mps.baseLanguage.math.structure.BigIntegerType")) {
      return 6;
    }
    if (SNodeOperations.isInstanceOf(wider, "jetbrains.mps.baseLanguage.math.structure.BigComplexType") && SNodeOperations.isInstanceOf(narrower, "jetbrains.mps.baseLanguage.math.structure.BigDecimalType")) {
      return 7;
    }
    if (SNodeOperations.isInstanceOf(wider, "jetbrains.mps.baseLanguage.math.structure.BigComplexType") && SNodeOperations.isInstanceOf(narrower, "jetbrains.mps.baseLanguage.math.structure.ComplexType")) {
      return 8;
    }
    return 0;
  }

  public static SNode canMakeReturnStatement(SNode node) {
    SNode returnType = null;
    if (SNodeOperations.isInstanceOf(node, "jetbrains.mps.baseLanguage.structure.ExpressionStatement")) {
      if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.StatementList")) {
        SNode statementList = SNodeOperations.cast(SNodeOperations.getParent(node), "jetbrains.mps.baseLanguage.structure.StatementList");
        SNode parent = SNodeOperations.getParent(statementList);
        if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(statementList), "jetbrains.mps.baseLanguage.structure.BlockStatement")) {
          SNode blockStatement = SNodeOperations.cast(SNodeOperations.getParent(statementList), "jetbrains.mps.baseLanguage.structure.BlockStatement");
          parent = SNodeOperations.getParent(blockStatement);
          if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.StatementList")) {
            SNode bsStatementList = SNodeOperations.cast(parent, "jetbrains.mps.baseLanguage.structure.StatementList");
            List<SNode> statements = SLinkOperations.getTargets(bsStatementList, "statement", true);
            if (ListSequence.fromList(statements).last() == blockStatement) {
              parent = SNodeOperations.getParent(bsStatementList);
            }
          }
        }
        if (!(SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.Statement")) && !(SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration")) && !(SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.CatchClause")) && !(SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.SwitchCase"))) {
          if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) {
            returnType = SLinkOperations.getTarget(SNodeOperations.cast(parent, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), "returnType", true);
          } else if (SNodeOperations.isInstanceOf(parent, "jetbrains.mps.baseLanguage.structure.ConceptFunction")) {
            returnType = SNodeOperations.cast(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) (Object.class)), SNodeOperations.cast(parent, "jetbrains.mps.baseLanguage.structure.ConceptFunction"), "virtual_getExpectedReturnType_1213877374441", new Object[]{}), "jetbrains.mps.baseLanguage.structure.Type");
          }
        }
      }
    }
    return returnType;
  }

  public static SNode typeOfMatrixScalarMultiplication(SNode scalarType, SNode vT) {
    SNode e = MathTypeUtil.getElementType(vT);
    if (TypeChecker.getInstance().getSubtypingManager().isSubtype(e, scalarType) && SNodeOperations.isInstanceOf(scalarType, "jetbrains.mps.baseLanguage.structure.Type")) {
      e = SNodeOperations.cast(scalarType, "jetbrains.mps.baseLanguage.structure.Type");
    }
    {
      SNode matchedNode_i9t80i_c0ab = vT;
      {
        boolean matches_i9t80i_a2a62 = false;
        {
          SNode matchingNode_i9t80i_a2a62 = vT;
          if (matchingNode_i9t80i_a2a62 != null) {
            matches_i9t80i_a2a62 = SModelUtil_new.isAssignableConcept(matchingNode_i9t80i_a2a62.getConcept().getQualifiedName(), "jetbrains.mps.baseLanguage.math.structure.MatrixType");
          }
        }
        if (matches_i9t80i_a2a62) {
          {
            SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.math.structure.MatrixType", null);
            SPropertyOperations.set(result, "rows", "" + (SPropertyOperations.getInteger(matchedNode_i9t80i_c0ab, "rows")));
            SPropertyOperations.set(result, "columns", "" + (SPropertyOperations.getInteger(matchedNode_i9t80i_c0ab, "columns")));
            SLinkOperations.setTarget(result, "elementType", e, true);
            return result;
          }
        } else {
          boolean matches_i9t80i_b2a62 = false;
          {
            SNode matchingNode_i9t80i_b2a62 = vT;
            if (matchingNode_i9t80i_b2a62 != null) {
              matches_i9t80i_b2a62 = SModelUtil_new.isAssignableConcept(matchingNode_i9t80i_b2a62.getConcept().getQualifiedName(), "jetbrains.mps.baseLanguage.math.structure.VectorType");
            }
          }
          if (matches_i9t80i_b2a62) {
            {
              SNode result = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.math.structure.VectorType", null);
              SPropertyOperations.set(result, "height", "" + (SPropertyOperations.getInteger(matchedNode_i9t80i_c0ab, "height")));
              SLinkOperations.setTarget(result, "elementType", e, true);
              return result;
            }
          } else
          return null;
        }
      }
    }
  }

  public static boolean checkAdditiveOperationDimensions(SNode binOp) {
    SNode lEt = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binOp, "leftExpression", true));
    SNode rEt = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(binOp, "rightExpression", true));
    if (SNodeOperations.isInstanceOf(lEt, "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType") && SNodeOperations.isInstanceOf(rEt, "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType")) {
      int lr = DimensionUtil.dimr(lEt);
      int lc = DimensionUtil.dimc(lEt);
      int rr = DimensionUtil.dimr(rEt);
      int rc = DimensionUtil.dimc(rEt);
      if ((lr != 0 && rr != 0 && (lr != rr)) || (lc != 0 && rc != 0 && (lc != rc))) {
        return false;
      }
    }
    return true;
  }

  public static SNode typeCast(SNode type, SNode parentType) {
    if (MatchingUtil.matchNodes(parentType, bDouble) && !(MatchingUtil.matchNodes(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) (Object.class)), type, "virtual_getUnboxedType_1213877337320", new Object[]{}), bDouble))) {
      return _quotation_createNode_i9t80i_a0a0a82();
    }
    if (MatchingUtil.matchNodes(parentType, bFloat) && !(MatchingUtil.matchNodes(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) (Object.class)), type, "virtual_getUnboxedType_1213877337320", new Object[]{}), bFloat))) {
      return _quotation_createNode_i9t80i_a0a1a82();
    }
    if (MatchingUtil.matchNodes(parentType, bInt) && !(MatchingUtil.matchNodes(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) (Object.class)), type, "virtual_getUnboxedType_1213877337320", new Object[]{}), bInt))) {
      return _quotation_createNode_i9t80i_a0a2a82();
    }
    if (MatchingUtil.matchNodes(parentType, bLong) && !(MatchingUtil.matchNodes(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) (Object.class)), type, "virtual_getUnboxedType_1213877337320", new Object[]{}), bLong))) {
      return _quotation_createNode_i9t80i_a0a3a82();
    }
    return null;
  }

  private static SNode _quotation_createNode_i9t80i_a0() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.math.structure.BigComplexType", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_i9t80i_a1() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.math.structure.MatrixType", null, null, GlobalScope.getInstance(), false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.math.structure.BigComplexType", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.addChild("elementType", quotedNode_2);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_i9t80i_a2() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.math.structure.BigIntegerType", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_i9t80i_a3() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.math.structure.BigDecimalType", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_i9t80i_a4() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LongType", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_i9t80i_a5() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Long")));
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_i9t80i_a6() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.BooleanType", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_i9t80i_a7() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.math.structure.ComplexType", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_i9t80i_a8() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerType", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_i9t80i_a9() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Integer")));
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_i9t80i_a01() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FloatType", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_i9t80i_a11() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Float")));
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_i9t80i_a21() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DoubleType", null, null, GlobalScope.getInstance(), false);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_i9t80i_a31() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Double")));
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_i9t80i_a0a51(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.math.structure.MatrixType", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("elementType", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_i9t80i_a0a61(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.math.structure.VectorType", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("elementType", HUtil.copyIfNecessary(quotedNode_3));
    }
    return quotedNode_2;
  }

  private static SNode _quotation_createNode_i9t80i_a0a0a0t() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Float")));
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_i9t80i_a0a0a91() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.ClassifierType", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.setReference("classifier", SReference.create("classifier", quotedNode_1, facade.createModelReference("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)"), facade.createNodeId("~Double")));
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_i9t80i_a0a0a82() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.DoubleType", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.addChild("type", quotedNode_2);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.addChild("expression", quotedNode_3);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_i9t80i_a0a1a82() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.FloatType", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.addChild("type", quotedNode_2);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.addChild("expression", quotedNode_3);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_i9t80i_a0a2a82() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.IntegerType", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.addChild("type", quotedNode_2);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.addChild("expression", quotedNode_3);
    return quotedNode_1;
  }

  private static SNode _quotation_createNode_i9t80i_a0a3a82() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.CastExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.LongType", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.addChild("type", quotedNode_2);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.baseLanguage.structure.Expression", null, null, GlobalScope.getInstance(), false);
    quotedNode_1.addChild("expression", quotedNode_3);
    return quotedNode_1;
  }
}
