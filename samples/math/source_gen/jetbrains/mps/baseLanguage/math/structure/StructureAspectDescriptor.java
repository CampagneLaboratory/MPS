package jetbrains.mps.baseLanguage.math.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.UUID;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {

  /*package*/ final ConceptDescriptor myConceptAbsExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.AbsExpression", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238325050905L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).childDescriptors(new ConceptDescriptorBuilder.Link(1238325188444L, "expr", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false)).children(new String[]{"expr"}, new boolean[]{false}).alias("abs", "Absolute value of a number").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAbstractIndex = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.AbstractIndex", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236589266912L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1133920641626L)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier").parentIds(MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1133920641626L), MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1212170275853L)).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptArithmSymbol = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236428893250L)).super_("jetbrains.mps.baseLanguage.math.structure.MathSymbol").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236426954905L)).parents("jetbrains.mps.baseLanguage.math.structure.MathSymbol").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236426954905L)).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBigComplexType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigComplexType", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1237108887116L)).super_("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1237218038292L)).parents("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1237218038292L)).alias("bigcomplex", "Arbitrary precision complex number").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBigDecimalType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigDecimalType", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1237106070629L)).super_("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1237218038292L)).parents("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1237218038292L)).alias("bigdecimal", "Arbitrary precision signed decimal number").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBigIntegerType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigIntegerType", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1237106079927L)).super_("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1237218038292L)).parents("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1237218038292L)).alias("biginteger", "Arbitrary precision integer").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBigMaxExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigMaxExpression", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236428480583L)).super_("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236428507726L)).parents("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236428507726L)).alias("max", "Maximum of expressions").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBigMinExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigMinExpression", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236428482381L)).super_("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236428507726L)).parents("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236428507726L)).alias("min", "Minimum of expressions").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBigProdExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigProdExpression", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236428466848L)).super_("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236428893250L)).parents("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236428893250L)).alias("prod", "Product of expressions").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBigSumExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigSumExpression", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236439460603L)).super_("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236428893250L)).parents("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236428893250L)).alias("sum", "Sum of expressions").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptComplexLiteral = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ComplexLiteral", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238328560395L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1835621062190663819L)).childDescriptors(new ConceptDescriptorBuilder.Link(1238328589271L, "real", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), true, false, false), new ConceptDescriptorBuilder.Link(1238328589757L, "imag", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false)).children(new String[]{"real", "imag"}, new boolean[]{false, false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptComplexType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ComplexType", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1237107700024L)).super_("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1237218038292L)).parents("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1237218038292L)).alias("complex", "Double precision complex number").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConjugateOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ConjugateOperation", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 7255837154369797715L)).super_("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 7255837154369580413L)).parents("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 7255837154369580413L)).alias("", "Matrix conjugate").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCosineExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.CosineExpression", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238344223606L)).super_("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238343594087L)).parents("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238343594087L)).alias("cos", "Trigonometric cosine of a value").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDecimalBinaryOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238402702427L)).super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1081773326031L)).parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1081773326031L)).childDescriptors(new ConceptDescriptorBuilder.Link(1904947163751462528L, "context", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1904947163751448715L), false, false, false)).children(new String[]{"context"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDecimalDivExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.DecimalDivExpression", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238940192891L)).super_("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238402702427L)).parents("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238402702427L)).alias(":/d", "divide operation for big decimal types").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDecimalMinusExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.DecimalMinusExpression", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238940287286L)).super_("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238402702427L)).parents("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238402702427L)).alias(":-d", "minus operation for big decimal types").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDecimalMulExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.DecimalMulExpression", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238940210376L)).super_("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238402702427L)).parents("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238402702427L)).alias(":*d", "multiplication operation for big decimal types").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDecimalPlusExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.DecimalPlusExpression", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238940230440L)).super_("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238402702427L)).parents("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238402702427L)).alias(":+d", "plus operation for bigdecimal types").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDeterminant = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.Determinant", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 263012178968580053L)).super_("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238343594087L)).parents("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238343594087L)).alias("det", "Matrix determinant").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDivExpressionFraction = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1237100849157L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).childDescriptors(new ConceptDescriptorBuilder.Link(1237102925695L, "numerator", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false), new ConceptDescriptorBuilder.Link(1237102926618L, "denominator", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false)).children(new String[]{"numerator", "denominator"}, new boolean[]{false, false}).alias("frac", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExponentExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ExponentExpression", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238345083695L)).super_("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238343594087L)).parents("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238343594087L)).alias("exp", "Exponent of a value").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExponentialOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ExponentialOperation", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 7255837154369354272L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1835621062190663819L)).childDescriptors(new ConceptDescriptorBuilder.Link(7255837154369354274L, "expr", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false)).children(new String[]{"expr"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExtrSymbol = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236428507726L)).super_("jetbrains.mps.baseLanguage.math.structure.MathSymbol").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236426954905L)).parents("jetbrains.mps.baseLanguage.math.structure.MathSymbol").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236426954905L)).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInIntervalExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.InIntervalExpression", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1235747354980L)).super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1081773326031L)).parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1081773326031L)).alias(":in:", "is in interval").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIntervalContainsExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.IntervalContainsExpression", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1235747354984L)).super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1081773326031L)).parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1081773326031L)).alias(":contains:", "(?) interval contains").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIntervalLiteral = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.IntervalLiteral", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1235747354988L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(1235747354991L, "startIncluded"), new ConceptDescriptorBuilder.Prop(1235747354992L, "endIncluded")).properties("startIncluded", "endIncluded").childDescriptors(new ConceptDescriptorBuilder.Link(1235747354989L, "start", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), true, false, false), new ConceptDescriptorBuilder.Link(1235747354990L, "end", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), true, false, false)).children(new String[]{"start", "end"}, new boolean[]{false, false}).alias("interval", "Interval literal").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIntervalType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.IntervalType", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1235747354994L)).super_("jetbrains.mps.baseLanguage.structure.Type").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790189L)).parents("jetbrains.mps.baseLanguage.structure.Type").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790189L)).childDescriptors(new ConceptDescriptorBuilder.Link(1235747354995L, "elementType", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790189L), false, false, false)).children(new String[]{"elementType"}, new boolean[]{false}).alias("interval", "Interval type").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLinearSolveOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1418611629042457277L)).super_("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068581242863L)).parents("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068581242863L)).childDescriptors(new ConceptDescriptorBuilder.Link(1418611629042470806L, "matrix", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false), new ConceptDescriptorBuilder.Link(1418611629042470807L, "vector", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false), new ConceptDescriptorBuilder.Link(1904947163751468044L, "context", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1904947163751448715L), true, false, false)).children(new String[]{"matrix", "vector", "context"}, new boolean[]{false, false, false}).alias("lsolve", "").create();
  /*package*/ final ConceptDescriptor myConceptLiteralI = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.LiteralI", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238326494701L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).alias("I", "Imaginary unit").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLogExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.LogExpression", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238344268031L)).super_("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238343594087L)).parents("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238343594087L)).alias("ln", "Natural logarithm of a value").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMathContext = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathContext", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1904947163751448715L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1133920641626L)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1133920641626L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(1904947163751462195L, "roundingMode"), new ConceptDescriptorBuilder.Prop(1904947163751462196L, "precision"), new ConceptDescriptorBuilder.Prop(1904947163751462197L, "precisionSetting")).properties("roundingMode", "precision", "precisionSetting").create();
  /*package*/ final ConceptDescriptor myConceptMathFuncExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238343594087L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).childDescriptors(new ConceptDescriptorBuilder.Link(1238343896784L, "param", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false)).children(new String[]{"param"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMathPrimitiveType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1237218038292L)).super_("jetbrains.mps.baseLanguage.structure.Type").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790189L)).parents("jetbrains.mps.baseLanguage.structure.Type").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790189L)).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMathSymbol = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathSymbol", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236426954905L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).childDescriptors(new ConceptDescriptorBuilder.Link(1236427007990L, "var", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236589266912L), false, false, false), new ConceptDescriptorBuilder.Link(1236427008116L, "expression", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false), new ConceptDescriptorBuilder.Link(1236427162021L, "precondition", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), true, false, false), new ConceptDescriptorBuilder.Link(1236594888470L, "upperBound", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), true, false, false)).children(new String[]{"var", "expression", "precondition", "upperBound"}, new boolean[]{false, false, false, false}).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMathSymbolFromToIndex = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathSymbolFromToIndex", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236589239536L)).super_("jetbrains.mps.baseLanguage.math.structure.AbstractIndex").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236589266912L)).parents("jetbrains.mps.baseLanguage.math.structure.AbstractIndex").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236589266912L)).childDescriptors(new ConceptDescriptorBuilder.Link(1236589606450L, "from", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false)).children(new String[]{"from"}, new boolean[]{false}).alias("", "iterate over interval of integers").create();
  /*package*/ final ConceptDescriptor myConceptMathSymbolIndex = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathSymbolIndex", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236426976680L)).super_("jetbrains.mps.baseLanguage.math.structure.AbstractIndex").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236589266912L)).parents("jetbrains.mps.baseLanguage.math.structure.AbstractIndex").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236589266912L)).childDescriptors(new ConceptDescriptorBuilder.Link(1236427140288L, "iterable", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false)).children(new String[]{"iterable"}, new boolean[]{false}).alias("", "iterate over arbitrary iterable class").create();
  /*package*/ final ConceptDescriptor myConceptMathSymbolIndexReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathSymbolIndexReference", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236427936913L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(1236427955167L, "indexRef", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1236589266912L), false)).references("indexRef").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMathTypeCast = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathTypeCast", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1237214346477L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1835621062190663819L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(1237214516967L, "target")).properties("target").childDescriptors(new ConceptDescriptorBuilder.Link(1237546614691L, "castedExpr", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false)).children(new String[]{"castedExpr"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixConstructor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixConstructor", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 4815887568697232005L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(3498370411873418560L, "column")).properties("column").childDescriptors(new ConceptDescriptorBuilder.Link(4815887568697232013L, "components", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, true, false)).children(new String[]{"components"}, new boolean[]{true}).alias("[", "Matrix row constructor").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixElementAccessExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixElementAccessExpression", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 6389121991274611498L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1835621062190663819L)).childDescriptors(new ConceptDescriptorBuilder.Link(6389121991274611516L, "expression", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false), new ConceptDescriptorBuilder.Link(6389121991274611517L, "rowIndex", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false), new ConceptDescriptorBuilder.Link(6389121991274611518L, "colIndex", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false)).children(new String[]{"expression", "rowIndex", "colIndex"}, new boolean[]{false, false, false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixExponentialOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 7255837154369580413L)).super_("jetbrains.mps.baseLanguage.math.structure.ExponentialOperation").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 7255837154369354272L)).parents("jetbrains.mps.baseLanguage.math.structure.ExponentialOperation").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 7255837154369354272L)).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixIndexWildcard = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixIndexWildcard", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 6389121991274611513L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).alias("*", "Wildcard index").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixInitializer = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixInitializer", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 6219660258344738888L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 6219660258345570625L)).childDescriptors(new ConceptDescriptorBuilder.Link(6219660258344759899L, "rowIndex", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 6219660258344759893L), false, false, false), new ConceptDescriptorBuilder.Link(6219660258344759900L, "colIndex", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 6219660258344759893L), false, false, false), new ConceptDescriptorBuilder.Link(6219660258345039001L, "rowsCount", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false), new ConceptDescriptorBuilder.Link(6219660258345039002L, "colsCount", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false), new ConceptDescriptorBuilder.Link(6219660258344753239L, "expression", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false)).children(new String[]{"rowIndex", "colIndex", "rowsCount", "colsCount", "expression"}, new boolean[]{false, false, false, false, false}).alias("matrix", "Matrix initializer").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixInitializerIndex = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndex", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 6219660258344759893L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1133920641626L)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer").parentIds(MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1133920641626L), MetaIdFactory.conceptId(new UUID(-3554657779850784990L, -7236703803128771572L), 1169194658468L), MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 6219660258345570625L)).create();
  /*package*/ final ConceptDescriptor myConceptMatrixInitializerIndexReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndexReference", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 6219660258344759890L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(6219660258344759925L, "index", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 6219660258344759893L), false)).references("index").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixInverseOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixInverseOperation", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1418611629042457276L)).super_("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 7255837154369580413L)).parents("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 7255837154369580413L)).childDescriptors(new ConceptDescriptorBuilder.Link(1904947163751464663L, "context", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1904947163751448715L), true, false, false)).children(new String[]{"context"}, new boolean[]{false}).alias("", "Matrix inverse operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixNorm = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixNorm", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 920952925470358962L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(758819215871550447L, "deg")).properties("deg").childDescriptors(new ConceptDescriptorBuilder.Link(758819215871053777L, "mat", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false)).children(new String[]{"mat"}, new boolean[]{false}).alias("norm", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixOrVectorInitializer = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 6219660258345570625L)).interface_().create();
  /*package*/ final ConceptDescriptor myConceptMatrixOrVectorType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 5853558151363197539L)).interface_().create();
  /*package*/ final ConceptDescriptor myConceptMatrixType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixType", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 4815887568697030518L)).super_("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1237218038292L)).parents("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType", "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1237218038292L), MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 5853558151363197539L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(4815887568697048492L, "rows"), new ConceptDescriptorBuilder.Prop(4815887568697048493L, "columns")).properties("rows", "columns").childDescriptors(new ConceptDescriptorBuilder.Link(4815887568697050707L, "elementType", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790189L), false, false, false)).children(new String[]{"elementType"}, new boolean[]{false}).alias("matrix", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixUnit = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixUnit", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1418611629041138655L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).childDescriptors(new ConceptDescriptorBuilder.Link(1418611629041138656L, "size", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false)).children(new String[]{"size"}, new boolean[]{false}).alias("identity", "Identity matrix").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixZero = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixZero", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 3922637823318870907L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(3922637823319028534L, "square")).properties("square").childDescriptors(new ConceptDescriptorBuilder.Link(3922637823319028532L, "rows", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false), new ConceptDescriptorBuilder.Link(3922637823319028533L, "columns", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false)).children(new String[]{"rows", "columns"}, new boolean[]{false, false}).alias("zero", "Zero matrix").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPowExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.PowExpression", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238338031059L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).childDescriptors(new ConceptDescriptorBuilder.Link(1238338314123L, "base", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false), new ConceptDescriptorBuilder.Link(1238338314983L, "exponent", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false)).children(new String[]{"base", "exponent"}, new boolean[]{false, false}).alias("^", "Power expression").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSineExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.SineExpression", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238344212558L)).super_("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238343594087L)).parents("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238343594087L)).alias("sin", "Trigonometric sine of a value").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTangentExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.TangentExpression", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238344256342L)).super_("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238343594087L)).parents("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1238343594087L)).alias("tan", "Trigonometric tangent of a value").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTransposeOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.TransposeOperation", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 8365454432008500948L)).super_("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 7255837154369580413L)).parents("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 7255837154369580413L)).alias("", "Transpose operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptVectorInitializer = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.VectorInitializer", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 6219660258345553845L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 6219660258345570625L)).childDescriptors(new ConceptDescriptorBuilder.Link(6219660258345553847L, "rowIndex", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 6219660258344759893L), false, false, false), new ConceptDescriptorBuilder.Link(6219660258345553848L, "expression", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false), new ConceptDescriptorBuilder.Link(6219660258345553849L, "rowsCount", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false)).children(new String[]{"rowIndex", "expression", "rowsCount"}, new boolean[]{false, false, false}).alias("vector", "Vector initializer").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptVectorType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.VectorType", MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 4815887568697030517L)).super_("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").super_(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1237218038292L)).parents("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType", "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType").parentIds(MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 1237218038292L), MetaIdFactory.conceptId(new UUID(3676340747305173022L, -6911132873973321185L), 5853558151363197539L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(4815887568697050734L, "height")).properties("height").childDescriptors(new ConceptDescriptorBuilder.Link(4815887568697050735L, "elementType", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790189L), false, false, false)).children(new String[]{"elementType"}, new boolean[]{false}).alias("vector", "").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbsExpression, myConceptAbstractIndex, myConceptArithmSymbol, myConceptBigComplexType, myConceptBigDecimalType, myConceptBigIntegerType, myConceptBigMaxExpression, myConceptBigMinExpression, myConceptBigProdExpression, myConceptBigSumExpression, myConceptComplexLiteral, myConceptComplexType, myConceptConjugateOperation, myConceptCosineExpression, myConceptDecimalBinaryOperation, myConceptDecimalDivExpression, myConceptDecimalMinusExpression, myConceptDecimalMulExpression, myConceptDecimalPlusExpression, myConceptDeterminant, myConceptDivExpressionFraction, myConceptExponentExpression, myConceptExponentialOperation, myConceptExtrSymbol, myConceptInIntervalExpression, myConceptIntervalContainsExpression, myConceptIntervalLiteral, myConceptIntervalType, myConceptLinearSolveOperation, myConceptLiteralI, myConceptLogExpression, myConceptMathContext, myConceptMathFuncExpression, myConceptMathPrimitiveType, myConceptMathSymbol, myConceptMathSymbolFromToIndex, myConceptMathSymbolIndex, myConceptMathSymbolIndexReference, myConceptMathTypeCast, myConceptMatrixConstructor, myConceptMatrixElementAccessExpression, myConceptMatrixExponentialOperation, myConceptMatrixIndexWildcard, myConceptMatrixInitializer, myConceptMatrixInitializerIndex, myConceptMatrixInitializerIndexReference, myConceptMatrixInverseOperation, myConceptMatrixNorm, myConceptMatrixOrVectorInitializer, myConceptMatrixOrVectorType, myConceptMatrixType, myConceptMatrixUnit, myConceptMatrixZero, myConceptPowExpression, myConceptSineExpression, myConceptTangentExpression, myConceptTransposeOperation, myConceptVectorInitializer, myConceptVectorType);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0lc, conceptFqName)) {
      case 0:
        return myConceptAbsExpression;
      case 1:
        return myConceptAbstractIndex;
      case 2:
        return myConceptArithmSymbol;
      case 3:
        return myConceptBigComplexType;
      case 4:
        return myConceptBigDecimalType;
      case 5:
        return myConceptBigIntegerType;
      case 6:
        return myConceptBigMaxExpression;
      case 7:
        return myConceptBigMinExpression;
      case 8:
        return myConceptBigProdExpression;
      case 9:
        return myConceptBigSumExpression;
      case 10:
        return myConceptComplexLiteral;
      case 11:
        return myConceptComplexType;
      case 12:
        return myConceptConjugateOperation;
      case 13:
        return myConceptCosineExpression;
      case 14:
        return myConceptDecimalBinaryOperation;
      case 15:
        return myConceptDecimalDivExpression;
      case 16:
        return myConceptDecimalMinusExpression;
      case 17:
        return myConceptDecimalMulExpression;
      case 18:
        return myConceptDecimalPlusExpression;
      case 19:
        return myConceptDeterminant;
      case 20:
        return myConceptDivExpressionFraction;
      case 21:
        return myConceptExponentExpression;
      case 22:
        return myConceptExponentialOperation;
      case 23:
        return myConceptExtrSymbol;
      case 24:
        return myConceptInIntervalExpression;
      case 25:
        return myConceptIntervalContainsExpression;
      case 26:
        return myConceptIntervalLiteral;
      case 27:
        return myConceptIntervalType;
      case 28:
        return myConceptLinearSolveOperation;
      case 29:
        return myConceptLiteralI;
      case 30:
        return myConceptLogExpression;
      case 31:
        return myConceptMathContext;
      case 32:
        return myConceptMathFuncExpression;
      case 33:
        return myConceptMathPrimitiveType;
      case 34:
        return myConceptMathSymbol;
      case 35:
        return myConceptMathSymbolFromToIndex;
      case 36:
        return myConceptMathSymbolIndex;
      case 37:
        return myConceptMathSymbolIndexReference;
      case 38:
        return myConceptMathTypeCast;
      case 39:
        return myConceptMatrixConstructor;
      case 40:
        return myConceptMatrixElementAccessExpression;
      case 41:
        return myConceptMatrixExponentialOperation;
      case 42:
        return myConceptMatrixIndexWildcard;
      case 43:
        return myConceptMatrixInitializer;
      case 44:
        return myConceptMatrixInitializerIndex;
      case 45:
        return myConceptMatrixInitializerIndexReference;
      case 46:
        return myConceptMatrixInverseOperation;
      case 47:
        return myConceptMatrixNorm;
      case 48:
        return myConceptMatrixOrVectorInitializer;
      case 49:
        return myConceptMatrixOrVectorType;
      case 50:
        return myConceptMatrixType;
      case 51:
        return myConceptMatrixUnit;
      case 52:
        return myConceptMatrixZero;
      case 53:
        return myConceptPowExpression;
      case 54:
        return myConceptSineExpression;
      case 55:
        return myConceptTangentExpression;
      case 56:
        return myConceptTransposeOperation;
      case 57:
        return myConceptVectorInitializer;
      case 58:
        return myConceptVectorType;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0lc = new String[]{"jetbrains.mps.baseLanguage.math.structure.AbsExpression", "jetbrains.mps.baseLanguage.math.structure.AbstractIndex", "jetbrains.mps.baseLanguage.math.structure.ArithmSymbol", "jetbrains.mps.baseLanguage.math.structure.BigComplexType", "jetbrains.mps.baseLanguage.math.structure.BigDecimalType", "jetbrains.mps.baseLanguage.math.structure.BigIntegerType", "jetbrains.mps.baseLanguage.math.structure.BigMaxExpression", "jetbrains.mps.baseLanguage.math.structure.BigMinExpression", "jetbrains.mps.baseLanguage.math.structure.BigProdExpression", "jetbrains.mps.baseLanguage.math.structure.BigSumExpression", "jetbrains.mps.baseLanguage.math.structure.ComplexLiteral", "jetbrains.mps.baseLanguage.math.structure.ComplexType", "jetbrains.mps.baseLanguage.math.structure.ConjugateOperation", "jetbrains.mps.baseLanguage.math.structure.CosineExpression", "jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation", "jetbrains.mps.baseLanguage.math.structure.DecimalDivExpression", "jetbrains.mps.baseLanguage.math.structure.DecimalMinusExpression", "jetbrains.mps.baseLanguage.math.structure.DecimalMulExpression", "jetbrains.mps.baseLanguage.math.structure.DecimalPlusExpression", "jetbrains.mps.baseLanguage.math.structure.Determinant", "jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction", "jetbrains.mps.baseLanguage.math.structure.ExponentExpression", "jetbrains.mps.baseLanguage.math.structure.ExponentialOperation", "jetbrains.mps.baseLanguage.math.structure.ExtrSymbol", "jetbrains.mps.baseLanguage.math.structure.InIntervalExpression", "jetbrains.mps.baseLanguage.math.structure.IntervalContainsExpression", "jetbrains.mps.baseLanguage.math.structure.IntervalLiteral", "jetbrains.mps.baseLanguage.math.structure.IntervalType", "jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation", "jetbrains.mps.baseLanguage.math.structure.LiteralI", "jetbrains.mps.baseLanguage.math.structure.LogExpression", "jetbrains.mps.baseLanguage.math.structure.MathContext", "jetbrains.mps.baseLanguage.math.structure.MathFuncExpression", "jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType", "jetbrains.mps.baseLanguage.math.structure.MathSymbol", "jetbrains.mps.baseLanguage.math.structure.MathSymbolFromToIndex", "jetbrains.mps.baseLanguage.math.structure.MathSymbolIndex", "jetbrains.mps.baseLanguage.math.structure.MathSymbolIndexReference", "jetbrains.mps.baseLanguage.math.structure.MathTypeCast", "jetbrains.mps.baseLanguage.math.structure.MatrixConstructor", "jetbrains.mps.baseLanguage.math.structure.MatrixElementAccessExpression", "jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation", "jetbrains.mps.baseLanguage.math.structure.MatrixIndexWildcard", "jetbrains.mps.baseLanguage.math.structure.MatrixInitializer", "jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndex", "jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndexReference", "jetbrains.mps.baseLanguage.math.structure.MatrixInverseOperation", "jetbrains.mps.baseLanguage.math.structure.MatrixNorm", "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer", "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType", "jetbrains.mps.baseLanguage.math.structure.MatrixType", "jetbrains.mps.baseLanguage.math.structure.MatrixUnit", "jetbrains.mps.baseLanguage.math.structure.MatrixZero", "jetbrains.mps.baseLanguage.math.structure.PowExpression", "jetbrains.mps.baseLanguage.math.structure.SineExpression", "jetbrains.mps.baseLanguage.math.structure.TangentExpression", "jetbrains.mps.baseLanguage.math.structure.TransposeOperation", "jetbrains.mps.baseLanguage.math.structure.VectorInitializer", "jetbrains.mps.baseLanguage.math.structure.VectorType"};
}
