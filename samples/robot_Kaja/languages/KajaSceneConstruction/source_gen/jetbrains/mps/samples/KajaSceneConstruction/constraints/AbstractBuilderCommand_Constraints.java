package jetbrains.mps.samples.KajaSceneConstruction.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.UUID;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SPropertyId;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import JavaKaja.runtime.KajaFrame;

public class AbstractBuilderCommand_Constraints extends BaseConstraintsDescriptor {
  public AbstractBuilderCommand_Constraints() {
    super(MetaIdFactory.conceptId(new UUID(-5374744187267758800l, -5706248580699624929l), 3210697320273608255l));
  }
  @Override
  protected Map<SPropertyId, PropertyConstraintsDescriptor> getNotDefaultSProperties() {
    Map<SPropertyId, PropertyConstraintsDescriptor> properties = new HashMap<SPropertyId, PropertyConstraintsDescriptor>();
    properties.put(MetaIdFactory.propId(new UUID(-5374744187267758800l, -5706248580699624929l), 3210697320273608255l, 3210697320273608257l), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(new UUID(-5374744187267758800l, -5706248580699624929l), 3210697320273608255l, 3210697320273608257l), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "col";
        return (SPropertyOperations.getInteger(propertyValue)) > 0 && (SPropertyOperations.getInteger(propertyValue)) < KajaFrame.WIDTH - 1;
      }
    });
    properties.put(MetaIdFactory.propId(new UUID(-5374744187267758800l, -5706248580699624929l), 3210697320273608255l, 3210697320273608256l), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(new UUID(-5374744187267758800l, -5706248580699624929l), 3210697320273608255l, 3210697320273608256l), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "row";
        return (SPropertyOperations.getInteger(propertyValue)) > 0 && (SPropertyOperations.getInteger(propertyValue)) < KajaFrame.HEIGHT - 1;
      }
    });
    return properties;
  }
}
