package jetbrains.mps.samples.KajaSceneConstruction.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import JavaKaja.runtime.KajaFrame;

public class AbstractBuilderCommand_Constraints extends BaseConstraintsDescriptor {
  public AbstractBuilderCommand_Constraints() {
    super("jetbrains.mps.samples.KajaSceneConstruction.structure.AbstractBuilderCommand");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("col", new BasePropertyConstraintsDescriptor("col", this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }

      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "col";
        return (SPropertyOperations.getInteger(propertyValue)) > 0 && (SPropertyOperations.getInteger(propertyValue)) < KajaFrame.WIDTH - 1;
      }
    });
    properties.put("row", new BasePropertyConstraintsDescriptor("row", this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }

      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "row";
        return (SPropertyOperations.getInteger(propertyValue)) > 0 && (SPropertyOperations.getInteger(propertyValue)) < KajaFrame.HEIGHT - 1;
      }
    });
    return properties;
  }
}
