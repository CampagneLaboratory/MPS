package jetbrains.mps.samples.KajaAndOr.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSetupContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.util.Computable;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.action.DefaultChildNodeSubstituteAction;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;

public class QueriesGenerated {
  public static void nodeFactory_NodeSetup_LogicalOperator_642541832606605390(final IOperationContext operationContext, final NodeSetupContext _context) {
    if (SNodeOperations.isInstanceOf(_context.getSampleNode(), "jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator")) {
      SNode oldNode = SNodeOperations.cast(_context.getSampleNode(), "jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator");
      SLinkOperations.setTarget(_context.getNewNode(), "left", SLinkOperations.getTarget(oldNode, "left", true), true);
      SLinkOperations.setTarget(_context.getNewNode(), "right", SLinkOperations.getTarget(oldNode, "right", true), true);
    }
  }

  public static List<INodeSubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_LogicalOperator_1904811872814312765(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (SConceptOperations.isSuperConceptOf(childConcept, NameUtil.nodeFQName(outputConcept))) {
        Computable computable = new Computable() {
          public Object compute() {
            return ListSequence.fromList(SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator"), _context.getModel(), operationContext.getScope())).where(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return !(SPropertyOperations.getBoolean(it, "abstract"));
              }
            });
          }
        };
        Iterable<SNode> queryResult = (Iterable) computable.compute();
        if (queryResult != null) {
          for (final SNode item : queryResult) {
            ListSequence.fromList(result).addElement(new DefaultChildNodeSubstituteAction(outputConcept, item, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter(), operationContext.getScope()) {
              public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
                SNode newInitializedInstance = SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName((item)), null);
                SLinkOperations.setTarget(newInitializedInstance, "left", SLinkOperations.getTarget(_context.getCurrentTargetNode(), "left", true), true);
                SLinkOperations.setTarget(newInitializedInstance, "right", SLinkOperations.getTarget(_context.getCurrentTargetNode(), "right", true), true);
                return newInitializedInstance;
              }

              public String getMatchingText(String pattern) {
                return SPropertyOperations.getString((item), "conceptAlias");
              }

              public String getVisibleMatchingText(String pattern) {
                return this.getMatchingText(pattern);
              }

              public String getDescriptionText(String pattern) {
                return SPropertyOperations.getString((item), "name");
              }
            });
          }
        }
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_LogicalExpression_1904811872814253599(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      final SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.Kaja.structure.LogicalExpression");
      Computable computable = new Computable() {
        public Object compute() {
          return ListSequence.fromListAndArray(new ArrayList<String>(), "and", "or");
        }
      };
      Iterable<String> parameterObjects = (Iterable<String>) computable.compute();
      assert parameterObjects != null;
      for (final String item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, item, _context.getSourceNode()) {
          public SNode doSubstitute(String pattern) {
            SNode conjuction;
            if ((item).equals("and")) {
              conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), "jetbrains.mps.samples.KajaAndOr.structure.And");
            } else if ((item).equals("or")) {
              conjuction = SNodeFactoryOperations.replaceWithNewChild(_context.getSourceNode(), "jetbrains.mps.samples.KajaAndOr.structure.Or");
            } else {
              throw new IllegalArgumentException("Cannot find a match for " + (item));
            }
            SLinkOperations.setTarget(conjuction, "right", _context.getSourceNode(), true);
            return SLinkOperations.getTarget(conjuction, "left", true);
          }

          public String getMatchingText(String pattern) {
            return (item);
          }

          public String getVisibleMatchingText(String pattern) {
            return this.getMatchingText(pattern);
          }
        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_LogicalExpression_1904811872814296399(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      final SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.Kaja.structure.LogicalExpression");
      Computable computable = new Computable() {
        public Object compute() {
          return ListSequence.fromListAndArray(new ArrayList<String>(), "and", "or");
        }
      };
      Iterable<String> parameterObjects = (Iterable<String>) computable.compute();
      assert parameterObjects != null;
      for (final String item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, item, _context.getSourceNode()) {
          public SNode doSubstitute(String pattern) {
            SNode conjuction;
            if ((item).equals("and")) {
              SNode andNode = SConceptOperations.createNewNode("jetbrains.mps.samples.KajaAndOr.structure.And", null);
              SNodeOperations.replaceWithAnother(_context.getSourceNode(), andNode);
              conjuction = andNode;
            } else {
              SNode orNode = SConceptOperations.createNewNode("jetbrains.mps.samples.KajaAndOr.structure.Or", null);
              SNodeOperations.replaceWithAnother(_context.getSourceNode(), orNode);
              conjuction = orNode;
            }
            SLinkOperations.setTarget(conjuction, "left", _context.getSourceNode(), true);
            return SLinkOperations.getTarget(conjuction, "right", true);
          }

          public String getMatchingText(String pattern) {
            return (item);
          }

          public String getVisibleMatchingText(String pattern) {
            return this.getMatchingText(pattern);
          }
        });
      }
    }
    return result;
  }

  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_Heading_642541832611943584(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      final SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.Kaja.structure.LogicalExpression");
      Computable computable = new Computable() {
        public Object compute() {
          return ListSequence.fromList(SConceptOperations.getAllSubConcepts(SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator"), _context.getModel(), operationContext.getScope())).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return !(SPropertyOperations.getBoolean(it, "abstract"));
            }
          }).toListSequence();
        }
      };
      Iterable<SNode> parameterObjects = (Iterable<SNode>) computable.compute();
      assert parameterObjects != null;
      for (final SNode item : parameterObjects) {
        ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, item, _context.getSourceNode()) {
          public SNode doSubstitute(String pattern) {
            SNode newInitializedInstance = SNodeFactoryOperations.createNewNode(NameUtil.nodeFQName((item)), null);
            SLinkOperations.setTarget(newInitializedInstance, "left", SNodeOperations.copyNode(_context.getSourceNode()), true);
            return SLinkOperations.getTarget(newInitializedInstance, "right", true);
          }

          public String getMatchingText(String pattern) {
            return SPropertyOperations.getString((item), "conceptAlias");
          }

          public String getVisibleMatchingText(String pattern) {
            return this.getMatchingText(pattern);
          }

          public String getDescriptionText(String pattern) {
            return SPropertyOperations.getString((item), "name");
          }
        });
      }
    }
    return result;
  }
}
