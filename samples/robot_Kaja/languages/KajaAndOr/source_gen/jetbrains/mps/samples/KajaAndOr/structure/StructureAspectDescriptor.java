package jetbrains.mps.samples.KajaAndOr.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAnd = new ConceptDescriptorBuilder("jetbrains.mps.samples.KajaAndOr.structure.And").super_("jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator").parents("jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator").alias("and", "").create();
  /*package*/ final ConceptDescriptor myConceptLogicalOperator = new ConceptDescriptorBuilder("jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator").super_("jetbrains.mps.samples.Kaja.structure.LogicalExpression").parents("jetbrains.mps.samples.Kaja.structure.LogicalExpression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"left", "right"}, new boolean[]{false, false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptOr = new ConceptDescriptorBuilder("jetbrains.mps.samples.KajaAndOr.structure.Or").super_("jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator").parents("jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator").alias("or", "").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAnd, myConceptLogicalOperator, myConceptOr);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0g, conceptFqName)) {
      case 0:
        return myConceptAnd;
      case 1:
        return myConceptLogicalOperator;
      case 2:
        return myConceptOr;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0g = new String[]{"jetbrains.mps.samples.KajaAndOr.structure.And", "jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator", "jetbrains.mps.samples.KajaAndOr.structure.Or"};
}
