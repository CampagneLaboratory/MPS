package jetbrains.mps.samples.Kaja.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {


  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0b, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new CommandList_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new CommentLine_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Drop_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new East_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new EmptyLine_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Heading_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new IfStatement_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new IsFull_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new IsMark_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new IsWall_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new LeftTurn_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Library_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new Looking_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new North_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new Not_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new Pick_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new Repeat_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new Require_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new RoutineCall_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new RoutineDefinition_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new Script_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new South_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new Step_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new TraceMessage_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new West_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new While_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    return Collections.<ConceptEditorComponent>emptyList();
  }



  public Collection<ConceptEditorHint> getHints() {
    return Collections.emptyList();
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0b = new String[]{"jetbrains.mps.samples.Kaja.structure.CommandList", "jetbrains.mps.samples.Kaja.structure.CommentLine", "jetbrains.mps.samples.Kaja.structure.Drop", "jetbrains.mps.samples.Kaja.structure.East", "jetbrains.mps.samples.Kaja.structure.EmptyLine", "jetbrains.mps.samples.Kaja.structure.Heading", "jetbrains.mps.samples.Kaja.structure.IfStatement", "jetbrains.mps.samples.Kaja.structure.IsFull", "jetbrains.mps.samples.Kaja.structure.IsMark", "jetbrains.mps.samples.Kaja.structure.IsWall", "jetbrains.mps.samples.Kaja.structure.LeftTurn", "jetbrains.mps.samples.Kaja.structure.Library", "jetbrains.mps.samples.Kaja.structure.Looking", "jetbrains.mps.samples.Kaja.structure.North", "jetbrains.mps.samples.Kaja.structure.Not", "jetbrains.mps.samples.Kaja.structure.Pick", "jetbrains.mps.samples.Kaja.structure.Repeat", "jetbrains.mps.samples.Kaja.structure.Require", "jetbrains.mps.samples.Kaja.structure.RoutineCall", "jetbrains.mps.samples.Kaja.structure.RoutineDefinition", "jetbrains.mps.samples.Kaja.structure.Script", "jetbrains.mps.samples.Kaja.structure.South", "jetbrains.mps.samples.Kaja.structure.Step", "jetbrains.mps.samples.Kaja.structure.TraceMessage", "jetbrains.mps.samples.Kaja.structure.West", "jetbrains.mps.samples.Kaja.structure.While"};
}
