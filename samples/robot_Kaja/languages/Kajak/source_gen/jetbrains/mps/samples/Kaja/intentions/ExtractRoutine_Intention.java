package jetbrains.mps.samples.Kaja.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class ExtractRoutine_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public ExtractRoutine_Intention() {
  }
  public String getConcept() {
    return "jetbrains.mps.samples.Kaja.structure.AbstractCommand";
  }
  public String getPresentation() {
    return "ExtractRoutine";
  }
  public String getPersistentStateKey() {
    return "jetbrains.mps.samples.Kaja.intentions.ExtractRoutine_Intention";
  }
  public String getLanguageFqName() {
    return "jetbrains.mps.samples.Kaja";
  }
  public IntentionType getType() {
    return IntentionType.NORMAL;
  }
  public boolean isAvailableInChildNodes() {
    return true;
  }
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:c23df2a3-084e-497b-b2a5-1671f4fbf9de(jetbrains.mps.samples.Kaja.intentions)", "7446293342517485574");
  }
  public boolean isSurroundWith() {
    return true;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ExtractRoutine_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Extract Routine";
    }
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode routineDefinition = SNodeFactoryOperations.createNewNode("jetbrains.mps.samples.Kaja.structure.RoutineDefinition", null);
      List<SNode> selectedNodes = editorContext.getSelectedNodes();
      ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SNodeOperations.getAncestor(node, "jetbrains.mps.samples.Kaja.structure.Script", true, false), MetaAdapterFactory.getContainmentLink(new UUID(331587165301851084l, -4784639992745830411l), 3265739055509559110l, 3265739055509559116l, "body")), MetaAdapterFactory.getContainmentLink(new UUID(331587165301851084l, -4784639992745830411l), 3308300503039896127l, 3308300503039896128l, "commands"))).addElement(routineDefinition);
      SNode call = SConceptOperations.createNewNode("jetbrains.mps.samples.Kaja.structure.RoutineCall", null);
      SLinkOperations.setTarget(call, MetaAdapterFactory.getReferenceLink(new UUID(331587165301851084l, -4784639992745830411l), 3308300503039700882l, 3308300503039730636l, "definition"), routineDefinition);
      SNodeOperations.insertPrevSiblingChild(ListSequence.fromList(selectedNodes).first(), call);
      for (SNode selectedNode : ListSequence.fromList(selectedNodes)) {
        ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(routineDefinition, MetaAdapterFactory.getContainmentLink(new UUID(331587165301851084l, -4784639992745830411l), 3308300503039700857l, 3308300503039700860l, "body")), MetaAdapterFactory.getContainmentLink(new UUID(331587165301851084l, -4784639992745830411l), 3308300503039896127l, 3308300503039896128l, "commands"))).addElement(SNodeOperations.getAncestor(selectedNode, "jetbrains.mps.samples.Kaja.structure.AbstractCommand", true, false));
      }
      editorContext.selectWRTFocusPolicy(routineDefinition);
    }
    public IntentionDescriptor getDescriptor() {
      return ExtractRoutine_Intention.this;
    }
  }
}
