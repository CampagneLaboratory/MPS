package jetbrains.mps.samples.Kaja.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.errors.BaseQuickFixProvider;
import jetbrains.mps.smodel.SModelUtil_new;

public class RepetitionCheck_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public RepetitionCheck_NonTypesystemRule() {
  }

  public void applyRule(final SNode command, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNodeOperations.getChildren(SNodeOperations.getParent(command));
    if (!(SNodeOperations.isInstanceOf(command, "jetbrains.mps.samples.Kaja.structure.RoutineCall") || SNodeOperations.isInstanceOf(command, "jetbrains.mps.samples.Kaja.structure.Step") || SNodeOperations.isInstanceOf(command, "jetbrains.mps.samples.Kaja.structure.LeftTurn") || SNodeOperations.isInstanceOf(command, "jetbrains.mps.samples.Kaja.structure.Drop") || SNodeOperations.isInstanceOf(command, "jetbrains.mps.samples.Kaja.structure.Pick"))) {
      return;
    }
    if (SNodeOperations.getConceptDeclaration(command) == SNodeOperations.getConceptDeclaration(SNodeOperations.getNextSibling(command))) {
      if (SNodeOperations.isInstanceOf(command, "jetbrains.mps.samples.Kaja.structure.RoutineCall") && SLinkOperations.getTarget(SNodeOperations.cast(command, "jetbrains.mps.samples.Kaja.structure.RoutineCall"), "definition", false) != SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getNextSibling(command), "jetbrains.mps.samples.Kaja.structure.RoutineCall"), "definition", false)) {
        return;
      }
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(SNodeOperations.getNextSibling(command), "Consider using repeat to avoid repetition", "r:af5f8eb9-49c0-4279-87d3-3c80b1a56988(jetbrains.mps.samples.Kaja.typesystem)", "1645404595817116829", null, errorTarget);
        {
          BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("jetbrains.mps.samples.Kaja.typesystem.RemoveRepetition_QuickFix", false);
          _reporter_2309309498.addIntentionProvider(intentionProvider);
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.samples.Kaja.structure.AbstractCommand";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
