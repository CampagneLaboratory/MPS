package jetbrains.mps.samples.Kaja.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b, conceptFqName)) {
      case 0:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.AbstractCommand").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
      case 1:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.CommandList").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"commands"}, new boolean[]{true}).create();
      case 2:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.CommentLine").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").properties("text").alias("#", "").create();
      case 3:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Direction").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
      case 4:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Drop").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").alias("drop", "").create();
      case 5:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.East").super_("jetbrains.mps.samples.Kaja.structure.Direction").parents("jetbrains.mps.samples.Kaja.structure.Direction").alias("east", "").create();
      case 6:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.EmptyLine").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").final_().alias("<empty>", "").create();
      case 7:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Heading").super_("jetbrains.mps.samples.Kaja.structure.LogicalExpression").parents("jetbrains.mps.samples.Kaja.structure.LogicalExpression").children(new String[]{"direction"}, new boolean[]{false}).alias("heading", "").create();
      case 8:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.IfStatement").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").children(new String[]{"condition", "trueBranch", "falseBranch"}, new boolean[]{false, false, false}).alias("if", "").create();
      case 9:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.IsFull").super_("jetbrains.mps.samples.Kaja.structure.LogicalExpression").parents("jetbrains.mps.samples.Kaja.structure.LogicalExpression").alias("full", "").create();
      case 10:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.IsMark").super_("jetbrains.mps.samples.Kaja.structure.LogicalExpression").parents("jetbrains.mps.samples.Kaja.structure.LogicalExpression").alias("mark", "").create();
      case 11:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.IsWall").super_("jetbrains.mps.samples.Kaja.structure.LogicalExpression").parents("jetbrains.mps.samples.Kaja.structure.LogicalExpression").alias("wall ahead", "").create();
      case 12:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.LeftTurn").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").alias("turnLeft", "").create();
      case 13:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Library").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"definitions"}, new boolean[]{true}).create();
      case 14:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.LogicalExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
      case 15:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Looking").super_("jetbrains.mps.samples.Kaja.structure.LogicalExpression").parents("jetbrains.mps.samples.Kaja.structure.LogicalExpression").properties("direction").alias("looking", "").create();
      case 16:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.North").super_("jetbrains.mps.samples.Kaja.structure.Direction").parents("jetbrains.mps.samples.Kaja.structure.Direction").alias("north", "").create();
      case 17:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Not").super_("jetbrains.mps.samples.Kaja.structure.LogicalExpression").parents("jetbrains.mps.samples.Kaja.structure.LogicalExpression").children(new String[]{"original"}, new boolean[]{false}).alias("not", "").create();
      case 18:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Pick").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").alias("pick", "").create();
      case 19:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Repeat").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").properties("count").children(new String[]{"body"}, new boolean[]{false}).alias("repeat", "").create();
      case 20:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Require").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").references("library").alias("require", "").create();
      case 21:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.RoutineCall").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").references("definition").create();
      case 22:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.RoutineDefinition").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"body"}, new boolean[]{false}).alias("routine", "").create();
      case 23:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Script").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.execution.util.structure.IMainClass").children(new String[]{"body", "definitions"}, new boolean[]{false, true}).create();
      case 24:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.South").super_("jetbrains.mps.samples.Kaja.structure.Direction").parents("jetbrains.mps.samples.Kaja.structure.Direction").alias("south", "").create();
      case 25:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Step").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").alias("step", "").create();
      case 26:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.TraceMessage").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").properties("message").alias("trace", "").create();
      case 27:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.West").super_("jetbrains.mps.samples.Kaja.structure.Direction").parents("jetbrains.mps.samples.Kaja.structure.Direction").alias("west", "").create();
      case 28:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.While").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").children(new String[]{"condition", "body"}, new boolean[]{false, false}).alias("while", "").create();
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }

  private static String[] stringSwitchCases_1htk8d_a0a0b = new String[]{"jetbrains.mps.samples.Kaja.structure.AbstractCommand", "jetbrains.mps.samples.Kaja.structure.CommandList", "jetbrains.mps.samples.Kaja.structure.CommentLine", "jetbrains.mps.samples.Kaja.structure.Direction", "jetbrains.mps.samples.Kaja.structure.Drop", "jetbrains.mps.samples.Kaja.structure.East", "jetbrains.mps.samples.Kaja.structure.EmptyLine", "jetbrains.mps.samples.Kaja.structure.Heading", "jetbrains.mps.samples.Kaja.structure.IfStatement", "jetbrains.mps.samples.Kaja.structure.IsFull", "jetbrains.mps.samples.Kaja.structure.IsMark", "jetbrains.mps.samples.Kaja.structure.IsWall", "jetbrains.mps.samples.Kaja.structure.LeftTurn", "jetbrains.mps.samples.Kaja.structure.Library", "jetbrains.mps.samples.Kaja.structure.LogicalExpression", "jetbrains.mps.samples.Kaja.structure.Looking", "jetbrains.mps.samples.Kaja.structure.North", "jetbrains.mps.samples.Kaja.structure.Not", "jetbrains.mps.samples.Kaja.structure.Pick", "jetbrains.mps.samples.Kaja.structure.Repeat", "jetbrains.mps.samples.Kaja.structure.Require", "jetbrains.mps.samples.Kaja.structure.RoutineCall", "jetbrains.mps.samples.Kaja.structure.RoutineDefinition", "jetbrains.mps.samples.Kaja.structure.Script", "jetbrains.mps.samples.Kaja.structure.South", "jetbrains.mps.samples.Kaja.structure.Step", "jetbrains.mps.samples.Kaja.structure.TraceMessage", "jetbrains.mps.samples.Kaja.structure.West", "jetbrains.mps.samples.Kaja.structure.While"};
}
