package jetbrains.mps.samples.Kaja.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractCommand = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.AbstractCommand").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptCommandList = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.CommandList").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"commands"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptCommentLine = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.CommentLine").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").properties("text").alias("#", "").create();
  /*package*/ final ConceptDescriptor myConceptDirection = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Direction").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptDrop = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Drop").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").alias("drop", "").create();
  /*package*/ final ConceptDescriptor myConceptEast = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.East").super_("jetbrains.mps.samples.Kaja.structure.Direction").parents("jetbrains.mps.samples.Kaja.structure.Direction").alias("east", "").create();
  /*package*/ final ConceptDescriptor myConceptEmptyLine = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.EmptyLine").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").final_().alias("<empty>", "").create();
  /*package*/ final ConceptDescriptor myConceptHeading = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Heading").super_("jetbrains.mps.samples.Kaja.structure.LogicalExpression").parents("jetbrains.mps.samples.Kaja.structure.LogicalExpression").children(new String[]{"direction"}, new boolean[]{false}).alias("heading", "").create();
  /*package*/ final ConceptDescriptor myConceptIfStatement = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.IfStatement").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").children(new String[]{"condition", "trueBranch", "falseBranch"}, new boolean[]{false, false, false}).alias("if", "").create();
  /*package*/ final ConceptDescriptor myConceptIsFull = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.IsFull").super_("jetbrains.mps.samples.Kaja.structure.LogicalExpression").parents("jetbrains.mps.samples.Kaja.structure.LogicalExpression").alias("full", "").create();
  /*package*/ final ConceptDescriptor myConceptIsMark = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.IsMark").super_("jetbrains.mps.samples.Kaja.structure.LogicalExpression").parents("jetbrains.mps.samples.Kaja.structure.LogicalExpression").alias("mark", "").create();
  /*package*/ final ConceptDescriptor myConceptIsWall = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.IsWall").super_("jetbrains.mps.samples.Kaja.structure.LogicalExpression").parents("jetbrains.mps.samples.Kaja.structure.LogicalExpression").alias("wall ahead", "").create();
  /*package*/ final ConceptDescriptor myConceptLeftTurn = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.LeftTurn").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").alias("turnLeft", "").create();
  /*package*/ final ConceptDescriptor myConceptLibrary = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Library").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"definitions"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptLogicalExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.LogicalExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptLooking = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Looking").super_("jetbrains.mps.samples.Kaja.structure.LogicalExpression").parents("jetbrains.mps.samples.Kaja.structure.LogicalExpression").properties("direction").alias("looking", "").create();
  /*package*/ final ConceptDescriptor myConceptNorth = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.North").super_("jetbrains.mps.samples.Kaja.structure.Direction").parents("jetbrains.mps.samples.Kaja.structure.Direction").alias("north", "").create();
  /*package*/ final ConceptDescriptor myConceptNot = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Not").super_("jetbrains.mps.samples.Kaja.structure.LogicalExpression").parents("jetbrains.mps.samples.Kaja.structure.LogicalExpression").children(new String[]{"original"}, new boolean[]{false}).alias("not", "").create();
  /*package*/ final ConceptDescriptor myConceptPick = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Pick").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").alias("pick", "").create();
  /*package*/ final ConceptDescriptor myConceptRepeat = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Repeat").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").properties("count").children(new String[]{"body"}, new boolean[]{false}).alias("repeat", "").create();
  /*package*/ final ConceptDescriptor myConceptRequire = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Require").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").references("library").alias("require", "").create();
  /*package*/ final ConceptDescriptor myConceptRoutineCall = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.RoutineCall").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").references("definition").create();
  /*package*/ final ConceptDescriptor myConceptRoutineDefinition = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.RoutineDefinition").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"body"}, new boolean[]{false}).alias("routine", "").create();
  /*package*/ final ConceptDescriptor myConceptScript = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Script").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.execution.util.structure.IMainClass").children(new String[]{"body", "definitions"}, new boolean[]{false, true}).create();
  /*package*/ final ConceptDescriptor myConceptSouth = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.South").super_("jetbrains.mps.samples.Kaja.structure.Direction").parents("jetbrains.mps.samples.Kaja.structure.Direction").alias("south", "").create();
  /*package*/ final ConceptDescriptor myConceptStep = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.Step").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").alias("step", "").create();
  /*package*/ final ConceptDescriptor myConceptTraceMessage = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.TraceMessage").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").properties("message").alias("trace", "").create();
  /*package*/ final ConceptDescriptor myConceptWest = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.West").super_("jetbrains.mps.samples.Kaja.structure.Direction").parents("jetbrains.mps.samples.Kaja.structure.Direction").alias("west", "").create();
  /*package*/ final ConceptDescriptor myConceptWhile = new ConceptDescriptorBuilder("jetbrains.mps.samples.Kaja.structure.While").super_("jetbrains.mps.samples.Kaja.structure.AbstractCommand").parents("jetbrains.mps.samples.Kaja.structure.AbstractCommand").children(new String[]{"condition", "body"}, new boolean[]{false, false}).alias("while", "").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractCommand, myConceptCommandList, myConceptCommentLine, myConceptDirection, myConceptDrop, myConceptEast, myConceptEmptyLine, myConceptHeading, myConceptIfStatement, myConceptIsFull, myConceptIsMark, myConceptIsWall, myConceptLeftTurn, myConceptLibrary, myConceptLogicalExpression, myConceptLooking, myConceptNorth, myConceptNot, myConceptPick, myConceptRepeat, myConceptRequire, myConceptRoutineCall, myConceptRoutineDefinition, myConceptScript, myConceptSouth, myConceptStep, myConceptTraceMessage, myConceptWest, myConceptWhile);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0gb, conceptFqName)) {
      case 0:
        return myConceptAbstractCommand;
      case 1:
        return myConceptCommandList;
      case 2:
        return myConceptCommentLine;
      case 3:
        return myConceptDirection;
      case 4:
        return myConceptDrop;
      case 5:
        return myConceptEast;
      case 6:
        return myConceptEmptyLine;
      case 7:
        return myConceptHeading;
      case 8:
        return myConceptIfStatement;
      case 9:
        return myConceptIsFull;
      case 10:
        return myConceptIsMark;
      case 11:
        return myConceptIsWall;
      case 12:
        return myConceptLeftTurn;
      case 13:
        return myConceptLibrary;
      case 14:
        return myConceptLogicalExpression;
      case 15:
        return myConceptLooking;
      case 16:
        return myConceptNorth;
      case 17:
        return myConceptNot;
      case 18:
        return myConceptPick;
      case 19:
        return myConceptRepeat;
      case 20:
        return myConceptRequire;
      case 21:
        return myConceptRoutineCall;
      case 22:
        return myConceptRoutineDefinition;
      case 23:
        return myConceptScript;
      case 24:
        return myConceptSouth;
      case 25:
        return myConceptStep;
      case 26:
        return myConceptTraceMessage;
      case 27:
        return myConceptWest;
      case 28:
        return myConceptWhile;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0gb = new String[]{"jetbrains.mps.samples.Kaja.structure.AbstractCommand", "jetbrains.mps.samples.Kaja.structure.CommandList", "jetbrains.mps.samples.Kaja.structure.CommentLine", "jetbrains.mps.samples.Kaja.structure.Direction", "jetbrains.mps.samples.Kaja.structure.Drop", "jetbrains.mps.samples.Kaja.structure.East", "jetbrains.mps.samples.Kaja.structure.EmptyLine", "jetbrains.mps.samples.Kaja.structure.Heading", "jetbrains.mps.samples.Kaja.structure.IfStatement", "jetbrains.mps.samples.Kaja.structure.IsFull", "jetbrains.mps.samples.Kaja.structure.IsMark", "jetbrains.mps.samples.Kaja.structure.IsWall", "jetbrains.mps.samples.Kaja.structure.LeftTurn", "jetbrains.mps.samples.Kaja.structure.Library", "jetbrains.mps.samples.Kaja.structure.LogicalExpression", "jetbrains.mps.samples.Kaja.structure.Looking", "jetbrains.mps.samples.Kaja.structure.North", "jetbrains.mps.samples.Kaja.structure.Not", "jetbrains.mps.samples.Kaja.structure.Pick", "jetbrains.mps.samples.Kaja.structure.Repeat", "jetbrains.mps.samples.Kaja.structure.Require", "jetbrains.mps.samples.Kaja.structure.RoutineCall", "jetbrains.mps.samples.Kaja.structure.RoutineDefinition", "jetbrains.mps.samples.Kaja.structure.Script", "jetbrains.mps.samples.Kaja.structure.South", "jetbrains.mps.samples.Kaja.structure.Step", "jetbrains.mps.samples.Kaja.structure.TraceMessage", "jetbrains.mps.samples.Kaja.structure.West", "jetbrains.mps.samples.Kaja.structure.While"};
}
