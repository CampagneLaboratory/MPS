package jetbrains.mps.calculator.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.lang.reflect.Method;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.classloading.ClassLoaderManager;

public class ExecuteCalculator_Action extends BaseAction {
  private static final Icon ICON = null;
  public ExecuteCalculator_Action() {
    super("Execute Calculator", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return ExecuteCalculator_Action.this.getMainMethod(event) != null;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      if (node != null && !(SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0x26b3d6d5b99a4ed6L, 0x83bed2ea6f3627a1L, 0x12106f96410L, "jetbrains.mps.calculator.structure.Calculator")))) {
        node = null;
      }
      if (node == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    try {
      final Method method = ExecuteCalculator_Action.this.getMainMethod(event);
      Thread thread = new Thread(new Runnable() {
        @Override
        public void run() {
          try {
            String[] args = new String[0];
            method.invoke(null, new Object[]{args});
          } catch (Throwable e) {
            e.printStackTrace();
          }
        }
      });
      thread.start();
    } catch (Throwable e) {
      e.printStackTrace();
    }
  }
  private Class getCalcClass(final AnActionEvent event) {
    String className = SPropertyOperations.getString(event.getData(MPSCommonDataKeys.NODE), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
    String fqClassName = jetbrains.mps.util.SNodeOperations.getModelLongName(SNodeOperations.getModel(event.getData(MPSCommonDataKeys.NODE))) + "." + className;
    return ClassLoaderManager.getInstance().getClass(SNodeOperations.getModel(event.getData(MPSCommonDataKeys.NODE)).getModule(), fqClassName);
  }
  private Method getMainMethod(final AnActionEvent event) {
    final Class c = ExecuteCalculator_Action.this.getCalcClass(event);
    if (c == null) {
      return null;
    }
    try {
      return c.getDeclaredMethod("main", new String[0].getClass());
    } catch (NoSuchMethodException e) {
      return null;
    }
  }
}
