package jetbrains.mps.samples.mindmaps.figures.model;

/*Generated by MPS */

import jetbrains.mps.diagram.layoutView.CenterVerticalLayoutView;
import jetbrains.jetpad.cell.TextCell;
import jetbrains.jetpad.projectional.view.RectView;
import jetbrains.jetpad.model.property.Property;
import jetbrains.jetpad.model.property.ValueProperty;
import jetbrains.jetpad.values.Color;
import jetbrains.jetpad.cell.view.CellView;
import jetbrains.jetpad.cell.text.TextEditing;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.jetpad.projectional.view.ViewTraitBuilder;
import jetbrains.jetpad.projectional.view.ViewEvents;
import jetbrains.jetpad.projectional.view.ViewEventHandler;
import jetbrains.jetpad.event.MouseEvent;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.mapper.Synchronizers;

public class MindMapCentralThoughtView extends CenterVerticalLayoutView {
  private TextCell myCell = new TextCell();
  private RectView myRectView = new RectView();
  public Property<Boolean> isClicked = new ValueProperty<Boolean>(false);

  public MindMapCentralThoughtView() {
    super(false);
    background().set(Color.LIGHT_GRAY);

    CellView cellView = new CellView();
    cellView.background().set(Color.WHITE);
    myCell.addTrait(TextEditing.textEditing());
    children().add(cellView);

    children().add(myRectView);
    myRectView.background().set(Color.WHITE);
    myRectView.dimension().set(new Vector(100, 20));
    myRectView.addTrait(new ViewTraitBuilder().on(ViewEvents.MOUSE_PRESSED, new ViewEventHandler<MouseEvent>() {
      @Override
      public void handle(View view, MouseEvent e) {
        isClicked.set(!(isClicked.get()));
      }
    }).build());

    CellView view = new CellView();
    view.background().set(Color.WHITE);
    view.cell.set(myCell);
    myRectView.children().add(view);
    RectView bottomRect = new RectView();
    bottomRect.background().set(Color.LIGHT_GRAY);
    bottomRect.dimension().set(new Vector(100, 30));
    children().add(bottomRect);
    initSynchronizers();
  }

  private void initSynchronizers() {
    new Mapper<MindMapCentralThoughtView, MindMapCentralThoughtView>(this, this) {
      @Override
      protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
        super.registerSynchronizers(configuration);
        configuration.add(Synchronizers.forProperty(isClicked, new Runnable() {
          public void run() {
            if (isClicked.get()) {
              myRectView.background().set(Color.YELLOW);
            } else {
              myRectView.background().set(Color.CYAN);
            }
          }
        }));
      }
    }.attachRoot();
  }



  public Property<String> text() {
    return myCell.text();
  }


}
