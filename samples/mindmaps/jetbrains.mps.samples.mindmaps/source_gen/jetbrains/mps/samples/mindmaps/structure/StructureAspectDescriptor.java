package jetbrains.mps.samples.mindmaps.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptCoreThrought = new ConceptDescriptorBuilder("jetbrains.mps.samples.mindmaps.structure.CoreThrought").super_("jetbrains.mps.samples.mindmaps.structure.Thought").parents("jetbrains.mps.samples.mindmaps.structure.Thought").alias("core thought", "").create();
  /*package*/ final ConceptDescriptor myConceptMindMap = new ConceptDescriptorBuilder("jetbrains.mps.samples.mindmaps.structure.MindMap").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"thoughts", "relationships"}, new boolean[]{true, true}).create();
  /*package*/ final ConceptDescriptor myConceptRelationship = new ConceptDescriptorBuilder("jetbrains.mps.samples.mindmaps.structure.Relationship").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("source", "target").alias("relationship", "").create();
  /*package*/ final ConceptDescriptor myConceptSpecializes = new ConceptDescriptorBuilder("jetbrains.mps.samples.mindmaps.structure.Specializes").super_("jetbrains.mps.samples.mindmaps.structure.Relationship").parents("jetbrains.mps.samples.mindmaps.structure.Relationship").create();
  /*package*/ final ConceptDescriptor myConceptThought = new ConceptDescriptorBuilder("jetbrains.mps.samples.mindmaps.structure.Thought").super_("jetbrains.mps.samples.mindmaps.structure.VisualBox").parents("jetbrains.mps.samples.mindmaps.structure.VisualBox", "jetbrains.mps.lang.core.structure.INamedConcept").alias("thought", "").create();
  /*package*/ final ConceptDescriptor myConceptVisualBox = new ConceptDescriptorBuilder("jetbrains.mps.samples.mindmaps.structure.VisualBox").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("x", "y", "myIsClicked").abstract_().create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptCoreThrought, myConceptMindMap, myConceptRelationship, myConceptSpecializes, myConceptThought, myConceptVisualBox);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0j, conceptFqName)) {
      case 0:
        return myConceptCoreThrought;
      case 1:
        return myConceptMindMap;
      case 2:
        return myConceptRelationship;
      case 3:
        return myConceptSpecializes;
      case 4:
        return myConceptThought;
      case 5:
        return myConceptVisualBox;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0j = new String[]{"jetbrains.mps.samples.mindmaps.structure.CoreThrought", "jetbrains.mps.samples.mindmaps.structure.MindMap", "jetbrains.mps.samples.mindmaps.structure.Relationship", "jetbrains.mps.samples.mindmaps.structure.Specializes", "jetbrains.mps.samples.mindmaps.structure.Thought", "jetbrains.mps.samples.mindmaps.structure.VisualBox"};
}
