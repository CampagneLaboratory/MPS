package jetbrains.mps.samples.xmlLiterals.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.UUID;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {

  /*package*/ final ConceptDescriptor myConceptElementMacro = new ConceptDescriptorBuilder("jetbrains.mps.samples.xmlLiterals.structure.ElementMacro", MetaIdFactory.conceptId(new UUID(-6806790875199616463L, -5220878866465632027L), 9152904044274518122L)).super_("jetbrains.mps.core.xml.structure.XmlContent").super_(MetaIdFactory.conceptId(new UUID(5160134014823646133L, -7982110198386724200L), 6666499814681299051L)).parents("jetbrains.mps.core.xml.structure.XmlContent").parentIds(MetaIdFactory.conceptId(new UUID(5160134014823646133L, -7982110198386724200L), 6666499814681299051L)).childDescriptors(new ConceptDescriptorBuilder.Link(9152904044274518128L, "expression", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false)).children(new String[]{"expression"}, new boolean[]{false}).alias("$${", "element macro").create();
  /*package*/ final ConceptDescriptor myConceptTextMacro = new ConceptDescriptorBuilder("jetbrains.mps.samples.xmlLiterals.structure.TextMacro", MetaIdFactory.conceptId(new UUID(-6806790875199616463L, -5220878866465632027L), 9152904044274469601L)).super_("jetbrains.mps.core.xml.structure.XmlText").super_(MetaIdFactory.conceptId(new UUID(5160134014823646133L, -7982110198386724200L), 1622293396948952339L)).parents("jetbrains.mps.core.xml.structure.XmlText").parentIds(MetaIdFactory.conceptId(new UUID(5160134014823646133L, -7982110198386724200L), 1622293396948952339L)).childDescriptors(new ConceptDescriptorBuilder.Link(9152904044274469602L, "expression", MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L), false, false, false)).children(new String[]{"expression"}, new boolean[]{false}).alias("${", "").create();
  /*package*/ final ConceptDescriptor myConceptXmlLiteral = new ConceptDescriptorBuilder("jetbrains.mps.samples.xmlLiterals.structure.XmlLiteral", MetaIdFactory.conceptId(new UUID(-6806790875199616463L, -5220878866465632027L), 9152904044274328259L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(new UUID(-935030926396207931L, -6610165693999523818L), 1068431790191L)).childDescriptors(new ConceptDescriptorBuilder.Link(9152904044274328260L, "element", MetaIdFactory.conceptId(new UUID(5160134014823646133L, -7982110198386724200L), 6666499814681415858L), false, false, false)).children(new String[]{"element"}, new boolean[]{false}).alias("xml literal", "").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptElementMacro, myConceptTextMacro, myConceptXmlLiteral);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0h, conceptFqName)) {
      case 0:
        return myConceptElementMacro;
      case 1:
        return myConceptTextMacro;
      case 2:
        return myConceptXmlLiteral;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0h = new String[]{"jetbrains.mps.samples.xmlLiterals.structure.ElementMacro", "jetbrains.mps.samples.xmlLiterals.structure.TextMacro", "jetbrains.mps.samples.xmlLiterals.structure.XmlLiteral"};
}
