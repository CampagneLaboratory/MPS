package jetbrains.mps.samples.agreementLanguage.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.DefaultSimpleSubstituteAction;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class QueriesGenerated {
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Expression_1112119679872(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.agreementLanguage.structure.Quantity");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode fpConstant = SConceptOperations.createNewNode("jetbrains.mps.samples.formulaLanguage.structure.FloatingPointConstant", null);
            SPropertyOperations.set(fpConstant, MetaAdapterFactory.getProperty(new UUID(-5644773642485741678l, -8401387723420530422l), 1111784926012l, 1113257000626l, "value"), "0.0");
            if (pattern.length() > 1) {
              if (pattern.endsWith(".")) {
                SPropertyOperations.set(fpConstant, MetaAdapterFactory.getProperty(new UUID(-5644773642485741678l, -8401387723420530422l), 1111784926012l, 1113257000626l, "value"), pattern.substring(1) + "0");
              } else {
                SPropertyOperations.set(fpConstant, MetaAdapterFactory.getProperty(new UUID(-5644773642485741678l, -8401387723420530422l), 1111784926012l, 1113257000626l, "value"), pattern.substring(1));
              }
            }
            SNode quantity = SConceptOperations.createNewNode("jetbrains.mps.samples.agreementLanguage.structure.Quantity", null);
            SPropertyOperations.set(quantity, MetaAdapterFactory.getProperty(new UUID(1463511629799179198l, -4743614238981921533l), 1111792102248l, 1111793358083l, "unit"), "USD");
            SLinkOperations.setTarget(quantity, MetaAdapterFactory.getContainmentLink(new UUID(1463511629799179198l, -4743614238981921533l), 1111792102248l, 1111793363741l, "amount"), fpConstant);
            return quantity;
          }
          public boolean hasSubstitute() {
            return true;
          }
          public boolean canSubstitute_internal(String pattern, boolean strictly) {
            return pattern.matches("\\$([0-9]+\\.?[0-9]*)?");
          }
          public String getDescriptionText(String pattern) {
            return "quantity dollars";
          }
          public String getMatchingText(String pattern) {
            return pattern;
          }
          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }
        });
      }
    }
    {
      SNode outputConcept = SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.agreementLanguage.structure.Quantity");
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode fpConstant = SConceptOperations.createNewNode("jetbrains.mps.samples.formulaLanguage.structure.FloatingPointConstant", null);
            if (pattern.endsWith(".")) {
              SPropertyOperations.set(fpConstant, MetaAdapterFactory.getProperty(new UUID(-5644773642485741678l, -8401387723420530422l), 1111784926012l, 1113257000626l, "value"), pattern + 1);
            } else {
              SPropertyOperations.set(fpConstant, MetaAdapterFactory.getProperty(new UUID(-5644773642485741678l, -8401387723420530422l), 1111784926012l, 1113257000626l, "value"), pattern);
            }
            SNode quantity = SConceptOperations.createNewNode("jetbrains.mps.samples.agreementLanguage.structure.Quantity", null);
            SPropertyOperations.set(quantity, MetaAdapterFactory.getProperty(new UUID(1463511629799179198l, -4743614238981921533l), 1111792102248l, 1111793358083l, "unit"), "USD_KWH");
            SLinkOperations.setTarget(quantity, MetaAdapterFactory.getContainmentLink(new UUID(1463511629799179198l, -4743614238981921533l), 1111792102248l, 1111793363741l, "amount"), fpConstant);
            return quantity;
          }
          public boolean hasSubstitute() {
            return true;
          }
          public boolean canSubstitute_internal(String pattern, boolean strictly) {
            return pattern.matches("[0-9]+\\.?[0-9]*");
          }
          public String getDescriptionText(String pattern) {
            return "quantity";
          }
          public String getMatchingText(String pattern) {
            return pattern;
          }
          public String getVisibleMatchingText(String pattern) {
            return getMatchingText(pattern);
          }
        });
      }
    }
    return result;
  }
}
