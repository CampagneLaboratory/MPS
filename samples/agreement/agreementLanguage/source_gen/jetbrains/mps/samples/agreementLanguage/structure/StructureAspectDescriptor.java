package jetbrains.mps.samples.agreementLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAccountType = new ConceptDescriptorBuilder("jetbrains.mps.samples.agreementLanguage.structure.AccountType").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptAgreementDeclarations = new ConceptDescriptorBuilder("jetbrains.mps.samples.agreementLanguage.structure.AgreementDeclarations").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"eventType", "accountType"}, new boolean[]{true, true}).create();
  /*package*/ final ConceptDescriptor myConceptDate = new ConceptDescriptorBuilder("jetbrains.mps.samples.agreementLanguage.structure.Date").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("year", "month", "day").alias("date", "exect date").create();
  /*package*/ final ConceptDescriptor myConceptDate_Future = new ConceptDescriptorBuilder("jetbrains.mps.samples.agreementLanguage.structure.Date_Future").super_("jetbrains.mps.samples.agreementLanguage.structure.Date").parents("jetbrains.mps.samples.agreementLanguage.structure.Date").alias("FUTURE", "future time").create();
  /*package*/ final ConceptDescriptor myConceptDate_Past = new ConceptDescriptorBuilder("jetbrains.mps.samples.agreementLanguage.structure.Date_Past").super_("jetbrains.mps.samples.agreementLanguage.structure.Date").parents("jetbrains.mps.samples.agreementLanguage.structure.Date").alias("PAST", "past time").create();
  /*package*/ final ConceptDescriptor myConceptEvent = new ConceptDescriptorBuilder("jetbrains.mps.samples.agreementLanguage.structure.Event").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("taxable").references("type").children(new String[]{"postingRule"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptEventType = new ConceptDescriptorBuilder("jetbrains.mps.samples.agreementLanguage.structure.EventType").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"variable"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptEventVariable = new ConceptDescriptorBuilder("jetbrains.mps.samples.agreementLanguage.structure.EventVariable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("type").create();
  /*package*/ final ConceptDescriptor myConceptEventVariableReference = new ConceptDescriptorBuilder("jetbrains.mps.samples.agreementLanguage.structure.EventVariableReference").super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").references("eventVariable").create();
  /*package*/ final ConceptDescriptor myConceptPlan = new ConceptDescriptorBuilder("jetbrains.mps.samples.agreementLanguage.structure.Plan").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"value", "event"}, new boolean[]{true, true}).create();
  /*package*/ final ConceptDescriptor myConceptPostingRule = new ConceptDescriptorBuilder("jetbrains.mps.samples.agreementLanguage.structure.PostingRule").super_("jetbrains.mps.samples.formulaLanguage.structure.Formula").parents("jetbrains.mps.samples.formulaLanguage.structure.Formula").references("account").create();
  /*package*/ final ConceptDescriptor myConceptPostingRuleTemporalProperty = new ConceptDescriptorBuilder("jetbrains.mps.samples.agreementLanguage.structure.PostingRuleTemporalProperty").super_("jetbrains.mps.samples.agreementLanguage.structure.TemporalProperty").parents("jetbrains.mps.samples.agreementLanguage.structure.TemporalProperty").children(new String[]{"postingRule"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptQuantity = new ConceptDescriptorBuilder("jetbrains.mps.samples.agreementLanguage.structure.Quantity").super_("jetbrains.mps.samples.formulaLanguage.structure.Constant").parents("jetbrains.mps.samples.formulaLanguage.structure.Constant", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("unit").children(new String[]{"amount"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptQuantityTemporalProperty = new ConceptDescriptorBuilder("jetbrains.mps.samples.agreementLanguage.structure.QuantityTemporalProperty").super_("jetbrains.mps.samples.agreementLanguage.structure.TemporalProperty").parents("jetbrains.mps.samples.agreementLanguage.structure.TemporalProperty").children(new String[]{"quantity"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptTemporalProperty = new ConceptDescriptorBuilder("jetbrains.mps.samples.agreementLanguage.structure.TemporalProperty").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"date", "value"}, new boolean[]{false, false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptValue = new ConceptDescriptorBuilder("jetbrains.mps.samples.agreementLanguage.structure.Value").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("type").children(new String[]{"quantity"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptValueReference = new ConceptDescriptorBuilder("jetbrains.mps.samples.agreementLanguage.structure.ValueReference").super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").references("value").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAccountType, myConceptAgreementDeclarations, myConceptDate, myConceptDate_Future, myConceptDate_Past, myConceptEvent, myConceptEventType, myConceptEventVariable, myConceptEventVariableReference, myConceptPlan, myConceptPostingRule, myConceptPostingRuleTemporalProperty, myConceptQuantity, myConceptQuantityTemporalProperty, myConceptTemporalProperty, myConceptValue, myConceptValueReference);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0u, conceptFqName)) {
      case 0:
        return myConceptAccountType;
      case 1:
        return myConceptAgreementDeclarations;
      case 2:
        return myConceptDate;
      case 3:
        return myConceptDate_Future;
      case 4:
        return myConceptDate_Past;
      case 5:
        return myConceptEvent;
      case 6:
        return myConceptEventType;
      case 7:
        return myConceptEventVariable;
      case 8:
        return myConceptEventVariableReference;
      case 9:
        return myConceptPlan;
      case 10:
        return myConceptPostingRule;
      case 11:
        return myConceptPostingRuleTemporalProperty;
      case 12:
        return myConceptQuantity;
      case 13:
        return myConceptQuantityTemporalProperty;
      case 14:
        return myConceptTemporalProperty;
      case 15:
        return myConceptValue;
      case 16:
        return myConceptValueReference;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0u = new String[]{"jetbrains.mps.samples.agreementLanguage.structure.AccountType", "jetbrains.mps.samples.agreementLanguage.structure.AgreementDeclarations", "jetbrains.mps.samples.agreementLanguage.structure.Date", "jetbrains.mps.samples.agreementLanguage.structure.Date_Future", "jetbrains.mps.samples.agreementLanguage.structure.Date_Past", "jetbrains.mps.samples.agreementLanguage.structure.Event", "jetbrains.mps.samples.agreementLanguage.structure.EventType", "jetbrains.mps.samples.agreementLanguage.structure.EventVariable", "jetbrains.mps.samples.agreementLanguage.structure.EventVariableReference", "jetbrains.mps.samples.agreementLanguage.structure.Plan", "jetbrains.mps.samples.agreementLanguage.structure.PostingRule", "jetbrains.mps.samples.agreementLanguage.structure.PostingRuleTemporalProperty", "jetbrains.mps.samples.agreementLanguage.structure.Quantity", "jetbrains.mps.samples.agreementLanguage.structure.QuantityTemporalProperty", "jetbrains.mps.samples.agreementLanguage.structure.TemporalProperty", "jetbrains.mps.samples.agreementLanguage.structure.Value", "jetbrains.mps.samples.agreementLanguage.structure.ValueReference"};
}
