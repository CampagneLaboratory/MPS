package jetbrains.mps.samples.lambdaCalculus.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.BehaviorDescriptor;
import java.util.Arrays;

public class BehaviorAspectDescriptor extends DescriptorProvider<BehaviorDescriptor> {
  private static String[] stringSwitchCases_846f5o_a0a0a = new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.AbstractionVarRef", "jetbrains.mps.samples.lambdaCalculus.structure.AbstractionVariable", "jetbrains.mps.samples.lambdaCalculus.structure.AddOperation", "jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation", "jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation", "jetbrains.mps.samples.lambdaCalculus.structure.BinaryStringOperation", "jetbrains.mps.samples.lambdaCalculus.structure.ConcatenateOperation", "jetbrains.mps.samples.lambdaCalculus.structure.DivideOperation", "jetbrains.mps.samples.lambdaCalculus.structure.FunctionType", "jetbrains.mps.samples.lambdaCalculus.structure.LambdaAbstraction", "jetbrains.mps.samples.lambdaCalculus.structure.LambdaApplication", "jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression", "jetbrains.mps.samples.lambdaCalculus.structure.LambdaType", "jetbrains.mps.samples.lambdaCalculus.structure.LetExpression", "jetbrains.mps.samples.lambdaCalculus.structure.LetRef", "jetbrains.mps.samples.lambdaCalculus.structure.LetVariable", "jetbrains.mps.samples.lambdaCalculus.structure.MultipleExpression", "jetbrains.mps.samples.lambdaCalculus.structure.MultiplyOperation", "jetbrains.mps.samples.lambdaCalculus.structure.NumberType", "jetbrains.mps.samples.lambdaCalculus.structure.NumericConstant", "jetbrains.mps.samples.lambdaCalculus.structure.ParenthesisExpression", "jetbrains.mps.samples.lambdaCalculus.structure.Program", "jetbrains.mps.samples.lambdaCalculus.structure.StringConstant", "jetbrains.mps.samples.lambdaCalculus.structure.StringType", "jetbrains.mps.samples.lambdaCalculus.structure.SubtractOperation", "jetbrains.mps.samples.lambdaCalculus.structure.Variable", "jetbrains.mps.samples.lambdaCalculus.structure.VariableOwner", "jetbrains.mps.samples.lambdaCalculus.structure.VariableReference"};

  public BehaviorAspectDescriptor() {
  }

  public BehaviorDescriptor getDescriptor(String fqName) {
    switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0a, fqName)) {
      case 11:
        // interface or abstract concept behavior jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression 
        return null;
      case 9:
        return new LambdaAbstraction_BehaviorDescriptor();
      case 1:
        return new AbstractionVariable_BehaviorDescriptor();
      case 22:
        return new StringConstant_BehaviorDescriptor();
      case 19:
        return new NumericConstant_BehaviorDescriptor();
      case 10:
        return new LambdaApplication_BehaviorDescriptor();
      case 21:
        return new Program_BehaviorDescriptor();
      case 0:
        return new AbstractionVarRef_BehaviorDescriptor();
      case 4:
        // interface or abstract concept behavior jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation 
        return null;
      case 2:
        return new AddOperation_BehaviorDescriptor();
      case 17:
        return new MultiplyOperation_BehaviorDescriptor();
      case 24:
        return new SubtractOperation_BehaviorDescriptor();
      case 7:
        return new DivideOperation_BehaviorDescriptor();
      case 12:
        // interface or abstract concept behavior jetbrains.mps.samples.lambdaCalculus.structure.LambdaType 
        return null;
      case 18:
        return new NumberType_BehaviorDescriptor();
      case 23:
        return new StringType_BehaviorDescriptor();
      case 8:
        return new FunctionType_BehaviorDescriptor();
      case 20:
        return new ParenthesisExpression_BehaviorDescriptor();
      case 16:
        return new MultipleExpression_BehaviorDescriptor();
      case 3:
        // interface or abstract concept behavior jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation 
        return null;
      case 5:
        // interface or abstract concept behavior jetbrains.mps.samples.lambdaCalculus.structure.BinaryStringOperation 
        return null;
      case 6:
        return new ConcatenateOperation_BehaviorDescriptor();
      case 13:
        return new LetExpression_BehaviorDescriptor();
      case 14:
        return new LetRef_BehaviorDescriptor();
      case 15:
        return new LetVariable_BehaviorDescriptor();
      case 26:
        // interface or abstract concept behavior jetbrains.mps.samples.lambdaCalculus.structure.VariableOwner 
        return null;
      case 27:
        // interface or abstract concept behavior jetbrains.mps.samples.lambdaCalculus.structure.VariableReference 
        return null;
      case 25:
        return new Variable_BehaviorDescriptor();
      default:
        return null;
    }
  }
}
