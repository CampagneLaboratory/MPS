package jetbrains.mps.samples.lambdaCalculus.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class LetRef_Behavior {
  public static void init(SNode thisNode) {
  }
  public static List<SNode> call_getAllReferences_926857988255581402(SNode thisNode) {
    List<SNode> result = new ArrayList<SNode>();
    SNode node = thisNode;
    while (SNodeOperations.getParent(node) != null && !(SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(new UUID(8979658720047614716l, -5913038370385483627l), 1564819815921013155l, "jetbrains.mps.samples.lambdaCalculus.structure.MultipleExpression")))) {
      node = SNodeOperations.getParent(node);
    }
    for (SNode letRef : SNodeOperations.getNodeDescendants(node, MetaAdapterFactory.getConcept(new UUID(8979658720047614716l, -5913038370385483627l), 4939219901992083820l, "jetbrains.mps.samples.lambdaCalculus.structure.LetRef"), false, new SAbstractConcept[]{})) {
      if (SLinkOperations.getTarget(letRef, MetaAdapterFactory.getReferenceLink(new UUID(8979658720047614716l, -5913038370385483627l), 5249919352014727944l, 5249919352014732020l, "variable")) == SLinkOperations.getTarget(thisNode, MetaAdapterFactory.getReferenceLink(new UUID(8979658720047614716l, -5913038370385483627l), 5249919352014727944l, 5249919352014732020l, "variable"))) {
        ListSequence.fromList(result).addElement(letRef);
      }
    }
    return result;
  }
}
