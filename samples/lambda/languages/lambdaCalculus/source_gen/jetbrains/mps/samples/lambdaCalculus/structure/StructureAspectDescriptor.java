package jetbrains.mps.samples.lambdaCalculus.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractionVarRef = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.AbstractionVarRef").super_("jetbrains.mps.samples.lambdaCalculus.structure.VariableReference").parents("jetbrains.mps.samples.lambdaCalculus.structure.VariableReference").references("variable").create();
  /*package*/ final ConceptDescriptor myConceptAbstractionVariable = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.AbstractionVariable").super_("jetbrains.mps.samples.lambdaCalculus.structure.Variable").parents("jetbrains.mps.samples.lambdaCalculus.structure.Variable", "jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptAddOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.AddOperation").super_("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation").parents("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation").alias("+", "").create();
  /*package*/ final ConceptDescriptor myConceptBinaryNumericOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation").super_("jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation").parents("jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBinaryOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").children(new String[]{"left", "right"}, new boolean[]{false, false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBinaryStringOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.BinaryStringOperation").super_("jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation").parents("jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptConcatenateOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.ConcatenateOperation").super_("jetbrains.mps.samples.lambdaCalculus.structure.BinaryStringOperation").parents("jetbrains.mps.samples.lambdaCalculus.structure.BinaryStringOperation").alias("+", "").create();
  /*package*/ final ConceptDescriptor myConceptDivideOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.DivideOperation").super_("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation").parents("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation").alias("/", "").create();
  /*package*/ final ConceptDescriptor myConceptFunctionType = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.FunctionType").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"domain", "range"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptLambdaAbstraction = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.LambdaAbstraction").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression", "jetbrains.mps.samples.lambdaCalculus.structure.VariableOwner").children(new String[]{"variable", "body"}, new boolean[]{true, false}).alias("\\", "").create();
  /*package*/ final ConceptDescriptor myConceptLambdaApplication = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.LambdaApplication").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").children(new String[]{"function", "argument"}, new boolean[]{false, true}).create();
  /*package*/ final ConceptDescriptor myConceptLambdaExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptLambdaType = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.LambdaType").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptLetExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.LetExpression").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression", "jetbrains.mps.samples.lambdaCalculus.structure.VariableOwner").children(new String[]{"value", "expression", "variable"}, new boolean[]{false, false, false}).create();
  /*package*/ final ConceptDescriptor myConceptLetRef = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.LetRef").super_("jetbrains.mps.samples.lambdaCalculus.structure.VariableReference").parents("jetbrains.mps.samples.lambdaCalculus.structure.VariableReference").references("variable").create();
  /*package*/ final ConceptDescriptor myConceptLetVariable = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.LetVariable").super_("jetbrains.mps.samples.lambdaCalculus.structure.Variable").parents("jetbrains.mps.samples.lambdaCalculus.structure.Variable", "jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptMultipleExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.MultipleExpression").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").children(new String[]{"expressions"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptMultiplyOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.MultiplyOperation").super_("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation").parents("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation").alias("*", "").create();
  /*package*/ final ConceptDescriptor myConceptNumberType = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.NumberType").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaType").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaType").alias("number", "").create();
  /*package*/ final ConceptDescriptor myConceptNumericConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.NumericConstant").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").properties("value").create();
  /*package*/ final ConceptDescriptor myConceptParenthesisExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.ParenthesisExpression").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").children(new String[]{"expression"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptProgram = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.Program").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.execution.util.structure.IMainClass").children(new String[]{"expression"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptStringConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.StringConstant").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").properties("value").create();
  /*package*/ final ConceptDescriptor myConceptStringType = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.StringType").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaType").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaType").alias("string", "").create();
  /*package*/ final ConceptDescriptor myConceptSubtractOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.SubtractOperation").super_("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation").parents("jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation").alias("-", "").create();
  /*package*/ final ConceptDescriptor myConceptVariable = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.Variable").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression", "jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptVariableOwner = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.VariableOwner").interface_().create();
  /*package*/ final ConceptDescriptor myConceptVariableReference = new ConceptDescriptorBuilder("jetbrains.mps.samples.lambdaCalculus.structure.VariableReference").super_("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").parents("jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression").references("variable").abstract_().create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractionVarRef, myConceptAbstractionVariable, myConceptAddOperation, myConceptBinaryNumericOperation, myConceptBinaryOperation, myConceptBinaryStringOperation, myConceptConcatenateOperation, myConceptDivideOperation, myConceptFunctionType, myConceptLambdaAbstraction, myConceptLambdaApplication, myConceptLambdaExpression, myConceptLambdaType, myConceptLetExpression, myConceptLetRef, myConceptLetVariable, myConceptMultipleExpression, myConceptMultiplyOperation, myConceptNumberType, myConceptNumericConstant, myConceptParenthesisExpression, myConceptProgram, myConceptStringConstant, myConceptStringType, myConceptSubtractOperation, myConceptVariable, myConceptVariableOwner, myConceptVariableReference);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0fb, conceptFqName)) {
      case 0:
        return myConceptAbstractionVarRef;
      case 1:
        return myConceptAbstractionVariable;
      case 2:
        return myConceptAddOperation;
      case 3:
        return myConceptBinaryNumericOperation;
      case 4:
        return myConceptBinaryOperation;
      case 5:
        return myConceptBinaryStringOperation;
      case 6:
        return myConceptConcatenateOperation;
      case 7:
        return myConceptDivideOperation;
      case 8:
        return myConceptFunctionType;
      case 9:
        return myConceptLambdaAbstraction;
      case 10:
        return myConceptLambdaApplication;
      case 11:
        return myConceptLambdaExpression;
      case 12:
        return myConceptLambdaType;
      case 13:
        return myConceptLetExpression;
      case 14:
        return myConceptLetRef;
      case 15:
        return myConceptLetVariable;
      case 16:
        return myConceptMultipleExpression;
      case 17:
        return myConceptMultiplyOperation;
      case 18:
        return myConceptNumberType;
      case 19:
        return myConceptNumericConstant;
      case 20:
        return myConceptParenthesisExpression;
      case 21:
        return myConceptProgram;
      case 22:
        return myConceptStringConstant;
      case 23:
        return myConceptStringType;
      case 24:
        return myConceptSubtractOperation;
      case 25:
        return myConceptVariable;
      case 26:
        return myConceptVariableOwner;
      case 27:
        return myConceptVariableReference;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0fb = new String[]{"jetbrains.mps.samples.lambdaCalculus.structure.AbstractionVarRef", "jetbrains.mps.samples.lambdaCalculus.structure.AbstractionVariable", "jetbrains.mps.samples.lambdaCalculus.structure.AddOperation", "jetbrains.mps.samples.lambdaCalculus.structure.BinaryNumericOperation", "jetbrains.mps.samples.lambdaCalculus.structure.BinaryOperation", "jetbrains.mps.samples.lambdaCalculus.structure.BinaryStringOperation", "jetbrains.mps.samples.lambdaCalculus.structure.ConcatenateOperation", "jetbrains.mps.samples.lambdaCalculus.structure.DivideOperation", "jetbrains.mps.samples.lambdaCalculus.structure.FunctionType", "jetbrains.mps.samples.lambdaCalculus.structure.LambdaAbstraction", "jetbrains.mps.samples.lambdaCalculus.structure.LambdaApplication", "jetbrains.mps.samples.lambdaCalculus.structure.LambdaExpression", "jetbrains.mps.samples.lambdaCalculus.structure.LambdaType", "jetbrains.mps.samples.lambdaCalculus.structure.LetExpression", "jetbrains.mps.samples.lambdaCalculus.structure.LetRef", "jetbrains.mps.samples.lambdaCalculus.structure.LetVariable", "jetbrains.mps.samples.lambdaCalculus.structure.MultipleExpression", "jetbrains.mps.samples.lambdaCalculus.structure.MultiplyOperation", "jetbrains.mps.samples.lambdaCalculus.structure.NumberType", "jetbrains.mps.samples.lambdaCalculus.structure.NumericConstant", "jetbrains.mps.samples.lambdaCalculus.structure.ParenthesisExpression", "jetbrains.mps.samples.lambdaCalculus.structure.Program", "jetbrains.mps.samples.lambdaCalculus.structure.StringConstant", "jetbrains.mps.samples.lambdaCalculus.structure.StringType", "jetbrains.mps.samples.lambdaCalculus.structure.SubtractOperation", "jetbrains.mps.samples.lambdaCalculus.structure.Variable", "jetbrains.mps.samples.lambdaCalculus.structure.VariableOwner", "jetbrains.mps.samples.lambdaCalculus.structure.VariableReference"};
}
