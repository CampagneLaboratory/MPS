package jetbrains.mps.samples.lambdaCalculus.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.constraints.BaseNodeReferenceSearchScopeProvider;
import jetbrains.mps.smodel.constraints.IModelConstraints;
import jetbrains.mps.smodel.constraints.ModelConstraintsManager;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.constraints.ReferentConstraintContext;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.samples.lambdaCalculus.behavior.VariableOwner_Behavior;

public class VariableReference_variable_ReferentConstraint extends BaseNodeReferenceSearchScopeProvider implements IModelConstraints {
  public VariableReference_variable_ReferentConstraint() {
  }

  public void registerSelf(ModelConstraintsManager manager) {
    manager.registerNodeReferentSearchScopeProvider("jetbrains.mps.samples.lambdaCalculus.structure.VariableReference", "variable", this);
  }

  public void unRegisterSelf(ModelConstraintsManager manager) {
    manager.unRegisterNodeReferentSearchScopeProvider("jetbrains.mps.samples.lambdaCalculus.structure.VariableReference", "variable");
  }

  public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferentConstraintContext _context) {
    List<SNode> nodes = SNodeOperations.getAncestors(_context.getEnclosingNode(), "jetbrains.mps.samples.lambdaCalculus.structure.VariableOwner", true);
    List<SNode> result = new ArrayList<SNode>();
    for (SNode node : nodes) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(VariableOwner_Behavior.call_getVariables_8981808925914841576(node)));
    }
    return result;
  }
}
