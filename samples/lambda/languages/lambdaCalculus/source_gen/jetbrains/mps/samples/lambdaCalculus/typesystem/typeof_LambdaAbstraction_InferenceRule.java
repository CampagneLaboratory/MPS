package jetbrains.mps.samples.lambdaCalculus.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.typesystem.inference.EquationInfo;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SModelUtil_new;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class typeof_LambdaAbstraction_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_LambdaAbstraction_InferenceRule() {
  }

  public void applyRule(final SNode lambdaAbstraction, final TypeCheckingContext typeCheckingContext) {
    final SNode R_typevar_627759474950188093 = typeCheckingContext.createNewRuntimeTypesVariable();
    {
      SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(lambdaAbstraction, "body", true);
      BaseIntentionProvider intentionProvider = null;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:8c01d5e0-82c3-43e7-9986-af954df6cb8b(jetbrains.mps.samples.lambdaCalculus.typesystem)", "627759474950193612", 0, intentionProvider);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:8c01d5e0-82c3-43e7-9986-af954df6cb8b(jetbrains.mps.samples.lambdaCalculus.typesystem)", "627759474950193616", true), (SNode) typeCheckingContext.getEquationManager().getRepresentator(R_typevar_627759474950188093), _info_12389875345);
    }
    SNode result = typeCheckingContext.getEquationManager().getRepresentator(R_typevar_627759474950188093);
    boolean first = true;
    List<SNode> reversedNodes = new ArrayList<SNode>();
    for (SNode node : SLinkOperations.getTargets(lambdaAbstraction, "variable", true)) {
      ListSequence.fromList(reversedNodes).insertElement(0, node);
    }
    for (SNode node : reversedNodes) {
      final SNode D_typevar_6115593414628019700 = typeCheckingContext.createNewRuntimeTypesVariable();
      {
        SNode _nodeToCheck_1029348928467 = node;
        BaseIntentionProvider intentionProvider = null;
        EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:8c01d5e0-82c3-43e7-9986-af954df6cb8b(jetbrains.mps.samples.lambdaCalculus.typesystem)", "627759474950193423", 0, intentionProvider);
        typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:8c01d5e0-82c3-43e7-9986-af954df6cb8b(jetbrains.mps.samples.lambdaCalculus.typesystem)", "627759474950193434", true), (SNode) typeCheckingContext.getEquationManager().getRepresentator(D_typevar_6115593414628019700), _info_12389875345);
      }
      result = new typeof_LambdaAbstraction_InferenceRule.QuotationClass_1111_0().createNode(typeCheckingContext.getEquationManager().getRepresentator(D_typevar_6115593414628019700), result, typeCheckingContext);
    }
    {
      SNode _nodeToCheck_1029348928467 = lambdaAbstraction;
      BaseIntentionProvider intentionProvider = null;
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:8c01d5e0-82c3-43e7-9986-af954df6cb8b(jetbrains.mps.samples.lambdaCalculus.typesystem)", "6115593414628019716", 0, intentionProvider);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:8c01d5e0-82c3-43e7-9986-af954df6cb8b(jetbrains.mps.samples.lambdaCalculus.typesystem)", "6115593414628019727", true), (SNode) result, _info_12389875345);
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.samples.lambdaCalculus.structure.LambdaAbstraction";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

  public static class QuotationClass_1111_0 {
    public QuotationClass_1111_0() {
    }

    public SNode createNode(Object parameter_1111_0, Object parameter_1111_1, final TypeCheckingContext typeCheckingContext) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1111_0 = null;
      SNode quotedNode_1111_1 = null;
      SNode quotedNode_1111_2 = null;
      {
        quotedNode_1111_0 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.samples.lambdaCalculus.structure.FunctionType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_1111_0 = quotedNode_1111_0;
        {
          quotedNode_1111_1 = (SNode) parameter_1111_0;
          SNode quotedNode1_1111_1;
          if (_parameterValues_129834374.contains(quotedNode_1111_1)) {
            quotedNode1_1111_1 = CopyUtil.copy(quotedNode_1111_1);
          } else {
            _parameterValues_129834374.add(quotedNode_1111_1);
            quotedNode1_1111_1 = quotedNode_1111_1;
          }
          if (quotedNode1_1111_1 != null) {
            quotedNode_1111_0.addChild("domain", HUtil.copyIfNecessary(quotedNode1_1111_1, typeCheckingContext));
          }
        }
        {
          quotedNode_1111_2 = (SNode) parameter_1111_1;
          SNode quotedNode1_1111_2;
          if (_parameterValues_129834374.contains(quotedNode_1111_2)) {
            quotedNode1_1111_2 = CopyUtil.copy(quotedNode_1111_2);
          } else {
            _parameterValues_129834374.add(quotedNode_1111_2);
            quotedNode1_1111_2 = quotedNode_1111_2;
          }
          if (quotedNode1_1111_2 != null) {
            quotedNode_1111_0.addChild("range", HUtil.copyIfNecessary(quotedNode1_1111_2, typeCheckingContext));
          }
        }
        result = quotedNode1_1111_0;
      }
      return result;
    }

    public SNode createNode(Object parameter_1111_0, Object parameter_1111_1) {
      SNode result = null;
      Set<SNode> _parameterValues_129834374 = new HashSet<SNode>();
      SNode quotedNode_1111_0 = null;
      SNode quotedNode_1111_1 = null;
      SNode quotedNode_1111_2 = null;
      {
        quotedNode_1111_0 = SModelUtil_new.instantiateConceptDeclaration("jetbrains.mps.samples.lambdaCalculus.structure.FunctionType", TypeChecker.getInstance().getRuntimeTypesModel(), GlobalScope.getInstance(), false);
        SNode quotedNode1_1111_0 = quotedNode_1111_0;
        {
          quotedNode_1111_1 = (SNode) parameter_1111_0;
          SNode quotedNode1_1111_1;
          if (_parameterValues_129834374.contains(quotedNode_1111_1)) {
            quotedNode1_1111_1 = CopyUtil.copy(quotedNode_1111_1);
          } else {
            _parameterValues_129834374.add(quotedNode_1111_1);
            quotedNode1_1111_1 = quotedNode_1111_1;
          }
          if (quotedNode1_1111_1 != null) {
            quotedNode_1111_0.addChild("domain", HUtil.copyIfNecessary(quotedNode1_1111_1));
          }
        }
        {
          quotedNode_1111_2 = (SNode) parameter_1111_1;
          SNode quotedNode1_1111_2;
          if (_parameterValues_129834374.contains(quotedNode_1111_2)) {
            quotedNode1_1111_2 = CopyUtil.copy(quotedNode_1111_2);
          } else {
            _parameterValues_129834374.add(quotedNode_1111_2);
            quotedNode1_1111_2 = quotedNode_1111_2;
          }
          if (quotedNode1_1111_2 != null) {
            quotedNode_1111_0.addChild("range", HUtil.copyIfNecessary(quotedNode1_1111_2));
          }
        }
        result = quotedNode1_1111_0;
      }
      return result;
    }
  }
}
