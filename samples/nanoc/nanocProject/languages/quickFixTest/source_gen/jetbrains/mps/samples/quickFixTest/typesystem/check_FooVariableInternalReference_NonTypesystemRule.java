package jetbrains.mps.samples.quickFixTest.typesystem;

/*Generated by MPS */

import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.apache.commons.lang.ObjectUtils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.BaseQuickFixProvider;
import jetbrains.mps.typesystem.inference.IErrorTarget;
import jetbrains.mps.typesystem.inference.NodeErrorTarget;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_FooVariableInternalReference_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_FooVariableInternalReference_NonTypesystemRule() {
  }

  public void applyRule(final SNode varReference, final TypeCheckingContext typeCheckingContext) {
    SNode methodLike = SNodeOperations.getAncestor(varReference, "jetbrains.mps.baseLanguage.structure.IMethodLike", true, false);
    for (SNode fooVariable : SNodeOperations.getDescendants(methodLike, "jetbrains.mps.samples.quickFixTest.structure.FooVariable", false, new String[]{})) {
      if (ObjectUtils.equals(SPropertyOperations.getString(fooVariable, "name"), SPropertyOperations.getString(varReference, "varName"))) {
        {
          BaseQuickFixProvider intentionProvider = null;
          intentionProvider = new BaseQuickFixProvider("jetbrains.mps.samples.quickFixTest.typesystem.setVarRef_QuickFix", true);
          intentionProvider.putArgument("oldVar", varReference);
          intentionProvider.putArgument("target", fooVariable);
          IErrorTarget errorTarget = new NodeErrorTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportInfo(varReference, "fooVar found", "r:75db9e4c-bc24-4bb0-a18e-1704f2e8503d(jetbrains.mps.samples.quickFixTest.typesystem)", "3565731266278589003", intentionProvider, errorTarget);
        }
        return;
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.samples.quickFixTest.structure.FooVariableInternalReference";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }
}
