package jetbrains.mps.samples.documentation.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;
import java.util.List;
import jetbrains.mps.text.TextUnit;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final long[] myId2Index;
  public TextGenAspectDescriptor() {
    myId2Index = new long[1];
    myId2Index[0] = 0x63feb1ccbe205151L;
  }
  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SConceptId id) {
    final int index = Arrays.binarySearch(myId2Index, id.getIdValue());
    switch (index) {
      case 0:
        return new CommentAttribute_TextGen();
      default:
        return null;
    }
  }

  @NotNull
  @Override
  public List<TextUnit> breakdownToUnits(@NotNull SModel model) {
    ArrayList<TextUnit> rv = new ArrayList<TextUnit>();
    for (SNode root : model.getRootNodes()) {
    }
    return rv;
  }
}
