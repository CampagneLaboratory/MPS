package jetbrains.mps.samples.complex.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.smodel.action.INodeSubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class QueriesGenerated {
  public static List<INodeSubstituteAction> sideTransform_ActionsFactory_Expression_1196261413060(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());
    {
      SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
          SNode result = SModelOperations.createNewNode(_context.getModel(), null, "jetbrains.mps.samples.complex.structure.ReExpression");
          SNodeOperations.replaceWithAnother(_context.getSourceNode(), result);
          SLinkOperations.setTarget(result, "complexExpression", _context.getSourceNode(), true);
          return result;
        }

        public String getMatchingText(String pattern) {
          return "re";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }

        public String getDescriptionText(String pattern) {
          return "complex real part";
        }
      });
    }
    {
      SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
          SNode result = SModelOperations.createNewNode(_context.getModel(), null, "jetbrains.mps.samples.complex.structure.ImExpression");
          SNodeOperations.replaceWithAnother(_context.getSourceNode(), result);
          SLinkOperations.setTarget(result, "complexExpression", _context.getSourceNode(), true);
          return result;
        }

        public String getMatchingText(String pattern) {
          return "im";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }

        public String getDescriptionText(String pattern) {
          return "complex imaginary part";
        }
      });
    }
    {
      SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
          SNode result = SModelOperations.createNewNode(_context.getModel(), null, "jetbrains.mps.samples.complex.structure.AbsExpression");
          SNodeOperations.replaceWithAnother(_context.getSourceNode(), result);
          SLinkOperations.setTarget(result, "complexExpression", _context.getSourceNode(), true);
          return result;
        }

        public String getMatchingText(String pattern) {
          return "abs";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }

        public String getDescriptionText(String pattern) {
          return "complex absolute value";
        }
      });
    }
    {
      SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
          SNode result = SModelOperations.createNewNode(_context.getModel(), null, "jetbrains.mps.samples.complex.structure.ArgExpression");
          SNodeOperations.replaceWithAnother(_context.getSourceNode(), result);
          SLinkOperations.setTarget(result, "complexExpression", _context.getSourceNode(), true);
          return result;
        }

        public String getMatchingText(String pattern) {
          return "arg";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }

        public String getDescriptionText(String pattern) {
          return "complex argument";
        }
      });
    }
    {
      SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
          SNode result = SModelOperations.createNewNode(_context.getModel(), null, "jetbrains.mps.samples.complex.structure.ConjugateComplexExpression");
          SNodeOperations.replaceWithAnother(_context.getSourceNode(), result);
          SLinkOperations.setTarget(result, "complexExpression", _context.getSourceNode(), true);
          return result;
        }

        public String getMatchingText(String pattern) {
          return "conj";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }

        public String getDescriptionText(String pattern) {
          return "complex conjugative";
        }
      });
    }
    {
      SNode concept = SConceptOperations.findConceptDeclaration("jetbrains.mps.samples.complex.structure.ReExpression");
      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {
        public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
          SNode result = SModelOperations.createNewNode(_context.getModel(), null, "jetbrains.mps.samples.complex.structure.DegreeComplexExpression");
          SNodeOperations.replaceWithAnother(_context.getSourceNode(), result);
          SLinkOperations.setTarget(result, "complexExpression", _context.getSourceNode(), true);
          return result;
        }

        public String getMatchingText(String pattern) {
          return "^";
        }

        public String getVisibleMatchingText(String pattern) {
          return this.getMatchingText(pattern);
        }

        public String getDescriptionText(String pattern) {
          return "complex degree";
        }
      });
    }
    return result;
  }
}
