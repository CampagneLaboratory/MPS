package jetbrains.mps.samples.complex.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbsExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.AbsExpression").super_("jetbrains.mps.samples.complex.structure.SingleComplexExpression").parents("jetbrains.mps.samples.complex.structure.SingleComplexExpression").alias("abs", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptArgExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.ArgExpression").super_("jetbrains.mps.samples.complex.structure.SingleComplexExpression").parents("jetbrains.mps.samples.complex.structure.SingleComplexExpression").alias("arg", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptComplexType = new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.ComplexType").super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").alias("complex", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConjugateComplexExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.ConjugateComplexExpression").super_("jetbrains.mps.samples.complex.structure.SingleComplexExpression").parents("jetbrains.mps.samples.complex.structure.SingleComplexExpression").alias("conj", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDegreeComplexExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.DegreeComplexExpression").super_("jetbrains.mps.samples.complex.structure.SingleComplexExpression").parents("jetbrains.mps.samples.complex.structure.SingleComplexExpression").children(new String[]{"degree"}, new boolean[]{false}).alias("deg", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptImExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.ImExpression").super_("jetbrains.mps.samples.complex.structure.SingleComplexExpression").parents("jetbrains.mps.samples.complex.structure.SingleComplexExpression").alias("im", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptImaginaryUnit = new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.ImaginaryUnit").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("i", "complex imaginary unit").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptReExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.ReExpression").super_("jetbrains.mps.samples.complex.structure.SingleComplexExpression").parents("jetbrains.mps.samples.complex.structure.SingleComplexExpression").alias("re", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSingleComplexExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.SingleComplexExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"complexExpression"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbsExpression, myConceptArgExpression, myConceptComplexType, myConceptConjugateComplexExpression, myConceptDegreeComplexExpression, myConceptImExpression, myConceptImaginaryUnit, myConceptReExpression, myConceptSingleComplexExpression);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0m, conceptFqName)) {
      case 0:
        return myConceptAbsExpression;
      case 1:
        return myConceptArgExpression;
      case 2:
        return myConceptComplexType;
      case 3:
        return myConceptConjugateComplexExpression;
      case 4:
        return myConceptDegreeComplexExpression;
      case 5:
        return myConceptImExpression;
      case 6:
        return myConceptImaginaryUnit;
      case 7:
        return myConceptReExpression;
      case 8:
        return myConceptSingleComplexExpression;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0m = new String[]{"jetbrains.mps.samples.complex.structure.AbsExpression", "jetbrains.mps.samples.complex.structure.ArgExpression", "jetbrains.mps.samples.complex.structure.ComplexType", "jetbrains.mps.samples.complex.structure.ConjugateComplexExpression", "jetbrains.mps.samples.complex.structure.DegreeComplexExpression", "jetbrains.mps.samples.complex.structure.ImExpression", "jetbrains.mps.samples.complex.structure.ImaginaryUnit", "jetbrains.mps.samples.complex.structure.ReExpression", "jetbrains.mps.samples.complex.structure.SingleComplexExpression"};
}
