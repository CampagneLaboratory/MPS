package jetbrains.mps.samples.complex.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.DescriptorProvider;
import jetbrains.mps.smodel.structure.StructureDescriptor;
import com.google.common.collect.ImmutableList;
import java.util.Set;
import java.util.List;
import java.util.HashSet;
import jetbrains.mps.smodel.structure.ConceptRegistry;
import java.util.Collections;

public class StructureAspectDescriptor extends DescriptorProvider<StructureDescriptor> {
  public StructureAspectDescriptor() {
  }

  public StructureDescriptor getDescriptor(String conceptFqName) {
    switch ((conceptFqName).hashCode()) {
      case -1593474570:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.complex.structure.ComplexType", new String[]{"jetbrains.mps.baseLanguage.structure.PrimitiveType"}, new String[]{}, new String[]{"jetbrains.mps.baseLanguage.structure.PrimitiveType"});
      case -917904193:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.complex.structure.ReExpression", new String[]{"jetbrains.mps.samples.complex.structure.SingleComplexExpression"}, new String[]{"jetbrains.mps.samples.complex.structure.SingleComplexExpression"}, new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
      case 607058924:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.complex.structure.SingleComplexExpression", new String[]{"jetbrains.mps.baseLanguage.structure.Expression"}, new String[]{}, new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
      case 1932893306:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.complex.structure.ArgExpression", new String[]{"jetbrains.mps.samples.complex.structure.SingleComplexExpression"}, new String[]{"jetbrains.mps.samples.complex.structure.SingleComplexExpression"}, new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
      case -221010026:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.complex.structure.AbsExpression", new String[]{"jetbrains.mps.samples.complex.structure.SingleComplexExpression"}, new String[]{"jetbrains.mps.samples.complex.structure.SingleComplexExpression"}, new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
      case 724609648:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.complex.structure.ImExpression", new String[]{"jetbrains.mps.samples.complex.structure.SingleComplexExpression"}, new String[]{"jetbrains.mps.samples.complex.structure.SingleComplexExpression"}, new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
      case -1458135484:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.complex.structure.ConjugateComplexExpression", new String[]{"jetbrains.mps.samples.complex.structure.SingleComplexExpression"}, new String[]{"jetbrains.mps.samples.complex.structure.SingleComplexExpression"}, new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
      case -1387468312:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.complex.structure.DegreeComplexExpression", new String[]{"jetbrains.mps.samples.complex.structure.SingleComplexExpression"}, new String[]{"jetbrains.mps.samples.complex.structure.SingleComplexExpression"}, new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
      case -928932567:
        return new StructureAspectDescriptor.DataBasedStructureDescriptor("jetbrains.mps.samples.complex.structure.ImaginaryUnit", new String[]{"jetbrains.mps.baseLanguage.structure.Expression"}, new String[]{}, new String[]{"jetbrains.mps.baseLanguage.structure.Expression"});
      default:
        return null;
    }
  }

  public static class DataBasedStructureDescriptor extends StructureDescriptor {
    private ImmutableList<String> parents;
    private Set<String> ancestors;

    public DataBasedStructureDescriptor(String fqName, String[] parents, String[] ancestorsInLanguage, String[] ancestorsNotInLanguage) {
      this.parents = ImmutableList.copyOf(parents);
      this.ancestors = getAncestors(fqName, ancestorsInLanguage, ancestorsNotInLanguage);
    }

    public Set<String> getAncestorsNames() {
      return ancestors;
    }

    public boolean isAssignableTo(String toConceptFqName) {
      return ancestors.contains(toConceptFqName);
    }

    public List<String> getParentsNames() {
      return parents;
    }

    private static Set<String> getAncestors(String conceptFqName, String[] ancestorsInLanguage, String[] ancestorsNotInLanguage) {
      Set<String> result = new HashSet(ancestorsInLanguage.length + 1);

      result.add(conceptFqName);
      for (String ancestor : ancestorsInLanguage) {
        result.add(ancestor);
      }

      ConceptRegistry registry = ConceptRegistry.getInstance();
      for (String parent : ancestorsNotInLanguage) {
        if (!(result.contains(parent))) {
          result.addAll(registry.getStructureDescriptor(parent).getAncestorsNames());
        }
      }

      return Collections.unmodifiableSet(result);
    }
  }
}
