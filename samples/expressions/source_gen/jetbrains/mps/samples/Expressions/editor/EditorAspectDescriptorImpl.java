package jetbrains.mps.samples.Expressions.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;
import jetbrains.mps.openapi.editor.style.StyleAttribute;
import java.util.Map;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {



  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0c, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new ArithmeticSimpleMathExpression_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new LogicalSimpleMathExpression_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new NotSimpleMathExpression_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new SimpleMathAssignment_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new SimpleMathBooleanConstant_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new SimpleMathBooleanType_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new SimpleMathElementType_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new SimpleMathFloatConstant_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new SimpleMathFloatType_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new SimpleMathIntegerConstant_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new SimpleMathIntegerType_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new SimpleMathLongConstant_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new SimpleMathLongType_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new SimpleMathNumberType_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new SimpleMathTypedVarDeclaration_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new SimpleMathVarDeclaration_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new SimpleMathVarReference_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new SimpleMathWrapper_Editor());
      default:
    }
    return Collections.emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    return Collections.emptyList();
  }



  public Collection<ConceptEditorHint> getHints() {
    return Collections.emptyList();
  }



  public StyleAttribute getStyleAttribute(String attributeName) {
    return null;
  }

  public Map<String, StyleAttribute> getStyleAttributes() {
    return Collections.emptyMap();
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0c = new String[]{"jetbrains.mps.samples.Expressions.structure.ArithmeticSimpleMathExpression", "jetbrains.mps.samples.Expressions.structure.LogicalSimpleMathExpression", "jetbrains.mps.samples.Expressions.structure.NotSimpleMathExpression", "jetbrains.mps.samples.Expressions.structure.SimpleMathAssignment", "jetbrains.mps.samples.Expressions.structure.SimpleMathBooleanConstant", "jetbrains.mps.samples.Expressions.structure.SimpleMathBooleanType", "jetbrains.mps.samples.Expressions.structure.SimpleMathElementType", "jetbrains.mps.samples.Expressions.structure.SimpleMathFloatConstant", "jetbrains.mps.samples.Expressions.structure.SimpleMathFloatType", "jetbrains.mps.samples.Expressions.structure.SimpleMathIntegerConstant", "jetbrains.mps.samples.Expressions.structure.SimpleMathIntegerType", "jetbrains.mps.samples.Expressions.structure.SimpleMathLongConstant", "jetbrains.mps.samples.Expressions.structure.SimpleMathLongType", "jetbrains.mps.samples.Expressions.structure.SimpleMathNumberType", "jetbrains.mps.samples.Expressions.structure.SimpleMathTypedVarDeclaration", "jetbrains.mps.samples.Expressions.structure.SimpleMathVarDeclaration", "jetbrains.mps.samples.Expressions.structure.SimpleMathVarReference", "jetbrains.mps.samples.Expressions.structure.SimpleMathWrapper"};
}
