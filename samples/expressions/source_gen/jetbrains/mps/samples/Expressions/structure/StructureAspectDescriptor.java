package jetbrains.mps.samples.Expressions.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAndSimpleMathExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.AndSimpleMathExpression").super_("jetbrains.mps.samples.Expressions.structure.LogicalSimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.LogicalSimpleMathExpression").alias("and", "").create();
  /*package*/ final ConceptDescriptor myConceptArithmeticSimpleMathExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.ArithmeticSimpleMathExpression").super_("jetbrains.mps.samples.Expressions.structure.BinarySimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.BinarySimpleMathExpression").properties("operator").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBinarySimpleMathExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.BinarySimpleMathExpression").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").children(new String[]{"left", "right"}, new boolean[]{false, false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptLogicalSimpleMathExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.LogicalSimpleMathExpression").super_("jetbrains.mps.samples.Expressions.structure.BinarySimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.BinarySimpleMathExpression").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptNotSimpleMathExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.NotSimpleMathExpression").super_("jetbrains.mps.samples.Expressions.structure.UnarySimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.UnarySimpleMathExpression").alias("not", "").create();
  /*package*/ final ConceptDescriptor myConceptOrSimpleMathExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.OrSimpleMathExpression").super_("jetbrains.mps.samples.Expressions.structure.LogicalSimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.LogicalSimpleMathExpression").alias("or", "").create();
  /*package*/ final ConceptDescriptor myConceptSimpleMathAssignment = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathAssignment").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").children(new String[]{"variable", "expression"}, new boolean[]{false, false}).alias(":=", "").create();
  /*package*/ final ConceptDescriptor myConceptSimpleMathBooleanConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathBooleanConstant").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").properties("value").create();
  /*package*/ final ConceptDescriptor myConceptSimpleMathBooleanType = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathBooleanType").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathType").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathType").alias("Bool", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSimpleMathElementType = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathElementType").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathType").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathType").alias("Element", "").create();
  /*package*/ final ConceptDescriptor myConceptSimpleMathExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptSimpleMathFloatConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathFloatConstant").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").properties("value").create();
  /*package*/ final ConceptDescriptor myConceptSimpleMathFloatType = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathFloatType").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathType").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathType").alias("Float", "").create();
  /*package*/ final ConceptDescriptor myConceptSimpleMathIntegerConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathIntegerConstant").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").properties("value").create();
  /*package*/ final ConceptDescriptor myConceptSimpleMathIntegerType = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathIntegerType").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathType").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathType").alias("Int", "").create();
  /*package*/ final ConceptDescriptor myConceptSimpleMathLongConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathLongConstant").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").properties("value").create();
  /*package*/ final ConceptDescriptor myConceptSimpleMathLongType = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathLongType").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathType").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathType").alias("Long", "").create();
  /*package*/ final ConceptDescriptor myConceptSimpleMathNumberType = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathNumberType").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathType").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathType").alias("Number", "").create();
  /*package*/ final ConceptDescriptor myConceptSimpleMathType = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathType").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptSimpleMathTypedVarDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathTypedVarDeclaration").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathVarDeclaration").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathVarDeclaration").children(new String[]{"type"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptSimpleMathVarDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathVarDeclaration").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"initializer"}, new boolean[]{false}).alias("var", "").create();
  /*package*/ final ConceptDescriptor myConceptSimpleMathVarReference = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathVarReference").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").references("declaration").create();
  /*package*/ final ConceptDescriptor myConceptSimpleMathWrapper = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathWrapper").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"expressions"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptUnarySimpleMathExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.UnarySimpleMathExpression").super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").children(new String[]{"original"}, new boolean[]{false}).abstract_().create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAndSimpleMathExpression, myConceptArithmeticSimpleMathExpression, myConceptBinarySimpleMathExpression, myConceptLogicalSimpleMathExpression, myConceptNotSimpleMathExpression, myConceptOrSimpleMathExpression, myConceptSimpleMathAssignment, myConceptSimpleMathBooleanConstant, myConceptSimpleMathBooleanType, myConceptSimpleMathElementType, myConceptSimpleMathExpression, myConceptSimpleMathFloatConstant, myConceptSimpleMathFloatType, myConceptSimpleMathIntegerConstant, myConceptSimpleMathIntegerType, myConceptSimpleMathLongConstant, myConceptSimpleMathLongType, myConceptSimpleMathNumberType, myConceptSimpleMathType, myConceptSimpleMathTypedVarDeclaration, myConceptSimpleMathVarDeclaration, myConceptSimpleMathVarReference, myConceptSimpleMathWrapper, myConceptUnarySimpleMathExpression);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0bb, conceptFqName)) {
      case 0:
        return myConceptAndSimpleMathExpression;
      case 1:
        return myConceptArithmeticSimpleMathExpression;
      case 2:
        return myConceptBinarySimpleMathExpression;
      case 3:
        return myConceptLogicalSimpleMathExpression;
      case 4:
        return myConceptNotSimpleMathExpression;
      case 5:
        return myConceptOrSimpleMathExpression;
      case 6:
        return myConceptSimpleMathAssignment;
      case 7:
        return myConceptSimpleMathBooleanConstant;
      case 8:
        return myConceptSimpleMathBooleanType;
      case 9:
        return myConceptSimpleMathElementType;
      case 10:
        return myConceptSimpleMathExpression;
      case 11:
        return myConceptSimpleMathFloatConstant;
      case 12:
        return myConceptSimpleMathFloatType;
      case 13:
        return myConceptSimpleMathIntegerConstant;
      case 14:
        return myConceptSimpleMathIntegerType;
      case 15:
        return myConceptSimpleMathLongConstant;
      case 16:
        return myConceptSimpleMathLongType;
      case 17:
        return myConceptSimpleMathNumberType;
      case 18:
        return myConceptSimpleMathType;
      case 19:
        return myConceptSimpleMathTypedVarDeclaration;
      case 20:
        return myConceptSimpleMathVarDeclaration;
      case 21:
        return myConceptSimpleMathVarReference;
      case 22:
        return myConceptSimpleMathWrapper;
      case 23:
        return myConceptUnarySimpleMathExpression;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0bb = new String[]{"jetbrains.mps.samples.Expressions.structure.AndSimpleMathExpression", "jetbrains.mps.samples.Expressions.structure.ArithmeticSimpleMathExpression", "jetbrains.mps.samples.Expressions.structure.BinarySimpleMathExpression", "jetbrains.mps.samples.Expressions.structure.LogicalSimpleMathExpression", "jetbrains.mps.samples.Expressions.structure.NotSimpleMathExpression", "jetbrains.mps.samples.Expressions.structure.OrSimpleMathExpression", "jetbrains.mps.samples.Expressions.structure.SimpleMathAssignment", "jetbrains.mps.samples.Expressions.structure.SimpleMathBooleanConstant", "jetbrains.mps.samples.Expressions.structure.SimpleMathBooleanType", "jetbrains.mps.samples.Expressions.structure.SimpleMathElementType", "jetbrains.mps.samples.Expressions.structure.SimpleMathExpression", "jetbrains.mps.samples.Expressions.structure.SimpleMathFloatConstant", "jetbrains.mps.samples.Expressions.structure.SimpleMathFloatType", "jetbrains.mps.samples.Expressions.structure.SimpleMathIntegerConstant", "jetbrains.mps.samples.Expressions.structure.SimpleMathIntegerType", "jetbrains.mps.samples.Expressions.structure.SimpleMathLongConstant", "jetbrains.mps.samples.Expressions.structure.SimpleMathLongType", "jetbrains.mps.samples.Expressions.structure.SimpleMathNumberType", "jetbrains.mps.samples.Expressions.structure.SimpleMathType", "jetbrains.mps.samples.Expressions.structure.SimpleMathTypedVarDeclaration", "jetbrains.mps.samples.Expressions.structure.SimpleMathVarDeclaration", "jetbrains.mps.samples.Expressions.structure.SimpleMathVarReference", "jetbrains.mps.samples.Expressions.structure.SimpleMathWrapper", "jetbrains.mps.samples.Expressions.structure.UnarySimpleMathExpression"};
}
