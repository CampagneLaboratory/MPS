package jetbrains.mps.samples.Expressions.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.smodel.SModelUtil_new;

public class SimpleMathBoolean_subtypeOf_Element_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  public SimpleMathBoolean_subtypeOf_Element_SubtypingRule() {
  }
  public SNode getSubOrSuperType(SNode simpleMathBooleanType, TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    return SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(new UUID(9090561219821783296l, -5934278934713809676l), 2073504467209504078l, "jetbrains.mps.samples.Expressions.structure.SimpleMathElementType")));
  }
  public String getApplicableConceptFQName() {
    return "jetbrains.mps.samples.Expressions.structure.SimpleMathBooleanType";
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }
  public boolean isWeak() {
    return false;
  }
}
