package references;

/*Generated by MPS */

import jetbrains.mps.smodel.language.LanguageRuntime;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;
import java.util.UUID;
import java.util.Collection;
import jetbrains.mps.generator.runtime.TemplateModule;
import jetbrains.mps.generator.runtime.TemplateUtil;
import jetbrains.mps.smodel.runtime.ILanguageAspect;
import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import references.editor.EditorAspectDescriptorImpl;
import jetbrains.mps.smodel.runtime.StructureAspectDescriptor;

public class Language extends LanguageRuntime {
  public static String MODULE_REF = "16100485-31ac-4899-9112-2289e22843dd(references)";
  public Language() {
  }
  @Override
  public String getNamespace() {
    return "references";
  }

  @Override
  public int getVersion() {
    return 1;
  }

  public SLanguageId getId() {
    return new SLanguageId(UUID.fromString("16100485-31ac-4899-9112-2289e22843dd"));
  }
  @Override
  protected String[] getExtendedLanguageIDs() {
    return new String[]{"declarations"};
  }
  @Override
  public Collection<TemplateModule> getGenerators() {
    return TemplateUtil.<TemplateModule>asCollection(TemplateUtil.createInterpretedGenerator(this, "0ef667a6-f215-49ca-9816-ee1f42a26168(references#1233082194732284717)"));
  }
  @Override
  protected <T extends ILanguageAspect> T createAspect(Class<T> aspectClass) {
    if (aspectClass == EditorAspectDescriptor.class) {
      return (T) new EditorAspectDescriptorImpl();
    }
    if (aspectClass == StructureAspectDescriptor.class) {
      return (T) new references.structure.StructureAspectDescriptor();
    }
    return super.createAspect(aspectClass);
  }
}
