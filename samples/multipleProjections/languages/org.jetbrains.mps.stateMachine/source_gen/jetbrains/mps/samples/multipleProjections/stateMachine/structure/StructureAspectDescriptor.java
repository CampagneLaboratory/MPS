package jetbrains.mps.samples.multipleProjections.stateMachine.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractStateMachineElement = new ConceptDescriptorBuilder("jetbrains.mps.samples.multipleProjections.stateMachine.structure.AbstractStateMachineElement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptEvent = new ConceptDescriptorBuilder("jetbrains.mps.samples.multipleProjections.stateMachine.structure.Event").super_("jetbrains.mps.samples.multipleProjections.stateMachine.structure.AbstractStateMachineElement").parents("jetbrains.mps.samples.multipleProjections.stateMachine.structure.AbstractStateMachineElement", "jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptEventReference = new ConceptDescriptorBuilder("jetbrains.mps.samples.multipleProjections.stateMachine.structure.EventReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("event").create();
  /*package*/ final ConceptDescriptor myConceptState = new ConceptDescriptorBuilder("jetbrains.mps.samples.multipleProjections.stateMachine.structure.State").super_("jetbrains.mps.samples.multipleProjections.stateMachine.structure.AbstractStateMachineElement").parents("jetbrains.mps.samples.multipleProjections.stateMachine.structure.AbstractStateMachineElement", "jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptStateMachine = new ConceptDescriptorBuilder("jetbrains.mps.samples.multipleProjections.stateMachine.structure.StateMachine").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"events", "transitions", "states"}, new boolean[]{true, true, true}).create();
  /*package*/ final ConceptDescriptor myConceptStateReference = new ConceptDescriptorBuilder("jetbrains.mps.samples.multipleProjections.stateMachine.structure.StateReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("state").create();
  /*package*/ final ConceptDescriptor myConceptTransition = new ConceptDescriptorBuilder("jetbrains.mps.samples.multipleProjections.stateMachine.structure.Transition").super_("jetbrains.mps.samples.multipleProjections.stateMachine.structure.AbstractStateMachineElement").parents("jetbrains.mps.samples.multipleProjections.stateMachine.structure.AbstractStateMachineElement").properties("condition").children(new String[]{"fromState", "toState", "trigger"}, new boolean[]{false, false, false}).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractStateMachineElement, myConceptEvent, myConceptEventReference, myConceptState, myConceptStateMachine, myConceptStateReference, myConceptTransition);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0k, conceptFqName)) {
      case 0:
        return myConceptAbstractStateMachineElement;
      case 1:
        return myConceptEvent;
      case 2:
        return myConceptEventReference;
      case 3:
        return myConceptState;
      case 4:
        return myConceptStateMachine;
      case 5:
        return myConceptStateReference;
      case 6:
        return myConceptTransition;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0k = new String[]{"jetbrains.mps.samples.multipleProjections.stateMachine.structure.AbstractStateMachineElement", "jetbrains.mps.samples.multipleProjections.stateMachine.structure.Event", "jetbrains.mps.samples.multipleProjections.stateMachine.structure.EventReference", "jetbrains.mps.samples.multipleProjections.stateMachine.structure.State", "jetbrains.mps.samples.multipleProjections.stateMachine.structure.StateMachine", "jetbrains.mps.samples.multipleProjections.stateMachine.structure.StateReference", "jetbrains.mps.samples.multipleProjections.stateMachine.structure.Transition"};
}
