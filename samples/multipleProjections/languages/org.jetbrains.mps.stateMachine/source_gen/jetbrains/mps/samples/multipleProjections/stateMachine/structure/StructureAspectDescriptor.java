package jetbrains.mps.samples.multipleProjections.stateMachine.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  public StructureAspectDescriptor() {
  }
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b, conceptFqName)) {
      case 0:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.multipleProjections.stateMachine.structure.AbstractStateMachineElement").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
      case 1:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.multipleProjections.stateMachine.structure.Event").super_("jetbrains.mps.samples.multipleProjections.stateMachine.structure.AbstractStateMachineElement").parents("jetbrains.mps.samples.multipleProjections.stateMachine.structure.AbstractStateMachineElement", "jetbrains.mps.lang.core.structure.INamedConcept").create();
      case 2:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.multipleProjections.stateMachine.structure.EventReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("event").create();
      case 3:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.multipleProjections.stateMachine.structure.State").super_("jetbrains.mps.samples.multipleProjections.stateMachine.structure.AbstractStateMachineElement").parents("jetbrains.mps.samples.multipleProjections.stateMachine.structure.AbstractStateMachineElement", "jetbrains.mps.lang.core.structure.INamedConcept").create();
      case 4:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.multipleProjections.stateMachine.structure.StateMachine").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"events", "transitions", "states"}, new boolean[]{true, true, true}).create();
      case 5:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.multipleProjections.stateMachine.structure.StateReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("state").create();
      case 6:
        return new ConceptDescriptorBuilder("jetbrains.mps.samples.multipleProjections.stateMachine.structure.Transition").super_("jetbrains.mps.samples.multipleProjections.stateMachine.structure.AbstractStateMachineElement").parents("jetbrains.mps.samples.multipleProjections.stateMachine.structure.AbstractStateMachineElement").properties("condition").children(new String[]{"fromState", "toState", "trigger"}, new boolean[]{false, false, false}).create();
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0b = new String[]{"jetbrains.mps.samples.multipleProjections.stateMachine.structure.AbstractStateMachineElement", "jetbrains.mps.samples.multipleProjections.stateMachine.structure.Event", "jetbrains.mps.samples.multipleProjections.stateMachine.structure.EventReference", "jetbrains.mps.samples.multipleProjections.stateMachine.structure.State", "jetbrains.mps.samples.multipleProjections.stateMachine.structure.StateMachine", "jetbrains.mps.samples.multipleProjections.stateMachine.structure.StateReference", "jetbrains.mps.samples.multipleProjections.stateMachine.structure.Transition"};
}
