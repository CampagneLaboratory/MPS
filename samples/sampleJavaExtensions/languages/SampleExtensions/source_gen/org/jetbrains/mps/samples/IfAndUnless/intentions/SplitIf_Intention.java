package org.jetbrains.mps.samples.IfAndUnless.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class SplitIf_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public SplitIf_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.structure.IfStatement";
  }

  public String getPresentation() {
    return "SplitIf";
  }

  public String getPersistentStateKey() {
    return "org.jetbrains.mps.samples.IfAndUnless.intentions.SplitIf_Intention";
  }

  public String getLanguageFqName() {
    return "org.jetbrains.mps.samples.IfAndUnless";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(node, "condition", true), "jetbrains.mps.baseLanguage.structure.AndExpression") && ListSequence.fromList(SLinkOperations.getTargets(node, "elsifClauses", true)).isEmpty() && SLinkOperations.getTarget(node, "ifFalseStatement", true) == null;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:c94a864e-ad51-4b38-a592-c0d7623187a1(org.jetbrains.mps.samples.IfAndUnless.intentions)", "8008559088281289910");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new SplitIf_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Split If Statement";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode andExpression = SNodeOperations.cast(SLinkOperations.getTarget(node, "condition", true), "jetbrains.mps.baseLanguage.structure.AndExpression");
      SNode left = SLinkOperations.getTarget(andExpression, "leftExpression", true);
      SNode right = SLinkOperations.getTarget(andExpression, "rightExpression", true);
      SLinkOperations.setTarget(node, "condition", right, true);
      SNode statement = SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.IfStatement", null);
      SLinkOperations.setTarget(statement, "condition", left, true);
      SNodeOperations.replaceWithAnother(node, statement);
      SLinkOperations.setTarget(statement, "ifTrue", SConceptOperations.createNewNode("jetbrains.mps.baseLanguage.structure.StatementList", null), true);
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(statement, "ifTrue", true), "statement", true)).addElement(node);
    }

    public IntentionDescriptor getDescriptor() {
      return SplitIf_Intention.this;
    }
  }
}
