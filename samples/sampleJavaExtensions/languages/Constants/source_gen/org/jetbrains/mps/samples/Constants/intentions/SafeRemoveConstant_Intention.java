package org.jetbrains.mps.samples.Constants.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class SafeRemoveConstant_Intention extends BaseIntention {
  public SafeRemoveConstant_Intention() {
  }

  public String getConcept() {
    return "org.jetbrains.mps.samples.Constants.structure.Constant";
  }

  public String getPresentation() {
    return "SafeRemoveConstant";
  }

  public String getPersistentStateKey() {
    return "org.jetbrains.mps.samples.Constants.intentions.SafeRemoveConstant_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:42e1ac37-7eb5-465e-8f7a-fef5bc98a099(org.jetbrains.mps.samples.Constants.intentions)", "3986994675334573802");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Safely Remove Constant";
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    Iterable<SNode> allReferences = ListSequence.fromList(SNodeOperations.getDescendants(SNodeOperations.getAncestor(node, "org.jetbrains.mps.samples.Constants.structure.Constants", false, false), "org.jetbrains.mps.samples.Constants.structure.ConstantReference", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "original", false) == node;
      }
    });
    Sequence.fromIterable(allReferences).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SNodeOperations.replaceWithAnother(it, SNodeOperations.copyNode(SLinkOperations.getTarget(node, "initializer", true)));
      }
    });
    SNodeOperations.deleteNode(node);
  }
}
