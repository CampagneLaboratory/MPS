package org.jetbrains.mps.samples.ParallelFor.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class DetachFromThreadPool_Intention extends BaseIntention {
  public DetachFromThreadPool_Intention() {
  }

  public String getConcept() {
    return "org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor";
  }

  public String getPresentation() {
    return "DetachFromThreadPool";
  }

  public String getPersistentStateKey() {
    return "org.jetbrains.mps.samples.ParallelFor.intentions.DetachFromThreadPool_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:400a7ce0-e668-4a1b-beb5-a02efe968606(org.jetbrains.mps.samples.ParallelFor.intentions@3_0)", "633195941006988431");
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Detach from Thread Pool";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SLinkOperations.getTarget(node, "threadPool", true) != null;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SLinkOperations.setTarget(node, "threadPool", null, true);
  }
}
