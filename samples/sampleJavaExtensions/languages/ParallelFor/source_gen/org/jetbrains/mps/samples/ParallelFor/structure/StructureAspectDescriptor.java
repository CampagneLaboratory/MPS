package org.jetbrains.mps.samples.ParallelFor.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptNonThreadSafeClass = new ConceptDescriptorBuilder("org.jetbrains.mps.samples.ParallelFor.structure.NonThreadSafeClass").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").create();
  /*package*/ final ConceptDescriptor myConceptParallelFor = new ConceptDescriptorBuilder("org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor").super_("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").parents("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement", "jetbrains.mps.baseLanguage.structure.IMethodLike", "jetbrains.mps.baseLanguage.structure.IStatementListContainer").properties("nowait").children(new String[]{"loopVariable", "inputSequence", "threadPool"}, new boolean[]{false, false, false}).alias("parallelFor", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptParallelLoopVariable = new ConceptDescriptorBuilder("org.jetbrains.mps.samples.ParallelFor.structure.ParallelLoopVariable").super_("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration").parents("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration").create();
  /*package*/ final ConceptDescriptor myConceptThreadPool = new ConceptDescriptorBuilder("org.jetbrains.mps.samples.ParallelFor.structure.ThreadPool").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("numberOfThreads").alias("thread pool", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptThreadSafe = new ConceptDescriptorBuilder("org.jetbrains.mps.samples.ParallelFor.structure.ThreadSafe").super_("jetbrains.mps.lang.core.structure.NodeAttribute").parents("jetbrains.mps.lang.core.structure.NodeAttribute").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptNonThreadSafeClass, myConceptParallelFor, myConceptParallelLoopVariable, myConceptThreadPool, myConceptThreadSafe);
  }

  @Override
  @NotNull
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0i, conceptFqName)) {
      case 0:
        return myConceptNonThreadSafeClass;
      case 1:
        return myConceptParallelFor;
      case 2:
        return myConceptParallelLoopVariable;
      case 3:
        return myConceptThreadPool;
      case 4:
        return myConceptThreadSafe;
      default:
        throw new IllegalStateException("Wrong fqName of the concept " + conceptFqName);
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0i = new String[]{"org.jetbrains.mps.samples.ParallelFor.structure.NonThreadSafeClass", "org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor", "org.jetbrains.mps.samples.ParallelFor.structure.ParallelLoopVariable", "org.jetbrains.mps.samples.ParallelFor.structure.ThreadPool", "org.jetbrains.mps.samples.ParallelFor.structure.ThreadSafe"};
}
