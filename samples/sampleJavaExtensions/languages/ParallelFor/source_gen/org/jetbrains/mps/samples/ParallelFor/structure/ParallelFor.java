package org.jetbrains.mps.samples.ParallelFor.structure;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.structure.AbstractLoopStatement;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.baseLanguage.structure.Expression;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;

public class ParallelFor extends AbstractLoopStatement {
  public static final String concept = "org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor";
  public static final String LOOP_VARIABLE = "loopVariable";
  public static final String INPUT_SEQUENCE = "inputSequence";
  public static final String THREAD_POOL = "threadPool";

  public ParallelFor(SNode node) {
    super(node);
  }

  public ParallelLoopVariable getLoopVariable() {
    return (ParallelLoopVariable) this.getChild(ParallelLoopVariable.class, ParallelFor.LOOP_VARIABLE);
  }

  public void setLoopVariable(ParallelLoopVariable node) {
    super.setChild(ParallelFor.LOOP_VARIABLE, node);
  }

  public Expression getInputSequence() {
    return (Expression) this.getChild(Expression.class, ParallelFor.INPUT_SEQUENCE);
  }

  public void setInputSequence(Expression node) {
    super.setChild(ParallelFor.INPUT_SEQUENCE, node);
  }

  public Expression getThreadPool() {
    return (Expression) this.getChild(Expression.class, ParallelFor.THREAD_POOL);
  }

  public void setThreadPool(Expression node) {
    super.setChild(ParallelFor.THREAD_POOL, node);
  }

  public static ParallelFor newInstance(SModel sm, boolean init) {
    return (ParallelFor) SModelUtil_new.instantiateConceptDeclaration("org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor", sm, GlobalScope.getInstance(), init).getAdapter();
  }

  public static ParallelFor newInstance(SModel sm) {
    return ParallelFor.newInstance(sm, false);
  }
}
