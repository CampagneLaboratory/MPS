package org.jetbrains.mps.samples.ParallelFor.dataFlow;

/*Generated by MPS */

import jetbrains.mps.lang.dataFlow.DataFlowBuilder;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.dataFlow.DataFlowBuilderContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class ParallelFor_DataFlow extends DataFlowBuilder {
  public ParallelFor_DataFlow() {
  }

  public void build(final IOperationContext operationContext, final DataFlowBuilderContext _context) {
    _context.getBuilder().build((SNode) SLinkOperations.getTarget(_context.getNode(), "loopVariable", true));
    _context.getBuilder().build((SNode) SLinkOperations.getTarget(_context.getNode(), "inputSequence", true));
    if (SLinkOperations.getTarget(_context.getNode(), "threadPool", true) != null) {
      _context.getBuilder().build((SNode) SLinkOperations.getTarget(_context.getNode(), "threadPool", true));
      _context.getBuilder().emitRead(SLinkOperations.getTarget(_context.getNode(), "threadPool", true));
    }
    _context.getBuilder().emitLabel("loop");
    _context.getBuilder().emitWrite(SLinkOperations.getTarget(_context.getNode(), "loopVariable", true), SLinkOperations.getTarget(_context.getNode(), "inputSequence", true));
    _context.getBuilder().emitIfJump(_context.getBuilder().after(_context.getNode()));
    _context.getBuilder().build((SNode) SLinkOperations.getTarget(_context.getNode(), "body", true));
    _context.getBuilder().emitIfJump(_context.getBuilder().label(_context.getNode(), "loop"));
  }
}
