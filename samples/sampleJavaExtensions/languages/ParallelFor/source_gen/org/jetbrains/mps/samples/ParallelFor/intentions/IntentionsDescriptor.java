package org.jetbrains.mps.samples.ParallelFor.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionAspectBase;
import jetbrains.mps.intentions.IntentionFactory;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;
import jetbrains.mps.intentions.IntentionsManager;

public final class IntentionsDescriptor extends IntentionAspectBase {
  private final long[] myId2Index;
  private IntentionFactory[] myIntentions0;
  private IntentionFactory[] myIntentions1;
  private IntentionFactory[] myIntentions2;
  private IntentionFactory[] myIntentions3;
  private IntentionFactory[] myIntentions4;
  private IntentionFactory[] myIntentions5;
  private IntentionFactory[] myIntentions6;

  public IntentionsDescriptor() {
    myId2Index = new long[7];
    myId2Index[0] = 0xf8c108ca66L;
    myId2Index[1] = 0xf8c37a7f6eL;
    myId2Index[2] = 0xfbbebabf09L;
    myId2Index[3] = 0x10cac65f399L;
    myId2Index[4] = 0x116b46a08c4L;
    myId2Index[5] = 0x6c6b6a1e379f9404L;
    myId2Index[6] = 0x7bd8445d1e8770aaL;
  }

  @Override
  @Nullable
  public Collection<IntentionFactory> getIntentions(@NotNull SConceptId conceptId) {
    final int index = Arrays.binarySearch(myId2Index, conceptId.getIdValue());
    switch (index) {
      case 0:
        // Concept: ClassConcept 
        if (myIntentions0 == null) {
          myIntentions0 = new IntentionFactory[4];
          myIntentions0[0] = new MarkAsThreadSafe_Intention();
          myIntentions0[1] = new UnmarkAsThreadSafe_Intention();
          myIntentions0[2] = new MarkAsNonThreadSafe_Intention();
          myIntentions0[3] = new UnmarkAsNonThreadSafe_Intention();
        }
        return Arrays.asList(myIntentions0);
      case 1:
        // Concept: VariableDeclaration 
        if (myIntentions1 == null) {
          myIntentions1 = new IntentionFactory[2];
          myIntentions1[0] = new MarkVariableDeclarationAsThreadSafe_Intention();
          myIntentions1[1] = new UnmarkVariableAsThreadSafe_Intention();
        }
        return Arrays.asList(myIntentions1);
      case 2:
        // Concept: StaticMethodCall 
        if (myIntentions2 == null) {
          myIntentions2 = new IntentionFactory[2];
          myIntentions2[0] = new MarkStaticMethodCallAsThreadSafe_Intention();
          myIntentions2[1] = new UnmarkStaticMethodCallAsThreadSafe_Intention();
        }
        return Arrays.asList(myIntentions2);
      case 3:
        // Concept: ForEachStatement 
        if (myIntentions3 == null) {
          myIntentions3 = new IntentionFactory[1];
          myIntentions3[0] = new TurnToParallelForEachStatement_Intention();
        }
        return Arrays.asList(myIntentions3);
      case 4:
        // Concept: DotExpression 
        if (myIntentions4 == null) {
          myIntentions4 = new IntentionFactory[2];
          myIntentions4[0] = new MarkInstanceMethodCallAsThreadSafe_Intention();
          myIntentions4[1] = new UnmarkInstanceMethodCallAsThreadSafe_Intention();
        }
        return Arrays.asList(myIntentions4);
      case 5:
        // Concept: LocalMethodCall 
        if (myIntentions5 == null) {
          myIntentions5 = new IntentionFactory[4];
          myIntentions5[0] = new MarkLocalStaticMethodCallAsThreadSafe_Intention();
          myIntentions5[1] = new UnmarkLocalStaticMethodCallAsThreadSafe_Intention();
          myIntentions5[2] = new UnmarkLocalInstanceMethodCallAsThreadSafe_Intention();
          myIntentions5[3] = new MarkLocalInstanceMethodCallAsThreadSafe_Intention();
        }
        return Arrays.asList(myIntentions5);
      case 6:
        // Concept: ParallelFor 
        if (myIntentions6 == null) {
          myIntentions6 = new IntentionFactory[2];
          myIntentions6[0] = new DetachFromThreadPool_Intention();
          myIntentions6[1] = new TurnToForEachStatement_Intention();
        }
        return Arrays.asList(myIntentions6);
      default:
        return null;
    }
  }

  public void init() {
    IntentionsManager.getInstance().registerIntentionFactory(new DetachFromThreadPool_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new MarkAsNonThreadSafe_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new MarkAsThreadSafe_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new MarkInstanceMethodCallAsThreadSafe_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new MarkLocalInstanceMethodCallAsThreadSafe_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new MarkLocalStaticMethodCallAsThreadSafe_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new MarkStaticMethodCallAsThreadSafe_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new MarkVariableDeclarationAsThreadSafe_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new TurnToForEachStatement_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new TurnToParallelForEachStatement_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new UnmarkAsNonThreadSafe_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new UnmarkAsThreadSafe_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new UnmarkInstanceMethodCallAsThreadSafe_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new UnmarkLocalInstanceMethodCallAsThreadSafe_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new UnmarkLocalStaticMethodCallAsThreadSafe_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new UnmarkStaticMethodCallAsThreadSafe_Intention());
    IntentionsManager.getInstance().registerIntentionFactory(new UnmarkVariableAsThreadSafe_Intention());
  }
}
