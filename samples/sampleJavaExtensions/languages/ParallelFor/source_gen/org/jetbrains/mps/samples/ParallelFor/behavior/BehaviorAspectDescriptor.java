package org.jetbrains.mps.samples.ParallelFor.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myThreadSafe__BehaviorDescriptor = new ThreadSafe__BehaviorDescriptor();
  private final BHDescriptor myNonThreadSafeClass__BehaviorDescriptor = new NonThreadSafeClass__BehaviorDescriptor();
  private final BHDescriptor myParallelFor__BehaviorDescriptor = new ParallelFor__BehaviorDescriptor();

  private final long[] myConceptBehaviorIds;

  public BehaviorAspectDescriptor() {
    myConceptBehaviorIds = new long[3];
    myConceptBehaviorIds[0] = 0x294c1cd4b84332e6L;
    myConceptBehaviorIds[1] = 0x294c1cd4b8450380L;
    myConceptBehaviorIds[2] = 0x7bd8445d1e8770aaL;
  }

  @Deprecated
  @Override
  public BehaviorDescriptor getDescriptor(String fqName) {
    return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
  }

  @Nullable
  @Override
  public BHDescriptor getDescriptor(@NotNull SConceptId conceptId) {
    int behaviorIndex = Arrays.binarySearch(myConceptBehaviorIds, conceptId.getIdValue());
    switch (behaviorIndex) {
      case 0:
        return myThreadSafe__BehaviorDescriptor;
      case 1:
        return myNonThreadSafeClass__BehaviorDescriptor;
      case 2:
        return myParallelFor__BehaviorDescriptor;
      default:
        return null;
    }
  }
}
