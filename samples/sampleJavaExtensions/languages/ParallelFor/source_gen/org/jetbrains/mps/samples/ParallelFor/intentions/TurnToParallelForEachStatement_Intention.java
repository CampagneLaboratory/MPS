package org.jetbrains.mps.samples.ParallelFor.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.intentions.IntentionDescriptor;

public class TurnToParallelForEachStatement_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public TurnToParallelForEachStatement_Intention() {
  }

  public String getConcept() {
    return "jetbrains.mps.baseLanguage.collections.structure.ForEachStatement";
  }

  public String getPresentation() {
    return "TurnToParallelForEachStatement";
  }

  public String getPersistentStateKey() {
    return "org.jetbrains.mps.samples.ParallelFor.intentions.TurnToParallelForEachStatement_Intention";
  }

  public String getLanguageFqName() {
    return "jetbrains.mps.lang.intentions";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node, "variable", true)), "jetbrains.mps.baseLanguage.structure.Type");
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:2614090b-4018-4457-8ad5-c503bc8936fb(org.jetbrains.mps.samples.ParallelFor.intentions)", "5384012304952529816");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new TurnToParallelForEachStatement_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Turn to Parallel";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SNode parallelFor = SNodeFactoryOperations.createNewNode("org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor", null);
      final SNode variable = SNodeFactoryOperations.createNewNode("org.jetbrains.mps.samples.ParallelFor.structure.ParallelLoopVariable", null);
      SPropertyOperations.set(variable, "name", SPropertyOperations.getString(SLinkOperations.getTarget(node, "variable", true), "name"));
      SLinkOperations.setTarget(variable, "type", SNodeOperations.copyNode(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(node, "variable", true)), "jetbrains.mps.baseLanguage.structure.Type")), true);
      SLinkOperations.setTarget(parallelFor, "loopVariable", variable, true);
      SLinkOperations.setTarget(parallelFor, "inputSequence", SLinkOperations.getTarget(node, "inputSequence", true), true);
      ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(node, "body", true), "jetbrains.mps.baseLanguage.collections.structure.ForEachVariableReference", false, new String[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SLinkOperations.getTarget(it, "variable", false) == SLinkOperations.getTarget(node, "variable", true);
        }
      }).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          SNode newReference = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.structure.VariableReference", null);
          SLinkOperations.setTarget(newReference, "variableDeclaration", variable, false);
          SNodeOperations.replaceWithAnother(it, newReference);
        }
      });
      SLinkOperations.setTarget(parallelFor, "body", SLinkOperations.getTarget(node, "body", true), true);
      SNodeOperations.replaceWithAnother(node, parallelFor);
      editorContext.selectWRTFocusPolicy(variable);
    }

    public IntentionDescriptor getDescriptor() {
      return TurnToParallelForEachStatement_Intention.this;
    }
  }
}
