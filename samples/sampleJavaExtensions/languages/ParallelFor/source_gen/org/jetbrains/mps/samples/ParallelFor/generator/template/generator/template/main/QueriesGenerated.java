package org.jetbrains.mps.samples.ParallelFor.generator.template.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.generator.template.IfMacroContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.baseLanguage.behavior.StatementList_Behavior;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class QueriesGenerated {
  public static boolean baseMappingRule_Condition_8923957828369629274(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "variableDeclaration", false), "org.jetbrains.mps.samples.ParallelFor.structure.ParallelLoopVariable");
  }

  public static Object propertyMacro_GetPropertyValue_5337045848190803509(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return _context.createUniqueName("latch", null);
  }

  public static Object propertyMacro_GetPropertyValue_5337045848190803543(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return _context.createUniqueName("exceptions", null);
  }

  public static Object propertyMacro_GetPropertyValue_633195941006880942(final IOperationContext operationContext, final PropertyMacroContext _context) {
    if (!(SPropertyOperations.getBoolean(SLinkOperations.getTarget(_context.getNode(), "loopVariable", true), "isFinal"))) {
      _context.showErrorMessage(SLinkOperations.getTarget(_context.getNode(), "loopVariable", true), "The loop variable must be final");
    }

    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), "loopVariable", true), "name");
  }

  public static Object propertyMacro_GetPropertyValue_633195941006945119(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getInteger(_context.getNode(), "numberOfThreads");
  }

  public static Object referenceMacro_GetReferent_5337045848190718664(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return _context.getNode();
  }

  public static Object referenceMacro_GetReferent_7793246093815939787(final IOperationContext operationContext, final ReferenceMacroContext _context) {
    return "localA";
  }

  public static boolean ifMacro_Condition_8374756414439004441(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(SPropertyOperations.getBoolean(_context.getNode(), "nowait"));
  }

  public static boolean ifMacro_Condition_8374756414439004406(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(SPropertyOperations.getBoolean(_context.getNode(), "nowait"));
  }

  public static boolean ifMacro_Condition_633195941006966360(final IOperationContext operationContext, final IfMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "threadPool", true) == null;
  }

  public static boolean ifMacro_Condition_633195941006966388(final IOperationContext operationContext, final IfMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "threadPool", true) != null;
  }

  public static boolean ifMacro_Condition_8374756414438972401(final IOperationContext operationContext, final IfMacroContext _context) {
    return !(SPropertyOperations.getBoolean(_context.getNode(), "nowait"));
  }

  public static SNode sourceNodeQuery_8923957828369611237(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "inputSequence", true);
  }

  public static SNode sourceNodeQuery_633195941006833439(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "loopVariable", true));
  }

  public static SNode sourceNodeQuery_4659204813808539958(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "threadPool", true);
  }

  public static SNode sourceNodeQuery_633195941006880920(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "loopVariable", true));
  }

  public static SNode sourceNodeQuery_633195941006886814(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), "loopVariable", true));
  }

  public static SNode sourceNodeQuery_8923957828369599153(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "inputSequence", true);
  }

  public static Iterable sourceNodesQuery_633195941006921760(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getTargets(SLinkOperations.getTarget(_context.getNode(), "body", true), "statement", true);
  }

  public static Iterable sourceNodesQuery_5337045848190669725(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return SetSequence.fromSet(StatementList_Behavior.call_uncaughtThrowables_3331512479731115649(SLinkOperations.getTarget(_context.getNode(), "body", true), false)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return it != SNodeOperations.getNode("f:java_stub#6354ebe7-c22a-4a0f-ac54-50b52ab9b065#java.lang(JDK/java.lang@java_stub)", "~RuntimeException");
      }
    }).toListSequence();
  }
}
