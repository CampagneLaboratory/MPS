package org.jetbrains.mps.samples.ParallelFor.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.lang.scopes.runtime.ScopeUtils;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.scopes.Scopes;
import jetbrains.mps.lang.core.behavior.ScopeProvider_Behavior;

public class ParallelFor_Behavior {
  public static void init(SNode thisNode) {
  }

  public static Scope virtual_getScope_3734116213129936182(SNode thisNode, SNode kind, SNode child) {
    if (SConceptOperations.isSubConceptOf(kind, "jetbrains.mps.baseLanguage.structure.IVariableDeclaration")) {
      List<SNode> variables = new ArrayList<SNode>();
      if (!(ScopeUtils.comeFrom("loopVariable", thisNode, child))) {
        ListSequence.fromList(variables).addElement(SLinkOperations.getTarget(thisNode, "loopVariable", true));
      }
      return Scopes.forVariables(kind, variables, ScopeUtils.lazyParentScope(thisNode, kind));
    }

    return ScopeProvider_Behavior.callSuper_getScope_3734116213129936182(thisNode, "org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor", kind, child);
  }
}
