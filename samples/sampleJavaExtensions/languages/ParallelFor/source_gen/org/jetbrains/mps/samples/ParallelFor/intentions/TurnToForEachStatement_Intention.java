package org.jetbrains.mps.samples.ParallelFor.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class TurnToForEachStatement_Intention extends BaseIntention implements Intention {
  public TurnToForEachStatement_Intention() {
  }

  public String getConcept() {
    return "org.jetbrains.mps.samples.ParallelFor.structure.ParallelFor";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Turn to Sequential";
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode forStatement = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.ForEachStatement", null);
    final SNode variable = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.ForEachVariable", null);
    SPropertyOperations.set(variable, "name", SPropertyOperations.getString(SLinkOperations.getTarget(node, "loopVariable", true), "name"));
    SLinkOperations.setTarget(forStatement, "variable", variable, true);
    SLinkOperations.setTarget(forStatement, "inputSequence", SLinkOperations.getTarget(node, "inputSequence", true), true);
    ListSequence.fromList(SNodeOperations.getDescendants(SLinkOperations.getTarget(node, "body", true), "jetbrains.mps.baseLanguage.structure.LocalVariableReference", false, new String[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "variableDeclaration", false) == SLinkOperations.getTarget(node, "loopVariable", true);
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SNode newReference = SNodeFactoryOperations.createNewNode("jetbrains.mps.baseLanguage.collections.structure.ForEachVariableReference", null);
        SLinkOperations.setTarget(newReference, "variable", variable, false);
        SNodeOperations.replaceWithAnother(it, newReference);
      }
    });
    SLinkOperations.setTarget(forStatement, "body", SLinkOperations.getTarget(node, "body", true), true);
    SNodeOperations.replaceWithAnother(node, forStatement);
  }

  public String getLocationString() {
    return "org.jetbrains.mps.samples.ParallelFor.intentions";
  }
}
