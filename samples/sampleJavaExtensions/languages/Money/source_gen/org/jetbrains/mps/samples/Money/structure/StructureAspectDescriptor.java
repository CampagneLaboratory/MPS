package org.jetbrains.mps.samples.Money.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptConvertTo = new ConceptDescriptorBuilder("org.jetbrains.mps.samples.Money.structure.ConvertTo").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").properties("targetCurrency").alias("convert to", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCurrencyDefTable = new ConceptDescriptorBuilder("org.jetbrains.mps.samples.Money.structure.CurrencyDefTable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"units"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptCurrencyUnit = new ConceptDescriptorBuilder("org.jetbrains.mps.samples.Money.structure.CurrencyUnit").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptCurrentStockPrice = new ConceptDescriptorBuilder("org.jetbrains.mps.samples.Money.structure.CurrentStockPrice").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"symbol"}, new boolean[]{false}).alias("current stock price", "").create();
  /*package*/ final ConceptDescriptor myConceptGetAmount = new ConceptDescriptorBuilder("org.jetbrains.mps.samples.Money.structure.GetAmount").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").alias("amount", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGetCurrency = new ConceptDescriptorBuilder("org.jetbrains.mps.samples.Money.structure.GetCurrency").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").alias("currency", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMoneyLiteral = new ConceptDescriptorBuilder("org.jetbrains.mps.samples.Money.structure.MoneyLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("amount").references("unit").alias("money", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMoneyType = new ConceptDescriptorBuilder("org.jetbrains.mps.samples.Money.structure.MoneyType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").alias("Money", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMovingAverage = new ConceptDescriptorBuilder("org.jetbrains.mps.samples.Money.structure.MovingAverage").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").properties("period").children(new String[]{"symbol"}, new boolean[]{false}).alias("moving average", "").create();
  /*package*/ final ConceptDescriptor myConceptStockSymbol = new ConceptDescriptorBuilder("org.jetbrains.mps.samples.Money.structure.StockSymbol").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("symbol").alias("symbol", "").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptConvertTo, myConceptCurrencyDefTable, myConceptCurrencyUnit, myConceptCurrentStockPrice, myConceptGetAmount, myConceptGetCurrency, myConceptMoneyLiteral, myConceptMoneyType, myConceptMovingAverage, myConceptStockSymbol);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0n, conceptFqName)) {
      case 0:
        return myConceptConvertTo;
      case 1:
        return myConceptCurrencyDefTable;
      case 2:
        return myConceptCurrencyUnit;
      case 3:
        return myConceptCurrentStockPrice;
      case 4:
        return myConceptGetAmount;
      case 5:
        return myConceptGetCurrency;
      case 6:
        return myConceptMoneyLiteral;
      case 7:
        return myConceptMoneyType;
      case 8:
        return myConceptMovingAverage;
      case 9:
        return myConceptStockSymbol;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0n = new String[]{"org.jetbrains.mps.samples.Money.structure.ConvertTo", "org.jetbrains.mps.samples.Money.structure.CurrencyDefTable", "org.jetbrains.mps.samples.Money.structure.CurrencyUnit", "org.jetbrains.mps.samples.Money.structure.CurrentStockPrice", "org.jetbrains.mps.samples.Money.structure.GetAmount", "org.jetbrains.mps.samples.Money.structure.GetCurrency", "org.jetbrains.mps.samples.Money.structure.MoneyLiteral", "org.jetbrains.mps.samples.Money.structure.MoneyType", "org.jetbrains.mps.samples.Money.structure.MovingAverage", "org.jetbrains.mps.samples.Money.structure.StockSymbol"};
}
