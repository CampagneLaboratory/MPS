package org.jetbrains.mps.samples.Money.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;

public class MoneyLiteral_Behavior {
  public static void init(SNode thisNode) {
  }
  public static String virtual_getVariableExpectedName_1213877519781(SNode thisNode) {
    String text = MoneyLiteral_Behavior.call_convertAmountAdvanced_595452003767176013(thisNode, SPropertyOperations.getInteger(thisNode, MetaAdapterFactory.getProperty(new UUID(7361871549399452950l, -7685266567827134434l), 5447719361346490674l, 5447719361346490755l, "amount")));
    text += NameUtil.pluralize(NameUtil.capitalize(NameUtil.decapitalize(SPropertyOperations.getString(SLinkOperations.getTarget(thisNode, MetaAdapterFactory.getReferenceLink(new UUID(7361871549399452950l, -7685266567827134434l), 5447719361346490674l, 3607579524910560680l, "unit")), MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name")))));
    return text;
  }
  public static String call_convertAmountAdvanced_595452003767176013(SNode thisNode, final int amount) {
    Map<Integer, String> smallConversion = MapSequence.<Integer, String>fromMapAndKeysArray(new HashMap<Integer, String>(), 1, 2, 3, 4, 5, 6, 7, 8, 9, 10).withValues("one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten");
    Map<Integer, String> mediumConversion = MapSequence.<Integer, String>fromMapAndKeysArray(new HashMap<Integer, String>(), 11, 12, 13, 14, 15, 16, 17, 18, 19).withValues("eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen");
    Map<Integer, String> tensConversion = MapSequence.<Integer, String>fromMapAndKeysArray(new HashMap<Integer, String>(), 20, 30, 40, 50, 60, 70, 80, 90).withValues("twenty", "thirty", "fourty", "fifty", "sixty", "seventy", "eighty", "ninety");
    String text;
    if (amount > 0 && amount <= 10) {
      return MapSequence.fromMap(smallConversion).get(amount);
    }
    if (amount > 10 && amount < 20) {
      return MapSequence.fromMap(mediumConversion).get(amount);
    }
    if (amount >= 20 && amount < 100) {
      int mod = amount % 10;
      text = MapSequence.fromMap(tensConversion).get(amount - mod);
      if (mod > 0) {
        text += NameUtil.capitalize(MapSequence.fromMap(smallConversion).get(mod));
      }
      return text;
    }
    return "my" + amount;
  }
}
