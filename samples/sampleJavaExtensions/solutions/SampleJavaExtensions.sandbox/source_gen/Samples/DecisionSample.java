package Samples;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;

public class DecisionSample {
  public DecisionSample() {
  }

  public void run(String[] args) {
    Map<String, Object> person = this.createPerson();

    // A decision table gets translated into a series of nested "if" statements 
    // A table can be manipulated just like any other expression - try selecting one and invoke e.g. "Extract Method" 

    String title = decisionTable_1dgfoj_a0f0a(person);
    System.out.println("The title is: " + title);


    // The cells in a table may contain more complex expressions 

    int discount;
    discount = create(person);


    System.out.println("Your name: " + MapSequence.fromMap(person).get("name"));
    System.out.println("Your discount: " + discount);

    // type "dectab" and Control + Space to create a new table 

  }

  private int create(Map<String, Object> person) {
    return decisionTable_1dgfoj_a0a1(person);
  }

  private int seasonalBonus() {
    return 10;
  }

  private Map<String, Object> createPerson() {
    Map<String, Object> person = MapSequence.fromMap(new HashMap<String, Object>());
    MapSequence.fromMap(person).put("name", "Joe");
    MapSequence.fromMap(person).put("age", 29);
    MapSequence.fromMap(person).put("gender", "male");
    return person;
  }

  public String decisionTable_1dgfoj_a0f0a(Map<String, Object> person) {
    if (isMale(person)) {
      if (isChild(person)) {
        return "boy";
      }
      if (isAdult(person)) {
        return "man";
      }
    }
    if (isFemale(person)) {
      if (isChild(person)) {
        return "girl";
      }
      if (isAdult(person)) {
        return "woman";
      }
    }
    return "Nothing to show here";
  }

  public int decisionTable_1dgfoj_a0a1(Map<String, Object> person) {
    if (isMale(person)) {
      if (isBaby(person)) {
        return 100;
      }
      if (isChild(person)) {
        return 50;
      }
      if (isAdult(person)) {
        return 5 + 2 * this.seasonalBonus();
      }
      if (isRetired(person)) {
        return 20;
      }
    }
    if (isFemale(person)) {
      if (isBaby(person)) {
        return 100;
      }
      if (isChild(person)) {
        return 50;
      }
      if (isAdult(person)) {
        return 10 + this.seasonalBonus();
      }
      if (isRetired(person)) {
        return 10 + ((MapSequence.fromMap(person).get("name") == "Susan") ?
          this.seasonalBonus() :
          40
        );
      }
    }
    return 0;
  }

  public static boolean isBaby(Map<String, Object> person) {
    return (Integer) MapSequence.fromMap(person).get("age") <= 2;
  }

  public static boolean isChild(Map<String, Object> person) {
    return (Integer) MapSequence.fromMap(person).get("age") < 18 && (Integer) MapSequence.fromMap(person).get("age") > 2;
  }

  public static boolean isAdult(Map<String, Object> person) {
    return (Integer) MapSequence.fromMap(person).get("age") <= 60 && (Integer) MapSequence.fromMap(person).get("age") >= 18;
  }

  public static boolean isRetired(Map<String, Object> person) {
    return (Integer) MapSequence.fromMap(person).get("age") > 60;
  }

  public static boolean isMale(Map<String, Object> person) {
    if ((String) MapSequence.fromMap(person).get("gender") == "male") {
      return true;
    }
    return false;
  }

  public static boolean isFemale(Map<String, Object> person) {
    return !(isMale(person));
  }

  public static void main(String[] args) {
    new DecisionSample().run(args);
  }
}
