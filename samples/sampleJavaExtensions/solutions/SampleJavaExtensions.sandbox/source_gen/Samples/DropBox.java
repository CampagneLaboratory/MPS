package Samples;

/*Generated by MPS */

import java.util.concurrent.CountDownLatch;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ArrayUtils;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import utils.ParallelLoopException;

public final class DropBox<T> {
  private T storage;

  public DropBox() {
    // Use Alt+Enter on the class name to mark it as thread-safe or non-thread-safe 
    // The see the effect it has on the error/warning reporting in the ThreadSafeSample class 
  }

  public synchronized void store(T value) throws InterruptedException {
    while (storage != null) {
      this.wait();
    }
    storage = value;
    this.notify();
  }

  public synchronized T retrieve() throws InterruptedException {
    while (storage == null) {
      this.wait();
    }
    T pom = storage;
    storage = null;
    this.notify();
    {
      final CountDownLatch latch_e0b = new CountDownLatch(Sequence.fromIterable(ArrayUtils.fromIntegerArray(new int[10])).count());
      final List<Exception> exceptions_e0b = new CopyOnWriteArrayList<Exception>();

      for (final int a : ArrayUtils.fromIntegerArray(new int[10])) {

        final int localA = a;

        final Runnable runnable = new Runnable() {
          public void run() {
            try {
              System.out.println("");
            } catch (RuntimeException e) {
              ListSequence.fromList(exceptions_e0b).addElement(e);
            } finally {
              latch_e0b.countDown();
            }
          }
        };

        new Thread(runnable).start();

      }
      try {
        latch_e0b.await();
      } catch (InterruptedException e) {
        ListSequence.fromList(exceptions_e0b).addElement(e);
      }
      if (ListSequence.fromList(exceptions_e0b).isNotEmpty()) {
        throw new ParallelLoopException("Some parallel calculations failed", exceptions_e0b);
      }

    }

    return pom;
  }
}
