package jetbrains.mps.samples.matrixLanguage.helgins;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.BaseIntentionProvider;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_MatrixAddExpression_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {

  public typeof_MatrixAddExpression_InferenceRule() {
  }

  public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext) {
    final SNode v_typevar_1215411668136 = typeCheckingContext.createNewRuntimeTypesVariable();
    {
      final SNode left = SLinkOperations.getTarget(nodeToCheck, "leftExpression", true);
      typeCheckingContext.whenConcrete(left, new Runnable() {

        public void run() {
          {
            final SNode right = SLinkOperations.getTarget(nodeToCheck, "rightExpression", true);
            typeCheckingContext.whenConcrete(right, new Runnable() {

              public void run() {
                {
                  SNode _nodeToCheck_1029348928467 = nodeToCheck;
                  BaseIntentionProvider intentionProvider = null;
                  typeCheckingContext.createEquation(typeCheckingContext.typeOf(nodeToCheck, "r:00000000-0000-4000-0000-011c89590452(jetbrains.mps.samples.matrixLanguage.helgins)", "1215411640551", true), typeCheckingContext.getEquationManager().getRepresentator(v_typevar_1215411668136), _nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590452(jetbrains.mps.samples.matrixLanguage.helgins)", "1215411640547", intentionProvider);
                }
                {
                  SNode _nodeToCheck_1029348928467 = nodeToCheck;
                  BaseIntentionProvider intentionProvider = null;
                  typeCheckingContext.createEquation(typeCheckingContext.typeOf(typeCheckingContext.getEquationManager().getRepresentator(left), "r:00000000-0000-4000-0000-011c89590452(jetbrains.mps.samples.matrixLanguage.helgins)", "1215411640557", true), typeCheckingContext.getEquationManager().getRepresentator(v_typevar_1215411668136), _nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590452(jetbrains.mps.samples.matrixLanguage.helgins)", "1215411640553", intentionProvider);
                }
                {
                  SNode _nodeToCheck_1029348928467 = nodeToCheck;
                  BaseIntentionProvider intentionProvider = null;
                  typeCheckingContext.createEquation(typeCheckingContext.typeOf(typeCheckingContext.getEquationManager().getRepresentator(right), "r:00000000-0000-4000-0000-011c89590452(jetbrains.mps.samples.matrixLanguage.helgins)", "1215411640565", true), typeCheckingContext.getEquationManager().getRepresentator(v_typevar_1215411668136), _nodeToCheck_1029348928467, null, "r:00000000-0000-4000-0000-011c89590452(jetbrains.mps.samples.matrixLanguage.helgins)", "1215411640561", intentionProvider);
                }
              }

            }, "r:00000000-0000-4000-0000-011c89590452(jetbrains.mps.samples.matrixLanguage.helgins)", "1215411596973");
          }
        }

      }, "r:00000000-0000-4000-0000-011c89590452(jetbrains.mps.samples.matrixLanguage.helgins)", "1215411450860");
    }
    {
      final SNode type = typeCheckingContext.getEquationManager().getRepresentator(v_typevar_1215411668136);
      typeCheckingContext.whenConcrete(type, new Runnable() {

        public void run() {
          if (!(SNodeOperations.isInstanceOf(typeCheckingContext.getEquationManager().getRepresentator(type), "jetbrains.mps.samples.matrixLanguage.structure.MatrixType"))) {
            {
              BaseIntentionProvider intentionProvider = null;
              typeCheckingContext.reportTypeError(nodeToCheck, "Should be matrix, but " + SNodeOperations.getConceptDeclaration(typeCheckingContext.getEquationManager().getRepresentator(v_typevar_1215411668136)), "r:00000000-0000-4000-0000-011c89590452(jetbrains.mps.samples.matrixLanguage.helgins)", "1210175079706", intentionProvider);
            }
          }
        }

      }, "r:00000000-0000-4000-0000-011c89590452(jetbrains.mps.samples.matrixLanguage.helgins)", "1210175079702");
    }
  }

  public String getApplicableConceptFQName() {
    return "jetbrains.mps.samples.matrixLanguage.structure.MatrixAddExpression";
  }

  public boolean isApplicable(SNode argument) {
    return SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
  }

  public boolean overrides() {
    return false;
  }

}
