package jetbrains.mps.samples.secretCompartmentLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.editor.cellProviders.RefCellCellProvider;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.nodeEditor.cellMenu.DefaultReferenceSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class StateMachineTestMethod_Editor extends DefaultNodeEditor {

  /* package */AbstractCellListHandler myListHandler_1197255836498;

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createCollection1197252733008(context, node);
  }

  public EditorCell createCollection1197252733008(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_11972527330081197252733008(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createCollection1197252751182(context, node));
    editorCell.addEditorCell(this.createCollection1197255237349(context, node));
    return editorCell;
  }

  public EditorCell createCollection1197252751182(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_11972527511821197252751182(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1197252754699(context, node, "test"));
    editorCell.addEditorCell(this.createProperty1197252776280(context, node));
    return editorCell;
  }

  public EditorCell createCollection1197255237349(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_11972552373491197255237349(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1197255237350(context, node, "  "));
    editorCell.addEditorCell(this.createCollection1197255247430(context, node));
    return editorCell;
  }

  public EditorCell createCollection1197255247430(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_11972552474301197255247430(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createRefNodeList1197255836498(context, node));
    editorCell.addEditorCell(this.createCollection1197255254588(context, node));
    return editorCell;
  }

  public EditorCell createCollection1197255254588(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_11972552545881197255254588(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createConstant1197255256200(context, node, "final state:"));
    editorCell.addEditorCell(this.createRefCell1197255262342(context, node));
    return editorCell;
  }

  public EditorCell createConstant1197252754699(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11972527546991197252754699(editorCell, node, context);
    setupLabel_Constant_1197252754699_1197252754699(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1197255237350(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11972552373501197255237350(editorCell, node, context);
    setupLabel_Constant_1197255237350_1197255237350(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1197255256200(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11972552562001197255256200(editorCell, node, context);
    setupLabel_Constant_1197255256200_1197255256200(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createRefNodeList1197255836498(EditorContext context, SNode node) {
    if (this.myListHandler_1197255836498 == null) {
      this.myListHandler_1197255836498 = new StateMachineTestMethod_Editor.handleEventListHandler_2653_0(node, "handleEvent", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1197255836498.createCells(context, new CellLayout_Vertical(), false);
    setupBasic_refNodeList_handleEvent1197255836498(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.setRole(this.myListHandler_1197255836498.getElementRole());
    return editorCell;
  }

  public EditorCell createProperty1197252776280_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(null);
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_property_methodName1197252776280(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_property_methodName_1197252776280((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createProperty1197252776280(EditorContext context, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, context);
    provider.setRole("methodName");
    provider.setNoTargetText("<no methodName>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createProperty1197252776280_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }

  public EditorCell createRefCell1197255262342_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(new StateMachineTestMethod_Editor._Inline2653_0());
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refCell_finalState1197255262342(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refCell_finalState_1197255262342((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefCell1197255262342(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, context);
    provider.setRole("finalState");
    provider.setNoTargetText("<no finalState>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefCell1197255262342_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }


  private static void setupBasic_Collection_11972527330081197252733008(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1197252733008");
  }

  private static void setupBasic_Collection_11972527511821197252751182(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1197252751182");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Constant_11972527546991197252754699(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1197252754699");
  }

  private static void setupBasic_property_methodName1197252776280(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("property_methodName");
  }

  private static void setupBasic_Collection_11972552373491197255237349(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1197255237349");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Constant_11972552373501197255237350(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1197255237350");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_11972552474301197255247430(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1197255247430");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Collection_11972552545881197255254588(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1197255254588");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Constant_11972552562001197255256200(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1197255256200");
  }

  private static void setupBasic_refCell_finalState1197255262342(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refCell_finalState");
  }

  private static void setupBasic_refNodeList_handleEvent1197255836498(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_handleEvent");
  }

  private static void setupLabel_Constant_1197252754699_1197252754699(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_property_methodName_1197252776280(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1197255237350_1197255237350(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1197255256200_1197255256200(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refCell_finalState_1197255262342(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_handleEvent_1197255836498(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  public static class _Inline2653_0 extends AbstractCellProvider {

    public _Inline2653_0() {
      super();
    }

    public EditorCell createEditorCell(EditorContext context) {
      return this.createEditorCell(context, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext context, SNode node) {
      return this.createProperty1197255269330(context, node);
    }

    public EditorCell createProperty1197255269330_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
      CellProviderWithRole provider = aProvider;
      provider.setAuxiliaryCellProvider(null);
      EditorCell editorCell = provider.createEditorCell(context);
      setupBasic_property_stateName1197255269330(editorCell, node, context);
      if (editorCell instanceof EditorCell_Label) {
        setupLabel_property_stateName_1197255269330((EditorCell_Label)editorCell, node, context);
      }
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      return editorCell;
    }

    public EditorCell createProperty1197255269330(EditorContext context, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, context);
      provider.setRole("stateName");
      provider.setNoTargetText("<no stateName>");
      provider.setReadOnly(true);
      provider.setAllowsEmptyTarget(false);
      EditorCell cellWithRole = this.createProperty1197255269330_internal(context, node, provider);
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = context.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
      } else
      return cellWithRole;
    }


    private static void setupBasic_property_stateName1197255269330(EditorCell editorCell, SNode node, EditorContext context) {
      editorCell.setCellId("property_stateName");
    }

    private static void setupLabel_property_stateName_1197255269330(EditorCell_Label editorCell, SNode node, EditorContext context) {
    }

}
  public static class handleEventListHandler_2653_0 extends RefNodeListHandler {

    public handleEventListHandler_2653_0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(context);
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      return super.createSeparatorCell(context);
    }

}

}
