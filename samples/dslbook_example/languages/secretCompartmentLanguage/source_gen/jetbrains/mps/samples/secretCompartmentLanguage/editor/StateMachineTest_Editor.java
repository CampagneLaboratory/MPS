package jetbrains.mps.samples.secretCompartmentLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cells.EditorCell;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import jetbrains.mps.lang.editor.cellProviders.RefCellCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.style.Style;
import jetbrains.mps.nodeEditor.style.StyleAttributes;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.nodeEditor.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.nodeEditor.cellMenu.DefaultReferenceSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class StateMachineTest_Editor extends DefaultNodeEditor {

  /* package */AbstractCellListHandler myListHandler_1197252973061;

  public EditorCell createEditorCell(EditorContext context, SNode node) {
    return this.createCollection1197246928085(context, node);
  }

  public EditorCell createCollection1197246928085(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(context, node);
    setupBasic_Collection_11972469280851197246928085(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createCollection1197246935790(context, node));
    editorCell.addEditorCell(this.createConstant1197252967903(context, node, ""));
    editorCell.addEditorCell(this.createRefNodeList1197252973061(context, node));
    return editorCell;
  }

  public EditorCell createCollection1197246935790(EditorContext context, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(context, node);
    setupBasic_Collection_11972469357901197246935790(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.addEditorCell(this.createRefCell1197247831194(context, node));
    editorCell.addEditorCell(this.createConstant1197246937386(context, node, "State Machine Test"));
    return editorCell;
  }

  public EditorCell createConstant1197246937386(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11972469373861197246937386(editorCell, node, context);
    setupLabel_Constant_1197246937386_1197246937386(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createConstant1197252967903(EditorContext context, SNode node, String text) {
    EditorCell_Constant editorCell = new EditorCell_Constant(context, node, text);
    setupBasic_Constant_11972529679031197252967903(editorCell, node, context);
    setupLabel_Constant_1197252967903_1197252967903(editorCell, node, context);
    editorCell.setDefaultText("");
    return editorCell;
  }

  public EditorCell createRefNodeList1197252973061(EditorContext context, SNode node) {
    if (this.myListHandler_1197252973061 == null) {
      this.myListHandler_1197252973061 = new StateMachineTest_Editor.testMethodListHandler_1076_0(node, "testMethod", context);
    }
    EditorCell_Collection editorCell = this.myListHandler_1197252973061.createCells(context, new CellLayout_Vertical(), false);
    setupBasic_refNodeList_testMethod1197252973061(editorCell, node, context);
    editorCell.setGridLayout(false);
    editorCell.setUsesBraces(false);
    editorCell.setCanBeFolded(false);
    editorCell.putUserObject(EditorCell.ROLE, this.myListHandler_1197252973061.getElementRole());
    return editorCell;
  }

  public EditorCell createRefCell1197247831194_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
    CellProviderWithRole provider = aProvider;
    provider.setAuxiliaryCellProvider(new StateMachineTest_Editor._Inline1076_0());
    EditorCell editorCell = provider.createEditorCell(context);
    setupBasic_refCell_stateMachine1197247831194(editorCell, node, context);
    if (editorCell instanceof EditorCell_Label) {
      setupLabel_refCell_stateMachine_1197247831194((EditorCell_Label)editorCell, node, context);
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    return editorCell;
  }

  public EditorCell createRefCell1197247831194(EditorContext context, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, context);
    provider.setRole("stateMachine");
    provider.setNoTargetText("<no stateMachine>");
    provider.setReadOnly(false);
    provider.setAllowsEmptyTarget(false);
    EditorCell cellWithRole = this.createRefCell1197247831194_internal(context, node, provider);
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = context.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
    } else
    return cellWithRole;
  }


  private static void setupBasic_Collection_11972469280851197246928085(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1197246928085");
  }

  private static void setupBasic_Collection_11972469357901197246935790(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Collection_1197246935790");
    {
      Style inlineStyle = new Style(editorCell) {
        {
          this.set(StyleAttributes.SELECTABLE, false);
        }

      };
      inlineStyle.apply(editorCell);
    }
  }

  private static void setupBasic_Constant_11972469373861197246937386(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1197246937386");
  }

  private static void setupBasic_refCell_stateMachine1197247831194(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refCell_stateMachine");
  }

  private static void setupBasic_Constant_11972529679031197252967903(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("Constant_1197252967903");
  }

  private static void setupBasic_refNodeList_testMethod1197252973061(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setCellId("refNodeList_testMethod");
  }

  private static void setupLabel_Constant_1197246937386_1197246937386(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refCell_stateMachine_1197247831194(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_Constant_1197252967903_1197252967903(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  private static void setupLabel_refNodeList_testMethod_1197252973061(EditorCell_Label editorCell, SNode node, EditorContext context) {
  }

  public static class _Inline1076_0 extends AbstractCellProvider {

    public _Inline1076_0() {
      super();
    }

    public EditorCell createEditorCell(EditorContext context) {
      return this.createEditorCell(context, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext context, SNode node) {
      return this.createProperty1197247836963(context, node);
    }

    public EditorCell createProperty1197247836963_internal(EditorContext context, SNode node, CellProviderWithRole aProvider) {
      CellProviderWithRole provider = aProvider;
      provider.setAuxiliaryCellProvider(null);
      EditorCell editorCell = provider.createEditorCell(context);
      setupBasic_property_stateMachineName1197247836963(editorCell, node, context);
      if (editorCell instanceof EditorCell_Label) {
        setupLabel_property_stateMachineName_1197247836963((EditorCell_Label)editorCell, node, context);
      }
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      return editorCell;
    }

    public EditorCell createProperty1197247836963(EditorContext context, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, context);
      provider.setRole("stateMachineName");
      provider.setNoTargetText("<no stateMachineName>");
      provider.setReadOnly(true);
      provider.setAllowsEmptyTarget(false);
      EditorCell cellWithRole = this.createProperty1197247836963_internal(context, node, provider);
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = context.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createRoleAttributeCell(context, attributeConcept, attributeKind, cellWithRole);
      } else
      return cellWithRole;
    }


    private static void setupBasic_property_stateMachineName1197247836963(EditorCell editorCell, SNode node, EditorContext context) {
      editorCell.setCellId("property_stateMachineName");
    }

    private static void setupLabel_property_stateMachineName_1197247836963(EditorCell_Label editorCell, SNode node, EditorContext context) {
    }

}
  public static class testMethodListHandler_1076_0 extends RefNodeListHandler {

    public testMethodListHandler_1076_0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }

    public SNode createNodeToInsert(EditorContext context) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, context, super.getElementRole());
    }

    public EditorCell createNodeCell(EditorContext context, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(context, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, context);
      return elementCell;
    }

    public EditorCell createEmptyCell(EditorContext context) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(context);
      this.installElementCellActions(super.getOwner(), null, emptyCell, context);
      return emptyCell;
    }

    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext context) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        SNode substituteInfoNode = listOwner;
        if (elementNode != null) {
          substituteInfoNode = elementNode;
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultReferenceSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), context));
        }
      }
    }

    public EditorCell createSeparatorCell(EditorContext context) {
      return super.createSeparatorCell(context);
    }

}

}
