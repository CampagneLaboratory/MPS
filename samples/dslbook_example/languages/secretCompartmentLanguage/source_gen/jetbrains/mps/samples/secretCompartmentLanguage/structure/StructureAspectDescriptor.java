package jetbrains.mps.samples.secretCompartmentLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptEvent = new ConceptDescriptorBuilder("jetbrains.mps.samples.secretCompartmentLanguage.structure.Event").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("eventName", "code").create();
  /*package*/ final ConceptDescriptor myConceptHandleEvent = new ConceptDescriptorBuilder("jetbrains.mps.samples.secretCompartmentLanguage.structure.HandleEvent").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("event").create();
  /*package*/ final ConceptDescriptor myConceptState = new ConceptDescriptorBuilder("jetbrains.mps.samples.secretCompartmentLanguage.structure.State").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("stateName").children(new String[]{"transition"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptStateMachine = new ConceptDescriptorBuilder("jetbrains.mps.samples.secretCompartmentLanguage.structure.StateMachine").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("stateMachineName").references("startState").children(new String[]{"event", "state"}, new boolean[]{true, true}).create();
  /*package*/ final ConceptDescriptor myConceptStateMachineTest = new ConceptDescriptorBuilder("jetbrains.mps.samples.secretCompartmentLanguage.structure.StateMachineTest").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").references("stateMachine").children(new String[]{"testMethod"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptStateMachineTestMethod = new ConceptDescriptorBuilder("jetbrains.mps.samples.secretCompartmentLanguage.structure.StateMachineTestMethod").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("methodName").references("finalState").children(new String[]{"handleEvent"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptTransition = new ConceptDescriptorBuilder("jetbrains.mps.samples.secretCompartmentLanguage.structure.Transition").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("trigger", "target").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptEvent, myConceptHandleEvent, myConceptState, myConceptStateMachine, myConceptStateMachineTest, myConceptStateMachineTestMethod, myConceptTransition);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0k, conceptFqName)) {
      case 0:
        return myConceptEvent;
      case 1:
        return myConceptHandleEvent;
      case 2:
        return myConceptState;
      case 3:
        return myConceptStateMachine;
      case 4:
        return myConceptStateMachineTest;
      case 5:
        return myConceptStateMachineTestMethod;
      case 6:
        return myConceptTransition;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0k = new String[]{"jetbrains.mps.samples.secretCompartmentLanguage.structure.Event", "jetbrains.mps.samples.secretCompartmentLanguage.structure.HandleEvent", "jetbrains.mps.samples.secretCompartmentLanguage.structure.State", "jetbrains.mps.samples.secretCompartmentLanguage.structure.StateMachine", "jetbrains.mps.samples.secretCompartmentLanguage.structure.StateMachineTest", "jetbrains.mps.samples.secretCompartmentLanguage.structure.StateMachineTestMethod", "jetbrains.mps.samples.secretCompartmentLanguage.structure.Transition"};
}
