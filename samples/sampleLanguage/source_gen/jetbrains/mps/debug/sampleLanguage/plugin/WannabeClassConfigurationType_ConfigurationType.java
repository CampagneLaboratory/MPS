package jetbrains.mps.debug.sampleLanguage.plugin;

/*Generated by MPS */

import com.intellij.execution.configurations.ConfigurationType;
import javax.swing.Icon;
import jetbrains.mps.ide.icons.IconManager;
import jetbrains.mps.plugins.MacrosUtil;
import java.util.List;
import com.intellij.execution.configurations.ConfigurationFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.extensions.Extensions;

public class WannabeClassConfigurationType_ConfigurationType implements ConfigurationType {
  private static final Icon ICON = IconManager.loadIcon(MacrosUtil.expandPath("${language_descriptor}/icons/runApp.png", "jetbrains.mps.lang.plugin"), true);

  private final List<ConfigurationFactory> myForeignFactories = ListSequence.fromList(new ArrayList<ConfigurationFactory>());

  public WannabeClassConfigurationType_ConfigurationType() {
  }

  public ConfigurationFactory[] getConfigurationFactories() {
    List<ConfigurationFactory> result = ListSequence.fromList(new ArrayList<ConfigurationFactory>());
    ListSequence.fromList(result).addElement(new WannabeClassConfiguration_Factory(this));
    ListSequence.fromList(result).addSequence(ListSequence.fromList(myForeignFactories));
    return ListSequence.fromList(result).toGenericArray(ConfigurationFactory.class);
  }

  public String getConfigurationTypeDescription() {
    return "";
  }

  public String getDisplayName() {
    return "WannabeClass Configuration Type";
  }

  public Icon getIcon() {
    return ICON;
  }

  @NonNls
  @NotNull
  public String getId() {
    return "WannabeClassConfigurationType";
  }

  public void addForeignFactory(ConfigurationFactory factory) {
    ListSequence.fromList(myForeignFactories).addElement(factory);
  }

  public static WannabeClassConfigurationType_ConfigurationType getInstance() {
    return ContainerUtil.findInstance(Extensions.getExtensions(CONFIGURATION_TYPE_EP), WannabeClassConfigurationType_ConfigurationType.class);
  }
}
