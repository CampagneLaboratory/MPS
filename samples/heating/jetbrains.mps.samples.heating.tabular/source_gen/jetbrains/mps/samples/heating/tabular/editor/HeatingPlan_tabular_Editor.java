package jetbrains.mps.samples.heating.tabular.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.editor.table.runtime.TableModelFactory;
import jetbrains.mps.lang.editor.table.runtime.TableModel;
import jetbrains.mps.lang.editor.table.runtime.AbstractTableModel;
import jetbrains.mps.samples.heating.behavior.HeatingPlan_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.samples.heating.behavior.DailyPlan_Behavior;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.openapi.editor.cells.EditorCell_Collection;
import jetbrains.mps.lang.editor.table.runtime.EditorCell_Table;

public class HeatingPlan_tabular_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"jetbrains.mps.samples.heating.tabular.editor.HeatingViews.tabular"});

  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }

  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createTable_wlaatl_a(editorContext, node);
  }

  private EditorCell createTable_wlaatl_a(EditorContext editorContext, SNode node) {
    TableModelFactory creator = new TableModelFactory() {
      public TableModel createTableModel(final SNode node, final EditorContext editorContext) {
        return new AbstractTableModel() {
          @Override
          public int getColumnCount() {
            return 1 + HeatingPlan_Behavior.call_numberOfDayPlans_3409470686615095506(node);
          }

          @Override
          public int getRowCount() {
            return 1 + 24;
          }

          @Override
          public SNode getValueAt(int row, int column) {
            if (row == 0 && column > 0) {
              return SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getTargets(node, "dailyPlans", true)).getElement(column - 1), "applicability", true);
            }
            if (column == 0 && row > 0) {
              return null;
            }
            if (row > 0 && column > 0) {
              SNode dailyPlan = ListSequence.fromList(SLinkOperations.getTargets(node, "dailyPlans", true)).getElement(column - 1);
              SNode item = DailyPlan_Behavior.call_planItemByStartTime_3409470686615450426(dailyPlan, row - 1);
              return item;
            }
            return null;
          }

          @Override
          public void createElement(int row, int column) {
            if (row > 0 && column > 0) {
              SNode dailyPlan = ListSequence.fromList(SLinkOperations.getTargets(node, "dailyPlans", true)).getElement(column - 1);
              SNode planItem = DailyPlan_Behavior.call_planItemByStartTime_3409470686615450426(dailyPlan, row - 1);
              if (planItem == null) {
                SNode item = SNodeFactoryOperations.addNewChild(dailyPlan, "items", "jetbrains.mps.samples.heating.structure.PlanItem");
                SPropertyOperations.set(item, "start", "" + (row - 1));
              }
            }
          }

          @Override
          public void insertColumn(int columnNumber) {
            if (columnNumber <= 0) {
              return;
            }
            ListSequence.fromList(SLinkOperations.getTargets(node, "dailyPlans", true)).insertElement(columnNumber - 1, SNodeFactoryOperations.createNewNode("jetbrains.mps.samples.heating.structure.DailyPlan", null));
          }

          @Override
          public void insertRow(int rowNumber) {
            if (rowNumber <= 0) {
              return;
            }
            return;
          }

          @Override
          public void deleteColumn(int columnNumber) {
            if (columnNumber <= 0) {
              return;
            }
            SNode daiyPlan = ListSequence.fromList(SLinkOperations.getTargets(node, "dailyPlans", true)).getElement(columnNumber - 1);
            SNodeOperations.deleteNode(daiyPlan);
          }

          @Override
          public void deleteRow(int rowNumber) {
            if (rowNumber <= 0) {
              return;
            }
            return;
          }
        };
      }
    };
    EditorCell_Collection editorCell = EditorCell_Table.createTable(editorContext, node, creator.createTableModel(node, editorContext), "Table_wlaatl_a");
    editorCell.setCellId("Table_wlaatl_a_0");
    editorCell.setBig(true);
    return editorCell;
  }
}
