package jetbrains.mps.samples.heating.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptApplicability = new ConceptDescriptorBuilder("jetbrains.mps.samples.heating.structure.Applicability").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptChangeEvent = new ConceptDescriptorBuilder("jetbrains.mps.samples.heating.structure.ChangeEvent").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("temperature").create();
  /*package*/ final ConceptDescriptor myConceptDailyPlan = new ConceptDescriptorBuilder("jetbrains.mps.samples.heating.structure.DailyPlan").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("displayName").children(new String[]{"items", "applicability", "customizes"}, new boolean[]{true, false, false}).create();
  /*package*/ final ConceptDescriptor myConceptDailyPlanReference = new ConceptDescriptorBuilder("jetbrains.mps.samples.heating.structure.DailyPlanReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("target").create();
  /*package*/ final ConceptDescriptor myConceptDayRange = new ConceptDescriptorBuilder("jetbrains.mps.samples.heating.structure.DayRange").super_("jetbrains.mps.samples.heating.structure.Applicability").parents("jetbrains.mps.samples.heating.structure.Applicability").properties("start", "end").alias("range", "").create();
  /*package*/ final ConceptDescriptor myConceptHeatingPlan = new ConceptDescriptorBuilder("jetbrains.mps.samples.heating.structure.HeatingPlan").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"dailyPlans"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptNotSpecified = new ConceptDescriptorBuilder("jetbrains.mps.samples.heating.structure.NotSpecified").super_("jetbrains.mps.samples.heating.structure.Applicability").parents("jetbrains.mps.samples.heating.structure.Applicability").alias("not specified", "").create();
  /*package*/ final ConceptDescriptor myConceptSlot = new ConceptDescriptorBuilder("jetbrains.mps.samples.heating.structure.Slot").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("start").children(new String[]{"event"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptSpecificDay = new ConceptDescriptorBuilder("jetbrains.mps.samples.heating.structure.SpecificDay").super_("jetbrains.mps.samples.heating.structure.Applicability").parents("jetbrains.mps.samples.heating.structure.Applicability").properties("day").alias("specific day", "").create();
  /*package*/ final ConceptDescriptor myConceptWeekDays = new ConceptDescriptorBuilder("jetbrains.mps.samples.heating.structure.WeekDays").super_("jetbrains.mps.samples.heating.structure.Applicability").parents("jetbrains.mps.samples.heating.structure.Applicability").alias("week days", "").create();
  /*package*/ final ConceptDescriptor myConceptWeekendDay = new ConceptDescriptorBuilder("jetbrains.mps.samples.heating.structure.WeekendDay").super_("jetbrains.mps.samples.heating.structure.Applicability").parents("jetbrains.mps.samples.heating.structure.Applicability").alias("weekend day", "").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptApplicability, myConceptChangeEvent, myConceptDailyPlan, myConceptDailyPlanReference, myConceptDayRange, myConceptHeatingPlan, myConceptNotSpecified, myConceptSlot, myConceptSpecificDay, myConceptWeekDays, myConceptWeekendDay);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0o, conceptFqName)) {
      case 0:
        return myConceptApplicability;
      case 1:
        return myConceptChangeEvent;
      case 2:
        return myConceptDailyPlan;
      case 3:
        return myConceptDailyPlanReference;
      case 4:
        return myConceptDayRange;
      case 5:
        return myConceptHeatingPlan;
      case 6:
        return myConceptNotSpecified;
      case 7:
        return myConceptSlot;
      case 8:
        return myConceptSpecificDay;
      case 9:
        return myConceptWeekDays;
      case 10:
        return myConceptWeekendDay;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0o = new String[]{"jetbrains.mps.samples.heating.structure.Applicability", "jetbrains.mps.samples.heating.structure.ChangeEvent", "jetbrains.mps.samples.heating.structure.DailyPlan", "jetbrains.mps.samples.heating.structure.DailyPlanReference", "jetbrains.mps.samples.heating.structure.DayRange", "jetbrains.mps.samples.heating.structure.HeatingPlan", "jetbrains.mps.samples.heating.structure.NotSpecified", "jetbrains.mps.samples.heating.structure.Slot", "jetbrains.mps.samples.heating.structure.SpecificDay", "jetbrains.mps.samples.heating.structure.WeekDays", "jetbrains.mps.samples.heating.structure.WeekendDay"};
}
