package jetbrains.mps.samples.heating.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferencePresentationContext;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.SNodePointer;

public class DailyPlanReference_Constraints extends BaseConstraintsDescriptor {
  public DailyPlanReference_Constraints() {
    super("jetbrains.mps.samples.heating.structure.DailyPlanReference");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("target", new BaseReferenceConstraintsDescriptor("target", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public boolean hasPresentation() {
            return true;
          }

          @Override
          public String getPresentation(final IOperationContext operationContext, final ReferencePresentationContext _context) {
            String presentation = BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(_context.getParameterNode(), "applicability", true), "virtual_getPresentation_1213877396640", new Object[]{});
            System.out.println("AAAAa " + presentation);
            return presentation;
          }

          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_y2k5og_a0a2a0a0a1a0b0a1a1;
          }

          @Override
          public Scope createScope(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            return new ListScope(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.getAncestor(_context.getContextNode(), "jetbrains.mps.samples.heating.structure.HeatingPlan", false, false), "dailyPlans", true)).where(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return neq_y2k5og_a0a0a0a0a0a0a0a0a3a0a0a1a0b0a1a1(it, _context.getContextNode());
              }
            })) {
              public String getName(SNode child) {
                return BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(SNodeOperations.cast(child, "jetbrains.mps.samples.heating.structure.DailyPlan"), "applicability", true), "virtual_getPresentation_1213877396640", new Object[]{});
              }
            };
          }
        };
      }
    });
    return references;
  }

  private static SNodePointer breakingNode_y2k5og_a0a2a0a0a1a0b0a1a1 = new SNodePointer("r:85427802-2815-4ede-beac-6d6b51b72018(jetbrains.mps.samples.heating.constraints)", "935069066463107223");

  private static boolean neq_y2k5og_a0a0a0a0a0a0a0a0a3a0a0a1a0b0a1a1(Object a, Object b) {
    return !((a != null ? a.equals(b) : a == b));
  }
}
