package jetbrains.mps.samples.heating.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class DailyPlan_Constraints extends BaseConstraintsDescriptor {
  public DailyPlan_Constraints() {
    super("jetbrains.mps.samples.heating.structure.DailyPlan");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("displayName", new BasePropertyConstraintsDescriptor("displayName", this) {
      @Override
      public boolean hasOwnGetter() {
        return true;
      }

      @Override
      public Object getValue(SNode node) {
        String propertyName = "displayName";
        return BehaviorReflection.invokeVirtual(String.class, SLinkOperations.getTarget(node, "applicability", true), "virtual_getPresentation_1213877396640", new Object[]{});
      }
    });
    return properties;
  }
}
